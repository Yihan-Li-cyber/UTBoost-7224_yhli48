{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..a64ee89 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -52,7 +52,30 @@ compound_models = {\n     'cm7': (map2 | p2 & sh1,\n             (np.array([False, True]),\n              np.array([[True, False], [False, True]]))\n-            )\n+            ),\n+    # New test case for nested compound model issue\n+    'nested_cm1': (m.Pix2Sky_TAN() & (m.Linear1D(10) & m.Linear1D(5)),\n+                   (np.array([False, False, True, True]),\n+                    np.array([[True, True, False, False],\n+                              [True, True, False, False],\n+                              [False, False, True, False],\n+                              [False, False, False, True]])\n+                   )),\n+    # Additional nested cases to ensure robustness\n+    'nested_cm2': ((m.Linear1D(1) & m.Linear1D(2)) & (m.Linear1D(3) & m.Linear1D(4)),\n+                   (np.array([True, True, True, True]),\n+                    np.array([[True, False, False, False],\n+                              [False, True, False, False],\n+                              [False, False, True, False],\n+                              [False, False, False, True]])\n+                   )),\n+    'nested_cm3': ((m.Polynomial1D(1) & m.Polynomial1D(2)) & m.Pix2Sky_TAN(),\n+                   (np.array([False, False, True, True]),\n+                    np.array([[True, True, False],\n+                              [True, True, False],\n+                              [False, False, True],\n+                              [False, False, True]])\n+                   ))\n }\n \n \n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..e1bbe51 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,8 +1,35 @@\n+\n+def test_write_rst_with_header_rows():\n+    \"\"\"Test writing a table with header_rows specified for the RST format.\"\"\"\n+    tbl = QTable(\n+        {\n+            \"wave\": [350.0, 950.0] * u.nm,\n+            \"response\": [0.7, 1.2] * u.count,\n+            \"ints\": [1, 2],\n+        }\n+    )\n+    out = StringIO()\n+    \n+    expected_lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"  350.0      0.7    1\",\n+        \"  950.0      1.2    2\",\n+        \"======= ======== ====\",\n+    ]\n+    \n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    assert out.getvalue().splitlines() == expected_lines\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n+import numpy as np\n from astropy.io import ascii\n+from astropy.table import QTable\n+import astropy.units as u\n \n from .common import assert_almost_equal, assert_equal\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..da0a7ba 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -108,8 +108,29 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+import pytest\n+import numpy as np\n+from astropy.table import Table\n+from astropy.utils.exceptions import AstropyUserWarning\n \n-def test_read_example():\n+def test_read_lowercase_commands(tmp_path):\n+    lowercase_qdp = \"\"\"\n+    ! Example with lowercase commands\n+    read serr 1 2\n+    1 0.5 1 0.5\n+    \"\"\"\n+    \n+    path = str(tmp_path / \"lowercase_test.qdp\")\n+    \n+    with open(path, \"w\") as fp:\n+        fp.write(lowercase_qdp)\n+    \n+    table = Table.read(path, format='ascii.qdp')\n+    assert len(table) == 1\n+    assert np.isclose(table['col1'][0], 1)\n+    assert np.isclose(table['col2'][0], 0.5)\n+    assert np.isclose(table['col3'][0], 1)\n+    assert np.isclose(table['col4'][0], 0.5)\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..e9e6f8c 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,47 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+import numpy as np\n+import pytest\n+from astropy.nddata import NDDataRef\n+\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be\n+    # a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..5081884 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -254,6 +254,20 @@ class TestTableFunctions(FitsTestCase):\n \n         t.close()\n \n+    def test_fitsrec_d_exponent_replacement(self):\n+        \"\"\"Test that the exponent separator is replaced from 'E' to 'D'.\"\"\"\n+        r1 = np.array([1.23456789e10, 9.87654321e-10])\n+        c1 = fits.Column(name='def', format='D', array=r1)\n+        hdu = fits.TableHDU.from_columns([c1])\n+        hdu.writeto(self.temp('test_d_exponent.fits'), overwrite=True)\n+        with open(self.temp('test_d_exponent.fits')) as f:\n+            contents = f.read()\n+            assert '1.23456789D+10' in contents\n+            assert '9.87654321D-10' in contents\n+\n+        with fits.open(self.temp('test_d_exponent.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data)\n+\n     def test_ascii_table(self):\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..fc13d7c 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1100,6 +1100,39 @@ class OverrideSettingsTests(SimpleTestCase):\n         django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertIsNone(default_storage.file_permissions_mode)\n+\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The default file permissions should be 0o644 if FILE_UPLOAD_PERMISSIONS\n+        is not explicitly set.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n+    def test_file_upload_permissions_memory_uploaded_file(self):\n+        \"\"\"\n+        Test that a file uploaded using MemoryUploadedFile has the correct permissions.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=0o644):\n+            # Simulate uploading a small file that would use MemoryUploadedFile.\n+            file = SimpleUploadedFile('small_file.txt', b'Small file content')\n+            path = default_storage.save('small_file.txt', file)\n+            self.addCleanup(default_storage.delete, path)\n+            file_permissions = oct(os.stat(default_storage.path(path)).st_mode & 0o777)\n+            self.assertEqual(file_permissions, '0o644')\n+\n+    def test_file_upload_permissions_temporary_uploaded_file(self):\n+        \"\"\"\n+        Test that a file uploaded using TemporaryUploadedFile has the correct permissions.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=0o644):\n+            # Simulate uploading a large file that would use TemporaryUploadedFile.\n+            content = b'A' * (2 * 1024 * 1024)  # 2MB to ensure it uses TemporaryUploadedFile\n+            file = SimpleUploadedFile('large_file.txt', content)\n+            path = default_storage.save('large_file.txt', file)\n+            self.addCleanup(default_storage.delete, path)\n+            file_permissions = oct(os.stat(default_storage.path(path)).st_mode & 0o777)\n+            self.assertEqual(file_permissions, '0o644')\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..f1c82ab 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,7 +75,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +84,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..4134e90 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,7 +238,26 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            \"en\\u2013dash\", 'trailingnewline\\n',\n         ]\n+        \n+    def test_unicode_validator_trailing_newline(self):\n+        # Test case for issue: Usernames should not have trailing newline\n+        invalid_usernames = ['user\\n', 'name\\n', 'testuser\\u000A']\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator_trailing_newline(self):\n+        # Test case for issue: Usernames should not have trailing newline\n+        invalid_usernames = ['user\\n', 'name\\n', 'testuser\\u000A']\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +277,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..59c6988 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,10 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..51192f2 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,6 +1,8 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n+from django.db.models.deletion import Collector\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n@@ -464,7 +466,37 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Create a user instance and ensure it can be fast-deleted\n+        u = User.objects.create()\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        \n+        # Delete the instance and check if the primary key is set to None\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_instance_with_custom_model(self):\n+        # Create a custom model instance without dependencies\n+        a = Avatar.objects.create(desc=\"test avatar\")\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(a))\n+        \n+        # Delete the instance and verify the primary key is set to None\n+        a.delete()\n+        self.assertIsNone(a.pk)\n+\n+    def test_delete_instance_with_related_model(self):\n+        # Create instances of Parent and Child models\n+        parent = Parent.objects.create(name='Parent')\n+        child = Child.objects.create(parent=parent, name='Child')\n+        \n+        # Delete the child instance and check PK is None\n+        child.delete()\n+        self.assertIsNone(child.pk)\n+\n+        # Ensure the parent instance PK is not affected\n+        self.assertIsNotNone(parent.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..0ec717f 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,3 +1,4 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n@@ -5,8 +6,44 @@ from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n \n+from django.contrib.auth.models import Permission\n+from django.contrib.contenttypes.models import ContentType\n+from django.test.utils import captured_stdout\n from .models import Proxy, UserProxy\n \n+class MigrationAuth0011TestCase(TestCase):\n+    def setUp(self):\n+        self.proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        \n+    def test_existing_proxy_permission_creation(self):\n+        \"\"\"Test case for existing permissions that should not cause IntegrityError.\"\"\"\n+        # Create existing permissions manually\n+        Permission.objects.create(\n+            content_type=self.proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=self.proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        \n+        # Attempt to run the migration\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+        \n+    def test_no_duplicate_permissions_after_migration(self):\n+        \"\"\"Ensure no duplicate permissions are created during migration.\"\"\"\n+        initial_permission_count = Permission.objects.filter(content_type=self.proxy_model_content_type).count()\n+        \n+        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        \n+        final_permission_count = Permission.objects.filter(content_type=self.proxy_model_content_type).count()\n+        \n+        self.assertEqual(initial_permission_count, final_permission_count)\n+\n update_proxy_permissions = import_module('django.contrib.auth.migrations.0011_update_proxy_permissions')\n \n \n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..041225f 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -21,8 +21,29 @@ from django.utils.autoreload import WatchmanUnavailable\n \n from .utils import on_macos_with_hfs\n \n+import sys\n \n class TestIterModulesAndFiles(SimpleTestCase):\n+\n+    def test_manage_py_changes_detected(self):\n+        \"\"\"\n+        Test that changes to manage.py are detected by the autoreloader.\n+        \"\"\"\n+        manage_py = Path(sys.modules['__main__'].__file__).resolve()\n+        self.assertFileFound(manage_py)\n+\n+        # Simulate a change to manage.py\n+        original_content = manage_py.read_text()\n+        try:\n+            with manage_py.open('a') as f:\n+                f.write(\"\\n# Test change\\n\")\n+            # Clear caches to simulate reloading\n+            self.clear_autoreload_caches()\n+            # Ensure manage.py is still detected\n+            self.assertFileFound(manage_py)\n+        finally:\n+            # Revert changes to manage.py\n+            manage_py.write_text(original_content)\n     def import_and_cleanup(self, name):\n         import_module(name)\n         self.addCleanup(lambda: sys.path_importer_cache.clear())\n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..735a36f 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -136,11 +136,37 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         main_module = sys.modules['__main__']\n         self.assertFileFound(Path(main_module.__file__))\n \n-    def test_main_module_without_file_is_not_resolved(self):\n+    def test_path_with_embedded_null_bytes(self):\n+        for path in (\n+            'embedded_null_byte\\x00.py',\n+            'di\\x00rectory/embedded_null_byte.py',\n+        ):\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset(),\n+                )\n+\n+    def test_resolve_avoids_null_byte(self):\n+        paths = [\n+            Path('/Users/kez\\x00/not_real.py'),\n+            Path('/fake\\x00path/not_real.py'),\n+        ]\n+        for path in paths:\n+            with self.subTest(path=path):\n+                with self.assertRaises(ValueError):\n+                    _ = path.resolve(strict=True)\n         fake_main = types.ModuleType('__main__')\n         self.assertEqual(autoreload.iter_modules_and_files((fake_main,), frozenset()), frozenset())\n \n \n+import os\n+from django.utils import autoreload\n+from pathlib import Path\n+from django.test import SimpleTestCase\n+import types\n+import sys\n+\n class TestCommonRoots(SimpleTestCase):\n     def test_common_roots(self):\n         paths = (\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..09fd7d1 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1,5 +1,16 @@\n import importlib\n import inspect\n+class DebugPathConverterTests(SimpleTestCase):\n+\n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        Test that raising Http404 in a path converter's to_python method\n+        results in a technical 404 page when DEBUG is True.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n import os\n import re\n import sys\n@@ -12,6 +23,8 @@ from unittest import mock\n from django.core import mail\n from django.core.files.uploadedfile import SimpleUploadedFile\n from django.db import DatabaseError, connection\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.shortcuts import render\n from django.template import TemplateDoesNotExist\n from django.test import RequestFactory, SimpleTestCase, override_settings\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..e1f2194 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -80,6 +80,32 @@ class BinaryFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n \n @isolate_apps('invalid_models_tests')\n class CharFieldTests(SimpleTestCase):\n@@ -111,6 +137,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_negative_max_length(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=-1)\n@@ -124,6 +176,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_bad_max_length_value(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=\"bad\")\n@@ -137,6 +215,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_str_max_length_value(self):\n         class Model(models.Model):\n             field = models.CharField(max_length='20')\n@@ -150,6 +254,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_str_max_length_type(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=True)\n@@ -163,6 +293,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_non_iterable_choices(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=10, choices='bad')\n@@ -176,6 +332,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_non_iterable_choices_two_letters(self):\n         \"\"\"Two letters isn't a valid choice pair.\"\"\"\n         class Model(models.Model):\n@@ -191,6 +373,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_iterable_of_iterable_choices(self):\n         class ThingItem:\n             def __init__(self, value, display):\n@@ -272,6 +480,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_choices_named_group_bad_structure(self):\n         class Model(models.Model):\n             field = models.CharField(\n@@ -293,6 +527,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_choices_named_group_lazy(self):\n         class Model(models.Model):\n             field = models.CharField(\n@@ -317,6 +577,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_bad_validators(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=10, validators=[True])\n@@ -334,6 +620,32 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     @unittest.skipUnless(connection.vendor == 'mysql',\n                          \"Test valid only for MySQL\")\n     def test_too_long_char_field_under_mysql(self):\n@@ -352,6 +664,32 @@ class CharFieldTests(SimpleTestCase):\n             )\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n \n @isolate_apps('invalid_models_tests')\n class DateFieldTests(SimpleTestCase):\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..bfc4ee3 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -252,7 +252,22 @@ class WriterTests(SimpleTestCase):\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n \n-    def test_serialize_enums(self):\n+    def test_serialize_enum_with_translated_values(self):\n+        from django.utils.translation import gettext_lazy as _\n+\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        field = models.CharField(\n+            default=TranslatedEnum.GOOD,\n+            max_length=128,\n+        )\n+        serialized_field = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            serialized_field,\n+            \"models.CharField(default=migrations.test_writer.TranslatedEnum['GOOD'], max_length=128)\"\n+        )\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..47c725c 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from datetime import datetime\n \n@@ -316,7 +317,29 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+        tests = (\n+            # Original test case\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            # New test cases\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..2e32848 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,10 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.db import models\n+from django.test import SimpleTestCase, TestCase\n+from django.utils.translation import gettext_lazy as _\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n@@ -40,7 +44,26 @@ class Gender(models.TextChoices):\n     __empty__ = '(Undeclared)'\n \n \n-class ChoicesTests(SimpleTestCase):\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class EnumTest(TestCase):\n+    def setUp(self) -> None:\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..93fa9c3 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -187,7 +187,17 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertEqual(WhizIterEmpty(c='').c, '')        # Empty value\n \n \n-class GetChoicesTests(SimpleTestCase):\n+class GetFieldDisplayOverrideTests(TestCase):\n+    \n+    def test_overriding_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return \"something\"\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n \n     def test_empty_choices(self):\n         choices = []\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..309308f 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,4 @@\n+\n import pickle\n \n from django import forms\n@@ -148,7 +149,22 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n-class GetFieldDisplayTests(SimpleTestCase):\n+class InheritedChoicesGetFieldDisplayTests(SimpleTestCase):\n+\n+    def test_overriding_inherited_field_display(self):\n+        class Base(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Base A')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class Child(Base):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Child A'), ('B', 'Child B'), ('C', 'Child C')])\n+\n+        # Test if Child class correctly returns the display value for overridden and new choices.\n+        self.assertEqual(Child(foo='A').get_foo_display(), 'Child A')\n+        self.assertEqual(Child(foo='B').get_foo_display(), 'Child B')\n+        self.assertEqual(Child(foo='C').get_foo_display(), 'Child C')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..6d3827f 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,6 +76,28 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+            ('ca', 'Catalan'),\n+        ],\n+    )\n+    def test_valid_variant_language_settings(self):\n+        # These language codes should not trigger an error as they have a base language available.\n+        tests = [\n+            'fr-CA',    # French Canadian\n+            'es-419',   # Latin American Spanish\n+            'de-at',    # Austrian German\n+            # A language + region + variant example.\n+            'ca-ES-valencia',  # Valencian Catalan\n+        ]\n+        for tag in tests:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n     def test_inconsistent_language_settings(self):\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..dbeebd1 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -176,7 +176,18 @@ class UtilsTests(SimpleTestCase):\n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n \n-    def test_number_formats_display_for_field(self):\n+    def test_jsonfield_display_as_readonly(self):\n+        tests = [\n+            ({\"foo\": \"bar\"}, '{\"foo\": \"bar\"}'),\n+            ({\"a\": {\"b\": \"c\"}}, '{\"a\": {\"b\": \"c\"}}'),\n+            ([\"a\", \"b\"], '[\"a\", \"b\"]'),\n+            (\"foo\", '\"foo\"'),\n+            ({(\"a\", \"b\"): \"c\"}, \"{('a', 'b'): 'c'}\"),  # Invalid JSON, should be handled gracefully.\n+        ]\n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                display_value = display_for_field(value, models.JSONField(), self.empty_value)\n+                self.assertEqual(display_value, expected_display)\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n \n",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..689f085 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +7,7 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n@@ -18,7 +20,52 @@ def get_connection_copy():\n     return test_connection\n \n \n-class TestDbSignatureTests(SimpleTestCase):\n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_foreign_key_dependency_order(self):\n+        # Test foreign key dependencies with non-circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj\": 2}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj_ref\": null, \"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=2)\n+        obj_ref = ObjectReference.objects.get(pk=2)\n+        self.assertIsNone(obj.obj_ref)  # obj_ref should not be set yet\n+        self.assertEqual(obj_ref.obj, obj)  # obj_ref.obj should be set to obj\n     def test_default_name(self):\n         # A test db name isn't set.\n         prod_name = 'hodor'\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..b97726f 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -159,6 +159,30 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_correct_hint_for_ambiguous_relationship(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through='AmbiguousRelationship')\n+\n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('field')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by 'invalid_models_tests.Group.field', but it has more than one foreign key from 'Group', which is ambiguous. You must specify which foreign key Django should use via the through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n             pass\n",
  "django__django-12700": "",
  "django__django-12708": "",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..4538180 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -697,7 +697,22 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n-    def test_fast_delete_combined_relationships(self):\n+    def test_zero_deletions_with_fk(self):\n+        \"\"\"\n+        Test that QuerySet.delete() returns a consistent result when no objects\n+        are deleted and the model has foreign keys. The result should be (0, {})\n+        \"\"\"\n+        # Assume models R and HiddenUser have a foreign key relationship\n+        self.assertEqual(R.objects.filter(id=-1).delete(), (0, {}))\n+\n+    def test_zero_deletions_without_fk(self):\n+        \"\"\"\n+        Test that QuerySet.delete() returns a consistent result when no objects\n+        are deleted and the model does not have foreign keys. The result should\n+        also be (0, {})\n+        \"\"\"\n+        # Assume model HiddenUserProfile does not have foreign keys\n+        self.assertEqual(HiddenUserProfile.objects.filter(id=-1).delete(), (0, {}))\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n         origin = Origin.objects.create()\n",
  "django__django-12856": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 7fb65b7..7c482aa 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1935,6 +1935,109 @@ class Model(metaclass=ModelBase):\n \n # ORDERING METHODS #########################\n \n+from django.core.checks import Error\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.db import connections\n+from django.db.models import CheckConstraint\n+from django.db import router\n+\n+class TestUniqueConstraint(SimpleTestCase):\n+    databases = '__all__'\n+\n+    def test_unique_constraint_pointing_to_missing_field(self):\n+        class Model(models.Model):\n+            class Meta:\n+                constraints = [models.UniqueConstraint(fields=['missing_field'], name='name')]\n+\n+        self.assertEqual(Model.check(databases=self.databases), [\n+            Error(\n+                \"'constraints' refers to the nonexistent field 'missing_field'.\",\n+                obj=Model,\n+                id='models.E012',\n+            ),\n+        ])\n+\n+    def test_unique_constraint_pointing_to_m2m_field(self):\n+        class Model(models.Model):\n+            m2m = models.ManyToManyField('self')\n+\n+            class Meta:\n+                constraints = [models.UniqueConstraint(fields=['m2m'], name='name')]\n+\n+        self.assertEqual(Model.check(databases=self.databases), [\n+            Error(\n+                \"'constraints' refers to a ManyToManyField 'm2m', but ManyToManyFields are not permitted in 'constraints'.\",\n+                obj=Model,\n+                id='models.E013',\n+            ),\n+        ])\n+\n+    def test_unique_constraint_pointing_to_non_local_field(self):\n+        class Parent(models.Model):\n+            field1 = models.IntegerField()\n+\n+        class Child(Parent):\n+            field2 = models.IntegerField()\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['field2', 'field1'], name='name'),\n+                ]\n+\n+        self.assertEqual(Child.check(databases=self.databases), [\n+            Error(\n+                \"'constraints' refers to field 'field1' which is not local to model 'Child'.\",\n+                hint='This issue may be caused by multi-table inheritance.',\n+                obj=Child,\n+                id='models.E016',\n+            ),\n+        ])\n+\n+    def test_unique_constraint_with_valid_fields(self):\n+        class Model(models.Model):\n+            field1 = models.CharField(max_length=50)\n+            field2 = models.IntegerField()\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['field1', 'field2'], name='unique_field1_field2'),\n+                ]\n+\n+        self.assertEqual(Model.check(databases=self.databases), [])\n+\n+    def test_unique_constraint_with_invalid_field_names(self):\n+        class Model(models.Model):\n+            field1 = models.CharField(max_length=50)\n+            field2 = models.IntegerField()\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['field1', 'nonexistent_field'], name='unique_field1_field2'),\n+                ]\n+\n+        self.assertEqual(Model.check(databases=self.databases), [\n+            Error(\n+                \"'constraints' refers to the nonexistent field 'nonexistent_field'.\",\n+                obj=Model,\n+                id='models.E012',\n+            ),\n+        ])\n+\n+    def test_multiple_unique_constraints(self):\n+        class Model(models.Model):\n+            field1 = models.CharField(max_length=50)\n+            field2 = models.IntegerField()\n+            field3 = models.IntegerField()\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['field1', 'field2'], name='unique_field1_field2'),\n+                    models.UniqueConstraint(fields=['field2', 'field3'], name='unique_field2_field3'),\n+                ]\n+\n+        self.assertEqual(Model.check(databases=self.databases), [])\n+\n def method_set_order(self, ordered_obj, id_list, using=None):\n     if using is None:\n         using = DEFAULT_DB_ALIAS\n",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..490c78c 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,45 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_get_async_response(self):\n+        request = self.async_request_factory.get('/static/test/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_get_async_response_not_found(self):\n+        request = self.async_request_factory.get('/static/test/not-found.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n+\n+    async def test_static_file_response(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        await communicator.wait()\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..09164bb 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,19 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Original behavior verification\n+            (' multiple---dash and  space ', 'multiple-dash-and-space', False),\n+            ('\\t whitespace-in-value \\n', 'whitespace-in-value', False),\n+            ('underscore_in-value', 'underscore_in-value', False),\n+            ('__strip__underscore-value___', 'strip__underscore-value', False),\n+            ('--strip-dash-value---', 'strip-dash-value', False),\n+            ('__strip-mixed-value---', 'strip-mixed-value', False),\n+            ('_ -strip-mixed-value _-', 'strip-mixed-value', False),\n+            # New test cases for issue\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('--Leading and trailing--', 'leading-and-trailing', False),\n+            ('__Leading and trailing__', 'leading-and-trailing', False),\n+            ('--_Mixed--_Characters_--', 'mixed-characters', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..163e414 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2829,6 +2829,46 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        # Create Characters\n+        marley = Character.objects.create(username='Marley', last_action='2023-10-01')\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-01')\n+        \n+        # Create StumpJokes\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        # Create a form to test the queryset\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = Character\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n+\n+\n+from django.test import TestCase\n+from .models import Character, StumpJoke\n+from django import forms\n \n class FormFieldCallbackTests(SimpleTestCase):\n \n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..b1e7b3f 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -11,7 +11,32 @@ from django.test.utils import isolate_apps\n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n-    def test_single_parent(self):\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from different concrete models inherited from an abstract model are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Fields from different models should not be equal\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+        # The hash should also differ\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+        # Compare fields to ensure proper ordering\n+        self.assertLess(abstract_model_field.creation_counter, inherit1_model_field.creation_counter)\n+        self.assertLess(abstract_model_field.creation_counter, inherit2_model_field.creation_counter)\n+        self.assertLess(inherit1_model_field.creation_counter, inherit2_model_field.creation_counter)\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n \n@@ -347,4 +372,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "",
  "django__django-13551": "diff --git a/tests/auth_tests/models/__init__.py b/tests/auth_tests/models/__init__.py\nindex c6505e4..d1b0da6 100644\n--- a/tests/auth_tests/models/__init__.py\n+++ b/tests/auth_tests/models/__init__.py\n@@ -1,3 +1,4 @@\n+\n from .custom_permissions import CustomPermissionsUser\n from .custom_user import (\n     CustomUser, CustomUserWithoutIsActiveField, ExtensionUser,\n@@ -9,6 +10,7 @@ from .no_password import NoPasswordUser\n from .proxy import Proxy, UserProxy\n from .uuid_pk import UUIDUser\n from .with_foreign_key import CustomUserWithFK, Email\n+from .with_custom_email_field import CustomEmailField\n from .with_integer_username import IntegerUsernameUser\n from .with_last_login_attr import UserWithDisabledLastLoginField\n from .with_many_to_many import (\n@@ -22,4 +24,4 @@ __all__ = (\n     'IntegerUsernameUser', 'IsActiveTestUser1', 'MinimalUser',\n     'NoPasswordUser', 'Organization', 'Proxy', 'UUIDUser', 'UserProxy',\n     'UserWithDisabledLastLoginField',\n-)\n+)\n",
  "django__django-13590": "",
  "django__django-13658": "",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..5241d27 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -9,8 +10,41 @@ from django.test.utils import captured_stdin, captured_stdout\n \n \n class ShellCommandTestCase(SimpleTestCase):\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n \n-    def test_command_option(self):\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n         with self.assertLogs('test', 'INFO') as cm:\n             call_command(\n                 'shell',\n@@ -49,4 +83,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..90ae75c 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -967,7 +967,52 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n     factory = RequestFactory()\n \n-    def test_verbose_name_plural_inline(self):\n+    def test_verbose_name_inline_default_plural(self):\n+        class NonVerboseProfileInline(TabularInline):\n+            model = Profile\n+            verbose_name = 'Non-verbose childs'\n+\n+        class VerboseNameProfileInline(TabularInline):\n+            model = VerboseNameProfile\n+            verbose_name = 'Childs with verbose name'\n+\n+        class VerboseNamePluralProfileInline(TabularInline):\n+            model = VerboseNamePluralProfile\n+            verbose_name = 'Childs with verbose name plural'\n+\n+        class BothVerboseNameProfileInline(TabularInline):\n+            model = BothVerboseNameProfile\n+            verbose_name = 'Childs with both verbose names'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [\n+            NonVerboseProfileInline,\n+            VerboseNameProfileInline,\n+            VerboseNamePluralProfileInline,\n+            BothVerboseNameProfileInline,\n+        ]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        # Non-verbose model.\n+        self.assertContains(response, '<h2>Non-verbose childss</h2>')\n+        self.assertContains(response, 'Add another Non-verbose childs')\n+        self.assertNotContains(response, '<h2>Profiles</h2>')\n+        # Model with verbose name.\n+        self.assertContains(response, '<h2>Childs with verbose names</h2>')\n+        self.assertContains(response, 'Add another Childs with verbose name')\n+        self.assertNotContains(response, '<h2>Model with verbose name onlys</h2>')\n+        # Model with verbose name plural is not affected since verbose_name_plural is explicitly set.\n+        self.assertContains(response, '<h2>Childs with verbose name plurals</h2>')\n+        self.assertContains(response, 'Add another Childs with verbose name plural')\n+        self.assertNotContains(response, '<h2>Model with verbose name plural only</h2>')\n+        # Model with both verbose names.\n+        self.assertContains(response, '<h2>Childs with both verbose namess</h2>')\n+        self.assertContains(response, 'Add another Childs with both verbose names')\n+        self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n+        self.assertNotContains(response, 'Add another Model with both - name')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name_plural = 'Non-verbose childs'\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..bb1fbe2 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -596,6 +596,25 @@ class TestQuerying(TestCase):\n         )\n \n     def test_isnull_key_or_none(self):\n+        # Test cases to verify the issue fix for isnull=True on KeyTransform.\n+        # Objects without the 'j' key should be returned, not those with 'j': null.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+\n+        # Additional test cases to ensure functionality.\n+        # Objects where 'b' is null should be identified.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__b__isnull=True),\n+            self.objs[:2] + self.objs[4:],\n+        )\n+\n+        # Objects where 'b' is not null (exists and is not null) should be identified.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__b__isnull=False),\n+            [self.objs[2], self.objs[3]],\n+        )\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),\n",
  "django__django-13768": "diff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py\nindex b1feefd..3a1914a 100644\n--- a/tests/dispatch/tests.py\n+++ b/tests/dispatch/tests.py\n@@ -154,9 +154,49 @@ class DispatcherTests(SimpleTestCase):\n         result = a_signal.send_robust(sender=self, val='test')\n         self.assertEqual(result, [])\n \n+    def test_send_robust_logging(self):\n+        def fails(val, **kwargs):\n+            raise ValueError('logging test')\n+        a_signal.connect(fails)\n+        try:\n+            with self.assertLogs('django.dispatch', 'ERROR') as cm:\n+                result = a_signal.send_robust(sender=self, val='test')\n+            err = result[0][1]\n+            self.assertIsInstance(err, ValueError)\n+            self.assertEqual(err.args, ('logging test',))\n+            log_record = cm.records[0]\n+            self.assertIn('Error calling ', log_record.getMessage())\n+            self.assertIsNotNone(log_record.exc_info)\n+            _, exc_value, _ = log_record.exc_info\n+            self.assertIsInstance(exc_value, ValueError)\n+            self.assertEqual(str(exc_value), 'logging test')\n+        finally:\n+            a_signal.disconnect(fails)\n+        self.assertEqual(result, [])\n+\n     def test_send_robust_ignored_sender(self):\n         a_signal.connect(receiver_1_arg)\n         result = a_signal.send_robust(sender=self, val='test')\n+        self.assertEqual(result, [])\n+\n+    def test_send_robust_logging(self):\n+        def fails(val, **kwargs):\n+            raise ValueError('logging test')\n+        a_signal.connect(fails)\n+        try:\n+            with self.assertLogs('django.dispatch', 'ERROR') as cm:\n+                result = a_signal.send_robust(sender=self, val='test')\n+            err = result[0][1]\n+            self.assertIsInstance(err, ValueError)\n+            self.assertEqual(err.args, ('logging test',))\n+            log_record = cm.records[0]\n+            self.assertIn('Error calling ', log_record.getMessage())\n+            self.assertIsNotNone(log_record.exc_info)\n+            _, exc_value, _ = log_record.exc_info\n+            self.assertIsInstance(exc_value, ValueError)\n+            self.assertEqual(str(exc_value), 'logging test')\n+        finally:\n+            a_signal.disconnect(fails)\n         self.assertEqual(result, [(receiver_1_arg, 'test')])\n         a_signal.disconnect(receiver_1_arg)\n         self.assertTestIsClean(a_signal)\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..5b279ae 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -409,9 +409,19 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n         self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n \n     @isolate_apps('check_framework.apps.CheckPKConfig', kwarg_name='apps')\n+    def test_explicit_inherited_pk_manual_override(self):\n+        class CustomParent(models.Model):\n+            custom_id = models.BigAutoField(primary_key=True)\n+\n+        class CustomChild(CustomParent):\n+            pass\n+\n+        # Ensure no warnings are triggered for explicitly defined inherited PKs.\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n     def test_app_default_auto_field(self, apps):\n         class ModelWithPkViaAppConfig(models.Model):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..208a99b 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,8 +281,28 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from django.test import TestCase\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Create choices for the model choice field tests below.\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+        ChoiceModel.objects.create(pk=3, name='c')\n+\n+        # Test with an invalid choice and ensure the error message contains the invalid value\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +327,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..68bfde5 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -80,6 +80,11 @@ class ChildNullableParent(models.Model):\n class ToFieldChild(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, to_field='name', related_name='to_field_children')\n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+    \n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n \n # Multiple paths to the same model (#7110, #7125)\n class Category(models.Model):\n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..ddcfd7b 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -16,7 +17,17 @@ class QTests(SimpleTestCase):\n         self.assertEqual(q | Q(), q)\n         self.assertEqual(Q() | q, q)\n \n-    def test_combine_or_both_empty(self):\n+    def test_combine_dict_keys_with_and(self):\n+        # Test combining using & operator\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+\n+    def test_combine_dict_keys_with_or(self):\n+        # Test combining using | operator\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n         self.assertEqual(Q() | Q(), Q())\n \n     def test_combine_not_q_object(self):\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..1da4f36 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -28,12 +28,14 @@ from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n+from django.db.models import Q, Exists, OuterRef\n from django.utils.functional import SimpleLazyObject\n \n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n     RemoteEmployee, Result, SimulationRun, Time,\n )\n+from django.db.models import Q, Exists, OuterRef\n \n \n class BasicExpressionsTests(TestCase):\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..1d3f058 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1137,7 +1137,29 @@ class ResolverMatchTests(SimpleTestCase):\n         request = HttpRequest()\n         self.assertIsNone(request.resolver_match)\n \n-    def test_repr(self):\n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_functools_partial_handling(self):\n+        from functools import partial\n+        from django.urls import resolve\n+        from urlpatterns_reverse import views\n+\n+        tests = [\n+            ('partial', 'template.html', views.empty_view),\n+            ('partial_nested', 'nested_partial.html', views.nested_view),\n+            ('partial_wrapped', 'wrapped.html', views.wrapped_view),\n+        ]\n+        \n+        for name, template_name, view_func in tests:\n+            with self.subTest(name=name):\n+                partial_func = partial(view_func, template_name=template_name)\n+                resolved = resolve(f'/{name}/')\n+                # Check if the repr output includes the original function and arguments\n+                func_repr = f\"functools.partial({view_func!r}, template_name='{template_name}')\"\n+                expected_repr = (\n+                    f\"ResolverMatch(func={func_repr}, args=(), kwargs={{}}, \"\n+                    f\"url_name='{name}', app_names=[], namespaces=[], route='{name}/')\"\n+                )\n+                self.assertEqual(repr(resolved), expected_repr)\n         self.assertEqual(\n             repr(resolve('/no_kwargs/42/37/')),\n             \"ResolverMatch(func=urlpatterns_reverse.views.empty_view, \"\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..618ff3f 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,7 +1,9 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n+from django.test.utils import isolate_apps\n \n \n @isolate_apps('model_options')\n@@ -66,7 +68,28 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n+    \n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_mybigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_mysmallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +105,28 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n+    \n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_mybigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_mysmallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..519ee59 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2168,6 +2168,25 @@ class StartApp(AdminScriptTestCase):\n                     \"sure the name is a valid identifier.\".format(bad_name)\n                 )\n                 self.assertFalse(os.path.exists(testproject_dir))\n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        \"\"\"\n+        Test if startapp can handle trailing slashes in the directory name.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app1')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app1', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n+    def test_trailing_slash_in_non_existent_target_app_directory(self):\n+        \"\"\"\n+        Test if startapp handles trailing slashes in a non-existent directory name correctly.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'non_existent', 'app1')\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('non_existent', 'app1', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(app_dir), True)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n \n     def test_importable_name(self):\n         \"\"\"\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..cf715e4 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -2,6 +2,7 @@ import datetime\n import re\n from unittest import mock\n \n+from django.forms import forms\n from django.contrib.auth.forms import (\n     AdminPasswordChangeForm, AuthenticationForm, PasswordChangeForm,\n     PasswordResetForm, ReadOnlyPasswordHashField, ReadOnlyPasswordHashWidget,\n@@ -1020,7 +1021,17 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_readonly_password_hash_widget_label(self):\n+        \"\"\"\n+        Test that the ReadOnlyPasswordHashWidget's label does not contain a 'for' attribute,\n+        ensuring it doesn't point to a non-labelable element.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        self.assertIsNone(bound_field.field.widget.id_for_label('id'))\n+        self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-14580": "",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..ec75948 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -336,7 +336,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(non_form_errors, ['Please submit at most 1 form.'])\n+        self.assertIsInstance(non_form_errors, ErrorList)\n+        self.assertIn('nonform', non_form_errors.error_class)\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -358,7 +361,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(non_form_errors, ['Please submit at least 3 forms.'])\n+        self.assertIsInstance(non_form_errors, ErrorList)\n+        self.assertIn('nonform', non_form_errors.error_class)\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -982,7 +988,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(non_form_errors, ['You may only specify a drink once.'])\n+        self.assertIsInstance(non_form_errors, ErrorList)\n+        self.assertIn('nonform', non_form_errors.error_class)\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 6fb82ec..636d756 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -821,7 +821,30 @@ class ShadowingFieldsTests(SimpleTestCase):\n             )\n         ])\n \n-    def test_multiinheritance_clash(self):\n+    def test_issue_fix_m2m_through_fields(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        # The check should not raise a TypeError anymore.\n+        self.assertEqual(Child.check(), [])\n         class Mother(models.Model):\n             clash = models.IntegerField()\n \n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..558c917 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -294,8 +294,45 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n         })\n \n \n-@override_settings(ROOT_URLCONF='admin_views.urls')\n-class SeleniumTests(AdminSeleniumTestCase):\n+import json\n+from django.urls import path\n+from django.test import override_settings\n+from django.http import JsonResponse\n+from django.contrib.auth.models import User\n+from django.test import RequestFactory\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from admin_views.models import Question\n+\n+class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+    def serialize_result(self, obj, to_field_name):\n+        return super().serialize_result(obj, to_field_name) | {'posted': str(obj.posted)}\n+\n+class AutocompleteJsonViewTests(AdminSeleniumTestCase):\n+    def setUp(self):\n+        self.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+        self.factory = RequestFactory()\n+        self.url = '/autocomplete/'\n+        self.opts = {\n+            # Assuming such options are needed for the autocomplete request\n+        }\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+\n+    def test_serialize_result(self):\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view()(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n     available_apps = ['admin_views'] + AdminSeleniumTestCase.available_apps\n \n     def setUp(self):\n",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..017448e 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,6 +5085,39 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper method to test readonly ForeignKey fields for different admin sites.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='en', name='English')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser,\n+        )\n+        url = reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,))\n+        response = self.client.get(url)\n+        self.assertEqual(response.status_code, 200)\n+        # Check if the link is correctly generated\n+        self.assertContains(response, reverse(f'{admin_site}:admin_views_language_change', args=(language.pk,)))\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey fields for the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey fields for a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('site2')\n+\n     def test_change_form_renders_correct_null_choice_value(self):\n         \"\"\"\n         Regression test for #17911.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..80247bd 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n+from .models import Category\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +344,50 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        \n+        # Test that the hash of the same value is consistent\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        \n+        # Test that different values have different hashes\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+    \n+    def test_create_option_with_data_attributes(self):\n+        class CustomModelChoiceField(forms.ModelChoiceField):\n+            def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+                context = super().create_option(name, value, label, selected, index, subindex, attrs)\n+                if not value:\n+                    return context\n+                show_fields = {self.c1.pk: ['first_name', 'last_name']}\n+                if value in show_fields:\n+                    context['attrs']['data-fields'] = json.dumps(show_fields[value])\n+                return context\n+\n+        field = CustomModelChoiceField(Category.objects.all())\n+        rendered = field.widget.render('name', [self.c1.pk])\n+        \n+        # Ensure that the data-fields attribute is correctly added\n+        self.assertIn('data-fields', rendered)\n+        self.assertIn(json.dumps(['first_name', 'last_name']), rendered)\n+\n+    def test_create_option_without_data_attributes(self):\n+        class CustomModelChoiceField(forms.ModelChoiceField):\n+            def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+                context = super().create_option(name, value, label, selected, index, subindex, attrs)\n+                if not value:\n+                    return context\n+                show_fields = {self.c1.pk: ['first_name', 'last_name']}\n+                if value in show_fields:\n+                    context['attrs']['data-fields'] = json.dumps(show_fields[value])\n+                return context\n+\n+        field = CustomModelChoiceField(Category.objects.all())\n+        rendered = field.widget.render('name', [self.c2.pk])\n+\n+        # Ensure that the data-fields attribute is not added for values not in show_fields\n+        self.assertNotIn('data-fields', rendered)\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..6976887 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,7 +793,27 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n-    def test_rename_m2m_target_model(self):\n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n             migrations.CreateModel(\"Rider\", fields=[\n",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..7ed3788 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -154,7 +154,23 @@ class MultiValueFieldTest(SimpleTestCase):\n             \"\"\",\n         )\n \n-    def test_form_as_table_data(self):\n+    def test_multivalue_widget_label_for(self):\n+        form = ComplexFieldForm()\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label for=\"id_field1\">Field1:</label></th>\n+            <td><input type=\"text\" name=\"field1_0\" id=\"id_field1_0\" required>\n+            <select multiple name=\"field1_1\" id=\"id_field1_1\" required>\n+            <option value=\"J\">John</option>\n+            <option value=\"P\">Paul</option>\n+            <option value=\"G\">George</option>\n+            <option value=\"R\">Ringo</option>\n+            </select>\n+            <input type=\"text\" name=\"field1_2_0\" id=\"id_field1_2_0\" required>\n+            <input type=\"text\" name=\"field1_2_1\" id=\"id_field1_2_1\" required></td></tr>\n+            \"\"\"\n+        )\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n             'field1_1': ['J', 'P'],\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..5dd5b1d 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -90,6 +90,8 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             'http://inv-.alid-.com',\n             'http://inv-.-alid.com',\n             '[a',\n+            '////]@N.AN',\n+            '#@A.bO',\n             'http://[a',\n             # Non-string.\n             23,\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..e5620f8 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -442,7 +442,30 @@ class NonAggregateAnnotationTestCase(TestCase):\n         with self.assertRaisesMessage(FieldDoesNotExist, \"Book has no field named 'other_rating'\"):\n             book = qs.defer('other_rating').get(other_rating=4)\n \n-    def test_mti_annotations(self):\n+    def test_expression_wrapper_not_in_empty(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        # Initially, all books should be selected (true) since ~Q(pk__in=[]) should include all records.\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_expression_wrapper_not_in_with_aggregation(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            rating_count=Count('rating'),\n+        )\n+        # Ensure all books are selected and rating_count matches.\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+        self.assertTrue(all(book.rating_count == 1 for book in books))\n+\n+    def test_aggregate_over_expression_wrapper_not_in(self):\n+        total_selected = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        ).aggregate(Sum('selected'))\n+        # Sum of selected should equal the total number of books.\n+        self.assertEqual(total_selected['selected__sum'], Book.objects.count())\n         \"\"\"\n         Fields on an inherited model can be referenced by an\n         annotated field.\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..7a75f9f 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -163,7 +164,16 @@ class CookieTests(BaseTests, SimpleTestCase):\n         decoded_messages = json.loads(value, cls=MessageDecoder)\n         self.assertEqual(messages, decoded_messages)\n \n-    def test_safedata(self):\n+    def test_extra_tags_empty_string(self):\n+        \"\"\"\n+        Test that the extra_tags attribute is correctly preserved as an\n+        empty string during the serialization and deserialization process.\n+        \"\"\"\n+        storage = self.get_storage()\n+        original_message = Message(constants.INFO, \"Test message\", extra_tags=\"\")\n+        encoded_message = storage._encode(original_message)\n+        decoded_message = storage._decode(encoded_message)\n+        self.assertEqual(decoded_message.extra_tags, \"\")\n         \"\"\"\n         A message containing SafeData is keeping its safe status when\n         retrieved from the message storage.\n",
  "django__django-15388": "",
  "django__django-15400": "diff --git a/tests/utils_tests/test_lazyobject.py b/tests/utils_tests/test_lazyobject.py\nindex f0097c4..aa4278f 100644\n--- a/tests/utils_tests/test_lazyobject.py\n+++ b/tests/utils_tests/test_lazyobject.py\n@@ -295,7 +295,7 @@ class LazyObjectTestCase(TestCase):\n \n         self.assertIsNot(obj, obj2)\n         self.assertIs(obj._wrapped, empty)\n-        self.assertIs(obj2._wrapped, empty)\n+import operator\n \n \n class SimpleLazyObjectTestCase(LazyObjectTestCase):\n",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..8371155 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,18 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test that an empty string for If-Modified-Since header does not raise an exception.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n+    def test_was_modified_since_invalid_date(self):\n+        \"\"\"\n+        Test that an invalid date format for If-Modified-Since header does not raise an exception.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"Invalid Date\", mtime=1))\n+\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..0d97863 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -8,6 +9,7 @@ from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n from django.core.management import BaseCommand, CommandError, find_commands\n+from argparse import ArgumentDefaultsHelpFormatter\n from django.core.management.utils import (\n     find_command,\n     get_random_secret_key,\n@@ -411,7 +413,36 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_custom_formatter_is_used(self):\n+        \"\"\"Test that the custom formatter is applied to the command parser.\"\"\"\n+        epilog = \"Example usage:\\n\\t./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\n+        parser = BaseCommand().create_parser(\n+            \"prog_name\",\n+            \"subcommand\",\n+            epilog=epilog,\n+            formatter_class=ArgumentDefaultsHelpFormatter,\n+        )\n+        self.assertEqual(parser.formatter_class, ArgumentDefaultsHelpFormatter)\n+        self.assertIn(\"Example usage:\\n\\t./manage.py tzkt_import\", parser.epilog)\n+\n+    def test_command_help_output_format(self):\n+        \"\"\"Test the output format of the command help to ensure correct line breaks.\"\"\"\n+        class TestCommand(BaseCommand):\n+            help = (\n+                \"Import a contract from tzkt.\\n\"\n+                \"Example usage:\\n\"\n+                \"    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\n+            )\n+\n+        command = TestCommand()\n+        parser = command.create_parser(\"manage.py\", \"tzkt_import\")\n+        output = parser.format_help()\n+\n+        expected_help_fragment = (\n+            \"Example usage:\\n\"\n+            \"    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\n+        )\n+        self.assertIn(expected_help_fragment, output)\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..7ab54ad 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,7 +1,9 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n+from django.core.serializers.json import DjangoJSONEncoder\n from django.utils.functional import lazystr\n from django.utils.html import (\n     conditional_escape,\n@@ -211,7 +213,37 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n-    def test_json_script_without_id(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"hello\": \"world\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"hello\": \"world\"}</script>',\n+        )\n+\n+    def test_json_script_custom_encoder_with_data(self):\n+        class UpperCaseEncoder(DjangoJSONEncoder):\n+            def default(self, o):\n+                return super().default(o).upper()\n+\n+        data = {\"key\": \"value\"}\n+        self.assertHTMLEqual(\n+            json_script(data, encoder=UpperCaseEncoder),\n+            '<script type=\"application/json\">{\"KEY\": \"VALUE\"}</script>',\n+        )\n+\n+    def test_json_script_custom_encoder_with_id(self):\n+        class SimpleEncoder(DjangoJSONEncoder):\n+            def default(self, o):\n+                return str(o).upper()\n+\n+        data = {\"id\": 123}\n+        self.assertHTMLEqual(\n+            json_script(data, element_id=\"test_id\", encoder=SimpleEncoder),\n+            '<script id=\"test_id\" type=\"application/json\">{\"ID\": \"123\"}</script>',\n+        )\n         self.assertHTMLEqual(\n             json_script({\"key\": \"value\"}),\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..5f667a9 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -129,6 +129,43 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 },\n             },\n         }\n+    def test_template_tags_with_duplicate_libraries_in_templates_options(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"duplicate_tags\", \"app_1.templatetags.duplicate_tags\"\n+                ),\n+                self.get_settings(\n+                    \"duplicate_tags\", \"app_2.templatetags.duplicate_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [\n+                    Error(\n+                        E003.msg.format(\n+                            \"'duplicate_tags'\",\n+                            \"'check_framework.template_test_apps.app_1.templatetags.duplicate_tags', \"\n+                            \"'check_framework.template_test_apps.app_2.templatetags.duplicate_tags'\",\n+                        ),\n+                        id=E003.id,\n+                    )\n+                ],\n+            )\n+\n+    def test_no_error_for_unique_library_names(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tags_1\", \"app_1.templatetags.unique_tags_1\"\n+                ),\n+                self.get_settings(\n+                    \"unique_tags_2\", \"app_2.templatetags.unique_tags_2\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n \n     @override_settings(\n         INSTALLED_APPS=[\n@@ -157,6 +194,43 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 check_for_template_tags_with_the_same_name(None),\n                 [self.error_same_tags],\n             )\n+    def test_template_tags_with_duplicate_libraries_in_templates_options(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"duplicate_tags\", \"app_1.templatetags.duplicate_tags\"\n+                ),\n+                self.get_settings(\n+                    \"duplicate_tags\", \"app_2.templatetags.duplicate_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [\n+                    Error(\n+                        E003.msg.format(\n+                            \"'duplicate_tags'\",\n+                            \"'check_framework.template_test_apps.app_1.templatetags.duplicate_tags', \"\n+                            \"'check_framework.template_test_apps.app_2.templatetags.duplicate_tags'\",\n+                        ),\n+                        id=E003.id,\n+                    )\n+                ],\n+            )\n+\n+    def test_no_error_for_unique_library_names(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tags_1\", \"app_1.templatetags.unique_tags_1\"\n+                ),\n+                self.get_settings(\n+                    \"unique_tags_2\", \"app_2.templatetags.unique_tags_2\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n \n     @override_settings(\n         INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n@@ -198,6 +272,43 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             ]\n         ):\n             self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+    def test_template_tags_with_duplicate_libraries_in_templates_options(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"duplicate_tags\", \"app_1.templatetags.duplicate_tags\"\n+                ),\n+                self.get_settings(\n+                    \"duplicate_tags\", \"app_2.templatetags.duplicate_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [\n+                    Error(\n+                        E003.msg.format(\n+                            \"'duplicate_tags'\",\n+                            \"'check_framework.template_test_apps.app_1.templatetags.duplicate_tags', \"\n+                            \"'check_framework.template_test_apps.app_2.templatetags.duplicate_tags'\",\n+                        ),\n+                        id=E003.id,\n+                    )\n+                ],\n+            )\n+\n+    def test_no_error_for_unique_library_names(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tags_1\", \"app_1.templatetags.unique_tags_1\"\n+                ),\n+                self.get_settings(\n+                    \"unique_tags_2\", \"app_2.templatetags.unique_tags_2\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n \n     @override_settings(\n         INSTALLED_APPS=[\n@@ -206,4 +317,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..549a5b3 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -395,6 +395,19 @@ class ProxyModelTests(TestCase):\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n \n+    def test_select_related_only_proxy(self):\n+        # Create instances of the proxy model and another model\n+        custom_model = ProxyCustomModel.objects.create(name=\"Proxy Name\")\n+        another_model = AnotherModel.objects.create(custom=custom_model)\n+        \n+        # Attempt to use select_related with only() on the proxy model\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        fetched_instance = qs.get()\n+        \n+        # Validate that the fetched instance is correct\n+        self.assertEqual(fetched_instance, another_model)\n+        self.assertEqual(fetched_instance.custom.name, \"Proxy Name\")\n+\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..c1c71e6 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -152,9 +152,17 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         )\n \n     def test_parameters(self):\n+        # Test that parameters are placed after the database name, which is incorrect\n+        # and should fail/produce a warning in current implementation.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"dbname\", \"-c\", \"SELECT 1\"], None),\n+        )\n+\n+    def test_correct_parameter_order(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n-            ([\"psql\", \"dbname\", \"--help\"], None),\n+            ([\"psql\", \"--help\", \"dbname\"], None),\n         )\n \n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n@@ -183,4 +191,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..df2bb44 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -179,6 +179,27 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertTrue(hasattr(formset.empty_form, \"custom_kwarg\"))\n         self.assertEqual(formset.empty_form.custom_kwarg, 1)\n \n+    def test_empty_permitted_ignored_empty_form(self):\n+        ArticleFormSet = formset_factory(CustomKwargForm, extra=1)\n+        formset = ArticleFormSet(form_kwargs={\"empty_permitted\": False})\n+        # Ensure empty_permitted is True for empty_form, regardless of passed form_kwargs\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n+    def test_empty_permitted_true_ignored_empty_form(self):\n+        ArticleFormSet = formset_factory(CustomKwargForm, extra=1)\n+        formset = ArticleFormSet(form_kwargs={\"empty_permitted\": True})\n+        # Ensure empty_permitted is True for empty_form, regardless of passed form_kwargs\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n+    def test_empty_form_does_not_crash_with_empty_permitted(self):\n+        ArticleFormSet = formset_factory(CustomKwargForm, extra=1)\n+        # This test ensures that rendering the empty_form does not raise KeyError\n+        formset = ArticleFormSet(form_kwargs={\"empty_permitted\": False})\n+        try:\n+            _ = formset.empty_form.as_p()  # Render the form as paragraph, shouldn't raise any error\n+        except KeyError:\n+            self.fail(\"Rendering empty_form raised KeyError unexpectedly!\")\n+\n     def test_formset_validation(self):\n         # FormSet instances can also have an error attribute if validation failed for\n         # any of the forms.\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..5597c74 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,26 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_null_and_empty(self):\n+        # Test empty string input\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        \n+        # Test None input\n+        # Depending on how None is handled, modify the expected output accordingly.\n+        # Here we assume it should be string \"None\" based on the provided original test patch.\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+        \n+        # Additional edge cases\n+        # Test input that only contains a minus sign\n+        self.assertEqual(nformat(\"-\", \".\"), \"-\")\n+        \n+        # Test input with a single digit\n+        self.assertEqual(nformat(\"0\", \".\"), \"0\")\n+        self.assertEqual(nformat(\"-1\", \".\"), \"-1\")\n+        \n+        # Test input with only decimal separator\n+        self.assertEqual(nformat(\".\", \".\"), \".\")\n+        self.assertEqual(nformat(\"-.5\", \".\"), \"-.5\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..718c23a 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -25,6 +26,8 @@ from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n+from django.urls import reverse\n+import urllib.parse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -892,7 +895,45 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n-    def test_custom_form(self):\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_pk(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via pk.\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.pk,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n                 model = ExtensionUser\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..cba8b18 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -508,6 +508,51 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n+import os\n+from datetime import datetime\n+from django.test import TestCase, override_settings\n+from django.contrib.sitemaps import Sitemap\n+from django.urls import path\n+from django.contrib.sitemaps import views\n+from django.utils.decorators import method_decorator\n+from django.utils.deprecation import RemovedInDjango50Warning\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+callable_lastmod_no_items_sitemap = {\n+    \"callable-lastmod\": CallableLastmodNoItemsSitemap,\n+}\n+\n+urlpatterns += [\n+    path(\n+        \"callable-lastmod-no-items/index.xml\",\n+        views.index,\n+        {\"sitemaps\": callable_lastmod_no_items_sitemap},\n+    ),\n+]\n+\n+class SitemapTests(TestCase):\n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/callable-lastmod-no-items/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    def test_callable_lastmod_with_items(self):\n+        sitemap_with_items = CallableLastmodNoItemsSitemap()\n+        sitemap_with_items.items = lambda: [object()]  # Simulate the presence of items\n+        self.assertIsNone(sitemap_with_items.get_latest_lastmod())\n+\n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..abdd924 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,3 +1,7 @@\n+\n+import unittest\n+from unittest import mock\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n@@ -1755,7 +1759,31 @@ class FileBasedCacheTests(BaseCacheTests, TestCase):\n             with self.assertRaises(OSError):\n                 cache.get(\"foo\")\n \n-    def test_empty_cache_file_considered_expired(self):\n+    def test_has_key_race_handling(self):\n+        # Test that when a FileNotFoundError is raised, has_key correctly returns False\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mocked_open.assert_called_once()\n+\n+    def test_has_key_with_expiry_handling(self):\n+        # Test that expired files are considered not to have the key\n+        self.assertIs(cache.add(\"key\", \"value\", timeout=1), True)  # short timeout to expire\n+        import time\n+        time.sleep(2)  # wait for the key to expire\n+        with mock.patch(\"django.core.cache.backends.filebased.FileBasedCache._is_expired\", return_value=True):\n+            self.assertIs(cache.has_key(\"key\"), False)\n+\n+    def test_has_key_concurrent_access(self):\n+        # Simulate a scenario where multiple threads access the cache simultaneously\n+        def access_cache():\n+            return cache.has_key(\"key\")\n+\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError):\n+            with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n+                results = list(executor.map(lambda _: access_cache(), range(5)))\n+                self.assertTrue(all(result == False for result in results))\n         cache_file = cache._key_to_file(\"foo\")\n         with open(cache_file, \"wb\") as fh:\n             fh.write(b\"\")\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..3436dea 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,7 +1,9 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n-from django.contrib.admin.templatetags.admin_list import date_hierarchy\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n@@ -33,7 +35,59 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' requires add permission in addition to change permission.\n+        \"\"\"\n+        # User with change permission only\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n+    def test_submit_row_save_as_new_no_permissions(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' is not shown without add and change permissions.\n+        \"\"\"\n+        no_perm_user = User.objects.create_user(\n+            username=\"no_perm_user\", password=\"secret\", is_staff=True\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = no_perm_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..e376819 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -236,7 +236,46 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n-    def test_alter_alter_table_model(self):\n+    def _test_alter_alter_field(self, alter_foo, alter_bar):\n+        \"\"\"\n+        Two AlterField operations should collapse into the second one.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                alter_foo,\n+                alter_bar,\n+            ],\n+            [\n+                alter_bar,\n+            ],\n+        )\n+    \n+    def test_alter_alter_field(self):\n+        self._test_alter_alter_field(\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+        )\n+        \n+        self._test_alter_alter_field(\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        )\n         self._test_alter_alter_model(\n             migrations.AlterModelTable(\"Foo\", \"a\"),\n             migrations.AlterModelTable(\"Foo\", \"b\"),\n",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..43b775d 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -25,8 +26,16 @@ class JoinTests(SimpleTestCase):\n     def test_join04(self):\n         output = self.engine.render_to_string(\"join04\", {\"a\": [\"alpha\", \"beta & me\"]})\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n-\n+    \n     # Joining with unsafe joiners doesn't result in unsafe strings.\n+\n+    @setup({\"join_autoescape_off\": '{% autoescape off %}{{ var_list|join:var_joiner }}{% endautoescape %}'})\n+    def test_join_autoescape_off(self):\n+        var_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        context = {\"var_list\": var_list, \"var_joiner\": \"<br/>\"}\n+        output = self.engine.render_to_string(\"join_autoescape_off\", context)\n+        expected_result = \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\"\n+        self.assertEqual(output, expected_result)\n     @setup({\"join05\": \"{{ a|join:var }}\"})\n     def test_join05(self):\n         output = self.engine.render_to_string(\n@@ -78,4 +87,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..cc374ae 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -568,8 +568,34 @@ class BulkCreateTests(TestCase):\n                 update_fields=[\"name\"],\n                 unique_fields=[\"big_auto_fields\"],\n             )\n+    @skipUnlessDBFeature(\"can_return_rows_from_bulk_insert\")\n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        # Initial objects\n+        TwoFields.objects.bulk_create(\n+            [\n+                TwoFields(f1=1, f2=1, name=\"a\"),\n+                TwoFields(f1=2, f2=2, name=\"b\"),\n+            ]\n+        )\n+        self.assertEqual(TwoFields.objects.count(), 2)\n \n-    def _test_update_conflicts_two_fields(self, unique_fields):\n+        # Conflicting and new objects\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"c\"),\n+            TwoFields(f1=2, f2=3, name=\"d\"),\n+            TwoFields(f1=3, f2=3, name=\"e\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\"],\n+        )\n+        \n+        # Check if IDs are returned and set in the instances\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n         TwoFields.objects.bulk_create(\n             [\n                 TwoFields(f1=1, f2=1, name=\"a\"),\n@@ -816,4 +842,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..6c8ca87 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1120,6 +1120,31 @@ def test_range_slider(orientation):\n     assert_allclose(slider.val, [0.1, 0.34])\n \n \n+@pytest.mark.parametrize(\"orientation\", [\"horizontal\", \"vertical\"])\n+def test_range_slider_initialization(orientation):\n+    fig, ax = plt.subplots()\n+\n+    # Test with initial values\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"\", valmin=0.0, valmax=1.0, orientation=orientation,\n+        valinit=[0.0, 0.0]\n+    )\n+\n+    # Check initial value is set correctly\n+    assert_allclose(slider.val, (0.0, 0.0))\n+\n+    # Verify the slider positions\n+    if orientation == \"vertical\":\n+        idx = [1, 0, 3, 2]\n+    else:\n+        idx = [0, 1, 2, 3]\n+    box = slider.poly.get_extents().transformed(ax.transAxes.inverted())\n+    assert_allclose(box.get_points().flatten()[idx], [0.0, 0.25, 0.0, 0.75])\n+\n+    # Test with edge values\n+    slider.set_val((0.0, 1.0))\n+    assert_allclose(slider.val, (0.0, 1.0))\n+\n def check_polygon_selector(event_sequence, expected_result, selections_count,\n                            **kwargs):\n     \"\"\"\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..a6887be 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -495,8 +495,38 @@ def test_keymaps():\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n \n+import pytest\n+import matplotlib as mpl\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+from matplotlib._pylab_helpers import Gcf\n+\n+\n+def test_no_backend_reset_rccontext():\n+    assert mpl.rcParams['backend'] != 'module://aardvark'\n+    with mpl.rc_context():\n+        mpl.rcParams['backend'] = 'module://aardvark'\n+    assert mpl.rcParams['backend'] == 'module://aardvark'\n+\n+\n+def test_get_backend_does_not_clear_figs():\n+    # Ensure get_backend does not clear figures created in an rc_context\n+\n+    # Create a figure inside an rc_context\n+    with rc_context():\n+        fig1 = plt.figure()\n+\n+    # Capture the state of Gcf before calling get_backend\n+    before = f'{id(Gcf)} {Gcf.figs!r}'\n+\n+    # Call get_backend\n+    get_backend()\n+\n+    # Capture the state of Gcf after calling get_backend\n+    after = f'{id(Gcf)} {Gcf.figs!r}'\n \n-def test_rcparams_reset_after_fail():\n+    # Check that the state before and after is the same\n+    assert before == after, '\\nBefore: ' + before + '\\nAfter: ' + after\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n     # global rc parameters were left in a modified state.\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..7b63741 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -20,8 +20,18 @@ import numpy as np\n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_axis_set_visible(fig_test, fig_ref):\n+    # Create a 3D subplot and attempt to set it invisible\n+    ax = fig_test.add_subplot(111, projection='3d')\n+    ax.scatter([0], [0], [0])\n+    ax.set_visible(False)\n+\n+    # Create a reference figure with no subplots\n+    fig_ref.add_subplot(111, frame_on=False)  # Blank subplot for comparison\n \n-def test_aspect_equal_error():\n+    # Check if the 3D subplot is not visible\n+    assert not ax.get_visible()\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex a51a857..2203fcc 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -1773,6 +1773,62 @@ def test_margins_errors(err, args, kwargs, match):\n \n \n @check_figures_equal(extensions=[\"png\"])\n+def test_line3d_no_attribute_error():\n+    # Initial setup with integer arrays\n+    x_s_0 = np.array([0])\n+    x_e_0 = np.array([1])\n+    y_s_0 = np.array([0])\n+    y_e_0 = np.array([1])\n+    z_s_0 = np.array([0])\n+    z_e_0 = np.array([1])\n+\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    ax.view_init(elev=90, azim=0)\n+    ax.set_zlim3d(-10, 10)\n+    clr_list = 'r-'\n+\n+    # Plot lines\n+    for n in range(np.size(z_s_0, axis=0)):\n+        ax.plot([int(x_s_0[n]), int(x_e_0[n])],\n+                [int(y_s_0[n]), int(y_e_0[n])],\n+                [int(z_s_0[n]), int(z_e_0[n])], clr_list)\n+\n+    # Finalize plot\n+    plt.xlabel('x')\n+    plt.ylabel('y')\n+    plt.title('90-0')\n+    plt.show()\n+\n+def test_line3d_with_numpy_arrays():\n+    # Test the case where numpy arrays are used directly\n+    x_s_0 = np.array([0.0])\n+    x_e_0 = np.array([1.0])\n+    y_s_0 = np.array([0.0])\n+    y_e_0 = np.array([1.0])\n+    z_s_0 = np.array([0.0])\n+    z_e_0 = np.array([1.0])\n+\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    ax.view_init(elev=90, azim=0)\n+    ax.set_zlim3d(-10, 10)\n+    clr_list = 'r-'\n+\n+    # Plot lines\n+    for n in range(np.size(z_s_0, axis=0)):\n+        ax.plot(x_s_0[n:n+1], y_s_0[n:n+1], z_s_0[n:n+1], clr_list)\n+\n+    # Finalize plot\n+    plt.xlabel('x')\n+    plt.ylabel('y')\n+    plt.title('90-0')\n+    plt.show()\n+\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from mpl_toolkits.mplot3d import Axes3D\n+\n def test_text_3d(fig_test, fig_ref):\n     ax = fig_ref.add_subplot(projection=\"3d\")\n     txt = Text(0.5, 0.5, r'Foo bar $\\int$')\n",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..de56e86 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,7 +774,21 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n-def test_get_set_draggable():\n+import pytest\n+import matplotlib.pyplot as plt\n+\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='shabnams')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n+\n+def test_legend_default_draggable():\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='default')\n+    leg = ax.legend()\n+    assert not leg.get_draggable()\n     legend = plt.legend()\n     assert not legend.get_draggable()\n     legend.set_draggable(True)\n",
  "matplotlib__matplotlib-23964": "",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..b40db30 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,25 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+@pytest.mark.filterwarnings(\"error\")\n+def test_constrained_layout_warning():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    \n+    a = np.linspace(0, 2 * np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    \n+    # Create a figure with constrained_layout set to False\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+\n+    # We expect no warnings to be raised here\n+    with pytest.warns(None) as record:\n+        plt.subplots_adjust(wspace=0)\n+        \n+    # Ensure no warnings were raised\n+    assert len(record) == 0\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..a686483 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -29,6 +29,13 @@ def test_create_lookup_table(N, result):\n     data = [(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)]\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_cmap_with_various_dtypes(dtype):\n+    # Test to prevent deprecation warnings related to dtype conversion\n+    cm = plt.get_cmap(\"viridis\")\n+    result = cm(np.array([0, 257, 256, 258], dtype=dtype))\n+    assert result is not None  # If the function returns without error, it's a success\n+\n \n def test_resampled():\n     \"\"\"\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..197ff46 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,27 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+def test_pickle_draggable_legend():\n+    fig, ax = plt.subplots()\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+    ax.plot(time, speed, label=\"speed\")\n+\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure 'FigureCanvasAgg' is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    loaded_fig = pickle.loads(pkl)\n+    loaded_fig.canvas.draw()\n+\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..c96718a 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -90,7 +90,32 @@ def _generate_complete_test_figure(fig_ref):\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n \n-@mpl.style.context(\"default\")\n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n+\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pkl = pickle.dumps(fig)\n+        loaded_fig = pickle.loads(pkl)\n+        loaded_fig.canvas.draw()  # Ensure the loaded figure can be drawn without errors\n+    except Exception as e:\n+        # If any exception occurs, the test should fail\n+        pytest.fail(f\"Pickle error: {e}\")\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..e5bfc85 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -445,8 +445,33 @@ def test_paddedbox():\n     pb = PaddedBox(ta, pad=10, patch_attrs={'facecolor': 'b'})\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mplcursors as mpl\n+from matplotlib.testing.decorators import check_figures_equal\n+import pytest\n+\n+def test_mplcursor_attribute_error():\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y1)\n+\n+    mpl.cursor()\n+\n+    # This function should be run under a GUI backend to replicate the issue\n+    # with clicking. Here we simulate the process and check for exceptions\n+    # that occur during the interaction.\n \n+    # Simulate the clicks on data points\n+    for i in range(5):  # Simulating multiple clicks\n+        fig.canvas.callbacks.process('button_press_event', None)\n+\n+    # Since we're testing a known failure, we expect an AttributeError\n+    with pytest.raises(AttributeError):\n+        fig.canvas.callbacks.process('button_release_event', None)\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..fd0de4f 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -8,8 +9,25 @@ from numpy.testing import assert_array_equal, assert_array_almost_equal\n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n \n+from pandas.testing import assert_frame_equal\n \n class TestPolyFit:\n+    \n+    def test_polyfit_with_missing_data(self, df):\n+        # Create a DataFrame with some missing values\n+        df_missing = df.copy()\n+        df_missing.iloc[5:10] = np.nan\n+\n+        groupby = GroupBy([\"group\"])\n+        \n+        # Apply PolyFit with missing data\n+        result_with_missing = PolyFit()(df_missing[[\"x\", \"y\"]], groupby, \"x\", {})\n+        \n+        # Apply PolyFit after dropping missing data\n+        result_without_missing = PolyFit()(df_missing[[\"x\", \"y\"]].dropna(), groupby, \"x\", {})\n+        \n+        # Assert the results are the same\n+        assert_frame_equal(result_with_missing, result_without_missing)\n \n     @pytest.fixture\n     def df(self, rng):\n",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..aa4ab5b 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -96,12 +96,48 @@ class TestContinuous:\n         s = Continuous()._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n+    def test_continuous_with_boolean_values(self):\n+        # Test that Continuous scale can handle boolean values without error\n+        x = pd.Series([True, False, True])\n+        s = Continuous()._setup(x, IntervalProperty())\n+        assert_array_equal(s(x), [1, 0, 1])\n+\n+    def test_continuous_with_only_true(self):\n+        # Test Continuous scale with all True values\n+        x = pd.Series([True, True, True])\n+        s = Continuous()._setup(x, IntervalProperty())\n+        assert_array_equal(s(x), [1, 1, 1])\n+\n+    def test_continuous_with_only_false(self):\n+        # Test Continuous scale with all False values\n+        x = pd.Series([False, False, False])\n+        s = Continuous()._setup(x, IntervalProperty())\n+        assert_array_equal(s(x), [0, 0, 0])\n+\n     def test_color_named_values(self, x):\n \n         cmap = color_palette(\"viridis\", as_cmap=True)\n         s = Continuous(\"viridis\")._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n+    def test_continuous_with_boolean_values(self):\n+        # Test that Continuous scale can handle boolean values without error\n+        x = pd.Series([True, False, True])\n+        s = Continuous()._setup(x, IntervalProperty())\n+        assert_array_equal(s(x), [1, 0, 1])\n+\n+    def test_continuous_with_only_true(self):\n+        # Test Continuous scale with all True values\n+        x = pd.Series([True, True, True])\n+        s = Continuous()._setup(x, IntervalProperty())\n+        assert_array_equal(s(x), [1, 1, 1])\n+\n+    def test_continuous_with_only_false(self):\n+        # Test Continuous scale with all False values\n+        x = pd.Series([False, False, False])\n+        s = Continuous()._setup(x, IntervalProperty())\n+        assert_array_equal(s(x), [0, 0, 0])\n+\n     def test_color_tuple_values(self, x):\n \n         cmap = color_palette(\"blend:b,g\", as_cmap=True)\n",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..886347d 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -721,8 +721,21 @@ class TestPairGrid:\n \n         g = ag.PairGrid(self.df)\n         assert g.data is self.df\n-\n-    def test_ignore_datelike_data(self):\n+    def test_pairplot_column_multiindex(self):\n+\n+        # Create a DataFrame with MultiIndex columns\n+        cols = pd.MultiIndex.from_arrays([[\"x\", \"y\"], [1, 2]])\n+        df = self.df[[\"x\", \"y\"]].set_axis(cols, axis=1)\n+        \n+        # Test pairplot with MultiIndex columns\n+        g = ag.pairplot(df)\n+        assert g.diag_vars == list(cols)\n+\n+        # Flatten the column names and test again to ensure it works both ways\n+        df_flat = df.copy()\n+        df_flat.columns = [\"\".join(map(str, col)) for col in df.columns]\n+        g_flat = ag.pairplot(df_flat)\n+        assert g_flat.diag_vars == list(df_flat.columns)\n \n         df = self.df.copy()\n         df['date'] = pd.date_range('2010-01-01', periods=len(df), freq='d')\n",
  "pallets__flask-4992": "",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..d83015f 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1636,6 +1636,35 @@ def test_prepared_request_complete_copy():\n     assert_copy(p, p.copy())\n \n \n+import pytest\n+from requests.exceptions import DecodeError as RequestsDecodeError, Timeout as RequestsTimeoutError\n+from requests.packages.urllib3.exceptions import DecodeError as Urllib3DecodeError, TimeoutError as Urllib3TimeoutError\n+from requests import Session\n+\n+def test_urllib3_decode_error_wrapping():\n+    s = Session()\n+    adapter = HTTPAdapter()\n+    s.mount('http://', adapter)\n+\n+    # Simulating a DecodeError from urllib3\n+    with pytest.raises(RequestsDecodeError):\n+        try:\n+            raise Urllib3DecodeError(\"This is a simulated decode error\")\n+        except Urllib3DecodeError as e:\n+            raise RequestsDecodeError(e)\n+\n+def test_urllib3_timeout_error_wrapping():\n+    s = Session()\n+    adapter = HTTPAdapter()\n+    s.mount('http://', adapter)\n+\n+    # Simulating a TimeoutError from urllib3\n+    with pytest.raises(RequestsTimeoutError):\n+        try:\n+            raise Urllib3TimeoutError(\"This is a simulated timeout error\")\n+        except Urllib3TimeoutError as e:\n+            raise RequestsTimeoutError(e)\n+\n def test_prepare_unicode_url():\n     p = PreparedRequest()\n     p.prepare(\n@@ -1663,4 +1692,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..4b384c9 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -743,6 +743,23 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             assert 'foo' in response.text\n             assert 'bar' in response.text\n+    def test_single_and_empty_hooks(self):\n+        \"\"\"Test registration of single function hooks and empty hook lists\"\"\"\n+        def dummy_hook(args):\n+            return args\n+        \n+        def assert_hooks_are_callable(hooks):\n+            for h in hooks['args']:\n+                assert callable(h) is True\n+\n+        # Test single hook registration\n+        r = requests.models.Request()\n+        r.register_hook('args', dummy_hook)\n+        assert_hooks_are_callable(r.hooks)\n+\n+        # Test empty list registration\n+        r = requests.models.Request(hooks={'args': []})\n+        assert len(r.hooks['args']) == 0\n \n     def test_session_persistent_cookies(self):\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..c189071 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -89,7 +89,27 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n-    def test_issue_2321_should_not_trigger(self) -> None:\n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n+    @set_config(notes=[\"!!!\", \"***\"])\n+    def test_multiple_punctuation_codetags(self) -> None:\n+        code = \"\"\"a = 1\n+                #!!!\n+                #***\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"!!!\", col_offset=17),\n+            MessageTest(msg_id=\"fixme\", line=3, args=\"***\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n         code = 'print(\"# TODO this should not trigger a fixme\")'\n         with self.assertNoMessages():\n             self.checker.process_tokens(_tokenize_str(code))\n@@ -119,4 +139,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..1af8cfe 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -56,6 +56,14 @@ reports = \"yes\"\n     check_configuration_file_reader(runner)\n \n \n+from pylint.lint import Run\n+import pytest\n+from pytest import CaptureFixture\n+from pylint.config.exceptions import _UnrecognizedOptionError\n+from pathlib import Path\n+\n+EMPTY_MODULE = Path(\"/path/to/empty/module\") # You should replace this with the actual path to an empty Python module for testing\n+\n def test_unknown_message_id(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown id.\"\"\"\n     Run([str(EMPTY_MODULE), \"--disable=12345\"], exit=False)\n@@ -71,7 +79,13 @@ def test_unknown_option_name(capsys: CaptureFixture) -> None:\n     assert \"E0015: Unrecognized option found: unknown-option=yes\" in output.out\n \n \n-def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n+def test_unrecognized_option_handling(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that pylint handles unrecognized options without printing a traceback.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([\"--unrecognized-option\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"E0015: Unrecognized option found: unrecognized-option\" in output.out\n+    assert \"Traceback\" not in output.err\n     \"\"\"Check that we correctly raise a message on an unknown short option.\"\"\"\n     with pytest.raises(_UnrecognizedOptionError):\n         Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..1752b4d 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1329,6 +1329,25 @@ class TestRunTC:\n                     [\".\", \"--recursive=y\"],\n                     code=0,\n                 )\n+    \n+    def test_ignore_paths_with_recursive(self) -> None:\n+        \"\"\"Test that paths specified in ignore-paths are ignored when --recursive=y is set.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n \n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..4191f07 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,6 +934,32 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n+def test_lint_identically_named_inner_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test linting on a module with an identically named inner module.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create the directory and files as per the issue description\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        # Check the 'a' directory to see if pylint handles this correctly\n+        linter.check([\"a\"])\n+    # Expect no parse-error message since __init__.py should not be required\n+    assert \"parse-error\" not in linter.stats.by_msg\n+\n+def test_import_from_identically_named_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test importing from a module with identically named file.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create the files as per the additional info in the issue\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+        # Check both 'r' and 'a' modules\n+        linter.check([\"r\", \"a\"])\n+    # Ensure no error related to no-name-in-module for 'b'\n+    assert \"no-name-in-module\" not in linter.stats.by_msg\n+    # Ensure no parse-error for the 'a' module\n+    assert \"parse-error\" not in linter.stats.by_msg\n+\n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n@@ -941,4 +967,30 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+def test_lint_identically_named_inner_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test linting on a module with an identically named inner module.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create the directory and files as per the issue description\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        # Check the 'a' directory to see if pylint handles this correctly\n+        linter.check([\"a\"])\n+    # Expect no parse-error message since __init__.py should not be required\n+    assert \"parse-error\" not in linter.stats.by_msg\n+\n+def test_import_from_identically_named_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test importing from a module with identically named file.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create the files as per the additional info in the issue\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+        # Check both 'r' and 'a' modules\n+        linter.check([\"r\", \"a\"])\n+    # Ensure no error related to no-name-in-module for 'b'\n+    assert \"no-name-in-module\" not in linter.stats.by_msg\n+    # Ensure no parse-error for the 'a' module\n+    assert \"parse-error\" not in linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..4ae690c 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -112,8 +113,34 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[1] == \"my_mod:1::()\"\n     assert out_lines[2] == \"my_mod:2::()\"\n \n+from _pytest.recwarn import WarningsRecorder\n+\n+def test_custom_braces_in_msg_template(linter: PyLinter) -> None:\n+    \"\"\"Tests the usage of custom braces in Pylint's message template.\"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"my_mod\")\n \n-def test_deprecation_set_output(recwarn):\n+    # Adding messages to be checked\n+    linter.add_message(\"C0301\", line=1)\n+    linter.add_message(\"E1101\", line=2)\n+\n+    # Getting the output\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"error\" }'\n+\n+def test_custom_braces_warning(recwarn: WarningsRecorder, linter: PyLinter) -> None:\n+    \"\"\"Tests that a warning is issued when the template contains unsupported fields.\"\"\"\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }} and unsupported {{ \"UnknownField\": \"{unknown}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"my_mod\")\n+    # Collect warnings\n+    linter.add_message(\"C0301\", line=1)\n+    warnings = list(recwarn)\n+    assert any(\"Don't recognize the argument 'unknown'\" in str(warning.message) for warning in warnings)\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n     # noinspection PyDeprecation\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..b201b21 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -288,7 +288,34 @@ class TestImportPath:\n         fn.write_text(\"def foo(x): return 40 + x\", encoding=\"utf-8\")\n         return fn\n \n-    def test_importmode_importlib(self, simple_module: Path, tmp_path: Path) -> None:\n+    def test_import_twice_same_module_importlib(self, simple_module: Path, tmp_path: Path) -> None:\n+        \"\"\"Ensure the same module is not imported twice with importlib mode.\"\"\"\n+        module1 = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        module2 = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        assert module1 is module2\n+        assert module1.__name__ in sys.modules\n+\n+    def test_import_different_modules_importlib(self, tmp_path: Path) -> None:\n+        \"\"\"Test importing different modules does not clash with importlib mode.\"\"\"\n+        # Create first simple module\n+        first_module_path = tmp_path / \"_src/tests/first_module.py\"\n+        first_module_path.parent.mkdir(parents=True, exist_ok=True)\n+        first_module_path.write_text(\"def foo(x): return 10 + x\", encoding=\"utf-8\")\n+        \n+        # Create second simple module\n+        second_module_path = tmp_path / \"_src/tests/second_module.py\"\n+        second_module_path.write_text(\"def bar(x): return 20 + x\", encoding=\"utf-8\")\n+        \n+        # Import both modules\n+        first_module = import_path(first_module_path, mode=\"importlib\", root=tmp_path)\n+        second_module = import_path(second_module_path, mode=\"importlib\", root=tmp_path)\n+        \n+        # Verify they are different and correctly imported\n+        assert first_module.foo(5) == 15  # type: ignore[attr-defined]\n+        assert second_module.bar(10) == 30  # type: ignore[attr-defined]\n+        assert first_module is not second_module\n+        assert first_module.__name__ in sys.modules\n+        assert second_module.__name__ in sys.modules\n         \"\"\"`importlib` mode does not change sys.path.\"\"\"\n         module = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n         assert module.foo(2) == 42  # type: ignore[attr-defined]\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..4e45729 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import py.io\n@@ -6,6 +7,32 @@ from _pytest.logging import ColoredLevelFormatter\n \n \n def test_coloredlogformatter():\n+    logfmt_with_name = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+\n+    record_with_name = logging.LogRecord(\n+        name=\"dummy.module\",\n+        level=logging.INFO,\n+        pathname=\"dummy/module.py\",\n+        lineno=20,\n+        msg=\"Test Message with Module\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    tw_with_name = py.io.TerminalWriter()\n+    tw_with_name.hasmarkup = True\n+    formatter_with_name = ColoredLevelFormatter(tw_with_name, logfmt_with_name)\n+    output_with_name = formatter_with_name.format(record_with_name)\n+    assert output_with_name == (\n+        \"\\x1b[32mINFO    \\x1b[0m dummy.module:module.py:20 Test Message with Module\"\n+    )\n+\n+    tw_with_name.hasmarkup = False\n+    formatter_with_name = ColoredLevelFormatter(tw_with_name, logfmt_with_name)\n+    output_with_name = formatter_with_name.format(record_with_name)\n+    assert output_with_name == (\n+        \"INFO     dummy.module:module.py:20 Test Message with Module\"\n+    )\n     logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n \n     record = logging.LogRecord(\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..a5b8b22 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -525,6 +525,22 @@ class TestAssert_reprcompare:\n         assert \"-\" + repr(nums_x) in expl\n         assert \"+\" + repr(nums_y) in expl\n \n+    def test_bytes_assertion_rewrite(self):\n+        \"\"\"Test assertion rewriting for byte strings.\"\"\"\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff[0] == \"b'' == b'42'\"\n+        assert \"Right contains more items, first extra item: 52\" in diff\n+        assert \"Full diff:\" in diff\n+        assert \"- b''\" in diff\n+        assert \"+ b'42'\" in diff\n+\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff[0] == \"b'' == b'1'\"\n+        assert \"Right contains more items, first extra item: 49\" in diff\n+        assert \"Full diff:\" in diff\n+        assert \"- b''\" in diff\n+        assert \"+ b'1'\" in diff\n+\n     def test_list_bad_repr(self):\n         class A:\n             def __repr__(self):\n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..6e42438 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,5 +1,8 @@\n+\n import os\n+from datetime import datetime\n from xml.dom import minidom\n+import platform\n \n import py\n \n@@ -157,7 +160,29 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n-    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n         # mock LogXML.node_reporter so it always sets a known duration to each test report object\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..1c57b75 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -153,4 +153,18 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+\n+\n+def test_broken_getattribute_and_repr():\n+    \"\"\"Test saferepr on object with both __getattribute__ and __repr__ raising exceptions.\"\"\"\n+    \n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError(\"Broken getattribute\")\n+        \n+        def __repr__(self):\n+            raise RuntimeError(\"Broken repr\")\n+    \n+    result = saferepr(SomeClass())\n+    assert result.startswith(\"<[RuntimeError('Broken repr'\")\n",
  "pytest-dev__pytest-7220": "",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..e579095 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,68 @@\n import os\n import sys\n+import os\n+\n+class TestCachingEvaluation:\n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"#7360\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert False\n+        \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr2=\"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+        \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n+        \n+    def test_no_caching_across_modules(self, testdir):\n+        \"\"\"Ensure that caching does not affect conditions across different modules.\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_no_caching_across_modules1=\"\"\"\n+            import pytest\n+\n+            condition = \"skip_this\"\n+\n+            @pytest.mark.skipif(\"condition == 'skip_this'\")\n+            def test_should_be_skipped():\n+                assert False\n+        \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_no_caching_across_modules2=\"\"\"\n+            import pytest\n+\n+            condition = \"dont_skip\"\n+\n+            @pytest.mark.skipif(\"condition == 'skip_this'\")\n+            def test_should_not_be_skipped():\n+                assert True\n+        \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n+\n from unittest import mock\n \n import pytest\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..03c5692 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -153,7 +153,57 @@ class TestEvaluation:\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n \n-class TestXFail:\n+import pytest\n+\n+class TestSkipping:\n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:3: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:3: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_location_reporting(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n+    def test_skipif_with_condition(self, testdir):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skipif(True, reason=\"always skip\")\n+            def test_skipif_true():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_sample.py:3: always skip\", \"*1 skipped*\"])\n+\n+    def test_skipif_with_condition_and_runxfail(self, testdir):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skipif(True, reason=\"always skip\")\n+            def test_skipif_true():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_sample.py:3: always skip\", \"*1 skipped*\"])\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..b892e87 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -331,6 +332,32 @@ class TestXFail:\n             [\"*test_one*test_this*\", \"*NOTRUN*hello\", \"*1 xfailed*\"]\n         )\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486: Test dynamic xfail during test execution that fails.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486: Test dynamic xfail during test execution that passes strictly.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+                assert 1\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     def test_xfail_xpass(self, testdir):\n         p = testdir.makepyfile(\n             test_one=\"\"\"\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..8d2bce7 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -9,6 +10,7 @@ from typing import List\n import attr\n \n import pytest\n+from _pytest.monkeypatch import MonkeyPatch\n from _pytest import pathlib\n from _pytest.config import Config\n from _pytest.pathlib import cleanup_numbered_dir\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..0742b8d 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,7 +574,35 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n-def test_ridgecv_store_cv_values():\n+import numpy as np\n+from sklearn.linear_model import RidgeClassifierCV\n+from sklearn.utils._testing import assert_array_equal\n+\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    # Test case with len(y.shape) == 1\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-0.8, -1.0], [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    r.fit(x, y)\n+\n+    assert r.cv_values_.shape == (n_samples, 1, n_alphas)\n+\n+    # Test case with len(y.shape) == 2\n+    y_multi = np.array([[1, 1, 1, -1, -1],\n+                        [1, -1, 1, -1, 1],\n+                        [-1, -1, 1, -1, -1]]).T\n+    n_targets = y_multi.shape[1]\n+\n+    r.fit(x, y_multi)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..eb6d20a 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -4,6 +4,9 @@\n \n import numpy as np\n from scipy.special import gammaln\n+from sklearn.utils.testing import assert_array_equal\n+from sklearn.metrics.cluster import adjusted_rand_score\n+from sklearn.exceptions import ConvergenceWarning, NotFittedError\n \n from sklearn.utils.testing import assert_raise_message\n from sklearn.utils.testing import assert_almost_equal\n@@ -21,8 +24,28 @@ from sklearn.utils.testing import assert_greater_equal, ignore_warnings\n COVARIANCE_TYPE = ['full', 'tied', 'diag', 'spherical']\n PRIOR_TYPE = ['dirichlet_process', 'dirichlet_distribution']\n \n-\n-def test_log_dirichlet_norm():\n+def test_bayesian_mixture_labels_storage():\n+    # Test that BayesianGaussianMixture stores labels_ after fitting\n+    rng = np.random.RandomState(42)\n+    rand_data = RandomData(rng)\n+    X = rand_data.X['full']  # Using 'full' covariance type for simplicity\n+    bgmm = BayesianGaussianMixture(n_components=rand_data.n_components,\n+                                   random_state=rng)\n+    bgmm.fit(X)\n+    assert hasattr(bgmm, 'labels_'), \"BayesianGaussianMixture should store labels_ after fitting.\"\n+    assert_array_equal(bgmm.predict(X), bgmm.labels_)\n+\n+def test_bayesian_mixture_fit_predict_equivalence():\n+    # Test that fit_predict method works and is equivalent to fit followed by predict\n+    rng = np.random.RandomState(42)\n+    rand_data = RandomData(rng)\n+    X = rand_data.X['full']\n+    bgmm = BayesianGaussianMixture(n_components=rand_data.n_components,\n+                                   random_state=rng)\n+    Y_pred_fit_predict = bgmm.fit_predict(X)\n+    bgmm.fit(X)\n+    Y_pred_separate = bgmm.predict(X)\n+    assert_array_equal(Y_pred_fit_predict, Y_pred_separate)\n     rng = np.random.RandomState(0)\n \n     weight_concentration = rng.rand(2)\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..5e847a2 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,7 +260,45 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n-def test_one_hot_encoder_no_categorical_features():\n+from sklearn.preprocessing import OneHotEncoder\n+import numpy as np\n+from sklearn.utils.testing import assert_array_equal, assert_raises\n+import pytest\n+import warnings\n+from scipy import sparse\n+\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0., 0., 0., 0.], [0., 1., 0., 0.]]))\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_unknown_strings_long_known_first():\n+    X = np.array(['longstring', 'short', 'medium', 'tiny']).reshape((-1, 1))\n+    X2 = np.array(['unknown', 'short']).reshape((-1, 1))\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0., 0., 0., 0.], [0., 1., 0., 0.]]))\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_unknown_strings_all_zeros():\n+    X = np.array(['a', 'b', 'c']).reshape((-1, 1))\n+    X2 = np.array(['d', 'e']).reshape((-1, 1))\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0., 0., 0.], [0., 0., 0.]]))\n+    assert_array_equal(X2, X2_passed)\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n     cat = [False, False, False]\n",
  "scikit-learn__scikit-learn-13142": "",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..9b69059 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,11 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n-                                   assert_raises)\n+                                   assert_raises, assert_allclose)\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n@@ -70,8 +71,21 @@ def test_kernel_pca_consistent_transform():\n     transformed2 = kpca.transform(X_copy)\n     assert_array_almost_equal(transformed1, transformed2)\n \n-\n-def test_kernel_pca_sparse():\n+def test_kernel_pca_sign_consistency():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+\n+    for eigen_solver in ['auto', 'arpack', 'dense']:\n+        transformed_X = np.zeros((20, 2))\n+        for i in range(20):\n+            kpca = KernelPCA(n_components=2, kernel='rbf', eigen_solver=eigen_solver, random_state=rng)\n+            transformed_X[i, :] = kpca.fit_transform(X)[0]\n+        \n+        # Check if all transformations are the same, considering signs\n+        first_transformation = transformed_X[0]\n+        for j in range(1, 20):\n+            # Each transformation should be either equal to the first or its negative\n+            assert_allclose(transformed_X[j], first_transformation) or assert_allclose(transformed_X[j], -first_transformation)\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 4594f40..e7fb5e7 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -123,6 +123,10 @@ class Pipeline(_BaseComposition):\n     (1, 20)\n     \"\"\"\n \n+    def __len__(self):\n+        \"\"\"Return the number of steps in the pipeline.\"\"\"\n+        return len(self.steps)\n+\n     # BaseEstimator interface\n     _required_parameters = ['steps']\n \n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..f4289c2 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -9,6 +10,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n import pytest\n \n import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n",
  "scikit-learn__scikit-learn-13497": "",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..4508c3e 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,8 +217,15 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n-\n-def test_pipeline():\n+def test_logistic_regression_cv_with_array():\n+    # Test to ensure no error is raised when numpy arrays are used as parameters\n+    set_config(print_changed_only=True)\n+    try:\n+        repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+    except ValueError as e:\n+        assert False, f\"Unexpected ValueError: {e}\"\n+    finally:\n+        set_config(print_changed_only=False)\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n     expected = \"\"\"\n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..202f85a 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,8 +160,33 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n+import numpy as np\n+import pytest\n+from sklearn.utils._testing import assert_raises\n+from sklearn.datasets import load_iris\n+from sklearn.neighbors import NeighborhoodComponentsAnalysis\n+\n+iris = load_iris()\n+iris_data = iris.data\n+iris_target = iris.target\n+\n+@pytest.mark.parametrize('param, value', [\n+    ('n_components', np.int32(3)),\n+    ('n_components', np.int64(3)),\n+    ('n_components', 3),  # native int should work too\n+    ('tol', np.float32(0.0001)),\n+    ('tol', np.float64(0.0001)),\n+    ('tol', 0.0001)  # native float should work too\n+])\n+def test_parameters_valid_types(param, value):\n+    # check that no error is raised when parameters have numpy integer or\n+    # floating types.\n+    nca = NeighborhoodComponentsAnalysis(**{param: value})\n \n-def test_transformation_dimensions():\n+    X = iris_data\n+    y = iris_target\n+\n+    nca.fit(X, y)\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n \n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..4a2290c 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -679,6 +679,30 @@ def test_unicode_kernel():\n                                 kernel='linear',\n                                 random_seed=0)\n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_no_support_vectors_with_different_parameters():\n+    # Additional test to ensure handling of no support vectors with different parameters\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear', C=1000, epsilon=0.5)\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n \n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..e0bff5a 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,8 +972,32 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n-def test_repeated_cv_value_errors():\n+import pytest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n+@pytest.mark.parametrize(\n+    \"RepeatedCV, expected_repr\",\n+    [\n+        (RepeatedKFold, \"RepeatedKFold(n_splits=5, n_repeats=10, random_state=None)\"),\n+        (RepeatedStratifiedKFold, \"RepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None)\"),\n+    ]\n+)\n+def test_repeated_cv_repr(RepeatedCV, expected_repr):\n+    cv_instance = RepeatedCV()\n+    assert repr(cv_instance) == expected_repr\n+\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\",\n+    [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr_with_parameters(RepeatedCV):\n+    n_splits, n_repeats, random_state = 3, 4, 42\n+    cv_instance = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats, random_state=random_state)\n+    expected_repr = (\n+        f\"{cv_instance.__class__.__name__}(n_splits={n_splits}, \"\n+        f\"n_repeats={n_repeats}, random_state={random_state})\"\n+    )\n+    assert repr(cv_instance) == expected_repr\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n         assert_raises(ValueError, cv, n_repeats=0)\n",
  "scikit-learn__scikit-learn-15512": "diff --git a/sklearn/cluster/tests/test_affinity_propagation.py b/sklearn/cluster/tests/test_affinity_propagation.py\nindex 5de7c5e..a2c5bfd 100644\n--- a/sklearn/cluster/tests/test_affinity_propagation.py\n+++ b/sklearn/cluster/tests/test_affinity_propagation.py\n@@ -141,6 +141,15 @@ def test_affinity_propagation_predict_non_convergence():\n     # centers should be an empty array\n     X = np.array([[0, 0], [1, 1], [-2, -2]])\n \n+    # Test maximum iterations reached without convergence\n+    def test_affinity_propagation_max_iter_no_convergence():\n+        X = np.array([[1, 0, 0, 0, 0, 0],\n+                      [0, 1, 1, 1, 0, 0],\n+                      [0, 0, 1, 0, 0, 1]])\n+        af = AffinityPropagation(affinity='euclidean', max_iter=2).fit(X)\n+        assert_array_equal(np.array([]), af.cluster_centers_indices_)\n+        assert_array_equal(np.array([-1, -1, -1]), af.labels_)\n+        \n     # Force non-convergence by allowing only a single iteration\n     af = assert_warns(ConvergenceWarning,\n                       AffinityPropagation(preference=-10, max_iter=1).fit, X)\n",
  "scikit-learn__scikit-learn-15535": "diff --git a/sklearn/metrics/cluster/tests/test_common.py b/sklearn/metrics/cluster/tests/test_common.py\nindex 9991cff..974bbfc 100644\n--- a/sklearn/metrics/cluster/tests/test_common.py\n+++ b/sklearn/metrics/cluster/tests/test_common.py\n@@ -151,8 +151,23 @@ def test_permute_labels(metric_name):\n @pytest.mark.parametrize(\n     \"metric_name\", dict(SUPERVISED_METRICS, **UNSUPERVISED_METRICS)\n )\n-# For all clustering metrics Input parameters can be both\n-# in the form of arrays lists, positive, negative or string\n+def test_mutual_info_score_with_strings():\n+    # Test mutual_info_score with string labels\n+    x = np.random.choice(['a', 'b'], size=20).astype(object)\n+    y = x.copy()\n+    score = mutual_info_score(x, y)\n+    assert isinstance(score, float), \"Score should be a float\"\n+    \n+    x = np.random.choice(['a', 'b'], size=20)\n+    y = x.copy()\n+    score = mutual_info_score(x, y)\n+    assert isinstance(score, float), \"Score should be a float\"\n+\n+test_mutual_info_score_with_strings()\n+\n+from sklearn.metrics.cluster import mutual_info_score\n+import numpy as np\n+from scipy import sparse as sp\n def test_format_invariance(metric_name):\n     y_true = [0, 0, 0, 0, 1, 1, 1, 1]\n     y_pred = [0, 1, 2, 3, 4, 5, 6, 7]\n",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..4499418 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -668,7 +669,47 @@ def test_isotonic_regression_sample_weight_not_overwritten():\n \n \n @pytest.mark.parametrize(\"shape\", [\"1d\", \"2d\"])\n-def test_get_feature_names_out(shape):\n+def test_isotonic_regression_output_predict():\n+    \"\"\"Check that `predict` does return the expected output type.\n+\n+    We need to check that `transform` will output a DataFrame and a NumPy array\n+    when we set `transform_output` to `pandas`.\n+\n+    Non-regression test for:\n+    https://github.com/scikit-learn/scikit-learn/issues/25499\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    X, y = make_regression(n_samples=10, n_features=1, random_state=42)\n+    regressor = IsotonicRegression()\n+    with sklearn.config_context(transform_output=\"pandas\"):\n+        regressor.fit(X, y)\n+        X_trans = regressor.transform(X)\n+        y_pred = regressor.predict(X)\n+\n+    assert isinstance(X_trans, pd.DataFrame)\n+    assert isinstance(y_pred, np.ndarray)\n+\n+def test_calibrated_classifier_cv_with_pandas_output():\n+    \"\"\"Test CalibratedClassifierCV with transform_output set to pandas.\"\"\"\n+    import pandas as pd\n+    from sklearn.linear_model import SGDClassifier\n+    from sklearn.calibration import CalibratedClassifierCV\n+    from sklearn import set_config\n+\n+    X = np.arange(90).reshape(30, -1)\n+    y = np.arange(30) % 2\n+\n+    set_config(transform_output=\"pandas\")\n+    model = CalibratedClassifierCV(SGDClassifier(), method='isotonic')\n+    model.fit(X, y)\n+\n+    # Ensure the model does not crash and returns predictions\n+    try:\n+        predictions = model.predict(X)\n+        assert predictions is not None\n+        assert len(predictions) == len(y)\n+    except Exception as e:\n+        pytest.fail(f\"CalibratedClassifierCV failed with transform_output='pandas': {e}\")\n     \"\"\"Check `get_feature_names_out` for `IsotonicRegression`.\"\"\"\n     X = np.arange(10)\n     if shape == \"2d\":\n",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..d9e3507 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2121,6 +2121,34 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     with pytest.raises(AttributeError, match=\"not provide get_feature_names_out\"):\n         ct.get_feature_names_out()\n \n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False]), [False, False]],\n+    ids=[\"list\", \"bool\", \"bool_int\"],\n+)\n+def test_empty_selection_pandas_output(empty_selection):\n+    \"\"\"Check that pandas output works when there is an empty selection.\n+\n+    Non-regression test for gh-25487\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = pd.DataFrame([[1.0, 2.2], [3.0, 1.0]], columns=[\"a\", \"b\"])\n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", empty_selection),\n+            (\"numerical\", StandardScaler(), [\"a\", \"b\"]),\n+        ],\n+        verbose_feature_names_out=True,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\"])\n+\n+    ct.set_params(verbose_feature_names_out=False)\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"a\", \"b\"])\n+\n     # The feature names are prefixed because verbose_feature_names_out=True is default\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n@@ -2128,4 +2156,4 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..af1f403 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -112,6 +112,41 @@ def test_automodule_special_members(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_multiple_classes(app):\n+    options = {'members': None,\n+               'undoc-members': None,\n+               'inherited-members': 'Base, tuple, set'}\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.inheritance',\n+        '',\n+        '',\n+        '.. py:class:: Base()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedclassmeth()',\n+        '      :module: target.inheritance',\n+        '      :classmethod:',\n+        '',\n+        '      Inherited class method.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedstaticmeth(cls)',\n+        '      :module: target.inheritance',\n+        '      :staticmethod:',\n+        '',\n+        '      Inherited static method.',\n+        '',\n+    ]\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_mock_imports': ['missing_module',\n@@ -125,4 +160,225 @@ def test_subclass_of_mocked_object(app):\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/roots/test-ext-autodoc/target/annotations.py b/tests/roots/test-ext-autodoc/target/annotations.py\nindex 56eb16b..4614aa6 100644\n--- a/tests/roots/test-ext-autodoc/target/annotations.py\n+++ b/tests/roots/test-ext-autodoc/target/annotations.py\n@@ -1,8 +1,22 @@\n+\n from __future__ import annotations\n \n from typing import overload\n \n+from typing import Any\n+\n myint = int\n+String = Any\n+\n+#: blah blah blah\n+var: String\n+\n+\n+class MyString:\n+    \"mystring\"\n+\n+    #: blah blah blah\n+    var: String\n \n \n def sum(x: myint, y: myint) -> myint:\n@@ -22,4 +36,4 @@ def mult(x: float, y: float) -> float:\n \n def mult(x, y):\n     \"\"\"docstring\"\"\"\n-    return x, y\n+    return x, y\n",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..bc9f7dc 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -78,7 +78,51 @@ def test_get_full_qualified_name():\n     domain = StandardDomain(env)\n \n     # normal references\n-    node = nodes.reference()\n+import pytest\n+from docutils import nodes\n+from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n+from sphinx.parsers import restructuredtext\n+\n+def test_cmd_option_with_optional_value(app):\n+    text = \".. option:: -j[=N]\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index, \n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '-j'],\n+                                                                     [addnodes.desc_addname, '[=N]'])],\n+                                           [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+\n+def test_cmd_option_starting_with_bracket(app):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '[enable'],\n+                                                                     [addnodes.desc_addname, '=]PATTERN'])],\n+                                           [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n+\n+def test_cmd_option_with_special_characters(app):\n+    text = \".. option:: --foo=bar*baz?\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '--foo'],\n+                                                                     [addnodes.desc_addname, '=bar*baz?'])],\n+                                           [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('--foo', '--foo', 'cmdoption', 'index', 'cmdoption-arg-foo', 1) in objects\n+\n+def test_cmd_option_with_spaces_in_bracket(app):\n+    text = \".. option:: [verbose] mode\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '[verbose]'],\n+                                                                     [addnodes.desc_addname, 'mode'])],\n+                                           [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[verbose]', '[verbose]', 'cmdoption', 'index', 'cmdoption-arg-verbose', 1) in objects\n     assert domain.get_full_qualified_name(node) is None\n \n     # simple reference to options\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..0382d72 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,7 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n@@ -45,6 +46,32 @@ def do_autodoc(app, objtype, name, options=None):\n     return bridge.result\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_with_no_members(app):\n+    \"\"\"Test that a module with an empty __all__ and no members option shows nothing.\"\"\"\n+    options = {'members': False}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_with_undoc_members(app):\n+    \"\"\"Test that a module with an empty __all__ and undoc-members option shows nothing.\"\"\"\n+    options = {'undoc-members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n def make_directive_bridge(env):\n     options = Options(\n         inherited_members = False,\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..83ae390 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -10,6 +11,7 @@\n \n import sys\n from numbers import Integral\n+from struct import Struct\n from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tuple, TypeVar,\n                     Union)\n \n@@ -115,7 +117,9 @@ def test_restify_type_ForwardRef():\n     assert restify(ForwardRef(\"myint\")) == \":class:`myint`\"\n \n \n-def test_restify_broken_type_hints():\n+def test_restify_struct():\n+    # Test for the issue: verifying struct.Struct type annotations\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(BrokenType) == ':class:`tests.test_util_typing.BrokenType`'\n \n \n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..671f048 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,10 +1455,33 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    def test_other_parameters_section(self):\n+        docstring = \"\"\"\\\n+Other parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+    Description of param2.\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+    Description of param2.\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+    Description of param2.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..48322d2 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -60,8 +60,20 @@ def test_linkcode(app, status, warning):\n     assert 'http://foobar/c/' in stuff\n     assert 'http://foobar/cpp/' in stuff\n \n+import pytest\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode')\n+def test_viewcode_epub_default(app, status, warning):\n+    app.builder.build_all()\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists(), \\\n+        \"viewcode should not generate pages for EPUB when viewcode_enable_epub=False\"\n \n-@pytest.mark.sphinx(testroot='ext-viewcode-find')\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode',\n+                    confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_enabled(app, status, warning):\n+    app.builder.build_all()\n+    assert (app.outdir / '_modules/spam/mod1.xhtml').exists(), \\\n+        \"viewcode should generate pages for EPUB when viewcode_enable_epub=True\"\n def test_local_source_files(app, status, warning):\n     def find_source(app, modname):\n         if modname == 'not_a_package':\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..9595820 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -321,8 +321,40 @@ def test_mul():\n         h2 = _af_rmuln(*a[:i + 1])\n         assert h == h2\n \n+def test_non_disjoint_cycles():\n+    # Test for non-disjoint cycles\n+    # This should return the identity permutation\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n \n-def test_args():\n+    # Test non-disjoint, but overlapping cycles\n+    # Cycles applied left-to-right: (0 1 2)(1 2) -> (0 2)\n+    assert Permutation([[0, 1, 2], [1, 2]]) == Permutation([0, 2, 1])\n+\n+    # More complex non-disjoint case\n+    # Cycles applied left-to-right: (0 2 4)(1 3)(2 3) -> (0 3)(1 2 4)\n+    assert Permutation([[0, 2, 4], [1, 3], [2, 3]]) == Permutation([0, 3, 1, 2, 4])\n+\n+    # Test if identity is maintained when all elements are cycled back to original positions\n+    # (0 1)(1 0) -> [], which is the identity\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])\n+\n+    # Identity permutation when no moves are made\n+    assert Permutation([]) == Permutation([0])\n+\n+    # Disjoint cycles\n+    assert Permutation([[0, 1], [2, 3]]) == Permutation([1, 0, 3, 2])\n+\n+    # Edge case: single element cycle in a non-disjoint setup\n+    assert Permutation([[0, 1], [1]]) == Permutation([1, 0])\n+\n+    # Larger identity permutation test\n+    assert Permutation([[0, 1, 2], [2, 1, 0]]) == Permutation([0, 1, 2])\n+\n+    # Repeated cycles that should become identity (0 1)(0 1) -> (identity)\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+\n+    # Overlapping cycles that resolve to identity due to cancellation\n+    assert Permutation([[0, 2, 1], [1, 0, 2]]) == Permutation([0, 1, 2])\n     p = Permutation([(0, 3, 1, 2), (4, 5)])\n     assert p._cyclic_form is None\n     assert Permutation(p) == p\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..2889cd4 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -27,6 +28,14 @@ def test_sparse_matrix():\n     assert type(a.col_join(b)) == type(a)\n \n     # test element assignment\n+\n+    # make sure 0 x n matrices get stacked correctly horizontally\n+    sparse_matrices_horizontal = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_horizontal) == Matrix(0, 6, [])\n+\n+    # make sure n x 0 matrices get stacked correctly vertically\n+    sparse_matrices_vertical = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_vertical) == Matrix(6, 0, [])\n     a = SparseMatrix((\n         (1, 0),\n         (0, 1)\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..fbae6ed 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -82,6 +82,31 @@ def check(a, exclude=[], check_attr=True):\n #================== core =========================\n \n \n+import sympy\n+import subprocess\n+\n+def test_pickle_float_expression_cross_version():\n+    \"\"\"Test pickling of sympy expressions with floats across Python 2 and 3.\"\"\"\n+    \n+    # Create a sympy expression with a float\n+    expr = sympy.symbols('x') + 1.0\n+    \n+    # Pickle the expression in Python 2\n+    python2_command = \"python2 -c 'import pickle; import sympy; x = sympy.symbols(\\\"x\\\"); print pickle.dumps(x + 1.0, 2)'\"\n+    \n+    # Unpickle in Python 3\n+    python3_command = \"python3 -c 'import pickle; import sys; expr = pickle.loads(sys.stdin.buffer.read()); print(expr)'\"\n+\n+    # Execute the commands and check if unpickling works without errors\n+    process = subprocess.Popen(python2_command, shell=True, stdout=subprocess.PIPE)\n+    output, _ = process.communicate()\n+\n+    process = subprocess.Popen(python3_command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE)\n+    result, _ = process.communicate(input=output)\n+\n+    # Verify the result is the correct sympy expression\n+    assert str(result.decode('utf-8').strip()) == \"x + 1.0\"\n+\n def test_core_basic():\n     for c in (Atom, Atom(),\n               Basic, Basic(),\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..69e96e6 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,8 +272,18 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n+def test_coth_subs_issue():\n+    from sympy import Symbol, coth, log, tan\n \n-def test_coth_series():\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # Test values that previously caused issues\n+    test_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for val in test_values:\n+        result = e.subs(x, val)\n+        # Print or assert to ensure no exception is raised\n+        print(f\"coth(log(tan({val}))) = {result}\")\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..d89df20 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,42 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import Matrix, eye, ones\n+    # Original test case as described in the issue\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert M.col_insert(3, V) == expected\n+\n+    # Additional test case: inserting at the first column\n+    expected_first = Matrix([\n+        [2, 2, 1, 0, 0, 0, 0, 0],\n+        [2, 2, 0, 1, 0, 0, 0, 0],\n+        [2, 2, 0, 0, 1, 0, 0, 0],\n+        [2, 2, 0, 0, 0, 1, 0, 0],\n+        [2, 2, 0, 0, 0, 0, 1, 0],\n+        [2, 2, 0, 0, 0, 0, 0, 1]\n+    ])\n+    assert M.col_insert(0, V) == expected_first\n+\n+    # Additional test case: inserting at the last column\n+    expected_last = Matrix([\n+        [1, 0, 0, 0, 0, 0, 2, 2],\n+        [0, 1, 0, 0, 0, 0, 2, 2],\n+        [0, 0, 1, 0, 0, 0, 2, 2],\n+        [0, 0, 0, 1, 0, 0, 2, 2],\n+        [0, 0, 0, 0, 1, 0, 2, 2],\n+        [0, 0, 0, 0, 0, 1, 2, 2]\n+    ])\n+    assert M.col_insert(6, V) == expected_last\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..b50c5a4 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -616,11 +616,16 @@ def test_latex_Range():\n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n \n+from sympy import symbols, oo, latex\n+from sympy.series.sequences import SeqFormula, SeqPer, SeqAdd, SeqMul\n+\n def test_latex_sequences():\n+    a = symbols('a')\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4, 9, \\ldots\\right\\]'\n+    # Test whether the output is correctly formatted without unnecessary escaping of brackets\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n     assert latex(s1) == latex_str\n \n     latex_str = r'\\left\\[1, 2, 1, 2, \\ldots\\right\\]'\n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..1feea17 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,10 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n+from sympy.polys.polytools import Poly\n+from sympy.abc import x, y, z\n+from sympy import symbols\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n",
  "sympy__sympy-14774": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 48a5cf2..1420c0e 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1,4 +1,6 @@\n+\n from sympy import (\n+    asec,\n     Add, Abs, Chi, Ci, CosineTransform, Dict, Ei, Eq, FallingFactorial,\n     FiniteSet, Float, FourierTransform, Function, IndexedBase, Integral,\n     Interval, InverseCosineTransform, InverseFourierTransform,\n",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..f11ec27 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,9 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import MatrixSymbol, pretty, symbols\n+from sympy.abc import n, a\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n@@ -6122,7 +6125,35 @@ def test_MatrixSymbol_printing():\n     assert pretty(A*B*C - A*B - B*C) == \"-A*B -B*C + A*B*C\"\n \n \n-def test_degree_printing():\n+def test_MatrixSymbol_pretty_printing():\n+    # Additional test cases for issue #14814\n+    # Use MatrixSymbol with special characters in their names\n+    n = symbols('n', integer=True)\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+\n+    # Testing addition of matrix symbols\n+    assert pretty(x + y_star) == \"x + y*\"\n+\n+    # Testing more complex expressions with constants and negatives\n+    assert pretty(-a*x + -2*y_star*y_star) == \"-a*x -2*y**y*\"\n+\n+    # Testing negative first argument\n+    assert pretty(-x + y_star) == \"-x + y*\"\n+\n+    # Ensure that expressions with only negative terms are printed correctly\n+    assert pretty(-x - y_star) == \"-x - y*\"\n+\n+    # Testing with larger expressions\n+    z = MatrixSymbol('z', n, n)\n+    assert pretty(x + y_star + z) == \"x + y* + z\"\n+\n+    # Testing subtraction\n+    assert pretty(x - y_star) == \"x - y*\"\n+\n+    # Testing without special character\n+    y = MatrixSymbol('y', n, n)\n+    assert pretty(x + y) == \"x + y\"\n     expr1 = 90*degree\n     assert pretty(expr1) == u'90\u00b0'\n     expr2 = x*degree\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..59e5ca6 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -727,8 +727,21 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(F(t) * G(t), F(t) * G(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n-\n-def test_python_keywords():\n+import sympy as sy\n+from sympy.utilities.lambdify import lambdify\n+from sympy.testing.pytest import raises\n+\n+def test_curly_matrix_symbol():\n+    # Issue #15009\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+    \n+    # Test without dummify (was previously causing a SyntaxError)\n+    lam = lambdify(curlyv, curlyv)\n+    assert lam([[1], [2]]) == [[1], [2]]\n+    \n+    # Test with dummify=True (was previously causing a SyntaxError)\n+    lam_dummified = lambdify(curlyv, curlyv, dummify=True)\n+    assert lam_dummified([[1], [2]]) == [[1], [2]]\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n     # functions. This is an additional regression test.\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7eaf694 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..3ffd53f 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -6,6 +7,26 @@ from sympy.utilities.pytest import raises\n \n \n def test_idiff():\n+    f = Function('f')\n+    g = Function('g')\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+\n+    # Test the function notation without Eq\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+\n+    # Test with multiple dependent variables in function notation\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    \n+    # Test with Eq object\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x).simplify() == (x + 1)*exp(x - y)/(y + 1)\n+\n+    # Test with Eq and function notation\n+    assert idiff(Eq(f(x)*exp(f(x)), x*exp(x)), f(x), x).simplify() == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+\n+    # Complex multiple dependent function notation\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..b15e96c 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,6 +582,27 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n+def test_ccode_unused_array_arg():\n+    from sympy.utilities.codegen import CCodeGen, codegen\n+    from sympy import MatrixSymbol\n+    # MatrixSymbol x does not appear in output\n+    x = MatrixSymbol('x', 2, 1)\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # Expect x to appear as (double *) in the generated C function\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n def test_empty_f_code():\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..a2c2319 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,20 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Intersection, Eq, Symbol, FiniteSet, S\n \n-def test_issue_9623():\n+def test_intersection_removes_duplicates():\n+    x = Symbol('x')\n+    # Test case where duplicates are present\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+    # Test for the specific issue case mentioned\n+    result = Intersection({1}, {1}, {x})\n+    expected = Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert result == expected\n+    # Additional test cases\n+    assert Intersection({1, 2, 2}, {2, 3}, {2}) == {2}\n+    assert Intersection({1, 1, 1}, {1, 1}, {1, 1, 1}) == {1}\n+    assert Intersection({1, 2, 3}, {2, 3, 4}, {3, 4, 5}) == {3}\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..7f3164c 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n@@ -26,7 +27,29 @@ def test_numpy_piecewise_regression():\n     assert NumPyPrinter().doprint(p) == 'numpy.select([numpy.less(x, 0),True], [1,0], default=numpy.nan)'\n \n \n-def test_sum():\n+def test_issue_17006_identity_matrix():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    from sympy import MatrixSymbol, Identity\n+    from sympy import symbols\n+    import numpy as np\n+\n+    # Test with identity matrix of fixed size\n+    M = MatrixSymbol(\"M\", 2, 2)\n+    f = lambdify(M, M + Identity(2), modules='numpy')\n+    ma = np.array([[1, 2], [3, 4]])\n+    mr = np.array([[2, 2], [3, 5]])\n+    assert (f(ma) == mr).all()\n+\n+    # Test with identity matrix of symbolic size and unsupported matrices\n+    n = symbols('n', integer=True)\n+    N = MatrixSymbol(\"N\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n), modules='numpy'))\n+\n+    # Ensure that the identity matrix is printed correctly\n+    p = NumPyPrinter()\n+    assert p.doprint(Identity(3)) == \"numpy.eye(3)\"\n     if not np:\n         skip(\"NumPy not installed\")\n \n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..e4a0695 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -6,7 +7,12 @@ from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n \n-def test_point():\n+def test_issue_multiplication_order():\n+    from sympy.geometry import Point\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    assert point1 + point2 * sympify(2.0) == Point(2, 2)\n+    assert point1 + sympify(2.0) * point2 == Point(2, 2)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..05e4fda 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,45 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import Symbol, symbols, sympify, parse_expr\n+from sympy.core.sympify import _sympify\n+from sympy.utilities.pytest import raises\n+\n+def test_non_string_equality():\n+    # Expressions should not compare equal to strings\n+    x = symbols('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Make sure == doesn't try to convert the resulting expression to a string\n+    # (e.g., by calling sympify() instead of _sympify())\n+\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+    \n+    # Additional tests for custom objects with misleading repr\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+\n+    class D:\n+        def __repr__(self):\n+            return 'x'\n+\n+    assert (x == C()) is False\n+    assert (x != C()) is True\n+    assert (x == D()) is False\n+    assert (x != D()) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1941,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..d0c6878 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -547,7 +547,14 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n-    # issue 18122\n+    # issue 18186\n+    from sympy.solvers.diophantine import diophantine\n+    from sympy.abc import m, n\n+\n+    assert diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m, n), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n, m), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..96189a0 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -61,6 +62,20 @@ def test_PostIncrement():\n \n \n def test_sizeof():\n+    typename = 'unsigned int'\n+    sz = sizeof(typename)\n+    assert ccode(sz) == 'sizeof(%s)' % typename\n+    assert sz.func(*sz.args) == sz\n+    assert not sz.is_Atom\n+    assert {atom for atom in sz.atoms() if hasattr(atom, 'args') and atom.args} == set()\n+    assert sz.atoms() == {String('unsigned int'), String('sizeof')}\n+    \n+def test_atoms_no_args():\n+    # New test case to verify that atoms returns objects with no args\n+    typename = 'double'\n+    sz = sizeof(typename)\n+    assert {atom for atom in sz.atoms() if hasattr(atom, 'args') and atom.args} == set()\n+    assert sz.atoms() == {String('double'), String('sizeof')}\n     typename = 'unsigned int'\n     sz = sizeof(typename)\n     assert ccode(sz) == 'sizeof(%s)' % typename\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..d84186a 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,30 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_issue_BlockDiagMatrix_single_element():\n+    from sympy import Matrix, BlockDiagMatrix\n+\n+    # Test case for a single BlockDiagMatrix element\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n+def test_issue_BlockDiagMatrix_multiple_elements():\n+    from sympy import Matrix, BlockDiagMatrix\n+\n+    # Test case for multiple BlockDiagMatrix elements\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M, M)\n+    B = Matrix(D)\n+    expected_result = Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+    assert B == expected_result\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..18d5291 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, XFAIL\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n k, l, m, n = symbols('k l m n', integer=True)\n@@ -83,7 +84,20 @@ def test_block_index():\n     assert BI.as_explicit().equals(eye(6))\n \n \n-def test_slicing():\n+def test_block_index_symbolic():\n+    n, i = symbols('n i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    assert C[i, 0] == MatrixElement(C, i, 0)  # Cannot assert specific matrix element due to i being symbolic\n+\n+def test_block_index_symbolic_nonzero():\n+    n, m, i = symbols('n m i', integer=True, positive=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    assert C[0, 0] == A[0, 0]\n+    assert C[i, 0] == B[i - 1, 0]  # i starts from 1 to n\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..3c179e1 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -200,7 +200,33 @@ def test_im():\n     X = FunctionMatrix(3, 3, Lambda((n, m), n + m*I))\n     assert im(X) == Matrix([[0, 1, 2], [0, 1, 2], [0, 1, 2]])\n \n+from sympy import Symbol, Abs, Piecewise, Eq, Function, sign, I, oo, sqrt, AccumBounds, log, sin, cos, S, exp_polar, Simplify\n+\n def test_sign():\n+    # Test case for sign rewrite in terms of Abs\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    \n+    # Rewrite sign(x) to x/Abs(x)\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+\n+    # Additional cases to check the behavior for zero\n+    assert sign(0).rewrite(Abs) == 0\n+    assert sign(1).rewrite(Abs) == 1\n+    assert sign(-1).rewrite(Abs) == -1\n+\n+    # Testing the behavior of sign with Abs in complex numbers\n+    z = Symbol('z', complex=True, nonzero=True)\n+    assert sign(z).rewrite(Abs) == z / Abs(z)\n+    \n+    # Test a function and its rewrite\n+    f = Function('f')\n+    assert sign(f(y)).rewrite(Abs) == Piecewise((0, Eq(f(y), 0)), (f(y)/Abs(f(y)), True))\n+\n+    # Test with specific numeric values\n+    assert sign(2 + 3*I).rewrite(Abs) == (2 + 3*I) / Abs(2 + 3*I)\n+    assert sign(-2 - 3*I).rewrite(Abs) == (-2 - 3*I) / Abs(-2 - 3*I)\n     assert sign(1.2) == 1\n     assert sign(-1.2) == -1\n     assert sign(3*I) == I\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..5ab122f 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,24 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n+from sympy.utilities.iterables import partitions\n \n def test_partitions():\n+    # Verify that partitions do not reuse dictionaries\n+    results = list(partitions(6, k=2))\n+    assert all(results[i] is not results[j] for i in range(len(results)) for j in range(i+1, len(results))), \"Partitions reuse dictionary instances\"\n+\n+    results = list(partitions(6, k=3))\n+    assert all(results[i] is not results[j] for i in range(len(results)) for j in range(i+1, len(results))), \"Partitions reuse dictionary instances\"\n+\n+    results = list(partitions(8, k=4, m=3))\n+    assert all(results[i] is not results[j] for i in range(len(results)) for j in range(i+1, len(results))), \"Partitions reuse dictionary instances\"\n+\n+    results = list(partitions(S(3), m=2))\n+    assert all(results[i] is not results[j] for i in range(len(results)) for j in range(i+1, len(results))), \"Partitions reuse dictionary instances\"\n+\n+    results = list(partitions(4, k=3))\n+    assert all(results[i] is not results[j] for i in range(len(results)) for j in range(i+1, len(results))), \"Partitions reuse dictionary instances\"\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..1a20c1a 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -253,8 +253,12 @@ def test_power_rewrite_exp():\n     assert all((1/func(x)).rewrite(exp) == 1/(func(x).rewrite(exp)) for func in\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n+from sympy import S, oo, zoo, power\n \n def test_zero():\n+    # Test issue 19572\n+    assert 0 ** -oo == zoo, \"0**-oo should return zoo\"\n+    assert power(0, -oo) == zoo, \"power(0, -oo) should return zoo\"\n     x = Symbol('x')\n     y = Symbol('y')\n     assert 0**x != 0\n",
  "sympy__sympy-20442": "",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..0b8502c 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,9 +28,25 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+import pytest\n+from sympy import Symbol\n+from sympy.core.basic import Basic\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n+\n+def test_symbol_no_dict():\n+    # Ensure that Symbols do not have a __dict__ attribute\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"Symbol instance must not have __dict__\"\n+    assert hasattr(s, '__slots__'), \"Symbol must have __slots__ defined\"\n+    assert '__dict__' not in s.__slots__, \"__dict__ must not be in __slots__\"\n+\n+def test_basic_dict():\n+    # Ensure that Basic objects have a __dict__ attribute\n+    b = Basic()\n+    assert hasattr(b, '__dict__'), \"Basic instance must have __dict__\"\n     assert bool(b1)\n \n \n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..a682288 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, Integral, sin, oo)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -160,6 +161,12 @@ def test_sign():\n     x = Symbol('x', complex=True)\n     assert refine(sign(x), Q.zero(x)) == 0\n \n+def test_refine_with_integrals():\n+    a = Symbol('a', real=True)\n+    x = Symbol('x')\n+    J = Integral(sin(x)*exp(-a*x), (x, 0, oo))\n+    refined_result = refine(J.doit(), Q.positive(a))\n+    assert refined_result == 1/(a**2 + 1)\n \n def test_func_args():\n     class MyClass(Expr):\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..3363e9d 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -8,6 +9,41 @@ from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n+from sympy.functions.elementary.trigonometric import sinh, cosh, tanh\n+from sympy.functions.elementary.piecewise import Piecewise\n+\n+def test_issue_21373():\n+    # Original test case for issue 21373\n+    x_r, y_r, z = symbols('x_r y_r z', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr.subs({1: 1.0}) is not None\n+\n+    # Additional test cases to thoroughly test the fix\n+    # Test with cosh instead of sinh\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr_cosh.subs({1: 1.0}) is not None\n+\n+    # Test with tanh instead of sinh\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr_tanh.subs({1: 1.0}) is not None\n+\n+    # Test removing division by z\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    assert expr_no_div.subs({1: 1.0}) is not None\n+\n+    # Test removing exp but having sinh remain\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z)\n+    assert expr_no_exp.subs({1: 1.0}) is not None\n+\n+    # Test with non-real x and y\n+    x, y, z = symbols('x y z')\n+    expr_non_real = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr_non_real.subs({1: 1.0}) is not None\n+\n+    # Test with additional context of tensorflow lambdify\n+    # Simulating potential further transformation (not executable in pure sympy context)\n+    assert expr.subs({1: 1.0}) is not None\n+\n def test_subs():\n     n3 = Rational(3)\n     e = x\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..3c903a0 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,9 +1,11 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n+from sympy.core.function import Derivative\n from sympy.integrals.integrals import Integral\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..52da579 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -126,6 +126,17 @@ def test_monomials():\n     assert set(itermonomials([x, y], [1, 2], [1, 1])) == {x*y, x*y**2}\n     assert set(itermonomials([x, y], [1, 2], [1, 2])) == {x*y**2}\n \n+    # Test case to verify issue with min_degrees\n+    from sympy import symbols\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    # Test when min_degrees is the same as max_degrees\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {x1**3, x2**3, x3**3, x1*x2*x3, x1**2*x2, x1**2*x3, x2**2*x1, x2**2*x3, x3**2*x1, x3**2*x2, x1*x2**2, x1*x3**2, x2*x3**2}\n+    # Test with different min_degrees and max_degrees\n+    assert set(itermonomials([x1, x2, x3], 3, 2)) == {x1**3, x2**3, x3**3, x1**2, x2**2, x3**2, x1*x2, x1*x3, x2*x3, x1*x2**2, x1*x3**2, x2*x3**2, x1**2*x2, x1**2*x3, x2**2*x3, x2**2*x1, x3**2*x1, x3**2*x2, x1*x2*x3, x2*x3, x1*x2**2, x1*x3**2, x2*x3**2, x1*x2*x3}\n+    # Ensure it handles lists for max_degrees and min_degrees correctly\n+    assert set(itermonomials([x1, x2], [2, 2], [1, 1])) == {x1, x2, x1**2, x2**2, x1*x2}\n+    assert set(itermonomials([x1, x2], [3, 2], [2, 1])) == {x1**2, x1**3, x1**2*x2, x1*x2, x1*x2**2, x2**2}\n+\n     assert set(itermonomials([x, y], [2, 0])) == {S.One, x, x**2}\n     assert set(itermonomials([x, y], [2, 1])) == {S.One, x, y, x*y, x**2, x**2*y}\n     assert set(itermonomials([x, y], [2, 2])) == \\\n",
  "sympy__sympy-22005": "",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..8f31b8e 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n@@ -440,6 +442,15 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n+def test_issue_22684():\n+    # Verify that Point2D does not raise an error with evaluate(False)\n+    with evaluate(False):\n+        assert Point2D(1, 2) == Point2D(Integer(1), Integer(2))\n+\n+    # Verify that Point2D works without evaluate(False)\n+    assert Point2D(1, 2) == Point2D(Integer(1), Integer(2))\n+    assert Point2D(1, 2, evaluate=False) == Point2D(Integer(1), Integer(2), evaluate=False)\n+\n def test_dot():\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..b8e79b9 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -337,6 +337,27 @@ def test_cse_Indexed():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n+def test_cse_MatrixSymbol_indexing():\n+    # Test cse with MatrixSymbol indexing\n+    A = MatrixSymbol(\"A\", 4, 4)\n+    B = MatrixSymbol(\"B\", 4, 4)\n+    \n+    # Test simple element-wise expression\n+    expr = A[0, 0] * B[0, 0] + A[0, 1] * B[1, 0]\n+    cse_subs, cse_reduced = cse(expr)\n+    assert cse_reduced == [expr], \"CSE should not introduce unnecessary substitutions for simple expressions\"\n+    \n+    # Test with repeated elements\n+    expr = A[0, 0] * A[0, 1] + A[0, 0] * A[0, 1] * A[0, 2]\n+    cse_subs, cse_reduced = cse(expr)\n+    assert cse_subs == [(x0, A[0, 0] * A[0, 1])], \"CSE should find common subexpressions\"\n+    assert cse_reduced == [x0 * A[0, 2] + x0], \"Reduction should use the common subexpression\"\n+\n+    # Test more complex matrix expression\n+    expr = (A * B)[0, 0]\n+    cse_subs, cse_reduced = cse(expr)\n+    assert len(cse_subs) > 0, \"CSE should perform substitutions for matrix products\"\n+\n \n def test_cse_MatrixSymbol():\n     # MatrixSymbols have non-Basic args, so make sure that works\n@@ -356,6 +377,27 @@ def test_cse_MatrixExpr():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n+def test_cse_MatrixSymbol_indexing():\n+    # Test cse with MatrixSymbol indexing\n+    A = MatrixSymbol(\"A\", 4, 4)\n+    B = MatrixSymbol(\"B\", 4, 4)\n+    \n+    # Test simple element-wise expression\n+    expr = A[0, 0] * B[0, 0] + A[0, 1] * B[1, 0]\n+    cse_subs, cse_reduced = cse(expr)\n+    assert cse_reduced == [expr], \"CSE should not introduce unnecessary substitutions for simple expressions\"\n+    \n+    # Test with repeated elements\n+    expr = A[0, 0] * A[0, 1] + A[0, 0] * A[0, 1] * A[0, 2]\n+    cse_subs, cse_reduced = cse(expr)\n+    assert cse_subs == [(x0, A[0, 0] * A[0, 1])], \"CSE should find common subexpressions\"\n+    assert cse_reduced == [x0 * A[0, 2] + x0], \"Reduction should use the common subexpression\"\n+\n+    # Test more complex matrix expression\n+    expr = (A * B)[0, 0]\n+    cse_subs, cse_reduced = cse(expr)\n+    assert len(cse_subs) > 0, \"CSE should perform substitutions for matrix products\"\n+\n     replacements, reduced_exprs = cse([expr1 + expr2, expr1])\n     assert replacements\n \n",
  "sympy__sympy-23117": "",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..b050e8a 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,14 +1175,23 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n     assert 'x**2' in inspect.getsource(f)\n \n-\n-def test_issue_14941():\n+def test_lambdify_tuple_with_one_element():\n+    # Test for the issue where lambdify does not respect a single element tuple\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,), \"Lambda function did not return a single-element tuple.\"\n+    \n+    # Test that inspect.getsource outputs the correct Python function\n+    source_code = inspect.getsource(f_single)\n+    assert \"return (1,)\" in source_code, \"The generated source code is incorrect for a single-element tuple.\"\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..9debdaf 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,30 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp, Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..997af30 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,8 +45,34 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n-\n-def test_tensor_product_commutator():\n+def test_tensor_product_issue_expansion():\n+    # Test from the issue description\n+    assert TP(2 * U - V, U + V).expand(tensorproduct=True) == \\\n+        2 * TP(U, U) + 2 * TP(U, V) - TP(V, U) - TP(V, V)\n+\n+    # Original issue test cases\n+    assert TP(A-B, B-A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+\n+    # Additional test cases\n+    # Test with a zero factor\n+    assert TP(U - U, U + V).expand(tensorproduct=True) == 0\n+\n+    # Test with more complex expressions\n+    expr1 = (3*U + 2*V) * (4*U - V)\n+    expected1 = 3*4*TP(U, U) - 3*TP(U, V) + 2*4*TP(V, U) - 2*TP(V, V)\n+    assert TP(expr1, U + V).expand(tensorproduct=True) == expected1\n+\n+    # Test with nested tensor products\n+    assert TP(TP(U, V), U + V).expand(tensorproduct=True) == TP(U, V, U) + TP(U, V, V)\n+\n+    # Test with symbolic scalar\n+    a = symbols('a')\n+    assert TP(a * U, V).expand(tensorproduct=True) == a * TP(U, V)\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..c83153a 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -13,7 +14,9 @@ from sympy.integrals.integrals import integrate\n from sympy.physics.units import (amount_of_substance, area, convert_to, find_unit,\n                                  volume, kilometer, joule, molar_gas_constant,\n                                  vacuum_permittivity, elementary_charge, volt,\n-                                 ohm)\n+                                 ohm, Quantity, time, velocity, acceleration,\n+                                 second, meter)\n+from sympy.physics.units.systems.si import SI\n from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..85a26d3 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, V\n+from sympy.physics.units.prefixes import milli\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +29,17 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+    # Test milli prefix with Watt and Volt\n+    assert milli * W == W / 1000\n+    assert W * milli == W / 1000\n+    assert milli * V == V / 1000\n+    assert V * milli == V / 1000\n+\n+    # Test with more units using milli prefix\n+    from sympy.physics.units import second, gram\n+    assert milli * second == second / 1000\n+    assert milli * gram == gram / 1000\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..8e42721 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,34 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referencing_foreign_key_ordering(self):\n+        # Set up authors and articles with self-referencing foreign keys\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_1)\n+        article_2 = Article.objects.create(headline=\"Article 2\", author=author_2)\n+        \n+        # Introduce self-referencing foreign keys\n+        author_1.editor = author_1  # Self-reference\n+        author_2.editor = author_2  # Self-reference\n+        author_1.save()\n+        author_2.save()\n+\n+        # Verify ordering by self-referencing foreign key (should respect explicit order_by)\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'), \n+            [\"Article 1\", \"Article 2\"], \n+            attrgetter('headline'),\n+        )\n+\n+        # Verify ordering by self-referencing foreign key with descending order\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'), \n+            [\"Article 2\", \"Article 1\"], \n+            attrgetter('headline'),\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..b800d4c 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3189,7 +3189,37 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n \n         self.assertEqual(SomeForm()['field'].id_for_label, 'id_field')\n \n-    def test_boundfield_id_for_label_override_by_attrs(self):\n+    def test_boundwidget_id_for_label_with_custom_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label correctly uses the custom ID set in \n+        self.data['attrs']['id'] for widgets like CheckboxSelectMultiple.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'Option A'), ('b', 'Option B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),\n+            )\n+\n+        form = SomeForm(auto_id=False)\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n+\n+    def test_boundwidget_id_for_label_with_no_attrs_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label falls back to the default naming \n+        convention when no custom ID is present in self.data['attrs']['id'].\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'Option A'), ('b', 'Option B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n         \"\"\"\n         If an id is provided in `Widget.attrs`, it overrides the generated ID,\n         unless it is `None`.\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..afb040a 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -658,7 +658,29 @@ def test_colorbar_scale_reset():\n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n \n-def test_colorbar_get_ticks_2():\n+def test_colorbar_update_after_changing_norm():\n+    import matplotlib.pyplot as plt\n+    from matplotlib.colors import LogNorm\n+    import numpy as np\n+\n+    # Create data\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    # Create a plot with initial normalization\n+    fig, ax = plt.subplots(1, 1)\n+    plot = ax.imshow(img, cmap='gray')\n+    cb = fig.colorbar(plot, ax=ax)\n+\n+    # Change the normalization to LogNorm\n+    plot.set_norm(LogNorm())\n+    \n+    # Ensure the colorbar updates correctly\n+    try:\n+        cb.update_normal(plot)\n+        fig.canvas.draw()\n+        assert cb.ax.yaxis.get_scale() == 'log'\n+    except Exception as e:\n+        raise AssertionError(f\"Colorbar update failed with exception: {e}\")\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n     pc = ax.pcolormesh([[.05, .95]])\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..f4ba621 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3045,7 +3045,13 @@ class TestDataset:\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n \n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_to_stacked_array_to_unstacked_dataset_single_dim_regression(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..1ca7c06 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,44 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas output and custom transformer.\"\"\"\n+    import pandas as pd\n+    from sklearn.pipeline import make_union\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn import set_config\n+    import numpy as np\n+    from numpy.testing import assert_array_equal\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().to_frame()\n+\n+    # Set pandas output\n+    set_config(transform_output=\"pandas\")\n+    \n+    # Create FeatureUnion with MyTransformer\n+    union = make_union(MyTransformer())\n+\n+    # Fit and transform data\n+    transformed_data = union.fit_transform(data)\n+\n+    # Expected result\n+    expected_data = pd.DataFrame({\n+        \"MyTransformer__value\": [240] * 4\n+    })\n+\n+    # Assert that transformed data matches expected result\n+    assert transformed_data.equals(expected_data)\n+    \n+    # Set default output back\n+    set_config(transform_output=\"default\")\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..a17e980 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,10 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+import pytest\n+import sys\n+from .utils import do_autodoc  # Importing utility function for running autodoc\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n@@ -132,8 +136,57 @@ def test_decorators(app):\n     ]\n \n \n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='py36+ is available since python3.6.')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+    \n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='py36+ is available since python3.6.')\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n-def test_slots_attribute(app):\n+def test_annotation_only_member_with_undoc_members(app):\n+    options = {\"members\": None, \"inherited-members\": True, \"undoc-members\": True}\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'class', 'target.slots.Bar', options)\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..df3abc0 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -347,6 +348,28 @@ def test_issue_2827_trigsimp_methods():\n     ans = Matrix([1])\n     M = Matrix([expr])\n     assert trigsimp(M, method='fu', measure=measure1) == ans\n+\n+\n+def test_issue_15129_trigsimp_methods():\n+    # Original test cases from the original test patch\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    \n+    r1 = t1.dot(t2)\n+    r2 = t1.dot(t3)\n+    \n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == sin(S(3)/50)\n+\n+    # Additional test cases to cover other scenarios in the issue\n+    r3 = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    assert trigsimp(r3) == cos(Rational(1, 25) - Rational(1, 50))\n+\n+    # Testing acos for the dot product result\n+    acos_r3 = acos(r3)\n+    simplified_acos_r3 = acos_r3.simplify()\n+    assert simplified_acos_r3 == acos(cos(Rational(1, 25) - Rational(1, 50)))\n     assert trigsimp(M, method='fu', measure=measure2) != ans\n     # all methods should work with Basic expressions even if they\n     # aren't Expr\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..8e5651c 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4344,8 +4344,22 @@ def test_pretty_no_wrap_line():\n def test_settings():\n     raises(TypeError, lambda: pretty(S(4), method=\"garbage\"))\n \n+from sympy import Sum, oo, pprint, symbols\n+from sympy.abc import x\n \n-def test_pretty_sum():\n+def test_sum_pretty_print_with_addition():\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    expected_output = u(\"\"\"\\\n+  \u221e     \\n\\\n+ ___    \\n\\\n+ \u2572      \\n\\\n+  \u2572   x \\n\\\n+  \u2571    + 3\\n\\\n+ \u2571      \\n\\\n+ \u203e\u203e\u203e    \\n\\\n+x = 1   \\\n+\"\"\")\n+    assert upretty(expr) == expected_output\n     from sympy.abc import x, a, b, k, m, n\n \n     expr = Sum(k**k, (k, 0, n))\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..2695554 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,7 +692,29 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.iterables import uniq\n+from sympy.utilities.pytest import raises\n+\n def test_uniq():\n+    # Test case to check if RuntimeError is raised when modifying list during iteration\n+    f = [1, 2, 3, 4, 1, 2]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    # Test case with nested lists\n+    f = [[1], [2], [3], [1], [2]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    # Ensure `uniq` works correctly without modifications\n+    assert list(uniq(p.copy() for p in partitions(4))) == \\\n+        [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n+    assert list(uniq(x % 2 for x in range(5))) == [0, 1]\n+    assert list(uniq('a')) == ['a']\n+    assert list(uniq('ababc')) == list('abc')\n+    assert list(uniq([[1], [2, 1], [1]])) == [[1], [2, 1]]\n+    assert list(uniq(permutations(i for i in [[1], 2, 2]))) == \\\n+        [([1], 2, 2), (2, [1], 2), (2, 2, [1])]\n+    assert list(uniq([2, 3, 2, 4, [2], [1], [2], [3], [1]])) == \\\n+        [2, 3, 4, [2], [1], [3]]\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     assert list(uniq(x % 2 for x in range(5))) == [0, 1]\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..b50247b 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -8,6 +9,7 @@ from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n+from django.db.models import Max\n \n from .models import (\n     Article, Author, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..6a086a7 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,6 +546,27 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n+    def test_subquery_sql(self):\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        self.assertIs(employees.query.subquery, False)\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql)\n+        \n+    def test_subquery_sql_without_subquery_flag(self):\n+        # Test without setting subquery flag to ensure the SQL is invalid as described in the issue\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        employees_subquery.query.subquery = False  # Explicitly set to False\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+\n+        # Check that the SQL is not valid (missing initial 'S' and trailing ')')\n+        self.assertFalse(sql.startswith('(SELECT '))\n+        self.assertFalse(sql.endswith(')'))\n+\n     def test_uuid_pk_subquery(self):\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..c66de4a 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,26 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +184,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..b877792 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -6,6 +7,9 @@ import platform\n from threading import Timer\n from types import SimpleNamespace\n import warnings\n+import pickle\n+import matplotlib.pyplot as plt\n+from matplotlib.figure import Figure\n \n import numpy as np\n import pytest\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..8127d44 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -1623,7 +1624,20 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_hue_map(self):\n+        import seaborn as sns\n+        iris = sns.load_dataset(\"iris\")\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        \n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            success = True\n+        except Exception as e:\n+            success = False\n+            print(f\"Error encountered: {e}\")\n+        \n+        assert success, \"PairGrid with hue in map raised an error\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..28b9a2f 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -404,6 +404,11 @@ class TestCustomConftests:\n         testdir.makepyfile(\"def test_x(): pass\")\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        \n+        # Test the new shortcut -c\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n@@ -434,6 +439,11 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        \n+        # Test the new shortcut -c\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..a91098b 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -94,8 +94,17 @@ def missing_attr(c,\n class _ClassWithDocumentedInit:\n     \"\"\"Class docstring.\"\"\"\n \n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n+    \"\"\"Class docstring.\"\"\"\n+\n     def __init__(self, x: int) -> None:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..5d350ef 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -79,6 +79,13 @@ def test_Identity():\n \n     assert A*Im == A\n     assert In*A == A\n+    \n+    # Test case for verifying element-wise sum of an identity matrix\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).subs(n, 3).doit() == 3\n+\n+    # Additional test case without subs to verify the sum for general n\n+    total_sum_expr = Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1))\n+    assert total_sum_expr.doit() == n\n \n     assert transpose(In) == In\n     assert In.inverse() == In\n",
  "sympy__sympy-20049": "diff --git a/sympy/physics/vector/point.py b/sympy/physics/vector/point.py\nindex b711aa3..5aab841 100644\n--- a/sympy/physics/vector/point.py\n+++ b/sympy/physics/vector/point.py\n@@ -521,6 +521,18 @@ class Point(object):\n         if not (frame in self._vel_dict):\n             raise ValueError('Velocity of point ' + self.name + ' has not been'\n                              ' defined in ReferenceFrame ' + frame.name)\n+        # Attempt to calculate the velocity if not explicitly defined\n+        if frame not in self._vel_dict:\n+            parent_points = self._vel_dict.keys()\n+            for parent in parent_points:\n+                if parent in frame._dcm_cache:\n+                    # Calculate the velocity relative to a known parent point\n+                    pos_vector = self.pos_from(parent)\n+                    vel_vector = pos_vector.dt(frame)\n+                    self.set_vel(frame, vel_vector)\n+                    return vel_vector\n+            raise ValueError('Velocity of point ' + self.name + ' has not been'\n+                             ' defined in ReferenceFrame ' + frame.name)\n         return self._vel_dict[frame]\n \n     def partial_velocity(self, frame, *gen_speeds):\n",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..f0bf177 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -245,6 +245,12 @@ GOOD_PAIRS = [\n     (r\"5^0 - 4^0\", _Add(_Pow(5, 0), _Mul(-1, _Pow(4, 0)))),\n ]\n \n+def test_latex_fraction_parsing():\n+    from sympy.parsing.latex import parse_latex\n+    expr = parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")\n+    expected = ((a**3 + b)/c)/(1/(c**2))\n+    assert expr == expected, f\"Expected: {expected}, but got: {expr}\"\n+\n \n def test_parseable():\n     from sympy.parsing.latex import parse_latex\n"
}