{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..1a2e47d 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -135,6 +135,47 @@ def test_separable(compound_model, result):\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n \n+def test_nested_compound_models_separability():\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+\n+    # Original issue example\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    expected_matrix_cm = np.array([[True, False],\n+                                   [False, True]])\n+    assert_allclose(separability_matrix(cm), expected_matrix_cm)\n+\n+    # More complex model - not nested\n+    complex_cm = m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)\n+    expected_matrix_complex_cm = np.array([[True, True, False, False],\n+                                           [True, True, False, False],\n+                                           [False, False, True, False],\n+                                           [False, False, False, True]])\n+    assert_allclose(separability_matrix(complex_cm), expected_matrix_complex_cm)\n+\n+    # Nested compound model\n+    nested_cm = m.Pix2Sky_TAN() & cm\n+    expected_matrix_nested_cm = np.array([[True, True, False, False],\n+                                          [True, True, False, False],\n+                                          [False, False, True, False],\n+                                          [False, False, False, True]])\n+    assert_allclose(separability_matrix(nested_cm), expected_matrix_nested_cm)\n+\n+    # Additional nested model test cases\n+    nested_cm2 = (m.Scale(2) & m.Scale(3)) & (m.Linear1D(1) & m.Linear1D(2))\n+    expected_matrix_nested_cm2 = np.array([[True, False, False, False],\n+                                           [False, True, False, False],\n+                                           [False, False, True, False],\n+                                           [False, False, False, True]])\n+    assert_allclose(separability_matrix(nested_cm2), expected_matrix_nested_cm2)\n+\n+    nested_cm3 = (m.Linear1D(1) & m.Linear1D(2)) & (m.Scale(2) & m.Scale(3))\n+    expected_matrix_nested_cm3 = np.array([[True, False, False, False],\n+                                           [False, True, False, False],\n+                                           [False, False, True, False],\n+                                           [False, False, False, True]])\n+    assert_allclose(separability_matrix(nested_cm3), expected_matrix_nested_cm3)\n+\n def test_custom_model_separable():\n     @custom_model\n     def model_a(x):\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..4060a36 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,6 +1,10 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n+import numpy as np\n+import astropy.units as u\n+from astropy.table import QTable\n \n from astropy.io import ascii\n \n@@ -184,4 +188,28 @@ Col1      Col2 Col3 Col4\n  2.4 's worlds    2    2\n ==== ========= ==== ====\n \"\"\",\n-    )\n+    )\n+\n+\n+def test_rst_with_header_rows():\n+    \"\"\"Test writing a table with specified header_rows in RST format\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..2e8506d 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -108,8 +108,89 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+import pytest\n+import numpy as np\n+from astropy.utils.exceptions import AstropyUserWarning\n+from astropy.table import Table\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_roundtrip(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n+    ! Columns are as labelled\n+    READ TERR 1\n+    READ SERR 2\n+    ! WT -- hard data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   NO       0.212439\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000\n+    NO NO NO NO NO\n+    ! WT -- soft data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   0.726155        0.583890\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   2.410935        1.393592\n+    NO NO NO NO NO\n+    ! WT -- hardness ratio\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    ! Add command, just to raise the warning.\n+    READ TERR 1\n+    ! WT -- whatever\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    NO 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    \"\"\"\n+    \n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n \n-def test_read_example():\n+    path = str(tmp_path / \"test.qdp\")\n+    path2 = str(tmp_path / \"test2.qdp\")\n+\n+    with open(path, \"w\") as fp:\n+        print(example_qdp, file=fp)\n+    with pytest.warns(AstropyUserWarning) as record:\n+        table = _read_table_qdp(path, names=[\"MJD\", \"Rate\"], table_id=0)\n+    assert np.any(\n+        [\n+            \"This file contains multiple command blocks\" in r.message.args[0]\n+            for r in record\n+        ]\n+    )\n+\n+    _write_table_qdp(table, path2)\n+\n+    new_table = _read_table_qdp(path2, names=[\"MJD\", \"Rate\"], table_id=0)\n+\n+    for col in new_table.colnames:\n+        is_masked = np.array([np.ma.is_masked(val) for val in new_table[col]])\n+        if np.any(is_masked):\n+            # All NaN values are read as such.\n+            assert np.ma.is_masked(table[col][is_masked])\n+\n+        is_nan = np.array(\n+            [(not np.ma.is_masked(val) and np.isnan(val)) for val in new_table[col]]\n+        )\n+        # All non-NaN values are the same\n+        assert np.allclose(new_table[col][~is_nan], table[col][~is_nan])\n+        if np.any(is_nan):\n+            # All NaN values are read as such.\n+            assert np.isnan(table[col][is_nan])\n+    assert np.allclose(new_table[\"MJD_perr\"], [2.378472e-05, 1.1446759e-05])\n+\n+    for meta_name in [\"initial_comments\", \"comments\"]:\n+        assert meta_name in new_table.meta\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..c548e27 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -253,8 +253,25 @@ class TestTableFunctions(FitsTestCase):\n         # When there are scaled columns, the raw data are in data._parent\n \n         t.close()\n-\n-    def test_ascii_table(self):\n+    import numpy as np\n+    from astropy.io import fits\n+\n+    def test_exponent_replacement_in_fitsrec(self):\n+        # Create an array with floating point numbers\n+        r1 = np.array([11.0, 12.0])\n+        # Define a column with format 'D' which should use 'D' in exponents\n+        c2 = fits.Column(name='def', format='D', array=r1, bscale=1.0, bzero=0.0)\n+        hdu = fits.TableHDU.from_columns([c2])\n+        hdu.writeto(self.temp('test_exponent.fits'), overwrite=True)\n+\n+        with open(self.temp('test_exponent.fits')) as f:\n+            file_content = f.read()\n+            # Check if the file content contains the exponent with 'D'\n+            assert '1.1000000000000000D+01' in file_content\n+            assert '1.2000000000000000D+01' in file_content\n+\n+        with fits.open(self.temp('test_exponent.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data)\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n         ra1 = np.rec.array([\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..c3e36f2 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1092,6 +1092,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         self.assertEqual(default_storage.base_location, '')\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Test that the default file upload permissions are set to 0o644 when\n+        no FILE_UPLOAD_PERMISSIONS setting is provided.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n \n     def test_override_file_upload_permissions(self):\n         \"\"\"\n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..f1c82ab 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,7 +75,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +84,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..9f95041 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            'trailingnewline\\n'\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -258,4 +259,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..a4d2853 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..324ca1d 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,3 +1,4 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n@@ -6,6 +7,8 @@ from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n \n from .models import Proxy, UserProxy\n+from django.contrib.auth.models import Permission\n+from django.contrib.contenttypes.models import ContentType\n \n update_proxy_permissions = import_module('django.contrib.auth.migrations.0011_update_proxy_permissions')\n \n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..1b6091a 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -3,6 +3,24 @@ import os\n import py_compile\n import shutil\n import sys\n+class TestAutoreloaderManagePy(SimpleTestCase):\n+    def test_main_module_is_resolved(self):\n+        \"\"\"Test that the main module (manage.py) is tracked by the autoreloader.\"\"\"\n+        main_module = sys.modules['__main__']\n+        self.assertFileFound(Path(main_module.__file__))\n+\n+    def test_stat_reloader_tracks_manage_py(self):\n+        \"\"\"Test that changes to manage.py are tracked by StatReloader.\"\"\"\n+        reloader = StatReloader()\n+        main_module = sys.modules['__main__']\n+        \n+        # Simulate manage.py path\n+        manage_py_path = Path(main_module.__file__)\n+        \n+        # Ensure the manage.py is being tracked\n+        watched_files = list(reloader.watched_files())\n+        self.assertIn(manage_py_path, watched_files)\n+\n import tempfile\n import threading\n import time\n@@ -17,7 +35,8 @@ from django.apps.registry import Apps\n from django.test import SimpleTestCase\n from django.test.utils import extend_sys_path\n from django.utils import autoreload\n-from django.utils.autoreload import WatchmanUnavailable\n+from django.utils.autoreload import WatchmanUnavailable, StatReloader\n+import sys\n \n from .utils import on_macos_with_hfs\n \n",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..b9845c5 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -11,6 +11,9 @@ from unittest import mock\n \n from django.core import mail\n from django.core.files.uploadedfile import SimpleUploadedFile\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n+from django.test import Client\n from django.db import DatabaseError, connection\n from django.shortcuts import render\n from django.template import TemplateDoesNotExist\n@@ -238,6 +241,17 @@ class DebugViewTests(SimpleTestCase):\n             m.assert_called_once_with(encoding='utf-8')\n \n \n+class Debug404PathConverterTests(SimpleTestCase):\n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        Test that raising Http404 in a path converter's to_python method\n+        results in a technical 404 response when DEBUG is True.\n+        \"\"\"\n+        client = Client()\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..c0067b1 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -80,6 +80,35 @@ class BinaryFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_exceeding_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n \n @isolate_apps('invalid_models_tests')\n class CharFieldTests(SimpleTestCase):\n@@ -111,6 +140,35 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_exceeding_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_negative_max_length(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=-1)\n@@ -124,6 +182,35 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_exceeding_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_bad_max_length_value(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=\"bad\")\n@@ -137,6 +224,35 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_exceeding_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_str_max_length_value(self):\n         class Model(models.Model):\n             field = models.CharField(max_length='20')\n@@ -150,6 +266,35 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_exceeding_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_str_max_length_type(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=True)\n@@ -163,6 +308,35 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_exceeding_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_non_iterable_choices(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=10, choices='bad')\n@@ -176,6 +350,35 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_exceeding_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_non_iterable_choices_two_letters(self):\n         \"\"\"Two letters isn't a valid choice pair.\"\"\"\n         class Model(models.Model):\n@@ -191,6 +394,35 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_exceeding_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_iterable_of_iterable_choices(self):\n         class ThingItem:\n             def __init__(self, value, display):\n@@ -272,6 +504,35 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_exceeding_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_choices_named_group_bad_structure(self):\n         class Model(models.Model):\n             field = models.CharField(\n@@ -293,6 +554,35 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_exceeding_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_choices_named_group_lazy(self):\n         class Model(models.Model):\n             field = models.CharField(\n@@ -317,6 +607,35 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_exceeding_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_bad_validators(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=10, validators=[True])\n@@ -334,6 +653,35 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_exceeding_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     @unittest.skipUnless(connection.vendor == 'mysql',\n                          \"Test valid only for MySQL\")\n     def test_too_long_char_field_under_mysql(self):\n@@ -352,6 +700,35 @@ class CharFieldTests(SimpleTestCase):\n             )\n         ])\n \n+    def test_choices_exceeding_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n \n @isolate_apps('invalid_models_tests')\n class DateFieldTests(SimpleTestCase):\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..8e921e3 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -247,6 +247,48 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n \n+    def test_serialize_enum_with_translations(self):\n+        from django.utils.translation import gettext_lazy as _\n+\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        field = models.CharField(\n+            default=TranslatedEnum.GOOD,\n+            choices=[(tag.name, tag.value) for tag in TranslatedEnum],\n+        )\n+        serialized_value = MigrationWriter.serialize(field)[0]\n+        \n+        # We expect the default to be serialized using the Enum name, not its translated value\n+        expected_serialized = (\n+            \"models.CharField(choices=[\"\n+            \"('GOOD', _('Good')), \"\n+            \"('BAD', _('Bad'))], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n+        self.assertEqual(serialized_value, expected_serialized)\n+\n+    def test_enum_serialization_with_default(self):\n+        class StatusEnum(enum.Enum):\n+            ACTIVE = 'active'\n+            INACTIVE = 'inactive'\n+\n+        field = models.CharField(\n+            default=StatusEnum.ACTIVE,\n+            choices=[(tag.name, tag.value) for tag in StatusEnum],\n+        )\n+        serialized_value = MigrationWriter.serialize(field)[0]\n+\n+        # Ensure the default is serialized with the Enum name\n+        expected_serialized = (\n+            \"models.CharField(choices=[\"\n+            \"('ACTIVE', 'active'), \"\n+            \"('INACTIVE', 'inactive')], \"\n+            \"default=migrations.test_writer.StatusEnum['ACTIVE'])\"\n+        )\n+        self.assertEqual(serialized_value, expected_serialized)\n+\n     def test_serialize_lazy_objects(self):\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..f285339 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,9 +317,28 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_two_digit_years(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Define current mock dates\n+        utcnow_1 = datetime(2023, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2048, 11, 6, 8, 49, 37)\n+\n+        tests = [\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        ]\n+\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..a08ec43 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,23 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+import unittest\n+from django.db import models\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", \"The first choice, it is\"\n+    SECOND_CHOICE = \"second\", \"The second choice, it is\"\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class MyChoiceTest(unittest.TestCase):\n+    def setUp(self):\n+        self.obj = MyObject(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_mychoice_str(self):\n+        self.assertEqual(str(self.obj.my_str_value), MyChoice.FIRST_CHOICE)\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..dd7b662 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -187,6 +187,32 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertEqual(WhizIterEmpty(c='').c, '')        # Empty value\n \n \n+class FooBarOverrideDisplayTests(TestCase):\n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        # Ensure that the overridden method is called\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_str_method_uses_overridden_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def __str__(self):\n+                return self.get_foo_bar_display()\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        # Ensure that __str__ uses the overridden display method\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(str(f), 'something')\n+\n class GetChoicesTests(SimpleTestCase):\n \n     def test_empty_choices(self):\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..999c8b2 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,30 @@\n+\n+class InheritedChoicesTests(TestCase):\n+    \n+    def test_inherited_choices_display(self):\n+        class BaseModel(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Base A'), ('B', 'Base B')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ChildModel(BaseModel):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Child A'), ('B', 'Child B'), ('C', 'Child C')])\n+\n+        # Test that the overridden choices work correctly.\n+        self.assertEqual(ChildModel(foo='A').get_foo_display(), 'Child A')\n+        self.assertEqual(ChildModel(foo='B').get_foo_display(), 'Child B')\n+        self.assertEqual(ChildModel(foo='C').get_foo_display(), 'Child C')\n+\n+        # Ensure that an invalid choice returns the raw value.\n+        self.assertEqual(ChildModel(foo='D').get_foo_display(), 'D')\n+\n+        # Ensure that None returns None.\n+        self.assertIsNone(ChildModel(foo=None).get_foo_display())\n+\n+        # Ensure that an empty string returns an empty string.\n+        self.assertEqual(ChildModel(foo='').get_foo_display(), '')\n+\n import pickle\n \n from django import forms\n@@ -5,6 +32,8 @@ from django.core.exceptions import ValidationError\n from django.db import models\n from django.test import SimpleTestCase, TestCase\n from django.utils.functional import lazy\n+from django.db import models\n+from django.test import TestCase\n \n from .models import (\n     Bar, Choiceful, Foo, RenamedField, VerboseNameField, Whiz, WhizDelayed,\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..2b4c0de 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,7 +76,46 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+        ],\n+    )\n+    def test_sublanguage_without_error(self):\n+        \"\"\"Test that sublanguages use the base language if available.\"\"\"\n+        tests = [\n+            'de-at',  # base 'de' is available\n+            'es-ar',  # base 'es' is available\n+        ]\n+        for tag in tests:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('en', 'English'),\n+            ('fr', 'French'),\n+        ],\n+    )\n+    def test_sublanguage_with_error(self):\n+        \"\"\"Test that sublanguages not in LANGUAGES raise an error.\"\"\"\n+        tests = [\n+            'fr-ca',  # base 'fr' is available, but 'fr-ca' is not in LANGUAGES\n+            'en-gb',  # base 'en' is available, but 'en-gb' is not in LANGUAGES\n+        ]\n+        for tag in tests:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [\n+                    Error(\n+                        'You have provided a value for the LANGUAGE_CODE setting that is '\n+                        'not in the LANGUAGES setting.',\n+                        id='translation.E004',\n+                    ),\n+                ])\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..5648bc9 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +7,7 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..1046281 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -127,6 +127,26 @@ class RelativeFieldTests(SimpleTestCase):\n                 id='fields.W343',\n             ),\n         ])\n+    \n+    def test_incorrect_foreign_key_hint(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through=\"AmbiguousRelationship\")\n+\n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('field')\n+        errors = field.check(from_model=Group)\n+        self.assertTrue(any(\n+            error.id == 'fields.E334' and\n+            \"use ManyToManyField('self', through='AmbiguousRelationship')\" in error.hint\n+            for error in errors\n+        ))\n \n     def test_ambiguous_relationship_model(self):\n \n@@ -158,6 +178,26 @@ class RelativeFieldTests(SimpleTestCase):\n                 id='fields.E335',\n             ),\n         ])\n+    \n+    def test_incorrect_foreign_key_hint(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through=\"AmbiguousRelationship\")\n+\n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('field')\n+        errors = field.check(from_model=Group)\n+        self.assertTrue(any(\n+            error.id == 'fields.E334' and\n+            \"use ManyToManyField('self', through='AmbiguousRelationship')\" in error.hint\n+            for error in errors\n+        ))\n \n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..22086fb 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1249,7 +1249,56 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n-    def test_request_meta_filtering(self):\n+    def test_cleanse_setting_handles_nested_iterables(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            \"foo\": \"value\",\n+            \"secret\": \"value\",\n+            \"token\": \"value\",\n+            \"something\": [\n+                {\"foo\": \"value\"},\n+                {\"secret\": \"value\"},\n+                {\"token\": \"value\"},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": \"value\"},\n+                    {\"token\": \"value\"},\n+                ],\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": \"value\"},\n+                    {\"token\": \"value\"},\n+                ],\n+            ]\n+        }\n+        cleansed = {\n+            \"foo\": \"value\",\n+            \"secret\": reporter_filter.cleansed_substitute,\n+            \"token\": reporter_filter.cleansed_substitute,\n+            \"something\": [\n+                {\"foo\": \"value\"},\n+                {\"secret\": reporter_filter.cleansed_substitute},\n+                {\"token\": reporter_filter.cleansed_substitute},\n+            ],\n+            \"else\": [\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": reporter_filter.cleansed_substitute},\n+                    {\"token\": reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {\"foo\": \"value\"},\n+                    {\"secret\": reporter_filter.cleansed_substitute},\n+                    {\"token\": reporter_filter.cleansed_substitute},\n+                ],\n+            ]\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', initial),\n+            cleansed,\n+        )\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n         self.assertEqual(\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..713ce58 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1758,9 +1758,30 @@ class OperationTests(OperationTestBase):\n     def test_alter_index_together_remove(self):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_with_unique_together(self):\n+        app_label = 'test_alter_indextogether_with_uniquetogether'\n+        table_name = f'{app_label}_pony'\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n-    def test_add_constraint(self):\n+        # Remove index_together\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n         gt_constraint = models.CheckConstraint(check=gt_check, name=\"test_add_constraint_pony_pink_gt_2\")\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..4fe60dc 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -697,7 +697,20 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n-    def test_fast_delete_combined_relationships(self):\n+    def test_delete_no_objects_with_foreign_keys(self):\n+        \"\"\"\n+        Test that deleting a QuerySet with no objects and with foreign key \n+        relationships returns (0, {'model': 0, ...}) instead of (0, {}).\n+        \"\"\"\n+        r = R.objects.create()  # Assume R has foreign keys\n+        self.assertEqual(R.objects.filter(id=9999).delete(), (0, {R._meta.label: 0}))\n+\n+    def test_delete_no_objects_without_foreign_keys(self):\n+        \"\"\"\n+        Test that deleting a QuerySet with no objects and without foreign key \n+        relationships returns (0, {'model': 0, ...}) instead of (0, {}).\n+        \"\"\"\n+        self.assertEqual(A.objects.filter(id=9999).delete(), (0, {A._meta.label: 0}))\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n         origin = Origin.objects.create()\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..fdfef79 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,35 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_static_file_response_404(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request for a non-existent file.\n+        scope = self.async_request_factory._base_scope(path='/static/nonexistent.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Read the response.\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 404)\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], b'')\n+\n+    async def test_async_static_file_response(self):\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        request = self.async_request_factory.get('/static/file.txt')\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 200)\n+        with (TEST_STATIC_ROOT / 'file.txt').open('rb') as f:\n+            self.assertEqual(response.content, f.read())\n+        response.close()\n+\n+    async def test_async_static_file_response_not_found(self):\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        request = self.async_request_factory.get('/static/nonexistent.txt')\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..1b0922a 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,15 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Test cases to verify the issue fix.\n+            (' multiple---dash and  space ', 'multiple-dash-and-space', False),\n+            ('\\\\t whitespace-in-value \\\\n', 'whitespace-in-value', False),\n+            ('underscore_in-value', 'underscore_in-value', False),\n+            ('__strip__underscore-value___', 'strip-underscore-value', False),\n+            ('--strip-dash-value---', 'strip-dash-value', False),\n+            ('__strip-mixed-value---', 'strip-mixed-value', False),\n+            ('_ -strip-mixed-value _-', 'strip-mixed-value', False),\n+            ('___This is a test ---', 'this-is-a-test', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..e71522a 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,3 +1,4 @@\n+\n import operator\n \n from django.db import DatabaseError, NotSupportedError, connection\n@@ -45,7 +46,32 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__lte=4)\n         self.assertNumbersEqual(qs1.difference(qs2), [5], ordered=False)\n \n-    def test_union_distinct(self):\n+    def test_union_none(self):\n+        \"\"\"\n+        Test that none() on a union query returns an empty result.\n+        \"\"\"\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        union_qs = qs1.union(qs2)\n+        self.assertSequenceEqual(union_qs.none(), [])\n+\n+    def test_intersection_none(self):\n+        \"\"\"\n+        Test that none() on an intersection query returns an empty result.\n+        \"\"\"\n+        qs1 = Number.objects.filter(num__lte=5)\n+        qs2 = Number.objects.filter(num__gte=5)\n+        intersection_qs = qs1.intersection(qs2)\n+        self.assertSequenceEqual(intersection_qs.none(), [])\n+\n+    def test_difference_none(self):\n+        \"\"\"\n+        Test that none() on a difference query returns an empty result.\n+        \"\"\"\n+        qs1 = Number.objects.filter(num__lte=5)\n+        qs2 = Number.objects.filter(num__lte=4)\n+        difference_qs = qs1.difference(qs2)\n+        self.assertSequenceEqual(difference_qs.none(), [])\n         qs1 = Number.objects.all()\n         qs2 = Number.objects.all()\n         self.assertEqual(len(list(qs1.union(qs2, all=True))), 20)\n@@ -313,4 +339,4 @@ class QuerySetSetOperationTests(TestCase):\n                         NotSupportedError,\n                         msg % (operation, combinator),\n                     ):\n-                        getattr(getattr(qs, combinator)(qs), operation)()\n+                        getattr(getattr(qs, combinator)(qs), operation)()\n",
  "django__django-13230": "",
  "django__django-13315": "",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..3737fca 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -1,6 +1,9 @@\n from django.contrib.contenttypes.fields import (\n     GenericForeignKey, GenericRelation,\n )\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n from django.contrib.contenttypes.models import ContentType\n from django.core.checks import Error\n from django.core.exceptions import FieldDoesNotExist, FieldError\n@@ -11,6 +14,37 @@ from django.test.utils import isolate_apps\n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n+    def test_abstract_inherited_fields_not_equal(self):\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Ensuring fields from different models are not equal\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        # Ensuring fields are properly ordered\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        # Ensuring fields' hashes are not equal\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n     def test_single_parent(self):\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n@@ -347,4 +381,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..f22ab5d 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,12 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .with_custom_email_field import CustomEmailField\n+from .models import CustomEmailField, IntegerUsernameUser\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,6 +40,28 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                # Simulate email change\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n+\n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..8d25e34 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,9 +1,52 @@\n+\n+class TestNamedTupleRangeLookup(unittest.TestCase):\n+    def setUp(self):\n+        # Assuming Company and ceo are defined elsewhere in the actual test suite\n+        self.ceo = None  # Replace with actual CEO object setup if needed\n+        self.c5 = Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=self.ceo)\n+\n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_with_tuple(self):\n+        range_tuple = (51, 100)\n+        qs = Company.objects.filter(\n+            num_employees__range=range_tuple,\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_with_list(self):\n+        range_list = [51, 100]\n+        qs = Company.objects.filter(\n+            num_employees__range=range_list,\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_different_names(self):\n+        SalaryRange = namedtuple('SalaryRange', ['low', 'high'])\n+        qs = Company.objects.filter(\n+            num_employees__range=SalaryRange(low=51, high=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_insufficient_args(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        with self.assertRaises(TypeError):\n+            Company.objects.filter(\n+                num_employees__range=EmployeeRange(minimum=51),\n+            )\n+\n import datetime\n import pickle\n import unittest\n import uuid\n from copy import deepcopy\n from decimal import Decimal\n+from collections import namedtuple\n from unittest import mock\n \n from django.core.exceptions import FieldError\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..a62dbb9 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,18 +19,26 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n@@ -1866,6 +1874,43 @@ class ArgumentOrder(AdminScriptTestCase):\n             \"('verbosity', 1)]\" % option_b\n         )\n \n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_different_script(self):\n+        \"\"\"\n+        Verify that using a different script name in argv correctly affects\n+        the usage output.\n+        \"\"\"\n+        args = ['help', 'migrate']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['incorrect-script-name'] + args):\n+                execute_from_command_line(['custom-script'] + args)\n+        self.assertIn('usage: custom-script migrate', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_empty_sys_argv(self):\n+        \"\"\"\n+        Verify that an empty sys.argv does not affect the custom program name\n+        passed to execute_from_command_line.\n+        \"\"\"\n+        args = ['help', 'check']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', []):\n+                execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n \n @override_settings(ROOT_URLCONF='admin_scripts.urls')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..fc1deae 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -44,9 +45,51 @@ class ShellCommandTestCase(SimpleTestCase):\n         with self.assertRaisesMessage(CommandError, \"Couldn't import bpython interface.\"):\n             call_command('shell', interface='bpython')\n \n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n     # [1] Patch select to prevent tests failing when when the test suite is run\n     # in parallel mode. The tests are run in a subprocess and the subprocess's\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..15416c4 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -958,7 +958,33 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n             html=True\n         )\n \n-    def test_extra_inlines_are_not_shown(self):\n+    def test_verbose_name_as_default_plural_inline(self):\n+        class ProfileInlineWithVerboseNameOnly(TabularInline):\n+            model = Profile\n+            verbose_name = 'Verbose Name Only Child'\n+\n+        class ProfileInlineWithNoVerbose(TabularInline):\n+            model = Profile\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [\n+            ProfileInlineWithVerboseNameOnly,\n+            ProfileInlineWithNoVerbose,\n+        ]\n+\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+\n+        # Inline with verbose_name only should use it for pluralization\n+        self.assertContains(response, '<h2>Verbose Name Only Childs</h2>')\n+        self.assertContains(response, 'Add another Verbose Name Only Child')\n+\n+        # Inline with no verbose names should default to model's verbose name\n+        self.assertContains(response, '<h2>Profiles</h2>')\n+        self.assertContains(response, 'Add another Profile')\n         response = self.client.get(self.change_url)\n         self.assertNotContains(response, 'id=\"id_question_set-0-text\"')\n \n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..4e0f9f2 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -594,6 +594,11 @@ class TestQuerying(TestCase):\n             NullableJSONModel.objects.filter(value__j__isnull=False),\n             [self.objs[4]],\n         )\n+        # New test case for __isnull=True to ensure it does not match JSON nulls\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],  # Ensure it matches objects without the key 'j'\n+        )\n \n     def test_isnull_key_or_none(self):\n         obj = NullableJSONModel.objects.create(value={'a': None})\n",
  "django__django-13768": "",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..1be7c7e 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -282,8 +282,18 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n         )\n \n \n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+\n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n     def test_modelchoicefield(self):\n+        # Test that the invalid choice error message includes the invalid value.\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            }\n+        )\n+        self.assertFormErrors(['\"invalid\" is not one of the available choices.'], f.clean, 'invalid')\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n         ChoiceModel.objects.create(pk=2, name='b')\n@@ -307,4 +317,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..61be43c 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -16,7 +17,11 @@ class QTests(SimpleTestCase):\n         self.assertEqual(q | Q(), q)\n         self.assertEqual(Q() | q, q)\n \n-    def test_combine_or_both_empty(self):\n+    def test_q_object_with_dict_keys_or(self):\n+        # This test ensures that using dict_keys with | operator works without error\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n         self.assertEqual(Q() | Q(), Q())\n \n     def test_combine_not_q_object(self):\n",
  "django__django-14017": "",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..a3c01f6 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1127,8 +1127,24 @@ class ResolverMatchTests(SimpleTestCase):\n                 self.assertEqual(match[0], func)\n                 self.assertEqual(match[1], args)\n                 self.assertEqual(match[2], kwargs)\n-\n-    def test_resolver_match_on_request(self):\n+    \n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_functools_partial_unwrapping(self):\n+        tests = [\n+            ('partial', 'template.html'),\n+            ('partial_nested', 'nested_partial.html'),\n+            ('partial_wrapped', 'template.html'),\n+        ]\n+        for name, template_name in tests:\n+            with self.subTest(name=name):\n+                func = functools.partial(views.empty_view, template_name=template_name)\n+                resolved = resolve(f'/{name}/')\n+                expected_repr = (\n+                    f\"ResolverMatch(func={func.func!r}, args=(), kwargs={{}}, \"\n+                    f\"url_name='{name}', app_names=[], namespaces=[], \"\n+                    f\"route='{name}/')\"\n+                )\n+                self.assertEqual(repr(resolved), expected_repr)\n         response = self.client.get('/resolver_match/')\n         resolver_match = response.resolver_match\n         self.assertEqual(resolver_match.url_name, 'test-resolver-match')\n@@ -1146,6 +1162,11 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+from django.urls import resolve\n+from django.test import SimpleTestCase, override_settings\n+from . import views\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..39d1de2 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,6 +1,8 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n+from django.utils.module_loading import import_string\n from django.test.utils import isolate_apps\n \n \n@@ -66,7 +68,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, import_string(self.settings.DEFAULT_AUTO_FIELD))\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, import_string(self.settings.DEFAULT_AUTO_FIELD))\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +104,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, import_string(self.settings.DEFAULT_AUTO_FIELD))\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, import_string(self.settings.DEFAULT_AUTO_FIELD))\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..4a31ab7 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2217,6 +2217,36 @@ class StartApp(AdminScriptTestCase):\n             \"won't replace conflicting files.\"\n         )\n \n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        \"\"\"\n+        Ensure that startapp can handle a trailing slash in the target directory name.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app1')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app1', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n+    def test_no_trailing_slash_in_target_app_directory_name(self):\n+        \"\"\"\n+        Ensure that startapp works correctly without a trailing slash in the target directory name.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app2')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app2')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n+    def test_non_existent_directory_with_trailing_slash(self):\n+        \"\"\"\n+        Ensure startapp raises an error when the non-existent directory with a trailing slash is provided.\n+        \"\"\"\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'non_existent/')])\n+        self.assertOutput(\n+            err,\n+            \"CommandError: Destination directory 'apps{}non_existent' does not exist, please create it first.\".format(os.sep)\n+        )\n+\n     def test_template(self):\n         out, err = self.run_django_admin(['startapp', 'new_app'])\n         self.assertNoOutput(err)\n",
  "django__django-14411": "",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..e53e794 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,7 +658,51 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n-    def test_simple_migration(self):\n+import datetime\n+from django.db import models\n+from django.db.migrations.writer import MigrationWriter\n+from django.test import TestCase\n+import functools\n+\n+class MigrationWriterTests(TestCase):\n+    def test_serialize_type_model(self):\n+        self.assertSerializedEqual(models.Model)\n+        self.assertSerializedResultEqual(\n+            MigrationWriter.serialize(models.Model),\n+            (\"('models.Model', {'from django.db import models'})\", set()),\n+        )\n+\n+    def test_serialize_custom_model_field(self):\n+        \"\"\"\n+        Test serialization of a custom model field used in migrations.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        serialized = MigrationWriter.serialize(MyField())\n+        self.assertIn(\"MyField\", serialized[0])\n+        self.assertIn(\"from django.db import models\", serialized[1])\n+\n+    def test_migration_import_statements(self):\n+        \"\"\"\n+        Test that the generated migration includes necessary import statements.\n+        \"\"\"\n+        class MyMixin:\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = models.TextField(primary_key=True)\n+\n+        # Simulate what MigrationWriter would do\n+        writer = MigrationWriter(None)\n+        serialized = writer.serialize(MyModel)\n+        \n+        self.assertIn(\"from django.db import models\", serialized[0])\n+        self.assertIn(\"MyMixin\", serialized[0])\n         \"\"\"\n         Tests serializing a simple migration.\n         \"\"\"\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..09955fa 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -355,9 +355,14 @@ class FormsFormsetTestCase(SimpleTestCase):\n             'choices-1-choice': 'One',\n             'choices-1-votes': '1',\n         }\n+        # Test for nonform CSS class in non-form errors\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(str(non_form_errors), '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>')\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n \n     def test_formset_validate_min_unchanged_forms(self):\n@@ -980,8 +985,12 @@ class FormsFormsetTestCase(SimpleTestCase):\n             'drinks-0-name': 'Gin and Tonic',\n             'drinks-1-name': 'Gin and Tonic',\n         }\n+        # Test for nonform CSS class in non-form errors\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(str(non_form_errors), '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>')\n+        self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n     def test_formset_iteration(self):\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..49061cd 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -7,7 +7,7 @@ from django.test import TestCase\n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n     Invitation, Membership, Person, PersonSelfRefM2M, Recipe, RecipeIngredient,\n-    Relationship, SymmetricalFriendship,\n+    Relationship, SymmetricalFriendship, TestNoDefaultsOrNulls, CustomMembership,\n )\n \n \n@@ -31,6 +31,14 @@ class M2mThroughTests(TestCase):\n             attrgetter(\"name\")\n         )\n \n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        # Ensure that through_fields is hashable and can be compared\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        self.assertEqual(reverse_m2m.through_fields, ['event', 'invitee'])\n+        inherited_reverse_m2m = PersonChild._meta.get_field('events_invited')\n+        self.assertEqual(inherited_reverse_m2m.through_fields, ['event', 'invitee'])\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n+\n     def test_get_on_intermediate_model(self):\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..ab642ca 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -293,6 +293,26 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'pagination': {'more': False},\n         })\n \n+    def test_custom_serialize_result(self):\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return super().serialize_result(obj, to_field_name) | {'posted': str(obj.posted)}\n+\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = CustomAutocompleteJsonView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n \n @override_settings(ROOT_URLCONF='admin_views.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n",
  "django__django-14787": "",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..d536c03 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -346,7 +347,28 @@ class ModelChoiceFieldTests(TestCase):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n \n-    def test_queryset_manager(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        # Test that the hash of a ModelChoiceIteratorValue instance is consistent\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        # Test that different instances have different hashes\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+        \n+    def test_choice_value_in_dict(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        # Test that a ModelChoiceIteratorValue can be used as a key in a dictionary\n+        test_dict = {value_1: \"test_value\"}\n+        self.assertIn(value_1, test_dict)\n+        self.assertEqual(test_dict[value_1], \"test_value\")\n+        \n+    def test_choice_value_in_set(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        # Test that a ModelChoiceIteratorValue can be added to a set\n+        test_set = {value_1}\n+        self.assertIn(value_1, test_set)\n+        self.assertNotIn(value_2, test_set)\n         f = forms.ModelChoiceField(Category.objects)\n         self.assertEqual(len(f.choices), 4)\n         self.assertEqual(list(f.choices), [\n",
  "django__django-14999": "",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..098b41c 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -132,7 +132,19 @@ class MultiValueFieldTest(SimpleTestCase):\n             ['some text', ['J', 'P'], ['2009-04-25', '11:44:00']],\n         ))\n \n-    def test_disabled_has_changed(self):\n+    def test_multivaluewidget_label_no_index(self):\n+        class TestForm(Form):\n+            datetime = SplitDateTimeField()\n+\n+        form = TestForm()\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label for=\"id_datetime\">Datetime:</label></th>\n+            <td><input type=\"text\" name=\"datetime_0\" id=\"id_datetime_0\" required>\n+            <input type=\"text\" name=\"datetime_1\" id=\"id_datetime_1\" required></td></tr>\n+            \"\"\"\n+        )\n         f = MultiValueField(fields=(CharField(), CharField()), disabled=True)\n         self.assertIs(f.has_changed(['x', 'x'], ['y', 'y']), False)\n \n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..010334d 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -107,7 +107,18 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n                 with self.assertRaisesMessage(ValidationError, msg):\n                     f.clean(value)\n \n-    def test_urlfield_clean_required(self):\n+    def test_urlfield_clean_issue_resolution(self):\n+        f = URLField()\n+        # Test URLs that previously raised ValueError should now raise ValidationError.\n+        tests = [\n+            '////]@N.AN',  # Case that raised ValueError in original issue\n+            '#@A.bO',      # Similar malformed URL cases\n+        ]\n+        msg = \"'Enter a valid URL.'\"\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg):\n+                    f.clean(value)\n         f = URLField()\n         msg = \"'This field is required.'\"\n         with self.assertRaisesMessage(ValidationError, msg):\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..d79c9fc 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -238,6 +238,29 @@ class NonAggregateAnnotationTestCase(TestCase):\n         self.assertEqual(book.combined, 13410.0)\n         self.assertEqual(book.rating_count, 1)\n \n+    @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n+    def test_expression_wrapper_with_empty_list(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n+    def test_expression_wrapper_with_empty_list_and_aggregation(self):\n+        qs = Book.objects.filter(isbn='159059725').annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            rating_count=Count('rating'),\n+        )\n+        self.assertEqual([book.rating_count for book in qs], [1])\n+\n+    @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n+    def test_aggregate_over_expression_wrapper_with_empty_list(self):\n+        qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(qs['selected__sum'], Book.objects.count())\n+\n     @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n     def test_q_expression_annotation_with_aggregation(self):\n         book = Book.objects.filter(isbn='159059725').annotate(\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..9a33d11 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -134,6 +135,16 @@ class CookieTests(BaseTests, SimpleTestCase):\n \n         self.assertEqual(len(unstored_messages), 1)\n         self.assertEqual(unstored_messages[0].message, first_msg)\n+    def test_extra_tags_preservation(self):\n+        \"\"\"\n+        Test that extra_tags is correctly preserved as an empty string\n+        when serialized and deserialized.\n+        \"\"\"\n+        storage = self.get_storage()\n+        message = Message(constants.DEBUG, \"Test message with empty tags\", extra_tags=\"\")\n+        encoded = storage._encode(message)\n+        decoded_message = storage._decode(encoded)\n+        self.assertEqual(decoded_message.extra_tags, \"\")\n \n     def test_message_rfc6265(self):\n         non_compliant_chars = ['\\\\', ',', ';', '\"']\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..4393713 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -5,6 +5,8 @@ from django.template import autoreload\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import require_jinja2\n \n+from pathlib import Path\n+\n ROOT = Path(__file__).parent.absolute()\n EXTRA_TEMPLATES_DIR = ROOT / \"templates_extra\"\n \n@@ -28,12 +30,56 @@ EXTRA_TEMPLATES_DIR = ROOT / \"templates_extra\"\n         },\n     }])\n class TemplateReloadTests(SimpleTestCase):\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                'DIRS': [ROOT],\n+                'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+            }\n+        ]\n+    )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_restart_issue_with_BASE_DIR(self, mock_reset):\n+        \"\"\"Test dev server restart issue with BASE_DIR in TEMPLATES DIRS.\"\"\"\n+        # Simulate a file change within the template directory\n+        template_path = ROOT / 'templates' / 'index.html'\n+        self.assertTrue(autoreload.template_changed(None, template_path))\n+        mock_reset.assert_called_once()\n+\n+        # Simulate a non-template file change\n+        mock_reset.reset_mock()\n+        non_template_file = ROOT / 'non_template_file.txt'\n+        self.assertIsNone(autoreload.template_changed(None, non_template_file))\n+        mock_reset.assert_not_called()\n+\n     @mock.patch('django.template.autoreload.reset_loaders')\n     def test_template_changed(self, mock_reset):\n         template_path = Path(__file__).parent / 'templates' / 'index.html'\n         self.assertTrue(autoreload.template_changed(None, template_path))\n         mock_reset.assert_called_once()\n \n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                'DIRS': [ROOT],\n+                'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+            }\n+        ]\n+    )\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_restart_issue_with_BASE_DIR(self, mock_reset):\n+        \"\"\"Test dev server restart issue with BASE_DIR in TEMPLATES DIRS.\"\"\"\n+        # Simulate a file change within the template directory\n+        template_path = ROOT / 'templates' / 'index.html'\n+        self.assertTrue(autoreload.template_changed(None, template_path))\n+        mock_reset.assert_called_once()\n+\n+        # Simulate a non-template file change\n+        mock_reset.reset_mock()\n+        non_template_file = ROOT / 'non_template_file.txt'\n+        self.assertIsNone(autoreload.template_changed(None, non_template_file))\n+        mock_reset.assert_not_called()\n+\n     @mock.patch('django.template.autoreload.reset_loaders')\n     def test_non_template_changed(self, mock_reset):\n         self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..469bf7a 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,7 +185,30 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test was_modified_since with an empty string for the If-Modified-Since header.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n+    def test_was_modified_since_none(self):\n+        \"\"\"\n+        Test was_modified_since with None for the If-Modified-Since header.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=None, mtime=1))\n+\n+    def test_was_modified_since_invalid_date(self):\n+        \"\"\"\n+        Test was_modified_since with an invalid date string for the If-Modified-Since header.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"invalid-date\", mtime=1))\n+\n+    def test_was_modified_since_future_date(self):\n+        \"\"\"\n+        Test was_modified_since with a future date string for the If-Modified-Since header.\n+        \"\"\"\n+        future_date = http_date(9999999999)\n+        self.assertFalse(was_modified_since(header=future_date, mtime=1))\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..cfbb663 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,7 +1,9 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n \n+from argparse import ArgumentParser\n from admin_scripts.tests import AdminScriptTestCase\n \n from django.apps import apps\n@@ -411,7 +413,38 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_custom_management_command_help_formatting(self):\n+        \"\"\"\n+        Test that the help text in custom management commands is formatted correctly with newlines.\n+        \"\"\"\n+        class TestCommand(BaseCommand):\n+            help = \"Import a contract from tzkt.\\nExample usage:\\n    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\n+\n+            def add_arguments(self, parser):\n+                parser.add_argument('blockchain')\n+                parser.add_argument('target')\n+\n+        command = TestCommand()\n+        parser = ArgumentParser(\n+            prog='manage.py tzkt_import',\n+            formatter_class=ArgumentDefaultsHelpFormatter\n+        )\n+        command.add_arguments(parser)\n+        help_output = parser.format_help()\n+\n+        expected_help = (\n+            \"usage: manage.py tzkt_import [-h] blockchain target\\n\\n\"\n+            \"Import a contract from tzkt.\\n\"\n+            \"Example usage:\\n\"\n+            \"    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\\n\\n\"\n+            \"positional arguments:\\n\"\n+            \"  blockchain  \\n\"\n+            \"  target      \\n\\n\"\n+            \"optional arguments:\\n\"\n+            \"  -h, --help  show this help message and exit\\n\"\n+        )\n+\n+        self.assertIn(expected_help, help_output)\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..a9de3a5 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,7 +1,10 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n+from django.core.serializers.json import DjangoJSONEncoder\n+import json\n from django.utils.functional import lazystr\n from django.utils.html import (\n     conditional_escape,\n@@ -217,7 +220,32 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return json.dumps({\"custom\": \"encoder\"})\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"custom\": \"encoder\"}</script>',\n+        )\n+\n+    def test_json_script_with_default_encoder(self):\n+        # Ensure the default behavior is unchanged without specifying an encoder\n+        self.assertHTMLEqual(\n+            json_script({\"default\": \"encoder\"}),\n+            '<script type=\"application/json\">{\"default\": \"encoder\"}</script>',\n+        )\n+\n+    def test_json_script_with_id_and_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return json.dumps({\"another\": \"case\"})\n+\n+        self.assertHTMLEqual(\n+            json_script({}, element_id=\"test_id\", encoder=CustomDjangoJSONEncoder),\n+            '<script id=\"test_id\" type=\"application/json\">{\"another\": \"case\"}</script>',\n+        )\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..08787fd 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -399,6 +399,29 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n+from django.test import TestCase\n+from proxy_models.models import CustomModel, ProxyCustomModel, AnotherModel\n+\n+class ProxyModelQueryTestCase(TestCase):\n+    def setUp(self):\n+        self.proxy_custom = ProxyCustomModel.objects.create(name=\"Test Name\")\n+        self.another_model = AnotherModel.objects.create(custom=self.proxy_custom)\n+\n+    def test_select_related_only_proxy_model(self):\n+        # Testing the combination of select_related and only with a proxy model\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.get()\n+        self.assertEqual(result, self.another_model)\n+        self.assertEqual(result.custom.name, \"Test Name\")\n+\n+    def test_select_related_only_proxy_model_no_crash(self):\n+        # Ensuring no crash occurs with proxy models when using select_related and only\n+        try:\n+            qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+            qs.get()\n+        except Exception as e:\n+            self.fail(f\"QuerySet raised an exception: {e}\")\n+\n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..18b4773 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,6 +151,13 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_parameters_order(self):\n+        # Test to ensure additional parameters are placed before the database name.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n@@ -183,4 +190,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..dd39a52 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1901,6 +1901,28 @@ class AllValidTests(SimpleTestCase):\n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        from django.test import TestCase\n+        from django.forms import formset_factory\n+        from django.forms.formsets import BaseFormSet\n+        from django.forms.renderers import get_default_renderer\n+        from django.utils.lru_cache import lru_cache\n+        from django.forms import Form\n+        from django.forms.fields import ChoiceField\n+        from django.core.exceptions import RemovedInDjango50Warning\n+\n+        class Choice(Form):\n+            choice = ChoiceField(choices=[('choice1', 'Choice 1'), ('choice2', 'Choice 2')])\n+\n+        class ManagementFormWarningTests(TestCase):\n+            def test_no_management_form_warning(self):\n+                \"\"\"\n+                Management forms should not raise the default.html deprecation warning.\n+                \"\"\"\n+                with self.settings(FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"):\n+                    ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+                    formset = ChoiceFormSet()\n+                    with self.assertRaisesMessage(RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG):\n+                        str(formset.management_form)\n \n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n@@ -1909,4 +1931,4 @@ class DeprecationTests(SimpleTestCase):\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            str(formset)\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..383cd8c 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -173,6 +173,18 @@ class FormsFormsetTestCase(SimpleTestCase):\n             self.assertTrue(hasattr(form, \"custom_kwarg\"))\n             self.assertEqual(form.custom_kwarg, i)\n \n+    def test_empty_permitted_for_empty_form_true(self):\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": True})\n+        # empty_form should always have empty_permitted as True\n+        self.assertTrue(formset.empty_form.empty_permitted)\n+\n+    def test_empty_permitted_for_empty_form_false(self):\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": False})\n+        # empty_form should always have empty_permitted as True\n+        self.assertTrue(formset.empty_form.empty_permitted)\n+\n     def test_form_kwargs_empty_form(self):\n         FormSet = formset_factory(CustomKwargForm)\n         formset = FormSet(form_kwargs={\"custom_kwarg\": 1})\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..8b5d42a 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,16 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_empty(self):\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+        \n+    def test_null_like_inputs(self):\n+        self.assertEqual(nformat(0, \".\"), \"0\")\n+        self.assertEqual(nformat(False, \".\"), \"0\")\n+        self.assertEqual(nformat([], \".\"), \"[]\")\n+        self.assertEqual(nformat({}, \".\"), \"{}\")\n+        self.assertEqual(nformat((), \".\"), \"()\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..f77d63b 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -892,7 +893,44 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n-    def test_custom_form(self):\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    def test_link_to_password_reset_in_helptext_via_to_field_with_uuid(self):\n+        # New Test Case: Test with a user having a UUID field as the identifier.\n+        user = User.objects.create_user(username=\"uuid_testuser\", password=\"password\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # Emulate URL to UserChangeForm in admin via to_field (UUID).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.pk,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n                 model = ExtensionUser\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..ce4083f 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -505,6 +505,19 @@ class HTTPSitemapTests(SitemapTestsBase):\n             \"</urlset>\"\n         )\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    def test_callable_sitemod_no_items_no_error(self):\n+        # Test to ensure that a sitemap with no items and a callable lastmod doesn't raise an error\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertEqual(index_response.status_code, 200)\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/callable-lastmod-no-items/sitemap.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..577f3d6 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,6 +1,28 @@\n+\n+class FileBasedCacheRaceConditionTests(TestCase):\n+    def test_has_key_race_handling(self):\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mocked_open.assert_called_once()\n+\n+    def test_has_key_with_concurrent_deletion(self):\n+        # Simulate a race condition where the file is deleted\n+        # between os.path.exists() and open() call.\n+        cache.add(\"race_key\", \"value\")\n+        file_path = cache._key_to_file(\"race_key\")\n+\n+        def simulate_file_removal():\n+            if os.path.exists(file_path):\n+                os.remove(file_path)\n+\n+        with mock.patch(\"os.path.exists\", side_effect=simulate_file_removal):\n+            self.assertIs(cache.has_key(\"race_key\"), False)\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n+from unittest import mock, TestCase\n import io\n import os\n import pickle\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..44dc202 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,6 +1,9 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..4227919 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -66,6 +67,20 @@ class FunctionTests(SimpleTestCase):\n             \"&lt;a&gt;&lt;br&gt;&lt;img&gt;&lt;br&gt;&lt;/a&gt;\",\n         )\n \n+    @setup({\"join09\": '{% autoescape off %}{{ a|join:b }}{% endautoescape %}'})\n+    def test_join_autoescape_off_with_html(self):\n+        output = self.engine.render_to_string(\n+            \"join09\", {\"a\": [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"], \"b\": \"<br/>\"}\n+        )\n+        self.assertEqual(output, \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\")\n+\n+    @setup({\"join10\": '{% autoescape off %}{{ a|join:b }}{% endautoescape %}'})\n+    def test_join_autoescape_off_with_special_chars(self):\n+        output = self.engine.render_to_string(\n+            \"join10\", {\"a\": [\"uno\", \"dos\", \"tres\"], \"b\": \"&\"}\n+        )\n+        self.assertEqual(output, \"uno&dos&tres\")\n+\n     def test_autoescape_off(self):\n         self.assertEqual(\n             join([\"<a>\", \"<img>\", \"</a>\"], \"<br>\", autoescape=False),\n@@ -78,4 +93,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..fbb068f 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -654,7 +654,43 @@ class BulkCreateTests(TestCase):\n     def test_update_conflicts_two_fields_no_unique_fields(self):\n         self._test_update_conflicts_two_fields([])\n \n-    def _test_update_conflicts_unique_two_fields(self, unique_fields):\n+    @skipUnlessDBFeature(\"can_return_rows_from_bulk_insert\")\n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        # Initial insert to create conflicts.\n+        initial_objects = [\n+            TwoFields(f1=1, f2=2, name=\"initial1\"),\n+            TwoFields(f1=3, f2=4, name=\"initial2\"),\n+        ]\n+        TwoFields.objects.bulk_create(initial_objects)\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+\n+        # New objects that will cause conflicts.\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=2, name=\"conflict1\"),\n+            TwoFields(f1=3, f2=4, name=\"conflict2\"),\n+        ]\n+\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+        # Ensure the count hasn't changed, since we're updating.\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+\n+        # Check if the instances have their IDs set.\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n+        # Validate the updates were applied.\n+        self.assertCountEqual(\n+            TwoFields.objects.values(\"f1\", \"f2\", \"name\"),\n+            [\n+                {\"f1\": 1, \"f2\": 2, \"name\": \"conflict1\"},\n+                {\"f1\": 3, \"f2\": 4, \"name\": \"conflict2\"},\n+            ],\n+        )\n         Country.objects.bulk_create(self.data)\n         self.assertEqual(Country.objects.count(), 4)\n \n@@ -816,4 +852,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..04ea1a2 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -496,7 +496,26 @@ def test_keymaps():\n         assert isinstance(mpl.rcParams[k], list)\n \n \n-def test_rcparams_reset_after_fail():\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend\n+from matplotlib import _pylab_helpers\n+\n+def test_get_backend_does_not_clear_figures():\n+    # Create a figure inside an rc_context\n+    with plt.rc_context():\n+        fig2 = plt.figure()\n+\n+    # Capture the state of Gcf before calling get_backend\n+    before = f'{id(_pylab_helpers.Gcf)} {_pylab_helpers.Gcf.figs!r}'\n+\n+    # Call get_backend, which should not alter the state of Gcf\n+    get_backend()\n+\n+    # Capture the state of Gcf after calling get_backend\n+    after = f'{id(_pylab_helpers.Gcf)} {_pylab_helpers.Gcf.figs!r}'\n+\n+    # The state before and after should be the same, indicating no figures were removed\n+    assert before == after, f'Figures were cleared: \\nBefore: {before}\\nAfter: {after}'\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n     # global rc parameters were left in a modified state.\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..8e62a4c 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,7 +21,20 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_axes_set_visible(fig_test, fig_ref):\n+    # Test that setting a 3D axes to invisible works as expected\n+    ax1 = fig_test.add_subplot(121, projection='3d')\n+    ax1.scatter(1, 1, 1)\n+    ax1.set_visible(False)\n+\n+    ax2 = fig_ref.add_subplot(121, projection='3d')\n+    ax2.scatter(1, 1, 1)\n+    ax2.set_visible(True)\n+\n+    ax3 = fig_ref.add_subplot(122, projection='3d')\n+    ax3.scatter(1, 1, 1)\n+    ax3.set_visible(False)\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex a51a857..61e4afc 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -1773,6 +1773,52 @@ def test_margins_errors(err, args, kwargs, match):\n \n \n @check_figures_equal(extensions=[\"png\"])\n+def test_line3d_attribute_error():\n+    # This test simulates the condition where switching between array and int inputs could cause issues\n+    x_s_0 = np.array([0, 1])\n+    x_e_0 = np.array([1, 2])\n+    y_s_0 = np.array([0, 1])\n+    y_e_0 = np.array([1, 2])\n+    z_s_0 = np.array([0, 1])\n+    z_e_0 = np.array([1, 2])\n+\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    ax.view_init(elev=90, azim=0)\n+    ax.set_zlim3d(-10, 10)\n+    clr_list = 'r-'\n+\n+    # First plot with array inputs\n+    for n in range(np.size(z_s_0, axis=0)):\n+        ax.plot([x_s_0[n], x_e_0[n]], [y_s_0[n], y_e_0[n]], [z_s_0[n], z_e_0[n]], clr_list)\n+\n+    plt.draw()  # Trigger rendering\n+\n+    # Now change to integer inputs\n+    x_s_0 = [0, 1]\n+    x_e_0 = [1, 2]\n+    y_s_0 = [0, 1]\n+    y_e_0 = [1, 2]\n+    z_s_0 = [0, 1]\n+    z_e_0 = [1, 2]\n+\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    ax.set_zlim3d(-10, 10)\n+\n+    for n in range(len(z_s_0)):\n+        ax.plot([x_s_0[n], x_e_0[n]], [y_s_0[n], y_e_0[n]], [z_s_0[n], z_e_0[n]], clr_list)\n+\n+    try:\n+        plt.draw()  # This should not raise an exception\n+    except AttributeError as e:\n+        assert False, f\"Encountered unexpected AttributeError: {e}\"\n+\n+    plt.close('all')  # Cleanup figures after test\n+\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n def test_text_3d(fig_test, fig_ref):\n     ax = fig_ref.add_subplot(projection=\"3d\")\n     txt = Text(0.5, 0.5, r'Foo bar $\\int$')\n",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..0d53d4f 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,6 +774,26 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+import matplotlib\n+\n+@pytest.mark.parametrize('draggable', [True, False])\n+def test_legend_draggable_on_creation(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n+\n+@pytest.mark.parametrize('draggable', [True, False])\n+def test_legend_draggable_interaction(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test')\n+    leg = ax.legend(draggable=draggable)\n+    draggable_instance = leg.set_draggable(not draggable)\n+    assert leg.get_draggable() is not draggable\n+    assert (draggable_instance is None) == draggable\n+\n def test_get_set_draggable():\n     legend = plt.legend()\n     assert not legend.get_draggable()\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..f2d1ecc 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -246,7 +246,35 @@ def test_fonttype(fonttype):\n \n def test_linedash():\n     \"\"\"Test that dashed lines do not break PS output\"\"\"\n-    fig, ax = plt.subplots()\n+import io\n+from matplotlib.figure import Figure\n+import matplotlib.pyplot as plt\n+\n+def test_empty_line():\n+    # Smoke-test for gh#23954\n+    figure = Figure()\n+    figure.text(0.5, 0.5, \"\\nfoo\\n\\n\")\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n+\n+def test_multiline_label_empty_line():\n+    # Test multi-line text with empty line for PostScript backend\n+    figure = Figure()\n+    ax = figure.add_subplot()\n+    ax.annotate(text=\"\\nLower label\", xy=(0.5, 0.5))\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n+\n+def test_title_empty_line():\n+    # Test title with an empty line\n+    figure = Figure()\n+    ax = figure.add_subplot()\n+    ax.set_title(\"\\nMain title\\n\")\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n \n     ax.plot([0, 1], linestyle=\"--\")\n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..f3d31cc 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,25 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+def test_constrained_layout_warning():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    import warnings\n+\n+    a = np.linspace(0, 2 * np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+        ax[0].plot(a, b)\n+        ax[1].plot(a, c)\n+        plt.subplots_adjust(wspace=0)\n+\n+        # Check that no warnings of the specific type were raised\n+        assert not any(issubclass(warning.category, UserWarning) and \n+                       \"layout engine that is incompatible with subplots_adjust\" in str(warning.message)\n+                       for warning in w)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 64ba766..caa0891 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -5731,8 +5731,39 @@ def test_set_get_ticklabels():\n     ax[1].set_xticklabels(ax[0].get_xticklabels())\n     ax[1].set_yticklabels(ax[0].get_yticklabels())\n \n+import pytest\n+import matplotlib.pyplot as plt\n \n-@check_figures_equal(extensions=[\"png\"])\n+def test_set_ticks_kwargs_raise_error_without_labels():\n+    \"\"\"\n+    When labels=None and any kwarg is passed, axis.set_ticks() raises a\n+    ValueError.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    with pytest.raises(ValueError):\n+        ax.xaxis.set_ticks(ticks, alpha=0.5)\n+\n+def test_set_ticks_valid_kwargs_with_labels():\n+    \"\"\"\n+    When labels are provided, kwargs should be valid Text properties, and no error should be raised.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    labels = ['a', 'b', 'c']\n+    # This should not raise an error since labels are provided\n+    ax.xaxis.set_ticks(ticks, labels=labels, color='red')\n+\n+def test_set_ticks_invalid_kwargs_with_labels():\n+    \"\"\"\n+    When labels are provided but kwargs are invalid, a TypeError should be raised.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    labels = ['a', 'b', 'c']\n+    # This should raise a TypeError due to the invalid Text property 'nonexistent_property'\n+    with pytest.raises(TypeError):\n+        ax.xaxis.set_ticks(ticks, labels=labels, nonexistent_property='should_fail')\n def test_set_ticks_with_labels(fig_test, fig_ref):\n     \"\"\"\n     Test that these two are identical::\n",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..82aafb0 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -16,8 +17,28 @@ import matplotlib.transforms as mtransforms\n import matplotlib.figure as mfigure\n from mpl_toolkits.axes_grid1 import parasite_axes\n \n+import pickletools\n+\n+def test_pickle_with_draggable_legend():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n \n-def test_simple():\n+    ax.plot(time, speed, label=\"speed\")\n+    leg = ax.legend()\n+    leg.set_draggable(True)  # Test pickling with draggable legend\n+\n+    # Test that the figure can be pickled without error\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Ensure that FigureCanvasAgg is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Attempt to unpickle to verify the integrity of the pickle\n+    loaded_fig = pickle.loads(pkl)\n+    loaded_fig.canvas.draw()\n     fig = plt.figure()\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..b982ec0 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,31 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n \n-@mpl.style.context(\"default\")\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+    loaded_fig = pickle.loads(pkl.getvalue())\n+    assert loaded_fig is not None\n+    loaded_fig.canvas.draw()  # Ensures the loaded figure can be drawn without errors.\n+    plt.close(fig)\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..61d3fe0 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -96,12 +96,40 @@ class TestContinuous:\n         s = Continuous()._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n+    def test_color_mapping_with_bools(self):\n+        import pandas as pd\n+        from numpy.testing import assert_array_equal\n+        from seaborn._core.scales import Continuous\n+        from seaborn._core.properties import Color\n+        from seaborn import color_palette\n+\n+        # Test color mapping with boolean values\n+        x = pd.Series([True, False, True])\n+        cmap = color_palette(\"ch:\", as_cmap=True)\n+        s = Continuous()._setup(x, Color())\n+        expected_colors = cmap([1, 0, 1])[:, :3]  # True maps to 1, False maps to 0\n+        assert_array_equal(s(x), expected_colors)\n+\n     def test_color_named_values(self, x):\n \n         cmap = color_palette(\"viridis\", as_cmap=True)\n         s = Continuous(\"viridis\")._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n+    def test_color_mapping_with_bools(self):\n+        import pandas as pd\n+        from numpy.testing import assert_array_equal\n+        from seaborn._core.scales import Continuous\n+        from seaborn._core.properties import Color\n+        from seaborn import color_palette\n+\n+        # Test color mapping with boolean values\n+        x = pd.Series([True, False, True])\n+        cmap = color_palette(\"ch:\", as_cmap=True)\n+        s = Continuous()._setup(x, Color())\n+        expected_colors = cmap([1, 0, 1])[:, :3]  # True maps to 1, False maps to 0\n+        assert_array_equal(s(x), expected_colors)\n+\n     def test_color_tuple_values(self, x):\n \n         cmap = color_palette(\"blend:b,g\", as_cmap=True)\n",
  "mwaskom__seaborn-3407": "",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..626048c 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,6 +1,9 @@\n+\n import json\n+import errno\n import os\n-import textwrap\n+import tomllib\n+import pytest\n \n import pytest\n \n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..bd68da7 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1636,7 +1636,33 @@ def test_prepared_request_complete_copy():\n     assert_copy(p, p.copy())\n \n \n-def test_prepare_unicode_url():\n+def test_urllib3_decode_error_wrapped():\n+    s = requests.Session()\n+    adapter = HTTPAdapter()\n+    s.mount('http://', adapter)\n+\n+    # Mock the connection to raise DecodeError from urllib3\n+    def mock_send(*args, **kwargs):\n+        raise Urllib3DecodeError(\"Mock DecodeError\")\n+\n+    adapter.send = mock_send\n+\n+    with pytest.raises(DecodeError):\n+        s.get('http://mock.url')\n+\n+def test_urllib3_timeout_error_wrapped():\n+    s = requests.Session()\n+    adapter = HTTPAdapter()\n+    s.mount('http://', adapter)\n+\n+    # Mock the connection to raise TimeoutError from urllib3\n+    def mock_send(*args, **kwargs):\n+        raise Urllib3TimeoutError(\"Mock TimeoutError\")\n+\n+    adapter.send = mock_send\n+\n+    with pytest.raises(Timeout):\n+        s.get('http://mock.url')\n     p = PreparedRequest()\n     p.prepare(\n         method='GET',\n@@ -1663,4 +1689,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..d878342 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -979,8 +979,40 @@ class TestRequests:\n         r.encoding = 'ascii'\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n+    def test_iter_content_with_decode_unicode(self):\n+        \"\"\"\n+        Test iter_content with decode_unicode=True and decode_unicode=False\n+        to ensure proper behavior.\n+        \"\"\"\n+        # Test with decode_unicode=True\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'{\"key\": \"value\"}')\n+        r.encoding = 'utf-8'  # Assume the content is UTF-8 encoded JSON\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks)\n+\n+        # Test with decode_unicode=False\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'{\"key\": \"value\"}')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(decode_unicode=False)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+        # Test with no specified encoding and decode_unicode=True\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = None\n+        chunks = r.iter_content(decode_unicode=True)\n+        # Should yield bytes because encoding is None\n+        assert all(isinstance(chunk, bytes) for chunk in chunks)\n+\n+        # Test with specified encoding and empty content\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(decode_unicode=True)\n+        # Should handle empty content gracefully\n+        assert list(chunks) == []\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..a5fc837 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -106,7 +106,15 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n-    def test_dont_trigger_on_todoist(self) -> None:\n+    @set_config(notes=[\"???\"])\n+    def test_punctuation_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n         code = \"\"\"\n         # Todoist API: What is this task about?\n         # Todoist API: Look up a task's due date\n@@ -119,4 +127,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..16e3450 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -56,6 +56,13 @@ reports = \"yes\"\n     check_configuration_file_reader(runner)\n \n \n+import pytest\n+from pylint.lint import Run\n+from pylint.config.exceptions import _UnrecognizedOptionError\n+from _pytest.capture import CaptureFixture\n+\n+EMPTY_MODULE = \"empty_module\"  # Placeholder, replace with actual module if needed\n+\n def test_unknown_message_id(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown id.\"\"\"\n     Run([str(EMPTY_MODULE), \"--disable=12345\"], exit=False)\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..9a67e6e 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,26 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_path_recursive_in_src(self) -> None:\n+        \"\"\"Test that ignore-paths is respected with --recursive=y option.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"src\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^gen/.*$\",\n+                    ],\n+                    [\".\", \"--recursive=y\"],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..fbb396d 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -935,10 +935,50 @@ print(submodule1)\n     assert not linter.stats.by_msg\n \n \n+def test_module_with_same_name_as_package(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for module with the same name as the package.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    assert not linter.stats.by_msg\n+\n+\n+def test_import_module_with_same_name_as_package(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test importing from a module of the same name as package.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+        linter.check([\"r\", \"a\"])\n+    assert not linter.stats.by_msg\n+\n+\n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n     linter = initialized_linter\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+\n+def test_module_with_same_name_as_package(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for module with the same name as the package.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    assert not linter.stats.by_msg\n+\n+\n+def test_import_module_with_same_name_as_package(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test importing from a module of the same name as package.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+        linter.check([\"r\", \"a\"])\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..8d4579d 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -113,6 +114,22 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[2] == \"my_mod:2::()\"\n \n \n+def test_custom_braces_in_msg_template(linter: PyLinter) -> None:\n+    \"\"\"Test that custom braces in message template are correctly processed.\"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"my_mod\")\n+\n+    # Add messages to trigger output\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\"E0001\", line=2, args=(3, 4))\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"error\" }'\n+\n def test_deprecation_set_output(recwarn):\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..7fb3c97 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -295,6 +295,7 @@ class TestImportPath:\n         assert str(simple_module.parent) not in sys.path\n         assert module.__name__ in sys.modules\n         assert module.__name__ == \"_src.tests.mymod\"\n+        assert \"_src.tests.mymod\" in sys.modules\n         assert \"_src\" in sys.modules\n         assert \"_src.tests\" in sys.modules\n \n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..058f67e 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import py.io\n@@ -5,6 +6,35 @@ import py.io\n from _pytest.logging import ColoredLevelFormatter\n \n \n+def test_default_log_format_includes_module_name():\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+\n+    record = logging.LogRecord(\n+        name=\"dummy_module\",\n+        level=logging.DEBUG,\n+        pathname=\"dummy_path/dummy_file.py\",\n+        lineno=42,\n+        msg=\"Debugging message\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    class ColorConfig(object):\n+        class option(object):\n+            pass\n+\n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = True\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    expected_output = \"DEBUG    dummy_module:dummy_file.py:42 Debugging message\"\n+    assert output == expected_output\n+\n+    tw.hasmarkup = False\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == expected_output\n+\n def test_coloredlogformatter():\n     logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n \n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..bcd54a7 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -560,6 +560,28 @@ class TestAssert_reprcompare:\n         assert expl[1] == \"- \u00a3\u20ac\"\n         assert expl[2] == \"+ \u00a3\"\n \n+    def test_bytes_diff_confusing_assertion_message(self):\n+        \"\"\"Test the confusing assertion message with byte strings mentioned in the issue.\"\"\"\n+        diff = callequal(b\"\", b\"42\", verbose=True)\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+            \"?   ++\",\n+        ]\n+\n+        diff = callequal(b\"\", b\"1\", verbose=True)\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+            \"?   +\",\n+        ]\n+\n     def test_nonascii_text(self):\n         \"\"\"\n         :issue: 877\n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..16d040f 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,9 +1,12 @@\n+\n import os\n from xml.dom import minidom\n \n import py\n \n import pytest\n+import platform\n+from datetime import datetime\n from _pytest.junitxml import LogXML\n from _pytest.reports import BaseReport\n \n@@ -157,7 +160,30 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n-    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n+    \n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n         # mock LogXML.node_reporter so it always sets a known duration to each test report object\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..0fac22e 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -144,6 +144,44 @@ def test_repr_on_newstyle():\n     assert saferepr(Function())\n \n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ (#7145)\n+    \"\"\"\n+\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+\n+def test_broken_repr_without_getattribute():\n+    \"\"\"Test saferepr() with classes having a broken __repr__ but not __getattribute__.\"\"\"\n+\n+    class SomeClass:\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+def test_no_exception_in_repr():\n+    \"\"\"Test saferepr() with classes having working __repr__ and __getattribute__.\"\"\"\n+\n+    class SomeClass:\n+        def __repr__(self):\n+            return \"SomeClass representation\"\n+\n+    assert saferepr(SomeClass()) == \"SomeClass representation\"\n+\n+\n def test_unicode():\n     val = \"\u00a3\u20ac\"\n     reprval = \"'\u00a3\u20ac'\"\n@@ -153,4 +191,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "",
  "pytest-dev__pytest-7373": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..684bcff 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -153,6 +153,28 @@ class TestEvaluation:\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n \n+import pytest\n+\n+class TestSkipWithRunXFail:\n+    @pytest.mark.parametrize(\n+        \"test_input, expected\",\n+        [\n+            ([\"-rs\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+            ([\"-rs\", \"--runxfail\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+        ],\n+    )\n+    def test_skip_location_with_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n class TestXFail:\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..0ee7933 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -154,6 +155,30 @@ class TestEvaluation:\n \n \n class TestXFail:\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-8365": "",
  "scikit-learn__scikit-learn-10297": "",
  "scikit-learn__scikit-learn-11281": "",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..8756542 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,7 +260,35 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n-def test_one_hot_encoder_no_categorical_features():\n+import numpy as np\n+import pytest\n+from sklearn.preprocessing import OneHotEncoder\n+from numpy.testing import assert_array_equal\n+\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_handle_unknown_with_different_string_lengths():\n+    X_train = np.array(['short', 'medium', 'verylongstring']).reshape((-1, 1))\n+    X_test = np.array(['shrt', 'med', 'extremelylongstring']).reshape((-1, 1))\n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(X_train)\n+    transformed = ohe.transform(X_test).toarray()\n+    expected = np.array([[0., 0., 0.], [0., 0., 0.], [0., 0., 0.]])\n+    assert_array_equal(transformed, expected)\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n     cat = [False, False, False]\n",
  "scikit-learn__scikit-learn-13142": "",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..e661c5d 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,10 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n-\n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n-                                   assert_raises)\n+                                   assert_raises, assert_allclose)\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 4594f40..326291a 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -219,6 +219,10 @@ class Pipeline(_BaseComposition):\n             return self.named_steps[ind]\n         return est\n \n+    def __len__(self):\n+        \"\"\"Return the number of steps in the pipeline.\"\"\"\n+        return len(self.steps)\n+\n     @property\n     def _estimator_type(self):\n         return self.steps[-1][1]._estimator_type\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py\nindex 17608bc..1983d07 100644\n--- a/sklearn/ensemble/iforest.py\n+++ b/sklearn/ensemble/iforest.py\n@@ -173,7 +173,9 @@ class IsolationForest(BaseBagging, OutlierMixin):\n                  n_jobs=None,\n                  behaviour='old',\n                  random_state=None,\n-                 verbose=0):\n+                 verbose=0,\n+                 warm_start=False):\n+        self.warm_start = warm_start\n         super().__init__(\n             base_estimator=ExtraTreeRegressor(\n                 max_features=1,\n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..1b17ec7 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -197,4 +197,30 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n+    \n+\n+def test_discrete_features_array_and_mask():\n+    X = np.array([[0, 0, 0],\n+                  [1, 1, 0],\n+                  [2, 0, 1],\n+                  [2, 0, 1],\n+                  [2, 0, 1]], dtype=float)\n+    y = np.array([0, 1, 2, 2, 1], dtype=float)\n+    \n+    # Test when discrete_features is an array of indices\n+    mi_indices = mutual_info_classif(X, y, discrete_features=[0, 2], random_state=0)\n+    \n+    # Test when discrete_features is a boolean mask\n+    mi_mask = mutual_info_classif(X, y, discrete_features=[True, False, True], random_state=0)\n+    \n+    # Assert that results are equal\n+    assert_array_equal(mi_indices, mi_mask)\n+    \n+    # Test an invalid boolean mask length\n+    assert_raises_regex(ValueError, \"boolean mask length must match number of features\",\n+                        mutual_info_classif, X, y, discrete_features=[True, False, True, False])\n+    \n+    # Test an out-of-range index\n+    assert_raises_regex(IndexError, \"index .* is out of bounds for axis 1 with size 3\",\n+                        mutual_info_classif, X, y, discrete_features=[0, 3])\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..ec359dd 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -9,8 +10,8 @@ from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n \n-\n-# Ignore flake8 (lots of line too long issues)\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n # flake8: noqa\n \n # Constructors excerpted to test pprinting\n@@ -214,6 +215,15 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_array_parameter_in_repr():\n+    # Test to ensure np.array parameters are handled correctly in repr\n+    set_config(print_changed_only=True)\n+    # Check if the LogisticRegressionCV with an array parameter doesn't raise an error\n+    model = LogisticRegressionCV(Cs=np.array([0.1, 1]))\n+    repr_output = repr(model)\n+    assert \"Cs=array([0.1, 1. ])\" in repr_output or \"Cs=array([0.1, 1])\" in repr_output  # Depending on numpy version\n+    set_config(print_changed_only=False)\n+\n \n def test_pipeline():\n     # Render a pipeline object\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..b4af950 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,10 +1,12 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n import numpy as np\n \n from sklearn.utils.testing import assert_almost_equal, assert_array_equal\n-from sklearn.utils.testing import assert_array_almost_equal\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raise_message\n from sklearn.exceptions import NotFittedError\n@@ -506,4 +508,26 @@ def test_transform():\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n+\n+@pytest.mark.filterwarnings('ignore: Default solver will be changed')  # 0.22\n+@pytest.mark.filterwarnings('ignore: Default multi_class will')  # 0.22\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(datasets.load_iris(return_X_y=True), VotingClassifier(\n+        [('lr', LogisticRegression()),\n+         ('rf', RandomForestClassifier(n_estimators=5))])),\n+     (datasets.load_boston(return_X_y=True), VotingRegressor(\n+         [('lr', LinearRegression()),\n+          ('rf', RandomForestRegressor(n_estimators=5))]))]\n+)\n+def test_none_estimator_with_weights(X_y, voter):\n+    X, y = X_y\n+    # check that an estimator can be set to None and passing some weight\n+    # regression test for\n+    # https://github.com/scikit-learn/scikit-learn/issues/13777\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..15097bb 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,8 +160,27 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n+def test_grid_search_with_numpy_types():\n+    import numpy as np\n+    from sklearn.model_selection import GridSearchCV\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.neighbors import KNeighborsClassifier\n \n-def test_transformation_dimensions():\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+\n+    pipe = Pipeline([('nca', nca), ('knn', knn)])\n+\n+    params = {\n+        'nca__tol': [0.1, 0.5, np.float32(1)],\n+        'nca__n_components': np.arange(1, 10, dtype=np.int64)\n+    }\n+\n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+    gs.fit(X, y)\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n \n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..01f2102 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,27 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test to ensure no ZeroDivisionError with empty support_vectors_\n+    import numpy as np\n+    from scipy import sparse\n+    from sklearn import svm\n+\n+    X_train = sparse.csr_matrix([\n+        [0, 1, 0, 0],\n+        [0, 0, 0, 1],\n+        [0, 0, 1, 0],\n+        [0, 0, 0, 1]\n+    ])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear', C=316.227766017, gamma=1.0, max_iter=15000, tol=0.001)\n+    \n+    # Fit the model and check attributes\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size, \"Expected empty support_vectors_\"\n+    assert not model.dual_coef_.data.size, \"Expected empty dual_coef_\"\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..7f8629c 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -973,6 +973,19 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n \n \n @ignore_warnings\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    repeated_cv_repr = ('{}(n_repeats=6, n_splits=2, random_state=None)'\n+                        .format(repeated_cv.__class__.__name__))\n+    assert repeated_cv_repr == repr(repeated_cv)\n+\n+import pytest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n",
  "scikit-learn__scikit-learn-15512": "diff --git a/sklearn/cluster/tests/test_affinity_propagation.py b/sklearn/cluster/tests/test_affinity_propagation.py\nindex 5de7c5e..a8a4f51 100644\n--- a/sklearn/cluster/tests/test_affinity_propagation.py\n+++ b/sklearn/cluster/tests/test_affinity_propagation.py\n@@ -152,6 +152,26 @@ def test_affinity_propagation_predict_non_convergence():\n     assert_array_equal(np.array([-1, -1, -1]), y)\n \n \n+def test_affinity_propagation_non_convergence_empty_clusters():\n+    # Test that non-converged affinity propagation returns empty cluster centers\n+    X = np.array([[1, 0, 0, 0, 0, 0],\n+                  [0, 1, 1, 1, 0, 0],\n+                  [0, 0, 1, 0, 0, 1]])\n+    af = AffinityPropagation(affinity='euclidean', max_iter=2).fit(X)\n+    # Check if the cluster_center_indices_ is an empty array\n+    assert_equal(len(af.cluster_centers_indices_), 0)\n+    # Check if all labels are -1\n+    assert_array_equal(np.array([-1, -1, -1]), af.labels_)\n+\n+\n+def test_affinity_propagation_convergence_status():\n+    # Test the ability to infer convergence from n_iter_ attribute\n+    X = np.array([[1, 0], [0, 1], [1, 1]])\n+    af = AffinityPropagation(affinity='euclidean', max_iter=300, convergence_iter=15).fit(X)\n+    # Since max_iter is large, check that it converged\n+    assert af.n_iter_ < af.max_iter\n+\n+\n def test_equal_similarities_and_preferences():\n     # Unequal distances\n     X = np.array([[0, 0], [1, 1], [-2, -2]])\n",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..0526019 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,4 +1,8 @@\n-import warnings\n+\n+import pandas as pd\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n+from sklearn import set_config\n import numpy as np\n import pickle\n import copy\n@@ -668,7 +672,18 @@ def test_isotonic_regression_sample_weight_not_overwritten():\n \n \n @pytest.mark.parametrize(\"shape\", [\"1d\", \"2d\"])\n-def test_get_feature_names_out(shape):\n+def test_calibrated_classifier_cv_with_isotonic_and_pandas():\n+    \"\"\"Test CalibratedClassifierCV with isotonic regression and transform_output='pandas'.\"\"\"\n+    X = np.arange(90).reshape(30, -1)\n+    y = np.arange(30) % 2\n+\n+    set_config(transform_output=\"pandas\")\n+    model = CalibratedClassifierCV(SGDClassifier(), method='isotonic')\n+    model.fit(X, y)\n+    predictions = model.predict(X)\n+\n+    assert isinstance(predictions, np.ndarray)\n+    assert predictions.shape == (30,)\n     \"\"\"Check `get_feature_names_out` for `IsotonicRegression`.\"\"\"\n     X = np.arange(10)\n     if shape == \"2d\":\n",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/roots/test-ext-autodoc/target/inheritance.py b/tests/roots/test-ext-autodoc/target/inheritance.py\nindex ac389bf..63910cc 100644\n--- a/tests/roots/test-ext-autodoc/target/inheritance.py\n+++ b/tests/roots/test-ext-autodoc/target/inheritance.py\n@@ -10,8 +10,13 @@ class Base(object):\n     def inheritedstaticmeth(cls):\n         \"\"\"Inherited static method.\"\"\"\n \n+class AdditionalBase:\n+    def additional_base_method(self):\n+        \"\"\"Method from AdditionalBase\"\"\"\n \n-class Derived(Base):\n+class MixedDerived(Base, AdditionalBase):\n+    def mixed_method(self):\n+        \"\"\"Method specific to MixedDerived\"\"\"\n     def inheritedmeth(self):\n         # no docstring here\n-        pass\n+        pass\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..c00e198 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -81,7 +81,27 @@ def test_get_full_qualified_name():\n     node = nodes.reference()\n     assert domain.get_full_qualified_name(node) is None\n \n-    # simple reference to options\n+    # Test for option with optional value (related to the issue)\n+    def test_option_with_optional_value(app):\n+        text = \".. option:: -j[=N]\\n  Option with optional value\"\n+        doctree = restructuredtext.parse(app, text)\n+        assert_node(doctree, (\n+            [desc, ([desc_signature, ([desc_name, '-j'], [desc_addname, '[=N]'])],\n+                    [desc_content, ()])]))\n+\n+        objects = list(app.env.get_domain(\"std\").get_objects())\n+        assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+\n+    # Test for option starting with bracket (related to the issue)\n+    def test_option_starting_with_bracket(app):\n+        text = \".. option:: [enable=]PATTERN\\n  Option with bracket\"\n+        doctree = restructuredtext.parse(app, text)\n+        assert_node(doctree, (\n+            [desc, ([desc_signature, ([desc_name, '[enable'], [desc_addname, '=]PATTERN'])],\n+                    [desc_content, ()])]))\n+\n+        objects = list(app.env.get_domain(\"std\").get_objects())\n+        assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n     node = nodes.reference(reftype='option', reftarget='-l')\n     assert domain.get_full_qualified_name(node) is None\n \n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..98bb479 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -115,7 +117,8 @@ def test_restify_type_ForwardRef():\n     assert restify(ForwardRef(\"myint\")) == \":class:`myint`\"\n \n \n-def test_restify_broken_type_hints():\n+def test_restify_struct():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(BrokenType) == ':class:`tests.test_util_typing.BrokenType`'\n \n \n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..184663f 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1457,8 +1457,37 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n+    def test_other_parameters_section(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x : int\n+\n+Other Parameters\n+----------------\n+y : float\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n \n-    def test_multiple_parameters(self):\n+:Other Parameters: **y** (*float*)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int\n+\n+:param y:\n+:type y: float\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "",
  "sympy__sympy-12481": "",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..12ec685 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,8 +1,24 @@\n-from sympy import Abs, S, Symbol, I, Rational, PurePoly\n+\n+from sympy import Abs, S, Symbol, I, Rational, PurePoly, Matrix\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n \n-def test_sparse_matrix():\n+def test_zero_row_zero_col_stacking():\n+    # Testing hstack for zero-row matrices\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(0, 1)\n+    M3 = Matrix.zeros(0, 2)\n+    M4 = Matrix.zeros(0, 3)\n+    result_hstack = Matrix.hstack(M1, M2, M3, M4)\n+    assert result_hstack.shape == (0, 6), f\"Expected shape (0, 6), got {result_hstack.shape}\"\n+\n+    # Testing vstack for zero-column matrices\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(1, 0)\n+    M3 = Matrix.zeros(2, 0)\n+    M4 = Matrix.zeros(3, 0)\n+    result_vstack = Matrix.vstack(M1, M2, M3, M4)\n+    assert result_vstack.shape == (6, 0), f\"Expected shape (6, 0), got {result_vstack.shape}\"\n     def sparse_eye(n):\n         return SparseMatrix.eye(n)\n \n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..362d5ad 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -82,7 +82,29 @@ def check(a, exclude=[], check_attr=True):\n #================== core =========================\n \n \n-def test_core_basic():\n+import sympy\n+from sympy import Float, symbols\n+import pickle\n+import sys\n+import subprocess\n+\n+def test_pickle_float_expression_py2_to_py3():\n+    # Prepare the command for Python 2 pickling\n+    py2_command = (\n+        'import pickle; import sympy; '\n+        'x = sympy.symbols(\"x\"); '\n+        'print(pickle.dumps(x + 1.0, 2))'\n+    )\n+    \n+    # Run the Python 2 command and get the pickled data\n+    py2_pickle = subprocess.check_output(['python2', '-c', py2_command])\n+    \n+    # Load the pickled data in Python 3\n+    expression = pickle.loads(py2_pickle)\n+    \n+    # Verify the expression loaded correctly\n+    x = symbols(\"x\")\n+    assert expression == x + 1.0\n     for c in (Atom, Atom(),\n               Basic, Basic(),\n               # XXX: dynamically created types are not picklable\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..1813872 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -273,7 +273,28 @@ def test_coth():\n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n \n-def test_coth_series():\n+def test_coth_substitution_error():\n+    from sympy import Symbol, coth, log, tan, oo, I, pi\n+\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # Test for values where the error was reported\n+    assert e.subs(x, 2) != oo  # The specific result here would depend on the fix\n+    assert e.subs(x, 3) != oo\n+    assert e.subs(x, 5) != oo\n+    assert e.subs(x, 6) != oo\n+    assert e.subs(x, 8) != oo\n+    assert e.subs(x, 9) != oo\n+    assert e.subs(x, 11) != oo\n+    assert e.subs(x, 12) != oo\n+    assert e.subs(x, 13) != oo\n+    assert e.subs(x, 15) != oo\n+    assert e.subs(x, 18) != oo\n+\n+    # Add test cases for argument around pi/2 to verify behavior\n+    assert coth(log(tan(pi/2))) == oo\n+    assert coth(log(tan(-pi/2))) == -oo\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..933b289 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,31 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    # Import necessary functions for test\n+    from sympy import Matrix, eye, ones\n+\n+    # Create a 6x6 identity matrix\n+    M = eye(6)\n+\n+    # Create a matrix with all twos, 6 rows and 2 columns\n+    V = 2 * ones(6, 2)\n+\n+    # Insert V into M at column index 3\n+    result = M.col_insert(3, V)\n+\n+    # Expected matrix after insertion\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+\n+    # Assert that the result matches the expected matrix\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..888c6c4 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -616,7 +616,15 @@ def test_latex_Range():\n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n \n+from sympy import SeqFormula, SeqPer, SeqAdd, SeqMul, latex, symbols, oo\n+\n+k, m, n = symbols('k m n', integer=True)\n+\n def test_latex_sequences():\n+    # Testing the specific issue case to ensure that brackets are not backslash-escaped\n+    s_issue = SeqFormula(n**2, (n, 0, oo))\n+    expected_latex_issue = r'\\left[0, 1, 4, 9, \\ldots\\right]'\n+    assert latex(s_issue) == expected_latex_issue\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..0b254e8 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -147,7 +148,12 @@ def test_Greedy_preprocess():\n     raises(OptionError, lambda: Greedy.preprocess(x))\n \n \n-def test_Greedy_postprocess():\n+def test_Poly_creation():\n+    from sympy.polys.polytools import Poly\n+    from sympy.abc import x, y, z\n+\n+    # Test that Poly can handle the domain 'RR[y,z]' without an error\n+    assert Poly(1.2*x*y*z, x, domain='RR[y,z]') == Poly(1.2*y*z*x, x, domain='RR[y,z]')\n     opt = {'greedy': True}\n     Greedy.postprocess(opt)\n \n",
  "sympy__sympy-14774": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 48a5cf2..2f30816 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Add, Abs, Chi, Ci, CosineTransform, Dict, Ei, Eq, FallingFactorial,\n     FiniteSet, Float, FourierTransform, Function, IndexedBase, Integral,\n@@ -312,6 +313,13 @@ def test_latex_functions():\n     assert latex(subfactorial(k)) == r\"!k\"\n     assert latex(subfactorial(-k)) == r\"!\\left(- k\\right)\"\n \n+    # Test for acsc with full inverse trig style\n+    assert latex(acsc(x), inv_trig_style=\"full\") == \\\n+        r\"\\operatorname{arccsc}{\\left (x \\right )}\"\n+    # Test for asec with full inverse trig style\n+    assert latex(asec(x), inv_trig_style=\"full\") == \\\n+        r\"\\operatorname{arcsec}{\\left (x \\right )}\"\n+\n     assert latex(factorial2(k)) == r\"k!!\"\n     assert latex(factorial2(-k)) == r\"\\left(- k\\right)!!\"\n \n",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..60852c9 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,32 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import MatrixSymbol, symbols, pretty\n+\n+n = symbols('n')\n+\n+def test_issue_14814_pretty_printing():\n+    # Original test patch for issue #14814\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+    assert pretty(x + y) == \"x + y*\"\n+    a = symbols('a')\n+    assert pretty(-a*x + -2*y*y) == \"-a*x -2*y**y*\"\n+\n+    # Additional tests to cover more cases of MatAdd\n+    z = MatrixSymbol('z', n, n)\n+    # Test with an additional MatrixSymbol\n+    assert pretty(x + y + z) == \"x + y* + z\"\n+    # Test with negative terms\n+    assert pretty(-x + y + z) == \"-x + y* + z\"\n+    assert pretty(x - y + z) == \"x - y* + z\"\n+    # Test with a negative constant factor\n+    assert pretty(-2*x + y) == \"-2*x + y*\"\n+    # Test with both positive and negative constant factors\n+    assert pretty(-2*x + 3*y) == \"-2*x + 3*y*\"\n+    # Test with multiplication and MatAdd combined\n+    assert pretty(2*x + 3*y + 4*z) == \"2*x + 3*y* + 4*z\"\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..e33b08b 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -737,6 +737,24 @@ def test_python_keywords():\n     f = lambdify(python_if, expr)\n     assert f(4.0) == 2.0\n \n+def test_curly_matrix_symbol():\n+    # Test case for the issue where lambdify fails with MatrixSymbol containing curly braces\n+    curlyv = sympy.MatrixSymbol(\"{v}\", 2, 1)\n+    \n+    # Testing without dummify\n+    try:\n+        lam = lambdify(curlyv, curlyv)\n+        assert lam([[1], [2]]) == [[1], [2]]\n+    except SyntaxError:\n+        assert False, \"lambdify raised SyntaxError without dummify with MatrixSymbol containing curly braces.\"\n+    \n+    # Testing with dummify=True\n+    try:\n+        lam = lambdify(curlyv, curlyv, dummify=True)\n+        assert lam([[1], [2]]) == [[1], [2]]\n+    except SyntaxError:\n+        assert False, \"lambdify raised SyntaxError with dummify=True with MatrixSymbol containing curly braces.\"\n+\n \n def test_lambdify_docstring():\n     func = lambdify((w, x, y, z), w + x + y + z)\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..c7897cf 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,27 @@\n+\n+def test_Max_Min():\n+    # Test case covering the reported issue\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    \n+    # Test cases added to verify behavior with multiple arguments\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    assert mcode(Max(7, x, y)) == \"Max[7, x, y]\"\n+    \n+    # Test cases for Min function to ensure similar functionality\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(2, x)) == \"Min[2, x]\"\n+    assert mcode(Min(x, y, 2)) == \"Min[x, y, 2]\"\n+    assert mcode(Min(7, x, y)) == \"Min[7, x, y]\"\n+    \n+    # Original test case ensuring compatibility\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..1b945d7 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,8 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..030e708 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -21,7 +22,25 @@ def test_idiff():\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n \n \n-def test_intersection():\n+def test_new_idiff_cases():\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+    f = Function('f')\n+    g = Function('g')\n+\n+    # Verify idiff supports Eq\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x) == (x + 1)*exp(x - y)/(y + 1)\n+\n+    # Verify idiff supports functions like f(x)\n+    assert idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x) == (x + 1)*exp(x - f(x))/(f(x) + 1)\n+\n+    # Additional test cases for multiple dependent variables\n+    assert idiff(f(x) - y*exp(x), [f(x), y], x) == (y + Derivative(y, x))*exp(x)\n+    assert idiff(f(x) - y*exp(x), [y, f(x)], x) == -y + exp(-x)*Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+\n+    # Another case for multiple dependent variables\n+    assert idiff(Eq(f(x), g(x)), [f(x), g(x)], x) == Derivative(g(x), x)\n     assert intersection(Point(0, 0)) == []\n     raises(TypeError, lambda: intersection(Point(0, 0), 3))\n     assert intersection(\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..84eef07 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -580,6 +580,41 @@ def test_ccode_cse():\n         '   e[2] = x0*x1;\\n'\n         '}\\n'\n     )\n+    \n+def test_ccode_unused_array_arg():\n+    from sympy.utilities.codegen import codegen\n+    from sympy import MatrixSymbol\n+    from sympy.utilities.codegen import CCodeGen\n+    \n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n+\n+def test_autowrap_cython_unused_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    assert f(np.array([[1.0, 2.0]])) == 1.0\n     assert source == expected\n \n def test_empty_f_code():\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..1861d92 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,21 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Intersection, Piecewise, Eq, Symbol, S, FiniteSet\n \n-def test_issue_9623():\n+def test_issue_remove_duplicates_in_intersection():\n+    x = Symbol('x')\n+    \n+    # Test cases based on the issue statement\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+    \n+    # Expected new output based on issue statement\n+    expected = Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    result = Intersection({1}, {1}, {x})\n+    assert result == expected, f\"Expected {expected}, but got {result}\"\n+    \n+    # Another case with no duplicates\n+    assert Intersection({1}, {x}) == expected\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..a0cfad2 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,8 +1,11 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n )\n-from sympy import eye\n+from sympy import eye, Identity, symbols\n+from sympy.utilities.pytest import raises\n+import numpy as np\n from sympy.abc import x, i, j, a, b, c, d\n from sympy.codegen.cfunctions import log1p, expm1, hypot, log10, exp2, log2, Cbrt, Sqrt\n from sympy.codegen.array_utils import (CodegenArrayContraction,\n@@ -30,6 +33,18 @@ def test_sum():\n     if not np:\n         skip(\"NumPy not installed\")\n \n+    # Test for the corrected behavior of Identity matrices\n+    n = symbols('n', integer=True)\n+    A = MatrixSymbol('A', n, n)\n+    f = lambdify(A, A + Identity(n), modules='numpy')\n+    a = np.array([[1, 2], [3, 4]])\n+    expected_result = np.array([[2, 2], [3, 5]])\n+    np.testing.assert_array_equal(f(a), expected_result)\n+\n+    # Test for raising NotImplementedError for unsupported expressions\n+    N = MatrixSymbol(\"M\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\n+\n     s = Sum(x ** i, (i, a, b))\n     f = lambdify((a, b, x), s, 'numpy')\n \n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..a442138 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -91,6 +92,9 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+    assert 5 * p4 == Point(5, 5)\n+    assert sympy.sympify(2.0) * p4 == Point(2.0, 2.0)\n+    assert p4 * sympy.sympify(2.0) == Point(2.0, 2.0)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..e454994 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1893,6 +1893,39 @@ def test_normal():\n     e = Mul(S.Half, 1 + x, evaluate=False)\n     assert e.normal() == e\n \n+def test_non_string_equality():\n+    # Verify that Symbols do not improperly evaluate or compare to strings\n+    x = symbols('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Ensure that comparison does not attempt to convert repr to an expression\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+\n+    # Test case with objects whose repr could be misinterpreted\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'  # should not be evaluated\n+\n+    assert (x == C()) is False\n+    assert (x != C()) is True\n+\n+    class C2:\n+        def __repr__(self):\n+            return 'x'  # should not equate to symbol 'x'\n+\n+    assert (x == C2()) is False\n+    assert (x != C2()) is True\n \n def test_expr():\n     x = symbols('x')\n@@ -1902,4 +1935,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..6702c42 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,14 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+def test_issue_18186():\n+    from sympy.solvers.diophantine import diophantine\n+    from sympy.abc import x, y\n+\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..e135074 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -66,7 +67,8 @@ def test_sizeof():\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n-    assert all(atom == typename for atom in sz.atoms())\n+    assert sz.atoms() == {String('unsigned int'), String('sizeof')}\n+    assert all(atom.args == () for atom in sz.atoms())\n \n \n def test_struct():\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..4050a59 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,20 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_single_element_conversion():\n+    from sympy import Matrix, BlockDiagMatrix\n+    # Create a matrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    # Create a BlockDiagMatrix with one element\n+    D = BlockDiagMatrix(M)\n+    # Convert BlockDiagMatrix back to a regular Matrix\n+    B = Matrix(D)\n+    # Verify that the conversion works correctly\n+    assert B == Matrix([\n+        [1, 2],\n+        [3, 4]\n+    ])\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..2c12028 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, XFAIL\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n k, l, m, n = symbols('k l m n', integer=True)\n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..99ce61b 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -199,8 +199,20 @@ def test_im():\n \n     X = FunctionMatrix(3, 3, Lambda((n, m), n + m*I))\n     assert im(X) == Matrix([[0, 1, 2], [0, 1, 2], [0, 1, 2]])\n+from sympy import Symbol, sign, Abs, Piecewise, Eq, Function\n \n def test_sign():\n+    y = Symbol('y')\n+    f = Function('f')\n+    \n+    # Test the rewrite for non-zero cases\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y / Abs(y), True))\n+    assert sign(f(y)).rewrite(Abs) == Piecewise((0, Eq(f(y), 0)), (f(y) / Abs(f(y)), True))\n+    \n+    # Test the rewrite when the input is zero\n+    x = Symbol('x')\n+    assert sign(x).rewrite(Abs).subs(x, 0) == 0\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x / Abs(x), True))\n     assert sign(1.2) == 1\n     assert sign(-1.2) == -1\n     assert sign(3*I) == I\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..a42e633 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -514,6 +514,32 @@ def test_partitions():\n         assert i == RGS_enum(n)\n \n \n+def test_partitions_no_reuse():\n+    # Test to ensure that partitions() does not reuse dictionary objects.\n+\n+    # We will use the id() function to check if the dictionaries returned are distinct.\n+    partitions_list = list(partitions(6, k=2))\n+    assert len(partitions_list) == len(set(id(p) for p in partitions_list)), \"Dictionaries were reused in partitions(6, k=2)\"\n+\n+    partitions_list = list(partitions(6, k=3))\n+    assert len(partitions_list) == len(set(id(p) for p in partitions_list)), \"Dictionaries were reused in partitions(6, k=3)\"\n+\n+    partitions_list = list(partitions(8, k=4, m=3))\n+    assert len(partitions_list) == len(set(id(p) for p in partitions_list)), \"Dictionaries were reused in partitions(8, k=4, m=3)\"\n+\n+    partitions_list = list(partitions(S(3), m=2))\n+    assert len(partitions_list) == len(set(id(p) for p in partitions_list)), \"Dictionaries were reused in partitions(S(3), m=2)\"\n+\n+    partitions_list = list(partitions(4, k=3))\n+    assert len(partitions_list) == len(set(id(p) for p in partitions_list)), \"Dictionaries were reused in partitions(4, k=3)\"\n+\n+    partitions_list = list(partitions(4))\n+    assert len(partitions_list) == len(set(id(p) for p in partitions_list)), \"Dictionaries were reused in partitions(4)\"\n+\n+    # Check the partitions with size=True parameter\n+    partitions_list = [(M, p.copy()) for M, p in partitions(6, k=2, size=True)]\n+    assert len(partitions_list) == len(set(id(p) for M, p in partitions_list)), \"Dictionaries were reused in partitions(6, k=2, size=True)\"\n+\n def test_binary_partitions():\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..d3b9e26 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -267,7 +267,12 @@ def test_zero():\n     assert 0**(-2*x*y) == S.ComplexInfinity**(x*y)\n \n \n-def test_pow_as_base_exp():\n+from sympy import S, oo, zoo, Pow\n+\n+def test_issue_19572():\n+    # Test the specific issue where 0**-oo should be zoo\n+    assert 0**-oo == zoo\n+    assert Pow(0, -oo) == zoo\n     x = Symbol('x')\n     assert (S.Infinity**(2 - x)).as_base_exp() == (S.Infinity, 2 - x)\n     assert (S.Infinity**(x - 2)).as_base_exp() == (S.Infinity, x - 2)\n",
  "sympy__sympy-20442": "",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..c95715f 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,29 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+import sympy\n+from sympy import Symbol\n+from pytest import raises\n+\n+\n+def test_symbol_no_dict_in_1_6_2():\n+    # This test would have been for SymPy version 1.6.2 or earlier\n+    # where Symbol instances did not have a __dict__.\n+    with raises(AttributeError):\n+        Symbol('s').__dict__\n+\n+def test_symbol_dict_in_1_7():\n+    # This test checks if the Symbol instance has a __dict__ attribute\n+    # and verifies if it exists (this reflects the behavior in SymPy 1.7).\n+    symbol_instance = Symbol('s')\n+    assert hasattr(symbol_instance, '__dict__')\n+    assert symbol_instance.__dict__ == {}\n+\n+\n+def test_symbol_slots():\n+    # Ensure the __slots__ attribute is correctly set\n+    assert Symbol('s').__slots__ == ('name',)\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..19743c0 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, oo, Integral, sin)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -161,7 +162,20 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_arg():\n+    x = Symbol('x', complex=True)\n+    a = Symbol('a', real=True, positive=True)\n+    assert refine(arg(x), Q.positive(x)) == 0\n+    assert refine(arg(x), Q.negative(x)) == pi\n+    assert refine(arg(a), Q.positive(a)) == 0\n+    assert refine(arg(-a), Q.negative(-a)) == pi\n+\n+def test_integral_simplification():\n+    a, x = symbols('a x', real=True)\n+    J = Integral(sin(x) * exp(-a * x), (x, 0, oo))\n+    result = Piecewise((1 / (a**2 + 1), 2 * Abs(arg(a)) < pi), (Integral(exp(-a*x)*sin(x), (x, 0, oo)), True))\n+    simplified_result = Piecewise((1 / (a**2 + 1), True), (Integral(exp(-a*x)*sin(x), (x, 0, oo)), False))\n+    assert refine(J.doit(), Q.positive(a)) == simplified_result\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..30e380c 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -8,6 +9,27 @@ from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n+def test_issue_polynomial_error_with_subs():\n+    from sympy import exp, sinh, Piecewise, clear_cache, symbols\n+\n+    # Clear cache and setup symbols\n+    clear_cache()\n+    x, y, z = symbols('x y z')\n+    \n+    # Test without real assumption\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    # This should work without any error\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})\n+\n+    clear_cache()\n+    x, y, z = symbols('x y z', real=True)\n+    \n+    # Test with real assumption\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    # This should not raise an error\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})\n+\n+\n def test_subs():\n     n3 = Rational(3)\n     e = x\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..32eba6d 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,5 +1,7 @@\n+\n from sympy.core.add import Add\n-from sympy.core.kind import NumberKind, UndefinedKind\n+from sympy.core.function import Derivative\n+from sympy.core.kind import NumberKind, UndefinedKind, MatrixKind\n from sympy.core.mul import Mul\n from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..61035c3 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -107,6 +107,22 @@ def test_monomials():\n     raises(ValueError, lambda: set(itermonomials([x, y, z], [0, 0, 3], [0, 1, 2])))\n \n     assert set(itermonomials([x], [0])) == {S.One}\n+    \n+    # Test for issue with itermonomials with total degree constraints\n+    from sympy.abc import x, y, z\n+    \n+    # Test case from the issue\n+    monomials = set(itermonomials([x, y, z], 3, 3))\n+    expected_result = {x**3, y**3, z**3, x**2*y, x**2*z, x*y**2, x*z**2, y**2*x, y**2*z, y*z**2, z**2*x, z**2*y, x*y*z}\n+    assert monomials == expected_result, f\"Expected {expected_result}, but got {monomials}\"\n+\n+    # Additional test cases for other degrees\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, y**2, x*y, x**3, y**3, x**2*y, x*y**2, y**2*x, y**2*x, y*x**2}\n+    assert set(itermonomials([x, y, z], 2, 2)) == {x**2, y**2, z**2, x*y, x*z, y*z, x*y*z}\n+    assert set(itermonomials([x, y, z], 3, 2)) == {\n+                x**3, y**3, z**3, x**2*y, x**2*z, x*y**2, x*z**2,\n+                y**2*x, y**2*z, y*z**2, z**2*x, z**2*y, x*y*z\n+            }\n     assert set(itermonomials([x], [1])) == {S.One, x}\n     assert set(itermonomials([x], [2])) == {S.One, x, x**2}\n     assert set(itermonomials([x], [3])) == {S.One, x, x**2, x**3}\n",
  "sympy__sympy-22005": "",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..2488c3c 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n@@ -440,6 +442,11 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        assert Point2D(Integer(1), Integer(2)) == Point2D(1, 2)\n+\n def test_dot():\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..5b319df 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -338,6 +338,28 @@ def test_cse_Indexed():\n     assert len(replacements) > 0\n \n \n+from sympy import cse, MatrixSymbol, symbols\n+\n+def test_cse_matrix_elementwise_operations():\n+    A = MatrixSymbol('A', 4, 4)\n+    B = MatrixSymbol('B', 4, 4)\n+    # Test element-wise operations to ensure cse handles them correctly\n+    expr1 = A[0, 0] * B[0, 0] + A[0, 0] * B[0, 1]\n+    expr2 = A[0, 0] * B[0, 0] * A[0, 1]\n+    replacements, reduced_exprs = cse([expr1, expr2])\n+    assert replacements == [(symbols('x0'), A[0, 0] * B[0, 0])]\n+    assert reduced_exprs == [symbols('x0') + A[0, 0] * B[0, 1], symbols('x0') * A[0, 1]]\n+\n+def test_cse_multiple_matrix_expressions():\n+    A = MatrixSymbol('A', 3, 3)\n+    B = MatrixSymbol('B', 3, 3)\n+    C = MatrixSymbol('C', 3, 3)\n+    expr1 = A * B + B * C\n+    expr2 = A * B * C\n+    replacements, reduced_exprs = cse([expr1, expr2])\n+    assert len(replacements) > 0\n+    assert all(isinstance(rep[0], symbols) for rep in replacements)\n+\n def test_cse_MatrixSymbol():\n     # MatrixSymbols have non-Basic args, so make sure that works\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..b752641 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -37,6 +38,12 @@ def test_array_negative_indices():\n \n         assert test_array[-1, -1] == 10\n \n+def test_empty_array_creation():\n+    for ArrayType in array_types:\n+        A = ArrayType([])\n+        assert isinstance(A, ArrayType)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n \n def test_issue_18361():\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..74940bc 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,16 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify, symbols\n+\n+def test_python_code_printer_single_element_tuple():\n+    # Test case for single element tuple in Python code printer via lambdify\n+    f = lambdify([], (1,))\n+    source_code = inspect.getsource(f)\n+    expected_output = 'def _lambdifygenerated():\\n    return (1,)\\n'\n+    assert source_code == expected_output\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..ae6cd60 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,6 +541,30 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..82551b3 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,8 +45,26 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n-\n-def test_tensor_product_commutator():\n+def test_tensor_product_expand_with_scalars():\n+    # Test with scalar factors\n+    assert TP(2*A - B, A + B).expand(tensorproduct=True) == \\\n+        2*TP(A, A) + 2*TP(A, B) - TP(B, A) - TP(B, B)\n+    \n+    # Test with more complex scalar factor expressions\n+    assert TP(3*A + 2*B, 4*A - B).expand(tensorproduct=True) == \\\n+        12*TP(A, A) - 3*TP(A, B) + 8*TP(B, A) - 2*TP(B, B)\n+    \n+    # Test with zero scalar factor\n+    assert TP(0*A, A + B).expand(tensorproduct=True) == 0\n+    assert TP(A, 0*(A + B)).expand(tensorproduct=True) == 0\n+    \n+    # Test nested tensor products\n+    assert TP(A, TP(2*B, C + D)).expand(tensorproduct=True) == \\\n+        2*TP(A, TP(B, C)) + 2*TP(A, TP(B, D))\n+\n+    # Test with numerical scalar factors\n+    assert TP(2*A + 3*B, 5*A - 4*B).expand(tensorproduct=True) == \\\n+        10*TP(A, A) - 8*TP(A, B) + 15*TP(B, A) - 12*TP(B, B)\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..db36c6e 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -13,7 +14,9 @@ from sympy.integrals.integrals import integrate\n from sympy.physics.units import (amount_of_substance, area, convert_to, find_unit,\n                                  volume, kilometer, joule, molar_gas_constant,\n                                  vacuum_permittivity, elementary_charge, volt,\n-                                 ohm)\n+                                 ohm, Quantity, velocity, acceleration, time, \n+                                 meter, second)\n+from sympy.physics.units.systems.si import SI\n from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n@@ -562,7 +565,22 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here if the issue is resolved\n+    SI._collect_factor_and_dimension(expr)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..55b3c6c 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W\n+from sympy.physics.units.prefixes import milli\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +29,17 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+    # Additional test cases for milli prefix with Watt (W)\n+    assert milli * W == W / 1000\n+    assert W * milli == W / 1000\n+    assert (milli * W).name == \"mW\"  # Check if the name is \"mW\" (milliwatt)\n+    assert (W * milli).name == \"mW\"  # Check if the name is \"mW\" (milliwatt)\n+\n+    # Check other units to ensure the fix does not break other functionalities\n+    from sympy.physics.units import volt\n+    assert milli * volt == volt / 1000\n+    assert (milli * volt).name == \"mV\"  # Ensure the name is \"mV\" (millivolt)\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..36a8dbe 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -342,8 +342,53 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+    def test_order_by_self_referential_fk(self):\n+        author_1 = Author.objects.create(name='Author 1')\n+        author_2 = Author.objects.create(name='Author 2')\n+        article_1 = Article.objects.create(author=author_1, headline='Article 1')\n+        article_2 = Article.objects.create(author=author_2, headline='Article 2')\n+        \n+        author_1.editor = author_2\n+        author_1.save()\n+        author_2.editor = author_1\n+        author_2.save()\n+\n+        # Test ordering by the self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'), \n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+        \n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+    def test_order_by_with_reverse_self_referential_fk(self):\n+        # Ensure that reversing the order works correctly, addressing the issue\n+        author_1 = Author.objects.create(name='Author 1')\n+        author_2 = Author.objects.create(name='Author 2')\n+        article_1 = Article.objects.create(author=author_1, headline='Article 1')\n+        article_2 = Article.objects.create(author=author_2, headline='Article 2')\n+        \n+        author_1.editor = author_2\n+        author_1.save()\n+        author_2.editor = author_1\n+        author_2.save()\n \n-    def test_order_by_f_expression(self):\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n                 \"Article 1\",\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..1ceb988 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,6 +3202,26 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n+    def test_boundfield_subwidget_id_for_label_custom_id(self):\n+        \"\"\"\n+        Ensure that when a custom id is set in ChoiceWidget.options, \n+        it is correctly used by subwidgets.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        # Simulate custom IDs set by ChoiceWidget.options\n+        subwidgets[0].data['attrs']['id'] = 'custom_id_0'\n+        subwidgets[1].data['attrs']['id'] = 'custom_id_1'\n+\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n+\n     def test_boundfield_widget_type(self):\n         class SomeForm(Form):\n             first_name = CharField()\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..0fc1c20 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -639,6 +639,28 @@ def test_colorbar_format(fmt):\n     assert (cbar.ax.yaxis.get_ticklabels()[0].get_text() ==\n             '$\\\\mathdefault{10^{-2}}$')\n \n+def test_colorbar_update_after_norm_change():\n+    x, y = np.ogrid[-4:4:31j, -4:4:31j]\n+    z = 10**np.random.normal(1, 1, size=(31, 31))\n+\n+    fig, ax = plt.subplots()\n+    pcm = ax.imshow(z, cmap='gray')\n+    cbar = fig.colorbar(pcm, ax=ax)\n+\n+    # Change the normalizer to LogNorm\n+    pcm.set_norm(LogNorm(vmin=np.min(z), vmax=np.max(z)))\n+    cbar.update_normal(pcm)\n+    fig.canvas.draw()\n+    tick_labels = [label.get_text() for label in cbar.ax.yaxis.get_ticklabels()]\n+    assert tick_labels[0] == '$\\\\mathdefault{10^{0}}$', \"Colorbar ticks not updated to log scale\"\n+\n+    # Change back to linear norm and verify\n+    pcm.set_norm(Normalize(vmin=np.min(z), vmax=np.max(z)))\n+    cbar.update_normal(pcm)\n+    fig.canvas.draw()\n+    tick_labels_linear = [label.get_text() for label in cbar.ax.yaxis.get_ticklabels()]\n+    assert '10' not in tick_labels_linear[0], \"Colorbar ticks not updated back to linear scale\"\n+\n \n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..6b76d01 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,34 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with a custom transformer and pandas output.\"\"\"\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import make_union, FeatureUnion\n+    from sklearn import set_config\n+    from sklearn.utils._testing import assert_frame_equal\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y=None):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y=None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    # Use pandas output\n+    set_config(transform_output=\"pandas\")\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    transformed_data = union.fit_transform(data)\n+\n+    # Expected result: aggregated sums for each day\n+    expected_data = pd.DataFrame({\"value\": [240] * 4})\n+\n+    # Check if the transformed data matches the expected data\n+    assert_frame_equal(transformed_data, expected_data)\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..b549169 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,39 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+import sys\n+import pytest\n+from sphinx.testing.fixtures import test_params, app_params\n+from sphinx.ext.autodoc import do_autodoc\n+\n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='py36+ is required.')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..448a1e6 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -9,6 +10,14 @@ from sympy.utilities.pytest import XFAIL\n from sympy.abc import x, y, z, t, a, b, c, d, e, f, g, h, i, k\n \n \n+def test_issue_15129_trigsimp_methods():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = t1.dot(t3)\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == sin(S(3)/50)\n \n def test_trigsimp1():\n     x, y = symbols('x,y')\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..c8541b0 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,42 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_sum_pretty_print_alignment():\n+    from sympy import Sum, pprint\n+    from sympy.abc import x\n+    from sympy import oo\n \n-def test_units():\n+    expr = Sum(x, (x, 1, oo)) + 3\n+\n+    # Expected unicode pretty print\n+    expected_unicode = \\\n+u(\"\"\"\\\n+  \u221e     \\n\\\n+ ___    \\n\\\n+ \u2572      \\n\\\n+  \u2572   x \\n\\\n+  \u2571    + 3\\n\\\n+ \u2571      \\n\\\n+ \u203e\u203e\u203e    \\n\\\n+x = 1   \\\n+\"\"\")\n+    # Ensure unicode pretty print is correct\n+    assert upretty(expr) == expected_unicode\n+\n+    # Expected ASCII pretty print\n+    expected_ascii = \\\n+\"\"\"\\\n+  oo    \\n\\\n+ ___    \\n\\\n+ \\\\     \\n\\\n+  \\\\   x \\n\\\n+   )  + 3\\n\\\n+  /     \\n\\\n+ /__    \\n\\\n+x = 1   \\\n+\"\"\"\n+    # Ensure ASCII pretty print is correct\n+    assert pretty(expr) == expected_ascii\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..a116651 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,7 +692,29 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.iterables import uniq\n+from sympy import raises\n+\n def test_uniq():\n+    # Original test cases for RuntimeError\n+    f = [1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = [[1]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    # Additional test cases for different data types\n+    f = ['a', 'b', 'c', 'a']\n+    raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n+    \n+    f = [1, 2, 3, 1]\n+    raises(RuntimeError, lambda: [f.pop(0) for i in uniq(f)])\n+    \n+    f = ['apple', 'banana', 'apple']\n+    raises(RuntimeError, lambda: [f.pop(-1) for i in uniq(f)])\n+    \n+    # Test with nested lists\n+    f = [[1], [2, 1], [1], [2]]\n+    raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     assert list(uniq(x % 2 for x in range(5))) == [0, 1]\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..8f6a17d 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,9 +1,11 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n from operator import attrgetter\n \n from django.core.exceptions import FieldError\n+from django.db.models import Max\n from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n@@ -955,4 +957,36 @@ class LookupTests(TestCase):\n                 ).filter(author_exists=True)\n             ),\n         )\n-        self.assertEqual(qs.get(has_author_alias_match=True), tag)\n+        self.assertEqual(qs.get(has_author_alias_match=True), tag)\n+\n+    def test_group_by_preservation_with_subquery_limit(self):\n+        # Create authors\n+        author1 = Author.objects.create(name='Author 1')\n+        author2 = Author.objects.create(name='Author 2')\n+\n+        # Create a queryset with a subquery that uses GROUP BY\n+        authors_max_ids = Author.objects.filter(\n+            name__isnull=False,\n+        ).values(\n+            'name',\n+        ).annotate(\n+            max_id=Max('id'),\n+        ).values('max_id')\n+\n+        # Main query that uses the subquery\n+        authors = Author.objects.filter(id=authors_max_ids[:1])\n+        self.assertIn(author2, authors)\n+\n+    def test_no_unintended_group_by_override(self):\n+        # Create authors\n+        author1 = Author.objects.create(name='Author 1')\n+        author2 = Author.objects.create(name='Author 2')\n+\n+        # Create a queryset with a subquery that uses GROUP BY name\n+        author_subquery = Author.objects.values('name').annotate(max_id=Max('id')).values('max_id')\n+\n+        # Main query that filters using the subquery\n+        authors = Author.objects.filter(id=author_subquery[:1])\n+\n+        # Test that the group by does not override and can find the correct author\n+        self.assertTrue(authors.exists())\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..3ede3b2 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,7 +546,37 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n-    def test_uuid_pk_subquery(self):\n+    def test_subquery_sql_auto_set(self):\n+        # Test that the Subquery automatically sets the subquery attribute to True\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        \n+        # Check the SQL generated is correctly a subquery\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertTrue(sql.startswith('(') and sql.endswith(')'))\n+        self.assertIn('(SELECT ', sql)\n+\n+    def test_subquery_with_explicit_subquery_true(self):\n+        # Test SQL generation when explicitly setting subquery to True\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        employees_subquery.query.subquery = True\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertTrue(sql.startswith('(') and sql.endswith(')'))\n+        self.assertIn('(SELECT ', sql)\n+\n+    def test_subquery_with_explicit_subquery_false(self):\n+        # Test SQL generation when explicitly setting subquery to False\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        employees_subquery.query.subquery = False  # Edge case, should still be valid SQL\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertTrue(sql.startswith('(') and sql.endswith(')'))\n+        self.assertIn('(SELECT ', sql)\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n         qs = UUIDPK.objects.filter(id__in=Subquery(UUID.objects.values('uuid_fk__id')))\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..5ab9779 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,7 +153,32 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n-    def test_reverse_fk_select_related_multiple(self):\n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n+\n+    def test_wrong_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(PoolStyle.objects.annotate(\n+                tournament_pool=FilteredRelation('pool__tournament__pool'),\n+                ).select_related('tournament_pool'))\n+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\n         with self.assertNumQueries(1):\n             ps = list(\n                 PoolStyle.objects.annotate(\n@@ -163,4 +189,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..52b3685 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,7 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+from seaborn import PairGrid, load_dataset\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,7 +1625,21 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_scatterplot_with_hue(self):\n+        # Load the iris dataset\n+        iris = load_dataset(\"iris\")\n+        \n+        # Create a PairGrid without using the hue argument in the PairGrid constructor\n+        g = PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        \n+        # Attempt to map scatterplot with hue\n+        try:\n+            g.map(scatterplot, hue=iris[\"species\"])\n+            success = True\n+        except Exception as e:\n+            success = False\n+        \n+        assert success, \"PairGrid with sns.scatterplot and hue should not raise an exception\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "",
  "pytest-dev__pytest-6116": "",
  "sphinx-doc__sphinx-10451": "",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..878f689 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -81,6 +81,9 @@ def test_Identity():\n     assert In*A == A\n \n     assert transpose(In) == In\n+\n+    # Test that the sum of all elements in the identity matrix In is n\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     assert In.inverse() == In\n     assert In.conjugate() == In\n \n",
  "sympy__sympy-20049": "diff --git a/sympy/physics/vector/point.py b/sympy/physics/vector/point.py\nindex b711aa3..68c8342 100644\n--- a/sympy/physics/vector/point.py\n+++ b/sympy/physics/vector/point.py\n@@ -494,7 +494,17 @@ class Point(object):\n         v = otherpoint.vel(outframe)\n         omega = fixedframe.ang_vel_in(outframe)\n         self.set_vel(outframe, v + (omega ^ dist))\n-        return self.vel(outframe)\n+        # Attempt to automatically calculate velocity if not defined\n+        if frame not in self._vel_dict:\n+            try:\n+                reference_point = self._parent\n+                relative_position = self.pos_from(reference_point)\n+                calculated_velocity = relative_position.dt(frame) + reference_point.vel(frame)\n+                self.set_vel(frame, calculated_velocity)\n+            except AttributeError:\n+                raise ValueError('Velocity of point ' + self.name + ' has not been'\n+                                 ' defined in ReferenceFrame ' + frame.name)\n+        return self._vel_dict[frame]\n \n     def vel(self, frame):\n         \"\"\"The velocity Vector of this Point in the ReferenceFrame.\n",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..3526117 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,6 +251,10 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n+def test_issue_21537():\n+    from sympy.parsing.latex import parse_latex\n+    assert str(parse_latex(r\"\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}\")) == '((a**3 + b)/c)/(1/(c**2))'\n+\n # These bad LaTeX strings should raise a LaTeXParsingError when parsed\n BAD_STRINGS = [\n     r\"(\",\n"
}