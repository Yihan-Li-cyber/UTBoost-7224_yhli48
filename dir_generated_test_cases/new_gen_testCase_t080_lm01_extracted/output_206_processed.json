{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..d9c21a4 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -134,8 +134,27 @@ def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n-\n-def test_custom_model_separable():\n+def test_nested_compound_model_separable_issue():\n+    # Import necessary modules\n+    from astropy.modeling import models\n+    from astropy.modeling.separable import separability_matrix\n+    import numpy as np\n+\n+    # Creating a nested compound model as described in the issue\n+    cm = models.Linear1D(10) & models.Linear1D(5)\n+    nested_model = models.Pix2Sky_TAN() & cm\n+\n+    # Calculating the separability matrix\n+    result = separability_matrix(nested_model)\n+\n+    # Expected output based on the issue\n+    expected_result = np.array([[ True,  True, False, False],\n+                                [ True,  True, False, False],\n+                                [False, False,  True,  True],\n+                                [False, False,  True,  True]])\n+\n+    # Assert that the computed matrix matches the expected result\n+    assert np.array_equal(result, expected_result)\n     @custom_model\n     def model_a(x):\n         return x\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..63d76be 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,6 +1,49 @@\n+\n+def test_rst_write_with_additional_header_rows():\n+    \"\"\"Test writing a table with additional header rows (name, unit).\"\"\"\n+    tbl = QTable({'wave': [350, 950] * u.nm, 'response': [0.7, 1.2] * u.count})\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    expected_output = (\n+        \"===== ========\\n\"\n+        \" wave response\\n\"\n+        \"  nm       ct\\n\"\n+        \"===== ========\\n\"\n+        \"350.0      0.7\\n\"\n+        \"950.0      1.2\\n\"\n+        \"===== ========\\n\"\n+    )\n+    assert out.getvalue() == expected_output\n+\n+def test_rst_with_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n+import numpy as np\n+import astropy.units as u\n+from astropy.table import QTable\n \n from astropy.io import ascii\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..4ca1895 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -42,8 +42,22 @@ def test_get_tables_from_qdp_file(tmp_path):\n     assert table2.meta[\"comments\"][0].startswith(\"WT -- hardness\")\n     assert np.isclose(table2[\"MJD_nerr\"][0], -2.37847222222222e-05)\n \n+import pytest\n+from astropy.utils.exceptions import AstropyUserWarning\n \n-def test_roundtrip(tmp_path):\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_roundtrip(tmp_path, lowercase):\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n     example_qdp = \"\"\"\n     ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n     ! Columns are as labelled\n@@ -71,7 +85,33 @@ def test_roundtrip(tmp_path):\n     NO 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n     \"\"\"\n \n-    path = str(tmp_path / \"test.qdp\")\n+    example_qdp_lowercase = \"\"\"\n+    ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n+    ! Columns are as labelled\n+    read terr 1\n+    read serr 2\n+    ! WT -- hard data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   NO       0.212439\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000\n+    NO NO NO NO NO\n+    ! WT -- soft data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   0.726155        0.583890\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   2.410935        1.393592\n+    NO NO NO NO NO\n+    ! WT -- hardness ratio\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    ! Add command, just to raise the warning.\n+    read terr 1\n+    ! WT -- whatever\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    NO 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    \"\"\"\n+    path = str(tmp_path / (\"test_lower.qdp\" if lowercase else \"test.qdp\"))\n     path2 = str(tmp_path / \"test2.qdp\")\n \n     with open(path, \"w\") as fp:\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..dcc35ed 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -31,6 +31,41 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n # Test with Data covers:\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n+\n+import numpy as np\n+import pytest\n+from astropy.nddata import NDDataRef\n+\n+def test_nddata_mask_propagation():\n+    # Test that mask propagation works when only one operand has a mask\n+\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_mask = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply mask by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_mask.multiply(1., handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply mask by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply mask by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n @pytest.mark.parametrize(\n     (\"data1\", \"data2\"),\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..77681e8 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -251,9 +251,21 @@ class TestTableFunctions(FitsTestCase):\n         assert (t[1].data.field(0) == np.array([1, 2])).all()\n \n         # When there are scaled columns, the raw data are in data._parent\n-\n         t.close()\n \n+    def test_d_exponent_replacement(self):\n+        # Test that the D exponent is correctly replaced\n+        r1 = np.array([123.456, 789.012])\n+        c2 = fits.Column(name='def', format='D', array=r1)\n+        hdu = fits.TableHDU.from_columns([c2])\n+        hdu.writeto(self.temp('test_d_exponent.fits'), overwrite=True)\n+        \n+        # Read the file and check for expected D exponent usage\n+        with open(self.temp('test_d_exponent.fits'), 'r') as f:\n+            content = f.read()\n+            assert '1.2345600000000D+02' in content or '1.2345600000000E+02' in content\n+            assert '7.8901200000000D+02' in content or '7.8901200000000E+02' in content\n+\n     def test_ascii_table(self):\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..96ab6ed 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1094,6 +1094,26 @@ class OverrideSettingsTests(SimpleTestCase):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n     def test_override_file_upload_permissions(self):\n+        \"\"\"\n+        Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n+        the file_permissions_mode attribute of\n+        django.core.files.storage.default_storage.\n+        \"\"\"\n+        self.assertEqual(default_storage.file_permissions_mode, 0o644)  # Default check\n+        self.assertIsNone(default_storage.directory_permissions_mode)\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o777)\n+\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The default FILE_UPLOAD_PERMISSIONS setting should be 0o644 and should\n+        be applied to uploaded files when no specific permissions are set.\n+        \"\"\"\n+        # Assume we have a method to simulate file upload\n+        uploaded_file_path = \"/path/to/uploaded/file\"\n+        # Simulate file upload (this would need a real implementation)\n+        # For example, using a mock or a temporary file\n+        self.assertEqual(os.stat(uploaded_file_path).st_mode & 0o777, 0o644)\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n         the file_permissions_mode attribute of\n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..ea7e8ae 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -65,8 +65,22 @@ class TestSerialization(SimpleTestCase):\n         self.assertEqual(instance.field, datetime.timedelta(days=1, hours=1))\n \n \n+from django.core import exceptions\n+from django.db import models\n+\n class TestValidation(SimpleTestCase):\n \n+    def test_invalid_duration_format(self):\n+        field = models.DurationField()\n+        with self.assertRaises(exceptions.ValidationError) as cm:\n+            field.clean('14:00', None)\n+        self.assertEqual(cm.exception.code, 'invalid')\n+        self.assertEqual(\n+            cm.exception.message % cm.exception.params,\n+            \"'14:00' value has an invalid format. \"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+        )\n+\n     def test_invalid_string(self):\n         field = models.DurationField()\n         with self.assertRaises(exceptions.ValidationError) as cm:\n@@ -75,7 +89,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +98,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..9f95041 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            'trailingnewline\\n'\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -258,4 +259,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..59c6988 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,10 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..beb3581 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,7 +1,9 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n+from django.db.models.deletion import Collector\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n from .models import (\n@@ -471,7 +473,33 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n-    def test_fast_delete_joined_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        # This test checks that after deletion, the PK is set to None for models with no dependencies.\n+        u = User.objects.create()\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_multiple_instances_set_pk_none(self):\n+        # Test multiple instances to ensure PKs are set to None after delete\n+        u1 = User.objects.create()\n+        u2 = User.objects.create()\n+        users = [u1, u2]\n+        collector = Collector(using='default')\n+        for user in users:\n+            self.assertTrue(collector.can_fast_delete(user))\n+            user.delete()\n+            self.assertIsNone(user.pk)\n+\n+    def test_deletion_of_instance_with_dependencies(self):\n+        # Create dependencies and check that delete does not set PK to None\n+        parent = Parent.objects.create(name=\"parent\")\n+        child = Child.objects.create(parent=parent, name=\"child\")\n+        collector = Collector(using='default')\n+        self.assertFalse(collector.can_fast_delete(child))  # Child has a dependency\n+        child.delete()\n+        self.assertIsNotNone(child.pk)  # PK should not be set to None\n         a = Avatar.objects.create(desc='a')\n         User.objects.create(avatar=a)\n         u2 = User.objects.create()\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..7aac696 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,6 +1,10 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n+from django.test.utils import captured_stdout\n+from django.contrib.auth.models import Permission\n+from django.contrib.contenttypes.models import ContentType\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n@@ -140,7 +144,76 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n-    def test_user_keeps_same_permissions_after_migrating_backward(self):\n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Permissions may already exist:\n+\n+        - Old workaround was to manually create permissions for proxy models.\n+        - Model may have been concrete and then converted to proxy.\n+\n+        Output a reminder to audit relevant permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_no_duplicate_permissions_created(self):\n+        \"\"\"\n+        Ensure no duplicate permissions are created during migration for proxy models.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        # Check that no duplicate permissions are created\n+        self.assertEqual(\n+            Permission.objects.filter(\n+                content_type=proxy_model_content_type,\n+                codename='add_proxy',\n+            ).count(),\n+            1\n+        )\n+\n+    def test_migrate_and_revert_proxy_permissions(self):\n+        \"\"\"\n+        Test migration and reversion for proxy model permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        \n+        # Migrate to proxy permissions\n+        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        \n+        # Revert to concrete model permissions\n+        update_proxy_permissions.revert_proxy_model_permissions(apps, None)\n+        \n+        # After reverting, the content type should be for the concrete model\n+        concrete_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=True)\n+        self.assertEqual(\n+            Permission.objects.filter(\n+                content_type=concrete_model_content_type,\n+                codename='add_proxy',\n+            ).count(),\n+            1\n+        )\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n         user.user_permissions.add(self.custom_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..051e35f 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -13,6 +13,7 @@ from importlib import import_module\n from pathlib import Path\n from unittest import mock, skip, skipIf\n \n+import sys\n from django.apps.registry import Apps\n from django.test import SimpleTestCase\n from django.test.utils import extend_sys_path\n@@ -132,8 +133,36 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         del module.__spec__\n         self.assertEqual(autoreload.iter_modules_and_files((module,), frozenset()), frozenset())\n \n+class TestManagePyTracking(SimpleTestCase):\n+    def setUp(self):\n+        # Setup a temporary directory and manage.py file\n+        self.manage_py_dir = tempfile.mkdtemp()\n+        self.manage_py_path = Path(self.manage_py_dir) / \"manage.py\"\n+        self.manage_py_path.write_text('print(\"Hello, World!\")')\n+\n+        # Backup the original sys.modules\n+        self.original_sys_modules = sys.modules.copy()\n \n-class TestCommonRoots(SimpleTestCase):\n+    def tearDown(self):\n+        # Cleanup temporary directory and restore sys.modules\n+        shutil.rmtree(self.manage_py_dir)\n+        sys.modules = self.original_sys_modules\n+\n+    def test_manage_py_change_triggers_reload(self):\n+        # Mock the autoreload trigger to capture calls\n+        with mock.patch(\"django.utils.autoreload.trigger_reload\") as mock_trigger:\n+            # Load manage.py as __main__ to simulate its usual execution context\n+            spec = importlib.util.spec_from_file_location(\"__main__\", str(self.manage_py_path))\n+            main_module = importlib.util.module_from_spec(spec)\n+            sys.modules[\"__main__\"] = main_module\n+            spec.loader.exec_module(main_module)\n+\n+            # Modify manage.py to simulate a change\n+            self.manage_py_path.write_text('print(\"Updated!\")')\n+\n+            # Check if the autoreloader detects the change\n+            autoreload.check_errors(lambda: None)  # Trigger file checking\n+            mock_trigger.assert_called_once()\n     def test_common_roots(self):\n         paths = (\n             Path('/first/second'),\n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..4d328c4 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -141,7 +141,19 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         self.assertEqual(autoreload.iter_modules_and_files((fake_main,), frozenset()), frozenset())\n \n \n-class TestCommonRoots(SimpleTestCase):\n+class TestPathWithNullBytes(SimpleTestCase):\n+    def test_path_with_embedded_null_byte_handling(self):\n+        # Simulate a scenario where a path contains embedded null byte\n+        paths_with_null_byte = [\n+            Path('invalid\\0path.py'),\n+            Path('di\\0rectory/invalid_path.py')\n+        ]\n+        for path in paths_with_null_byte:\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([str(path)])),\n+                    frozenset(),\n+                )\n     def test_common_roots(self):\n         paths = (\n             Path('/first/second'),\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..8c29595 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1,5 +1,17 @@\n import importlib\n import inspect\n+class DebugViewTechnical404Tests(SimpleTestCase):\n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        Ensure raising Http404 in a path converter's to_python method results in \n+        a technical 404 response when DEBUG is True.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+            # Additional check to verify if the technical response is provided\n+            self.assertContains(response, 'Django tried these URL patterns', status_code=404)\n+\n import os\n import re\n import sys\n@@ -10,6 +22,8 @@ from pathlib import Path\n from unittest import mock\n \n from django.core import mail\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.core.files.uploadedfile import SimpleUploadedFile\n from django.db import DatabaseError, connection\n from django.shortcuts import render\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..e02d523 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -97,8 +97,35 @@ class CharFieldTests(SimpleTestCase):\n \n         field = Model._meta.get_field('field')\n         self.assertEqual(field.check(), [])\n+    \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n \n-    def test_missing_max_length(self):\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n         class Model(models.Model):\n             field = models.CharField()\n \n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..d0282db 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -251,8 +251,26 @@ class WriterTests(SimpleTestCase):\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n-\n-    def test_serialize_enums(self):\n+    \n+    def test_serialize_translated_enum(self):\n+        from django.utils.translation import gettext_lazy as _\n+        \n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+            def __str__(self):\n+                return self.name\n+\n+        # Simulate the migration serialization\n+        field = models.CharField(default=TranslatedEnum.GOOD, max_length=128)\n+        string = MigrationWriter.serialize(field)[0]\n+        \n+        # Check that the correct serialization is used\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(default=migrations.test_writer.TranslatedEnum['GOOD'], max_length=128)\"\n+        )\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..c426138 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n from datetime import datetime\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..935ee79 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,23 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy as _\n+from django.db import models\n+\n+class Suit(models.IntegerChoices):\n+    DIAMOND = 1, _(\"Diamond\")\n+    SPADE = 2, _(\"Spade\")\n+    HEART = 3, _(\"Heart\")\n+    CLUB = 4, _(\"Club\")\n+\n+class YearInSchool(models.TextChoices):\n+    FRESHMAN = 'FR', _(\"Freshman\")\n+    SOPHOMORE = 'SO', _(\"Sophomore\")\n+    JUNIOR = 'JR', _(\"Junior\")\n+    SENIOR = 'SR', _(\"Senior\")\n+    GRADUATE = 'GR', _(\"Graduate\")\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n@@ -99,7 +116,16 @@ class ChoicesTests(SimpleTestCase):\n         self.assertIsInstance(YearInSchool.FRESHMAN.label, Promise)\n         self.assertIsInstance(YearInSchool.FRESHMAN.value, str)\n \n-    def test_textchoices_auto_label(self):\n+    def test_str_representation(self):\n+        # Test for TextChoices\n+        for member in YearInSchool:\n+            with self.subTest(member=member):\n+                self.assertEqual(str(member), member.value)\n+        \n+        # Test for IntegerChoices\n+        for member in Suit:\n+            with self.subTest(member=member):\n+                self.assertEqual(str(member), str(member.value))\n         self.assertEqual(Gender.MALE.label, 'Male')\n         self.assertEqual(Gender.FEMALE.label, 'Female')\n         self.assertEqual(Gender.NOT_SPECIFIED.label, 'Not Specified')\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..d7a87e5 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -186,8 +186,23 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertIsNone(WhizIterEmpty(c=None).c)         # Blank value\n         self.assertEqual(WhizIterEmpty(c='').c, '')        # Empty value\n \n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class FooBar(models.Model):\n+    foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n \n-class GetChoicesTests(SimpleTestCase):\n+    def get_foo_bar_display(self):\n+        return 'something'\n+\n+class GetFieldDisplayTests(SimpleTestCase):\n+\n+    def test_override_get_field_display(self):\n+        \"\"\"\n+        Test that overriding get_FIELD_display works as expected.\n+        \"\"\"\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n \n     def test_empty_choices(self):\n         choices = []\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex 12487f2..13e96dd 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -14,4 +14,5 @@ urlpatterns = [\n     re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n-]\n+    re_path(r'^module/(?P<format>(html|json|xml))?/?$', views.modules, name='modules'),\n+]\n",
  "django__django-12284": "",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..70202cb 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,6 +76,29 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+            ('ca', 'Catalan'),\n+        ],\n+    )\n+    def test_valid_variant_consistent_language_settings(self):\n+        tests = [\n+            # language + region.\n+            'fr-CA',\n+            'es-419',\n+            'de-at',\n+            # language + region + variant.\n+            'ca-ES-valencia',\n+        ]\n+        for tag in tests:\n+            with self.subTest(tag):\n+                with self.settings(LANGUAGE_CODE=tag):\n+                    self.assertEqual(check_language_settings_consistent(None), [])\n+\n     def test_inconsistent_language_settings(self):\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..5ee75b4 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,6 +1,7 @@\n+\n import copy\n from unittest import mock\n-\n+from ..models import Object, ObjectReference\n from django.db import DEFAULT_DB_ALIAS, connection, connections\n from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..7e6583d 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -128,6 +128,35 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_corrected_m2m_hint_for_ambiguous_relationship(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through='AmbiguousRelationship')\n+\n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            group1 = models.ForeignKey(Group, models.CASCADE, related_name='group1')\n+            group2 = models.ForeignKey(Group, models.CASCADE, related_name='group2')\n+\n+        field = Group._meta.get_field('field')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.field', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_ambiguous_relationship_model(self):\n \n         class Person(models.Model):\n@@ -159,6 +188,35 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_corrected_m2m_hint_for_ambiguous_relationship(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through='AmbiguousRelationship')\n+\n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            group1 = models.ForeignKey(Group, models.CASCADE, related_name='group1')\n+            group2 = models.ForeignKey(Group, models.CASCADE, related_name='group2')\n+\n+        field = Group._meta.get_field('field')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.field', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n             pass\n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..dbfa9ff 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1241,6 +1241,92 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.cleansed_substitute,\n         )\n \n+    def test_cleanse_setting_recurses_in_list(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': [\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'}\n+                ],\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916']\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'}\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': [\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute}\n+                ],\n+                'tokens': reporter_filter.cleansed_substitute\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute}\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n+    def test_cleanse_setting_recurses_in_nested_iterables(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'foo': 'value',\n+            'secret': 'value',\n+            'token': 'value',\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': 'value'},\n+                {'token': 'value'},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+            ]\n+        }\n+        cleansed = {\n+            'foo': 'value',\n+            'secret': reporter_filter.cleansed_substitute,\n+            'token': reporter_filter.cleansed_substitute,\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': reporter_filter.cleansed_substitute},\n+                {'token': reporter_filter.cleansed_substitute},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+            ]\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', initial),\n+            cleansed,\n+        )\n+\n     def test_cleanse_setting_recurses_in_dictionary(self):\n         reporter_filter = SafeExceptionReporterFilter()\n         initial = {'login': 'cooper', 'password': 'secret'}\n@@ -1249,6 +1335,92 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n+    def test_cleanse_setting_recurses_in_list(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': [\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'}\n+                ],\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916']\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'}\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': [\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute}\n+                ],\n+                'tokens': reporter_filter.cleansed_substitute\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute}\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n+    def test_cleanse_setting_recurses_in_nested_iterables(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'foo': 'value',\n+            'secret': 'value',\n+            'token': 'value',\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': 'value'},\n+                {'token': 'value'},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+            ]\n+        }\n+        cleansed = {\n+            'foo': 'value',\n+            'secret': reporter_filter.cleansed_substitute,\n+            'token': reporter_filter.cleansed_substitute,\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': reporter_filter.cleansed_substitute},\n+                {'token': reporter_filter.cleansed_substitute},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+            ]\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', initial),\n+            cleansed,\n+        )\n+\n     def test_request_meta_filtering(self):\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n@@ -1257,6 +1429,92 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.cleansed_substitute,\n         )\n \n+    def test_cleanse_setting_recurses_in_list(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': [\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'}\n+                ],\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916']\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'}\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': [\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute}\n+                ],\n+                'tokens': reporter_filter.cleansed_substitute\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute}\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n+    def test_cleanse_setting_recurses_in_nested_iterables(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'foo': 'value',\n+            'secret': 'value',\n+            'token': 'value',\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': 'value'},\n+                {'token': 'value'},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+            ]\n+        }\n+        cleansed = {\n+            'foo': 'value',\n+            'secret': reporter_filter.cleansed_substitute,\n+            'token': reporter_filter.cleansed_substitute,\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': reporter_filter.cleansed_substitute},\n+                {'token': reporter_filter.cleansed_substitute},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+            ]\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', initial),\n+            cleansed,\n+        )\n+\n     def test_exception_report_uses_meta_filtering(self):\n         response = self.client.get('/raises500/', HTTP_SECRET_HEADER='super_secret')\n         self.assertNotIn(b'super_secret', response.content)\n@@ -1265,6 +1523,92 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             HTTP_SECRET_HEADER='super_secret',\n             HTTP_ACCEPT='application/json',\n         )\n+\n+    def test_cleanse_setting_recurses_in_list(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': [\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'}\n+                ],\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916']\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'}\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': [\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute}\n+                ],\n+                'tokens': reporter_filter.cleansed_substitute\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute}\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n+    def test_cleanse_setting_recurses_in_nested_iterables(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'foo': 'value',\n+            'secret': 'value',\n+            'token': 'value',\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': 'value'},\n+                {'token': 'value'},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+            ]\n+        }\n+        cleansed = {\n+            'foo': 'value',\n+            'secret': reporter_filter.cleansed_substitute,\n+            'token': reporter_filter.cleansed_substitute,\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': reporter_filter.cleansed_substitute},\n+                {'token': reporter_filter.cleansed_substitute},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+            ]\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('MY_SETTING', initial),\n+            cleansed,\n+        )\n         self.assertNotIn(b'super_secret', response.content)\n \n \n",
  "django__django-12708": "diff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py\nindex d6e6fdb..874718b 100644\n--- a/tests/migrations/test_base.py\n+++ b/tests/migrations/test_base.py\n@@ -76,6 +76,19 @@ class MigrationTestBase(TransactionTestCase):\n                 value,\n                 any(c['check'] for n, c in constraints if n == name),\n             )\n+    \n+    def assertMultipleConstraintsExist(self, table, columns, constraint_types=('index', 'unique'), using='default'):\n+        with connections[using].cursor() as cursor:\n+            constraints = connections[using].introspection.get_constraints(cursor, table).values()\n+            for constraint_type in constraint_types:\n+                self.assertTrue(\n+                    any(\n+                        c[constraint_type]\n+                        for c in constraints\n+                        if c['columns'] == list(columns)\n+                    ),\n+                    f\"No {constraint_type} constraint exists for columns {columns} on table {table}.\"\n+                )\n \n     def assertConstraintNotExists(self, table, name):\n         return self.assertConstraintExists(table, name, False)\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..d0da161 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -697,7 +697,23 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n-    def test_fast_delete_combined_relationships(self):\n+    def test_zero_objects_deleted_with_fk(self):\n+        \"\"\"\n+        Test QuerySet.delete() when zero objects are deleted for models with foreign keys.\n+        Expect the result to be (0, {'model_label': 0}) to ensure consistency with non-FK models.\n+        \"\"\"\n+        deleted, deleted_objs = HiddenUser.objects.filter(id=0).delete()  # Assume no object with id=0\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'delete.HiddenUser': 0})\n+\n+    def test_zero_objects_deleted_without_fk(self):\n+        \"\"\"\n+        Test QuerySet.delete() when zero objects are deleted for models without foreign keys.\n+        Expect the result to be (0, {'model_label': 0}).\n+        \"\"\"\n+        deleted, deleted_objs = R.objects.filter(id=0).delete()  # Assume no object with id=0\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'delete.R': 0})\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n         origin = Origin.objects.create()\n",
  "django__django-12856": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 7fb65b7..3539216 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1282,6 +1282,32 @@ class Model(metaclass=ModelBase):\n                 *cls._check_constraints(databases),\n             ]\n \n+        # Perform additional checks for UniqueConstraint fields\n+        errors += cls._check_unique_constraints_fields()\n+        return errors\n+\n+    @classmethod\n+    def _check_unique_constraints_fields(cls):\n+        errors = []\n+        for constraint in cls._meta.constraints:\n+            if isinstance(constraint, models.UniqueConstraint):\n+                for field_name in constraint.fields:\n+                    if field_name not in cls._meta.fields_map:\n+                        errors.append(\n+                            checks.Error(\n+                                f\"'constraints' refers to the nonexistent field '{field_name}'.\",\n+                                obj=cls,\n+                                id='models.E012',\n+                            )\n+                        )\n+                    elif isinstance(cls._meta.fields_map[field_name], models.ManyToManyField):\n+                        errors.append(\n+                            checks.Error(\n+                                f\"'constraints' refers to a ManyToManyField '{field_name}', but ManyToManyFields are not permitted in 'constraints'.\",\n+                                obj=cls,\n+                                id='models.E013',\n+                            )\n+                        )\n         return errors\n \n     @classmethod\n@@ -1861,6 +1887,32 @@ class Model(metaclass=ModelBase):\n                         )\n                     )\n \n+        # Perform additional checks for UniqueConstraint fields\n+        errors += cls._check_unique_constraints_fields()\n+        return errors\n+\n+    @classmethod\n+    def _check_unique_constraints_fields(cls):\n+        errors = []\n+        for constraint in cls._meta.constraints:\n+            if isinstance(constraint, models.UniqueConstraint):\n+                for field_name in constraint.fields:\n+                    if field_name not in cls._meta.fields_map:\n+                        errors.append(\n+                            checks.Error(\n+                                f\"'constraints' refers to the nonexistent field '{field_name}'.\",\n+                                obj=cls,\n+                                id='models.E012',\n+                            )\n+                        )\n+                    elif isinstance(cls._meta.fields_map[field_name], models.ManyToManyField):\n+                        errors.append(\n+                            checks.Error(\n+                                f\"'constraints' refers to a ManyToManyField '{field_name}', but ManyToManyFields are not permitted in 'constraints'.\",\n+                                obj=cls,\n+                                id='models.E013',\n+                            )\n+                        )\n         return errors\n \n     @classmethod\n@@ -1926,6 +1978,32 @@ class Model(metaclass=ModelBase):\n                         id='models.W038',\n                     )\n                 )\n+        # Perform additional checks for UniqueConstraint fields\n+        errors += cls._check_unique_constraints_fields()\n+        return errors\n+\n+    @classmethod\n+    def _check_unique_constraints_fields(cls):\n+        errors = []\n+        for constraint in cls._meta.constraints:\n+            if isinstance(constraint, models.UniqueConstraint):\n+                for field_name in constraint.fields:\n+                    if field_name not in cls._meta.fields_map:\n+                        errors.append(\n+                            checks.Error(\n+                                f\"'constraints' refers to the nonexistent field '{field_name}'.\",\n+                                obj=cls,\n+                                id='models.E012',\n+                            )\n+                        )\n+                    elif isinstance(cls._meta.fields_map[field_name], models.ManyToManyField):\n+                        errors.append(\n+                            checks.Error(\n+                                f\"'constraints' refers to a ManyToManyField '{field_name}', but ManyToManyFields are not permitted in 'constraints'.\",\n+                                obj=cls,\n+                                id='models.E013',\n+                            )\n+                        )\n         return errors\n \n \n",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..c07fa26 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,50 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_static_file_response(self):\n+        # Setup application with ASGIStaticFilesHandler\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        # Allow response.close() to finish\n+        await communicator.wait()\n+\n+    async def test_get_async_response(self):\n+        request = self.async_request_factory.get('/static/test/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_get_async_response_not_found(self):\n+        request = self.async_request_factory.get('/static/test/not-found.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..9b89b1c 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,12 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Tests for the issue described.\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('---Leading dash---', 'leading-dash', False),\n+            ('Trailing underscore___', 'trailing-underscore', False),\n+            ('__Both---', 'both', False),\n+            ('Mixed___---___value', 'mixed-value', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..89a3b51 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2819,6 +2819,73 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        # Create sample data\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.marley,\n+        )\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+\n     def test_callable_called_each_time_form_is_instantiated(self):\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..0bc7ec0 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -7,10 +7,37 @@ from django.core.exceptions import FieldDoesNotExist, FieldError\n from django.db import models\n from django.test import SimpleTestCase\n from django.test.utils import isolate_apps\n+from django.db import models\n \n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n+    def test_abstract_inherited_fields_unique_across_models(self):\n+        \"\"\"Test that fields from different models inheriting the same abstract class are not considered equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        field1 = InheritAbstractModel1._meta.get_field('field')\n+        field2 = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Ensure fields from different models are not equal\n+        self.assertNotEqual(field1, field2)\n+\n+        # Ensure their hashes are also different\n+        self.assertNotEqual(hash(field1), hash(field2))\n+\n+        # Check ordering does not cause unintended equalities\n+        self.assertLess(field1.creation_counter, field2.creation_counter)\n+\n     def test_single_parent(self):\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n@@ -347,4 +374,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..839d997 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -45,12 +45,47 @@ class SiteEachContextTest(TestCase):\n         request.user = self.u1\n         self.assertEqual(site.each_context(request)['site_url'], '/my-script-name/')\n \n+    from django.contrib.auth.models import User\n+    from .models import Article\n+\n     def test_available_apps(self):\n         ctx = self.ctx\n         apps = ctx['available_apps']\n         # we have registered two models from two different apps\n         self.assertEqual(len(apps), 2)\n \n+        # admin_views.Article\n+        admin_views = apps[0]\n+        self.assertEqual(admin_views['app_label'], 'admin_views')\n+        self.assertEqual(len(admin_views['models']), 1)\n+        \n+        article = admin_views['models'][0]\n+        self.assertEqual(article['object_name'], 'Article')\n+        self.assertEqual(article['model'], Article)  # Ensure model class is accessible\n+\n+        # auth.User\n+        auth = apps[1]\n+        self.assertEqual(auth['app_label'], 'auth')\n+        self.assertEqual(len(auth['models']), 1)\n+        \n+        user = auth['models'][0]\n+        self.assertEqual(user['object_name'], 'User')\n+        self.assertEqual(user['model'], User)  # Ensure model class is accessible\n+\n+        self.assertEqual(auth['app_url'], '/test_admin/admin/auth/')\n+        self.assertIs(auth['has_module_perms'], True)\n+\n+        self.assertIn('perms', user)\n+        self.assertIs(user['perms']['add'], True)\n+        self.assertIs(user['perms']['change'], True)\n+        self.assertIs(user['perms']['delete'], True)\n+        self.assertEqual(user['admin_url'], '/test_admin/admin/auth/user/')\n+        self.assertEqual(user['add_url'], '/test_admin/admin/auth/user/add/')\n+        ctx = self.ctx\n+        apps = ctx['available_apps']\n+        # we have registered two models from two different apps\n+        self.assertEqual(len(apps), 2)\n+\n         # admin_views.Article\n         admin_views = apps[0]\n         self.assertEqual(admin_views['app_label'], 'admin_views')\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..cf56ce8 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,6 +39,27 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n+\n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..666e85f 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -6,6 +7,7 @@ from copy import deepcopy\n from decimal import Decimal\n from unittest import mock\n \n+from collections import namedtuple\n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import (\n@@ -886,7 +888,35 @@ class IterableLookupInnerExpressionsTests(TestCase):\n \n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n-    def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_boundary(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=99, maximum=300),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_with_multiple_namedtuples(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        Company.objects.create(name='100000 Ltd', num_employees=150, num_chairs=10, ceo=self.ceo)\n+        ranges = [\n+            EmployeeRange(minimum=51, maximum=100),\n+            EmployeeRange(minimum=101, maximum=200)\n+        ]\n+        qs = Company.objects.filter(\n+            num_employees__range__in=ranges,\n+        )\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['<Company: 99300 Ltd>', '<Company: 100000 Ltd>'],\n+            ordered=False\n+        )\n         \"\"\"\n         This tests that SQL injection isn't possible using compilation of\n         expressions in iterable filters, as their compilation happens before\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..f1b0043 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,6 +19,41 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_is_main(self):\n+        \"\"\"\n+        Program name '__main__.py' in argv[0] should be replaced with 'python -m django'.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['__main__.py'] + args)\n+        self.assertIn('usage: python -m django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_none_in_argv(self):\n+        \"\"\"\n+        If argv[0] is None, it should be handled properly without exceptions.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line([None] + args)\n+        self.assertIn('usage: python -m django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n@@ -27,7 +62,9 @@ from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n from django.db import ConnectionHandler, connection\n-from django.db.migrations.recorder import MigrationRecorder\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stderr, captured_stdout\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n",
  "django__django-13660": "",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..80cdd6e 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -963,11 +963,13 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n         self.assertNotContains(response, 'id=\"id_question_set-0-text\"')\n \n \n+User = get_user_model()\n+\n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n     factory = RequestFactory()\n-\n-    def test_verbose_name_plural_inline(self):\n+    def setUp(self):\n+        self.superuser = User.objects.create_superuser('admin', 'admin@example.com', 'password')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name_plural = 'Non-verbose childs'\n@@ -1013,7 +1015,30 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertContains(response, 'Add another Model with both - name')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n \n-    def test_both_verbose_names_inline(self):\n+    def test_default_verbose_name_plural_from_verbose_name_inline(self):\n+        class DefaultVerboseNameProfileInline(TabularInline):\n+            model = Profile\n+            verbose_name = 'Child'\n+\n+        class OnlyVerboseNameInline(TabularInline):\n+            model = VerboseNameProfile\n+            verbose_name = 'Item'\n+            verbose_name_plural = None  # Explicitly set to None to test default behavior\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [\n+            DefaultVerboseNameProfileInline,\n+            OnlyVerboseNameInline,\n+        ]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        self.assertContains(response, '<h2>Children</h2>')\n+        self.assertContains(response, 'Add another Child')\n+        self.assertContains(response, '<h2>Items</h2>')\n+        self.assertContains(response, 'Add another Item')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name = 'Non-verbose childs - name'\n@@ -1072,6 +1097,8 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertNotContains(response, 'Add another Model with both - name')\n \n \n+User = get_user_model()\n+\n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n \n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..aca99ca 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -596,6 +596,20 @@ class TestQuerying(TestCase):\n         )\n \n     def test_isnull_key_or_none(self):\n+        # Additional test for checking the correct behavior on SQLite and Oracle\n+        # when using __isnull=True on a KeyTransform.\n+        # This test ensures that objects with the key value as JSON null are not matched.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        \n+        # Also verify the inverse logic, __isnull=False should not match records\n+        # where the key is present but has a JSON null value.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=False),\n+            [self.objs[4]],\n+        )\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),\n",
  "django__django-13768": "",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..52ca9f2 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,8 +281,29 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField\n+from .models import ChoiceModel\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Create test data in the database.\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+\n+        # Test that an invalid choice gives the value in the error message.\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        # Passing 'invalid' should raise a ValidationError with the value included in the message.\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +328,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..dde4165 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,9 +1,19 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n \n class QTests(SimpleTestCase):\n-    def test_combine_and_empty(self):\n+    def test_combine_non_pickleable_keys(self):\n+        # Test combining Q objects with dict_keys using & operator\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+\n+        # Test combining Q objects with dict_keys using | operator\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n         q = Q(x=1)\n         self.assertEqual(q & Q(), q)\n         self.assertEqual(Q() & q, q)\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..1da4f36 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -28,12 +28,14 @@ from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n+from django.db.models import Q, Exists, OuterRef\n from django.utils.functional import SimpleLazyObject\n \n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n     RemoteEmployee, Result, SimulationRun, Time,\n )\n+from django.db.models import Q, Exists, OuterRef\n \n \n class BasicExpressionsTests(TestCase):\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..9a7dd0d 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1146,6 +1146,54 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+from django.urls import resolve\n+from django.urls import path\n+from django.test import SimpleTestCase, override_settings\n+from urllib.parse import urlencode\n+\n+from . import views\n+\n+@override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+class TestResolverMatchFunctoolsPartial(SimpleTestCase):\n+\n+    def test_repr_functools_partial(self):\n+        tests = [\n+            ('partial', 'template.html'),\n+            ('partial_nested', 'nested_partial.html'),\n+            ('partial_wrapped', 'template.html'),\n+        ]\n+        for name, template_name in tests:\n+            with self.subTest(name=name):\n+                func = (\n+                    f\"functools.partial({views.empty_view!r}, \"\n+                    f\"template_name='{template_name}')\"\n+                )\n+                self.assertEqual(\n+                    repr(resolve(f'/{name}/')),\n+                    f\"ResolverMatch(func={func}, args=(), kwargs={{}}, \"\n+                    f\"url_name='{name}', app_names=[], namespaces=[], \"\n+                    f\"route='{name}/')\",\n+                )\n+\n+    def test_partial_with_args(self):\n+        partial_func = functools.partial(views.empty_view, 'arg1', 'arg2')\n+        resolved = ResolverMatch(func=partial_func, args=('42',), kwargs={'key': 'value'}, url_name='test-partial-with-args')\n+        expected_repr = (\n+            f\"ResolverMatch(func={views.empty_view!r}, args=('42',), kwargs={{'key': 'value'}}, \"\n+            f\"url_name='test-partial-with-args', app_names=[], namespaces=[], route=None)\"\n+        )\n+        self.assertEqual(repr(resolved), expected_repr)\n+\n+    def test_partial_with_kwargs(self):\n+        partial_func = functools.partial(views.empty_view, key='value')\n+        resolved = ResolverMatch(func=partial_func, args=(), kwargs={'another_key': 'another_value'}, url_name='test-partial-with-kwargs')\n+        expected_repr = (\n+            f\"ResolverMatch(func={views.empty_view!r}, args=(), kwargs={{'another_key': 'another_value'}}, \"\n+            f\"url_name='test-partial-with-kwargs', app_names=[], namespaces=[], route=None)\"\n+        )\n+        self.assertEqual(repr(resolved), expected_repr)\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..b96123f 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,7 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import SimpleTestCase, override_settings\n+from django.test.utils import isolate_apps\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -74,7 +77,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    @isolate_apps('model_options.apps.MyBigAutoFieldConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options.apps.MySmallAutoFieldConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_app_default_auto_field(self):\n         class Model(models.Model):\n@@ -91,7 +114,27 @@ class TestDefaultPK(SimpleTestCase):\n         m2m_pk = M2MModel._meta.get_field('m2m').remote_field.through._meta.pk\n         self.assertIsInstance(m2m_pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    @isolate_apps('model_options.apps.MyBigAutoFieldConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options.apps.MySmallAutoFieldConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_m2m_app_default_auto_field(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..6397384 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2169,6 +2169,26 @@ class StartApp(AdminScriptTestCase):\n                 )\n                 self.assertFalse(os.path.exists(testproject_dir))\n \n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app1')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app1', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n+    def test_trailing_slash_in_non_existent_directory_name(self):\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app2')\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app2', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n+    def test_no_trailing_slash_in_existing_directory_name(self):\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app3')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', 'apps/app3'])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n     def test_importable_name(self):\n         \"\"\"\n         startapp validates that app name doesn't clash with existing Python\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..e46eb81 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -2,6 +2,7 @@ import datetime\n import re\n from unittest import mock\n \n+from django.forms import Form\n from django.contrib.auth.forms import (\n     AdminPasswordChangeForm, AuthenticationForm, PasswordChangeForm,\n     PasswordResetForm, ReadOnlyPasswordHashField, ReadOnlyPasswordHashWidget,\n@@ -1025,8 +1026,30 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n         self.assertIs(field.disabled, True)\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n \n+class ReadOnlyPasswordHashWidgetTest(SimpleTestCase):\n+    def test_label_without_for_attribute(self):\n+        \"\"\"\n+        Ensure the label element for the ReadOnlyPasswordHashWidget\n+        does not contain a 'for' attribute.\n+        \"\"\"\n+        class TestForm(Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+        self.assertIn('<label>', bound_field.label_tag())\n+        self.assertNotIn('for=\"', bound_field.label_tag())\n+\n+    def test_label_output(self):\n+        \"\"\"\n+        Ensure the label_tag returns the correct label without a 'for' attribute.\n+        \"\"\"\n+        class TestForm(Form):\n+            hash_field = ReadOnlyPasswordHashField(label='Custom Label')\n \n-class AdminPasswordChangeFormTest(TestDataMixin, TestCase):\n+        bound_field = TestForm()['hash_field']\n+        self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+        self.assertEqual(bound_field.label_tag(), '<label>Custom Label:</label>')\n \n     @mock.patch('django.contrib.auth.password_validation.password_changed')\n     def test_success(self, password_changed):\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..65a7549 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,7 +658,30 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n-    def test_simple_migration(self):\n+    def test_serialize_missing_import_issue(self):\n+        \"\"\"\n+        Test for ensuring the migration writer includes necessary import statements \n+        for models and custom fields.\n+        \"\"\"\n+        # Mimicking the structure outlined in the issue description\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+\n+        # Simulate the serialization process\n+        serialized = MigrationWriter.serialize(MyModel)\n+        \n+        # Assert that the serialized result includes the necessary import statement for 'models'\n+        self.assertIn(\"'from django.db import models'\", serialized[0])\n         \"\"\"\n         Tests serializing a simple migration.\n         \"\"\"\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..d1fc87a 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -336,7 +336,15 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        self.assertEqual(\n+            formset.non_form_errors(),\n+            ErrorList(['Please submit at most 1 form.'], error_class='nonform')\n+        )\n+        # Verify the HTML rendering includes the 'nonform' class\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -358,7 +366,15 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        self.assertEqual(\n+            formset.non_form_errors(),\n+            ErrorList(['Please submit at least 3 forms.'], error_class='nonform')\n+        )\n+        # Verify the HTML rendering includes the 'nonform' class\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -982,7 +998,15 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        self.assertEqual(\n+            formset.non_form_errors(),\n+            ErrorList(['You may only specify a drink once.'], error_class='nonform')\n+        )\n+        # Verify the HTML rendering includes the 'nonform' class\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..6e7f09a 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -281,7 +281,60 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[:PAGINATOR_SIZE]],\n             'pagination': {'more': True},\n         })\n-        # The second page of results.\n+import json\n+import datetime\n+from django.urls import reverse, path\n+from django.http import JsonResponse\n+from django.test import TestCase, RequestFactory\n+from django.contrib.admin.sites import site\n+from django.contrib.auth.models import User\n+from admin_views.models import Question\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from django.core.exceptions import PermissionDenied\n+\n+class TestAutocompleteSerializeResult(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com'\n+        )\n+        self.url = reverse('admin:autocomplete')  # Adjust the URL name as necessary\n+        self.opts = {'model': 'admin_views.question', 'field_name': 'question'}\n+\n+    def test_serialize_result_with_custom_field(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(admin_site=site)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n+    def test_serialize_result_without_customization(self):\n+        Question.objects.create(question='Question 3', posted=datetime.date(2021, 8, 9))\n+        request = self.factory.get(self.url, {'term': 'Question 3', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonView.as_view(admin_site=site)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [{'id': '1', 'text': 'Question 3'}],\n+            'pagination': {'more': False},\n+        })\n         request = self.factory.get(self.url, {'term': '', 'page': '2', **self.opts})\n         request.user = self.superuser\n         with model_admin(Question, PKOrderingQuestionAdmin):\n",
  "django__django-14787": "",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..45676ff 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,32 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_model_choice_iterator_value_hashable(self):\n+        # Test that ModelChoiceIteratorValue is hashable\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        value_3 = ModelChoiceIteratorValue(self.c1.pk, None)\n+\n+        self.assertEqual(hash(value_1), hash(value_3))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_model_choice_iterator_value_equality(self):\n+        # Test equality operations for ModelChoiceIteratorValue\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        value_3 = ModelChoiceIteratorValue(self.c1.pk, None)\n+\n+        self.assertTrue(value_1 == value_3)\n+        self.assertFalse(value_1 == value_2)\n+\n+    def test_set_with_model_choice_iterator_value(self):\n+        # Test that ModelChoiceIteratorValue can be used in a set\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        test_set = {value_1, value_2}\n+\n+        self.assertIn(value_1, test_set)\n+        self.assertIn(value_2, test_set)\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..18d2092 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,37 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Ensure no queries are executed on forward operation\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Ensure no queries are executed on backward operation\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+        # Ensure the schema state remains unchanged\n+        self.assertEqual(\n+            project_state.apps.get_model(app_label, 'Rider')._meta.db_table,\n+            new_state.apps.get_model(app_label, 'Runner')._meta.db_table\n+        )\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15061": "",
  "django__django-15202": "",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..e17f193 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -197,7 +197,28 @@ class NonAggregateAnnotationTestCase(TestCase):\n         combined = int(test.pages + test.rating)\n         self.assertEqual(b.combined, combined)\n \n-    def test_empty_expression_annotation(self):\n+    @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n+    def test_expression_wrapper_with_negated_empty_q(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    @skipUnlessDBFeature('supports_boolean_expr_in_select_clause')\n+    def test_expression_wrapper_with_negated_empty_q_and_aggregation(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            rating_count=Count('rating'),\n+        )\n+        for book in books:\n+            self.assertEqual(book.rating_count, 1)\n+\n+    def test_expression_wrapper_negated_empty_q_aggregate(self):\n+        agg_result = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(agg_result['selected__sum'], Book.objects.count())\n         books = Book.objects.annotate(\n             selected=ExpressionWrapper(Q(pk__in=[]), output_field=BooleanField())\n         )\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..b753565 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,5 +1,7 @@\n+\n import json\n import random\n+from django.utils.safestring import SafeData, mark_safe\n \n from django.conf import settings\n from django.contrib.messages import constants\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..355cbf5 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -1,4 +1,5 @@\n from pathlib import Path\n+from pathlib import Path\n from unittest import mock\n \n from django.template import autoreload\n@@ -39,7 +40,23 @@ class TemplateReloadTests(SimpleTestCase):\n         self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n         mock_reset.assert_not_called()\n \n-    def test_watch_for_template_changes(self):\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_dev_server_restart_with_base_dir_in_dirs(self, mock_reset):\n+        # Simulate adding BASE_DIR to TEMPLATES[0]['DIRS']\n+        with override_settings(TEMPLATES=[{\n+            'DIRS': [str(ROOT)],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]):\n+            # Simulate saving a file in the project\n+            self.assertTrue(autoreload.template_changed(None, Path(__file__)))\n+            # The server should call reset_loaders to restart\n+            mock_reset.assert_called_once()\n+\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_dev_server_no_restart_without_template_change(self, mock_reset):\n+        # Ensure server does not restart if no template directories are affected\n+        self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n+        mock_reset.assert_not_called()\n         mock_reloader = mock.MagicMock()\n         autoreload.watch_for_template_changes(mock_reloader)\n         self.assertSequenceEqual(\n@@ -88,7 +105,23 @@ class TemplateReloadTests(SimpleTestCase):\n @require_jinja2\n @override_settings(INSTALLED_APPS=['template_tests'])\n class Jinja2TemplateReloadTests(SimpleTestCase):\n-    def test_watch_for_template_changes(self):\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_dev_server_restart_with_base_dir_in_dirs(self, mock_reset):\n+        # Simulate adding BASE_DIR to TEMPLATES[0]['DIRS']\n+        with override_settings(TEMPLATES=[{\n+            'DIRS': [str(ROOT)],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]):\n+            # Simulate saving a file in the project\n+            self.assertTrue(autoreload.template_changed(None, Path(__file__)))\n+            # The server should call reset_loaders to restart\n+            mock_reset.assert_called_once()\n+\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_dev_server_no_restart_without_template_change(self, mock_reset):\n+        # Ensure server does not restart if no template directories are affected\n+        self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n+        mock_reset.assert_not_called()\n         mock_reloader = mock.MagicMock()\n         autoreload.watch_for_template_changes(mock_reloader)\n         self.assertSequenceEqual(\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..4f3bfa3 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -183,8 +184,43 @@ class StaticHelperTest(StaticTests):\n         self.assertEqual(static(\"//example.org\"), [])\n \n \n+from datetime import datetime\n+\n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test that an empty string for the If-Modified-Since header does not raise an exception.\n+        \"\"\"\n+        try:\n+            # An empty header string, expecting it to return True (as if modified)\n+            self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+        except Exception as e:\n+            self.fail(f\"was_modified_since raised an exception with an empty string: {e}\")\n+\n+    def test_was_modified_since_invalid_string(self):\n+        \"\"\"\n+        Test that an invalid date string for the If-Modified-Since header is handled gracefully.\n+        \"\"\"\n+        try:\n+            self.assertTrue(was_modified_since(header=\"invalid date\", mtime=1))\n+        except Exception as e:\n+            self.fail(f\"was_modified_since raised an exception with an invalid date string: {e}\")\n+\n+    def test_was_modified_since_valid_string(self):\n+        \"\"\"\n+        Test that a valid date string for the If-Modified-Since header is processed correctly.\n+        \"\"\"\n+        mtime = 1609459200  # Corresponds to 2021-01-01 00:00:00 UTC\n+        header = http_date(mtime)\n+        self.assertFalse(was_modified_since(header=header, mtime=mtime))\n+\n+    def test_was_modified_since_future_date(self):\n+        \"\"\"\n+        Test that a future date string for the If-Modified-Since header returns False.\n+        \"\"\"\n+        future_mtime = 4102444800  # Corresponds to 2100-01-01 00:00:00 UTC\n+        header = http_date(future_mtime)\n+        self.assertFalse(was_modified_since(header=header, mtime=1609459200))  # mtime in the past\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..c70591c 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -411,6 +412,28 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n+    def test_help_output_format(self):\n+        \"\"\"Test the help output format for a command with a multiline help description.\"\"\"\n+        class CustomCommand(BaseCommand):\n+            help = '''\n+            Import a contract from tzkt.\n+            Example usage:\n+                ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+            '''\n+\n+        out = StringIO()\n+        management.call_command(CustomCommand(), stdout=out)\n+        expected_help = (\n+            \"usage: manage.py subcommand [-h] ...\\n\\n\"\n+            \"Import a contract from tzkt.\\n\"\n+            \"Example usage:\\n\"\n+            \"    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\\n\"\n+            \"\\n\"\n+            \"positional arguments:\\n\"\n+            \"  ...\\n\"\n+        )\n+        self.assertIn(expected_help, out.getvalue())\n+\n     def test_outputwrapper_flush(self):\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..dd31b5b 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,8 +1,10 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n+from django.core.serializers.json import DjangoJSONEncoder\n from django.utils.html import (\n     conditional_escape,\n     escape,\n@@ -216,6 +218,22 @@ class TestUtilsHtml(SimpleTestCase):\n             json_script({\"key\": \"value\"}),\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"custom\": \"output\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"custom\": \"output\"}</script>',\n+        )\n+\n+    def test_json_script_default_encoder(self):\n+        # This default test ensures that the original functionality is preserved.\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n \n     def test_smart_urlquote(self):\n         items = (\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..2ae7b2c 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -103,8 +103,54 @@ class CheckTemplateStringIfInvalidTest(SimpleTestCase):\n         with self.settings(TEMPLATES=TEMPLATES):\n             self.assertEqual(check_string_if_invalid_is_string(None), [self.error1])\n \n+from django.test import SimpleTestCase, override_settings\n+from django.core.checks import Error\n+from django.template import engines\n+from django.conf import settings\n+\n \n class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n+    def test_template_tags_with_duplicated_library_in_templates_options(self):\n+        # Setup: Add duplicated library names in TEMPLATES['OPTIONS']['libraries']\n+        with self.settings(\n+            TEMPLATES=[\n+                {\n+                    \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+                    \"OPTIONS\": {\n+                        \"libraries\": {\n+                            \"duplicate_tags\": \"someapp.templatetags.tags1\",\n+                            \"duplicate_tags\": \"someapp.templatetags.tags2\",\n+                        },\n+                    },\n+                }\n+            ]\n+        ):\n+            # Expected to trigger the error for duplicate template tag library names\n+            errors = check_for_template_tags_with_the_same_name(None)\n+            expected_error = Error(\n+                \"(templates.E003) 'duplicate_tags' is used for multiple template tag modules: \"\n+                \"'someapp.templatetags.tags1', 'someapp.templatetags.tags2'\",\n+                id=\"templates.E003\",\n+            )\n+            self.assertIn(expected_error, errors)\n+\n+    def test_no_template_tag_library_conflict(self):\n+        # Setup: Add non-conflicting library names\n+        with self.settings(\n+            TEMPLATES=[\n+                {\n+                    \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+                    \"OPTIONS\": {\n+                        \"libraries\": {\n+                            \"unique_tags1\": \"someapp.templatetags.tags1\",\n+                            \"unique_tags2\": \"someapp.templatetags.tags2\",\n+                        },\n+                    },\n+                }\n+            ]\n+        ):\n+            # Expected to have no errors\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n     @classmethod\n     def setUpClass(cls):\n         super().setUpClass()\n@@ -206,4 +252,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..ca4beb5 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,6 +398,19 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+    def test_select_related_only_on_proxy(self):\n+        # Setting up models to replicate the issue\n+        user = ProxyCustomModel.objects.create(name=\"Alice Proxy\")\n+        AnotherModel.objects.create(custom=user)\n+\n+        # This should not raise an error with the fix\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        \n+        # Attempt to fetch results, expecting no exceptions\n+        result = list(qs)\n+        self.assertEqual(len(result), 1)\n+        self.assertEqual(result[0].custom.name, \"Alice Proxy\")\n+\n \n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..fd8d9ab 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -154,7 +154,14 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n-            ([\"psql\", \"dbname\", \"--help\"], None),\n+            ([\"psql\", \"--help\", \"dbname\"], None),\n+        )\n+\n+    def test_additional_parameters_before_dbname(self):\n+        # Test the scenario where additional parameters are passed along with the dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT * FROM some_table;\"]),\n+            ([\"psql\", \"-c\", \"SELECT * FROM some_table;\", \"dbname\"], None),\n         )\n \n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n@@ -183,4 +190,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "",
  "django__django-16041": "",
  "django__django-16046": "",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..5af9500 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,9 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+import urllib.parse\n from django.utils.translation import gettext as _\n+from django.urls import reverse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -892,7 +895,25 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n-    def test_custom_form(self):\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n                 model = ExtensionUser\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..4d376c7 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -505,6 +505,16 @@ class HTTPSitemapTests(SitemapTestsBase):\n             \"</urlset>\"\n         )\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    def test_callable_lastmod_raises_valueerror_when_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n",
  "django__django-16379": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..f743a08 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -10,7 +11,8 @@ from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n from .models import Article, Question\n-from .tests import AdminViewBasicTestCase\n+from django.contrib.auth import get_permission_codename\n+from .tests import AdminViewBasicTestCase, get_perm\n \n \n class AdminTemplateTagsTest(AdminViewBasicTestCase):\n@@ -33,6 +35,43 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test that \"show_save_as_new\" requires add permission.\n+        \"\"\"\n+        # User with only change permission should not see \"save as new\".\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with both add and change permissions should see \"save as new\".\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_show_save_and_add_another(self):\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..63dd3d6 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -25,8 +26,13 @@ class JoinTests(SimpleTestCase):\n     def test_join04(self):\n         output = self.engine.render_to_string(\"join04\", {\"a\": [\"alpha\", \"beta & me\"]})\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n-\n-    # Joining with unsafe joiners doesn't result in unsafe strings.\n+    \n+    @setup({\"join_autoescape_off\": '{% autoescape off %}{{ a|join:var }}{% endautoescape %}'})\n+    def test_join_autoescape_off(self):\n+        a = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        var = \"<br/>\"\n+        output = self.engine.render_to_string(\"join_autoescape_off\", {\"a\": a, \"var\": var})\n+        self.assertEqual(output, \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\")\n     @setup({\"join05\": \"{{ a|join:var }}\"})\n     def test_join05(self):\n         output = self.engine.render_to_string(\n@@ -78,4 +84,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..4c3e162 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -597,18 +597,93 @@ class BulkCreateTests(TestCase):\n             ],\n         )\n \n+    @skipUnlessDBFeature('supports_update_conflicts', 'can_return_rows_from_bulk_insert')\n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        objs_to_insert = [\n+            UpsertConflict(number=1, rank=1, name=\"Alice\"),\n+            UpsertConflict(number=2, rank=2, name=\"Bob\"),\n+        ]\n+        UpsertConflict.objects.bulk_create(objs_to_insert)\n+        self.assertEqual(UpsertConflict.objects.count(), 2)\n+\n+        conflicting_objects = [\n+            UpsertConflict(number=1, rank=3, name=\"Charlie\"),\n+            UpsertConflict(number=2, rank=4, name=\"David\"),\n+        ]\n+\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"number\"],\n+            update_fields=[\"rank\", \"name\"],\n+        )\n+\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n     def test_update_conflicts_two_fields_unique_fields_first(self):\n         self._test_update_conflicts_two_fields([\"f1\"])\n \n+    @skipUnlessDBFeature('supports_update_conflicts', 'can_return_rows_from_bulk_insert')\n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        objs_to_insert = [\n+            UpsertConflict(number=1, rank=1, name=\"Alice\"),\n+            UpsertConflict(number=2, rank=2, name=\"Bob\"),\n+        ]\n+        UpsertConflict.objects.bulk_create(objs_to_insert)\n+        self.assertEqual(UpsertConflict.objects.count(), 2)\n+\n+        conflicting_objects = [\n+            UpsertConflict(number=1, rank=3, name=\"Charlie\"),\n+            UpsertConflict(number=2, rank=4, name=\"David\"),\n+        ]\n+\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"number\"],\n+            update_fields=[\"rank\", \"name\"],\n+        )\n+\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n     def test_update_conflicts_two_fields_unique_fields_second(self):\n         self._test_update_conflicts_two_fields([\"f2\"])\n \n+    @skipUnlessDBFeature('supports_update_conflicts', 'can_return_rows_from_bulk_insert')\n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        objs_to_insert = [\n+            UpsertConflict(number=1, rank=1, name=\"Alice\"),\n+            UpsertConflict(number=2, rank=2, name=\"Bob\"),\n+        ]\n+        UpsertConflict.objects.bulk_create(objs_to_insert)\n+        self.assertEqual(UpsertConflict.objects.count(), 2)\n+\n+        conflicting_objects = [\n+            UpsertConflict(number=1, rank=3, name=\"Charlie\"),\n+            UpsertConflict(number=2, rank=4, name=\"David\"),\n+        ]\n+\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"number\"],\n+            update_fields=[\"rank\", \"name\"],\n+        )\n+\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n@@ -642,6 +717,31 @@ class BulkCreateTests(TestCase):\n             ],\n         )\n \n+    @skipUnlessDBFeature('supports_update_conflicts', 'can_return_rows_from_bulk_insert')\n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        objs_to_insert = [\n+            UpsertConflict(number=1, rank=1, name=\"Alice\"),\n+            UpsertConflict(number=2, rank=2, name=\"Bob\"),\n+        ]\n+        UpsertConflict.objects.bulk_create(objs_to_insert)\n+        self.assertEqual(UpsertConflict.objects.count(), 2)\n+\n+        conflicting_objects = [\n+            UpsertConflict(number=1, rank=3, name=\"Charlie\"),\n+            UpsertConflict(number=2, rank=4, name=\"David\"),\n+        ]\n+\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"number\"],\n+            update_fields=[\"rank\", \"name\"],\n+        )\n+\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n@@ -710,12 +810,62 @@ class BulkCreateTests(TestCase):\n             ],\n         )\n \n+    @skipUnlessDBFeature('supports_update_conflicts', 'can_return_rows_from_bulk_insert')\n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        objs_to_insert = [\n+            UpsertConflict(number=1, rank=1, name=\"Alice\"),\n+            UpsertConflict(number=2, rank=2, name=\"Bob\"),\n+        ]\n+        UpsertConflict.objects.bulk_create(objs_to_insert)\n+        self.assertEqual(UpsertConflict.objects.count(), 2)\n+\n+        conflicting_objects = [\n+            UpsertConflict(number=1, rank=3, name=\"Charlie\"),\n+            UpsertConflict(number=2, rank=4, name=\"David\"),\n+        ]\n+\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"number\"],\n+            update_fields=[\"rank\", \"name\"],\n+        )\n+\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n     def test_update_conflicts_unique_two_fields_unique_fields_both(self):\n         self._test_update_conflicts_unique_two_fields([\"iso_two_letter\", \"name\"])\n \n+    @skipUnlessDBFeature('supports_update_conflicts', 'can_return_rows_from_bulk_insert')\n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        objs_to_insert = [\n+            UpsertConflict(number=1, rank=1, name=\"Alice\"),\n+            UpsertConflict(number=2, rank=2, name=\"Bob\"),\n+        ]\n+        UpsertConflict.objects.bulk_create(objs_to_insert)\n+        self.assertEqual(UpsertConflict.objects.count(), 2)\n+\n+        conflicting_objects = [\n+            UpsertConflict(number=1, rank=3, name=\"Charlie\"),\n+            UpsertConflict(number=2, rank=4, name=\"David\"),\n+        ]\n+\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"number\"],\n+            update_fields=[\"rank\", \"name\"],\n+        )\n+\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n@@ -776,6 +926,31 @@ class BulkCreateTests(TestCase):\n             ],\n         )\n \n+    @skipUnlessDBFeature('supports_update_conflicts', 'can_return_rows_from_bulk_insert')\n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        objs_to_insert = [\n+            UpsertConflict(number=1, rank=1, name=\"Alice\"),\n+            UpsertConflict(number=2, rank=2, name=\"Bob\"),\n+        ]\n+        UpsertConflict.objects.bulk_create(objs_to_insert)\n+        self.assertEqual(UpsertConflict.objects.count(), 2)\n+\n+        conflicting_objects = [\n+            UpsertConflict(number=1, rank=3, name=\"Charlie\"),\n+            UpsertConflict(number=2, rank=4, name=\"David\"),\n+        ]\n+\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"number\"],\n+            update_fields=[\"rank\", \"name\"],\n+        )\n+\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n@@ -787,6 +962,31 @@ class BulkCreateTests(TestCase):\n     def test_update_conflicts_no_unique_fields(self):\n         self._test_update_conflicts([])\n \n+    @skipUnlessDBFeature('supports_update_conflicts', 'can_return_rows_from_bulk_insert')\n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        objs_to_insert = [\n+            UpsertConflict(number=1, rank=1, name=\"Alice\"),\n+            UpsertConflict(number=2, rank=2, name=\"Bob\"),\n+        ]\n+        UpsertConflict.objects.bulk_create(objs_to_insert)\n+        self.assertEqual(UpsertConflict.objects.count(), 2)\n+\n+        conflicting_objects = [\n+            UpsertConflict(number=1, rank=3, name=\"Charlie\"),\n+            UpsertConflict(number=2, rank=4, name=\"David\"),\n+        ]\n+\n+        results = UpsertConflict.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"number\"],\n+            update_fields=[\"rank\", \"name\"],\n+        )\n+\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n@@ -816,4 +1016,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..e09e62e 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -211,6 +211,15 @@ class WriterTests(SimpleTestCase):\n         X = \"X\", \"X value\"\n         Y = \"Y\", \"Y value\"\n \n+    class Profile(models.Model):\n+        class Capability(models.TextChoices):\n+            BASIC = (\"BASIC\", \"Basic\")\n+            PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+            @classmethod\n+            def default(cls):\n+                return [cls.BASIC]\n+\n     def safe_exec(self, string, value=None):\n         d = {}\n         try:\n@@ -274,7 +283,14 @@ class WriterTests(SimpleTestCase):\n         string, imports = MigrationWriter.serialize(\"foobar\")\n         self.assertEqual(string, \"'foobar'\")\n \n-    def test_serialize_multiline_strings(self):\n+    def test_serialize_capability_default_method(self):\n+        self.assertSerializedResultEqual(\n+            self.Profile.Capability.default,\n+            (\n+                \"migrations.test_writer.WriterTests.Profile.Capability.default\",\n+                {\"import migrations.test_writer\"},\n+            ),\n+        )\n         self.assertSerializedEqual(b\"foo\\nbar\")\n         string, imports = MigrationWriter.serialize(b\"foo\\nbar\")\n         self.assertEqual(string, \"b'foo\\\\nbar'\")\n@@ -1032,4 +1048,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "matplotlib__matplotlib-22711": "",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..cbceea3 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -8,6 +8,8 @@ import matplotlib as mpl\n from matplotlib.backend_bases import MouseButton\n from matplotlib import cm\n from matplotlib import colors as mcolors\n+import functools\n+\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n@@ -28,7 +30,21 @@ def test_aspect_equal_error():\n         ax.set_aspect('equal')\n \n \n-@mpl3d_image_comparison(['bar3d.png'])\n+@check_figures_equal(extensions=[\"png\"])\n+def test_invisible_3d_axes(fig_test, fig_ref):\n+    ax = fig_test.add_subplot(projection='3d')\n+    ax.set_visible(False)\n+    \n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    ax_ref.set_visible(False)\n+\n+    # Add some data\n+    ax.scatter(1, 1, 1)\n+    ax_ref.scatter(1, 1, 1)\n+\n+    # Ensure the 3D axes is not visible\n+    assert not ax.get_visible()\n+    assert not ax_ref.get_visible()\n def test_bar3d():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex a51a857..cec500f 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -1785,9 +1785,43 @@ def test_text_3d(fig_test, fig_ref):\n     ax.add_artist(t3d)\n     assert t3d.get_position_3d() == (0.5, 0.5, 1)\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n \n-@check_figures_equal(extensions=[\"png\"])\n-def test_pathpatch_3d(fig_test, fig_ref):\n+def test_line3d_with_int_and_array():\n+    # Initialize variables with array and then switch to int\n+    x_s_0 = np.array([0, 1])\n+    x_e_0 = np.array([1, 2])\n+    y_s_0 = np.array([0, 1])\n+    y_e_0 = np.array([1, 2])\n+    z_s_0 = np.array([0, 1])\n+    z_e_0 = np.array([1, 2])\n+\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    \n+    # Plotting with arrays\n+    for n in range(np.size(z_s_0, axis=0)):\n+        ax.plot([int(x_s_0[n]), int(x_e_0[n])],\n+                [int(y_s_0[n]), int(y_e_0[n])],\n+                [int(z_s_0[n]), int(z_e_0[n])], 'r-')\n+    \n+    # Check if the lines have _verts3d attribute\n+    for line in ax.lines:\n+        assert hasattr(line, '_verts3d'), \"Line3D object should have '_verts3d' attribute\"\n+\n+    # Now switch to integers\n+    x_s_0, x_e_0 = 0, 1\n+    y_s_0, y_e_0 = 0, 1\n+    z_s_0, z_e_0 = 0, 1\n+\n+    ax.plot([x_s_0, x_e_0],\n+            [y_s_0, y_e_0],\n+            [z_s_0, z_e_0], 'r-')\n+\n+    # Check the new line for _verts3d attribute\n+    for line in ax.lines:\n+        assert hasattr(line, '_verts3d'), \"Line3D object should maintain '_verts3d' attribute\"\n     ax = fig_ref.add_subplot(projection=\"3d\")\n     path = Path.unit_rectangle()\n     patch = PathPatch(path)\n",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..9385ea0 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -773,6 +773,15 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n     for text, color in zip(leg.get_texts(), ['r', 'g', 'b']):\n         assert mpl.colors.same_color(text.get_color(), color)\n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='shabnams')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n \n def test_get_set_draggable():\n     legend = plt.legend()\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..5822ea5 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -249,6 +249,51 @@ def test_linedash():\n     fig, ax = plt.subplots()\n \n     ax.plot([0, 1], linestyle=\"--\")\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format=\"ps\")\n+    assert buf.tell() > 0\n+\n+\n+def test_empty_line():\n+    # Test for a multi-line text label with an empty line in the PostScript backend.\n+    fig = Figure()\n+    fig.text(0.5, 0.5, \"\\nfoo\\n\\n\")\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    buf.seek(0)\n+    assert buf.tell() > 0  # Ensure something was written.\n+\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='ps')\n+    buf.seek(0)\n+    assert buf.tell() > 0  # Ensure something was written.\n+\n+\n+def test_empty_line_in_annotate():\n+    # Test for an annotation with an empty line in the PostScript backend.\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.annotate(text='\\nLower label', xy=(0, 0))\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    buf.seek(0)\n+    assert buf.tell() > 0  # Ensure something was written.\n+\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='ps')\n+    buf.seek(0)\n+    assert buf.tell() > 0  # Ensure something was written.\n+\n+\n+def test_empty_line_in_title():\n+    # Test for a title with an empty line in the PostScript backend.\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.set_title('\\nLower title')\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    buf.seek(0)\n+    assert buf.tell() > 0  # Ensure something was written.\n \n     buf = io.BytesIO()\n     fig.savefig(buf, format=\"ps\")\n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..1c3d4c8 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,27 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+import pytest\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import warnings\n+\n+@pytest.mark.parametrize('constrained_layout', [True, False])\n+def test_constrained_layout_warning(constrained_layout):\n+    a = np.linspace(0, 2*np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=constrained_layout)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+    \n+    with warnings.catch_warnings(record=True) as w:\n+        plt.subplots_adjust(wspace=0)\n+        if not constrained_layout:\n+            # When constrained_layout=False, no warning should be issued\n+            assert len(w) == 0\n+        else:\n+            # If constrained_layout=True, a warning may be expected\n+            pass\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..ab73e5c 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -17,7 +18,29 @@ import matplotlib.figure as mfigure\n from mpl_toolkits.axes_grid1 import parasite_axes\n \n \n-def test_simple():\n+def test_pickle_figure_with_draggable_legend():\n+    import pickletools\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+\n+    ax.plot(time, speed, label=\"speed\")\n+\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    # Serialize the figure using pickle\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure no reference to FigureCanvasAgg in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Deserialize and ensure it loads without errors\n+    loaded_fig = pickle.loads(pkl)\n+    loaded_fig.canvas.draw()\n+    plt.close(loaded_fig)\n     fig = plt.figure()\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..e5f4380 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -90,7 +90,34 @@ def _generate_complete_test_figure(fig_ref):\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n \n-@mpl.style.context(\"default\")\n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n+import numpy as np\n+\n+def test_pickle_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    \n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        # Reload the figure from pickle to ensure it serialized and deserialized successfully\n+        fig_loaded = pickle.loads(pickle_data)\n+        assert fig_loaded is not None\n+    except Exception as e:\n+        assert False, f\"Pickling failed with exception: {e}\"\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..72546c0 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -8,9 +9,30 @@ from numpy.testing import assert_array_equal, assert_array_almost_equal\n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n \n+from pandas.testing import assert_frame_equal\n \n class TestPolyFit:\n \n+    def test_polyfit_with_missing_data(self):\n+        # Create a dataset with missing values\n+        data = pd.DataFrame({\n+            \"x\": [1, 2, 3, None, 4, 5],\n+            \"y\": [1, 2, 3, 4, 5, 6],\n+            \"group\": [1, 1, 1, 1, 1, 1]  # Single group for simplicity\n+        })\n+\n+        # GroupBy object based on 'group' column\n+        groupby = GroupBy([\"group\"])\n+\n+        # Run PolyFit on data with missing values\n+        result_with_missing = PolyFit()(data[[\"x\", \"y\"]], groupby, \"x\", {})\n+\n+        # Run PolyFit on data with missing values removed\n+        result_without_missing = PolyFit()(data[[\"x\", \"y\"]].dropna(), groupby, \"x\", {})\n+\n+        # Assert that both results are equal\n+        assert_frame_equal(result_with_missing, result_without_missing)\n+\n     @pytest.fixture\n     def df(self, rng):\n \n",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..fee357b 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -96,6 +96,32 @@ class TestContinuous:\n         s = Continuous()._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n+    def test_interval_with_bools(self):\n+\n+        import pandas as pd\n+        from seaborn._core.scales import Continuous\n+        from seaborn._core.properties import IntervalProperty\n+        from numpy.testing import assert_array_equal\n+\n+        x = pd.Series([True, False, False])\n+        s = Continuous()._setup(x, IntervalProperty())\n+        assert_array_equal(s(x), [1, 0, 0])\n+\n+    def test_color_mapping_with_bools(self):\n+\n+        import pandas as pd\n+        from seaborn._core.scales import Continuous\n+        from seaborn._core.properties import Color\n+        from seaborn import color_palette\n+        from numpy.testing import assert_array_equal\n+\n+        # Test color mapping directly\n+        x = pd.Series([True, False])\n+        cmap = color_palette(\"ch:\", as_cmap=True)\n+        s = Continuous()._setup(x, Color())\n+        expected_colors = cmap([1, 0])[:, :3]  # Convert to RGB\n+        assert_array_equal(s(x), expected_colors)\n+\n     def test_color_named_values(self, x):\n \n         cmap = color_palette(\"viridis\", as_cmap=True)\n",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..0b0c711 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -707,8 +707,51 @@ class TestFacetGrid:\n                     assert mpl.colors.same_color(tick.tick2line.get_color(), color)\n                     assert tick.get_pad() == pad\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pandas as pd\n+import pytest\n+import seaborn as sns\n+from seaborn import axisgrid as ag\n+from seaborn._testing import assert_plots_equal\n+from seaborn.utils import assert_colors_equal\n+from matplotlib.testing.decorators import image_comparison\n+from seaborn.palettes import color_palette\n+from seaborn.utils import get_legend_handles\n+from matplotlib.collections import PathCollection\n+from matplotlib.colors import to_rgba_array\n+from seaborn.relational import scatterplot\n+from seaborn.distributions import histplot, kdeplot\n+import matplotlib as mpl\n+import numpy.testing as npt\n+from numpy.testing import assert_array_equal\n \n class TestPairGrid:\n+    def test_pairplot_column_multiindex(self):\n+        # Using MultiIndex for columns\n+        cols = pd.MultiIndex.from_arrays([[\"x\", \"y\"], [1, 2]])\n+        df = pd.DataFrame(np.random.randn(100, 2), columns=cols)\n+        g = ag.pairplot(df)\n+        assert g.diag_vars == list(cols)\n+\n+    def test_pairplot_multiindex_with_hue(self):\n+        # MultiIndex with hue parameter\n+        np.random.seed(0)\n+        cols = pd.MultiIndex.from_arrays([[\"A\", \"B\"], [\"1\", \"2\"]])\n+        df = pd.DataFrame(np.random.rand(100, 2), columns=cols)\n+        df[\"hue\"] = [\"group1\" if x < 0.5 else \"group2\" for x in np.random.rand(100)]\n+        g = sns.pairplot(df, hue=\"hue\")\n+        assert g.diag_vars == list(cols)\n+        assert g.hue_names == [\"group1\", \"group2\"]\n+\n+    def test_pairplot_flattened_multiindex(self):\n+        # Handling flattened MultiIndex columns\n+        np.random.seed(0)\n+        cols = pd.MultiIndex.from_product([[\"A\", \"B\", \"C\"], [\"1\", \"2\"]])\n+        df = pd.DataFrame(np.random.rand(100, 6), columns=cols)\n+        df.columns = ['_'.join(col).strip() for col in df.columns.values]\n+        g = sns.pairplot(df)\n+        assert len(g.diag_vars) == 6\n \n     rs = np.random.RandomState(sum(map(ord, \"PairGrid\")))\n     df = pd.DataFrame(dict(x=rs.normal(size=60),\n",
  "pallets__flask-4992": "",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..1a89491 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,6 +980,25 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n+    def test_response_iter_content_unicode_with_encoding(self):\n+        \"\"\"Test iter_content with decode_unicode=True when encoding is set.\"\"\"\n+        r = requests.Response()\n+        r._content_consumed = True\n+        r._content = b'the content'\n+        r.encoding = 'utf-8'  # Setting encoding\n+\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"Expected all chunks to be str\"\n+\n+    def test_response_iter_content_unicode_without_encoding(self):\n+        \"\"\"Test iter_content with decode_unicode=True when encoding is not set (None).\"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = None  # No encoding\n+\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"Expected all chunks to be str even when encoding is None\"\n+\n     def test_response_chunk_size_int(self):\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..106d819 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -731,18 +731,76 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             })\n \n             return args\n-\n-        for service in SERVICES:\n-            url = service('headers')\n-\n-            response = get(url=url,\n-                hooks={\n-                    'args': [add_foo_header, add_bar_header]\n-                }\n-            )\n-\n-            assert 'foo' in response.text\n-            assert 'bar' in response.text\n+import pytest\n+from requests.models import Request\n+\n+def add_foo_header(args):\n+    if not args.get('headers'):\n+        args['headers'] = {}\n+    args['headers'].update({\n+        'X-Foo': 'foo'\n+    })\n+    return args\n+\n+def add_bar_header(args):\n+    if not args.get('headers'):\n+        args['headers'] = {}\n+    args['headers'].update({\n+        'X-Bar': 'bar'\n+    })\n+    return args\n+\n+def test_allow_list_of_hooks_to_register_hook():\n+    \"\"\"Issue 785: Allow lists in the dict values of the hooks argument\"\"\"\n+    \n+    def assert_hooks_are_callable(hooks):\n+        for h in hooks['args']:\n+            assert callable(h) is True\n+\n+    hooks = [add_foo_header, add_bar_header]\n+    r = Request()\n+    r.register_hook('args', hooks)\n+    assert_hooks_are_callable(r.hooks)\n+\n+    r = Request(hooks={'args': hooks})\n+    assert_hooks_are_callable(r.hooks)\n+\n+def test_multiple_hooks_execution():\n+    \"\"\"Test that all hooks in the list are executed correctly\"\"\"\n+    call_order = []\n+\n+    def first_hook(args):\n+        call_order.append('first')\n+        return args\n+\n+    def second_hook(args):\n+        call_order.append('second')\n+        return args\n+    \n+    hooks = [first_hook, second_hook]\n+    r = Request(hooks={'args': hooks})\n+\n+    # Simulate calling hooks\n+    for hook in r.hooks['args']:\n+        hook({})\n+    \n+    assert call_order == ['first', 'second']\n+\n+def test_hooks_with_empty_list():\n+    \"\"\"Test that providing an empty list of hooks does not cause issues\"\"\"\n+    r = Request(hooks={'args': []})\n+    assert r.hooks['args'] == []\n+\n+def test_hooks_with_mixed_callables():\n+    \"\"\"Test hooks with a mix of callable and non-callable objects\"\"\"\n+    def valid_hook(args):\n+        return args\n+\n+    # This should raise an error because str is not callable\n+    with pytest.raises(AssertionError):\n+        r = Request(hooks={'args': [valid_hook, \"not_a_callable\"]})\n+        for hook in r.hooks['args']:\n+            assert callable(hook)\n \n     def test_session_persistent_cookies(self):\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..9f38b77 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -89,7 +89,17 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n-    def test_issue_2321_should_not_trigger(self) -> None:\n+    @set_config(notes=[\"???\", \"YES\"])\n+    def test_punctuation_codetags(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                #YES: This should trigger\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17),\n+            MessageTest(msg_id=\"fixme\", line=3, args=\"YES: This should trigger\", col_offset=17),\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n         code = 'print(\"# TODO this should not trigger a fixme\")'\n         with self.assertNoMessages():\n             self.checker.process_tokens(_tokenize_str(code))\n@@ -119,4 +129,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..4ad97e0 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -56,6 +56,11 @@ reports = \"yes\"\n     check_configuration_file_reader(runner)\n \n \n+import pytest\n+from pylint.lint import Run\n+from pylint.config.exceptions import _UnrecognizedOptionError\n+from _pytest.capture import CaptureFixture\n+\n def test_unknown_message_id(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown id.\"\"\"\n     Run([str(EMPTY_MODULE), \"--disable=12345\"], exit=False)\n",
  "pylint-dev__pylint-7080": "",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..a97690d 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,6 +934,24 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n+def test_linting_with_identically_named_module_and_submodule(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test that pylint handles a module with an identically named submodule.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    assert not linter.stats.by_msg\n+\n+def test_linting_with_module_imports_submodule(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test that pylint handles imports from a submodule correctly.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+        linter.check([\"r\", \"a\"])\n+    assert not linter.stats.by_msg\n+\n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n@@ -941,4 +959,22 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+def test_linting_with_identically_named_module_and_submodule(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test that pylint handles a module with an identically named submodule.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    assert not linter.stats.by_msg\n+\n+def test_linting_with_module_imports_submodule(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test that pylint handles imports from a submodule correctly.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+        linter.check([\"r\", \"a\"])\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..4fcd191 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -112,6 +113,23 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[1] == \"my_mod:1::()\"\n     assert out_lines[2] == \"my_mod:2::()\"\n \n+def test_custom_braces_in_msg_template(linter: PyLinter) -> None:\n+    \"\"\"Test handling of custom braces in message template.\"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+\n+    linter.open()\n+    linter.set_current_module(\"test_module\")\n+\n+    # Add some messages to test\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\"E1101\", line=2, args=(3, 4))\n+\n+    # Validate output\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"error\" }'\n \n def test_deprecation_set_output(recwarn):\n     \"\"\"TODO remove in 3.0.\"\"\"\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..d5444ca 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -298,6 +298,34 @@ class TestImportPath:\n         assert \"_src\" in sys.modules\n         assert \"_src.tests\" in sys.modules\n \n+    @pytest.fixture\n+    def additional_module(self, tmp_path: Path) -> Path:\n+        fn = tmp_path / \"_src/tests/anothermod.py\"\n+        fn.parent.mkdir(parents=True, exist_ok=True)\n+        fn.write_text(\"def bar(x): return 50 + x\", encoding=\"utf-8\")\n+        return fn\n+\n+    def test_prevent_double_import(self, simple_module: Path, additional_module: Path, tmp_path: Path) -> None:\n+        \"\"\"Test to ensure modules are not imported twice in importlib mode.\"\"\"\n+        module1 = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        module2 = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        assert module1 is module2, \"The module should not be imported twice\"\n+\n+        another_module1 = import_path(additional_module, mode=\"importlib\", root=tmp_path)\n+        another_module2 = import_path(additional_module, mode=\"importlib\", root=tmp_path)\n+        assert another_module1 is another_module2, \"The module should not be imported twice\"\n+\n+        assert module1.foo(2) == 42  # type: ignore[attr-defined]\n+        assert another_module1.bar(2) == 52  # type: ignore[attr-defined]\n+        \"\"\"`importlib` mode does not change sys.path.\"\"\"\n+        module = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        assert module.foo(2) == 42  # type: ignore[attr-defined]\n+        assert str(simple_module.parent) not in sys.path\n+        assert module.__name__ in sys.modules\n+        assert module.__name__ == \"_src.tests.mymod\"\n+        assert \"_src\" in sys.modules\n+        assert \"_src.tests\" in sys.modules\n+\n     def test_importmode_twice_is_different_module(\n         self, simple_module: Path, tmp_path: Path\n     ) -> None:\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..fdea6b6 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import py.io\n@@ -5,6 +6,35 @@ import py.io\n from _pytest.logging import ColoredLevelFormatter\n \n \n+\n+def test_coloredlogformatter_with_module_name():\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+\n+    record = logging.LogRecord(\n+        name=\"dummy_module\",\n+        level=logging.DEBUG,\n+        pathname=\"dummy_path.py\",\n+        lineno=123,\n+        msg=\"Debugging message\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    class ColorConfig(object):\n+        class option(object):\n+            pass\n+\n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = True\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == \"DEBUG    dummy_module:dummy_path.py:123 \\x1b[32mDebugging message\\x1b[0m\"\n+\n+    tw.hasmarkup = False\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == \"DEBUG    dummy_module:dummy_path.py:123 Debugging message\"\n+\n def test_coloredlogformatter():\n     logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n \n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..286e6b9 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -383,6 +383,27 @@ class TestAssert_reprcompare:\n         assert expl[-1] == \"Use -v to get the full diff\"\n         expl = \"\\n\".join(callequal(left, right, verbose=True))\n         assert expl.endswith(textwrap.dedent(expected).strip())\n+    def test_bytes_diff_empty_vs_nonempty(self):\n+        \"\"\"Test the diff assertion for an empty byte string against a non-empty one.\"\"\"\n+        diff = callequal(b\"\", b\"42\", verbose=True)\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+        ]\n+\n+    def test_bytes_diff_single_byte(self):\n+        \"\"\"Test the diff assertion for an empty byte string against a single byte.\"\"\"\n+        diff = callequal(b\"\", b\"1\", verbose=True)\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+        ]\n \n     def test_list_different_lengths(self):\n         expl = callequal([0, 1], [0, 1, 2])\n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..7d17858 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,3 +1,4 @@\n+\n import os\n from xml.dom import minidom\n \n@@ -139,7 +140,29 @@ class TestPython:\n         node = dom.find_first_by_tag(\"testsuite\")\n         node.assert_attr(name=\"pytest\", errors=1, failures=2, skipped=1, tests=5)\n \n-    def test_timing_function(self, testdir):\n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n         testdir.makepyfile(\n             \"\"\"\n             import time, pytest\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..b4cec03 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,44 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ (#7145)\n+    \"\"\"\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+def test_broken_repr_and_getattribute():\n+    \"\"\"Test an object with broken __getattribute__ and __repr__ \n+    together to ensure saferepr handles it.\"\"\"\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+        \n+        def __repr__(self):\n+            raise RuntimeError\n+      \n+    instance = SomeClass()\n+    assert saferepr(instance).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+def test_normal_behavior():\n+    \"\"\"Test saferepr with a normally functioning object.\"\"\"\n+    class NormalClass:\n+        def __repr__(self):\n+            return \"NormalClass()\"\n+\n+    instance = NormalClass()\n+    assert saferepr(instance) == \"NormalClass()\"\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +191,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..0909722 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -70,6 +70,32 @@ def test_make_hook_recorder(testdir) -> None:\n     recorder.hook.pytest_runtest_logreport(report=rep3)\n     pytest.raises(ValueError, recorder.getfailures)\n \n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct (#6428).\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+        \n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n+\n \n def test_parseconfig(testdir) -> None:\n     config1 = testdir.parseconfig()\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..4e674a9 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -41,8 +41,35 @@ class TestMark:\n         with pytest.raises(AttributeError):\n             mark._some_name\n \n+def test_reevaluate_dynamic_expr(testdir):\n+    \"\"\"Test to ensure skipif condition evaluation is not cached across modules.\"\"\"\n+    py_file1 = testdir.makepyfile(\n+        test_reevaluate_dynamic_expr1=\"\"\"\n+        import pytest\n+\n+        skip = True\n+\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_skip():\n+            assert False\n+    \"\"\"\n+    )\n+    py_file2 = testdir.makepyfile(\n+        test_reevaluate_dynamic_expr2=\"\"\"\n+        import pytest\n+\n+        skip = False\n+\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_not_skip():\n+            assert True\n+    \"\"\"\n+    )\n \n-def test_marked_class_run_twice(testdir):\n+    file_name1 = os.path.basename(py_file1.strpath)\n+    file_name2 = os.path.basename(py_file2.strpath)\n+    reprec = testdir.inline_run(file_name1, file_name2)\n+    reprec.assertoutcome(passed=1, skipped=1)\n     \"\"\"Test fails file is run twice that contains marked class.\n     See issue#683.\n     \"\"\"\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..ae1e18a 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -386,6 +386,31 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*NOTRUN*\"])\n \n+    @pytest.mark.parametrize(\n+        \"test_input, expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_xfail_run_with_skip_mark(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n     def test_dynamic_xfail_set_during_funcarg_setup(self, testdir):\n         p = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..d4ad7a9 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -203,7 +204,30 @@ class TestXFail:\n         callreport = reports[1]\n         assert callreport.wasxfail\n \n-    def test_xfail_xpassed_strict(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue described dynamic xfail behavior.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue described dynamic xfail behavior with strict.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         item = testdir.getitem(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..5e6f0bf 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -9,6 +10,9 @@ from typing import List\n import attr\n \n import pytest\n+from _pytest.monkeypatch import MonkeyPatch\n+from _pytest.tmpdir import TempPathFactory\n+from pathlib import Path\n from _pytest import pathlib\n from _pytest.config import Config\n from _pytest.pathlib import cleanup_numbered_dir\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..7abba9b 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,8 +573,37 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+import numpy as np\n+from numpy.testing import assert_array_equal\n+from sklearn.linear_model import RidgeClassifierCV\n+\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-0.8, -1.0], [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    y_multi = np.array([[1, 1, 1, -1, -1],\n+                        [1, -1, 1, -1, 1],\n+                        [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y_multi.shape[1]\n+    r.fit(x, y_multi)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n \n-def test_ridgecv_store_cv_values():\n+    # Check that alpha_ is set correctly after fit\n+    assert r.alpha_ in alphas\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..e6f0791 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -12,6 +12,8 @@ from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n from sklearn.mixture.bayesian_mixture import _log_wishart_norm\n \n from sklearn.mixture import BayesianGaussianMixture\n+from sklearn.utils.testing import assert_greater, assert_raise_message\n+from sklearn.exceptions import NotFittedError\n \n from sklearn.mixture.tests.test_gaussian_mixture import RandomData\n from sklearn.exceptions import ConvergenceWarning\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..816f578 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,6 +260,51 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n+import pytest\n+import numpy as np\n+from sklearn.preprocessing import OneHotEncoder\n+from numpy.testing import assert_array_equal\n+\n+\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+\n+\n+def test_one_hot_encoder_unknown_longer_than_known():\n+    X = np.array(['a', 'b', 'c']).reshape((-1, 1))\n+    X_unknown = np.array(['abcdefg', 'hijkl']).reshape((-1, 1))\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X_transformed = oh.transform(X_unknown).toarray()\n+    # Expecting a matrix of zeros because all categories are unknown\n+    expected = np.zeros((2, 3))\n+    assert_array_equal(X_transformed, expected)\n+\n+\n+def test_one_hot_encoder_mixed_length_strings():\n+    X = np.array(['short', 'muchlongerstring', 'medium']).reshape((-1, 1))\n+    X2 = np.array(['tiny', 'muchlongerstring']).reshape((-1, 1))\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_transformed = oh.transform(X2).toarray()\n+    # Only 'muchlongerstring' is known, the rest should be all zeros\n+    expected = np.array([[0., 0., 0.], [0., 1., 0.]])\n+    assert_array_equal(X2_transformed, expected)\n+\n+\n def test_one_hot_encoder_no_categorical_features():\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n",
  "scikit-learn__scikit-learn-13142": "",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..dc4febf 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -70,8 +71,17 @@ def test_kernel_pca_consistent_transform():\n     transformed2 = kpca.transform(X_copy)\n     assert_array_almost_equal(transformed1, transformed2)\n \n-\n-def test_kernel_pca_sparse():\n+def test_kernel_pca_sign_consistency():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+    kpca = KernelPCA(n_components=7, kernel='rbf', random_state=0)\n+    \n+    transformed_1 = kpca.fit_transform(X)\n+    transformed_2 = kpca.fit_transform(X)\n+\n+    # Check if the signs of the components of the transformed datasets are consistent\n+    for i in range(transformed_1.shape[1]):\n+        assert_allclose(np.abs(transformed_1[:, i]), np.abs(transformed_2[:, i]), rtol=1e-5)\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 4594f40..efe8db2 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -219,6 +219,11 @@ class Pipeline(_BaseComposition):\n             return self.named_steps[ind]\n         return est\n \n+    @property\n+    def __len__(self):\n+        \"\"\"Return the number of steps in the pipeline.\"\"\"\n+        return len(self.steps)\n+\n     @property\n     def _estimator_type(self):\n         return self.steps[-1][1]._estimator_type\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..b171aa4 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -10,7 +11,8 @@ import pytest\n \n import numpy as np\n \n-from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils import check_random_state\n+from sklearn.ensemble import IsolationForest\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n@@ -297,6 +299,38 @@ def test_score_samples():\n \n @pytest.mark.filterwarnings('ignore:default contamination')\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_iforest_warm_start():\n+    \"\"\"Test iterative addition of iTrees to an iForest using warm_start\"\"\"\n+\n+    rng = check_random_state(0)\n+    X = rng.randn(20, 2)\n+\n+    # fit first 10 trees\n+    clf = IsolationForest(n_estimators=10, max_samples=20,\n+                          random_state=rng, warm_start=True)\n+    clf.fit(X)\n+    # remember the 1st tree\n+    tree_1 = clf.estimators_[0]\n+    # fit another 10 trees\n+    clf.set_params(n_estimators=20)\n+    clf.fit(X)\n+    # expecting 20 fitted trees and no overwritten trees\n+    assert len(clf.estimators_) == 20\n+    assert clf.estimators_[0] is tree_1\n+\n+    # Check if model is stable with more iterations\n+    for n in range(30, 61, 10):\n+        clf.set_params(n_estimators=n)\n+        clf.fit(X)\n+        assert len(clf.estimators_) == n\n+        assert clf.estimators_[0] is tree_1\n+\n+    # Fit without warm_start to verify it resets\n+    clf.set_params(n_estimators=10, warm_start=False)\n+    clf.fit(X)\n+    assert len(clf.estimators_) == 10\n+    assert clf.estimators_[0] is not tree_1\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_deprecation():\n     X = [[0.0], [1.0]]\n     clf = IsolationForest()\n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..bd9ae21 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -197,4 +197,25 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n+\n+    # Additional test cases for discrete_features\n+    for mutual_info in (mutual_info_regression, mutual_info_classif):\n+        # Test with boolean mask\n+        mi_5 = mutual_info(X, y, discrete_features=[True, False, True], random_state=0)\n+        mi_6 = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+        assert_array_equal(mi_5, mi_6)\n+\n+        # Ensure ValueError is raised for invalid boolean array length\n+        assert_raises(ValueError, mutual_info, X, y, discrete_features=[True, False])\n+\n+        # Ensure IndexError is raised for invalid indices\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[1, 3])\n+\n+        # Check with full boolean mask\n+        mi_full_boolean = mutual_info(X, y, discrete_features=[True, True, True], random_state=0)\n+        assert not np.allclose(mi_1, mi_full_boolean)\n+\n+        # Check with full index array\n+        mi_full_index = mutual_info(X, y, discrete_features=[0, 1, 2], random_state=0)\n+        assert_array_equal(mi_full_boolean, mi_full_index)\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..1b6ae3c 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,6 +217,14 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_logistic_regression_cv_array_parameter():\n+    # Test that a LogisticRegressionCV with a numpy array as parameter\n+    # can be printed without error when print_changed_only=True\n+    set_config(print_changed_only=True)\n+    repr_output = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+    assert \"LogisticRegressionCV(Cs=array([0.1, 1. ]))\" in repr_output\n+    set_config(print_changed_only=False)\n+\n \n def test_pipeline():\n     # Render a pipeline object\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..68a3048 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -17,6 +18,8 @@ from sklearn import datasets\n from sklearn.model_selection import cross_val_score, train_test_split\n from sklearn.datasets import make_multilabel_classification\n from sklearn.svm import SVC\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.multiclass import OneVsRestClassifier\n from sklearn.neighbors import KNeighborsClassifier\n from sklearn.base import BaseEstimator, ClassifierMixin\n@@ -506,4 +509,25 @@ def test_transform():\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n+\n+@pytest.mark.parametrize(\n+    \"X, y, voter_cls, estimator_list\",\n+    [\n+        (datasets.load_iris(return_X_y=True), VotingClassifier, [\n+            ('lr', LogisticRegression()), ('rf', RandomForestClassifier())]),\n+        (datasets.make_regression(n_samples=100, n_features=4, noise=0.1), VotingRegressor, [\n+            ('lr', LinearRegression()), ('rf', RandomForestRegressor())])\n+    ]\n+)\n+def test_none_estimator_with_weights_additional(X_y, voter_cls, estimator_list):\n+    X, y = X_y\n+    voter = voter_cls(estimators=estimator_list)\n+    # Ensure fitting with no None estimators works\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    # Set one estimator to None and fit again\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    # Check predictions\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape[0] == y.shape[0]\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..a607dd6 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -161,6 +161,30 @@ def test_params_validation():\n                          NCA(n_components=n_components).fit, X, y)\n \n \n+def test_parameters_with_gridsearch():\n+    # This test ensures that NCA can be used in a GridSearchCV without type errors\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.model_selection import GridSearchCV\n+    from sklearn.neighbors import KNeighborsClassifier\n+    import numpy as np\n+\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+\n+    pipe = Pipeline([('nca', nca), ('knn', knn)])\n+\n+    # Using np.int64 and np.float32 to check if they are accepted\n+    params = {\n+        'nca__tol': [0.1, 0.5, np.float32(1.0)],\n+        'nca__n_components': np.arange(1, 10).astype(np.int64)\n+    }\n+\n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+    gs.fit(X, y)\n+\n def test_transformation_dimensions():\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..c779529 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -679,6 +679,45 @@ def test_unicode_kernel():\n                                 kernel='linear',\n                                 random_seed=0)\n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_different_kernels():\n+    # Test different kernels with sparse data to ensure no errors occur\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    kernels = ['linear', 'poly', 'rbf', 'sigmoid']\n+    for kernel in kernels:\n+        model = svm.SVR(kernel=kernel, C=316.227766017, max_iter=15000, epsilon=0.1, tol=0.001)\n+        try:\n+            model.fit(X_train, y_train)\n+            # If no exception, check that support_vectors_ can be empty without issue\n+            assert model.support_vectors_.shape[0] >= 0\n+        except Exception as e:\n+            assert False, f\"Fitting with kernel={kernel} raised an exception: {e}\"\n+\n+def test_sparse_fit_no_support_vectors():\n+    # Test scenario where sparse fitting results in no support vectors\n+    X_train = sparse.csr_matrix([[0, 0, 0, 0],\n+                                 [0, 0, 0, 0]])\n+    y_train = np.array([0.0, 0.0])\n+    model = svm.SVR(kernel='linear', C=1.0, epsilon=0.1)\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n \n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..0c4bfd1 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,7 +972,33 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+import pytest\n+\n+@pytest.mark.parametrize(\"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold])\n+def test_repeated_cv_repr(RepeatedCV):\n+    \"\"\"Test the __repr__ output of RepeatedKFold and RepeatedStratifiedKFold.\"\"\"\n+    # Test default case\n+    default_cv = RepeatedCV()\n+    expected_default_repr = (\n+        f\"{default_cv.__class__.__name__}(n_repeats=10, n_splits=5, random_state=None)\"\n+    )\n+    assert repr(default_cv) == expected_default_repr\n+\n+    # Test custom n_splits, n_repeats, and random_state\n+    n_splits, n_repeats, random_state = 3, 4, 42\n+    custom_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats, random_state=random_state)\n+    expected_custom_repr = (\n+        f\"{custom_cv.__class__.__name__}(n_repeats={n_repeats}, n_splits={n_splits}, random_state={random_state})\"\n+    )\n+    assert repr(custom_cv) == expected_custom_repr\n+\n+    # Test with random_state as None\n+    no_state_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    expected_no_state_repr = (\n+        f\"{no_state_cv.__class__.__name__}(n_repeats={n_repeats}, n_splits={n_splits}, random_state=None)\"\n+    )\n+    assert repr(no_state_cv) == expected_no_state_repr\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n",
  "scikit-learn__scikit-learn-15512": "diff --git a/sklearn/cluster/tests/test_affinity_propagation.py b/sklearn/cluster/tests/test_affinity_propagation.py\nindex 5de7c5e..564f4d8 100644\n--- a/sklearn/cluster/tests/test_affinity_propagation.py\n+++ b/sklearn/cluster/tests/test_affinity_propagation.py\n@@ -151,6 +151,22 @@ def test_affinity_propagation_predict_non_convergence():\n     y = assert_warns(ConvergenceWarning, af.predict, to_predict)\n     assert_array_equal(np.array([-1, -1, -1]), y)\n \n+def test_affinity_propagation_non_convergence_cluster_centers():\n+    # Test to ensure that non-convergence results in empty cluster_centers_indices_\n+    X = np.array([[1, 0, 0, 0, 0, 0],\n+                  [0, 1, 1, 1, 0, 0],\n+                  [0, 0, 1, 0, 0, 1]])\n+    af = AffinityPropagation(affinity='euclidean', max_iter=2).fit(X)\n+    assert_array_equal(np.array([]), af.cluster_centers_indices_)\n+\n+def test_affinity_propagation_convergence_case():\n+    # Test to ensure convergence provides valid cluster centers and labels\n+    X = np.array([[1, 2], [1, 4], [1, 0],\n+                  [4, 2], [4, 4], [4, 0]])\n+    af = AffinityPropagation(affinity='euclidean', max_iter=200).fit(X)\n+    assert len(af.cluster_centers_indices_) > 0\n+    assert all(label >= 0 for label in af.labels_)\n+\n \n def test_equal_similarities_and_preferences():\n     # Unequal distances\n",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..d403a6b 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -5,7 +6,10 @@ import copy\n \n import pytest\n \n-from sklearn.datasets import make_regression\n+from sklearn import set_config\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n+from sklearn.datasets import make_regression, make_classification\n from sklearn.isotonic import (\n     check_increasing,\n     isotonic_regression,\n",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..eac024c 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2121,6 +2121,32 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     with pytest.raises(AttributeError, match=\"not provide get_feature_names_out\"):\n         ct.get_feature_names_out()\n \n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False, False, False]), [False, False, False, False]],\n+    ids=[\"list\", \"bool\", \"bool_int\"],\n+)\n+def test_issue_with_empty_transformers_pandas_output(empty_selection):\n+    \"\"\"Check that pandas output works when there is a transformer with no features.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = pd.DataFrame([[1.0, 2.0, 3.0, 4.0], [4.0, 2.0, 2.0, 5.0]], columns=[\"a\", \"b\", \"c\", \"d\"])\n+    y = np.array([0, 1])\n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", empty_selection),\n+            (\"numerical\", Pipeline([(\"scaler\", RobustScaler()), (\"imputer\", SimpleImputer(strategy=\"median\"))]), [\"a\", \"b\", \"c\"]),\n+        ],\n+        verbose_feature_names_out=True,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\", \"numerical__c\"])\n+\n+    ct.set_params(verbose_feature_names_out=False)\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"a\", \"b\", \"c\"])\n+\n     # The feature names are prefixed because verbose_feature_names_out=True is default\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n@@ -2128,4 +2154,4 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/roots/test-ext-autodoc/target/inheritance.py b/tests/roots/test-ext-autodoc/target/inheritance.py\nindex ac389bf..fda8232 100644\n--- a/tests/roots/test-ext-autodoc/target/inheritance.py\n+++ b/tests/roots/test-ext-autodoc/target/inheritance.py\n@@ -14,4 +14,12 @@ class Base(object):\n class Derived(Base):\n     def inheritedmeth(self):\n         # no docstring here\n-        pass\n+        pass\n+\n+class AnotherBase:\n+    def anothermethod(self):\n+        \"\"\"Another base method.\"\"\"\n+\n+class MultipleInheritance(Derived, AnotherBase):\n+    def ownmethod(self):\n+        \"\"\"Own method.\"\"\"\n",
  "sphinx-doc__sphinx-7975": "diff --git a/tests/test_environment_indexentries.py b/tests/test_environment_indexentries.py\nindex 9775484..becda96 100644\n--- a/tests/test_environment_indexentries.py\n+++ b/tests/test_environment_indexentries.py\n@@ -15,7 +15,31 @@ from sphinx.testing import restructuredtext\n \n \n @pytest.mark.sphinx('dummy', freshenv=True)\n-def test_create_single_index(app):\n+def test_special_symbols_index(app):\n+    text = (\".. index:: @mention\\n\"\n+            \".. index:: \u00a3100\\n\"\n+            \".. index:: \u2190move\\n\"\n+            \".. index:: someword\\n\"\n+            \".. index:: anotherword\\n\")\n+    restructuredtext.parse(app, text)\n+    index = IndexEntries(app.env).create_index(app.builder)\n+    \n+    # Check that there is only one 'Symbols' section\n+    symbols_found = [section for section in index if section[0] == 'Symbols']\n+    assert len(symbols_found) == 1, \"There should be only one 'Symbols' section in the index\"\n+    \n+    # Check that the 'Symbols' section contains the correct entries\n+    symbols_entries = symbols_found[0][1]\n+    assert ('@mention', [[('', '#index-0')], [], None]) in symbols_entries\n+    assert ('\u00a3100', [[('', '#index-1')], [], None]) in symbols_entries\n+    assert ('\u2190move', [[('', '#index-2')], [], None]) in symbols_entries\n+\n+    # Ensure that the normal words are in separate sections\n+    assert ('someword', [[('', '#index-3')], [], None]) not in symbols_entries\n+    assert ('anotherword', [[('', '#index-4')], [], None]) not in symbols_entries\n+    \n+    assert any(section for section in index if section[0] == 'S' and ('someword', [[('', '#index-3')], [], None]) in section[1])\n+    assert any(section for section in index if section[0] == 'A' and ('anotherword', [[('', '#index-4')], [], None]) in section[1])\n     text = (\".. index:: docutils\\n\"\n             \".. index:: Python\\n\"\n             \".. index:: pip; install\\n\"\n",
  "sphinx-doc__sphinx-8435": "",
  "sphinx-doc__sphinx-8506": "",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..fbb1168 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,7 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n@@ -45,6 +46,42 @@ def do_autodoc(app, objtype, name, options=None):\n     return bridge.result\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_non_empty_all(app):\n+    \"\"\"\n+    Test case to check if __all__ attribute with items functions correctly.\n+    \"\"\"\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.non_empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.non_empty_all',\n+        '',\n+        'docstring of non_empty_all module.',\n+        '',\n+        '.. py:function:: foo()',\n+        '   :module: target.non_empty_all',\n+        '',\n+        '   docstring',\n+    ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_members_option_false(app):\n+    \"\"\"\n+    Test case to ensure that no members are listed when :members: is False.\n+    \"\"\"\n+    options = {'members': False}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+\n def make_directive_bridge(env):\n     options = Options(\n         inherited_members = False,\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..48d8c3f 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -16,6 +17,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n import pytest\n \n from sphinx.util.typing import restify, stringify\n+from struct import Struct\n \n \n class MyClass1:\n@@ -46,7 +48,8 @@ def test_restify():\n     assert restify(Any) == \":obj:`Any`\"\n \n \n-def test_restify_type_hints_containers():\n+def test_restify_struct():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(List) == \":class:`List`\"\n     assert restify(Dict) == \":class:`Dict`\"\n     assert restify(List[int]) == \":class:`List`\\\\ [:class:`int`]\"\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..f029ce1 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,10 +1455,61 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    def test_other_parameters_with_class_reference(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`AnotherClass <name.space.AnotherClass>` instance\n+\n+\"\"\"\n+\n+        # Test when napoleon_use_param is False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`AnotherClass <name.space.AnotherClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test when napoleon_use_param is True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`AnotherClass <name.space.AnotherClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+    def test_other_parameters_with_multiple_entries(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+x, y : int, optional\n+    Description for `x` and `y`.\n+\n+\"\"\"\n+\n+        # Test when napoleon_use_param is False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **x**, **y** (*int, optional*) -- Description for `x` and `y`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test when napoleon_use_param is True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x:\n+:type x: int, optional\n+:param y:\n+:type y: int, optional\n+    Description for `x` and `y`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..2228824 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -321,8 +321,15 @@ def test_mul():\n         h2 = _af_rmuln(*a[:i + 1])\n         assert h == h2\n \n-\n-def test_args():\n+def test_permutation_non_disjoint_cycles():\n+    # Test the specific case mentioned in the issue\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    # Additional test cases for non-disjoint cycles\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])\n+    assert Permutation([[0, 1, 2], [1, 2]]) == Permutation([2, 0, 1])\n+    assert Permutation([[0, 1], [2, 3], [1, 2]]) == Permutation([1, 3, 2, 0])\n+    assert Permutation([[0, 1], [2, 3], [0, 2, 3]]) == Permutation([2, 1, 3, 0])\n+    assert Permutation([[0, 1], [2, 0, 1]]) == Permutation([1, 0, 2])\n     p = Permutation([(0, 3, 1, 2), (4, 5)])\n     assert p._cyclic_form is None\n     assert Permutation(p) == p\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..ff30904 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,4 +1,5 @@\n-from sympy import Abs, S, Symbol, I, Rational, PurePoly\n+\n+from sympy import Abs, S, Symbol, I, Rational, PurePoly, Matrix\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n \n@@ -25,8 +26,22 @@ def test_sparse_matrix():\n     assert a.col_join(b) == b\n     assert type(a.row_join(b)) == type(a)\n     assert type(a.col_join(b)) == type(a)\n-\n-    # test element assignment\n+    \n+    # Test hstack with 0 x n matrices\n+    empty_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*empty_matrices).shape == (0, 6), \"Failed on hstack with 0 x n matrices\"\n+\n+    # Test hstack with 1 x n matrices\n+    non_empty_matrices = [SparseMatrix.zeros(1, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*non_empty_matrices).shape == (1, 6), \"Failed on hstack with 1 x n matrices\"\n+\n+    # Test vstack with n x 0 matrices\n+    empty_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*empty_matrices).shape == (6, 0), \"Failed on vstack with n x 0 matrices\"\n+\n+    # Test vstack with n x 1 matrices\n+    non_empty_matrices = [SparseMatrix.zeros(n, 1) for n in range(4)]\n+    assert SparseMatrix.vstack(*non_empty_matrices).shape == (6, 1), \"Failed on vstack with n x 1 matrices\"\n     a = SparseMatrix((\n         (1, 0),\n         (0, 1)\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..325ca08 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -100,7 +100,20 @@ def test_core_symbol():\n         check(c)\n \n \n-def test_core_numbers():\n+import pickle\n+import sys\n+from sympy import symbols, Add\n+\n+def test_pickle_expression_cross_version():\n+    x = symbols(\"x\")\n+    expr = x + 1.0\n+    \n+    # Simulate pickling in Python 2 and unpickling in Python 3\n+    pickled_expr = pickle.dumps(expr, protocol=2)\n+    unpickled_expr = pickle.loads(pickled_expr)\n+    \n+    assert unpickled_expr == expr\n+    assert isinstance(unpickled_expr, Add)\n     for c in (Integer(2), Rational(2, 3), Float(\"1.2\")):\n         check(c)\n \n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..11f979d 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -267,6 +267,26 @@ def test_coth():\n \n     assert coth(x*I) == -cot(x)*I\n \n+def test_coth_log_tan_substitution():\n+    from sympy import coth, log, tan, Symbol, I, pi\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    # Test previously failing values\n+    for n in [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]:\n+        try:\n+            result = e.subs(x, n)\n+            # Print the result to see if it evaluates correctly\n+            print(f\"coth(log(tan({n}))) = {result}\")\n+        except Exception as ex:\n+            print(f\"Failed for x = {n} with exception: {ex}\")\n+    # Additional test values\n+    for n in [1, 4, 7, 10, 14, 16, 17, 19, 20]:\n+        try:\n+            result = e.subs(x, n)\n+            print(f\"coth(log(tan({n}))) = {result}\")\n+        except Exception as ex:\n+            print(f\"Failed for x = {n} with exception: {ex}\")\n+\n     assert coth(k*pi*I) == -cot(k*pi)*I\n     assert coth(17*k*pi*I) == -cot(17*k*pi)*I\n \n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..596afc1 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,30 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    import sympy as sm\n+    \n+    # Create a 6x6 identity matrix\n+    M = sm.eye(6)\n+\n+    # Create a 6x2 matrix filled with 2s\n+    V = 2 * sm.ones(6, 2)\n+\n+    # Perform the column insertion\n+    result = M.col_insert(3, V)\n+\n+    # The expected matrix after column insertion\n+    expected = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+\n+    # Assert the result is as expected\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..3366515 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -615,8 +615,18 @@ def test_latex_Range():\n \n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n+from sympy import symbols, oo\n+from sympy.printing.latex import latex\n+from sympy.series.sequences import SeqFormula\n \n-def test_latex_sequences():\n+def test_latex_seqformula_issue():\n+    n = symbols('n', integer=True)\n+    seq = SeqFormula(n**2, (n, 0, oo))\n+\n+    # Expected output without backslash-escaping for square brackets\n+    expected_latex = r'[0, 1, 4, 9, \\ldots]'\n+\n+    assert latex(seq) == expected_latex\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..edda99f 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,9 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n+from sympy.polys.polytools import Poly\n+from sympy.abc import x, y, z\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..3b42660 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,31 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import MatrixSymbol, pretty\n+\n+def test_issue_14814_pretty_printing():\n+    n = 3  # Specify a size for the matrices\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+\n+    # Ensure pretty printing doesn't raise an exception and gives expected output\n+    assert pretty(x + y_star) == \"x + y*\"\n+\n+    # Additional cases to verify different combinations and ensure consistent behavior\n+    a = MatrixSymbol('a', n, n)\n+    y_y = MatrixSymbol('y*y', n, n)\n+    assert pretty(-a*x + -2*y_y) == \"-a*x - 2*y*y\"\n+    assert pretty(-x + y_star) == \"-x + y*\"\n+    assert pretty(-y_star + x) == \"-y* + x\"\n+\n+    # Verify behavior with negative terms alone\n+    assert pretty(-x) == \"-x\"\n+    assert pretty(-y_star) == \"-y*\"\n+\n+    # Verify behavior with additional special character matrix names\n+    z_percent = MatrixSymbol('z%', n, n)\n+    assert pretty(x + z_percent) == \"x + z%\"\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..a724d3f 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -727,8 +727,17 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(F(t) * G(t), F(t) * G(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n-\n-def test_python_keywords():\n+def test_curly_matrix_symbol_issue():\n+    # Issue with lambdify and MatrixSymbol containing curly braces\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+    \n+    # Test without dummification\n+    with raises(SyntaxError):\n+        lam = sy.lambdify(curlyv, curlyv)\n+    \n+    # Test with dummification\n+    with raises(SyntaxError):\n+        lam = sy.lambdify(curlyv, curlyv, dummify=True)\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n     # functions. This is an additional regression test.\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..3e5c3d8 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,25 @@\n+\n+def test_Max_Min():\n+    # Test the `Max` function to check the reported issue\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[x, 2]\"\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    assert mcode(Max(2, y, x)) == \"Max[y, x, 2]\"\n+\n+    # Ensure `Min` function works similarly\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(2, x)) == \"Min[x, 2]\"\n+    assert mcode(Min(x, y, 2)) == \"Min[x, y, 2]\"\n+    assert mcode(Min(2, y, x)) == \"Min[y, x, 2]\"\n+\n+    # Original test to ensure it still passes\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..9f64aa8 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,14 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+def test_latex_IndexedMatrixExpression():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    assert latex((M*N)[i, j]) == r'\\\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+\n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..e5910f3 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -7,6 +8,17 @@ from sympy.utilities.pytest import raises\n \n def test_idiff():\n     x = Symbol('x', real=True)\n+    f = Function('f')\n+    g = Function('g')\n+    y = Symbol('y', real=True)\n+\n+    # New tests based on the issue description\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x) == (x + 1)*exp(x - y)/(y + 1)\n+    assert idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+    assert idiff(y*exp(y) - x*exp(x), y, x) == (x + 1)*exp(x - y)/(y + 1)\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n     # the use of idiff in ellipse also provides coverage\n",
  "sympy__sympy-16792": "",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..3e5fb83 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,9 +342,24 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Intersection, Eq, Piecewise, S, Symbol\n \n-def test_issue_9623():\n-    n = Symbol('n')\n+def test_issue_intersection_remove_duplicates():\n+    x = Symbol('x')\n+    \n+    # Test case where intersection should be empty\n+    result = Intersection({1}, {1}, {x})\n+    expected = Piecewise((S.EmptySet, Eq(x, 1)), (S.EmptySet, True))\n+    assert result.equals(expected), f\"Expected {expected}, got {result}\"\n+\n+    # Test case where intersection should contain 1\n+    result = Intersection({1}, {x})\n+    expected = Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert result.equals(expected), f\"Expected {expected}, got {result}\"\n+\n+    # Ensure duplicates in input produce the same intersection\n+    result_with_duplicates = Intersection({1, 1}, {1, 1}, {x})\n+    assert result_with_duplicates.equals(expected), f\"Expected {expected}, got {result_with_duplicates}\"\n \n     a = S.Reals\n     b = Interval(0, oo)\n",
  "sympy__sympy-17022": "",
  "sympy__sympy-17139": "",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..26f73b1 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -93,6 +94,14 @@ def test_point():\n     assert p4 * 5 == Point(5, 5)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n+    # Test scalar multiplication with points (addressing the issue described)\n+    from sympy import sympify\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    factor = sympify(2.0)\n+    assert point1 + point2 * factor == Point(2, 2)  # Original test case\n+    assert point1 + factor * point2 == Point(2, 2)  # Fixed behavior\n+\n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n     # Point differences should be simplified\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..68d6aea 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,48 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, sympify, Symbol\n+from sympy.core.compatibility import raises\n+\n+def test_non_string_equality():\n+    # Test cases from the original patch\n+    x = symbols('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Make sure == doesn't try to convert the resulting expression to a string\n+    # (e.g., by calling sympify() instead of _sympify())\n+\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+    v = eval(\"var(['d', 'e', 'fg'])\", {'var': symbols})\n+    assert v != ['d', 'e', 'fg']\n+    assert v == [Symbol('d'), Symbol('e'), Symbol('fg')]\n+\n+def test_no_eval_in_eq():\n+    # Reproducing the original issue with test case that Sympy should not call eval on repr\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+\n+    assert (symbols('x') == C()) is False\n+\n+    # Test case where repr is equal to the symbol name\n+    class D:\n+        def __repr__(self):\n+            return 'x'\n+\n+    assert (symbols('x') != D()) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1944,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..69dfc14 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -554,7 +554,23 @@ def test_diophantine():\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n \n-def test_general_pythagorean():\n+def test_issue_18186_diophantine_permute():\n+    from sympy.solvers.diophantine import diophantine\n+    from sympy import symbols\n+\n+    x, y = symbols('x y', integer=True)\n+    \n+    # Original test cases from the issue\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    \n+    # Additional test cases to verify consistency regardless of symbol order\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(x**4 + y**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..b5953e4 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n from sympy.codegen.ast import Declaration, Variable, float64, int64\n@@ -69,6 +70,16 @@ def test_sizeof():\n     assert all(atom == typename for atom in sz.atoms())\n \n \n+def test_atoms_no_args():\n+    typename = 'unsigned int'\n+    sz = sizeof(typename)\n+    # Check that atoms returns objects with no .args\n+    assert sz.atoms() == {typename}\n+    \n+    expr = Declaration(Variable('x', type=int64))\n+    # Check that atoms returns Variable and int64, both of which have no .args\n+    assert expr.atoms() == {Variable('x', type=int64), int64}\n+\n def test_struct():\n     vx, vy = Variable(x, type=float64), Variable(y, type=float64)\n     s = struct('vec2', [vx, vy])\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..639faa6 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,13 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_issue_blockdiagmatrix_one_element():\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M  # Ensure that converting back to Matrix works as expected\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..8864aa4 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n@@ -87,6 +88,17 @@ def test_slicing():\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n+def test_issue_12345_block_matrix_symbolic_indexing():\n+    from sympy import MatrixSymbol, symbols, BlockMatrix, pprint\n+\n+    n, i = symbols('n i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+\n+    # Check that C[i, 0] is not simplified to (A)[i, 0]\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n+\n def test_errors():\n     raises(IndexError, lambda: Identity(2)[1, 2, 3, 4, 5])\n     raises(IndexError, lambda: Identity(2)[[1, 2, 3, 4, 5]])\n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..07fac19 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -200,7 +200,35 @@ def test_im():\n     X = FunctionMatrix(3, 3, Lambda((n, m), n + m*I))\n     assert im(X) == Matrix([[0, 1, 2], [0, 1, 2], [0, 1, 2]])\n \n+from sympy import Symbol, Abs, Piecewise, Eq, sign, I, nan, sqrt, S, exp_polar, pi, expand, Rational, cos, log, oo, sin, AccumBounds, Function\n+\n def test_sign():\n+    # Test cases to verify sign rewriting using Abs\n+    x = Symbol('x')\n+    y = Symbol('y', real=True)\n+\n+    # Test rewrite for a real symbol\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x / Abs(x), True))\n+\n+    # Test rewrite for a general function\n+    f = Function('f')\n+    assert sign(f(x)).rewrite(Abs) == Piecewise((0, Eq(f(x), 0)), (f(x) / Abs(f(x)), True))\n+\n+    # Test rewrite for a numerical zero\n+    assert sign(0).rewrite(Abs) == 0\n+\n+    # Additional rewrite tests with complex numbers\n+    z = x + I*y\n+    assert sign(z).rewrite(Abs) == z / Abs(z)\n+\n+    # Test with positive and negative real numbers\n+    p = Symbol('p', positive=True)\n+    n = Symbol('n', negative=True)\n+    assert sign(p).rewrite(Abs) == 1\n+    assert sign(n).rewrite(Abs) == -1\n+\n+    # Test with already known values\n+    assert sign(2 + 2*I).rewrite(Abs).simplify() == sign(2 + 2*I)\n     assert sign(1.2) == 1\n     assert sign(-1.2) == -1\n     assert sign(3*I) == I\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..044b404 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -471,6 +471,20 @@ def test_multiset_permutations():\n         6\\n''')\n \n \n+from sympy.utilities.iterables import partitions\n+\n+def test_partitions_reuse():\n+    # Test that each call to partitions produces independent results\n+    p1 = list(partitions(4))\n+    p2 = list(partitions(4))\n+    assert p1 == p2\n+    \n+    for p in p1:\n+        p[1] = p.get(1, 0) + 1\n+\n+    # Ensure that modifying p1 does not affect p2\n+    assert p2 == list(partitions(4))\n+\n def test_partitions():\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..316bf26 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -253,8 +253,11 @@ def test_power_rewrite_exp():\n     assert all((1/func(x)).rewrite(exp) == 1/(func(x).rewrite(exp)) for func in\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n+from sympy import S, oo, zoo, Pow\n \n-def test_zero():\n+def test_issue_19572():\n+    assert 0 ** -oo == zoo\n+    assert Pow(0, -oo) == zoo\n     x = Symbol('x')\n     y = Symbol('y')\n     assert 0**x != 0\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..a1032a5 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n@@ -45,6 +46,27 @@ def test_convert_to():\n     assert q.convert_to(s) == q\n     assert speed_of_light.convert_to(m) == speed_of_light\n \n+def test_convert_to_orthogonal_units():\n+    from sympy.physics.units import joule, minute\n+\n+    expr = joule * second\n+\n+    # Test conversion to joule: should return the original expression\n+    conv = convert_to(expr, joule)\n+    assert conv == expr\n+\n+    # Test conversion to joule*second: should return the original expression\n+    conv = convert_to(expr, joule * second)\n+    assert conv == expr\n+\n+    # Test conversion to base units kg*m**2/s: should be straightforward\n+    conv = convert_to(expr, kg * m**2 / s)\n+    assert conv == kg * m**2 / s\n+\n+    # Test conversion to minutes: should simplify correctly\n+    conv = convert_to(expr, minute)\n+    assert conv == expr / 60\n+\n \n def test_Quantity_definition():\n     q = Quantity(\"s10\", abbrev=\"sabbr\")\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..0e64ef9 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,19 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+from sympy import Symbol\n+from pytest import raises\n+\n+def test_symbol_no_dict():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    with raises(AttributeError):\n+        _ = s.__dict__\n+\n+def test_symbol_slots():\n+    s = Symbol('s')\n+    assert s.__slots__ == ('name',)\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..522c834 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -7,8 +8,25 @@ from sympy import (\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n+from sympy.functions.elementary.trigonometric import sinh\n+from sympy.functions.elementary.piecewise import Piecewise\n+from sympy import exp\n \n def test_subs():\n+    # Regression test for issue with PolynomialError on subs with hyperbolic functions and piecewise\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    \n+    # Test case directly derived from the issue scenario\n+    expr_real = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    try:\n+        expr_real.subs({1: 1.0})\n+        assert True, \"subs did not raise an error\"  # Expected behavior: no exception\n+    except PolynomialError:\n+        assert False, \"subs raised PolynomialError unexpectedly\"\n+    \n+    expr_complex = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    # This should work without errors\n+    assert expr_complex.subs({1: 1.0}) == expr_complex.subs({1: 1.0})\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..bbb478e 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -34,7 +35,10 @@ def test_Symbol_kind():\n     assert comm_x.kind is NumberKind\n     assert noncomm_x.kind is UndefinedKind\n \n-def test_Integral_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    d = Derivative(A, comm_x)\n+    assert d.kind is MatrixKind(NumberKind)\n     A = MatrixSymbol('A', 2,2)\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..38959af 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -131,7 +131,25 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n-    i, j, k = symbols('i j k', commutative=False)\n+    # Issue Test Cases:\n+    # Test with three variables and min, max degrees both set to 3\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3, x1*x2**2, x1*x3**2, x2*x1**2, x2*x3**2, x3*x1**2, x3*x2**2,\n+        x1*x2*x3, x1**2*x2, x1**2*x3, x2**2*x1, x2**2*x3, x3**2*x1, x3**2*x2,\n+        x1*x2*x3\n+    }\n+\n+    # Test with max_degrees greater than min_degrees\n+    assert set(itermonomials([x1, x2, x3], 4, 3)) >= {\n+        x1**3, x2**3, x3**3, x1*x2**2, x1*x3**2, x2*x1**2, x2*x3**2, x3*x1**2, x3*x2**2,\n+        x1*x2*x3, x1**2*x2, x1**2*x3, x2**2*x1, x2**2*x3, x3**2*x1, x3**2*x2,\n+        x1*x2*x3\n+    }\n+\n+    # Re-evaluating the original cases\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n     assert set(itermonomials([i, j, k], [0, 1, 0])) == {1, j}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..f111b26 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -48,6 +49,10 @@ def test_solve_poly_system():\n     raises(NotImplementedError, lambda: solve_poly_system(\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [y - 1], (x, y)))\n \n \n def test_solve_biquadratic():\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..6049a11 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy.core.basic import Basic\n+\n+from sympy.core.parameters import evaluate\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n@@ -452,7 +453,18 @@ def test__normalize_dimension():\n         Point(1, 2, 0), Point(3, 4, 0)]\n \n \n-def test_direction_cosine():\n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        Point2D(1, 2)  # Ensure no error is raised\n+\n+    # Test without evaluate(False) to ensure normal behavior is unaffected\n+    p = Point2D(1, 2)\n+    assert p == Point2D(1, 2)\n+\n+    # Test with an imaginary number to ensure the error is raised correctly\n+    with raises(ValueError, match=\"Imaginary coordinates are not permitted.\"):\n+        Point2D(1, I)\n     p1 = Point3D(0, 0, 0)\n     p2 = Point3D(1, 1, 1)\n \n",
  "sympy__sympy-22840": "",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..9132d8a 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,8 +1,9 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n from sympy.simplify import simplify\n-from sympy.tensor.array import Array\n+from sympy.tensor.array import Array, ImmutableDenseNDimArray, ImmutableSparseNDimArray, MutableDenseNDimArray, MutableSparseNDimArray\n from sympy.tensor.array.dense_ndim_array import (\n     ImmutableDenseNDimArray, MutableDenseNDimArray)\n from sympy.tensor.array.sparse_ndim_array import (\n@@ -38,7 +39,12 @@ def test_array_negative_indices():\n         assert test_array[-1, -1] == 10\n \n \n-def test_issue_18361():\n+def test_issue_17851_empty_array():\n+    \"\"\"Test creation of an empty Array and its properties.\"\"\"\n+    empty_array = Array([])\n+    assert isinstance(empty_array, Array)\n+    assert empty_array.shape == (0,)\n+    assert list(empty_array) == []\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n     B = Array([sin(x)**2 + cos(x)**2, 0])\n     C = Array([(x + x**2)/(x*sin(y)**2 + x*cos(y)**2), 2*sin(x)*cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..7d1e52d 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,20 @@ def test_scipy_polys():\n \n \n \n+def test_single_element_tuple():\n+    # Test if lambdify correctly handles single-element tuples\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,)\n+    source = inspect.getsource(f_single)\n+    assert 'return (1,)' in source\n+\n+    f_single_tuple_function = lambdify([], Tuple(1))\n+    assert f_single_tuple_function() == (1,)\n+    source = inspect.getsource(f_single_tuple_function)\n+    assert 'return (1,)' in source\n+import inspect\n+from sympy import lambdify, Tuple\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..29069a9 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,7 +528,45 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n-def test_issue_20288():\n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, SI.get_quantity_dimension(ohm))\n+    SI.set_quantity_dimension(C, SI.get_quantity_dimension(farad))\n+    SI.set_quantity_dimension(T, SI.get_quantity_dimension(second))\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+    \n+def test_issue_24062_additional():\n+    # Test with different quantities\n+    resistance = Quantity('resistance')\n+    capacitance = Quantity('capacitance')\n+    time = Quantity('time')\n+    SI.set_quantity_dimension(resistance, SI.get_quantity_dimension(ohm))\n+    SI.set_quantity_dimension(capacitance, SI.get_quantity_dimension(farad))\n+    SI.set_quantity_dimension(time, SI.get_quantity_dimension(second))\n+\n+    expression = time / (resistance * capacitance)\n+    dimension = SI._collect_factor_and_dimension(expression)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dimension)\n+\n+    # Test with exp\n+    exp_expression = exp(expression)\n+    assert SI._collect_factor_and_dimension(exp_expression) == (E, Dimension(1))\n+\n+    # Additive test case\n+    additive_expr = 10 + exp(expression)\n+    result = SI._collect_factor_and_dimension(additive_expr)\n+    assert result == (10 + E, Dimension(1))\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n     u = Quantity('u')\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..301a97d 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,6 +45,32 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n+def test_tensor_product_issue_fix():\n+    # Tests for the fix of the issue regarding TensorProduct expansion\n+\n+    # Original test patch cases\n+    assert TP(A - B, B - A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+\n+    assert TP(2 * A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A * B, A) + 2 * TP(A * B, B) + TP(A, A) + TP(A, B)\n+\n+    # Additional test cases to cover more scenarios\n+    assert TP(3 * A, 4 * B).expand(tensorproduct=True) == 12 * TP(A, B)\n+\n+    assert TP(0, A + B).expand(tensorproduct=True) == 0\n+\n+    assert TP(U - U, U + V).expand(tensorproduct=True) == 0\n+\n+    P = TP(2 * U - V, U + V)\n+    assert P.expand(tensorproduct=True) == \\\n+        2 * TP(U, U) + 2 * TP(U, V) - TP(V, U) - TP(V, V)\n+\n+    assert TP(A + B, B + C + D).expand(tensorproduct=True) == \\\n+        TP(A, B) + TP(A, C) + TP(A, D) + TP(B, B) + TP(B, C) + TP(B, D)\n \n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..f6c5384 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,6 +563,44 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_collect_factor_and_dimension_equivalent_dimensions():\n+    from sympy.physics.units import Quantity, velocity, acceleration, time, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    # Using expression a1*t1 + v1, which should be the same dimensions\n+    expr1 = a1 * t1 + v1\n+\n+    # Should not raise ValueError if dimensions are equivalent\n+    factor, dim = SI._collect_factor_and_dimension(expr1)\n+    assert dim == SI.get_quantity_dimension(v1)\n+    assert factor == -47.0 * meter / second\n+\n+    # Adding more cases with different expressions\n+    # Case where only one quantity is involved\n+    expr2 = v1\n+    factor, dim = SI._collect_factor_and_dimension(expr2)\n+    assert dim == SI.get_quantity_dimension(v1)\n+    assert factor == 2 * meter / second\n+\n+    # Combination of velocity and dimensionless factor\n+    expr3 = v1 + 3\n+    try:\n+        factor, dim = SI._collect_factor_and_dimension(expr3)\n+    except ValueError as e:\n+        assert \"Dimension\" in str(e)\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..c92e4e6 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n@@ -6,9 +7,22 @@ from sympy.physics.units import Quantity, length, meter\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n+from sympy.physics.units import milli, W\n \n x = Symbol('x')\n \n+def test_milli_prefix_with_units():\n+    # Test milli*W to ensure it evaluates to milli watts (mW) correctly\n+    assert milli * W == W / 1000  # milli*W should result in mW\n+\n+    # Additional tests with other units\n+    from sympy.physics.units import volt\n+\n+    assert milli * volt == volt / 1000  # milli*volt should result in mV\n+\n+    # Ensure original issue with milli*W == 1 does not occur\n+    assert milli * W != 1\n+\n \n def test_prefix_operations():\n     m = PREFIXES['m']\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 067de1c..e69629a 100644\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -204,8 +204,25 @@ class ModelInheritanceTests(TestCase):\n \n         self.assertEqual(A.attr.called, (A, 'attr'))\n \n+from .models import Parent, Child\n \n class ModelInheritanceDataTests(TestCase):\n+    def test_inherited_ordering_pk_desc(self):\n+        # Create Parent instances to inherit ordering.\n+        p1 = Parent.objects.create(first_name='Alice', last_name='Smith', email='alice@example.com')\n+        p2 = Parent.objects.create(first_name='Bob', last_name='Jones', email='bob@example.com')\n+        \n+        # Create corresponding Child instances.\n+        c1 = Child.objects.create(first_name='Charlie', last_name='Brown', email='charlie@example.com')\n+        c2 = Child.objects.create(first_name='David', last_name='Adams', email='david@example.com')\n+        \n+        # Verify the Child instances are ordered by descending pk.\n+        qs = Child.objects.all()\n+        self.assertSequenceEqual(qs, [c2, c1])\n+        \n+        # Verify the SQL query includes ORDER BY DESC.\n+        expected_order_by_sql = 'ORDER BY \"tests_model_inheritance_parent\".\"id\" DESC'\n+        self.assertIn(expected_order_by_sql, str(qs.query))\n     @classmethod\n     def setUpTestData(cls):\n         cls.restaurant = Restaurant.objects.create(\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..4f34134 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,36 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_fk(self):\n+        # Create authors with self-referential editors\n+        editor1 = Author.objects.create(name=\"Editor 1\")\n+        editor2 = Author.objects.create(name=\"Editor 2\")\n+        author1 = Author.objects.create(name=\"Author 1\", editor=editor1)\n+        author2 = Author.objects.create(name=\"Author 2\", editor=editor2)\n+\n+        # Create articles associated with these authors\n+        Article.objects.create(headline=\"Article 1\", author=author1)\n+        Article.objects.create(headline=\"Article 2\", author=author2)\n+\n+        # Test ordering by self-referential foreign key field\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'), \n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+        \n+        # Test ordering by self-referential foreign key field ID\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'), \n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+        \n+        # Additional test to check SQL query output and order using self-referential foreign key\n+        queryset = Article.objects.filter(author__isnull=False).order_by('author__editor_id')\n+        sql_query = str(queryset.query)\n+        print(sql_query)  # Output the SQL for manual verification if needed\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..f86b931 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,6 +3202,23 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n+    def test_boundwidget_id_for_label_uses_custom_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the custom id provided by\n+        ChoiceWidget.options instead of the default generated id.\n+        \"\"\"\n+\n+        class CustomIDForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'Option X'), ('y', 'Option Y')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id_%s'})\n+            )\n+\n+        form = CustomIDForm()\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n+\n     def test_boundfield_widget_type(self):\n         class SomeForm(Form):\n             first_name = CharField()\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..088af39 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,10 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.colors import LogNorm, Normalize\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n@@ -658,7 +662,29 @@ def test_colorbar_scale_reset():\n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n \n-def test_colorbar_get_ticks_2():\n+def test_colorbar_update_after_changing_norm():\n+    # Create a random image with values on a logarithmic scale\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    fig, ax = plt.subplots()\n+    plot = ax.imshow(img, cmap='gray')\n+    cbar = fig.colorbar(plot, ax=ax)\n+\n+    # Change the normalization to LogNorm\n+    plot.set_norm(LogNorm(vmin=img.min(), vmax=img.max()))\n+    cbar.update_normal(plot)\n+\n+    # Verify that the colorbar has been updated to a logarithmic scale\n+    assert cbar.ax.yaxis.get_scale() == 'log'\n+    np.testing.assert_allclose(cbar.get_ticks(), [10**i for i in range(-1, 3)], rtol=0.1)\n+\n+    # Reset normalization to linear and verify\n+    plot.set_norm(Normalize(vmin=img.min(), vmax=img.max()))\n+    cbar.update_normal(plot)\n+    fig.canvas.draw()\n+    assert cbar.ax.yaxis.get_scale() == 'linear'\n+\n+    plt.close(fig)\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n     pc = ax.pcolormesh([[.05, .95]])\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..a1af585 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3044,8 +3044,30 @@ class TestDataset:\n         x0 = y[0].to_unstacked_dataset(\"features\")\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n-\n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_to_stacked_array_single_dim_variable(self):\n+        # single dimension: regression test for the issue\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n+\n+    def test_to_unstacked_dataset_empty(self):\n+        # test with an empty dataset\n+        data = xr.Dataset()\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n+\n+    def test_to_unstacked_dataset_different_data_types(self):\n+        # test with different types of data\n+        arr_int = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        arr_float = xr.DataArray(np.arange(3, dtype=float), coords=[(\"x\", [0, 1, 2])])\n+        arr_str = xr.DataArray([\"a\", \"b\", \"c\"], coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"int\": arr_int, \"float\": arr_float, \"str\": arr_str})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..04c4e07 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,38 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.ext.autodoc.directive import do_autodoc\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app: SphinxTestApp):\n+    # Create options to only include members and inherited members\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..cae554a 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4344,8 +4344,38 @@ def test_pretty_no_wrap_line():\n def test_settings():\n     raises(TypeError, lambda: pretty(S(4), method=\"garbage\"))\n \n+def test_pretty_sum_with_addition():\n+    from sympy import Sum, oo\n+    from sympy.abc import x\n \n-def test_pretty_sum():\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    ascii_str = \\\n+\"\"\"\\\n+  oo    \\n\\\n+ ____   \\n\\\n+ \\\\     \\n\\\n+  \\\\   x\\n\\\n+  /     \\n\\\n+ /      \\n\\\n+/       \\n\\\n+ + 3    \\n\\\n+x = 1   \\\n+\"\"\"\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e     \\n\\\n+ ___    \\n\\\n+ \u2572      \\n\\\n+  \u2572   x \\n\\\n+  \u2571     \\n\\\n+ \u2571      \\n\\\n+ \u203e\u203e\u203e    \\n\\\n+ + 3    \\n\\\n+x = 1   \\\n+\"\"\")\n+\n+    assert pretty(expr) == ascii_str\n+    assert upretty(expr) == ucode_str\n     from sympy.abc import x, a, b, k, m, n\n \n     expr = Sum(k**k, (k, 0, n))\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..9648396 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,6 +692,21 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.pytest import raises\n+\n+def test_uniq_modification():\n+    f = [1, 2, 2, 3]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    f = ['a', 'b', 'b', 'c']\n+    raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n+    \n+    f = [1, 2, 3, 4]\n+    raises(RuntimeError, lambda: [f.append(i) for i in uniq(f)])\n+    \n+    f = [1, 2, 3, 4]\n+    raises(RuntimeError, lambda: [f.insert(0, i) for i in uniq(f)])\n+\n def test_uniq():\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..c2e5c51 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -8,6 +9,7 @@ from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n+from django.db.models import Max\n \n from .models import (\n     Article, Author, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -955,4 +957,29 @@ class LookupTests(TestCase):\n                 ).filter(author_exists=True)\n             ),\n         )\n-        self.assertEqual(qs.get(has_author_alias_match=True), tag)\n+        self.assertEqual(qs.get(has_author_alias_match=True), tag)\n+\n+    def test_filter_on_subquery_with_group_by(self):\n+        # Create authors to test with\n+        author1 = Author.objects.create(name='Author 1', alias='Alias 1')\n+        author2 = Author.objects.create(name='Author 2', alias='Alias 2')\n+\n+        # Subquery to fetch max id per name\n+        authors_max_ids = Author.objects.filter(\n+            name='Author 2',\n+        ).values(\n+            'name',\n+        ).annotate(\n+            max_id=Max('id'),\n+        ).values('max_id')\n+\n+        # Ensure the subquery is working as expected\n+        self.assertEqual(authors_max_ids.count(), 1)\n+        self.assertEqual(authors_max_ids[0]['max_id'], author2.id)\n+\n+        # Main query to filter using the subquery\n+        authors = Author.objects.filter(id__in=authors_max_ids[:1])\n+\n+        # Verify the correct author is returned\n+        self.assertEqual(authors.count(), 1)\n+        self.assertEqual(authors.get(), author2)\n",
  "django__django-15320": "",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..76eba06 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,33 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_wrong_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(PoolStyle.objects.annotate(\n+                tournament_pool=FilteredRelation('pool__tournament__pool'),\n+            ).select_related('tournament_pool'))\n+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\n+\n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +191,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..df8faae 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -14,7 +15,24 @@ from PIL import Image\n import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n+import pickle\n+import matplotlib.pyplot as plt\n+import platform\n+import pytest\n from matplotlib.axes import Axes\n+\n+def test_dpi_after_unpickling():\n+    if platform.system() == 'Darwin' and platform.machine() == 'arm64':\n+        fig = plt.figure(dpi=200)\n+        initial_dpi = fig.dpi\n+\n+        # Pickle and unpickle the figure\n+        pickled_fig = pickle.dumps(fig)\n+        unpickled_fig = pickle.loads(pickled_fig)\n+\n+        # Check that the DPI remains the same\n+        assert unpickled_fig.dpi == initial_dpi, (\n+            f\"Expected DPI: {initial_dpi}, but got {unpickled_fig.dpi}\")\n from matplotlib.figure import Figure, FigureBase\n from matplotlib.layout_engine import (ConstrainedLayoutEngine,\n                                       TightLayoutEngine)\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..6c886e3 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,7 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+from seaborn import PairGrid, scatterplot, regplot\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,7 +1625,20 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_with_hue_map(self):\n+        import seaborn as sns\n+        iris = sns.load_dataset(\"iris\")\n+        try:\n+            # Attempt to create a PairGrid with a categorical hue\n+            g = PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            success = True\n+        except Exception as e:\n+            success = False\n+            error = e\n+        # Check that the code runs without error\n+        assert success, f\"PairGrid with hue raised an exception: {error}\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..34f8764 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -323,7 +323,19 @@ class TestTraceback_f_g_h:\n         assert entry.frame.code.name == \"g\"\n \n \n-def test_excinfo_exconly():\n+import pytest\n+\n+def test_raises_context_variable_str():\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\n+            \"A\\n\"\n+            \"B\\n\"\n+            \"C\"\n+        )\n+    # str(excinfo) should not return the full error message\n+    assert str(excinfo) != \"A\\nB\\nC\"\n+    # The full error message is obtained via excinfo.value\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n     excinfo = pytest.raises(ValueError, h)\n     assert excinfo.exconly().startswith(\"ValueError\")\n     with pytest.raises(ValueError) as excinfo:\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..0a756d9 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -404,6 +404,16 @@ class TestCustomConftests:\n         testdir.makepyfile(\"def test_x(): pass\")\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+    def test_collect_only_shortcut(self, testdir):\n+        # Create a simple test file\n+        testdir.makepyfile(\"def test_example(): pass\")\n+        \n+        # Run pytest with the new shortcut\n+        result = testdir.runpytest(\"-c\")\n+        \n+        # Check the output to confirm collection only\n+        result.stdout.fnmatch_lines([\"*test_example*\"])\n+        assert \"collected 1 item\" in result.stdout.str()\n \n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n",
  "sphinx-doc__sphinx-10451": "",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..445803f 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,15 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Sum, symbols, MatrixSymbol, Identity\n \n-def test_Identity_doit():\n+def test_Identity_sum_elements():\n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+    \n+    # Check if the total sum of the elements in the identity matrix is equal to n\n+    # This should expose the issue where the sum is incorrectly calculated as 0\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "diff --git a/sympy/physics/vector/point.py b/sympy/physics/vector/point.py\nindex b711aa3..1d105a1 100644\n--- a/sympy/physics/vector/point.py\n+++ b/sympy/physics/vector/point.py\n@@ -516,6 +516,29 @@ class Point(object):\n         10*N.x\n \n         \"\"\"\n+        \n+    def test_issue_velocity_calculation_between_points():\n+        import sympy as sm\n+        import sympy.physics.mechanics as me\n+    \n+        # Define reference frame and dynamic symbol\n+        A = me.ReferenceFrame('A')\n+        q = me.dynamicsymbols('q')\n+        \n+        # Define new reference frame with an orientation relative to A\n+        B = A.orientnew('B', 'Axis', (q, A.x))\n+        \n+        # Create points P and Q\n+        P = me.Point('P')\n+        Q = me.Point('Q')\n+        \n+        # Set position of Q relative to P\n+        r = q * A.x + 2 * q * A.y\n+        Q.set_pos(P, r)\n+        \n+        # Assert that the velocity of Q in A frame can be calculated as the time derivative\n+        expected_velocity = r.diff(sm.Symbol('t'))\n+        assert Q.vel(A) == expected_velocity, \"Velocity calculation between points failed\"\n \n         _check_frame(frame)\n         if not (frame in self._vel_dict):\n",
  "sympy__sympy-21612": ""
}