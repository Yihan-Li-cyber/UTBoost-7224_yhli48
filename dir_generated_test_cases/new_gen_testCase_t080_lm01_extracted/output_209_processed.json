{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..d474f77 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -134,8 +134,21 @@ def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n-\n-def test_custom_model_separable():\n+def test_nested_compound_model_separability():\n+    from astropy.modeling import models, separable\n+    cm = models.Linear1D(10) & models.Linear1D(5)\n+    complex_model = models.Pix2Sky_TAN() & cm\n+\n+    # Expected separability matrix for the nested compound model\n+    expected_separability_matrix = np.array([\n+        [True,  True, False, False],\n+        [True,  True, False, False],\n+        [False, False, True,  False],\n+        [False, False, False, True]\n+    ])\n+\n+    computed_separability_matrix = separable.separability_matrix(complex_model)\n+    assert_allclose(computed_separability_matrix, expected_separability_matrix)\n     @custom_model\n     def model_a(x):\n         return x\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..30d82f8 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,6 +1,50 @@\n+\n+def test_rst_with_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified using QTable\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n+\n+def test_rst_write_with_custom_header():\n+    \"\"\"Test writing a table with a custom header row to RST format.\"\"\"\n+    tbl = QTable({'wave': [350, 950] * u.nm, 'response': [0.7, 1.2] * u.count})\n+    expected_output = [\n+        \"===== ========\",\n+        \" wave response\",\n+        \"  nm       ct \",\n+        \"===== ========\",\n+        \"350.0      0.7\",\n+        \"950.0      1.2\",\n+        \"===== ========\",\n+    ]\n+    \n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    assert out.getvalue().splitlines() == expected_output\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n+from astropy.table import QTable\n+import astropy.units as u\n+import numpy as np\n \n from astropy.io import ascii\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..4a72059 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -70,8 +70,31 @@ def test_roundtrip(tmp_path):\n     53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n     NO 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n     \"\"\"\n+import pytest\n+import numpy as np\n+from astropy.io.ascii.qdp import _read_table_qdp\n+\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_case_sensitivity_in_qdp(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Test QDP file with mixed case commands\n+    READ SERR 1 2\n+    1.0 0.1 2.0 0.2\n+    2.0 0.2 4.0 0.4\n+    \"\"\"\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n \n-    path = str(tmp_path / \"test.qdp\")\n+    path = str(tmp_path / \"case_test.qdp\")\n     path2 = str(tmp_path / \"test2.qdp\")\n \n     with open(path, \"w\") as fp:\n@@ -108,8 +131,16 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+    with open(path, \"w\") as fp:\n+        print(example_qdp, file=fp)\n+\n+    table = _read_table_qdp(path, names=[\"Col1\", \"Col2\", \"Col3\", \"Col4\"], table_id=0)\n \n-def test_read_example():\n+    assert len(table) == 2\n+    assert np.allclose(table[\"Col1\"], [1.0, 2.0])\n+    assert np.allclose(table[\"Col2\"], [0.1, 0.2])\n+    assert np.allclose(table[\"Col3\"], [2.0, 4.0])\n+    assert np.allclose(table[\"Col4\"], [0.2, 0.4])\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..21bc2d0 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,43 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be\n+    # a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..c51f51e 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -299,8 +299,21 @@ class TestTableFunctions(FitsTestCase):\n         assert comparerecords(hdu.data, hdul[1].data)\n         hdul.close()\n         a.close()\n-\n-    def test_endianness(self):\n+    def test_d_exponent_handling_in_ascii_table(self):\n+        \"\"\"Test correct handling of 'D' exponents in ASCII tables.\"\"\"\n+        r1 = np.array([11.0, 12.0])\n+        c1 = fits.Column(name='def', format='D', array=r1)\n+        hdu = fits.TableHDU.from_columns([c1])\n+        hdu.writeto(self.temp('test_d_exponent.fits'), overwrite=True)\n+        with open(self.temp('test_d_exponent.fits')) as f:\n+            content = f.read()\n+            # Check if the 'D' exponent is used in the file content\n+            assert '1.10000000000000000D+01' in content\n+            assert '1.20000000000000000D+01' in content\n+\n+        with fits.open(self.temp('test_d_exponent.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data)\n+        hdu.close()\n         x = np.ndarray((1,), dtype=object)\n         channelsIn = np.array([3], dtype='uint8')\n         x[0] = channelsIn\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..aa0ab32 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1093,7 +1093,12 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n-    def test_override_file_upload_permissions(self):\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Default FILE_UPLOAD_PERMISSIONS should be set to 0o644.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n         the file_permissions_mode attribute of\n@@ -1103,7 +1108,24 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n-    def test_override_file_upload_directory_permissions(self):\n+    def test_file_upload_permissions_with_tempfile(self):\n+        \"\"\"\n+        Test file upload permissions when using tempfile for uploads.\n+        \"\"\"\n+        import tempfile\n+        import os\n+\n+        with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n+            temp_file.write(b'Test data')\n+            file_path = temp_file.name\n+        \n+        # Simulate saving the file using the storage system\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=0o644):\n+            os.chmod(file_path, default_storage.file_permissions_mode)\n+            self.assertEqual(oct(os.stat(file_path).st_mode & 0o777), '0o644')\n+\n+        # Clean up\n+        os.remove(file_path)\n         \"\"\"\n         Overriding the FILE_UPLOAD_DIRECTORY_PERMISSIONS setting should be\n         reflected in the directory_permissions_mode attribute of\n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex dbcbef0..23b12ce 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -514,6 +514,21 @@ class MigrateTests(MigrationTestBase):\n             out.getvalue()\n         )\n \n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n+    def test_sqlmigrate_no_transaction_for_non_rollbackable_ddl(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown when the database doesn't support\n+        transactional DDL, even if the migration is atomic.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command(\"sqlmigrate\", \"migrations\", \"0001\", stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        if connection.ops.start_transaction_sql():\n+            self.assertNotIn(connection.ops.start_transaction_sql().lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n     @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app'])\n     def test_showmigrations_plan_app_label_no_migrations(self):\n         out = io.StringIO()\n",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..f1c82ab 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,7 +75,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +84,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..5b92386 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -248,6 +248,28 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n+    def test_trailing_newline_unicode_validator(self):\n+        invalid_usernames = [\n+            'username\\n',  # Username ending with a newline\n+            'validname\\n ',  # Username ending with a space after newline\n+        ]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_trailing_newline_ascii_validator(self):\n+        invalid_usernames = [\n+            'username\\n',  # Username ending with a newline\n+            'validname\\n ',  # Username ending with a space after newline\n+        ]\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n@@ -258,4 +280,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..a60389b 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,10 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n@@ -374,6 +378,22 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         r.content = ['idan', 'alex', 'jacob']\n         self.assertEqual(r.content, b'idanalexjacob')\n+    \n+    def test_memoryview_with_text(self):\n+        # Test with memoryview containing text\n+        r = HttpResponse(memoryview(b'Text content'))\n+        self.assertEqual(r.content, b'Text content')\n+\n+    def test_memoryview_empty(self):\n+        # Test with an empty memoryview\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_memoryview_large_content(self):\n+        # Test with a large memoryview object\n+        large_content = b'a' * 10000  # 10,000 bytes\n+        r = HttpResponse(memoryview(large_content))\n+        self.assertEqual(r.content, large_content)\n \n         r = HttpResponse()\n         r.content = [1, 2, 3]\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..95e6539 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n@@ -464,7 +466,13 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..6114092 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,9 +1,11 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n+from django.db.utils import IntegrityError\n \n from .models import Proxy, UserProxy\n \n@@ -140,7 +142,41 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n-    def test_user_keeps_same_permissions_after_migrating_backward(self):\n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Test that migration of proxy model permissions does not fail when\n+        permissions already exist.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_migrate_fails_with_duplicate_key(self):\n+        \"\"\"\n+        Test that migration fails with duplicate key error when permissions exist\n+        with the same content_type and codename.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        # Create a permission that will cause a duplicate key error.\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_agency',\n+            name='Can add agency',\n+        )\n+        # Attempt to run the migration and expect an IntegrityError.\n+        with self.assertRaises(IntegrityError):\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n         user.user_permissions.add(self.custom_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..242f9c0 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -9,6 +9,8 @@ import time\n import types\n import weakref\n import zipfile\n+import os\n+import sys\n from importlib import import_module\n from pathlib import Path\n from unittest import mock, skip, skipIf\n@@ -17,7 +19,7 @@ from django.apps.registry import Apps\n from django.test import SimpleTestCase\n from django.test.utils import extend_sys_path\n from django.utils import autoreload\n-from django.utils.autoreload import WatchmanUnavailable\n+from django.utils.autoreload import WatchmanUnavailable, StatReloader\n \n from .utils import on_macos_with_hfs\n \n@@ -133,7 +135,32 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         self.assertEqual(autoreload.iter_modules_and_files((module,), frozenset()), frozenset())\n \n \n-class TestCommonRoots(SimpleTestCase):\n+class TestManagePyAutoreload(SimpleTestCase):\n+    def test_manage_py_change_triggers_reload(self):\n+        \"\"\"\n+        Ensure that changes to manage.py file trigger the StatReloader.\n+        \"\"\"\n+        reloader = StatReloader()\n+        manage_py_path = Path(__file__).parent / 'manage.py'\n+        \n+        # Create a temporary manage.py file\n+        with open(manage_py_path, 'w') as f:\n+            f.write(\"print('Initial content')\\n\")\n+        \n+        # Add the file and verify it's being tracked\n+        reloader.watch_file(str(manage_py_path))\n+        tracked_files = list(reloader.watched_files())\n+        self.assertIn(str(manage_py_path), tracked_files)\n+\n+        # Modify the manage.py file\n+        with open(manage_py_path, 'w') as f:\n+            f.write(\"print('Modified content')\\n\")\n+        \n+        # Check if the modification is detected\n+        self.assertTrue(reloader.code_changed())\n+\n+        # Clean up\n+        os.remove(manage_py_path)\n     def test_common_roots(self):\n         paths = (\n             Path('/first/second'),\n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..99fdce7 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -141,6 +141,48 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         self.assertEqual(autoreload.iter_modules_and_files((fake_main,), frozenset()), frozenset())\n \n \n+class TestAutoreload(SimpleTestCase):\n+    ...\n+\n+    def test_path_with_null_byte_in_directory(self):\n+        paths_with_null_byte = [\n+            'dir\\x00ectory/regular_file.py',\n+            'another_directory/regular_file.py',\n+            'regular_directory/dir\\x00ectory/regular_file.py'\n+        ]\n+        for path in paths_with_null_byte:\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset(),\n+                )\n+\n+    def test_multiple_null_bytes_in_path(self):\n+        paths_with_multiple_null_bytes = [\n+            'null\\x00byte\\x00path/file.py',\n+            '\\x00start/null\\x00byte/file.py',\n+            'regular_directory/multi\\x00null\\x00bytes/file.py'\n+        ]\n+        for path in paths_with_multiple_null_bytes:\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset(),\n+                )\n+\n+    def test_path_with_null_byte_in_filename(self):\n+        paths_with_null_byte_in_filename = [\n+            'directory/file_with_null\\x00byte.py',\n+            'another_directory/another_file\\x00.py',\n+            'regular_dir/another\\x00file.py'\n+        ]\n+        for path in paths_with_null_byte_in_filename:\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset(),\n+                )\n+\n class TestCommonRoots(SimpleTestCase):\n     def test_common_roots(self):\n         paths = (\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..3be6397 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -19,6 +19,8 @@ from django.test.utils import LoggingCaptureMixin\n from django.urls import path, reverse\n from django.utils.functional import SimpleLazyObject\n from django.utils.safestring import mark_safe\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.views.debug import (\n     CLEANSED_SUBSTITUTE, CallableSettingWrapper, ExceptionReporter,\n     Path as DebugPath, cleanse_setting, default_urlconf,\n@@ -242,7 +244,28 @@ class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n \n-    def test_handle_db_exception(self):\n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        Test that raising Http404 in a path converter's to_python method\n+        results in a technical 404 response when DEBUG is True.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    def test_converter_valueerror_handling(self):\n+        \"\"\"\n+        Test that raising a ValueError in a path converter's to_python method\n+        results in URL pattern mismatch, allowing other patterns to be tried.\n+        \"\"\"\n+        class CustomIntConverter(IntConverter):\n+            def to_python(self, value):\n+                raise ValueError(\"Invalid integer\")\n+\n+        with mock.patch('django.urls.converters.IntConverter', CustomIntConverter):\n+            response = self.client.get('/path-post/abc/')\n+            # Assuming there is no valid path for /path-post/abc/, it should also result in a 404.\n+            self.assertContains(response, 'Page not found', status_code=404)\n         \"\"\"\n         Ensure the debug view works when a database exception is raised by\n         performing an invalid query and passing the exception to the debug view.\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..c95a9ed 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -334,6 +334,64 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n+    def test_choices_exceeds_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=3, choices=[('LONG', 'Long Choice')]\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value \"\n+                \"in 'choices' (4 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_max_length_equals_longest_choice(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=4, choices=[('LONG', 'Long Choice'), ('MID', 'Mid')]\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [])\n+\n+    def test_empty_choices(self):\n+        class Model(models.Model):\n+            field = models.CharField(max_length=1, choices=[])\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [])\n+\n     @unittest.skipUnless(connection.vendor == 'mysql',\n                          \"Test valid only for MySQL\")\n     def test_too_long_char_field_under_mysql(self):\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..94d924f 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -257,6 +257,24 @@ class WriterTests(SimpleTestCase):\n             A = 'a-value'\n             B = 'value-b'\n \n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        field = models.CharField(\n+            default=TranslatedEnum.GOOD,\n+            choices=[(tag, tag.value) for tag in TranslatedEnum],\n+            max_length=128,\n+        )\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('GOOD', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('BAD', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n+\n         class BinaryEnum(enum.Enum):\n             A = b'a-value'\n             B = b'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..ad07d17 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -312,7 +313,29 @@ class HttpDateProcessingTests(unittest.TestCase):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n \n-    def test_parsing_rfc1123(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_century_logic(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Set a fixed current date for testing\n+        current_date = datetime(2023, 11, 6, 8, 49, 37)\n+        mocked_datetime.utcnow.return_value = current_date\n+\n+        # Based on the current_date year (2023), test various 2-digit year cases\n+        tests = [\n+            ('Sunday, 31-Dec-49 08:49:37 GMT', datetime(2049, 12, 31, 8, 49, 37)),  # 49 should be 2049\n+            ('Tuesday, 10-Nov-50 08:49:37 GMT', datetime(1950, 11, 10, 8, 49, 37)),  # 50 should be 1950\n+            ('Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),  # 99 should be 1999\n+            ('Wednesday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),  # 00 should be 2000\n+            ('Thursday, 01-Jan-70 00:00:00 GMT', datetime(1970, 1, 1, 0, 0, 0)),  # 70 should be 1970\n+            ('Saturday, 01-Jan-71 00:00:00 GMT', datetime(1971, 1, 1, 0, 0, 0)),  # 71 should be 1971\n+        ]\n+        \n+        for rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..d669053 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,14 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+class TestEnumStringConversion(SimpleTestCase):\n+    def test_enum_string_conversion(self):\n+        for enum_class in [Gender, Suit, YearInSchool, Vehicle]:\n+            for member in enum_class:\n+                with self.subTest(member=member):\n+                    # Check that str(member) gives the expected output\n+                    self.assertEqual(str(member), str(member.value))\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..902bdb2 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -162,7 +162,18 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertEqual(Whiz(c='').get_c_display(), '')        # Empty value\n         self.assertEqual(WhizDelayed(c=0).get_c_display(), 'Other')  # Delayed choices\n \n-    def test_get_FIELD_display_translated(self):\n+    def test_override_get_FIELD_display(self):\n+        \"\"\"Test overriding get_FIELD_display in Django 2.2+.\"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        # Create an instance of FooBar\n+        f = FooBar(foo_bar=1)\n+        # Assert that the overridden method returns the expected value\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n         \"\"\"A translated display value is coerced to str.\"\"\"\n         val = Whiz(c=5).get_c_display()\n         self.assertIsInstance(val, str)\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..c1e2b62 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,29 @@\n+\n+class InheritedChoicesModelTests(TestCase):\n+    def test_inherited_choices_get_display(self):\n+        class BaseModel(models.Model):\n+            foo = models.CharField(max_length=254, choices=[(\"A\", \"Base A\"), (\"B\", \"Base B\")])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ChildModel(BaseModel):\n+            foo = models.CharField(max_length=254, choices=[(\"A\", \"Child A\"), (\"B\", \"Child B\"), (\"C\", \"Child C\")])\n+\n+        # Test that ChildModel correctly overrides and adds to the choices of BaseModel\n+        instance_a = ChildModel(foo=\"A\")\n+        self.assertEqual(instance_a.get_foo_display(), \"Child A\")\n+\n+        instance_b = ChildModel(foo=\"B\")\n+        self.assertEqual(instance_b.get_foo_display(), \"Child B\")\n+\n+        instance_c = ChildModel(foo=\"C\")\n+        self.assertEqual(instance_c.get_foo_display(), \"Child C\")\n+\n+        # Test an invalid choice\n+        instance_invalid = ChildModel(foo=\"D\")\n+        self.assertEqual(instance_invalid.get_foo_display(), \"D\")\n+\n import pickle\n \n from django import forms\n",
  "django__django-12286": "",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..00c6278 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -5,7 +6,8 @@ from django.db import DEFAULT_DB_ALIAS, connection, connections\n from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n-from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n+from django.test import SimpleTestCase, TransactionTestCase\n \n \n def get_connection_copy():\n@@ -18,6 +20,52 @@ def get_connection_copy():\n     return test_connection\n \n \n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_ordering_constraint(self):\n+        # Test ordering constraint where ObjectReference should be deserialized before Object.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        with self.assertRaises(Exception) as context:\n+            connection.creation.deserialize_db_from_string(data)\n+        \n+        self.assertIn('integrity error', str(context.exception).lower())\n+\n class TestDbSignatureTests(SimpleTestCase):\n     def test_default_name(self):\n         # A test db name isn't set.\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..2c25c62 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -159,7 +159,34 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_relationship_model_with_foreign_key_to_wrong_model(self):\n+    def test_corrected_hint_for_recursive_relationship(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            members = models.ManyToManyField('Person', through='CorrectedRelationship')\n+\n+        class CorrectedRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('members')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.members', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"CorrectedRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n         class WrongModel(models.Model):\n             pass\n \n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..e7b6d9f 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1249,7 +1249,89 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n-    def test_request_meta_filtering(self):\n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n+    def test_recursively_cleanse_nested_iterables(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'foo': 'value',\n+            'secret': 'value',\n+            'token': 'value',\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': 'value'},\n+                {'token': 'value'},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': 'value'},\n+                    {'token': 'value'},\n+                ],\n+            ]\n+        }\n+        cleansed = {\n+            'foo': 'value',\n+            'secret': reporter_filter.cleansed_substitute,\n+            'token': reporter_filter.cleansed_substitute,\n+            'something': [\n+                {'foo': 'value'},\n+                {'secret': reporter_filter.cleansed_substitute},\n+                {'token': reporter_filter.cleansed_substitute},\n+            ],\n+            'else': [\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+                [\n+                    {'foo': 'value'},\n+                    {'secret': reporter_filter.cleansed_substitute},\n+                    {'token': reporter_filter.cleansed_substitute},\n+                ],\n+            ]\n+        }\n+        cleansed_setting = reporter_filter.cleanse_setting('MY_SETTING', initial)\n+        self.assertEqual(cleansed_setting, cleansed)\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n         self.assertEqual(\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..706a0b9 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,8 +1759,28 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n-    def test_add_constraint(self):\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_remove_with_unique_together_refactor(self):\n+        app_label = 'test_alintoremove_wunto_refactor'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n         gt_constraint = models.CheckConstraint(check=gt_check, name=\"test_add_constraint_pony_pink_gt_2\")\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..2d0d278 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -697,7 +697,25 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n-    def test_fast_delete_combined_relationships(self):\n+    def test_queryset_delete_zero_objects_simple_model(self):\n+        \"\"\"\n+        Test QuerySet.delete() when zero objects are deleted for a simple model without foreign keys.\n+        The result should consistently include the model with a '0' count in the dictionary.\n+        \"\"\"\n+        BlockLibrary.objects.all().delete()  # Ensure the database is empty\n+        deleted, deleted_objs = BlockLibrary.objects.all().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'my_app.BlockLibrary': 0})\n+\n+    def test_queryset_delete_zero_objects_foreign_key_model(self):\n+        \"\"\"\n+        Test QuerySet.delete() when zero objects are deleted for a model with foreign keys.\n+        The result should consistently include the model with a '0' count in the dictionary.\n+        \"\"\"\n+        R.objects.all().delete()  # Ensure no R objects exist\n+        deleted, deleted_objs = R.objects.all().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'my_app.R': 0})\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n         origin = Origin.objects.create()\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..ae35d6b 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,39 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_static_file_not_found(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request for a non-existent file.\n+        scope = self.async_request_factory._base_scope(path='/static/not-found.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Read the response.\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 404)\n+        # Ensure no body for not-found response.\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], b'')\n+\n+    async def test_static_file_with_query_params(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request with query parameters.\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt?version=123')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..123be9f 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -203,7 +203,18 @@ class TestUtilsText(SimpleTestCase):\n         # interning the result may be useful, e.g. when fed to Path.\n         self.assertEqual(sys.intern(text.slugify('a')), 'a')\n \n-    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_slugify_strips_dashes_and_underscores(self):\n+        items = (\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('--strip-dash-and-underscores___', 'strip-dash-and-underscores', False),\n+            ('__leading-and-trailing--', 'leading-and-trailing', False),\n+            ('no-special__characters--', 'no-special-characters', False),\n+            ('already-slugified', 'already-slugified', False),\n+            ('--mixed_case-EXAMPLE--', 'mixed-case-example', False),\n+            ('__strip-mixed_dash-and_underscore--', 'strip-mixed-dash-and-underscore', False),\n+        )\n+        for value, expected, is_unicode in items:\n+            self.assertEqual(text.slugify(value, allow_unicode=is_unicode), expected)\n     def test_unescape_entities(self):\n         items = [\n             ('', ''),\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..778d1b5 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2828,9 +2828,62 @@ class LimitChoicesToTests(TestCase):\n             self.assertEqual(today_callable_dict.call_count, 2)\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n+class ForeignKeyLimitChoicesTests(TestCase):\n+\n+    def setUp(self):\n+        # Setting up Characters\n+        self.marley = Character.objects.create(username=\"Marley\", last_action=\"2023-10-01T00:00\")\n+        self.threepwood = Character.objects.create(username=\"Threepwood\", last_action=\"2023-10-01T01:00\")\n+\n+        # Setting up StumpJokes\n+        self.joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        self.joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        self.joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.marley)\n+        self.joke4 = StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+\n+        self.joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        self.joke2.has_fooled_today.add(self.marley)\n+        self.joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n \n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n \n-class FormFieldCallbackTests(SimpleTestCase):\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(form.fields['character1'].queryset, [self.marley, self.threepwood])\n+        self.assertCountEqual(form.fields['character2'].queryset, [self.marley, self.threepwood])\n+        self.assertCountEqual(form.fields['character3'].queryset, [self.marley, self.threepwood])\n \n     def test_baseform_with_widgets_in_meta(self):\n         \"\"\"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\"\"\"\n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..9572636 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -2,6 +2,7 @@ from django.contrib.contenttypes.fields import (\n     GenericForeignKey, GenericRelation,\n )\n from django.contrib.contenttypes.models import ContentType\n+from django.db import models\n from django.core.checks import Error\n from django.core.exceptions import FieldDoesNotExist, FieldError\n from django.db import models\n@@ -11,7 +12,31 @@ from django.test.utils import isolate_apps\n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n-    def test_single_parent(self):\n+    def test_abstract_inherited_fields_not_equal(self):\n+        \"\"\"Fields from abstract models should not compare as equal when inherited.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n \n@@ -347,4 +372,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..5563025 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -45,6 +45,34 @@ class SiteEachContextTest(TestCase):\n         request.user = self.u1\n         self.assertEqual(site.each_context(request)['site_url'], '/my-script-name/')\n \n+from django.urls import reverse\n+from django.test import TestCase\n+from django.contrib.admin.sites import AdminSite\n+from admin_views.models import Article\n+from auth.models import User\n+\n+class TestAdminSite(TestCase):\n+    def setUp(self):\n+        self.site = AdminSite()\n+\n+    def test_app_list_contains_model_class(self):\n+        request = self.client.request().wsgi_request\n+        app_list = self.site.get_app_list(request)\n+\n+        # Check if Article model is present and correct\n+        article_dict = next(\n+            (model for app in app_list for model in app['models'] if model['object_name'] == 'Article'), None\n+        )\n+        self.assertIsNotNone(article_dict)\n+        self.assertEqual(article_dict['model'], Article)\n+\n+        # Check if User model is present and correct\n+        user_dict = next(\n+            (model for app in app_list for model in app['models'] if model['object_name'] == 'User'), None\n+        )\n+        self.assertIsNotNone(user_dict)\n+        self.assertEqual(user_dict['model'], User)\n+\n     def test_available_apps(self):\n         ctx = self.ctx\n         apps = ctx['available_apps']\n",
  "django__django-13551": "diff --git a/tests/auth_tests/models/__init__.py b/tests/auth_tests/models/__init__.py\nindex c6505e4..bb7b322 100644\n--- a/tests/auth_tests/models/__init__.py\n+++ b/tests/auth_tests/models/__init__.py\n@@ -1,3 +1,4 @@\n+\n from .custom_permissions import CustomPermissionsUser\n from .custom_user import (\n     CustomUser, CustomUserWithoutIsActiveField, ExtensionUser,\n@@ -10,6 +11,7 @@ from .proxy import Proxy, UserProxy\n from .uuid_pk import UUIDUser\n from .with_foreign_key import CustomUserWithFK, Email\n from .with_integer_username import IntegerUsernameUser\n+from .with_custom_email_field import CustomEmailField\n from .with_last_login_attr import UserWithDisabledLastLoginField\n from .with_many_to_many import (\n     CustomUserWithM2M, CustomUserWithM2MThrough, Organization,\n@@ -22,4 +24,4 @@ __all__ = (\n     'IntegerUsernameUser', 'IsActiveTestUser1', 'MinimalUser',\n     'NoPasswordUser', 'Organization', 'Proxy', 'UUIDUser', 'UserProxy',\n     'UserWithDisabledLastLoginField',\n-)\n+)\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..a4a2024 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -875,6 +876,39 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ['<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>', '<Company: 5060 Ltd>'],\n             ordered=False\n         )\n+\n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_with_resolution(self):\n+        # Test with expressions\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        min_expr = F('num_employees') - 48\n+        max_expr = F('num_employees') + 1\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=min_expr, maximum=max_expr),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_with_empty_range(self):\n+        # Test with an empty range to ensure no errors occur\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=101, maximum=150),\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_range_lookup_namedtuple_with_negative_values(self):\n+        # Test with negative values\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=-10, maximum=0),\n+        )\n+        self.assertSequenceEqual(qs, [])\n         self.assertQuerysetEqual(\n             Company.objects.filter(num_employees__range=(1, 100)),\n             [\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..fa1612b 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -27,7 +27,9 @@ from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n from django.db import ConnectionHandler, connection\n+from unittest import mock\n from django.db.migrations.recorder import MigrationRecorder\n+from django.core.management import execute_from_command_line\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n@@ -1867,7 +1869,42 @@ class ArgumentOrder(AdminScriptTestCase):\n         )\n \n \n-@override_settings(ROOT_URLCONF='admin_scripts.urls')\n+class ExecuteFromCommandLine(SimpleTestCase):\n+\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_when_sys_argv_is_none(self):\n+        \"\"\"\n+        Test scenario where sys.argv[0] is None and argv passed to \n+        execute_from_command_line provides proper program name.\n+        \"\"\"\n+        args = ['help', 'migrate']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin migrate', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_different_entry(self):\n+        \"\"\"\n+        Test scenario with a different entry point name.\n+        \"\"\"\n+        args = ['help', 'check']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['alternative-script'] + args):\n+                execute_from_command_line(['alternative-script'] + args)\n+        self.assertIn('usage: alternative-script check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n \n     available_apps = [\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..699389d 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -7,8 +8,24 @@ from django.core.management import CommandError, call_command\n from django.test import SimpleTestCase\n from django.test.utils import captured_stdin, captured_stdout\n \n-\n class ShellCommandTestCase(SimpleTestCase):\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n \n     def test_command_option(self):\n         with self.assertLogs('test', 'INFO') as cm:\n@@ -49,4 +66,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..4218d48 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -963,9 +963,27 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n         self.assertNotContains(response, 'id=\"id_question_set-0-text\"')\n \n \n-@override_settings(ROOT_URLCONF='admin_inlines.urls')\n+from django.test import override_settings\n+from django.urls import reverse\n+from django.contrib.admin.sites import site as admin_site\n+from django.contrib.admin import ModelAdmin, TabularInline\n+from django.test import RequestFactory, TestCase\n+from .models import ProfileCollection, Profile, VerboseNameProfile, VerboseNamePluralProfile, BothVerboseNameProfile\n+class TestDataMixin:\n+    # Assuming some setup here if needed\n+    pass\n+\n class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n     factory = RequestFactory()\n+    superuser = None  # Assuming a superuser will be set up in setUp() method or similar\n+\n+    def setUp(self):\n+        self.superuser = self.create_superuser()\n+\n+    def create_superuser(self):\n+        # Mock implementation of creating a superuser\n+        return User.objects.create_superuser(username='super', password='secret', email='super@example.com')\n+    factory = RequestFactory()\n \n     def test_verbose_name_plural_inline(self):\n         class NonVerboseProfileInline(TabularInline):\n@@ -1013,7 +1031,38 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertContains(response, 'Add another Model with both - name')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n \n-    def test_both_verbose_names_inline(self):\n+    def test_default_verbose_name_plural_when_only_verbose_name_is_set(self):\n+        class VerboseOnlyInline(TabularInline):\n+            model = Profile\n+            verbose_name = 'Single Profile'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [VerboseOnlyInline]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+\n+        # Ensure the plural form defaults to 'Single Profiles' based on the verbose_name\n+        self.assertContains(response, '<h2>Single Profiles</h2>')\n+        self.assertContains(response, 'Add another Single Profile')\n+\n+    def test_default_verbose_name_plural_when_neither_is_set(self):\n+        class DefaultInline(TabularInline):\n+            model = Profile\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [DefaultInline]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+\n+        # Ensure the default is the verbose_name_plural from the model's Meta\n+        self.assertContains(response, '<h2>Profiles</h2>')\n+        self.assertContains(response, 'Add another Profile')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name = 'Non-verbose childs - name'\n@@ -1072,7 +1121,12 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertNotContains(response, 'Add another Model with both - name')\n \n \n-@override_settings(ROOT_URLCONF='admin_inlines.urls')\n+from django.test import override_settings\n+from django.urls import reverse\n+from django.contrib.admin.sites import site as admin_site\n+from django.contrib.admin import ModelAdmin, TabularInline\n+from django.test import RequestFactory, TestCase\n+from .models import ProfileCollection, Profile, VerboseNameProfile, VerboseNamePluralProfile, BothVerboseNameProfile\n class SeleniumTests(AdminSeleniumTestCase):\n \n     available_apps = ['admin_inlines'] + AdminSeleniumTestCase.available_apps\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..5cfe389 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -595,7 +595,33 @@ class TestQuerying(TestCase):\n             [self.objs[4]],\n         )\n \n-    def test_isnull_key_or_none(self):\n+    def test_isnull_json_key(self):\n+        # Test specifically for SQLite and Oracle where the issue was present.\n+        # For the key `j`, ensure that __isnull=True does not match JSON null.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        # Test for another key to ensure the behavior is consistent.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__b__isnull=True),\n+            self.objs[:3] + self.objs[5:],\n+        )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__b__isnull=False),\n+            [self.objs[3], self.objs[4]],\n+        )\n+        # Ensure JSON nulls are not counted when isnull=True.\n+        obj_with_json_null = NullableJSONModel.objects.create(value={'b': None})\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__b__isnull=True),\n+            self.objs[:3] + self.objs[5:] + [obj_with_json_null],\n+        )\n+        obj_with_key_only = NullableJSONModel.objects.create(value={'c': 'value'})\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__c__isnull=True),\n+            self.objs[:5],\n+        )\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),\n",
  "django__django-13768": "",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..8fef465 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,8 +281,37 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Create choices for the model choice field tests below.\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+        ChoiceModel.objects.create(pk=3, name='c')\n+\n+        # Test that the invalid_choice message contains the invalid value\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(['\"invalid\" is not one of the available choices.'], f.clean, 'invalid')\n+\n+    def test_modelmultiplechoicefield_value_placeholder(self):\n+        # ModelMultipleChoiceField\n+        f = ModelMultipleChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+                'invalid_list': 'Enter a list of values.',\n+            },\n+        )\n+        # Test for a single invalid choice in the list\n+        self.assertFormErrors(['\"invalid\" is not one of the available choices.'], f.clean, ['invalid'])\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +336,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..132950f 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -59,7 +59,11 @@ class Second(models.Model):\n \n # Protect against repetition of #1839, #2415 and #2536.\n class Third(models.Model):\n-    name = models.CharField(max_length=20)\n+    sku = models.CharField(primary_key=True, max_length=50)\n+\n+\n+class Order(models.Model):\n+    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n@@ -69,7 +73,11 @@ class Parent(models.Model):\n \n \n class Child(models.Model):\n-    name = models.CharField(max_length=20)\n+    sku = models.CharField(primary_key=True, max_length=50)\n+\n+\n+class Order(models.Model):\n+    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n     parent = models.ForeignKey(Parent, models.CASCADE)\n \n \n@@ -83,7 +91,11 @@ class ToFieldChild(models.Model):\n \n # Multiple paths to the same model (#7110, #7125)\n class Category(models.Model):\n-    name = models.CharField(max_length=20)\n+    sku = models.CharField(primary_key=True, max_length=50)\n+\n+\n+class Order(models.Model):\n+    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n \n     def __str__(self):\n         return self.name\n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..27e0d3e 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,9 +1,19 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n \n class QTests(SimpleTestCase):\n-    def test_combine_and_empty(self):\n+    def test_q_object_with_non_pickleable_keys(self):\n+        # Test the AND operation with non-pickleable dict_keys()\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+\n+        # Test the OR operation with non-pickleable dict_keys()\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n         q = Q(x=1)\n         self.assertEqual(q & Q(), q)\n         self.assertEqual(Q() & q, q)\n",
  "django__django-14017": "",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..dd0cac1 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1146,6 +1146,11 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+from django.urls import resolve, ResolverMatch\n+from django.test import SimpleTestCase, override_settings\n+from . import views\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..47199ed 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2217,7 +2217,26 @@ class StartApp(AdminScriptTestCase):\n             \"won't replace conflicting files.\"\n         )\n \n-    def test_template(self):\n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app1')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app1', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n+    def test_multiple_trailing_slashes_in_target_app_directory_name(self):\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app2')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app2', '///')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n+    def test_trailing_backslash_in_target_app_directory_name(self):\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app3')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app3', '\\\\')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n         out, err = self.run_django_admin(['startapp', 'new_app'])\n         self.assertNoOutput(err)\n         app_path = os.path.join(self.test_dir, 'new_app')\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..31b7c5a 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -2,6 +2,7 @@ import datetime\n import re\n from unittest import mock\n \n+from django.forms import forms\n from django.contrib.auth.forms import (\n     AdminPasswordChangeForm, AuthenticationForm, PasswordChangeForm,\n     PasswordResetForm, ReadOnlyPasswordHashField, ReadOnlyPasswordHashWidget,\n@@ -1026,6 +1027,38 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n \n \n+class ReadOnlyPasswordHashWidgetTest(SimpleTestCase):\n+    def test_label_without_for_attribute(self):\n+        \"\"\"\n+        Ensure the <label> for ReadOnlyPasswordHashWidget has no 'for' attribute.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        self.assertIsNone(bound_field.field.widget.id_for_label('id'))  # Should be None\n+        self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')  # No 'for' attribute\n+\n+    def test_widget_renders_text(self):\n+        \"\"\"\n+        Verify that ReadOnlyPasswordHashWidget renders text, confirming it's non-labelable.\n+        \"\"\"\n+        widget = ReadOnlyPasswordHashWidget()\n+        rendered = widget.render('name', 'hashed_password_value')\n+        self.assertIn('hashed_password_value', rendered)\n+        self.assertNotIn('<input', rendered)  # No input fields\n+\n+    def test_widget_with_different_field_name(self):\n+        \"\"\"\n+        Test the widget with a different field name to ensure consistent label behavior.\n+        \"\"\"\n+        class AnotherTestForm(forms.Form):\n+            another_hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = AnotherTestForm()['another_hash_field']\n+        self.assertIsNone(bound_field.field.widget.id_for_label('id'))\n+        self.assertEqual(bound_field.label_tag(), '<label>Another hash field:</label>')\n+\n class AdminPasswordChangeFormTest(TestDataMixin, TestCase):\n \n     @mock.patch('django.contrib.auth.password_validation.password_changed')\n",
  "django__django-14580": "",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..7a28cf4 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -336,7 +336,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -358,7 +361,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -982,7 +988,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 6fb82ec..4772c3a 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -820,18 +820,33 @@ class ShadowingFieldsTests(SimpleTestCase):\n                 id='models.E006',\n             )\n         ])\n+    def test_proxy_model_m2m_through_fields_hashable(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n \n-    def test_multiinheritance_clash(self):\n-        class Mother(models.Model):\n-            clash = models.IntegerField()\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n \n-        class Father(models.Model):\n-            clash = models.IntegerField()\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n \n-        class Child(Mother, Father):\n-            # Here we have two clashed: id (automatic field) and clash, because\n-            # both parents define these fields.\n-            pass\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+        \n+        # Ensure no TypeError due to unhashable 'list' error\n+        try:\n+            hash(Child._meta.get_field('many_to_many_field').remote_field)\n+        except TypeError as e:\n+            self.fail(f\"Hashing failed with error: {e}\")\n \n         self.assertEqual(Child.check(), [\n             Error(\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..833d164 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -294,6 +294,72 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n         })\n \n \n+import json\n+import datetime\n+from django.urls import path\n+from django.http import JsonResponse\n+from django.contrib.auth.models import User\n+from django.test import RequestFactory, TestCase, override_settings\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+from .models import Question\n+\n+class AutocompleteJsonViewTests(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com')\n+        self.url = '/admin/autocomplete/'\n+        self.opts = {}\n+\n+    def test_serialize_result_customization(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        # Create test data\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+\n+        # Create a request for the autocomplete view\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+\n+        # Execute the view\n+        response = AutocompleteJsonSerializeResultView.as_view()(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+        # Check the response content\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n+    def test_serialize_result_without_additional_fields(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return super().serialize_result(obj, to_field_name)\n+\n+        Question.objects.create(question='Question 3', posted=datetime.date(2021, 8, 10))\n+\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+\n+        response = AutocompleteJsonSerializeResultView.as_view()(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()],\n+            'pagination': {'more': False},\n+        })\n+\n @override_settings(ROOT_URLCONF='admin_views.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n     available_apps = ['admin_views'] + AdminSeleniumTestCase.available_apps\n",
  "django__django-14787": "",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..ff8746a 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,26 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        # Create two instances of ModelChoiceIteratorValue with different primary keys\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        \n+        # Assert that the same instance has the same hash value\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        \n+        # Assert that different instances have different hash values\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+        \n+        # Test adding ModelChoiceIteratorValue to a set, which requires hashing\n+        test_set = {value_1, value_2}\n+        self.assertIn(value_1, test_set)\n+        self.assertIn(value_2, test_set)\n+        \n+        # Test using ModelChoiceIteratorValue as dictionary keys\n+        test_dict = {value_1: 'value1', value_2: 'value2'}\n+        self.assertEqual(test_dict[value_1], 'value1')\n+        self.assertEqual(test_dict[value_2], 'value2')\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..b2652e9 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -136,7 +136,23 @@ class MultiValueFieldTest(SimpleTestCase):\n         f = MultiValueField(fields=(CharField(), CharField()), disabled=True)\n         self.assertIs(f.has_changed(['x', 'x'], ['y', 'y']), False)\n \n-    def test_form_as_table(self):\n+    def test_multivaluewidget_label_without_for(self):\n+        class NoForLabelWidget(MultiWidget):\n+            def __init__(self, attrs=None):\n+                widgets = [TextInput(), TextInput()]\n+                super().__init__(widgets, attrs)\n+\n+            def decompress(self, value):\n+                return value.split(',') if value else ['', '']\n+\n+        class NoForLabelForm(Form):\n+            myfield = CharField(widget=NoForLabelWidget(), label=\"My Field\")\n+\n+        form = NoForLabelForm()\n+        rendered = form.as_table()\n+        self.assertInHTML('<tr><th><label>My Field:</label></th>', rendered)\n+        self.assertInHTML('<input type=\"text\" name=\"myfield_0\" id=\"id_myfield_0\">', rendered)\n+        self.assertInHTML('<input type=\"text\" name=\"myfield_1\" id=\"id_myfield_1\">', rendered)\n         form = ComplexFieldForm()\n         self.assertHTMLEqual(\n             form.as_table(),\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..c29468e 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -70,6 +70,9 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # IPv6.\n             ('http://[12:34::3a53]/', 'http://[12:34::3a53]/'),\n             ('http://[a34:9238::]:8080/', 'http://[a34:9238::]:8080/'),\n+            # This should raise a ValidationError, not a ValueError\n+            '////]@N.AN',\n+            '#@A.bO',\n         ]\n         for url, expected in tests:\n             with self.subTest(url=url):\n@@ -100,6 +103,9 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # even on domains that don't fail the domain label length check in\n             # the regex.\n             'http://%s' % (\"X\" * 200,),\n+            # This should raise a ValidationError, not a ValueError\n+            '////]@N.AN',\n+            '#@A.bO',\n         ]\n         msg = \"'Enter a valid URL.'\"\n         for value in tests:\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..48ee5b7 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -2,6 +2,7 @@ import datetime\n from decimal import Decimal\n \n from django.core.exceptions import FieldDoesNotExist, FieldError\n+from django.db import connection\n from django.db.models import (\n     BooleanField, Case, CharField, Count, DateTimeField, DecimalField, Exists,\n     ExpressionWrapper, F, FloatField, Func, IntegerField, Max, OuterRef, Q,\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..be1995e 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -163,7 +164,36 @@ class CookieTests(BaseTests, SimpleTestCase):\n         decoded_messages = json.loads(value, cls=MessageDecoder)\n         self.assertEqual(messages, decoded_messages)\n \n-    def test_safedata(self):\n+    def test_extra_tags_serialization(self):\n+        \"\"\"\n+        Test that an empty string in extra_tags is correctly preserved \n+        after encoding and decoding.\n+        \"\"\"\n+        storage = self.get_storage()\n+        message = Message(constants.INFO, 'Test message', extra_tags='')\n+        encoded_message = storage._encode(message)\n+        decoded_message = storage._decode(encoded_message)\n+        self.assertEqual(decoded_message.extra_tags, '')\n+\n+    def test_none_extra_tags_serialization(self):\n+        \"\"\"\n+        Test that None as extra_tags remains None after encoding and decoding.\n+        \"\"\"\n+        storage = self.get_storage()\n+        message = Message(constants.INFO, 'Test message', extra_tags=None)\n+        encoded_message = storage._encode(message)\n+        decoded_message = storage._decode(encoded_message)\n+        self.assertIsNone(decoded_message.extra_tags)\n+\n+    def test_non_empty_extra_tags_serialization(self):\n+        \"\"\"\n+        Test that non-empty extra_tags are correctly preserved after encoding and decoding.\n+        \"\"\"\n+        storage = self.get_storage()\n+        message = Message(constants.INFO, 'Test message', extra_tags='some tags')\n+        encoded_message = storage._encode(message)\n+        decoded_message = storage._decode(encoded_message)\n+        self.assertEqual(decoded_message.extra_tags, 'some tags')\n         \"\"\"\n         A message containing SafeData is keeping its safe status when\n         retrieved from the message storage.\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..2230993 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -1,5 +1,10 @@\n from pathlib import Path\n from unittest import mock\n+import os\n+import tempfile\n+from django.conf import settings\n+from django.core.management import call_command\n+from django.core.files import File\n \n from django.template import autoreload\n from django.test import SimpleTestCase, override_settings\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..8091997 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,7 +185,34 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        An empty If-Modified-Since header should not raise an exception.\n+        \"\"\"\n+        try:\n+            self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+        except Exception as e:\n+            self.fail(f\"was_modified_since raised an exception for an empty header: {e}\")\n+            \n+    def test_was_modified_since_none_header(self):\n+        \"\"\"\n+        A None If-Modified-Since header should be handled properly.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=None, mtime=1))\n+        \n+    def test_was_modified_since_valid_date_header(self):\n+        \"\"\"\n+        A valid If-Modified-Since header should return False if not modified.\n+        \"\"\"\n+        mtime = 1343416141\n+        header = http_date(mtime)\n+        self.assertFalse(was_modified_since(header, mtime))\n+        \n+    def test_was_modified_since_invalid_date_header(self):\n+        \"\"\"\n+        An invalid If-Modified-Since header should not raise an exception and be treated as modified.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"invalid-date\", mtime=1))\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..a9067cc 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -7,6 +8,7 @@ from admin_scripts.tests import AdminScriptTestCase\n from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n+from argparse import ArgumentDefaultsHelpFormatter\n from django.core.management import BaseCommand, CommandError, find_commands\n from django.core.management.utils import (\n     find_command,\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..a77115f 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,5 +1,8 @@\n+\n import os\n from datetime import datetime\n+import json\n+from django.core.serializers.json import DjangoJSONEncoder\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n@@ -217,7 +220,34 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return json.dumps({\"custom\": \"encoder\"})\n+\n+        # Using the custom encoder should produce different output\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"custom\": \"encoder\"}</script>',\n+        )\n+\n+    def test_json_script_default_encoder(self):\n+        # Ensure the default encoder is still DjangoJSONEncoder\n+        self.assertHTMLEqual(\n+            json_script({\"default\": \"encoder\"}),\n+            '<script type=\"application/json\">{\"default\": \"encoder\"}</script>',\n+        )\n+\n+    def test_json_script_ensures_encoder_parameter(self):\n+        class ReplacingEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return json.dumps({\"replaced\": \"content\"})\n+\n+        # Verify that a different encoder changes the output\n+        self.assertHTMLEqual(\n+            json_script({\"original\": \"content\"}, encoder=ReplacingEncoder),\n+            '<script type=\"application/json\">{\"replaced\": \"content\"}</script>',\n+        )\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..547d51e 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -161,7 +161,20 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n     @override_settings(\n         INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n     )\n-    def test_template_tags_with_same_library_name_and_module_name(self):\n+    @override_settings(\n+        INSTALLED_APPS=[\n+            \"check_framework.template_test_apps.same_tags_app_1\"\n+        ]\n+    )\n+    def test_template_tags_same_library_in_installed_apps_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"same_tags\", \"same_tags_app_1.templatetags.same_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n         with self.settings(\n             TEMPLATES=[\n                 self.get_settings(\n@@ -206,4 +219,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..738aba8 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -395,7 +395,18 @@ class ProxyModelTests(TestCase):\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n \n-    def test_eq(self):\n+    def test_select_related_only_proxy_model(self):\n+        user = ProxyCustomModel.objects.create(name=\"John Doe\")\n+        another_obj = AnotherModel.objects.create(custom=user)\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        self.assertEqual(qs.get(), another_obj)\n+\n+    def test_select_related_only_proxy_model_with_exception(self):\n+        user = ProxyCustomModel.objects.create(name=\"Jane Doe\")\n+        AnotherModel.objects.create(custom=user)\n+        \n+        with self.assertRaises(ValueError):\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__non_existent_field\"))\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..2da5bfc 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,7 +151,23 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n-    def test_parameters(self):\n+    def test_extra_parameters_before_dbname(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n+\n+    def test_parameters_with_user(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env(\n+                {\n+                    \"NAME\": \"dbname\",\n+                    \"USER\": \"anotheruser\",\n+                },\n+                [\"-c\", \"SELECT 1\"]\n+            ),\n+            ([\"psql\", \"-U\", \"anotheruser\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n@@ -183,4 +199,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..5bdf99d 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -173,6 +173,20 @@ class FormsFormsetTestCase(SimpleTestCase):\n             self.assertTrue(hasattr(form, \"custom_kwarg\"))\n             self.assertEqual(form.custom_kwarg, i)\n \n+    def test_empty_permitted_ignored_empty_form(self):\n+        \"\"\"\n+        Test that setting 'empty_permitted' in form_kwargs does not affect\n+        formset.empty_form as it is expected to be ignored.\n+        \"\"\"\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": False})\n+        # empty_form should ignore empty_permitted setting\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n+        formset_with_empty_permitted_true = FormSet(form_kwargs={\"empty_permitted\": True})\n+        # Test with the opposite boolean value\n+        self.assertIs(formset_with_empty_permitted_true.empty_form.empty_permitted, True)\n+\n     def test_form_kwargs_empty_form(self):\n         FormSet = formset_factory(CustomKwargForm)\n         formset = FormSet(form_kwargs={\"custom_kwarg\": 1})\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..5ab98fc 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,22 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_empty(self):\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+    def test_negative_number(self):\n+        self.assertEqual(nformat(-1234, \".\"), \"-1234\")\n+        self.assertEqual(nformat(-1234.56, \".\", decimal_pos=1), \"-1234.5\")\n+\n+    def test_none_and_empty_handling(self):\n+        # Verify that None doesn't cause IndexError and returns 'None'\n+        with self.assertRaises(TypeError):\n+            # Since the original test expects \"None\", we need to confirm behavior\n+            self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+        # Verify that empty string doesn't cause IndexError and returns ''\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..2baea92 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,8 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n-from django.utils.translation import gettext as _\n+from django.urls import reverse\n+import urllib.parse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -892,6 +894,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..c254dff 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -505,6 +505,16 @@ class HTTPSitemapTests(SitemapTestsBase):\n             \"</urlset>\"\n         )\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..88b6d97 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,6 +1,10 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n+from unittest import mock, TestCase\n+from django.core.cache import cache\n+import threading\n import io\n import os\n import pickle\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..dad06d0 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,9 +1,12 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n",
  "django__django-16595": "",
  "django__django-16873": "",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..b3abdf7 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -597,18 +597,105 @@ class BulkCreateTests(TestCase):\n             ],\n         )\n \n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        \"\"\"\n+        Test if IDs are correctly returned from bulk_create when update_conflicts is True.\n+        \"\"\"\n+        # Insert initial data\n+        initial_data = [\n+            TwoFields(f1=1, f2=1, name=\"a\"),\n+            TwoFields(f1=2, f2=2, name=\"b\"),\n+        ]\n+        TwoFields.objects.bulk_create(initial_data)\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+\n+        # Conflicting data with updates\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"x\"),\n+            TwoFields(f1=2, f2=2, name=\"y\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+\n+        # Verify the number of results and that pks are set\n+        self.assertEqual(len(results), 2)\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n     def test_update_conflicts_two_fields_unique_fields_first(self):\n         self._test_update_conflicts_two_fields([\"f1\"])\n \n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        \"\"\"\n+        Test if IDs are correctly returned from bulk_create when update_conflicts is True.\n+        \"\"\"\n+        # Insert initial data\n+        initial_data = [\n+            TwoFields(f1=1, f2=1, name=\"a\"),\n+            TwoFields(f1=2, f2=2, name=\"b\"),\n+        ]\n+        TwoFields.objects.bulk_create(initial_data)\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+\n+        # Conflicting data with updates\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"x\"),\n+            TwoFields(f1=2, f2=2, name=\"y\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+\n+        # Verify the number of results and that pks are set\n+        self.assertEqual(len(results), 2)\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n     def test_update_conflicts_two_fields_unique_fields_second(self):\n         self._test_update_conflicts_two_fields([\"f2\"])\n \n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        \"\"\"\n+        Test if IDs are correctly returned from bulk_create when update_conflicts is True.\n+        \"\"\"\n+        # Insert initial data\n+        initial_data = [\n+            TwoFields(f1=1, f2=1, name=\"a\"),\n+            TwoFields(f1=2, f2=2, name=\"b\"),\n+        ]\n+        TwoFields.objects.bulk_create(initial_data)\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+\n+        # Conflicting data with updates\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"x\"),\n+            TwoFields(f1=2, f2=2, name=\"y\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+\n+        # Verify the number of results and that pks are set\n+        self.assertEqual(len(results), 2)\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n@@ -642,6 +729,35 @@ class BulkCreateTests(TestCase):\n             ],\n         )\n \n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        \"\"\"\n+        Test if IDs are correctly returned from bulk_create when update_conflicts is True.\n+        \"\"\"\n+        # Insert initial data\n+        initial_data = [\n+            TwoFields(f1=1, f2=1, name=\"a\"),\n+            TwoFields(f1=2, f2=2, name=\"b\"),\n+        ]\n+        TwoFields.objects.bulk_create(initial_data)\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+\n+        # Conflicting data with updates\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"x\"),\n+            TwoFields(f1=2, f2=2, name=\"y\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+\n+        # Verify the number of results and that pks are set\n+        self.assertEqual(len(results), 2)\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n@@ -710,12 +826,70 @@ class BulkCreateTests(TestCase):\n             ],\n         )\n \n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        \"\"\"\n+        Test if IDs are correctly returned from bulk_create when update_conflicts is True.\n+        \"\"\"\n+        # Insert initial data\n+        initial_data = [\n+            TwoFields(f1=1, f2=1, name=\"a\"),\n+            TwoFields(f1=2, f2=2, name=\"b\"),\n+        ]\n+        TwoFields.objects.bulk_create(initial_data)\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+\n+        # Conflicting data with updates\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"x\"),\n+            TwoFields(f1=2, f2=2, name=\"y\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+\n+        # Verify the number of results and that pks are set\n+        self.assertEqual(len(results), 2)\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n     def test_update_conflicts_unique_two_fields_unique_fields_both(self):\n         self._test_update_conflicts_unique_two_fields([\"iso_two_letter\", \"name\"])\n \n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        \"\"\"\n+        Test if IDs are correctly returned from bulk_create when update_conflicts is True.\n+        \"\"\"\n+        # Insert initial data\n+        initial_data = [\n+            TwoFields(f1=1, f2=1, name=\"a\"),\n+            TwoFields(f1=2, f2=2, name=\"b\"),\n+        ]\n+        TwoFields.objects.bulk_create(initial_data)\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+\n+        # Conflicting data with updates\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"x\"),\n+            TwoFields(f1=2, f2=2, name=\"y\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+\n+        # Verify the number of results and that pks are set\n+        self.assertEqual(len(results), 2)\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n@@ -776,6 +950,35 @@ class BulkCreateTests(TestCase):\n             ],\n         )\n \n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        \"\"\"\n+        Test if IDs are correctly returned from bulk_create when update_conflicts is True.\n+        \"\"\"\n+        # Insert initial data\n+        initial_data = [\n+            TwoFields(f1=1, f2=1, name=\"a\"),\n+            TwoFields(f1=2, f2=2, name=\"b\"),\n+        ]\n+        TwoFields.objects.bulk_create(initial_data)\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+\n+        # Conflicting data with updates\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"x\"),\n+            TwoFields(f1=2, f2=2, name=\"y\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+\n+        # Verify the number of results and that pks are set\n+        self.assertEqual(len(results), 2)\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n@@ -787,6 +990,35 @@ class BulkCreateTests(TestCase):\n     def test_update_conflicts_no_unique_fields(self):\n         self._test_update_conflicts([])\n \n+    def test_bulk_create_update_conflicts_returns_ids(self):\n+        \"\"\"\n+        Test if IDs are correctly returned from bulk_create when update_conflicts is True.\n+        \"\"\"\n+        # Insert initial data\n+        initial_data = [\n+            TwoFields(f1=1, f2=1, name=\"a\"),\n+            TwoFields(f1=2, f2=2, name=\"b\"),\n+        ]\n+        TwoFields.objects.bulk_create(initial_data)\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+\n+        # Conflicting data with updates\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"x\"),\n+            TwoFields(f1=2, f2=2, name=\"y\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+\n+        # Verify the number of results and that pks are set\n+        self.assertEqual(len(results), 2)\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n@@ -816,4 +1048,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..9106436 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1120,6 +1120,20 @@ def test_range_slider(orientation):\n     assert_allclose(slider.val, [0.1, 0.34])\n \n \n+@pytest.mark.parametrize(\"orientation\", [\"horizontal\", \"vertical\"])\n+def test_range_slider_initial_value(orientation):\n+    fig, ax = plt.subplots()\n+\n+    # Test initializing RangeSlider with valinit\n+    valinit = [0.25, 0.75]\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"Initial Test\", valmin=0.0, valmax=1.0,\n+        orientation=orientation, valinit=valinit\n+    )\n+\n+    # Ensure the initial value is set correctly\n+    assert_allclose(slider.val, valinit)\n+\n def check_polygon_selector(event_sequence, expected_result, selections_count,\n                            **kwargs):\n     \"\"\"\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..e4e3b8c 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -489,6 +489,11 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n     else:\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n+import pytest\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+from matplotlib._pylab_helpers import Gcf\n+\n \n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n@@ -508,7 +513,24 @@ def test_rcparams_reset_after_fail():\n         assert mpl.rcParams['text.usetex'] is False\n \n \n-@pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n+def test_get_backend_with_rc_context():\n+    # Test that calling get_backend doesn't clear figures from Gcf.figs\n+    # when the first figure is created within an rc_context.\n+    with rc_context():\n+        fig = plt.figure()\n+    before = f'{id(Gcf)} {Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(Gcf)} {Gcf.figs!r}'\n+    assert before == after, f'\\nBefore: {before}\\nAfter: {after}'\n+\n+\n+def test_get_backend_without_rc_context():\n+    # Control test: a figure is created without an rc_context.\n+    fig = plt.figure()\n+    before = f'{id(Gcf)} {Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(Gcf)} {Gcf.figs!r}'\n+    assert before == after, f'\\nBefore: {before}\\nAfter: {after}'\n def test_backend_fallback_headless(tmpdir):\n     env = {**os.environ,\n            \"DISPLAY\": \"\", \"WAYLAND_DISPLAY\": \"\",\n",
  "matplotlib__matplotlib-23314": "",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..b98c8bd 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,7 +774,13 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n-def test_get_set_draggable():\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable_at_creation(draggable):\n+    \"\"\" Test if the legend can be made draggable at creation time. \"\"\"\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='sample')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n     legend = plt.legend()\n     assert not legend.get_draggable()\n     legend.set_draggable(True)\n@@ -783,7 +789,13 @@ def test_get_set_draggable():\n     assert not legend.get_draggable()\n \n \n-def test_alpha_handles():\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable_at_creation(draggable):\n+    \"\"\" Test if the legend can be made draggable at creation time. \"\"\"\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='sample')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n     x, n, hh = plt.hist([1, 2, 3], alpha=0.25, label='data', color='red')\n     legend = plt.legend()\n     for lh in legend.legendHandles:\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..91eee4f 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -255,8 +255,32 @@ def test_linedash():\n \n     assert buf.tell() > 0\n \n+import io\n+from matplotlib.figure import Figure\n+\n+def test_empty_line():\n+    # Smoke-test for gh#23954\n+    figure = Figure()\n+    figure.text(0.5, 0.5, \"\\nfoo\\n\\n\")\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n \n-def test_no_duplicate_definition():\n+def test_multiline_with_empty_line_annotate():\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.annotate(text='\\nLower label', xy=(0, 0))\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    fig.savefig(buf, format='ps')\n+\n+def test_multiline_with_empty_line_title():\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.set_title('\\nLower title')\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    fig.savefig(buf, format='ps')\n \n     fig = Figure()\n     axs = fig.subplots(4, 4, subplot_kw=dict(projection=\"polar\"))\n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..2472f58 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,23 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+\n+def test_constrained_layout_user_warning():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    import warnings\n+\n+    a = np.linspace(0, 2*np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+        ax[0].plot(a, b)\n+        ax[1].plot(a, c)\n+        plt.subplots_adjust(wspace=0)\n+\n+        assert not any('This figure was using a layout engine that is incompatible with subplots_adjust' in str(warning.message) for warning in w)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 64ba766..99a9e57 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -5733,6 +5733,41 @@ def test_set_get_ticklabels():\n \n \n @check_figures_equal(extensions=[\"png\"])\n+def test_set_ticks_with_kwargs_without_labels_raises():\n+    \"\"\"\n+    When labels=None and any kwarg is passed, axis.set_ticks() raises a ValueError.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    with pytest.raises(ValueError):\n+        ax.xaxis.set_ticks(ticks, color='red')\n+\n+def test_set_ticks_with_invalid_kwargs_with_labels_raises():\n+    \"\"\"\n+    When invalid kwargs are passed along with labels, axis.set_ticks() raises a ValueError.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    labels = ['a', 'b', 'c']\n+    with pytest.raises(ValueError):\n+        ax.xaxis.set_ticks(ticks, labels=labels, invalid_prop='value')\n+\n+def test_set_ticks_with_valid_kwargs_with_labels():\n+    \"\"\"\n+    When valid kwargs are passed along with labels, axis.set_ticks() applies them correctly.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    labels = ['a', 'b', 'c']\n+    # This should not raise an error\n+    ax.xaxis.set_ticks(ticks, labels=labels, color='red')\n+    # Validate that the color property is applied to the labels\n+    for label in ax.get_xticklabels():\n+        assert label.get_color() == 'red'\n+\n+import pytest\n+import matplotlib.pyplot as plt\n+\n def test_set_ticks_with_labels(fig_test, fig_ref):\n     \"\"\"\n     Test that these two are identical::\n",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..53aee6c 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,6 +90,7 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..277c760 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,33 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n \n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+    \n+    fig.align_labels()\n+    \n+    # Try pickling\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Unpickle to ensure it works\n+    loaded_fig = pickle.loads(pkl.getbuffer())\n+    loaded_fig.canvas.draw()\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..cd261b1 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -446,7 +446,43 @@ def test_paddedbox():\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n \n+def test_mplcursor_with_matplotlib_3_7_1():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors as mpl\n+\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y1)\n+    \n+    mpl.cursor(ax)\n+    \n+    with pytest.raises(AttributeError, match=\"'NoneType' object has no attribute 'canvas'\"):\n+        plt.ginput(n=3, timeout=1)  # simulate clicking on data points\n+\n+    plt.close(fig)\n+\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n+\n+def test_mplcursor_with_matplotlib_3_7_1():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors as mpl\n+\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    ax.scatter(x, y1)\n+    \n+    mpl.cursor(ax)\n+    \n+    with pytest.raises(AttributeError, match=\"'NoneType' object has no attribute 'canvas'\"):\n+        plt.ginput(n=3, timeout=1)  # simulate clicking on data points\n+\n+    plt.close(fig)\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..1f493e0 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -8,9 +9,30 @@ from numpy.testing import assert_array_equal, assert_array_almost_equal\n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n \n+from pandas.testing import assert_frame_equal\n \n class TestPolyFit:\n \n+    def test_polyfit_with_missing_data(self):\n+        # Create a DataFrame with missing values\n+        df = pd.DataFrame({\n+            \"x\": [1, 2, 3, None, 4],\n+            \"y\": [1, 2, 3, 4, 5],\n+            \"group\": [\"a\", \"a\", \"a\", \"a\", \"a\"]\n+        })\n+        \n+        # Set up the groupby object\n+        groupby = GroupBy([\"group\"])\n+        \n+        # Apply PolyFit with missing values\n+        res_with_missing = PolyFit()(df[[\"x\", \"y\"]], groupby, \"x\", {})\n+        \n+        # Drop missing values and apply PolyFit again\n+        res_without_missing = PolyFit()(df[[\"x\", \"y\"]].dropna(), groupby, \"x\", {})\n+        \n+        # Compare the results\n+        assert_frame_equal(res_with_missing, res_without_missing)\n+\n     @pytest.fixture\n     def df(self, rng):\n \n",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..51b15ca 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -90,6 +90,30 @@ class TestContinuous:\n         s = Continuous((2, 3), (10, 100), \"log\")._setup(x, IntervalProperty())\n         assert_array_equal(s(x), [1, 2, 3])\n \n+    def test_interval_with_bools(self):\n+        import pandas as pd\n+        from numpy.testing import assert_array_equal\n+        from seaborn._core.scales import Continuous\n+        from seaborn._core.properties import IntervalProperty\n+\n+        # Test boolean input handling\n+        x = pd.Series([True, False, False, True])\n+        s = Continuous()._setup(x, IntervalProperty())  # Assuming IntervalProperty is the correct property here\n+        assert_array_equal(s(x), [1, 0, 0, 1])  # Mapping True to 1, and False to 0\n+\n+    def test_color_with_bools(self):\n+        import pandas as pd\n+        from numpy.testing import assert_array_equal\n+        from seaborn._core.scales import Continuous\n+        from seaborn._core.properties import Color\n+\n+        # Test boolean input handling with color\n+        x = pd.Series([True, False, True])\n+        s = Continuous()._setup(x, Color())  # Assuming Color is used for color properties\n+        # We don't have the exact expected result here as it depends on the color mapping, placeholder used\n+        expected_colors = [[1, 0, 0], [0, 0, 0], [1, 0, 0]]  # Example RGB values for True and False\n+        assert_array_equal(s(x), expected_colors)\n+\n     def test_color_defaults(self, x):\n \n         cmap = color_palette(\"ch:\", as_cmap=True)\n",
  "mwaskom__seaborn-3407": "",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..00cfa29 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,8 +1,11 @@\n+\n import json\n import os\n import textwrap\n \n import pytest\n+import tomllib\n+import os\n \n import flask\n \n@@ -17,8 +20,25 @@ def common_object_test(app):\n     assert app.config[\"TEST_KEY\"] == \"foo\"\n     assert \"TestConfig\" not in app.config\n \n+def test_config_from_file_toml_with_mode():\n+    \"\"\"Test loading TOML config with binary mode using tomllib.\"\"\"\n+    app = flask.Flask(__name__)\n+    current_dir = os.path.dirname(os.path.abspath(__file__))\n+    app.config.from_file(\n+        os.path.join(current_dir, \"static\", \"config.toml\"), tomllib.load, text=False\n+    )\n+    common_object_test(app)\n \n-def test_config_from_pyfile():\n+def test_config_from_file_json_with_mode():\n+    \"\"\"Test loading JSON config with text mode.\"\"\"\n+    app = flask.Flask(__name__)\n+    current_dir = os.path.dirname(os.path.abspath(__file__))\n+    with open(os.path.join(current_dir, \"static\", \"config.json\"), \"w\") as f:\n+        f.write('{\"TEST_KEY\": \"foo\", \"SECRET_KEY\": \"config\"}')\n+    app.config.from_file(\n+        os.path.join(current_dir, \"static\", \"config.json\"), json.load, text=True\n+    )\n+    common_object_test(app)\n     app = flask.Flask(__name__)\n     app.config.from_pyfile(f\"{__file__.rsplit('.', 1)[0]}.py\")\n     common_object_test(app)\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "",
  "psf__requests-3362": "",
  "psf__requests-863": "",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..7f6ce62 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -88,6 +88,15 @@ class TestFixme(CheckerTestCase):\n             MessageTest(msg_id=\"fixme\", line=2, args=\"CODETAG\", col_offset=17)\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n \n     def test_issue_2321_should_not_trigger(self) -> None:\n         code = 'print(\"# TODO this should not trigger a fixme\")'\n@@ -119,4 +128,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..84996f2 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -53,7 +53,16 @@ reports = \"yes\"\n         f\"${env_var}\", file_to_lint_path\n     )\n     mock_exit.assert_called_once_with(0)\n-    check_configuration_file_reader(runner)\n+import pytest\n+from pylint import Run\n+from pylint.config.exceptions import _UnrecognizedOptionError\n+from _pytest.capture import CaptureFixture\n+from typing import Any\n+from test.test_support import EMPTY_MODULE\n+\n+def check_configuration_file_reader(runner: Any) -> None:\n+    \"\"\"Dummy function for configuration file reader.\"\"\"\n+    pass\n \n \n def test_unknown_message_id(capsys: CaptureFixture) -> None:\n@@ -79,7 +88,13 @@ def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n \n \n-def test_unknown_confidence(capsys: CaptureFixture) -> None:\n+def test_traceback_not_printed_for_unrecognized_option(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure no traceback is printed for unrecognized options.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"E0015: Unrecognized option found: Q\" in output.out\n+    assert \"Traceback\" not in output.err\n     \"\"\"Check that we correctly error an unknown confidence value.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--confidence=UNKNOWN_CONFIG\"], exit=False)\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..01acd77 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,25 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive(self) -> None:\n+        \"\"\"Tests that using --recursive=y respects the ignore-paths setting.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..17ecc74 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,6 +934,26 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n+def test_lint_module_with_same_name_as_package(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for modules with the same name as their package.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create package and module with the same name\n+        create_files([\"pkg/pkg.py\", \"pkg/other.py\"])\n+        linter.check([\"pkg\"])\n+    assert not linter.stats.by_msg\n+\n+def test_lint_imports_with_same_name_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test importing from a package with a module having the same name.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create the package and test module\n+        create_files([\"pkg/pkg.py\", \"pkg/other.py\", \"test_script.py\"])\n+        with open(\"test_script.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from pkg import other\\n\")\n+        linter.check([\"test_script.py\", \"pkg\"])\n+    assert not linter.stats.by_msg\n+\n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n@@ -941,4 +961,24 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+def test_lint_module_with_same_name_as_package(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for modules with the same name as their package.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create package and module with the same name\n+        create_files([\"pkg/pkg.py\", \"pkg/other.py\"])\n+        linter.check([\"pkg\"])\n+    assert not linter.stats.by_msg\n+\n+def test_lint_imports_with_same_name_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test importing from a package with a module having the same name.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create the package and test module\n+        create_files([\"pkg/pkg.py\", \"pkg/other.py\", \"test_script.py\"])\n+        with open(\"test_script.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from pkg import other\\n\")\n+        linter.check([\"test_script.py\", \"pkg\"])\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..bd054e0 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -298,6 +298,48 @@ class TestImportPath:\n         assert \"_src\" in sys.modules\n         assert \"_src.tests\" in sys.modules\n \n+        # Test that subsequent imports do not create a new module instance.\n+        module2 = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        assert module is module2\n+\n+    def test_importmode_importlib_multiple_imports(self, tmp_path: Path) -> None:\n+        \"\"\"Ensure `importlib` mode handles multiple imports correctly.\"\"\"\n+        # Setup similar structure to the issue description\n+        command_file = tmp_path / \"pmxbot/commands.py\"\n+        logging_file = tmp_path / \"pmxbot/logging.py\"\n+        command_file.parent.mkdir(parents=True)\n+        command_file.write_text(\"from . import logging\", encoding=\"utf-8\")\n+        logging_file.write_text(\"class Logger:\\n    store = None\\n\", encoding=\"utf-8\")\n+\n+        sys.path.insert(0, str(tmp_path))\n+        try:\n+            # First import\n+            import pmxbot.commands\n+            import pmxbot.logging\n+            assert pmxbot.logging.Logger.store is None\n+\n+            # Initialize store\n+            pmxbot.logging.Logger.store = \"initialized\"\n+\n+            # Second import should not re-import pmxbot.logging\n+            import importlib\n+            importlib.import_module('pmxbot.logging')\n+\n+            # Check that store is still initialized, meaning no re-import occurred\n+            assert pmxbot.logging.Logger.store == \"initialized\"\n+        finally:\n+            sys.path.pop(0)\n+            sys.modules.pop('pmxbot.commands', None)\n+            sys.modules.pop('pmxbot.logging', None)\n+        \"\"\"`importlib` mode does not change sys.path.\"\"\"\n+        module = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        assert module.foo(2) == 42  # type: ignore[attr-defined]\n+        assert str(simple_module.parent) not in sys.path\n+        assert module.__name__ in sys.modules\n+        assert module.__name__ == \"_src.tests.mymod\"\n+        assert \"_src\" in sys.modules\n+        assert \"_src.tests\" in sys.modules\n+\n     def test_importmode_twice_is_different_module(\n         self, simple_module: Path, tmp_path: Path\n     ) -> None:\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\nindex 82f0458..d7f7bbb 100644\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -257,6 +257,33 @@ def test_log_cli_enabled_disabled(testdir, enabled):\n \n \n def test_log_cli_default_level(testdir):\n+    # Default log file level with new format\n+    testdir.makepyfile(\n+        test_log_cli_default_level=\"\"\"\n+        import logging\n+\n+        def test_log_cli():\n+            logging.basicConfig(\n+                level=logging.DEBUG,\n+                format=\"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+            )\n+            logger = logging.getLogger(\"my_module\")\n+            logger.warning(\"A warning with module name\")\n+    \"\"\"\n+    )\n+\n+    result = testdir.runpytest()\n+\n+    # fnmatch_lines does an assertion internally\n+    result.stdout.fnmatch_lines(\n+        [\n+            \"test_log_cli_default_level.py::test_log_cli \",\n+            \"WARNING  my_module:test_log_cli_default_level.py:8 A warning with module name\",\n+        ]\n+    )\n+    assert \"INFO message won't be shown\" not in result.stdout.str()\n+    # make sure that that we get a '0' exit code for the testsuite\n+    assert result.ret == 0\n     # Default log file level\n     testdir.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..f47f46c 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -552,6 +552,26 @@ class TestAssert_reprcompare:\n         expl = \" \".join(callequal(\"foo\", \"bar\"))\n         assert \"raised in repr()\" not in expl\n \n+    def test_bytes_diff_empty_vs_nonempty(self):\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+        ]\n+\n+    def test_bytes_diff_single_byte(self):\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+        ]\n+\n     def test_unicode(self):\n         left = \"\u00a3\u20ac\"\n         right = \"\u00a3\"\n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..5988129 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,9 +1,12 @@\n+\n import os\n from xml.dom import minidom\n \n import py\n \n import pytest\n+import platform\n+from datetime import datetime\n from _pytest.junitxml import LogXML\n from _pytest.reports import BaseReport\n \n@@ -157,6 +160,30 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+        \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+        \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n+\n     @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..1829609 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,33 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ (#7145)\n+    \"\"\"\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+def test_broken_repr_complete_trace():\n+    \"\"\"Test case to check complete traceback is handled.\"\"\"\n+    class AnotherClass:\n+        def __getattribute__(self, attr):\n+            raise AttributeError(\"Broken getattribute\")\n+\n+        def __repr__(self):\n+            raise ValueError(\"Broken repr\")\n+\n+    result = saferepr(AnotherClass())\n+    assert \"<[ValueError('Broken repr') raised in repr()] AnotherClass object\" in result\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +180,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..8e6e471 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -288,6 +288,33 @@ class TestInlineRunModulesCleanup:\n         assert imported.data == 42\n \n \n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct.\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n+\n+\n def test_assert_outcomes_after_pytest_error(testdir) -> None:\n     testdir.makepyfile(\"def test_foo(): assert True\")\n \n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..a57ee6b 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,6 @@\n import os\n import sys\n+import os\n from unittest import mock\n \n import pytest\n@@ -42,6 +43,36 @@ class TestMark:\n             mark._some_name\n \n \n+def test_reevaluate_dynamic_expr(self, testdir):\n+    \"\"\"#7360\"\"\"\n+    py_file1 = testdir.makepyfile(\n+        test_reevaluate_dynamic_expr1=\"\"\"\n+        import pytest\n+\n+        skip = True\n+\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_skip():\n+            assert False\n+    \"\"\"\n+    )\n+    py_file2 = testdir.makepyfile(\n+        test_reevaluate_dynamic_expr2=\"\"\"\n+        import pytest\n+\n+        skip = False\n+\n+        @pytest.mark.skipif(\"skip\")\n+        def test_should_not_skip():\n+            assert False\n+    \"\"\"\n+    )\n+\n+    file_name1 = os.path.basename(py_file1.strpath)\n+    file_name2 = os.path.basename(py_file2.strpath)\n+    reprec = testdir.inline_run(file_name1, file_name2)\n+    reprec.assertoutcome(skipped=1, failed=1)\n+\n def test_marked_class_run_twice(testdir):\n     \"\"\"Test fails file is run twice that contains marked class.\n     See issue#683.\n",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..aa62fa3 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -344,7 +345,34 @@ class TestXFail:\n         result.stdout.fnmatch_lines([\"*XPASS*test_that*\", \"*1 xpassed*\"])\n         assert result.ret == 0\n \n-    def test_xfail_imperative(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486: Test xfail marker set during test execution leads to xfail as expected.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486: Test strict xfail marker set during test execution leads to failure if test passes.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+\n+            def test_that(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+                assert 1\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1, passed=1)\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..043d1e3 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -20,6 +21,7 @@ from _pytest.pathlib import register_cleanup_lock_removal\n from _pytest.pathlib import rm_rf\n from _pytest.pytester import Pytester\n from _pytest.tmpdir import get_user\n+from _pytest.monkeypatch import MonkeyPatch\n from _pytest.tmpdir import TempdirFactory\n from _pytest.tmpdir import TempPathFactory\n \n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..2d7c4b5 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -598,6 +598,37 @@ def test_ridgecv_store_cv_values():\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute\n+    import numpy as np\n+    from sklearn.linear_model import RidgeClassifierCV\n+    from sklearn.utils._testing import assert_array_equal\n+\n+    # Create a random dataset\n+    rng = np.random.RandomState(42)\n+    n_samples, n_features = 10, 5\n+    X = rng.randn(n_samples, n_features)\n+    y = rng.choice([1, -1], size=n_samples)\n+\n+    # Specify alphas and check cv_values_ shape for `store_cv_values=True`\n+    alphas = np.logspace(-6, 6, 13)\n+    clf = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    clf.fit(X, y)\n+    assert clf.cv_values_.shape == (n_samples, len(alphas)), \"Unexpected cv_values_ shape\"\n+\n+    # Multi-target case\n+    y_multi = np.vstack([y, y[::-1]]).T\n+    clf.fit(X, y_multi)\n+    assert clf.cv_values_.shape == (n_samples, y_multi.shape[1], len(alphas)), \"Unexpected cv_values_ shape in multi-target case\"\n+\n+    # Ensure ValueError when cv is not None and store_cv_values is True\n+    from sklearn.model_selection import KFold\n+    try:\n+        clf = RidgeClassifierCV(alphas=alphas, store_cv_values=True, cv=KFold(3))\n+        clf.fit(X, y)\n+    except ValueError as e:\n+        assert 'cv!=None and store_cv_values=True' in str(e), \"Unexpected error message when cv is not None\"\n+\n def test_ridgecv_sample_weight():\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..1f07027 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -5,7 +5,7 @@\n import numpy as np\n from scipy.special import gammaln\n \n-from sklearn.utils.testing import assert_raise_message\n+from sklearn.utils.testing import assert_raise_message, assert_true\n from sklearn.utils.testing import assert_almost_equal\n \n from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n",
  "scikit-learn__scikit-learn-12471": "",
  "scikit-learn__scikit-learn-13142": "",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..3300804 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -70,8 +71,20 @@ def test_kernel_pca_consistent_transform():\n     transformed2 = kpca.transform(X_copy)\n     assert_array_almost_equal(transformed1, transformed2)\n \n+from sklearn.utils.testing import assert_allclose\n \n-def test_kernel_pca_sparse():\n+def test_kernel_pca_consistent_signs():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+\n+    kpca_rbf = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+    \n+    # Run KernelPCA multiple times\n+    transformed_results = [kpca_rbf.fit_transform(X) for _ in range(3)]\n+    \n+    # Check that the absolute value of the results are the same\n+    for i in range(1, len(transformed_results)):\n+        assert_allclose(np.abs(transformed_results[0]), np.abs(transformed_results[i]))\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 4594f40..c267619 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -233,7 +233,9 @@ class Pipeline(_BaseComposition):\n         estimator = self.steps[-1][1]\n         return 'passthrough' if estimator is None else estimator\n \n-    # Estimator interface\n+    def __len__(self):\n+        \"\"\"Return the number of steps in the pipeline.\"\"\"\n+        return len(self.steps)\n \n     def _fit(self, X, y=None, **fit_params):\n         # shallow copy of steps - this should really be steps_\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..67c3167 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,6 +8,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n import numpy as np\n \n@@ -294,9 +297,42 @@ def test_score_samples():\n     assert_array_equal(clf1.score_samples([[2., 2.]]),\n                        clf2.score_samples([[2., 2.]]))\n \n-\n @pytest.mark.filterwarnings('ignore:default contamination')\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_iforest_warm_start_increment():\n+    \"\"\"Test incremental fitting with warm_start=True on IsolationForest.\"\"\"\n+    rng = check_random_state(1)\n+    X = rng.randn(30, 3)\n+\n+    # Fit the first set of trees\n+    clf = IsolationForest(n_estimators=15, max_samples=30,\n+                          random_state=rng, warm_start=True)\n+    clf.fit(X)\n+    initial_estimators = len(clf.estimators_)\n+\n+    # Incrementally fit additional trees and check the estimators\n+    clf.set_params(n_estimators=25)\n+    clf.fit(X)\n+    assert len(clf.estimators_) == 25\n+    assert clf.estimators_[:initial_estimators] == clf.estimators_[:initial_estimators]\n+\n+def test_iforest_warm_start_false():\n+    \"\"\"Test that setting warm_start=False resets the estimators.\"\"\"\n+    rng = check_random_state(2)\n+    X = rng.randn(40, 4)\n+\n+    # Fit with warm_start=True\n+    clf = IsolationForest(n_estimators=10, max_samples=40,\n+                          random_state=rng, warm_start=True)\n+    clf.fit(X)\n+    initial_trees = list(clf.estimators_)\n+\n+    # Fit with warm_start=False, which should reset the model\n+    clf.set_params(warm_start=False, n_estimators=5)\n+    clf.fit(X)\n+    assert len(clf.estimators_) == 5\n+    assert clf.estimators_ != initial_trees\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_deprecation():\n     X = [[0.0], [1.0]]\n     clf = IsolationForest()\n",
  "scikit-learn__scikit-learn-13497": "",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..1addaea 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,9 +1,12 @@\n+\n import re\n from pprint import PrettyPrinter\n \n import numpy as np\n \n from sklearn.utils._pprint import _EstimatorPrettyPrinter\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n@@ -215,6 +218,19 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n     set_config(print_changed_only=False)\n \n \n+def test_logistic_regression_cv_repr_with_array():\n+    # Test that array parameters in LogisticRegressionCV do not throw an error\n+    # when print_changed_only is True\n+    set_config(print_changed_only=True)\n+    try:\n+        repr(LogisticRegressionCV(Cs=np.array([0.1, 1.0])))\n+    except ValueError as e:\n+        # If the error is thrown, the test should fail\n+        raise AssertionError(\"LogisticRegressionCV repr failed with array Cs parameter.\") from e\n+    finally:\n+        set_config(print_changed_only=False)\n+\n+\n def test_pipeline():\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..670e82d 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -8,6 +9,8 @@ from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raise_message\n from sklearn.exceptions import NotFittedError\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.linear_model import LogisticRegression\n from sklearn.naive_bayes import GaussianNB\n from sklearn.ensemble import RandomForestClassifier\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..64107e5 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,8 +160,25 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n+import pytest\n+import numpy as np\n \n-def test_transformation_dimensions():\n+@pytest.mark.parametrize('param, value', [\n+    ('n_components', np.int32(3)),\n+    ('max_iter', np.int32(100)),\n+    ('tol', np.float32(0.0001)),\n+    ('tol', np.float64(1.0)),\n+    ('n_components', np.int64(5))\n+])\n+def test_parameters_valid_types(param, value):\n+    # check that no error is raised when parameters have numpy integer or\n+    # floating types, as these are common in grid search scenarios.\n+    nca = NeighborhoodComponentsAnalysis(**{param: value})\n+\n+    X = np.random.random((10, 5))\n+    y = np.random.randint(0, 2, 10)\n+\n+    nca.fit(X, y)\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n \n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..19a45aa 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -679,6 +679,38 @@ def test_unicode_kernel():\n                                 kernel='linear',\n                                 random_seed=0)\n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for ZeroDivisionError in _sparse_fit when support_vectors_ is empty\n+    import numpy as np\n+    import scipy.sparse as sp\n+    from sklearn import svm\n+\n+    X_train = sp.csr_matrix([[0, 1, 0, 0],\n+                             [0, 0, 0, 1],\n+                             [0, 0, 1, 0],\n+                             [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_no_support_vectors():\n+    # Test when model should not have any support vectors\n+    import numpy as np\n+    import scipy.sparse as sp\n+    from sklearn import svm\n+\n+    X_train = sp.csr_matrix([[0, 0, 0, 0],\n+                             [0, 0, 0, 0],\n+                             [0, 0, 0, 0],\n+                             [0, 0, 0, 0]])\n+    y_train = np.array([0, 0, 0, 0])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n \n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..009d116 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -973,6 +973,16 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n \n \n @ignore_warnings\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    repeated_cv_repr = ('{}(n_repeats=6, n_splits=2, random_state=None)'\n+                        .format(repeated_cv.__class__.__name__))\n+    assert repeated_cv_repr == repr(repeated_cv)\n+\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..047d178 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -112,6 +112,61 @@ def test_automodule_special_members(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_multiple_classes(app):\n+    options = {'members': None,\n+               'undoc-members': None,\n+               'inherited-members': 'Base, list, set'}\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.inheritance',\n+        '',\n+        '',\n+        '.. py:class:: Base()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedclassmeth()',\n+        '      :module: target.inheritance',\n+        '      :classmethod:',\n+        '',\n+        '      Inherited class method.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedstaticmeth(cls)',\n+        '      :module: target.inheritance',\n+        '      :staticmethod:',\n+        '',\n+        '      Inherited static method.',\n+        '',\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Derived.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '.. py:class:: MyList(iterable=(), /)',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: MyList.meth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_mock_imports': ['missing_module',\n@@ -125,4 +180,225 @@ def test_subclass_of_mocked_object(app):\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/roots/test-ext-autodoc/target/annotations.py b/tests/roots/test-ext-autodoc/target/annotations.py\nindex 56eb16b..e48d78e 100644\n--- a/tests/roots/test-ext-autodoc/target/annotations.py\n+++ b/tests/roots/test-ext-autodoc/target/annotations.py\n@@ -1,3 +1,18 @@\n+\n+# Additional module for testing `autodoc_type_aliases` with variables and class attributes\n+\n+#: variable with alias\n+variable: myint\n+\n+class MyClass:\n+    \"\"\"Class with attributes using type alias\"\"\"\n+\n+    #: attribute with alias\n+    attr: myint\n+\n+    def __init__(self):\n+        self.attr = 0\n+\n from __future__ import annotations\n \n from typing import overload\n@@ -22,4 +37,4 @@ def mult(x: float, y: float) -> float:\n \n def mult(x, y):\n     \"\"\"docstring\"\"\"\n-    return x, y\n+    return x, y\n",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..47d9c94 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -85,7 +85,26 @@ def test_get_full_qualified_name():\n     node = nodes.reference(reftype='option', reftarget='-l')\n     assert domain.get_full_qualified_name(node) is None\n \n-    # options with std:program context\n+    # Test for the issue with 'option:: [enable=]PATTERN' that Sphinx 3.2 complains about\n+    def test_cmd_option_with_brackets(app):\n+        text = \".. option:: [enable=]PATTERN\\n   Immediately enable events matching *PATTERN*\"\n+        doctree = restructuredtext.parse(app, text)\n+        assert_node(doctree, (index,\n+                              [desc, ([desc_signature, ([desc_name, '[enable'], \n+                                                         [desc_addname, '=]PATTERN'])],\n+                                      [desc_content, ()])]))\n+        objects = list(app.env.get_domain(\"std\").get_objects())\n+        assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-enable', 1) in objects\n+\n+    def test_cmd_option_with_optional_value(app):\n+        text = \".. option:: -j[=N]\"\n+        doctree = restructuredtext.parse(app, text)\n+        assert_node(doctree, (index,\n+                              [desc, ([desc_signature, ([desc_name, '-j'], \n+                                                         [desc_addname, '[=N]'])],\n+                                      [desc_content, ()])]))\n+        objects = list(app.env.get_domain(\"std\").get_objects())\n+        assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n     kwargs = {'std:program': 'ls'}\n     node = nodes.reference(reftype='option', reftarget='-l', **kwargs)\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..726ee85 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,8 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n@@ -45,6 +47,43 @@ def do_autodoc(app, objtype, name, options=None):\n     return bridge.result\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all(app):\n+    \"\"\"\n+    This test ensures that if a module has an empty __all__ attribute, no members are documented.\n+    \"\"\"\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_non_empty_all(app):\n+    \"\"\"\n+    This test ensures that if a module has a non-empty __all__ attribute, only specified members are documented.\n+    \"\"\"\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.non_empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.non_empty_all',\n+        '',\n+        'docstring of non_empty_all module.',\n+        '',\n+        '.. py:function:: foo()',\n+        '   :module: target.non_empty_all',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n+\n+\n def make_directive_bridge(env):\n     options = Options(\n         inherited_members = False,\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..01b2169 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..655b950 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,6 +1455,30 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    def test_other_parameters_with_class_reference(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        # Test when napoleon_use_param is False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test when napoleon_use_param is True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n",
  "sphinx-doc__sphinx-8721": "",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..60c1561 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -322,6 +322,13 @@ def test_mul():\n         assert h == h2\n \n \n+def test_permutation_non_disjoint_cycles():\n+    # Test that non-disjoint cycles are applied in left-to-right order\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])\n+    assert Permutation([[0, 1], [2, 0]]) == Permutation([1, 0, 2])\n+    assert Permutation([[0, 1, 2], [2, 1]]) == Permutation([0, 2, 1])\n+\n def test_args():\n     p = Permutation([(0, 3, 1, 2), (4, 5)])\n     assert p._cyclic_form is None\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..9f3f81f 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,6 +1,8 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n+from sympy import ImmutableMatrix\n \n def test_sparse_matrix():\n     def sparse_eye(n):\n@@ -107,7 +109,28 @@ def test_sparse_matrix():\n     A = SparseMatrix([[2, 1, 3], [4, 2, 4], [6, 12, 1]])\n     assert (A**3)[:] == [290, 262, 251, 448, 440, 368, 702, 954, 433]\n \n-    # test_creation\n+    # Additional tests for Matrix.hstack and Matrix.vstack\n+\n+    # Test hstack with zero-row matrices\n+    def test_hstack_zero_row():\n+        M1 = SparseMatrix.zeros(0, 0)\n+        M2 = SparseMatrix.zeros(0, 1)\n+        M3 = SparseMatrix.zeros(0, 2)\n+        M4 = SparseMatrix.zeros(0, 3)\n+        result = SparseMatrix.hstack(M1, M2, M3, M4)\n+        assert result.shape == (0, 6), \"Hstack with zero-row matrices failed\"\n+\n+    # Test vstack with zero-column matrices\n+    def test_vstack_zero_col():\n+        M1 = SparseMatrix.zeros(0, 0)\n+        M2 = SparseMatrix.zeros(1, 0)\n+        M3 = SparseMatrix.zeros(2, 0)\n+        M4 = SparseMatrix.zeros(3, 0)\n+        result = SparseMatrix.vstack(M1, M2, M3, M4)\n+        assert result.shape == (6, 0), \"Vstack with zero-column matrices failed\"\n+\n+    test_hstack_zero_row()\n+    test_vstack_zero_col()\n     x = Symbol(\"x\")\n     a = SparseMatrix([[x, 0], [0, 0]])\n     m = a\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..1aa25a8 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -104,6 +104,22 @@ def test_core_numbers():\n     for c in (Integer(2), Rational(2, 3), Float(\"1.2\")):\n         check(c)\n \n+import pickle\n+import sympy\n+import sys\n+\n+def test_pickle_cross_version():\n+    # This test simulates pickling in Python 2 and unpickling in Python 3\n+    x = sympy.symbols(\"x\")\n+    expr = x + 1.0\n+\n+    # Simulate Python 2 pickle dump (protocol 2)\n+    pickled_data = pickle.dumps(expr, protocol=2)\n+\n+    # Simulate Python 3 pickle load\n+    unpickled_expr = pickle.loads(pickled_data)\n+\n+    assert expr == unpickled_expr\n \n def test_core_relational():\n     x = Symbol(\"x\")\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..2d53f07 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -268,10 +268,28 @@ def test_coth():\n     assert coth(x*I) == -cot(x)*I\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n+\n+def test_coth_log_tan_subs():\n+    x = Symbol('x')\n+    test_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for val in test_values:\n+        e = coth(log(tan(x)))\n+        # Check that substituting the integer value does not raise an error\n+        result = e.subs(x, val)\n+        assert result is not None  # Ensure it doesn't evaluate to None\n     assert coth(17*k*pi*I) == -cot(17*k*pi)*I\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n+def test_coth_log_tan_subs():\n+    x = Symbol('x')\n+    test_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for val in test_values:\n+        e = coth(log(tan(x)))\n+        # Check that substituting the integer value does not raise an error\n+        result = e.subs(x, val)\n+        assert result is not None  # Ensure it doesn't evaluate to None\n+\n \n def test_coth_series():\n     x = Symbol('x')\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..e6208a4 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,6 +201,43 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n+def test_issue_13643():\n+    # Test case based on the issue description\n+    M = eye_Shaping(6)\n+    V = Matrix([[2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]])\n+    expected_result = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert M.col_insert(3, V) == expected_result\n+\n+    # Additional test: insert a single column\n+    V_single = Matrix([[3], [3], [3], [3], [3], [3]])\n+    expected_single = Matrix([\n+        [1, 0, 0, 3, 0, 0, 0],\n+        [0, 1, 0, 3, 0, 0, 0],\n+        [0, 0, 1, 3, 0, 0, 0],\n+        [0, 0, 0, 3, 1, 0, 0],\n+        [0, 0, 0, 3, 0, 1, 0],\n+        [0, 0, 0, 3, 0, 0, 1]\n+    ])\n+    assert M.col_insert(3, V_single) == expected_single\n+\n+    # Edge case test: insert at the beginning\n+    expected_beginning = Matrix([\n+        [3, 1, 0, 0, 0, 0, 0],\n+        [3, 0, 1, 0, 0, 0, 0],\n+        [3, 0, 0, 1, 0, 0, 0],\n+        [3, 0, 0, 0, 1, 0, 0],\n+        [3, 0, 0, 0, 0, 1, 0],\n+        [3, 0, 0, 0, 0, 0, 1]\n+    ])\n+    assert M.col_insert(0, V_single) == expected_beginning\n+\n def test_extract():\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..1110ca5 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -619,8 +619,21 @@ def test_latex_Range():\n def test_latex_sequences():\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n+    # Test case to ensure SeqFormula does not backslash-escape square brackets\n+    s1 = SeqFormula(n**2, (n, 0, sp.oo))\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(s1) == latex_str\n+\n+    s2 = SeqFormula(n**2, (n, 0, 4))\n+    latex_str = r'[0, 1, 4, 9, 16]'\n+    assert latex(s2) == latex_str\n+\n+    s3 = SeqFormula(n + 1, (n, -3, 2))\n+    latex_str = r'[-2, -1, 0, 1, 2, 3]'\n+    assert latex(s3) == latex_str\n \n-    latex_str = r'\\left\\[0, 1, 4, 9, \\ldots\\right\\]'\n+    # Existing test cases\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n     assert latex(s1) == latex_str\n \n     latex_str = r'\\left\\[1, 2, 1, 2, \\ldots\\right\\]'\n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..fb56e8b 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,20 @@\n+\n+def test_RR_domain_with_symbols():\n+    assert Domain.preprocess('RR[y]') == RR[y]\n+    assert Domain.preprocess('CC[y]') == CC[y]\n+    assert Domain.preprocess('RR[y,z]') == RR[y, z]\n+    assert Domain.preprocess('CC[y,z]') == CC[y, z]\n+\n+    # Testing the Poly creation with domain='RR[y,z]'\n+    p = Poly(1.2*x*y*z, x, domain='RR[y,z]')\n+    assert p == Poly(1.2*y*z*x, x, domain=RR[y, z])\n+\n+    # Ensure preprocessing raises error for unsupported syntax\n+    raises(OptionError, lambda: Domain.preprocess('RR()'))\n+\n+    # Ensure proper error message\n+    raises(OptionError, lambda: Domain.preprocess('RR[y,z]()'))\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +23,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..bab7010 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,22 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import MatrixSymbol, pretty\n+\n+def test_issue_14814():\n+    # issue #14814 - testing pretty printing for MatAdd with special symbols\n+    n = 3  # Using a specific number for dimensions to avoid undefined variables\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+    a = MatrixSymbol('a', n, n)\n+    y = MatrixSymbol('y', n, n)\n+    \n+    # Test pretty printing with special characters in variable names\n+    assert pretty(x + y_star) == \"x + y*\"\n+    assert pretty(-a*x + -2*y*y) == \"-a*x - 2*y**2\"\n+    assert pretty(-x - y_star) == \"-x - y*\"\n+    assert pretty(-x + y_star) == \"-x + y*\"\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..6ab1dda 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -719,7 +719,32 @@ def test_dummification():\n     some_expr = 2 * F(t)**2 / G(t)\n     lam = lambdify((F(t), G(t)), some_expr)\n     assert lam(3, 9) == 2\n-    lam = lambdify(sin(t), 2 * sin(t)**2)\n+    import sympy as sy\n+    from sympy import lambdify, MatrixSymbol\n+    from sympy.testing.pytest import raises\n+\n+    def test_curly_matrix_symbol():\n+        # Issue #15009\n+        curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+        lam = lambdify(curlyv, curlyv)\n+        assert lam(1)==1\n+        lam = lambdify(curlyv, curlyv, dummify=True)\n+        assert lam(1)==1\n+\n+    def test_lambdify_with_curly_braces():\n+        # Test if lambdify works with curly braces in symbol names when dummify=False\n+        curlyx = sy.symbols(\"{x}\")\n+        lam = lambdify(curlyx, curlyx)\n+        assert lam(5) == 5\n+        v = sy.MatrixSymbol(\"v\", 2, 1)\n+        lam_v = lambdify(v, v)\n+        assert (lam_v([[1], [2]]) == [[1], [2]]).all()\n+\n+    def test_lambdify_with_dummify_true():\n+        # Test if lambdify works with curly braces in MatrixSymbol names when dummify=True\n+        curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+        lam = lambdify(curlyv, curlyv, dummify=True)\n+        assert (lam([[1], [2]]) == [[1], [2]]).all()\n     assert lam(F(t)) == 2 * F(t)**2\n     #Test that \\alpha was properly dummified\n     lam = lambdify((alpha, t), 2*alpha + t)\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..44c0549 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -29,8 +30,15 @@ def test_Function():\n     assert mcode(sin(x) ** cos(x)) == \"Sin[x]^Cos[x]\"\n     assert mcode(conjugate(x)) == \"Conjugate[x]\"\n \n-\n-def test_Pow():\n+def test_Max_Min():\n+    assert mcode(Max(x, 2)) == 'Max[x, 2]'\n+    assert mcode(Max(2, x)) == 'Max[2, x]'  # Assuming Max is symmetric\n+    assert mcode(Max(x, y, 2)) == 'Max[x, y, 2]'\n+    assert mcode(Max(3, 2)) == 'Max[3, 2]'\n+    assert mcode(Min(x, 2)) == 'Min[x, 2]'\n+    assert mcode(Min(2, x)) == 'Min[2, x]'  # Assuming Min is symmetric\n+    assert mcode(Min(x, y, 2)) == 'Min[x, y, 2]'\n+    assert mcode(Min(3, 2)) == 'Min[3, 2]'\n     assert mcode(x**3) == \"x^3\"\n     assert mcode(x**(y**3)) == \"x^(y^3)\"\n     assert mcode(1/(f(x)*3.5)**(x - y**x)/(x**2 + y)) == \\\n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..7cb9109 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,23 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+def test_indexed_matrix_expression_latex():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    # Original test case to ensure issue is fixed\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+    # Additional cases to ensure robustness\n+    # Test with different indices\n+    assert latex((M*N)[j, i]) == r'\\sum_{i_{1}=0}^{k - 1} M_{j, i_{1}} N_{i_{1}, i}'\n+    # Test with different matrix dimensions\n+    P = MatrixSymbol(\"P\", 2, 3)\n+    Q = MatrixSymbol(\"Q\", 3, 2)\n+    assert latex((P*Q)[0, 1]) == r'\\sum_{i_{1}=0}^{2} P_{0, i_{1}} Q_{i_{1}, 1}'\n+    assert latex((P*Q)[1, 0]) == r'\\sum_{i_{1}=0}^{2} P_{1, i_{1}} Q_{i_{1}, 0}'\n+\n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..f0809d1 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -21,7 +22,26 @@ def test_idiff():\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n \n \n-def test_intersection():\n+def test_idiff_issue_regression():\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+    f = Function('f')\n+\n+    # Test for original issue case with Eq\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x).simplify() == ((x + 1) * exp(x - y) / (y + 1)).simplify()\n+\n+    # Test for original issue case with function f(x)\n+    assert idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x).simplify() == ((x + 1) * exp(x - f(x)) / (f(x) + 1)).simplify()\n+\n+    # Additional test cases to verify the fix thoroughly\n+    # Case with multiple dependent variables\n+    g = Function('g')\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x).simplify() == ((y + Derivative(y, x)) * exp(x)).simplify()\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x).simplify() == (-y + exp(-x) * Derivative(f(x), x)).simplify()\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x).simplify() == Derivative(g(x), x).simplify()\n+\n+    # Ensure no regression on existing functionalities\n+    assert idiff(y*exp(y) - x*exp(x), y, x).simplify() == ((x + 1) * exp(x - y) / (y + 1)).simplify()\n     assert intersection(Point(0, 0)) == []\n     raises(TypeError, lambda: intersection(Point(0, 0), 3))\n     assert intersection(\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..e9a9a9b 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,7 +582,24 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n-def test_empty_f_code():\n+def test_ccode_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n     assert source == \"\"\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..a021b85 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,6 +342,15 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Intersection, Eq, S, Symbol, Piecewise\n+\n+def test_issue_16987():\n+    x = Symbol('x')\n+    # Test for Intersection with duplicates\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+    # Test for evaluating to Piecewise\n+    assert Intersection({1}, {1}, {x}).doit() == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection({1}, {x}).doit() == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n \n def test_issue_9623():\n     n = Symbol('n')\n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..8e5ad6b 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,8 +1,9 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n )\n-from sympy import eye\n+from sympy import eye, Identity\n from sympy.abc import x, i, j, a, b, c, d\n from sympy.codegen.cfunctions import log1p, expm1, hypot, log10, exp2, log2, Cbrt, Sqrt\n from sympy.codegen.array_utils import (CodegenArrayContraction,\n@@ -10,7 +11,8 @@ from sympy.codegen.array_utils import (CodegenArrayContraction,\n         CodegenArrayPermuteDims, CodegenArrayElementwiseAdd)\n from sympy.printing.lambdarepr import NumPyPrinter\n \n-from sympy.utilities.pytest import warns_deprecated_sympy\n+from sympy.utilities.pytest import warns_deprecated_sympy, skip, raises\n+import numpy as np\n from sympy.utilities.pytest import skip\n from sympy.external import import_module\n \n@@ -26,7 +28,21 @@ def test_numpy_piecewise_regression():\n     assert NumPyPrinter().doprint(p) == 'numpy.select([numpy.less(x, 0),True], [1,0], default=numpy.nan)'\n \n \n-def test_sum():\n+def test_issue_17006_numpy():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    M = MatrixSymbol(\"M\", 2, 2)\n+    f = lambdify(M, M + Identity(2))\n+    ma = np.array([[1, 2], [3, 4]])\n+    mr = np.array([[2, 2], [3, 5]])\n+\n+    assert (f(ma) == mr).all()\n+\n+    from sympy import symbols\n+    n = symbols('n', integer=True)\n+    N = MatrixSymbol(\"M\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\n     if not np:\n         skip(\"NumPy not installed\")\n \n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..4d89cf0 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -22,6 +23,20 @@ def test_point():\n     line = Line(Point(1, 0), slope=1)\n \n     assert p1 in p1\n+\n+    # Test sympified multiplication order\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    scalar = sympify(2.0)\n+    # Ensure both orders of multiplication work as expected\n+    assert point1 + point2 * scalar == Point(2, 2)\n+    assert point1 + scalar * point2 == Point(2, 2)\n+\n+    # Test 3D points with sympified multiplication order\n+    point3D1 = Point3D(0, 0, 0)\n+    point3D2 = Point3D(1, 1, 1)\n+    assert point3D1 + point3D2 * scalar == Point3D(2, 2, 2)\n+    assert point3D1 + scalar * point3D2 == Point3D(2, 2, 2)\n     assert p1 not in p2\n     assert p2.y == y2\n     assert (p3 + p4) == p4\n@@ -136,6 +151,20 @@ def test_point3D():\n     p5 = Point3D(0, 1, 2)\n \n     assert p1 in p1\n+\n+    # Test sympified multiplication order\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    scalar = sympify(2.0)\n+    # Ensure both orders of multiplication work as expected\n+    assert point1 + point2 * scalar == Point(2, 2)\n+    assert point1 + scalar * point2 == Point(2, 2)\n+\n+    # Test 3D points with sympified multiplication order\n+    point3D1 = Point3D(0, 0, 0)\n+    point3D2 = Point3D(1, 1, 1)\n+    assert point3D1 + point3D2 * scalar == Point3D(2, 2, 2)\n+    assert point3D1 + scalar * point3D2 == Point3D(2, 2, 2)\n     assert p1 not in p2\n     assert p2.y == y2\n     assert (p3 + p4) == p4\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..0ccddbf 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1893,8 +1893,31 @@ def test_normal():\n     e = Mul(S.Half, 1 + x, evaluate=False)\n     assert e.normal() == e\n \n+from sympy import Symbol, sympify, symbols, tan\n+from sympy.core.expr import ExprBuilder\n+from sympy.core.mul import Mul\n+from sympy.testing.pytest import raises\n \n def test_expr():\n+    # Test for the issue where eval is incorrectly triggered in __eq__\n+    x = Symbol('x')\n+\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+    \n+    assert (x == C()) is False\n+\n+    # Test for the issue where an object with repr 'x' compares equal to a Symbol 'x'\n+    class D:\n+        def __repr__(self):\n+            return 'x'\n+    \n+    assert (x == D()) is False\n+\n+    # Ensure string representation does not affect equality\n+    assert (x == 'x') is False\n+    assert (sympify(1) == '1') is False\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n \n@@ -1902,4 +1925,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..e33a28a 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -538,6 +538,14 @@ def test_diophantine():\n     assert diophantine(eq) == \\\n         set([(24*p*q, 2*p**2 - 24*q**2, p**2 + 12*q**2)])\n     # solvers have not been written for every type\n+\n+    # Test for issue 18186\n+    from sympy import symbols\n+    x, y = symbols('x y', integer=True)\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n     raises(NotImplementedError, lambda: diophantine(x*y**2 + 1))\n \n     # rational expressions\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..edecdd4 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -66,7 +67,20 @@ def test_sizeof():\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n-    assert all(atom == typename for atom in sz.atoms())\n+    assert sz.atoms() == {String('unsigned int'), String('sizeof')}\n+\n+def test_atoms_no_args():\n+    # Test that atoms() returns objects with no args\n+    a = Variable('a', type=int64)\n+    b = Variable('b', type=float64)\n+    decl = Declaration(a)\n+    atoms = decl.atoms()\n+    # Check that the atoms returned have no .args\n+    assert all(not atom.args for atom in atoms)\n+\n+    expr = a + b\n+    expr_atoms = expr.atoms()\n+    assert all(not atom.args for atom in expr_atoms)\n \n \n def test_struct():\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..0197bb3 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,31 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_single_element():\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n+def test_BlockDiagMatrix_two_elements():\n+    from sympy import Matrix, BlockDiagMatrix, zeros\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M, M)\n+    B = Matrix(D)\n+    expected = Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+    assert B == expected\n+\n+def test_issue_18618():\n+    from sympy import Matrix, BlockDiagMatrix\n+    A = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n+    assert A == Matrix(BlockDiagMatrix(A))\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..3fb59c0 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n@@ -83,7 +84,32 @@ def test_block_index():\n     assert BI.as_explicit().equals(eye(6))\n \n \n-def test_slicing():\n+def test_issue_block_indexing():\n+    from sympy import MatrixSymbol, BlockMatrix, Integer\n+\n+    # Issue test case\n+    n, i = symbols('n, i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    \n+    # C[i, 0] should not simplify to (A)[i, 0] as 'i' could be in the range of B\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n+\n+    # Additional checks with explicit bounds\n+    assert C[0, 0] == A[0, 0]\n+    assert C[1, 0] == B[0, 0]\n+    assert C[n, 0] == MatrixElement(C, n, 0)  # Symbolic 'n'\n+\n+    # Ensure correct evaluation with known dimensions\n+    A = MatrixSymbol('A', 2, 1)\n+    B = MatrixSymbol('B', 3, 1)\n+    C = BlockMatrix([[A], [B]])\n+    assert C[0, 0] == A[0, 0]\n+    assert C[1, 0] == A[1, 0]\n+    assert C[2, 0] == B[0, 0]\n+    assert C[4, 0] == B[2, 0]\n+    assert C[5, 0] == MatrixElement(C, 5, 0)  # Out of bound index\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..b3ca6d2 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -192,6 +192,28 @@ def test_im():\n     A = ImmutableMatrix([[1 + 3*I, 3-2*I],[0, 2*I]])\n     assert im(A) == ImmutableMatrix([[3, -2],[0, 2]])\n \n+def test_sign_rewrite_abs():\n+    x = Symbol('x')\n+    y = Symbol('y', real=True)\n+\n+    # Test rewriting sign in terms of Abs for various cases\n+    assert sign(0).rewrite(Abs) == 0\n+    assert sign(5).rewrite(Abs) == 1\n+    assert sign(-5).rewrite(Abs) == -1\n+    assert sign(I).rewrite(Abs) == I\n+    assert sign(-I).rewrite(Abs) == -I\n+\n+    # Symbolic expressions\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(2*x).rewrite(Abs) == Piecewise((0, Eq(2*x, 0)), (2*x/Abs(2*x), True))\n+\n+    # Real symbolic variable\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+\n+    # Complex numbers\n+    complex_expr = 3 + 4*I\n+    assert sign(complex_expr).rewrite(Abs) == complex_expr / Abs(complex_expr)\n+\n     X = ImmutableSparseMatrix(\n             [[i*I + i for i in range(5)] for i in range(5)])\n     Y = SparseMatrix([[i for i in range(5)] for i in range(5)])\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..c507cc8 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,29 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n+from sympy.utilities.iterables import partitions\n \n def test_partitions():\n+    # Test that each partition is a new dictionary instance to prevent dictionary reuse\n+    def is_new_instance(iterator):\n+        seen_ids = set()\n+        for partition in iterator:\n+            partition_id = id(partition)\n+            if partition_id in seen_ids:\n+                return False\n+            seen_ids.add(partition_id)\n+        return True\n+\n+    assert is_new_instance(partitions(6, k=2))\n+    assert is_new_instance(partitions(6, k=3))\n+    assert is_new_instance(partitions(8, k=4, m=3))\n+    assert is_new_instance(partitions(S(3), m=2))\n+    assert is_new_instance(partitions(4, k=3))\n+    assert is_new_instance(partitions(4))\n+    assert is_new_instance(partitions(0, size=0))  # Edge case\n+    assert is_new_instance(partitions(0, size=1))  # Edge case\n+    assert is_new_instance(partitions(1, 0, size=0))  # Edge case\n+    assert is_new_instance(partitions(1, 0, size=1))  # Edge case\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..68d84b4 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -253,8 +253,13 @@ def test_power_rewrite_exp():\n     assert all((1/func(x)).rewrite(exp) == 1/(func(x).rewrite(exp)) for func in\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n+from sympy import oo, S, zoo\n+from sympy.core.power import Pow\n \n-def test_zero():\n+def test_issue_19572():\n+    # Test issue 19572\n+    assert Pow(0, -oo) == S.ComplexInfinity\n+    assert 0**-oo == S.ComplexInfinity\n     x = Symbol('x')\n     y = Symbol('y')\n     assert 0**x != 0\n",
  "sympy__sympy-20442": "",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..ef5bd5e 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,20 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+from sympy import Symbol\n+from pytest import raises\n+\n+def test_symbol_no_dict():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"Symbols should not have a __dict__ attribute\"\n+    assert hasattr(s, '__slots__'), \"Symbols should have __slots__ attribute\"\n+    assert s.__slots__ == ('name',), \"Symbol slots should only contain 'name'\"\n+\n+def test_symbol_immutable():\n+    s = Symbol('s')\n+    with raises(AttributeError):\n+        s.name = 'x'\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..ceb474b 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, Integral, sin, oo)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -161,7 +162,15 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_issue_refine_complex_arguments():\n+    a = Symbol('a', real=True)\n+    x = Symbol('x', real=True)\n+    J = Integral(sin(x) * exp(-a * x), (x, 0, oo))\n+    assert J.doit() == Piecewise((1 / (a**2 + 1), 2 * Abs(arg(a)) < pi), \n+                                 (Integral(exp(-a * x) * sin(x), (x, 0, oo)), True))\n+    assert refine(J.doit(), Q.positive(a)) == 1 / (a**2 + 1)\n+    assert refine(abs(a), Q.positive(a)) == a\n+    assert refine(arg(a), Q.positive(a)) == 0\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..992b6cf 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -9,6 +10,29 @@ from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n def test_subs():\n+    # Test for issue with PolynomialError in Piecewise with sinh\n+    from sympy import sinh, cosh, tanh\n+    from sympy.core.cache import clear_cache\n+\n+    x_r, y_r, z = symbols('x_r y_r z', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr.subs({1: 1.0}) is not None  # should not raise PolynomialError\n+\n+    # Additional test with cosh\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr_cosh.subs({1: 1.0}) is not None  # should not raise PolynomialError\n+\n+    # Additional test with tanh\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr_tanh.subs({1: 1.0}) is not None  # should not raise PolynomialError\n+\n+    # Check removal of division by `z`\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    assert expr_no_div.subs({1: 1.0}) == exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+\n+    # Check removal of `exp`\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z)\n+    assert expr_no_exp.subs({1: 1.0}) is not None  # should not raise PolynomialError\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..69c05fd 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -5,6 +6,7 @@ from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n+from sympy.core.function import Derivative\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n \n@@ -39,7 +41,10 @@ def test_Integral_kind():\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n \n-def test_Matrix_kind():\n+def test_Derivative_kind_with_matrices():\n+    A = MatrixSymbol('A', 2, 2)\n+    d = Derivative(A, comm_x)\n+    assert d.kind is MatrixKind(NumberKind)\n     classes = (Matrix, SparseMatrix, ImmutableMatrix, ImmutableSparseMatrix)\n     for cls in classes:\n         m = cls.zeros(3, 2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..92ca576 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -105,8 +105,19 @@ def test_monomials():\n \n     raises(ValueError, lambda: set(itermonomials([x, y], [0, 1], [1, 2])))\n     raises(ValueError, lambda: set(itermonomials([x, y, z], [0, 0, 3], [0, 1, 2])))\n-\n-    assert set(itermonomials([x], [0])) == {S.One}\n+    from sympy import symbols\n+    from sympy.polys.monomials import itermonomials\n+    from sympy.polys.orderings import monomial_key\n+\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x1*x3**2, x1**2*x3, x2*x3**2, x2**2*x3, x1*x2*x3}\n+    assert set(itermonomials([x1, x2, x3], 4, 3)) == {\n+        x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x1*x3**2, x1**2*x3,\n+        x2*x3**2, x2**2*x3, x1*x2*x3, x1**4, x2**4, x3**4,\n+        x1*x2**3, x1**3*x2, x1*x3**3, x1**3*x3, x2*x3**3, x2**3*x3,\n+        x1**2*x2**2, x1**2*x3**2, x2**2*x3**2, x1*x2*x3**2,\n+        x1*x2**2*x3, x1**2*x2*x3, x1*x2**2*x3, x1*x2*x3**2\n+    }\n     assert set(itermonomials([x], [1])) == {S.One, x}\n     assert set(itermonomials([x], [2])) == {S.One, x, x**2}\n     assert set(itermonomials([x], [3])) == {S.One, x, x**2, x**3}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..eb659e1 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -45,6 +46,11 @@ def test_solve_poly_system():\n         [x + x*y - 3, y + x*y - 4], x, y) == [(-3, -2), (1, 2)]\n \n     raises(NotImplementedError, lambda: solve_poly_system([x**3 - y**3], x, y))\n+    # Test for the detection of infinite solution requests\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [y - 1], (x, y)))\n     raises(NotImplementedError, lambda: solve_poly_system(\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..eb6fca7 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,8 @@\n+\n from sympy.core.basic import Basic\n+from sympy.core.parameters import evaluate\n+from sympy.core.numbers import Integer\n+from sympy.core.singleton import S\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n@@ -444,7 +448,32 @@ def test_dot():\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n-def test__normalize_dimension():\n+def test_issue_22684():\n+    # Test case for the original issue described\n+    with evaluate(False):\n+        p = Point2D(Integer(1), Integer(2))\n+        assert p == Point2D(1, 2)\n+\n+    # Additional test cases to ensure robustness\n+    with evaluate(False):\n+        # Using floating-point numbers\n+        p = Point2D(1.5, 2.5)\n+        assert p == Point2D(1.5, 2.5)\n+\n+    with evaluate(False):\n+        # Using symbolic expressions\n+        x = Symbol('x', real=True)\n+        y = Symbol('y', real=True)\n+        p = Point2D(x, y)\n+        assert p == Point2D(x, y)\n+\n+    # Ensure that imaginary numbers raise an error\n+    with raises(ValueError, match='Imaginary coordinates are not permitted.'):\n+        Point2D(1 + I, 2)\n+\n+    with raises(ValueError, match='Imaginary coordinates are not permitted.'):\n+        with evaluate(False):\n+            Point2D(1 + I, 2)\n     assert Point._normalize_dimension(Point(1, 2), Point(3, 4)) == [\n         Point(1, 2), Point(3, 4)]\n     assert Point._normalize_dimension(\n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..0ebf1af 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -337,6 +337,14 @@ def test_cse_Indexed():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n+    # Additional test cases for the reported issue\n+    a = MatrixSymbol(\"a\", 4, 4)\n+    b = MatrixSymbol(\"b\", 4, 4)\n+    expr = a * b\n+    replacements, reduced_exprs = cse(expr)\n+    assert len(replacements) == 0  # Expect no replacements due to issue\n+    assert reduced_exprs == [expr]  # Reduced expression should be the same\n+\n \n def test_cse_MatrixSymbol():\n     # MatrixSymbols have non-Basic args, so make sure that works\n@@ -356,6 +364,14 @@ def test_cse_MatrixExpr():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n+    # Additional test cases for the reported issue\n+    a = MatrixSymbol(\"a\", 4, 4)\n+    b = MatrixSymbol(\"b\", 4, 4)\n+    expr = a * b\n+    replacements, reduced_exprs = cse(expr)\n+    assert len(replacements) == 0  # Expect no replacements due to issue\n+    assert reduced_exprs == [expr]  # Reduced expression should be the same\n+\n     replacements, reduced_exprs = cse([expr1 + expr2, expr1])\n     assert replacements\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..628fdb3 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -37,6 +38,12 @@ def test_array_negative_indices():\n \n         assert test_array[-1, -1] == 10\n \n+def test_issue_17851():\n+    for array_type in array_types:\n+        A = array_type([])\n+        assert isinstance(A, array_type)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n \n def test_issue_18361():\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..f9904e1 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,27 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify, symbols\n+\n+def test_lambdify_tuple_one_element():\n+    # Test that lambdify correctly outputs a tuple with one element\n+    f2b = lambdify([], (1,))  # Test based on the issue description\n+    assert f2b() == (1,)\n+    \n+    # Test the source code generation\n+    generated_code = inspect.getsource(lambdify([], tuple([1])))\n+    assert 'return (1,)' in generated_code\n+\n+def test_lambdify_tuple_two_elements():\n+    # Control test to ensure tuples with two elements are correctly handled\n+    f2 = lambdify([], (1, 2))\n+    assert f2() == (1, 2)\n+    \n+    # Test the source code generation for two elements\n+    generated_code = inspect.getsource(lambdify([], tuple([1, 2])))\n+    assert 'return (1, 2)' in generated_code\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..0c62996 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,12 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+from sympy import exp\n+from sympy.physics import units\n+from sympy.physics.units.systems.si import SI\n+from sympy.physics.units import Quantity\n+from sympy.physics.units.dimension import Dimension\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..58af238 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,6 +45,24 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n+    # Tests for fix of issue #24142\n+    assert TP(A - B, B - A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+\n+    # Additional test case\n+    assert TP(3*A - 4*B, 5*B + 6*C).expand(tensorproduct=True) == \\\n+        3 * TP(A, 5*B) + 3 * TP(A, 6*C) - 4 * TP(B, 5*B) - 4 * TP(B, 6*C)\n+    assert TP(x*A + y*B, z*C + w*D).expand(tensorproduct=True) == \\\n+        x*z*TP(A, C) + x*w*TP(A, D) + y*z*TP(B, C) + y*w*TP(B, D)\n+    assert TP(0, A + B).expand(tensorproduct=True) == \\\n+        0\n+    assert TP(A - A, B + C).expand(tensorproduct=True) == \\\n+        0\n+\n \n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n",
  "sympy__sympy-24213": "",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..c6ea99a 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, volt\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -18,6 +19,15 @@ def test_prefix_operations():\n     dodeca = Prefix('dodeca', 'dd', 1, base=12)\n \n     assert m * k == 1\n+\n+    assert milli * W == W / 1000\n+    assert milli * W != 1\n+    assert W * milli == W / 1000\n+\n+    # Additional test cases for other units\n+    assert milli * volt == volt / 1000\n+    assert milli * volt != 1\n+    assert volt * milli == volt / 1000\n     assert k * k == M\n     assert 1 / m == k\n     assert k / m == M\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 067de1c..fd3718a 100644\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -6,7 +6,7 @@ from django.test import SimpleTestCase, TestCase\n from django.test.utils import CaptureQueriesContext, isolate_apps\n \n from .models import (\n-    Base, Chef, CommonInfo, GrandChild, GrandParent, ItalianRestaurant,\n+    Base, Chef, Child, CommonInfo, GrandChild, GrandParent, ItalianRestaurant,\n     MixinModel, ParkingLot, Place, Post, Restaurant, Student, SubBase,\n     Supplier, Title, Worker,\n )\n@@ -22,6 +22,22 @@ class ModelInheritanceTests(TestCase):\n         w1 = Worker.objects.create(name=\"Fred\", age=35, job=\"Quarry worker\")\n         Worker.objects.create(name=\"Barney\", age=34, job=\"Quarry worker\")\n \n+    def test_child_ordering_by_pk_desc(self):\n+        # Create instances of the Child model\n+        c1 = Child.objects.create(first_name='Alice', last_name='Wonder', email='alice@example.com')\n+        c2 = Child.objects.create(first_name='Bob', last_name='Builder', email='bob@example.com')\n+\n+        # Fetch all Child instances and check their order\n+        qs = Child.objects.all()\n+        self.assertSequenceEqual(qs, [c2, c1])  # Expecting the most recent first due to \"-pk\"\n+\n+        # Verify the SQL query order\n+        expected_order_by_sql = 'ORDER BY %s.%s DESC' % (\n+            connection.ops.quote_name(Child._meta.db_table),\n+            connection.ops.quote_name(Child._meta.pk.column),\n+        )\n+        self.assertIn(expected_order_by_sql, str(qs.query))\n+\n         s = Student.objects.create(name=\"Pebbles\", age=5, school_class=\"1B\")\n \n         self.assertEqual(str(w1), \"Worker Fred\")\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..8f6e6bd 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -342,6 +342,34 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+    def test_order_by_self_referential_fk(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        article_1 = Article.objects.create(author=author_1, headline=\"Article 1\")\n+        article_2 = Article.objects.create(author=author_2, headline=\"Article 2\")\n+        \n+        # Create self-referential authors\n+        editor_1 = Author.objects.create(name=\"Editor 1\", editor=author_1)\n+        editor_2 = Author.objects.create(name=\"Editor 2\", editor=author_2)\n+        \n+        # Reassign articles to the self-referential authors\n+        article_1.author = editor_1\n+        article_1.save()\n+        article_2.author = editor_2\n+        article_2.save()\n+\n+        # Original order_by with self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+        # Explicitly ordering by editor_id\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n \n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..f501864 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -658,7 +658,21 @@ Java</label></li>\n <input id=\"id_language_1\" name=\"language\" type=\"radio\" value=\"J\" required> Java</label></div>\"\"\"\n         )\n \n-    def test_form_with_iterable_boundfield(self):\n+    def test_boundfield_subwidget_id_for_label(self):\n+        \"\"\"\n+        If auto_id is provided when initializing the form, the generated ID in\n+        subwidgets must reflect that prefix.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n         class BeatleForm(Form):\n             name = ChoiceField(\n                 choices=[('john', 'John'), ('paul', 'Paul'), ('george', 'George'), ('ringo', 'Ringo')],\n",
  "django__django-16400": "diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\nindex de2502e..268e3c3 100644\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -1484,4 +1484,17 @@ class CreatePermissionsTests(TestCase):\n                 content_type__app_label=opts.app_label,\n                 codename=codename,\n             ).exists()\n-        )\n+        )\n+\n+@override_settings(DATABASE_ROUTERS=[TenantDatabaseRouter()])\n+class MigrateCommandDatabaseParameterTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def test_permissions_respect_database_parameter(self):\n+        # Delete all permissions in the 'other' database to ensure a clean slate.\n+        Permission.objects.using(\"other\").delete()\n+        # Run the migrate command with the --database parameter set to 'other'\n+        call_command(\"migrate\", database=\"other\", verbosity=0)\n+        # Verify that permissions are added to the correct database.\n+        self.assertGreater(Permission.objects.using(\"other\").count(), 0)\n+        self.assertEqual(Permission.objects.using(\"default\").count(), 0)\n",
  "matplotlib__matplotlib-25498": "",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..051f4da 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -258,5 +258,45 @@ def test_set_output_mro():\n \n     class C(A, B):\n         pass\n-\n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas output and a custom transformer.\"\"\"\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn import set_config\n+    import numpy as np\n+    \n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    # Set the configuration to pandas\n+    set_config(transform_output=\"pandas\")\n+    \n+    # Create the FeatureUnion with the custom transformer\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    \n+    # Perform fit_transform and capture the output\n+    result = union.fit_transform(data)\n+    \n+    # Assert that the result is a DataFrame\n+    assert isinstance(result, pd.DataFrame)\n+    \n+    # Assert that the result has the correct length\n+    assert len(result) == data[\"date\"].nunique()\n+\n+    # Assert that the result has a single column\n+    assert result.shape[1] == 1\n+\n+    # Check that the sum of the values is as expected\n+    expected_output = data[\"value\"].sum()\n+    assert np.isclose(result.values.sum(), expected_output), \"The output values do not match the expected sum.\"\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..fb15ad8 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -132,6 +132,34 @@ def test_decorators(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app):\n+    # This is the added test function to verify the fix for the reported issue.\n+    options = {\"members\": None, \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.annotation_only_member.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: target.annotation_only_member',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: target.annotation_only_member',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: target.annotation_only_member',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_slots_attribute(app):\n     options = {\"members\": None}\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..5798194 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -357,8 +358,23 @@ def test_issue_2827_trigsimp_methods():\n     eq = 1/sqrt(E) + E\n     assert exptrigsimp(eq) == eq\n \n-\n-def test_exptrigsimp():\n+def test_issue_15129_trigsimp_methods():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = t1.dot(t3)\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == sin(S(3)/50)\n+\n+def test_issue_15129_additional_cases():\n+    # Test simplification directly\n+    r = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    assert simplify(r) == cos(S(1)/50)\n+\n+    # Test acos simplification\n+    acos_expr = acos(r)\n+    assert simplify(acos_expr).evalf() == acos(cos(S(1)/50)).evalf()\n     def valid(a, b):\n         from sympy.utilities.randtest import verify_numerically as tn\n         if not (tn(a, b) and a == b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..eeb0634 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4344,6 +4344,24 @@ def test_pretty_no_wrap_line():\n def test_settings():\n     raises(TypeError, lambda: pretty(S(4), method=\"garbage\"))\n \n+from sympy import Sum, oo, pprint\n+from sympy.abc import x\n+\n+def test_pretty_sum_alignment():\n+    # Test case for the alignment issue described in the problem statement\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e     \\n\\\n+ ___    \\n\\\n+ \u2572      \\n\\\n+  \u2572   x \\n\\\n+  \u2571   + 3\\n\\\n+ \u2571      \\n\\\n+ \u203e\u203e\u203e    \\n\\\n+x = 1   \\\n+\"\"\")\n+    assert upretty(expr) == ucode_str\n \n def test_pretty_sum():\n     from sympy.abc import x, a, b, k, m, n\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..207359d 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,7 +692,19 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.iterables import uniq\n+from sympy.testing.pytest import raises\n+\n def test_uniq():\n+    # Test case to verify RuntimeError is raised when modifying a list during iteration\n+    f = list('THISTLE')\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    # Test with a more complex list\n+    f = [1, 2, 3, 2, 1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    # Original test cases for uniq to ensure they still pass\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     assert list(uniq(x % 2 for x in range(5))) == [0, 1]\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..4437aca 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -5,6 +6,7 @@ from operator import attrgetter\n \n from django.core.exceptions import FieldError\n from django.db import connection\n+from django.db.models import Max\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..81577ea 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -545,8 +545,34 @@ class BasicExpressionsTests(TestCase):\n         self.assertCountEqual(subquery_test, [self.foobar_ltd, self.gmbh])\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n-\n-    def test_uuid_pk_subquery(self):\n+    def test_subquery_sql(self):\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        self.assertIs(employees.query.subquery, False)\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql)\n+\n+    def test_subquery_as_sql_without_setting_subquery(self):\n+        # Test the behavior when the subquery attribute is not set\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        employees_subquery.query.subquery = False  # Explicitly unset\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertNotIn('(SELECT ', sql)\n+        self.assertTrue(sql.startswith('(ELECT '))  # Check incorrect start\n+\n+    def test_subquery_sql_with_manual_subquery_setting(self):\n+        # Ensure that manually setting subquery to True resolves the issue\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        employees_subquery.query.subquery = True  # Manually set\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql)\n+        self.assertTrue(sql.endswith(')'))\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n         qs = UUIDPK.objects.filter(id__in=Subquery(UUID.objects.values('uuid_fk__id')))\n",
  "django__django-15819": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 0ecd041..1d3d21d 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -420,7 +420,11 @@ class InspectDBTestCase(TestCase):\n     def test_introspection_errors(self):\n         \"\"\"\n         Introspection errors should not crash the command, and the error should\n-        be visible in the output.\n+from django.core.management import call_command\n+from io import StringIO\n+import mock\n+from django.test import TransactionTestCase\n+from .models import People, Message\n         \"\"\"\n         out = StringIO()\n         with mock.patch(\n@@ -437,7 +441,25 @@ class InspectDBTestCase(TestCase):\n class InspectDBTransactionalTests(TransactionTestCase):\n     available_apps = [\"inspectdb\"]\n \n-    def test_include_views(self):\n+    def test_autogenerated_related_name(self):\n+        \"\"\"\n+        Test that inspectdb correctly generates related_name for fields with \n+        same model foreign key to prevent reverse accessor clashes.\n+        \"\"\"\n+        out = StringIO()\n+        call_command(\"inspectdb\", \"inspectdb_people\", stdout=out)\n+        output = out.getvalue()\n+\n+        self.assertIn(\n+            \"parent = models.ForeignKey('self', models.CASCADE, \",\n+            output\n+        )\n+        self.assertIn(\n+            \"related_name='parent_set'\",\n+            output\n+        )\n+\n+    def test_same_relations(self):\n         \"\"\"inspectdb --include-views creates models for database views.\"\"\"\n         with connection.cursor() as cursor:\n             cursor.execute(\n",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..9cb2042 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,15 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_wrong_select_related(self):\n+        with self.assertNumQueries(3):\n+            # Attempting to recreate the issue where select_related might assign wrong related object\n+            p = list(PoolStyle.objects.annotate(\n+                tournament_pool=FilteredRelation('pool__tournament__pool'),\n+                ).select_related('tournament_pool'))\n+            # Assert that the tournament from the pool matches the tournament from the tournament_pool\n+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +173,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..6e2ae2c 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -14,7 +15,17 @@ from PIL import Image\n import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n+import pickle\n+from matplotlib.figure import Figure\n from matplotlib.axes import Axes\n+\n+def test_unpickle_figure_dpi_stability():\n+    # Create a figure with specific DPI\n+    initial_dpi = 200.0\n+    fig = Figure(dpi=initial_dpi)\n+    for i in range(32):\n+        fig = pickle.loads(pickle.dumps(fig))\n+        assert fig.dpi == initial_dpi, f\"Failed at iteration {i}: expected dpi {initial_dpi}, got {fig.dpi}\"\n from matplotlib.figure import Figure, FigureBase\n from matplotlib.layout_engine import (ConstrainedLayoutEngine,\n                                       TightLayoutEngine)\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..bcd9ad3 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,7 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+from seaborn import PairGrid\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,7 +1625,17 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_with_hue_in_map(self):\n+        import seaborn as sns\n+        iris = sns.load_dataset(\"iris\")\n+        g = PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            success = True\n+        except Exception as e:\n+            success = False\n+        assert success, \"PairGrid with hue in map should not raise an error\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..9502a01 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,11 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+    def test_collect_only_shortcut(self, testdir):\n+        testdir.makepyfile(\"def test_x(): pass\")\n+        result = testdir.runpytest(\"-C\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -434,6 +439,41 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n+    def test_collect_only_shortcut(self, testdir):\n+        testdir.makepyfile(\"def test_x(): pass\")\n+        result = testdir.runpytest(\"-C\")\n+        result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n+\n+    def test_collect_only_shortcut_in_sister_dir(self, testdir):\n+        sub1 = testdir.mkpydir(\"sub1\")\n+        sub2 = testdir.mkpydir(\"sub2\")\n+        conf1 = testdir.makeconftest(\n+            \"\"\"\n+            import pytest\n+            class MyModule1(pytest.Module):\n+                pass\n+            def pytest_collect_file(path, parent):\n+                if path.ext == \".py\":\n+                    return MyModule1(path, parent)\n+            \"\"\"\n+        )\n+        conf2 = testdir.makeconftest(\n+            \"\"\"\n+            import pytest\n+            class MyModule2(pytest.Module):\n+                pass\n+            def pytest_collect_file(path, parent):\n+                if path.ext == \".py\":\n+                    return MyModule2(path, parent)\n+            \"\"\"\n+        )\n+        conf2.move(sub2.join(conf2.basename))\n+        p = testdir.makepyfile(\"def test_x(): pass\")\n+        p.copy(sub1.join(p.basename))\n+        p.copy(sub2.join(p.basename))\n+        result = testdir.runpytest(\"-C\")\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..916e129 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -83,6 +83,17 @@ def complex_func(arg1, arg2, arg3=None, *args, **kwargs):\n     pass\n \n \n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n+\n def missing_attr(c,\n                  a,  # type: str\n                  b=None  # type: Optional[str]\n@@ -98,4 +109,4 @@ class _ClassWithDocumentedInit:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..efcc5d8 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -84,7 +84,25 @@ def test_Identity():\n     assert In.inverse() == In\n     assert In.conjugate() == In\n \n-def test_Identity_doit():\n+def test_Identity_sum_of_elements():\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    M = MatrixSymbol('M', n, n)\n+\n+    with assuming(Query.orthogonal(M)):\n+        e = refine((M.T * M).doit())\n+\n+    # Verify that the matrix is an identity matrix\n+    assert e[0, 0] == 1\n+    assert e[0, 1] == 0\n+    assert e[1, 0] == 0\n+    assert e[1, 1] == 1\n+\n+    # Verify the sum of diagonal elements\n+    assert Sum(e[i, i], (i, 0, n-1)).doit() == n\n+\n+    # Verify the total sum of all elements\n+    assert Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..e8a560f 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,7 +251,13 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n-# These bad LaTeX strings should raise a LaTeXParsingError when parsed\n+def test_issue_fraction_parsing():\n+    from sympy.parsing.latex import parse_latex\n+    from sympy import Pow, Add, Mul\n+    # Test case for the specific LaTeX fraction parsing issue\n+    expr = parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")\n+    expected_expr = Mul(Add(Pow('a', 3), 'b'), Pow('c', -1), Pow(Pow('c', 2), -1))\n+    assert str(expr) == str(expected_expr), f\"Failed parsing: {expr} != {expected_expr}\"\n BAD_STRINGS = [\n     r\"(\",\n     r\")\",\n"
}