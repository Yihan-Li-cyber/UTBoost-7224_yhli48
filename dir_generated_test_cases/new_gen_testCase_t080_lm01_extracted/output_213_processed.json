{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..e365d43 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -134,8 +134,28 @@ def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n-\n-def test_custom_model_separable():\n+def test_separability_matrix_with_nested_compound_models():\n+    from astropy.modeling import models\n+    from astropy.modeling.separable import separability_matrix\n+\n+    # Base models\n+    linear1 = models.Linear1D(10)\n+    linear2 = models.Linear1D(5)\n+\n+    # Create compound models\n+    simple_compound = linear1 & linear2\n+    complex_compound = models.Pix2Sky_TAN() & linear1 & linear2\n+    nested_compound = models.Pix2Sky_TAN() & simple_compound\n+\n+    # Expected separability matrices\n+    expected_simple = np.array([[True, False], [False, True]])\n+    expected_complex = np.array([[True, True, False, False], [True, True, False, False], [False, False, True, False], [False, False, False, True]])\n+    expected_nested = np.array([[True, True, False, False], [True, True, False, False], [False, False, True, True], [False, False, True, True]])\n+\n+    # Run the tests\n+    assert np.array_equal(separability_matrix(simple_compound), expected_simple), \"Simple compound model failed\"\n+    assert np.array_equal(separability_matrix(complex_compound), expected_complex), \"Complex compound model failed\"\n+    assert np.array_equal(separability_matrix(nested_compound), expected_nested), \"Nested compound model failed\"\n     @custom_model\n     def model_a(x):\n         return x\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..0b2cf62 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,6 +1,10 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n+import numpy as np\n+import astropy.units as u\n+from astropy.table import QTable\n \n from astropy.io import ascii\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..9352d2e 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -108,8 +108,37 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+import pytest\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+from astropy.utils.exceptions import AstropyUserWarning\n+\n+@pytest.mark.parametrize(\"command_case\", [\"upper\", \"lower\", \"mixed\"])\n+def test_command_case_insensitivity(tmp_path, command_case):\n+    command = {\n+        \"upper\": \"READ SERR 1 2\",\n+        \"lower\": \"read serr 1 2\",\n+        \"mixed\": \"ReAd SeRr 1 2\"\n+    }[command_case]\n+\n+    qdp_content = f\"\"\"\n+    {command}\n+    1 0.5 1 0.5\n+    \"\"\"\n+\n+    path = str(tmp_path / \"test_case.qdp\")\n \n-def test_read_example():\n+    with open(path, \"w\") as fp:\n+        print(qdp_content, file=fp)\n+\n+    try:\n+        table = _read_table_qdp(path)\n+        assert table is not None\n+        assert np.allclose(table[\"col1\"], [1])\n+        assert np.allclose(table[\"col2\"], [0.5])\n+        assert np.allclose(table[\"col3\"], [1])\n+        assert np.allclose(table[\"col4\"], [0.5])\n+    except ValueError as e:\n+        pytest.fail(f\"Command case insensitivity test failed with error: {e}\")\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..fda0616 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,47 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+import pytest\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be\n+    # a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..d9609a0 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -251,9 +251,22 @@ class TestTableFunctions(FitsTestCase):\n         assert (t[1].data.field(0) == np.array([1, 2])).all()\n \n         # When there are scaled columns, the raw data are in data._parent\n-\n         t.close()\n \n+    def test_fits_table_with_d_exponent(self):\n+        # Create a table with a 'D' exponent format and verify the output\n+        r1 = np.array([11., 12.])\n+        c2 = fits.Column(name='def', format='D', array=r1, bscale=2.3, bzero=0.6)\n+        hdu = fits.TableHDU.from_columns([c2])\n+        hdu.writeto(self.temp('test_d_exponent.fits'), overwrite=True)\n+        \n+        with open(self.temp('test_d_exponent.fits')) as f:\n+            file_content = f.read()\n+            assert '4.95652173913043548D+00' in file_content, \"Expected 'D' format in output file\"\n+\n+        with fits.open(self.temp('test_d_exponent.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data), \"Data mismatch in FITS file\"\n+\n     def test_ascii_table(self):\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..33291ae 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1103,6 +1103,12 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        By default, FILE_UPLOAD_PERMISSIONS should be 0o644 if not explicitly set.\n+        \"\"\"\n+        self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n     def test_override_file_upload_directory_permissions(self):\n         \"\"\"\n         Overriding the FILE_UPLOAD_DIRECTORY_PERMISSIONS setting should be\n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..f1c82ab 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,7 +75,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +84,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "",
  "django__django-11133": "",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..61213b7 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,6 +1,8 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n+from django.db.models.deletion import Collector\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n@@ -464,7 +466,34 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_single_instance(self):\n+        \"\"\"Test deleting a single User instance.\"\"\"\n+        user = User.objects.create()\n+        user.delete()\n+        self.assertIsNone(user.pk)\n+        self.assertEqual(User.objects.count(), 0)\n+\n+    def test_delete_multiple_instances(self):\n+        \"\"\"Test deleting multiple User instances.\"\"\"\n+        user1 = User.objects.create()\n+        user2 = User.objects.create()\n+        User.objects.all().delete()\n+        self.assertIsNone(user1.pk)\n+        self.assertIsNone(user2.pk)\n+        self.assertEqual(User.objects.count(), 0)\n+\n+    def test_delete_with_no_instances(self):\n+        \"\"\"Test deleting when no instances exist.\"\"\"\n+        User.objects.all().delete()\n+        self.assertEqual(User.objects.count(), 0)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..4db47cc 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -3,6 +3,29 @@ import os\n import py_compile\n import shutil\n import sys\n+class TestStatReloader(SimpleTestCase):\n+    def test_reloader_tracks_manage_py_changes(self):\n+        \"\"\"Ensure the StatReloader tracks changes to 'manage.py'.\"\"\"\n+        # Mock the module to simulate a change in manage.py\n+        main_module = sys.modules['__main__']\n+        manage_py_path = Path(main_module.__file__)\n+\n+        # Create a StatReloader instance and check if it tracks the file\n+        reloader = StatReloader()\n+        \n+        with mock.patch.object(reloader, 'needs_reload', return_value=False):\n+            # Simulate file modification\n+            with mock.patch('pathlib.Path.stat', return_value=mock.Mock(st_mtime=1)):\n+                reloader.tick()\n+                needs_reload_initial = reloader.needs_reload()\n+\n+            with mock.patch('pathlib.Path.stat', return_value=mock.Mock(st_mtime=2)):\n+                reloader.tick()\n+                needs_reload_after_change = reloader.needs_reload()\n+\n+        self.assertFalse(needs_reload_initial, \"Reloader should not detect changes initially.\")\n+        self.assertTrue(needs_reload_after_change, \"Reloader should detect changes after manage.py is modified.\")\n+\n import tempfile\n import threading\n import time\n@@ -17,7 +40,9 @@ from django.apps.registry import Apps\n from django.test import SimpleTestCase\n from django.test.utils import extend_sys_path\n from django.utils import autoreload\n-from django.utils.autoreload import WatchmanUnavailable\n+from django.utils.autoreload import WatchmanUnavailable, StatReloader\n+from unittest import mock\n+import sys\n \n from .utils import on_macos_with_hfs\n \n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..9471565 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -141,7 +141,23 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         self.assertEqual(autoreload.iter_modules_and_files((fake_main,), frozenset()), frozenset())\n \n \n-class TestCommonRoots(SimpleTestCase):\n+class TestNullBytePaths(SimpleTestCase):\n+    def test_path_with_embedded_null_bytes_handling(self):\n+        paths_with_null_bytes = [\n+            'embedded_null_byte\\x00.py',\n+            'di\\x00rectory/embedded_null_byte.py',\n+            '\\x00leadingnullbyte.py',\n+            'trailingnullbyte.py\\x00',\n+            'infix\\x00nullbyte.py',\n+        ]\n+\n+        for path in paths_with_null_bytes:\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset(),\n+                    f\"Failed to handle path with embedded null byte: {path}\"\n+                )\n     def test_common_roots(self):\n         paths = (\n             Path('/first/second'),\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..3e39607 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -18,6 +18,9 @@ from django.test import RequestFactory, SimpleTestCase, override_settings\n from django.test.utils import LoggingCaptureMixin\n from django.urls import path, reverse\n from django.utils.functional import SimpleLazyObject\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n+from django.test import Client\n from django.utils.safestring import mark_safe\n from django.views.debug import (\n     CLEANSED_SUBSTITUTE, CallableSettingWrapper, ExceptionReporter,\n@@ -242,6 +245,16 @@ class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n \n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        Test that raising Http404 in a path converter's to_python method \n+        results in a technical 404 response when DEBUG is True.\n+        \"\"\"\n+        client = Client()\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n     def test_handle_db_exception(self):\n         \"\"\"\n         Ensure the debug view works when a database exception is raised by\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..9a9f5a5 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -163,6 +163,59 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n+    def test_max_length_exactly_fits_longest_choice(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=3, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [])\n+\n+    def test_max_length_no_choices(self):\n+        class Model(models.Model):\n+            field = models.CharField(max_length=10)\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [])\n+\n+    def test_max_length_with_null_choice_value(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=5, choices=[(None, 'No Value')]\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [])\n+\n     def test_non_iterable_choices(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=10, choices='bad')\n",
  "django__django-11815": "",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..41ed051 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,6 +318,28 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mock(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n+\n     def test_parsing_rfc850(self):\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n",
  "django__django-11964": "",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..c283c5b 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -150,7 +150,15 @@ class ChoicesTests(SimpleTestCase):\n \n class GetFieldDisplayTests(SimpleTestCase):\n \n-    def test_choices_and_field_display(self):\n+    def test_override_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return \"something\"\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), \"something\")\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n         values.\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex 12487f2..9c8286a 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -14,4 +14,5 @@ urlpatterns = [\n     re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n-]\n+    re_path(r'^module/(?P<format>(html|json|xml))?/?$', views.empty_view, name='modules'),\n+]\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..7a6e9dc 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,4 @@\n+\n import pickle\n \n from django import forms\n@@ -148,6 +149,36 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+from django.test import TestCase\n+\n+class InheritedChoicesTests(TestCase):\n+    def test_overriding_inherited_FIELD_display(self):\n+        class Base(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Base A')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class Child(Base):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Child A'), ('B', 'Child B')])\n+\n+        self.assertEqual(Child(foo='A').get_foo_display(), 'Child A')\n+        self.assertEqual(Child(foo='B').get_foo_display(), 'Child B')\n+\n+    def test_additional_inherited_FIELD_display(self):\n+        class Base(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'output1'), ('B', 'output2')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        class Child(Base):\n+            foo = models.CharField(max_length=254, choices=[('A', 'output1'), ('B', 'output2'), ('C', 'output3')])\n+\n+        self.assertEqual(Child(foo='A').get_foo_display(), 'output1')\n+        self.assertEqual(Child(foo='B').get_foo_display(), 'output2')\n+        self.assertEqual(Child(foo='C').get_foo_display(), 'output3')\n+\n class GetFieldDisplayTests(SimpleTestCase):\n \n     def test_choices_and_field_display(self):\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..3b1218d 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,6 +76,23 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n+    def test_sublanguage_fallback_to_base_language(self):\n+        with self.subTest('de-at with de available'):\n+            with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German')]):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n+        with self.subTest('es-ar with es available'):\n+            with self.settings(LANGUAGE_CODE='es-ar', LANGUAGES=[('es', 'Spanish')]):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n+        with self.subTest('en-GB with en available'):\n+            with self.settings(LANGUAGE_CODE='en-GB', LANGUAGES=[('en', 'English')]):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n+        with self.subTest('fr-CA with fr available'):\n+            with self.settings(LANGUAGE_CODE='fr-CA', LANGUAGES=[('fr', 'French')]):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n     def test_inconsistent_language_settings(self):\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..2a22e64 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -175,6 +175,21 @@ class UtilsTests(SimpleTestCase):\n \n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n+        \n+    def test_json_display_for_field_readonly(self):\n+        tests = [\n+            ({\"foo\": \"bar\"}, '{\"foo\": \"bar\"}'),  # Normal JSON object\n+            ([1, 2, 3], '[1, 2, 3]'),  # JSON array\n+            ('string', '\"string\"'),  # JSON string\n+            ({\"nested\": {\"key\": \"value\"}}, '{\"nested\": {\"key\": \"value\"}}'),  # Nested JSON\n+            ({1: 2}, '{1: 2}'),  # Invalid JSON example (invalid key type)\n+        ]\n+        \n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                display_value = display_for_field(value, models.JSONField(), self.empty_value)\n+                self.assertEqual(display_value, expected_display, f\"Failed for value: {value}\")\n+        self.assertEqual(display_value, self.empty_value)\n \n     def test_number_formats_display_for_field(self):\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..208e20f 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,78 @@\n+\n+class TestDeserializeDbFromString(TransactionTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_foreign_key_without_circular_reference(self):\n+        # Test serialization/deserialization where foreign keys exist but no circular dependency.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_multiple_objects_with_references(self):\n+        # Test multiple objects and references to ensure proper deserialization order.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=1)\n+        obj_ref1 = ObjectReference.objects.get(pk=1)\n+        obj_ref2 = ObjectReference.objects.get(pk=2)\n+        self.assertEqual(obj_ref1.obj, obj)\n+        self.assertEqual(obj_ref2.obj, obj)\n+\n import copy\n from unittest import mock\n \n@@ -5,7 +80,8 @@ from django.db import DEFAULT_DB_ALIAS, connection, connections\n from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, TransactionTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..f2aa061 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -127,6 +127,28 @@ class RelativeFieldTests(SimpleTestCase):\n                 id='fields.W343',\n             ),\n         ])\n+    \n+    def test_corrected_recursive_relationship_hint(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through='CorrectedAmbiguousRelationship')\n+\n+        class CorrectedAmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('field')\n+        errors = field.check(from_model=Group)\n+        self.assertTrue(any(\n+            error.hint == (\n+                'If you want to create a recursive relationship, use '\n+                'ManyToManyField(\"self\", through=\"CorrectedAmbiguousRelationship\").'\n+            )\n+            for error in errors\n+        ))\n \n     def test_ambiguous_relationship_model(self):\n \n@@ -158,6 +180,28 @@ class RelativeFieldTests(SimpleTestCase):\n                 id='fields.E335',\n             ),\n         ])\n+    \n+    def test_corrected_recursive_relationship_hint(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through='CorrectedAmbiguousRelationship')\n+\n+        class CorrectedAmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('field')\n+        errors = field.check(from_model=Group)\n+        self.assertTrue(any(\n+            error.hint == (\n+                'If you want to create a recursive relationship, use '\n+                'ManyToManyField(\"self\", through=\"CorrectedAmbiguousRelationship\").'\n+            )\n+            for error in errors\n+        ))\n \n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n",
  "django__django-12700": "",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..4abfc97 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1751,6 +1751,29 @@ class OperationTests(OperationTestBase):\n         self.assertIndexNotExists(\"test_alinto_pony\", [\"pink\", \"weight\"])\n         # And deconstruction\n         definition = operation.deconstruct()\n+\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_remove_with_unique_together(self):\n+        app_label = 'test_alintoremove_wunto'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n         self.assertEqual(definition[0], \"AlterIndexTogether\")\n         self.assertEqual(definition[1], [])\n         self.assertEqual(definition[2], {'name': \"Pony\", 'index_together': {(\"pink\", \"weight\")}})\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..9ff011c 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -685,6 +685,26 @@ class FastDeleteTests(TestCase):\n         self.assertNumQueries(2, a.delete)\n         self.assertEqual(User.objects.count(), 0)\n \n+    def test_delete_no_objects_no_foreign_keys(self):\n+        \"\"\"\n+        Test that deleting a queryset with no objects and no foreign keys\n+        returns (0, {'model_label': 0}) consistently.\n+        \"\"\"\n+        BlockLibrary.objects.all().delete()  # Ensure no objects exist\n+        deleted_count, deleted_objs = BlockLibrary.objects.all().delete()\n+        self.assertEqual(deleted_count, 0)\n+        self.assertEqual(deleted_objs, {'delete.BlockLibrary': 0})\n+\n+    def test_delete_no_objects_with_foreign_keys(self):\n+        \"\"\"\n+        Test that deleting a queryset with no objects but with foreign keys\n+        returns (0, {'model_label': 0}) consistently.\n+        \"\"\"\n+        HiddenUser.objects.all().delete()  # Ensure no objects exist\n+        deleted_count, deleted_objs = HiddenUser.objects.all().delete()\n+        self.assertEqual(deleted_count, 0)\n+        self.assertEqual(deleted_objs, {'delete.HiddenUser': 0})\n+\n     def test_fast_delete_empty_no_update_can_self_select(self):\n         \"\"\"\n         #25932 - Fast deleting on backends that don't have the\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..1387597 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,49 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_static_file_response(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request.\n+        scope = self.async_request_factory._base_scope(path='/static/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content.\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response.\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        # Allow response.close() to finish.\n+        await communicator.wait()\n+\n+    async def test_get_async_response(self):\n+        request = self.async_request_factory.get('/static/test/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_get_async_response_not_found(self):\n+        request = self.async_request_factory.get('/static/test/not-found.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..d6cb178 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,19 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Original reported issue test cases\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            # Test cases for stripping leading and trailing underscores/dashes\n+            ('---Django---', 'django', False),\n+            ('__Django__', 'django', False),\n+            ('---__Django__---', 'django', False),\n+            # Test cases with mixed underscores and dashes\n+            ('---__Django---__Rocks__---', 'django-rocks', False),\n+            # Test cases with only dashes and underscores\n+            ('------', '', False),\n+            ('______', '', False),\n+            # Test case with no alphanumeric characters but special characters\n+            ('!!!@@@###$$$%%%^^^&&&***((()))', '', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..3b72254 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2819,7 +2819,66 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n-    def test_callable_called_each_time_form_is_instantiated(self):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        marley = Character.objects.create(username='Marley', last_action='2023-10-11')\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-11')\n+\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n             StumpJokeForm()\n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..2e19af2 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -11,6 +11,32 @@ from django.test.utils import isolate_apps\n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n+    def test_abstract_inherited_fields_equality_and_hash(self):\n+        \"\"\"Field instances from different concrete models inheriting the same abstract model should not be equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        field1 = InheritAbstractModel1._meta.get_field('field')\n+        field2 = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Verify that fields from different inherited models are not equal\n+        self.assertNotEqual(field1, field2)\n+\n+        # Verify that the hash values are different\n+        self.assertNotEqual(hash(field1), hash(field2))\n+\n+        # Verify ordering (although not directly required, it's good to check)\n+        self.assertLess(field1.creation_counter, field2.creation_counter)\n+\n     def test_single_parent(self):\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n@@ -347,4 +373,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..38d2d5b 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..5b5ddfb 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import pickle\n import unittest\n import uuid\n from copy import deepcopy\n from decimal import Decimal\n+from collections import namedtuple\n from unittest import mock\n \n from django.core.exceptions import FieldError\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..d67d481 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -31,9 +31,58 @@ from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+import os\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.test.utils import captured_stdout, captured_stderr\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_main(self):\n+        \"\"\"\n+        If the program name is '__main__.py', it should default to 'python -m django'.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['__main__.py'] + args)\n+        self.assertIn('usage: python -m django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_when_none(self):\n+        \"\"\"\n+        If sys.argv[0] is None, it should handle the situation gracefully.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['custom-script'] + args)\n+        self.assertIn('usage: custom-script shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_custom_prog_name(self):\n+        \"\"\"\n+        Test custom program name is correctly used in the usage message.\n+        \"\"\"\n+        args = ['help']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            execute_from_command_line(['custom-django-admin'] + args)\n+        self.assertIn('usage: custom-django-admin help', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n \n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..4330a7a 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -20,9 +21,42 @@ class ShellCommandTestCase(SimpleTestCase):\n                 ),\n             )\n         self.assertEqual(cm.records[0].getMessage(), __version__)\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n \n     @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n     @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+    @mock.patch('django.core.management.commands.shell.select')\n     def test_stdin_read(self, select):\n         with captured_stdin() as stdin, captured_stdout() as stdout:\n             stdin.write('print(100)\\n')\n@@ -49,4 +83,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..8321137 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -962,12 +962,33 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n         response = self.client.get(self.change_url)\n         self.assertNotContains(response, 'id=\"id_question_set-0-text\"')\n \n+from django.urls import reverse\n+from django.test import override_settings, TestCase, RequestFactory\n+from django.contrib.admin.sites import site as admin_site\n+from admin_inlines.models import Profile, VerboseNameProfile, VerboseNamePluralProfile, BothVerboseNameProfile\n+from admin_inlines.models import ProfileCollection\n+from django.contrib.admin.options import ModelAdmin, TabularInline\n \n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n     factory = RequestFactory()\n+    def test_verbose_name_defaults_to_plural_inline(self):\n+        class InlineWithVerboseNameOnly(TabularInline):\n+            model = Profile\n+            verbose_name = 'Profile item'\n \n-    def test_verbose_name_plural_inline(self):\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [InlineWithVerboseNameOnly]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+\n+        # Ensure the verbose name plural defaults to 'Profile items' since verbose_name is 'Profile item'\n+        self.assertContains(response, '<h2>Profile items</h2>')\n+        self.assertContains(response, 'Add another Profile item')\n+        self.assertNotContains(response, '<h2>Profiles</h2>')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name_plural = 'Non-verbose childs'\n@@ -1071,6 +1092,12 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n         self.assertNotContains(response, 'Add another Model with both - name')\n \n+from django.urls import reverse\n+from django.test import override_settings, TestCase, RequestFactory\n+from django.contrib.admin.sites import site as admin_site\n+from admin_inlines.models import Profile, VerboseNameProfile, VerboseNamePluralProfile, BothVerboseNameProfile\n+from admin_inlines.models import ProfileCollection\n+from django.contrib.admin.options import ModelAdmin, TabularInline\n \n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..fb45aef 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -595,6 +595,16 @@ class TestQuerying(TestCase):\n             [self.objs[4]],\n         )\n \n+    def test_json_null_isnull_true(self):\n+        # Test that __isnull=True does not match JSON null on SQLite and Oracle.\n+        # Objects that have the key 'j' with a JSON null should not be returned.\n+        \n+        # Assuming objs[4] has 'j': null, it should not be in the result set.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],  # objs[4] should not be included\n+        )\n+\n     def test_isnull_key_or_none(self):\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n",
  "django__django-13768": "diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py\nindex ad86558..3fd10fa 100644\n--- a/django/dispatch/dispatcher.py\n+++ b/django/dispatch/dispatcher.py\n@@ -208,6 +208,8 @@ class Signal:\n             try:\n                 response = receiver(signal=self, sender=sender, **named)\n             except Exception as err:\n+                logger = logging.getLogger('django.dispatch')\n+                logger.exception('Error calling %s in Signal.send_robust()', receiver)\n                 responses.append((receiver, err))\n             else:\n                 responses.append((receiver, response))\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..21d1015 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,9 +281,24 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n+from .asserts import AssertFormErrorsMixin\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n-    def test_modelchoicefield(self):\n+    def test_modelchoicefield_value_placeholder(self):\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n         ChoiceModel.objects.create(pk=2, name='b')\n@@ -307,4 +322,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..a524983 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,12 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+class Product(models.Model):\n+    sku = models.CharField(primary_key=True, max_length=50)\n+\n+class Order(models.Model):\n+    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..8558e90 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,5 +1,7 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n+from collections.abc import KeysView\n \n \n class QTests(SimpleTestCase):\n@@ -16,7 +18,31 @@ class QTests(SimpleTestCase):\n         self.assertEqual(q | Q(), q)\n         self.assertEqual(Q() | q, q)\n \n-    def test_combine_or_both_empty(self):\n+    def test_combine_or_dict_keys(self):\n+        # Test combining with dict_keys using the | operator\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n+    def test_combine_and_dict_keys(self):\n+        # Test combining with dict_keys using the & operator\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+\n+    def test_combine_or_dict_keys_non_empty(self):\n+        # Test combining Q objects with non-empty dict_keys using the | operator\n+        d = {'a': 1, 'b': 2}\n+        q = Q(x__in=d.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n+    def test_combine_and_dict_keys_non_empty(self):\n+        # Test combining Q objects with non-empty dict_keys using the & operator\n+        d = {'a': 1, 'b': 2}\n+        q = Q(x__in=d.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n         self.assertEqual(Q() | Q(), Q())\n \n     def test_combine_not_q_object(self):\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..1137daf 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -30,6 +30,7 @@ from django.test.utils import (\n )\n from django.utils.functional import SimpleLazyObject\n \n+from django.db.models import Exists, OuterRef, Q\n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n     RemoteEmployee, Result, SimulationRun, Time,\n@@ -43,6 +44,54 @@ class BasicExpressionsTests(TestCase):\n             name=\"Example Inc.\", num_employees=2300, num_chairs=5,\n             ceo=Employee.objects.create(firstname=\"Joe\", lastname=\"Smith\", salary=10)\n         )\n+\n+    def test_q_and_exists_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        \n+        # Test with Q() & Exists(...)\n+        condition1 = Q(salary__gte=30) & Exists(is_ceo)\n+        self.assertCountEqual(\n+            Employee.objects.filter(condition1),\n+            [self.max]\n+        )\n+        \n+        # Test with Exists(...) & Q()\n+        condition2 = Exists(is_ceo) & Q(salary__gte=30)\n+        self.assertCountEqual(\n+            Employee.objects.filter(condition2),\n+            [self.max]\n+        )\n+        \n+        # Test with Q() | Exists(...)\n+        condition3 = Q(salary__lt=15) | Exists(is_poc)\n+        self.assertCountEqual(\n+            Employee.objects.filter(condition3),\n+            [self.example_inc.ceo, self.max]\n+        )\n+        \n+        # Test with Exists(...) | Q()\n+        condition4 = Exists(is_poc) | Q(salary__lt=15)\n+        self.assertCountEqual(\n+            Employee.objects.filter(condition4),\n+            [self.example_inc.ceo, self.max]\n+        )\n+        \n+        # Ensure that Q(...) & Exists(...) now works without raising TypeError\n+        conditions = [\n+            Q() & Exists(is_ceo),\n+            Exists(is_ceo) & Q(),\n+            Q() | Exists(is_poc),\n+            Exists(is_poc) | Q(),\n+        ]\n+        for condition in conditions:\n+            with self.subTest(condition=condition):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(condition),\n+                    [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]\n+                )\n         cls.foobar_ltd = Company.objects.create(\n             name=\"Foobar Ltd.\", num_employees=3, num_chairs=4, based_in_eu=True,\n             ceo=Employee.objects.create(firstname=\"Frank\", lastname=\"Meyer\", salary=20)\n@@ -792,6 +841,54 @@ class BasicExpressionsTests(TestCase):\n                 output_field=BooleanField(),\n             ),\n         )\n+\n+    def test_q_and_exists_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        \n+        # Test with Q() & Exists(...)\n+        condition1 = Q(salary__gte=30) & Exists(is_ceo)\n+        self.assertCountEqual(\n+            Employee.objects.filter(condition1),\n+            [self.max]\n+        )\n+        \n+        # Test with Exists(...) & Q()\n+        condition2 = Exists(is_ceo) & Q(salary__gte=30)\n+        self.assertCountEqual(\n+            Employee.objects.filter(condition2),\n+            [self.max]\n+        )\n+        \n+        # Test with Q() | Exists(...)\n+        condition3 = Q(salary__lt=15) | Exists(is_poc)\n+        self.assertCountEqual(\n+            Employee.objects.filter(condition3),\n+            [self.example_inc.ceo, self.max]\n+        )\n+        \n+        # Test with Exists(...) | Q()\n+        condition4 = Exists(is_poc) | Q(salary__lt=15)\n+        self.assertCountEqual(\n+            Employee.objects.filter(condition4),\n+            [self.example_inc.ceo, self.max]\n+        )\n+        \n+        # Ensure that Q(...) & Exists(...) now works without raising TypeError\n+        conditions = [\n+            Q() & Exists(is_ceo),\n+            Exists(is_ceo) & Q(),\n+            Q() | Exists(is_poc),\n+            Exists(is_poc) | Q(),\n+        ]\n+        for condition in conditions:\n+            with self.subTest(condition=condition):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(condition),\n+                    [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]\n+                )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n     def test_boolean_expression_combined(self):\n@@ -803,6 +900,54 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Exists(is_ceo) | Exists(is_poc)),\n             [self.example_inc.ceo, self.foobar_ltd.ceo, self.max],\n         )\n+\n+    def test_q_and_exists_commutativity(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        \n+        # Test with Q() & Exists(...)\n+        condition1 = Q(salary__gte=30) & Exists(is_ceo)\n+        self.assertCountEqual(\n+            Employee.objects.filter(condition1),\n+            [self.max]\n+        )\n+        \n+        # Test with Exists(...) & Q()\n+        condition2 = Exists(is_ceo) & Q(salary__gte=30)\n+        self.assertCountEqual(\n+            Employee.objects.filter(condition2),\n+            [self.max]\n+        )\n+        \n+        # Test with Q() | Exists(...)\n+        condition3 = Q(salary__lt=15) | Exists(is_poc)\n+        self.assertCountEqual(\n+            Employee.objects.filter(condition3),\n+            [self.example_inc.ceo, self.max]\n+        )\n+        \n+        # Test with Exists(...) | Q()\n+        condition4 = Exists(is_poc) | Q(salary__lt=15)\n+        self.assertCountEqual(\n+            Employee.objects.filter(condition4),\n+            [self.example_inc.ceo, self.max]\n+        )\n+        \n+        # Ensure that Q(...) & Exists(...) now works without raising TypeError\n+        conditions = [\n+            Q() & Exists(is_ceo),\n+            Exists(is_ceo) & Q(),\n+            Q() | Exists(is_poc),\n+            Exists(is_poc) | Q(),\n+        ]\n+        for condition in conditions:\n+            with self.subTest(condition=condition):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(condition),\n+                    [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]\n+                )\n         self.assertCountEqual(\n             Employee.objects.filter(Exists(is_ceo) & Exists(is_poc)),\n             [self.max],\n",
  "django__django-14155": "",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..37dbe3b 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,7 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import SimpleTestCase, override_settings, isolate_apps\n+from django.db import models\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -66,7 +69,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    class MyBigAutoField(models.BigAutoField):\n+        pass\n+\n+    class MySmallAutoField(models.SmallAutoField):\n+        pass\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +105,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    class MyBigAutoField(models.BigAutoField):\n+        pass\n+\n+    class MySmallAutoField(models.SmallAutoField):\n+        pass\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..ed54380 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2168,8 +2168,15 @@ class StartApp(AdminScriptTestCase):\n                     \"sure the name is a valid identifier.\".format(bad_name)\n                 )\n                 self.assertFalse(os.path.exists(testproject_dir))\n-\n-    def test_importable_name(self):\n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        \"\"\"\n+        Test startapp with a trailing slash in the directory name.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app_with_slash/')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'myapp', os.path.join('apps', 'app_with_slash/')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n         \"\"\"\n         startapp validates that app name doesn't clash with existing Python\n         modules.\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..f7fca37 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -18,6 +18,7 @@ from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n+from django.forms import forms\n \n from .models.custom_user import (\n     CustomUser, CustomUserWithoutIsActiveField, ExtensionUser,\n@@ -1020,6 +1021,18 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_label_for_ReadOnlyPasswordHashWidget(self):\n+        \"\"\"\n+        Test that ReadOnlyPasswordHashWidget's label does not have a 'for' attribute\n+        as it doesn't have any labelable elements.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        self.assertIsNone(bound_field.field.widget.id_for_label('id'))\n+        self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..6ca2f2a 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -657,8 +657,30 @@ class WriterTests(SimpleTestCase):\n \n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n+    def test_serialize_mixin_and_custom_field(self):\n+        \"\"\"\n+        Test to ensure migration serialization includes necessary imports for mixins and custom fields.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, models.Model):\n+            name = MyField(primary_key=True)\n+\n+        options = {\n+            'abstract': False,\n+        }\n \n-    def test_simple_migration(self):\n+        statement, imports = MigrationWriter.serialize(MyModel)\n+        self.assertIn('from django.db import models', imports)\n+        self.assertIn('app.models.MyMixin', imports)\n+        self.assertIn('app.models.MyField', imports)\n+        self.assertIn('models.Model', statement)\n+        self.assertIn('app.models.MyMixin', statement)\n+        self.assertIn('app.models.MyField', statement)\n         \"\"\"\n         Tests serializing a simple migration.\n         \"\"\"\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..3d7646f 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -337,6 +337,8 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        # Check for the presence of 'nonform' CSS class\n+        self.assertIn('<ul class=\"errorlist nonform\">', str(formset.non_form_errors()))\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -359,6 +361,8 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        # Check for the presence of 'nonform' CSS class\n+        self.assertIn('<ul class=\"errorlist nonform\">', str(formset.non_form_errors()))\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -983,6 +987,8 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        # Check for the presence of 'nonform' CSS class\n+        self.assertIn('<ul class=\"errorlist nonform\">', str(formset.non_form_errors()))\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..584eb6e 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -7,7 +7,7 @@ from django.test import TestCase\n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n     Invitation, Membership, Person, PersonSelfRefM2M, Recipe, RecipeIngredient,\n-    Relationship, SymmetricalFriendship,\n+    Relationship, SymmetricalFriendship, Event, Invitation, PersonChild\n )\n \n \n@@ -20,7 +20,13 @@ class M2mThroughTests(TestCase):\n         cls.rock = Group.objects.create(name='Rock')\n         cls.roll = Group.objects.create(name='Roll')\n \n-    def test_retrieve_intermediate_items(self):\n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        self.assertEqual(reverse_m2m.through_fields, ['event', 'invitee'])\n+        inherited_reverse_m2m = PersonChild._meta.get_field('events_invited')\n+        self.assertEqual(inherited_reverse_m2m.through_fields, ['event', 'invitee'])\n+        # Ensure that hashing doesn't raise errors and both hash values match\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n         Membership.objects.create(person=self.jim, group=self.rock)\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n",
  "django__django-14752": "",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..cfcdfad 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -426,6 +426,53 @@ class MethodDecoratorTests(SimpleTestCase):\n                     return \"tests\"\n \n \n+import functools\n+from django.utils.decorators import method_decorator\n+from unittest import TestCase\n+\n+class MethodDecoratorWrapperAssignmentsTests(TestCase):\n+    def test_wrapper_assignments_with_partial(self):\n+        \"\"\"Test that @method_decorator preserves wrapper assignments when decorating a partial object.\"\"\"\n+        func_name = None\n+        func_module = None\n+        \n+        def decorator(func):\n+            @functools.wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n+    def test_wrapper_assignments_with_logging(self):\n+        \"\"\"Test that a logger decorator preserves function attributes using method_decorator.\"\"\"\n+        def logger(func):\n+            @functools.wraps(func)\n+            def inner(*args, **kwargs):\n+                result = func(*args, **kwargs)\n+                return result\n+            return inner\n+\n+        class Test:\n+            @method_decorator(logger)\n+            def hello_world(self):\n+                return \"hello\"\n+\n+        test_instance = Test()\n+        result = test_instance.hello_world()\n+        self.assertEqual(result, \"hello\")\n+        self.assertEqual(Test.hello_world.__name__, 'hello_world')\n+\n class XFrameOptionsDecoratorsTests(TestCase):\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..8bb77cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..6dc70a8 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -153,8 +153,22 @@ class MultiValueFieldTest(SimpleTestCase):\n             <input type=\"text\" name=\"field1_2_1\" id=\"id_field1_2_1\" required></td></tr>\n             \"\"\",\n         )\n-\n-    def test_form_as_table_data(self):\n+    \n+    def test_multivaluefield_label_id(self):\n+        class SampleForm(Form):\n+            multivalue = MultiValueField(fields=(CharField(), CharField()))\n+        \n+        form = SampleForm()\n+        \n+        # Validate that the label does not have an indexed `for` attribute\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label for=\"id_multivalue_0\">Multivalue:</label></th>\n+            <td><input type=\"text\" name=\"multivalue_0\" id=\"id_multivalue_0\" required>\n+            <input type=\"text\" name=\"multivalue_1\" id=\"id_multivalue_1\" required></td></tr>\n+            \"\"\"\n+        )\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n             'field1_1': ['J', 'P'],\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..3806f46 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -70,6 +70,9 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # IPv6.\n             ('http://[12:34::3a53]/', 'http://[12:34::3a53]/'),\n             ('http://[a34:9238::]:8080/', 'http://[a34:9238::]:8080/'),\n+            # This case previously raised a ValueError instead of ValidationError.\n+            '////]@N.AN',\n+            '#@A.bO',\n         ]\n         for url, expected in tests:\n             with self.subTest(url=url):\n@@ -100,6 +103,9 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # even on domains that don't fail the domain label length check in\n             # the regex.\n             'http://%s' % (\"X\" * 200,),\n+            # This case previously raised a ValueError instead of ValidationError.\n+            '////]@N.AN',\n+            '#@A.bO',\n         ]\n         msg = \"'Enter a valid URL.'\"\n         for value in tests:\n",
  "django__django-15213": "",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..1630d84 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -6,6 +7,7 @@ from django.contrib.messages import constants\n from django.contrib.messages.storage.base import Message\n from django.contrib.messages.storage.cookie import (\n     CookieStorage, MessageDecoder, MessageEncoder,\n+    CookieStorage, MessageDecoder, MessageEncoder,\n )\n from django.test import SimpleTestCase, override_settings\n from django.utils.crypto import get_random_string\n@@ -163,7 +165,26 @@ class CookieTests(BaseTests, SimpleTestCase):\n         decoded_messages = json.loads(value, cls=MessageDecoder)\n         self.assertEqual(messages, decoded_messages)\n \n-    def test_safedata(self):\n+    def test_extra_tags_serialization(self):\n+        \"\"\"\n+        Test that various values of extra_tags are correctly\n+        serialized and deserialized.\n+        \"\"\"\n+        storage = self.get_storage()\n+\n+        # Test cases for extra_tags\n+        test_cases = [\n+            ('', ''),  # Empty string remains empty\n+            (None, None),  # None remains None\n+            ('tag1 tag2', 'tag1 tag2'),  # Normal string remains unchanged\n+        ]\n+\n+        for input_tags, expected_tags in test_cases:\n+            with self.subTest(extra_tags=input_tags):\n+                message = Message(constants.INFO, 'Test message', extra_tags=input_tags)\n+                encoded = storage._encode(message)\n+                decoded = storage._decode(encoded)\n+                self.assertEqual(decoded.extra_tags, expected_tags)\n         \"\"\"\n         A message containing SafeData is keeping its safe status when\n         retrieved from the message storage.\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..ce262c7 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -2,6 +2,9 @@ from pathlib import Path\n from unittest import mock\n \n from django.template import autoreload\n+from django.utils.autoreload import file_changed, autoreload_started\n+from django.dispatch import receiver\n+from pathlib import Path\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import require_jinja2\n \n@@ -50,7 +53,18 @@ class TemplateReloadTests(SimpleTestCase):\n             ]\n         )\n \n-    def test_get_template_directories(self):\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_dev_server_restarts_on_file_change_with_base_dir_in_templates_dirs(self, mock_reset):\n+        # Simulating adding BASE_DIR to TEMPLATES[0]['DIRS']\n+        base_dir = ROOT\n+        with override_settings(TEMPLATES=[{\n+            'DIRS': [base_dir],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]):\n+            file_path = base_dir / 'dummy_file.txt'\n+            # Act as if a file in BASE_DIR has changed\n+            self.assertTrue(autoreload.template_changed(None, file_path))\n+            mock_reset.assert_called_once()\n         self.assertSetEqual(\n             autoreload.get_template_directories(),\n             {\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..287ff7e 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,7 +185,34 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test that an empty If-Modified-Since header is handled correctly.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n+    def test_was_modified_since_valid_date(self):\n+        \"\"\"\n+        Test that a valid If-Modified-Since header is handled correctly.\n+        \"\"\"\n+        mtime = 1343416141.107817\n+        header = http_date(mtime)\n+        self.assertFalse(was_modified_since(header, mtime))\n+\n+    def test_was_modified_since_invalid_date(self):\n+        \"\"\"\n+        Test that an invalid If-Modified-Since header is handled gracefully.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"Invalid-Date\", mtime=1))\n+\n+    def test_was_modified_since_future_date(self):\n+        \"\"\"\n+        Test that a future If-Modified-Since date returns True.\n+        \"\"\"\n+        mtime = 1343416141.107817\n+        future_time = mtime + 100000  # some time in the future\n+        header = http_date(future_time)\n+        self.assertTrue(was_modified_since(header, mtime))\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..13f95d1 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,5 +1,7 @@\n+\n import os\n from io import StringIO\n+import argparse\n from unittest import mock\n \n from admin_scripts.tests import AdminScriptTestCase\n@@ -411,7 +413,26 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_command_help_output_format(self):\n+        \"\"\"Test that the command help output is correctly formatted with newlines.\"\"\"\n+        command_instance = Command()\n+        parser = command_instance.create_parser(\"manage.py\", \"tzkt_import\")\n+        output = StringIO()\n+        with mock.patch('sys.stdout', new=output):\n+            parser.print_help()\n+        help_output = output.getvalue()\n+        expected_help = (\n+            \"usage: manage.py tzkt_import [-h] [--api API] [--version] [-v {0,1,2,3}] \"\n+            \"[--settings SETTINGS] [--pythonpath PYTHONPATH] [--traceback] [--no-color] \"\n+            \"[--force-color] [--skip-checks] blockchain target\\n\"\n+            \"Import a contract from tzkt\\n\"\n+            \"Example usage:\\n\"\n+            \"\\t./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\\n\"\n+            \"positional arguments:\\n\"\n+            \" blockchain            Name of the blockchain to import into\\n\"\n+            \" target                Id of the contract to import\\n\"\n+        )\n+        self.assertEqual(help_output, expected_help)\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..7fef03c 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,8 +1,10 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n+from django.core.serializers.json import DjangoJSONEncoder\n from django.utils.html import (\n     conditional_escape,\n     escape,\n@@ -216,6 +218,30 @@ class TestUtilsHtml(SimpleTestCase):\n             json_script({\"key\": \"value\"}),\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                # Custom encoding logic\n+                return '{\"hello\": \"world\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"hello\": \"world\"}</script>',\n+        )\n+\n+    def test_json_script_with_default_encoder(self):\n+        data = {\"key\": \"value\"}\n+        self.assertHTMLEqual(\n+            json_script(data),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n+\n+    def test_json_script_with_special_characters(self):\n+        data = {\"key\": \"<script>alert('test');</script>\"}\n+        self.assertHTMLEqual(\n+            json_script(data),\n+            '<script type=\"application/json\">{\"key\": \"\\\\u003Cscript\\\\u003Ealert(\\'test\\');\\\\u003C/script\\\\u003E\"}</script>',\n+        )\n \n     def test_smart_urlquote(self):\n         items = (\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..5074197 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -186,7 +186,34 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 ],\n             )\n \n-    def test_template_tags_with_different_library_name(self):\n+    @override_settings(\n+        INSTALLED_APPS=[\n+            \"check_framework.template_test_apps.same_tags_app_1\"\n+        ]\n+    )\n+    def test_template_tags_with_same_module_path_in_single_library(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"my_tags\", \"same_tags_app_1.templatetags.my_tags\"\n+                ),\n+                self.get_settings(\n+                    \"my_tags\", \"same_tags_app_1.templatetags.my_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [\n+                    Error(\n+                        E003.msg.format(\n+                            \"'my_tags'\",\n+                            \"'check_framework.template_test_apps.same_tags_app_1.templatetags.my_tags', 'check_framework.template_test_apps.same_tags_app_1.templatetags.my_tags'\",\n+                        ),\n+                        id=E003.id,\n+                    )\n+                ],\n+            )\n         with self.settings(\n             TEMPLATES=[\n                 self.get_settings(\n@@ -206,4 +233,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..e56d712 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -399,7 +399,21 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n+from django.test import TestCase, override_settings\n+from myapp.models import AnotherModel, ProxyCustomModel, CustomModel\n+\n+class ProxyModelQuerySetTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.custom_model_instance = ProxyCustomModel.objects.create(name=\"Test Name\")\n+        cls.another_model_instance = AnotherModel.objects.create(custom=cls.custom_model_instance)\n+\n+    def test_only_after_select_related_on_proxy_model(self):\n+        # This test case is to ensure the issue with using only() after select_related() on proxy models is resolved.\n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = list(queryset)  # Should not raise an error\n+        self.assertEqual(len(result), 1)\n+        self.assertEqual(result[0].custom.name, \"Test Name\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..2f80524 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -152,6 +152,23 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         )\n \n     def test_parameters(self):\n+        # Ensure parameters are inserted before the database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n+        )\n+        \n+        # Test with multiple parameters\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--echo-queries\", \"-P\", \"pager=off\"]),\n+            ([\"psql\", \"--echo-queries\", \"-P\", \"pager=off\", \"dbname\"], None),\n+        )\n+\n+        # Test without database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"postgres\"], None),  # defaults to 'postgres'\n+        )\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n@@ -183,4 +200,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "",
  "django__django-16041": "",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..468bedb 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,34 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_empty(self):\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+    def test_null_as_number(self):\n+        # Test handling of None as input\n+        with self.assertRaises(TypeError):\n+            nformat(None, \".\", decimal_pos=2)\n+\n+    def test_empty_string_as_number(self):\n+        # Test handling of empty string as input\n+        self.assertEqual(nformat(\"\", \".\", decimal_pos=2), \"\")\n+\n+    def test_invalid_number(self):\n+        # Test handling of incompatible types\n+        with self.assertRaises(TypeError):\n+            nformat([], \".\")\n+\n+        with self.assertRaises(TypeError):\n+            nformat({}, \".\")\n+\n+        with self.assertRaises(TypeError):\n+            nformat(set(), \".\")\n+            \n+    def test_negative_number_handling(self):\n+        # Test negative number handling\n+        self.assertEqual(nformat(-1234, \".\"), \"-1234\")\n+        self.assertEqual(nformat(-1234.56, \".\", decimal_pos=1), \"-1234.5\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..34ff6e3 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,8 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n-from django.utils.translation import gettext as _\n+from django.urls import reverse\n+import urllib.parse\n \n from .models.custom_user import (\n     CustomUser,\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..9d90fdb 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,6 +507,19 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+class CallableLastmodNoItemsSitemapTests(SitemapTestsBase):\n+    def test_callable_lastmod_no_items(self):\n+        \"\"\"\n+        Test that a sitemap with callable lastmod and no items does not raise a ValueError.\n+        \"\"\"\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n \n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n",
  "django__django-16379": "",
  "django__django-16527": "",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..3fc657d 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -26,7 +27,12 @@ class JoinTests(SimpleTestCase):\n         output = self.engine.render_to_string(\"join04\", {\"a\": [\"alpha\", \"beta & me\"]})\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n \n-    # Joining with unsafe joiners doesn't result in unsafe strings.\n+    @setup({\"join_autoescape_off\": '{% autoescape off %}{{ a|join:var }}{% endautoescape %}'})\n+    def test_join_autoescape_off(self):\n+        output = self.engine.render_to_string(\n+            \"join_autoescape_off\", {\"a\": [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"], \"var\": \"<br/>\"}\n+        )\n+        self.assertEqual(output, \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\")\n     @setup({\"join05\": \"{{ a|join:var }}\"})\n     def test_join05(self):\n         output = self.engine.render_to_string(\n@@ -78,4 +84,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..edb49a6 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1077,6 +1077,12 @@ def test_slider_horizontal_vertical():\n     box = slider.poly.get_extents().transformed(ax.transAxes.inverted())\n     assert_allclose(box.bounds, [.25, 0, .5, 10/24])\n \n+import pytest\n+import numpy as np\n+from matplotlib import pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+from matplotlib.widgets import RangeSlider\n+from numpy.testing import assert_allclose\n \n def test_slider_reset():\n     fig, ax = plt.subplots()\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..b9ae086 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,12 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+from matplotlib._pylab_helpers import Gcf\n+import pytest\n+import sys\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n@@ -508,7 +514,24 @@ def test_rcparams_reset_after_fail():\n         assert mpl.rcParams['text.usetex'] is False\n \n \n-@pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n+def test_get_backend_does_not_clear_figs():\n+    # This test checks that get_backend() does not clear figures created in rc_context\n+    \n+    # Create a figure within an rc_context\n+    with rc_context():\n+        fig2 = plt.figure()\n+    \n+    # Get current figures before calling get_backend\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    \n+    # Call get_backend\n+    get_backend()\n+    \n+    # Get current figures after calling get_backend\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    \n+    # Assert figures before and after calling get_backend are the same\n+    assert before == after, '\\nFigures before: ' + before + '\\nFigures after: ' + after\n def test_backend_fallback_headless(tmpdir):\n     env = {**os.environ,\n            \"DISPLAY\": \"\", \"WAYLAND_DISPLAY\": \"\",\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..ed3cdb7 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,7 +21,16 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d_axes(fig_test, fig_ref):\n+    # Test that set_visible(False) works for 3D axes\n+    ax_test = fig_test.add_subplot(1, 1, 1, projection='3d')\n+    ax_test.scatter([1], [1], [1])\n+    ax_test.set_visible(False)\n+\n+    ax_ref = fig_ref.add_subplot(1, 1, 1, projection='3d')\n+    ax_ref.scatter([1], [1], [1])\n+    ax_ref.set_visible(True)  # This should be visible for comparison\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..8833307 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,6 +774,18 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n+import pytest\n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+import numpy as np\n+\n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_creation_with_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='Test Plot')\n+    legend = ax.legend(draggable=draggable)\n+    assert legend.get_draggable() == draggable\n+\n def test_get_set_draggable():\n     legend = plt.legend()\n     assert not legend.get_draggable()\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..4229135 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -256,6 +256,41 @@ def test_linedash():\n     assert buf.tell() > 0\n \n \n+def test_empty_line_text():\n+    # Test for handling text with empty lines in PostScript backend\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    # Test with an annotation containing empty line\n+    ax.annotate(text='\\nLower label', xy=(0, 0))\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    fig.savefig(buf, format='ps')\n+    assert buf.tell() > 0\n+\n+\n+def test_multiline_text_with_empty_lines():\n+    # Test for handling multi-line text with empty lines\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    # Test with multi-line text including an empty line\n+    ax.set_title('\\nUpper title\\n\\nLower title')\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    fig.savefig(buf, format='ps')\n+    assert buf.tell() > 0\n+\n+\n+def test_empty_title():\n+    # Test for an empty title\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.set_title('\\n')\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    fig.savefig(buf, format='ps')\n+    assert buf.tell() > 0\n+\n+\n def test_no_duplicate_definition():\n \n     fig = Figure()\n",
  "matplotlib__matplotlib-23987": "",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..8554319 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -16,8 +17,24 @@ import matplotlib.transforms as mtransforms\n import matplotlib.figure as mfigure\n from mpl_toolkits.axes_grid1 import parasite_axes\n \n+import pickletools\n+\n+def test_draggable_legend_pickling():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+\n+    ax.plot(time, speed, label=\"speed\")\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n \n-def test_simple():\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    # Ensure there's no reference to FigureCanvasAgg or other GUI canvases\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    loaded = pickle.loads(pkl)\n+    assert isinstance(loaded, mpl.figure.Figure)\n     fig = plt.figure()\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n",
  "matplotlib__matplotlib-25332": "",
  "matplotlib__matplotlib-25442": "",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..df5db61 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -102,6 +102,26 @@ class TestContinuous:\n         s = Continuous(\"viridis\")._setup(x, Color())\n         assert_array_equal(s(x), cmap([0, .25, 1])[:, :3])  # FIXME RGBA\n \n+    def test_color_mapping_with_boolean(self):\n+        import pandas as pd\n+        import numpy as np\n+        from seaborn._core.scales import Continuous\n+        from seaborn._core.properties import Color\n+        from numpy.testing import assert_array_equal\n+        from seaborn import color_palette\n+\n+        # Boolean data for color mapping\n+        x = pd.Series([True, False, True, False])\n+        \n+        # Convert boolean to float\n+        s = Continuous()._setup(x.astype(float), Color())\n+\n+        # Expected color map for boolean values\n+        cmap = color_palette(\"ch:\", as_cmap=True)\n+\n+        # Assert that the color mapping matches expected output\n+        assert_array_equal(s(x.astype(float)), cmap([1, 0, 1, 0])[:, :3])\n+\n     def test_color_tuple_values(self, x):\n \n         cmap = color_palette(\"blend:b,g\", as_cmap=True)\n",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..589a8b2 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -708,7 +708,56 @@ class TestFacetGrid:\n                     assert tick.get_pad() == pad\n \n \n+import numpy as np\n+import pandas as pd\n+import seaborn as sns\n+import pytest\n+import matplotlib.pyplot as plt\n+from seaborn import axisgrid as ag\n+from seaborn.scatterplot import scatterplot\n+from seaborn.histplot import histplot\n+from seaborn.kdeplot import kdeplot\n+from seaborn.utils import assert_plots_equal, color_palette, get_legend_handles, mpl, npt, assert_colors_equal\n+from pandas.testing import assert_frame_equal as tm\n+import seaborn as sns\n+\n class TestPairGrid:\n+    def test_pairplot_column_multiindex(self):\n+        # Original test case for multi-index column\n+        cols = pd.MultiIndex.from_arrays([[\"x\", \"y\"], [1, 2]])\n+        df = pd.DataFrame(self.df[[\"x\", \"y\"]].values, columns=cols)\n+        g = ag.pairplot(df)\n+        assert g.diag_vars == list(cols)\n+        \n+    def test_pairplot_multiindex_extended(self):\n+        # Extended test cases to validate the fix for multi-index columns in pairplot\n+\n+        # Test with a multi-level index\n+        data = {\n+            ('A', '1'): np.random.rand(100),\n+            ('A', '2'): np.random.rand(100),\n+            ('B', '1'): np.random.rand(100),\n+            ('B', '2'): np.random.rand(100),\n+        }\n+        df_multi = pd.DataFrame(data)\n+        \n+        try:\n+            g = sns.pairplot(df_multi)\n+            success = True\n+        except KeyError:\n+            success = False\n+\n+        assert success, \"pairplot raised a KeyError with a MultiIndex DataFrame.\"\n+\n+        # Test with multi-index and hue parameter\n+        df_multi['hue'] = np.random.choice(['x', 'y'], size=100)\n+        try:\n+            g = sns.pairplot(df_multi, hue='hue')\n+            success = True\n+        except KeyError:\n+            success = False\n+\n+        assert success, \"pairplot raised a KeyError when using MultiIndex DataFrame with hue.\"\n \n     rs = np.random.RandomState(sum(map(ord, \"PairGrid\")))\n     df = pd.DataFrame(dict(x=rs.normal(size=60),\n",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..fe0adf5 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,8 +1,11 @@\n+\n import json\n import os\n import textwrap\n-\n import pytest\n+import tomllib\n+import tempfile\n+import textwrap\n \n import flask\n \n@@ -18,7 +21,19 @@ def common_object_test(app):\n     assert \"TestConfig\" not in app.config\n \n \n-def test_config_from_pyfile():\n+def test_config_from_file_toml_with_mode():\n+    tomllib = pytest.importorskip(\"tomllib\", reason=\"tomllib added in 3.11\")\n+    app = flask.Flask(__name__)\n+    toml_content = textwrap.dedent(\"\"\"\n+    TEST_KEY = \"foo\"\n+    SECRET_KEY = \"config\"\n+    \"\"\")\n+\n+    with tempfile.NamedTemporaryFile(suffix=\".toml\", mode=\"wb\", delete=False) as temp_toml_file:\n+        temp_toml_file.write(toml_content.encode('utf-8'))\n+\n+    app.config.from_file(temp_toml_file.name, tomllib.load, mode='b')\n+    common_object_test(app)\n     app = flask.Flask(__name__)\n     app.config.from_pyfile(f\"{__file__.rsplit('.', 1)[0]}.py\")\n     common_object_test(app)\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..a08de7a 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1655,7 +1655,66 @@ def test_urllib3_retries():\n     with pytest.raises(RetryError):\n         s.get(httpbin('status/500'))\n \n-def test_vendor_aliases():\n+def test_urllib3_decode_error():\n+    import requests\n+    from requests.adapters import HTTPAdapter\n+    from requests.exceptions import HTTPError\n+\n+    class MockHTTPResponse:\n+        def __init__(self):\n+            self.status = 200\n+            self.reason = 'OK'\n+\n+        def read(self):\n+            raise requests.packages.urllib3.exceptions.DecodeError(\"Mock Decode Error\")\n+\n+    class MockHTTPConnection:\n+        def __init__(self, *args, **kwargs):\n+            pass\n+\n+        def request(self, *args, **kwargs):\n+            pass\n+\n+        def getresponse(self):\n+            return MockHTTPResponse()\n+\n+    class MockHTTPAdapter(HTTPAdapter):\n+        def get_connection(self, *args, **kwargs):\n+            return MockHTTPConnection()\n+\n+    s = requests.Session()\n+    s.mount('http://', MockHTTPAdapter())\n+\n+    try:\n+        s.get('http://mockurl')\n+    except HTTPError as e:\n+        assert isinstance(e, HTTPError)\n+        assert 'Mock Decode Error' in str(e)\n+\n+def test_urllib3_timeout_error():\n+    import requests\n+    from requests.adapters import HTTPAdapter\n+    from requests.exceptions import Timeout\n+\n+    class MockHTTPConnection:\n+        def __init__(self, *args, **kwargs):\n+            pass\n+\n+        def request(self, *args, **kwargs):\n+            raise requests.packages.urllib3.exceptions.TimeoutError(\"Mock Timeout Error\")\n+\n+    class MockHTTPAdapter(HTTPAdapter):\n+        def get_connection(self, *args, **kwargs):\n+            return MockHTTPConnection()\n+\n+    s = requests.Session()\n+    s.mount('http://', MockHTTPAdapter())\n+\n+    try:\n+        s.get('http://mockurl', timeout=1)\n+    except Timeout as e:\n+        assert isinstance(e, Timeout)\n+        assert 'Mock Timeout Error' in str(e)\n     from requests.packages import urllib3\n     from requests.packages import chardet\n \n@@ -1663,4 +1722,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "",
  "psf__requests-863": "",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..44024b7 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -89,7 +89,27 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n-    def test_issue_2321_should_not_trigger(self) -> None:\n+    @set_config(notes=[\"???\"])\n+    def test_punctuation_only_note_tag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n+    @set_config(notes=[\"!!!\", \"###\"])\n+    def test_multiple_punctuation_note_tags(self) -> None:\n+        code = \"\"\"a = 1\n+                #!!!\n+                #### This is an important note\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"!!!\", col_offset=17),\n+            MessageTest(msg_id=\"fixme\", line=3, args=\"### This is an important note\", col_offset=17),\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n         code = 'print(\"# TODO this should not trigger a fixme\")'\n         with self.assertNoMessages():\n             self.checker.process_tokens(_tokenize_str(code))\n@@ -119,4 +139,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..e40e805 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -79,6 +79,15 @@ def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n \n \n+def test_unrecognized_option_traceback(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure no traceback is printed when an unrecognized option is passed.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"usage: pylint\" in output.err\n+    assert \"E0015: Unrecognized option found: Q\" in output.out\n+    assert \"Traceback\" not in output.err\n+\n def test_unknown_confidence(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error an unknown confidence value.\"\"\"\n     with pytest.raises(SystemExit):\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..a0c9c4c 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,27 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive_option(self):\n+        \"\"\"Test that ignore-paths in pyproject.toml is respected when --recursive=y is used.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                # Set the working directory to a test directory with generated files\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                # Run the test with ignore-paths specified\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^gen/.*$\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..1552c6b 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,6 +934,14 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n+def test_lint_module_with_identical_submodule(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test that linting does not fail when a module contains a submodule of the same name\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    assert not linter.stats.by_msg\n+\n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n@@ -941,4 +949,12 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+def test_lint_module_with_identical_submodule(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test that linting does not fail when a module contains a submodule of the same name\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..c75a934 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -298,6 +298,37 @@ class TestImportPath:\n         assert \"_src\" in sys.modules\n         assert \"_src.tests\" in sys.modules\n \n+    def test_module_imported_once_with_importlib(self, tmp_path: Path) -> None:\n+        \"\"\"Ensure that a module is only imported once with importlib mode.\"\"\"\n+        # Create a minimal reproducer for the issue\n+        (tmp_path / \"pmxbot\").mkdir()\n+        (tmp_path / \"pmxbot\" / \"__init__.py\").touch()\n+        (tmp_path / \"pmxbot\" / \"logging.py\").write_text(\n+            \"class Logger:\\n    store = 'initial'\\n\"\n+        )\n+        (tmp_path / \"tests\").mkdir()\n+        (tmp_path / \"tests\" / \"__init__.py\").touch()\n+        test_file = tmp_path / \"tests\" / \"test_commands.py\"\n+        test_file.write_text(\n+            \"import importlib\\n\"\n+            \"from pmxbot import logging\\n\"\n+            \"class TestCommands:\\n\"\n+            \"    def test_logging_import(self):\\n\"\n+            \"        assert importlib.import_module('pmxbot.logging') is logging\\n\"\n+        )\n+\n+        # Use the pytester to run the test\n+        pytester = pytest.Pytester(tmp_path)\n+        pytester.makeini(\n+            \"\"\"\n+            [pytest]\n+            addopts=\n+                --import-mode importlib\n+            \"\"\"\n+        )\n+        result = pytester.runpytest_subprocess(test_file)\n+        result.stdout.fnmatch_lines(\"*1 passed*\")\n+\n     def test_importmode_twice_is_different_module(\n         self, simple_module: Path, tmp_path: Path\n     ) -> None:\n",
  "pytest-dev__pytest-5227": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 1ebe9d0..01f354c 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,7 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..6fd2b1a 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -462,8 +462,30 @@ class TestAssert_reprcompare:\n     def test_set(self):\n         expl = callequal({0, 1}, {0, 2})\n         assert len(expl) > 1\n+    \n+    def test_bytes_diff_short(self):\n+        \"\"\"Check special handling for short bytes diff.\"\"\"\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+            \"?  +\",\n+        ]\n \n-    def test_frozenzet(self):\n+    def test_bytes_diff_long(self):\n+        \"\"\"Check special handling for longer bytes diff.\"\"\"\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+            \"?  ++\",\n+        ]\n         expl = callequal(frozenset([0, 1]), {0, 2})\n         assert len(expl) > 1\n \n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..b50bc33 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,9 +1,12 @@\n+\n import os\n from xml.dom import minidom\n \n import py\n \n import pytest\n+from datetime import datetime\n+import platform\n from _pytest.junitxml import LogXML\n from _pytest.reports import BaseReport\n \n@@ -157,7 +160,29 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n-    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n         # mock LogXML.node_reporter so it always sets a known duration to each test report object\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..1aaafc3 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,45 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ (#7145)\n+    \"\"\"\n+\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+def test_broken_repr():\n+    \"\"\"Test saferepr with a class having a broken __repr__ method\"\"\"\n+\n+    class BrokenRepr:\n+        def __repr__(self):\n+            raise ValueError(\"Broken repr\")\n+\n+    result = saferepr(BrokenRepr())\n+    assert result.startswith(\"<[ValueError('Broken repr') raised in repr()] BrokenRepr object at 0x\")\n+\n+def test_both_broken_getattribute_and_repr():\n+    \"\"\"Test saferepr with a class having both broken __getattribute__ and __repr__\"\"\"\n+\n+    class BothBroken:\n+        def __getattribute__(self, attr):\n+            raise Exception(\"Attribute access fails\")\n+\n+        def __repr__(self):\n+            raise Exception(\"Repr fails\")\n+\n+    result = saferepr(BothBroken())\n+    assert result.startswith(\"<[Exception('Repr fails') raised in repr()] BothBroken object at 0x\")\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +192,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..3c3bded 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -70,8 +70,31 @@ def test_make_hook_recorder(testdir) -> None:\n     recorder.hook.pytest_runtest_logreport(report=rep3)\n     pytest.raises(ValueError, recorder.getfailures)\n \n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct (#6428).\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n \n-def test_parseconfig(testdir) -> None:\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n     config1 = testdir.parseconfig()\n     config2 = testdir.parseconfig()\n     assert config2 is not config1\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..f3cf06c 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,7 @@\n import os\n import sys\n+import os\n+\n from unittest import mock\n \n import pytest\n@@ -41,8 +43,61 @@ class TestMark:\n         with pytest.raises(AttributeError):\n             mark._some_name\n \n+class TestSkipifCaching:\n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"#7360\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert False\n+        \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr2=\"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert False\n+        \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=0, skipped=1, failed=1)\n+\n+    def test_dynamic_globals_change(self, testdir):\n+        \"\"\"Tests if the caching handles dynamic global changes.\"\"\"\n+        py_file = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            condition = True\n+\n+            @pytest.mark.skipif(\"condition\")\n+            def test_skip():\n+                assert False\n+\n+            def test_change_condition():\n+                global condition\n+                condition = False\n+\n+            @pytest.mark.skipif(\"condition\")\n+            def test_no_skip():\n+                assert True\n+            \"\"\"\n+        )\n \n-def test_marked_class_run_twice(testdir):\n+        result = testdir.inline_run(py_file)\n+        result.assertoutcome(passed=1, skipped=1, failed=1)\n     \"\"\"Test fails file is run twice that contains marked class.\n     See issue#683.\n     \"\"\"\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..7ca676a 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -386,7 +386,18 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*NOTRUN*\"])\n \n-    def test_dynamic_xfail_set_during_funcarg_setup(self, testdir):\n+    def test_skip_location_reporting_with_runxfail(self, testdir):\n+        \"\"\"Test that skip location is correctly reported with --runxfail.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip(reason=\"unconditional skip\")\n+            def test_should_be_skipped():\n+                pass\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_skip_location_reporting_with_runxfail.py:3: unconditional skip\", \"*1 skipped*\"])\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7490": "",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..2b2c1d4 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,5 +1,8 @@\n+\n import os\n import stat\n+from _pytest.monkeypatch import MonkeyPatch\n+\n import sys\n from pathlib import Path\n from typing import Callable\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..02329c2 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,6 +574,10 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n+import numpy as np\n+from sklearn.linear_model import RidgeClassifierCV\n+from sklearn.utils._testing import assert_array_equal\n+\n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..3bc0345 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -12,6 +12,8 @@ from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n from sklearn.mixture.bayesian_mixture import _log_wishart_norm\n \n from sklearn.mixture import BayesianGaussianMixture\n+from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils.testing import assert_equal\n \n from sklearn.mixture.tests.test_gaussian_mixture import RandomData\n from sklearn.exceptions import ConvergenceWarning\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..350724c 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,7 +260,41 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n-def test_one_hot_encoder_no_categorical_features():\n+def test_one_hot_encoder_handle_unknown_strings_longer_category():\n+    X_train = np.array(['short', 'medium', 'longerstring']).reshape((-1, 1))\n+    X_test = np.array(['unknown', 'short']).reshape((-1, 1))\n+    \n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(X_train)\n+    \n+    X_test_transformed = ohe.transform(X_test).toarray()\n+    expected_output = np.array([[0., 0., 0.], [1., 0., 0.]])\n+    \n+    assert_array_equal(X_test_transformed, expected_output)\n+\n+def test_one_hot_encoder_handle_unknown_strings_multiple_categories():\n+    X_train = np.array(['cat', 'dog', 'fish', 'elephant']).reshape((-1, 1))\n+    X_test = np.array(['bird', 'cat']).reshape((-1, 1))\n+    \n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(X_train)\n+    \n+    X_test_transformed = ohe.transform(X_test).toarray()\n+    expected_output = np.array([[0., 0., 0., 0.], [1., 0., 0., 0.]])\n+    \n+    assert_array_equal(X_test_transformed, expected_output)\n+\n+def test_one_hot_encoder_handle_unknown_strings_empty_input():\n+    X_train = np.array(['apple', 'banana', 'cherry']).reshape((-1, 1))\n+    X_test = np.array([]).reshape((-1, 1))\n+    \n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(X_train)\n+    \n+    X_test_transformed = ohe.transform(X_test).toarray()\n+    expected_output = np.array([]).reshape(0, 3)\n+    \n+    assert_array_equal(X_test_transformed, expected_output)\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n     cat = [False, False, False]\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..c86c281 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -590,6 +590,16 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n                             covariance_type=covar_type,\n                             max_iter=max_iter, tol=tol)\n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    n_inits = [1, 2, 5, 10]\n+    for n_init in n_inits:\n+        gm = GaussianMixture(n_components=5, n_init=n_init, random_state=0)\n+        y_pred1 = gm.fit_predict(X)\n+        y_pred2 = gm.predict(X)\n+        assert_array_equal(y_pred1, y_pred2)\n+\n         # check if fit_predict(X) is equivalent to fit(X).predict(X)\n         f = copy.deepcopy(g)\n         Y_pred1 = f.fit(X).predict(X)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..adf56a9 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,11 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n-                                   assert_raises)\n+                                   assert_raises, assert_allclose)\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n@@ -13,8 +14,23 @@ from sklearn.pipeline import Pipeline\n from sklearn.model_selection import GridSearchCV\n from sklearn.metrics.pairwise import rbf_kernel\n \n+def test_kernel_pca_sign_consistency():\n+    rng = np.random.RandomState(42)\n+    X = rng.rand(10, 10)\n+    kpca = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+\n+    # Test if the sign of the results is consistent across multiple runs\n+    transformed_X = np.zeros((3, 7))\n+    for i in range(3):\n+        transformed_X[i, :] = kpca.fit_transform(X)[0]\n+\n+    # Check if the absolute values are the same, allowing only sign differences\n+    assert_allclose(np.abs(transformed_X[0, :]), np.abs(transformed_X[1, :]))\n+    assert_allclose(np.abs(transformed_X[0, :]), np.abs(transformed_X[2, :]))\n \n-def test_kernel_pca():\n+    # Check if the sign is consistent\n+    assert (np.sign(transformed_X[0, :]) == np.sign(transformed_X[1, :])).all()\n+    assert (np.sign(transformed_X[0, :]) == np.sign(transformed_X[2, :])).all()\n     rng = np.random.RandomState(0)\n     X_fit = rng.random_sample((5, 4))\n     X_pred = rng.random_sample((2, 4))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..03c8b11 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1058,6 +1058,28 @@ def test_pipeline_memory():\n         shutil.rmtree(cachedir)\n \n \n+def test_pipeline_len():\n+    \"\"\"Test the __len__ method of the Pipeline class.\"\"\"\n+    from sklearn.feature_selection import SelectKBest, f_regression\n+    from sklearn.svm import SVC\n+    from sklearn.pipeline import Pipeline\n+\n+    # Test with an empty pipeline\n+    empty_pipeline = Pipeline([])\n+    assert len(empty_pipeline) == 0, \"Empty pipeline should have length 0\"\n+\n+    # Test with a single step pipeline\n+    single_step_pipeline = Pipeline([('anova', SelectKBest(f_regression, k=5))])\n+    assert len(single_step_pipeline) == 1, \"Single step pipeline should have length 1\"\n+\n+    # Test with a two-step pipeline\n+    two_step_pipeline = Pipeline([\n+        ('anova', SelectKBest(f_regression, k=5)),\n+        ('svc', SVC(kernel='linear'))\n+    ])\n+    assert len(two_step_pipeline) == 2, \"Two step pipeline should have length 2\"\n+\n+\n def test_make_pipeline_memory():\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n@@ -1070,4 +1092,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13497": "",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..ff27e21 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,7 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -213,6 +215,18 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n     assert imputer.__repr__() == expected\n \n     set_config(print_changed_only=False)\n+    \n+def test_array_parameter_repr():\n+    # Test to ensure no ValueError is thrown when using array parameters\n+    # with print_changed_only set to True\n+    set_config(print_changed_only=True)\n+    try:\n+        repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+        print(\"Test passed: No ValueError raised\")\n+    except ValueError as e:\n+        print(f\"Test failed: ValueError raised - {e}\")\n+    finally:\n+        set_config(print_changed_only=False)\n \n \n def test_pipeline():\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..0ba1fb0 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,9 +1,12 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n import numpy as np\n \n from sklearn.utils.testing import assert_almost_equal, assert_array_equal\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raise_message\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..0baed43 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -161,7 +161,31 @@ def test_params_validation():\n                          NCA(n_components=n_components).fit, X, y)\n \n \n-def test_transformation_dimensions():\n+def test_nca_with_gridsearchcv():\n+    import numpy as np\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.model_selection import GridSearchCV\n+    from sklearn.neighbors import NeighborhoodComponentsAnalysis\n+    from sklearn.neighbors import KNeighborsClassifier\n+\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+\n+    pipe = Pipeline([('nca', nca),\n+                     ('knn', knn)])\n+                    \n+    # Parameter grid with numpy types\n+    params = {'nca__tol': [0.1, 0.5, np.float32(1)],\n+              'nca__n_components': np.arange(1, 10, dtype=np.int64)}\n+              \n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+    gs.fit(X, y)\n+\n+    # Test to ensure that GridSearchCV works without errors now\n+    assert gs.best_estimator_ is not None\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n \n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..3d8025e 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,56 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for issue with empty support_vectors_ leading to ZeroDivisionError\n+    from scipy import sparse\n+    import numpy as np\n+    from sklearn import svm\n+\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    # Check that the support_vectors_ and dual_coef_ are empty as expected\n+    assert model.support_vectors_.shape[0] == 0\n+    assert model.dual_coef_.shape[1] == 0\n+\n+def test_sparse_fit_empty_data():\n+    # Test fitting with completely empty sparse data\n+    from scipy import sparse\n+    import numpy as np\n+    from sklearn import svm\n+\n+    X_train = sparse.csr_matrix((0, 4))  # 0 samples, 4 features\n+    y_train = np.array([])\n+    model = svm.SVR(kernel='linear')\n+    try:\n+        model.fit(X_train, y_train)\n+        assert False, \"Expected ValueError when fitting with empty data\"\n+    except ValueError as e:\n+        assert \"empty\" in str(e).lower()\n+\n+def test_sparse_fit_inconsistent_dimensions():\n+    # Test fitting with inconsistent dimensions between X and y\n+    from scipy import sparse\n+    import numpy as np\n+    from sklearn import svm\n+\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])  # 4 targets for 3 samples\n+    model = svm.SVR(kernel='linear')\n+    try:\n+        model.fit(X_train, y_train)\n+        assert False, \"Expected ValueError when fitting with inconsistent dimensions\"\n+    except ValueError as e:\n+        assert \"inconsistent\" in str(e).lower()\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..4493d40 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,8 +972,19 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n-def test_repeated_cv_value_errors():\n+import pytest\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+@pytest.mark.parametrize(\n+    \"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold]\n+)\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    repeated_cv_repr = (\n+        \"{}(n_repeats=6, n_splits=2, random_state=None)\"\n+        .format(repeated_cv.__class__.__name__)\n+    )\n+    assert repeated_cv_repr == repr(repeated_cv)\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n         assert_raises(ValueError, cv, n_repeats=0)\n",
  "scikit-learn__scikit-learn-15512": "diff --git a/sklearn/cluster/tests/test_affinity_propagation.py b/sklearn/cluster/tests/test_affinity_propagation.py\nindex 5de7c5e..15e7c7c 100644\n--- a/sklearn/cluster/tests/test_affinity_propagation.py\n+++ b/sklearn/cluster/tests/test_affinity_propagation.py\n@@ -152,7 +152,27 @@ def test_affinity_propagation_predict_non_convergence():\n     assert_array_equal(np.array([-1, -1, -1]), y)\n \n \n-def test_equal_similarities_and_preferences():\n+def test_affinity_propagation_non_convergence_regressiontest():\n+    X = np.array([[1, 0, 0, 0, 0, 0],\n+                  [0, 1, 1, 1, 0, 0],\n+                  [0, 0, 1, 0, 0, 1]])\n+    af = AffinityPropagation(affinity='euclidean', max_iter=2).fit(X)\n+    assert_array_equal(np.array([-1, -1, -1]), af.labels_)\n+    assert_array_equal(np.array([]), af.cluster_centers_indices_)\n+\n+def test_affinity_propagation_convergence_check():\n+    X = np.array([[1, 0, 0, 0, 0, 0],\n+                  [0, 1, 1, 1, 0, 0],\n+                  [0, 0, 1, 0, 0, 1]])\n+    af = AffinityPropagation(affinity='euclidean', max_iter=2)\n+    af.fit(X)\n+    assert af.n_iter_ <= af.max_iter\n+    if af.n_iter_ == af.max_iter:\n+        assert_array_equal(np.array([-1, -1, -1]), af.labels_)\n+        assert_array_equal(np.array([]), af.cluster_centers_indices_)\n+    else:\n+        assert af.cluster_centers_indices_.size > 0\n+        assert len(np.unique(af.labels_)) > 1\n     # Unequal distances\n     X = np.array([[0, 0], [1, 1], [-2, -2]])\n     S = -euclidean_distances(X, squared=True)\n",
  "scikit-learn__scikit-learn-15535": "diff --git a/sklearn/metrics/cluster/tests/test_common.py b/sklearn/metrics/cluster/tests/test_common.py\nindex 9991cff..4f788a2 100644\n--- a/sklearn/metrics/cluster/tests/test_common.py\n+++ b/sklearn/metrics/cluster/tests/test_common.py\n@@ -165,7 +165,15 @@ def test_format_invariance(metric_name):\n         yield y - 1, 'including negative ints'\n         yield y + 1, 'strictly positive ints'\n \n-    if metric_name in SUPERVISED_METRICS:\n+    # Additional test for regression in input validation of clustering metrics\n+    # Ensure object dtype arrays with strings are correctly handled\n+    if metric_name == 'mutual_info_score':\n+        x = np.random.choice(['a', 'b'], size=20).astype(object)\n+        try:\n+            # This should not raise an error\n+            metric(x, x)\n+        except ValueError as e:\n+            assert False, f\"mutual_info_score raised ValueError unexpectedly: {e}\"\n         metric = SUPERVISED_METRICS[metric_name]\n         score_1 = metric(y_true, y_pred)\n         y_true_gen = generate_formats(y_true)\n",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..70b40bb 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -14,6 +15,10 @@ from sklearn.isotonic import (\n )\n \n from sklearn.utils.validation import check_array\n+from sklearn import set_config\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n+from sklearn.datasets import make_classification\n from sklearn.utils._testing import (\n     assert_allclose,\n     assert_array_equal,\n@@ -668,7 +673,17 @@ def test_isotonic_regression_sample_weight_not_overwritten():\n \n \n @pytest.mark.parametrize(\"shape\", [\"1d\", \"2d\"])\n-def test_get_feature_names_out(shape):\n+def test_calibrated_classifier_isotonic_with_pandas():\n+    \"\"\"Test CalibratedClassifierCV with isotonic regression and pandas output.\"\"\"\n+    X, y = make_classification(n_samples=30, n_features=3, random_state=42)\n+    model = CalibratedClassifierCV(SGDClassifier(), method='isotonic')\n+\n+    with set_config(transform_output=\"pandas\"):\n+        model.fit(X, y)\n+        predictions = model.predict(X)\n+        \n+    assert predictions is not None\n+    assert len(predictions) == len(y)\n     \"\"\"Check `get_feature_names_out` for `IsotonicRegression`.\"\"\"\n     X = np.arange(10)\n     if shape == \"2d\":\n",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..264a4b7 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2121,6 +2121,55 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     with pytest.raises(AttributeError, match=\"not provide get_feature_names_out\"):\n         ct.get_feature_names_out()\n \n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False]), [False, False]],\n+    ids=[\"list\", \"bool\", \"bool_int\"],\n+)\n+def test_empty_selection_pandas_output(empty_selection):\n+    \"\"\"Check that pandas output works when there is an empty selection.\n+\n+    Non-regression test for gh-25487\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    X = pd.DataFrame([[1.0, 2.2], [3.0, 1.0]], columns=[\"a\", \"b\"])\n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", empty_selection),\n+            (\"numerical\", StandardScaler(), [\"a\", \"b\"]),\n+        ],\n+        verbose_feature_names_out=True,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\"])\n+\n+    ct.set_params(verbose_feature_names_out=False)\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"a\", \"b\"])\n+\n+def test_column_transformer_no_features_with_remainder():\n+    \"\"\"Test ColumnTransformer with no features and remainder.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    \n+    X = pd.DataFrame([[1.0, 2.2, 5.0], [3.0, 1.0, 6.0]], columns=[\"a\", \"b\", \"c\"])\n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", []),\n+            (\"numerical\", StandardScaler(), [\"a\", \"b\"]),\n+        ],\n+        remainder=\"passthrough\",\n+        verbose_feature_names_out=True,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\", \"remainder__c\"])\n+\n+    ct.set_params(verbose_feature_names_out=False)\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"a\", \"b\", \"c\"])\n+\n     # The feature names are prefixed because verbose_feature_names_out=True is default\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n@@ -2128,4 +2177,4 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..bf028f1 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -85,7 +85,26 @@ def test_get_full_qualified_name():\n     node = nodes.reference(reftype='option', reftarget='-l')\n     assert domain.get_full_qualified_name(node) is None\n \n-    # options with std:program context\n+    # Test for options with optional values and brackets\n+    def test_cmd_option_with_optional_value(app):\n+        text = \".. option:: -j[=N]\"\n+        doctree = restructuredtext.parse(app, text)\n+        assert_node(doctree, (index,\n+                              [desc, ([desc_signature, ([desc_name, '-j'],\n+                                                        [desc_addname, '[=N]'])],\n+                                      [desc_content, ()])]))\n+        objects = list(app.env.get_domain(\"std\").get_objects())\n+        assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+\n+    def test_cmd_option_starting_with_bracket(app):\n+        text = \".. option:: [enable=]PATTERN\"\n+        doctree = restructuredtext.parse(app, text)\n+        assert_node(doctree, (index,\n+                              [desc, ([desc_signature, ([desc_name, '[enable'],\n+                                                        [desc_addname, '=]PATTERN'])],\n+                                      [desc_content, ()])]))\n+        objects = list(app.env.get_domain(\"std\").get_objects())\n+        assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n     kwargs = {'std:program': 'ls'}\n     node = nodes.reference(reftype='option', reftarget='-l', **kwargs)\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..1f695bf 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -20,7 +20,31 @@ from sphinx import addnodes\n from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_ignored(app):\n+    \"\"\"Test that an empty __all__ in a module results in no members being documented.\"\"\"\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_non_empty_all(app):\n+    \"\"\"Test that with a non-empty __all__, specified members are documented.\"\"\"\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.non_empty_all', options)\n+    assert 'def foo' in ''.join(actual)\n+    assert 'def bar' not in ''.join(actual)\n+    assert 'def baz' not in ''.join(actual)\n+\n from sphinx.util.docutils import LoggingReporter\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..a4788f7 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -44,6 +46,8 @@ def test_restify():\n     assert restify(None) == \":obj:`None`\"\n     assert restify(Integral) == \":class:`numbers.Integral`\"\n     assert restify(Any) == \":obj:`Any`\"\n+    # Test case for struct.Struct\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n \n \n def test_restify_type_hints_containers():\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..74f6a55 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,6 +1455,30 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    \n+    def test_other_parameters_with_class_reference(self):\n+        # Test case to verify if \"Other Parameters\" section respects `napoleon_use_param`\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n \"\"\"\n         self.assertEqual(expected, actual)\n \n",
  "sphinx-doc__sphinx-8721": "",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..3b327d0 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -350,6 +350,15 @@ def test_args():\n            # enclosing brackets needed on 0\n     raises(ValueError, lambda: Permutation([1, 1, 0]))\n     raises(ValueError, lambda: Permutation([[1], [1, 2]]))\n+\n+    # Test non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([1, 0])\n+    assert Permutation([[0, 1], [2, 3], [0, 1]]) == Permutation([0, 1, 2, 3])\n+    assert Permutation([[1, 2], [2, 3], [3, 1]]) == Permutation([0, 3, 1, 2])\n+    assert Permutation([[0, 1], [1, 0], [1, 0]]) == Permutation([0, 1])\n+    # Check for identity permutation when cycles fully cancel\n+    assert Permutation([[0, 1], [1, 0], [0, 1], [1, 0]]) == Permutation([0, 1])\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..036f5ba 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,5 +1,6 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n-from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n+from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError, ImmutableMatrix\n from sympy.utilities.pytest import raises\n \n def test_sparse_matrix():\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..10c4b50 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -81,8 +81,20 @@ def check(a, exclude=[], check_attr=True):\n \n #================== core =========================\n \n-\n-def test_core_basic():\n+import sys\n+import pickle\n+import sympy\n+from sympy import Float, symbols\n+\n+def test_pickle_cross_version():\n+    # This test verifies that a pickled sympy expression with a float in Python 2 can be loaded in Python 3.\n+    x = symbols(\"x\")\n+    expr = x + 1.0\n+    # Simulate Python 2 pickling\n+    pickled_expr = pickle.dumps(expr, protocol=2)\n+    # Simulate loading in Python 3\n+    loaded_expr = pickle.loads(pickled_expr)\n+    assert loaded_expr == expr\n     for c in (Atom, Atom(),\n               Basic, Basic(),\n               # XXX: dynamically created types are not picklable\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..290c331 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -261,6 +261,15 @@ def test_coth():\n     assert coth(-5*pi*I/6) == -sqrt(3)*I\n \n     assert coth(pi*I/105) == -cot(pi/105)*I\n+\n+def test_coth_log_tan_subs():\n+    from sympy import Symbol, coth, log, tan, I, pi\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    \n+    # Test the problematic substitutions\n+    for value in [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]:\n+        assert e.subs(x, value) is not None\n     assert coth(-pi*I/105) == cot(pi/105)*I\n \n     assert coth(2 + 3*I) == coth(2 + 3*I)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..afcbc95 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -187,6 +187,23 @@ def test_col_join():\n                    [0, 0, 1],\n                    [7, 7, 7]])\n \n+from sympy import Matrix, eye\n+\n+def test_issue_13643():\n+    # Original test case from the issue\n+    M = eye(6)\n+    V = 2 * Matrix.ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0], \n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n def test_row_insert():\n     r4 = Matrix([[4, 4, 4]])\n     for i in range(-4, 5):\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..beefcbd 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -662,8 +662,21 @@ def test_latex_sequences():\n     latex_str = r'\\left\\[\\ldots, 18, 4, 2, 0\\right\\]'\n     assert latex(SeqMul(s5, s6)) == latex_str\n \n-\n-def test_latex_FourierSeries():\n+def test_latex_sequences_bracket_issue():\n+    from sympy import init_printing, symbols, oo\n+    from sympy.series.sequences import SeqFormula\n+    from sympy.printing.latex import latex\n+    \n+    # Initialize printing (mimicking Jupyter behavior)\n+    init_printing()\n+\n+    # Define the sequence formula\n+    n = symbols('n', integer=True)\n+    seq = SeqFormula(n**2, (n, 0, oo))\n+    \n+    # Test the LaTeX output for the sequence\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(seq) == latex_str\n     latex_str = r'2 \\sin{\\left (x \\right )} - \\sin{\\left (2 x \\right )} + \\frac{2}{3} \\sin{\\left (3 x \\right )} + \\ldots'\n     assert latex(fourier_series(x, (x, -pi, pi))) == latex_str\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..9dac70d 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -155,6 +156,27 @@ def test_Greedy_postprocess():\n \n \n def test_Domain_preprocess():\n+    assert Domain.preprocess('R[x]') == RR[x]\n+    assert Domain.preprocess('C[x]') == CC[x]\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n+\n+def test_Poly_with_RR_domain():\n+    from sympy import Poly\n+    from sympy.abc import x, y, z\n+\n+    # Verify that Poly can handle domain='RR[y,z]'\n+    p = Poly(1.2*x*y*z, x, domain='RR[y,z]')\n+    assert p.as_expr() == 1.2*y*z*x\n+    assert p.gens == (x,)\n+    assert str(p.domain) == 'RR[y,z]'\n+\n+    # Ensure that an invalid domain raises an OptionError\n+    raises(OptionError, lambda: Poly(1.2*x*y*z, x, domain='invalid'))\n     assert Domain.preprocess(ZZ) == ZZ\n     assert Domain.preprocess(QQ) == QQ\n     assert Domain.preprocess(EX) == EX\n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..3861084 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6110,8 +6110,32 @@ u(\"\"\"\\\n \"\"\")\n     assert upretty((1/y)*e.j) == ucode_str\n \n-\n-def test_MatrixSymbol_printing():\n+def test_issue_14814_pretty_print_MatAdd():\n+    # Adding test cases for issue #14814\n+    n = symbols('n', integer=True)\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+    a = symbols('a')\n+    \n+    # Test case from the original patch\n+    assert pretty(x + y) == \"x + y*\"\n+    \n+    # Another test case from the original patch to verify the fix\n+    assert pretty(-a*x + -2*y*y) == \"-a*x -2*y**y*\"\n+\n+    # Additional test case: Verify with more complex expressions\n+    z = MatrixSymbol('z', n, n)\n+    assert pretty(x + y + z) == \"x + y* + z\"\n+    assert pretty(-x + y) == \"-x + y*\"\n+    \n+    # Case with nested MatAdd\n+    assert pretty((x + y) + (y + z)) == \"x + 2*y* + z\"\n+    \n+    # Make sure negative symbols are handled correctly\n+    assert pretty(-x - y) == \"-x - y*\"\n+    \n+    # Test with additional operations\n+    assert pretty(x - y + z) == \"x - y* + z\"\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n     B = MatrixSymbol(\"B\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..19716ce 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -728,7 +728,20 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n \n-def test_python_keywords():\n+from sympy import symbols, MatrixSymbol, lambdify, raises\n+\n+def test_curly_matrix_symbol():\n+    # Test directly for issue #15009\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+\n+    # Test lambdify with a MatrixSymbol with curly braces\n+    # This should work if the issue is fixed\n+    lam = lambdify(curlyv, curlyv)\n+    assert lam(1)==1\n+\n+    # Testing with dummify=True\n+    lam_dummified = lambdify(curlyv, curlyv, dummify=True)\n+    assert lam_dummified(1)==1\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n     # functions. This is an additional regression test.\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7eaf694 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..26d724e 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,28 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+from sympy import symbols, MatrixSymbol, latex\n+\n+def test_indexed_matrix_expression_latex():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+\n+    # Test the patched behavior\n+    expected = r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+    assert latex((M*N)[i, j]) == expected\n+\n+    # Additional related case: check with different symbols\n+    l = symbols(\"l\")\n+    P = MatrixSymbol(\"P\", l, l)\n+    Q = MatrixSymbol(\"Q\", l, l)\n+    assert latex((P*Q)[i, j]) == r'\\sum_{i_{1}=0}^{l - 1} P_{i, i_{1}} Q_{i_{1}, j}'\n+\n+    # Edge case: 1x1 matrix multiplication\n+    A = MatrixSymbol(\"A\", 1, 1)\n+    B = MatrixSymbol(\"B\", 1, 1)\n+    assert latex((A*B)[0, 0]) == r'A_{0, 0} B_{0, 0}'\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..eb5000d 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -6,6 +7,26 @@ from sympy.utilities.pytest import raises\n \n \n def test_idiff():\n+    # Additional test cases to verify the fix for the issue\n+    f = Function('f')\n+    g = Function('g')\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+    \n+    # Test idiff with Eq\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x) == (x + 1) * exp(x - y)/(y + 1)\n+    \n+    # Test idiff with function f(x)\n+    assert idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x) == (x + 1) * exp(x - f(x))/(f(x) + 1)\n+    \n+    # Test idiff with multiple symbols including a function\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    \n+    # Test idiff with two functions\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+\n+    # Original test cases\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..9de24b6 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -581,12 +581,84 @@ def test_ccode_cse():\n         '}\\n'\n     )\n     assert source == expected\n+from sympy import MatrixSymbol\n+from sympy.utilities.codegen import codegen\n+import numpy as np\n+from sympy.utilities.autowrap import autowrap\n+\n+def test_ccode_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n \n+def test_autowrap_cython_with_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # Expression does not depend on x\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n+\n+def test_autowrap_cython_with_used_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = x[0, 0]  # Now output depends on x\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n def test_empty_f_code():\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n     assert source == \"\"\n+from sympy import MatrixSymbol\n+from sympy.utilities.codegen import codegen\n+import numpy as np\n+from sympy.utilities.autowrap import autowrap\n+\n+def test_ccode_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n \n+def test_autowrap_cython_with_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # Expression does not depend on x\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n+\n+def test_autowrap_cython_with_used_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = x[0, 0]  # Now output depends on x\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n \n def test_empty_f_code_with_header():\n     code_gen = FCodeGen()\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..caf45c3 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,24 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Intersection, FiniteSet, Symbol, Eq, S\n \n-def test_issue_9623():\n+def test_intersection_duplicates():\n+    x = Symbol('x')\n+\n+    # Test case where a duplicate should be removed, resulting in an empty set\n+    assert Intersection({1}, {1}, {x}) == S.EmptySet\n+\n+    # Test case where no duplicates need to be removed, and we should get the set with 1\n+    assert Intersection({1}, {x}) == FiniteSet(1)\n+\n+    # Test case where the intersection should remain unevaluated with duplicates\n+    assert Intersection({1}, {1}, {x}, evaluate=False).args == (FiniteSet(1), FiniteSet(1), FiniteSet(x))\n+\n+    # Test case for the expected Piecewise result\n+    result = Intersection({1, 2}, {1, 3}, {x})\n+    expected_result = Piecewise((FiniteSet(1), Eq(x, 1)), (S.EmptySet, True))\n+    assert result == expected_result\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_fu.py b/sympy/simplify/tests/test_fu.py\nindex 135b4cd..88b2926 100644\n--- a/sympy/simplify/tests/test_fu.py\n+++ b/sympy/simplify/tests/test_fu.py\n@@ -76,6 +76,15 @@ def test__TR56():\n     assert T(sin(x)**6, sin, cos, h, 6, True) == sin(x)**6\n     assert T(sin(x)**8, sin, cos, h, 10, True) == (-cos(x)**2 + 1)**4\n \n+    # issue 17137\n+    assert T(sin(x)**I, sin, cos, h, 4, True) == sin(x)**I\n+    assert T(sin(x)**(2*I + 1), sin, cos, h, 4, True) == sin(x)**(2*I + 1)\n+\n+    def test_issue_17137_fu():\n+        # Additional simplified expressions\n+        assert T(cos(x)**I, cos, sin, h, 4, True) == cos(x)**I\n+        assert T(cos(x)**(I + 1), cos, sin, h, 4, True) == cos(x)**(I + 1)\n+\n \n def test_TR5():\n     assert TR5(sin(x)**2) == -cos(x)**2 + 1\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..3581a41 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -95,7 +96,11 @@ def test_point():\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n-    # Point differences should be simplified\n+    # Test multiplication with sympify\n+    p1 = Point(0, 0)\n+    p2 = Point(1, 1)\n+    assert p1 + p2 * sympify(2.0) == Point(2, 2)\n+    assert p1 + sympify(2.0) * p2 == Point(2, 2)\n     assert Point(x*(x - 1), y) - Point(x**2 - x, y + 1) == Point(0, -1)\n \n     a, b = S.Half, Rational(1, 3)\n@@ -172,7 +177,11 @@ def test_point3D():\n \n     raises(ValueError, lambda: Point3D(0, 0, 0) + 10)\n \n-    # Point differences should be simplified\n+    # Test multiplication with sympify\n+    p1 = Point(0, 0)\n+    p2 = Point(1, 1)\n+    assert p1 + p2 * sympify(2.0) == Point(2, 2)\n+    assert p1 + sympify(2.0) * p2 == Point(2, 2)\n     assert Point3D(x*(x - 1), y, 2) - Point3D(x**2 - x, y + 1, 1) == \\\n         Point3D(0, -1, 1)\n \n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..6352176 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,56 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import Symbol, sympify\n+\n+def test_sympy_symbol_equality_with_bad_repr():\n+    # Test the main issue: sympy's __eq__ method should not eval the repr of an object.\n+    \n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+            \n+    x = Symbol('x')\n+    c_instance = C()\n+    assert (x == c_instance) is False  # Should not evaluate c_instance's repr\n+\n+    class C2:\n+        def __repr__(self):\n+            return 'x'\n+    \n+    c2_instance = C2()\n+    assert (x == c2_instance) is False  # Despite repr being 'x', should not be considered equal\n+\n+    class BadRepr:\n+        def __repr__(self):\n+            raise RuntimeError\n+    \n+    assert (x == BadRepr()) is False  # Should safely handle BadRepr instances without evaluating\n+\n+def test_non_string_equality():\n+    # Expressions should not compare equal to strings\n+    x = Symbol('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Make sure == doesn't try to convert the resulting expression to a string\n+    # (e.g., by calling sympify() instead of _sympify())\n+\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+    v = [Symbol('d'), Symbol('e'), Symbol('fg')]\n+    assert v != ['d', 'e', 'fg']\n+    assert v == [Symbol('d'), Symbol('e'), Symbol('fg')]\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1952,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..5c45dea 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,27 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+def test_issue_18186_order_independence():\n+    from sympy import diophantine\n+    from sympy.abc import x, y\n+\n+    # Ensure that permutation of results is consistent regardless of symbol order\n+    eq = x**4 + y**4 - 2**4 - 3**4\n+    expected_solution = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3),\n+                             (2, -3), (2, 3), (3, -2), (3, 2)])\n+    \n+    assert diophantine(eq, syms=(x, y), permute=True) == expected_solution\n+    assert diophantine(eq, syms=(y, x), permute=True) == expected_solution\n+\n+    # Test with a different equation to ensure robustness\n+    eq2 = x**4 + y**4 - 4**4 - 5**4\n+    expected_solution2 = set([(-4, -3), (-4, 3), (-3, -4), (-3, 4),\n+                              (3, -4), (3, 4), (4, -3), (4, 3)])\n+    \n+    assert diophantine(eq2, syms=(x, y), permute=True) == expected_solution2\n+    assert diophantine(eq2, syms=(y, x), permute=True) == expected_solution2\n+\n+    # Add more cases as necessary to expand coverage\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..fc2c0d6 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n from sympy.codegen.ast import Declaration, Variable, float64, int64\n@@ -66,7 +67,7 @@ def test_sizeof():\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n-    assert all(atom == typename for atom in sz.atoms())\n+    assert all(isinstance(atom, String) and not atom.args for atom in sz.atoms())\n \n \n def test_struct():\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..5bad5d9 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,27 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_single_element_conversion():\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    # Test conversion of a BlockDiagMatrix with a single element to a Matrix\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n+def test_BlockDiagMatrix_two_elements_conversion():\n+    from sympy import Matrix, BlockDiagMatrix, zeros\n+    M = Matrix([[1, 2], [3, 4]])\n+    # Test conversion of a BlockDiagMatrix with two elements to a Matrix\n+    D = BlockDiagMatrix(M, M)\n+    B = Matrix(D)\n+    assert B == Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..f34ad95 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,6 +1,7 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n-        Symbol)\n+        Symbol, MatrixElement)\n from sympy.testing.pytest import raises\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n@@ -83,7 +84,12 @@ def test_block_index():\n     assert BI.as_explicit().equals(eye(6))\n \n \n-def test_slicing():\n+def test_blockmatrix_symbolic_index_issue():\n+    n, i = symbols('n i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    assert C[i, 0] == MatrixElement(C, i, 0), \"C[i, 0] should not simplify to (A)[i, 0]\"\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..e6afecc 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -200,7 +200,26 @@ def test_im():\n     X = FunctionMatrix(3, 3, Lambda((n, m), n + m*I))\n     assert im(X) == Matrix([[0, 1, 2], [0, 1, 2], [0, 1, 2]])\n \n+from sympy import Piecewise, Symbol, Eq, Abs, Function\n+\n def test_sign():\n+    y = Symbol('y')\n+    f = Function('f')\n+    \n+    # Test rewriting sign in terms of Abs\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y / Abs(y), True))\n+    assert sign(f(y)).rewrite(Abs) == Piecewise((0, Eq(f(y), 0)), (f(y) / Abs(f(y)), True))\n+    \n+    x_positive = Symbol('x', positive=True)\n+    x_negative = Symbol('x', negative=True)\n+    x_nonzero = Symbol('x', nonzero=True)\n+    x_zero = Symbol('x', zero=True)\n+    \n+    # Test specific cases with rewrite\n+    assert sign(x_positive).rewrite(Abs) == x_positive / Abs(x_positive)\n+    assert sign(x_negative).rewrite(Abs) == x_negative / Abs(x_negative)\n+    assert sign(x_nonzero).rewrite(Abs) == x_nonzero / Abs(x_nonzero)\n+    assert sign(x_zero).rewrite(Abs) == Piecewise((0, True))\n     assert sign(1.2) == 1\n     assert sign(-1.2) == -1\n     assert sign(3*I) == I\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..d2ce272 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,25 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n-\n-def test_partitions():\n+def test_partitions_distinct_objects():\n+    # Test to ensure that the partitions() function does not reuse output dictionaries\n+    result = list(partitions(6, k=2))\n+    for i in range(len(result) - 1):\n+        assert result[i] is not result[i + 1], \"Partitions should not be the same object\"\n+\n+    result = list(partitions(5, m=3))\n+    for i in range(len(result) - 1):\n+        assert result[i] is not result[i + 1], \"Partitions should not be the same object\"\n+\n+    result = list(partitions(8, k=4, m=3))\n+    for i in range(len(result) - 1):\n+        assert result[i] is not result[i + 1], \"Partitions should not be the same object\"\n+\n+    result_with_size = list(partitions(6, k=2, size=True))\n+    for i in range(len(result_with_size) - 1):\n+        _, partition1 = result_with_size[i]\n+        _, partition2 = result_with_size[i + 1]\n+        assert partition1 is not partition2, \"Partitions should not be the same object\"\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..038ea66 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -266,6 +266,12 @@ def test_zero():\n     assert 0**(2*x*y) == 0**(x*y)\n     assert 0**(-2*x*y) == S.ComplexInfinity**(x*y)\n \n+    # Test issue 19572\n+    from sympy import zoo, oo, power\n+\n+    assert 0**-oo is zoo\n+    assert power(0, -oo) is zoo\n+\n \n def test_pow_as_base_exp():\n     x = Symbol('x')\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..b82073b 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,7 +1,9 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n                                  volume, kilometer)\n+from sympy.physics.units import joule, minute\n from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..fbff7ae 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,18 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+from sympy import Symbol\n+from pytest import raises\n+\n+def test_symbol_no_dict():\n+    # Verify that Symbol instances do not have a __dict__ attribute\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    assert s.__slots__ == ('name',)\n+    with raises(AttributeError):\n+        # Attempting to access __dict__ should raise an AttributeError\n+        _ = s.__dict__\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..c5bd003 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, Integral, oo, sin, exp)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..f5d61f0 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -6,6 +7,7 @@ from sympy import (\n     AccumBounds, Matrix, zeros, ZeroMatrix)\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n+from sympy import sinh, exp, Piecewise\n from sympy.abc import a, x, y, z, t\n \n def test_subs():\n@@ -20,7 +22,25 @@ def test_subs():\n     assert e == Rational(6)\n \n \n-def test_subs_Matrix():\n+def test_subs_polynomial_error_issue():\n+    # Test case inspired by issue with unexpected PolynomialError\n+    x_r, y_r = symbols('x_r y_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    \n+    # Test that substituting 1 with 1.0 does not raise an error\n+    expr_subbed = expr.subs({1: 1.0})\n+    assert expr_subbed is not None  # Ensure it executes without error\n+    \n+    # Additional cases to ensure robustness\n+    assert expr.subs({2: 2.0}) is not None\n+    assert expr.subs({3: 3.0}) is not None\n+    \n+    # Check if certain modifications remove the error\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z)\n+    assert expr_no_exp.subs({1: 1.0}) is not None\n+    \n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    assert expr_no_div.subs({1: 1.0}) is not None\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n     assert (x*y).subs({x:z, y:0}) in [z, z1]\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..856b610 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,9 +1,10 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n-from sympy.core.symbol import Symbol\n+from sympy.core.function import Derivative\n from sympy.integrals.integrals import Integral\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n@@ -39,7 +40,9 @@ def test_Integral_kind():\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n \n-def test_Matrix_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n     classes = (Matrix, SparseMatrix, ImmutableMatrix, ImmutableSparseMatrix)\n     for cls in classes:\n         m = cls.zeros(3, 2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..1723fc3 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -130,8 +130,17 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 1])) == {S.One, x, y, x*y, x**2, x**2*y}\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n-\n-    i, j, k = symbols('i j k', commutative=False)\n+    \n+    # Adding additional test cases to verify the fix for the issue with `min_degrees` parameter\n+    \n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {x1**3, x2**3, x3**3, x1**2*x2, x1*x2**2, x1**2*x3, x1*x3**2, \n+                                                      x2**2*x3, x2*x3**2, x1*x2*x3}\n+    assert set(itermonomials([x1, x2, x3], 4, 3)) == {x1**3, x2**3, x3**3, x1**2*x2, x1*x2**2, x1**2*x3, x1*x3**2,\n+                                                      x2**2*x3, x2*x3**2, x1*x2*x3, x1**4, x2**4, x3**4,\n+                                                      x1**3*x2, x1**2*x2**2, x1*x2**3, x1**3*x3, x1**2*x3**2,\n+                                                      x1*x3**3, x2**3*x3, x2**2*x3**2, x2*x3**3, x1**2*x2*x3, \n+                                                      x1*x2**2*x3, x1*x2*x3**2}\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n     assert set(itermonomials([i, j, k], [0, 1, 0])) == {1, j}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..e0d3784 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -48,6 +49,16 @@ def test_solve_poly_system():\n     raises(NotImplementedError, lambda: solve_poly_system(\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [y - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x**2 + y**2 - 1, x*y - 1], (x, y)))  # Adding a case with two variables and no finite solutions\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x**2 - y**2], (x, y)))  # Additional case for a system with infinite solutions\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x**2 + y**2 - 1], (x, y)))  # Another infinite solution case\n \n \n def test_solve_biquadratic():\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..d1de2a6 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -8,7 +9,8 @@ from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n-from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n+from sympy.geometry import Point2D\n from sympy.testing.pytest import raises, warns\n \n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..4e31113 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -347,7 +347,31 @@ def test_cse_MatrixSymbol():\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n \n-def test_cse_MatrixExpr():\n+def test_cse_MatrixSymbol_indexing():\n+    from sympy import cse, MatrixSymbol, pprint\n+\n+    # Create a MatrixSymbol and test cse with explicit indexing\n+    A = MatrixSymbol(\"A\", 3, 3)\n+    B = MatrixSymbol(\"B\", 3, 3)\n+\n+    expr = A[0, 0] * B[0, 0] + A[0, 1] * B[1, 0] + A[0, 2] * B[2, 0]\n+    replacements, reduced_exprs = cse(expr)\n+    \n+    # Ensure replacements are made correctly\n+    pprint(replacements)\n+    pprint(reduced_exprs)\n+    assert len(replacements) > 0\n+    assert reduced_exprs == [replacements[0][0] + replacements[1][0] + replacements[2][0]]\n+\n+    # Test with a more complex expression\n+    expr2 = A[0, 0] * B[0, 1] + A[1, 0] * B[1, 1] + A[2, 0] * B[2, 1] + A[0, 0] * B[0, 1]\n+    replacements2, reduced_exprs2 = cse(expr2)\n+    \n+    # Ensure there are common subexpressions\n+    pprint(replacements2)\n+    pprint(reduced_exprs2)\n+    assert len(replacements2) > 0\n+    assert len(reduced_exprs2) == 1\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..0ff7d33 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -36,9 +37,13 @@ def test_array_negative_indices():\n         raises(ValueError, lambda: test_array[-3, :])\n \n         assert test_array[-1, -1] == 10\n-\n-\n-def test_issue_18361():\n+def test_issue_17851_empty_array():\n+    # Test creating an empty array for all array types\n+    for ArrayType in array_types:\n+        A = ArrayType([])\n+        assert isinstance(A, ArrayType)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n     B = Array([sin(x)**2 + cos(x)**2, 0])\n     C = Array([(x + x**2)/(x*sin(y)**2 + x*cos(y)**2), 2*sin(x)*cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..076bba9 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,23 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n+def test_lambdify_single_element_tuple():\n+    # Test that a single-element tuple is correctly represented\n+    f_single = lambdify([], (1,))\n+    source_code_single = inspect.getsource(f_single)\n+    assert 'return (1,)' in source_code_single\n+    assert f_single() == (1,)\n+\n+def test_lambdify_two_element_tuple():\n+    # Test that a two-element tuple is correctly represented\n+    f_two = lambdify([], (1, 2))\n+    source_code_two = inspect.getsource(f_two)\n+    assert 'return (1, 2)' in source_code_two\n+    assert f_two() == (1, 2)\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..ceb2ef8 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,31 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.dimensions import Dimension\n+    from sympy import exp\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..105a4a3 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -41,7 +41,37 @@ def test_tensor_product_abstract():\n     assert TP(A, B).subs(A, C) == TP(C, B)\n \n \n+from sympy import *\n+from sympy.physics.quantum import *\n+\n def test_tensor_product_expand():\n+    # Test cases from the original test patch\n+    assert TP(A - B, B - A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2 * A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A * B, A) + 2 * TP(A * B, B) + TP(A, A) + TP(A, B)\n+\n+    # Additional test cases to further verify the fix\n+    U = Operator('U')\n+    V = Operator('V')\n+    # Test case for the specific issue raised: incomplete expansion\n+    P = TensorProduct(2 * U - V, U + V)\n+    assert P.expand(tensorproduct=True) == 2 * TP(U, U) + 2 * TP(U, V) - TP(V, U) - TP(V, V)\n+\n+    # Edge case where one factor is a zero tensor\n+    P_zero = TensorProduct(U - U, U + V)\n+    assert P_zero.expand(tensorproduct=True) == 0\n+\n+    # Test with more complex expressions\n+    P_complex = TensorProduct(U**2 + 3*U*V - V**2, U - V)\n+    expected_complex = TP(U**2, U) - TP(U**2, V) + 3*TP(U*V, U) - 3*TP(U*V, V) + TP(-V**2, U) + TP(V**2, V)\n+    assert P_complex.expand(tensorproduct=True) == expected_complex\n+\n+    # Verify expansion is idempotent\n+    P_expanded = P.expand(tensorproduct=True)\n+    assert P_expanded.expand(tensorproduct=True) == P_expanded\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..ef560cd 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -561,6 +562,46 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+    \n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    \n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    \n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+    \n+    expr = A1*T1 + V1\n+    # Should not raise a ValueError here\n+    assert SI._collect_factor_and_dimension(expr) is not None\n+\n+def test_issue_24211_with_negative_acceleration():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+    \n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n+    \n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+    \n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+    \n+    expr = A1*T1 + V1\n+    # Should not raise a ValueError here\n+    assert SI._collect_factor_and_dimension(expr) is not None\n+\n \n def test_prefixed_property():\n     assert not meter.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..5d911a0 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, volt\n+from sympy.core.singleton import S\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +29,18 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+    # Additional test cases for the milli prefix bug\n+    \n+    # Test milli*W expects to be equivalent to mW (milliwatts)\n+    assert milli * W == W / 1000  # milli*W should be 1/1000 of W\n+\n+    # Test W*milli expects to be equivalent to mW\n+    assert W * milli == W / 1000  # W*milli should also evaluate to 1/1000 of W\n+\n+    # Test with another unit like volts\n+    assert milli * volt == volt / 1000  # milli*volt should be 1/1000 of volt\n+    assert volt * milli == volt / 1000  # volt*milli should also evaluate to 1/1000 of volt\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "",
  "django__django-13033": "",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..b38160d 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,6 +3202,22 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n+    def test_boundwidget_id_for_label_uses_choicewidget_options(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the ID set by ChoiceWidget.options\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        # Use a custom auto_id to verify the issue\n+        form = SomeForm(auto_id='custom_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_field_1')\n+\n     def test_boundfield_widget_type(self):\n         class SomeForm(Form):\n             first_name = CharField()\n",
  "django__django-16400": "diff --git a/tests/auth_tests/test_management.py b/tests/auth_tests/test_management.py\nindex de2502e..b5cb934 100644\n--- a/tests/auth_tests/test_management.py\n+++ b/tests/auth_tests/test_management.py\n@@ -1484,4 +1484,37 @@ class CreatePermissionsTests(TestCase):\n                 content_type__app_label=opts.app_label,\n                 codename=codename,\n             ).exists()\n-        )\n+        )\n+\n+from django.test import TestCase, override_settings\n+from django.contrib.auth.models import Permission\n+from django.apps import apps\n+from django.core.management import call_command\n+from django.db import connections\n+\n+class TestMigrateCommandRespectsDatabaseParameter(TestCase):\n+    databases = {'default', 'other'}\n+\n+    def setUp(self):\n+        self.default_connection = connections['default']\n+        self.other_connection = connections['other']\n+        self.other_cursor = self.other_connection.cursor()\n+\n+    def tearDown(self):\n+        self.other_cursor.close()\n+\n+    @override_settings(DATABASE_ROUTERS=[DefaultDBRouter()])\n+    def test_migrate_command_uses_specified_database_for_permissions(self):\n+        # Delete all permissions in the 'other' database to start clean\n+        Permission.objects.using('other').delete()\n+\n+        # Run migrate command specifying the 'other' database\n+        call_command('migrate', database='other', verbosity=0)\n+\n+        # Check that permissions are created in the 'other' database\n+        permissions_count = Permission.objects.using('other').count()\n+        self.assertGreater(permissions_count, 0, \"Permissions should be created in the 'other' database.\")\n+\n+        # Ensure permissions are not created in the 'default' database\n+        default_permissions_count = Permission.objects.using('default').count()\n+        self.assertEqual(default_permissions_count, 0, \"Permissions should not be created in the 'default' database.\")\n",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..56ef79f 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,35 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+def test_colorbar_update_after_norm_change():\n+    # Generate random data\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    # Create a plot and a colorbar\n+    fig, ax = plt.subplots()\n+    plot = ax.imshow(img, cmap='gray')\n+    cb = fig.colorbar(plot, ax=ax)\n+    \n+    # Initially, the colorbar should be in linear scale\n+    assert cb.ax.yaxis.get_scale() == 'linear'\n+    \n+    # Change the norm to LogNorm and update\n+    plot.set_norm(LogNorm())\n+    cb.update_normal(plot)\n+    \n+    # Verify if the colorbar has updated to log scale\n+    fig.canvas.draw()  # Ensure the plot is updated\n+    assert cb.ax.yaxis.get_scale() == 'log'\n+    \n+    # Verify if the tick labels on the colorbar are as expected for log scale\n+    tick_labels = [label.get_text() for label in cb.ax.yaxis.get_ticklabels()]\n+    assert any(label.startswith('$\\\\mathdefault{10^{-') for label in tick_labels), \"Colorbar tick labels are not in log scale\"\n+\n+import pytest\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.colors import LogNorm, Normalize\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..82d9835 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -105,6 +105,32 @@ def test_inherited_instance_variable(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_inherited_annotation_only_member(app):\n+    options = {\"members\": None,\n+               \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.uninitialized_attributes.Derived', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.uninitialized_attributes',\n+        '',\n+        '',\n+        '   .. py:attribute:: Derived.attr1',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Derived.attr3',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n \n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n@@ -115,6 +141,32 @@ def test_decorators(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_inherited_annotation_only_member(app):\n+    options = {\"members\": None,\n+               \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.uninitialized_attributes.Derived', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.uninitialized_attributes',\n+        '',\n+        '',\n+        '   .. py:attribute:: Derived.attr1',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Derived.attr3',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n     actual = do_autodoc(app, 'class', 'target.decorator.Qux')\n     assert list(actual) == [\n         '',\n@@ -131,6 +183,32 @@ def test_decorators(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_inherited_annotation_only_member(app):\n+    options = {\"members\": None,\n+               \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.uninitialized_attributes.Derived', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.uninitialized_attributes',\n+        '',\n+        '',\n+        '   .. py:attribute:: Derived.attr1',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Derived.attr3',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_slots_attribute(app):\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..dafabae 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -9,8 +10,38 @@ from sympy.utilities.pytest import XFAIL\n from sympy.abc import x, y, z, t, a, b, c, d, e, f, g, h, i, k\n \n \n+def test_issue_rational_trig_simplification():\n+    # Test case for issue: trigonometric simplification with rational numbers\n+\n+    # Define the Rational angles\n+    angle1 = Rational(1, 50)\n+    angle2 = Rational(1, 25)\n+    \n+    # Create vectors for dot product tests\n+    t1 = Matrix([sin(angle1), cos(angle1), 0])\n+    t2 = Matrix([sin(angle2), cos(angle2), 0])\n+\n+    # Dot product which should simplify to cos(angle1 - angle2)\n+    r = t1.dot(t2)\n+    \n+    # Verify simplification of dot product\n+    assert r.simplify() == cos(angle1 - angle2)\n+\n+    # Verify trigsimp directly on the expression\n+    assert trigsimp(r) == cos(angle1 - angle2)\n+\n+    # Verify if acos of the dot product result simplifies correctly\n+    acos_expr = acos(r)\n+    assert acos_expr.simplify() == acos(cos(angle1 - angle2))\n+\n+    # Additional tests for direct expression\n+    expr = sin(angle1)*sin(angle2) + cos(angle1)*cos(angle2)\n+    assert expr.simplify() == cos(angle1 - angle2)\n+    assert trigsimp(expr) == cos(angle1 - angle2)\n \n-def test_trigsimp1():\n+    # Check acos of the original expression\n+    acos_expr2 = acos(expr)\n+    assert acos_expr2.simplify() == acos(cos(angle1 - angle2))\n     x, y = symbols('x,y')\n \n     assert trigsimp(1 - sin(x)**2) == cos(x)**2\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..33641cf 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,37 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_sum_pretty_print_alignment():\n+    from sympy import Sum, oo, pprint\n+    from sympy.abc import x\n+\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    \n+    # Expected ucode string with correct alignment\n+    expected_ucode_str = u(\"\"\"\\\n+  \u221e     \\n\\\n+ ___    \\n\\\n+ \u2572      \\n\\\n+  \u2572   x \\n\\\n+  \u2571     \\n\\\n+ \u2571    +3\\n\\\n+ \u203e\u203e\u203e    \\n\\\n+x = 1   \\\n+\"\"\")\n+    assert upretty(expr) == expected_ucode_str\n \n-def test_units():\n+    # Testing ascii pretty print too\n+    expected_ascii_str = \"\"\"\\\n+  oo   \\n\\\n+ ___   \\n\\\n+ \\\\    \\n\\\n+  \\\\   x\\n\\\n+  /    \\n\\\n+ /   +3\\n\\\n+ \u203e\u203e\u203e   \\n\\\n+x = 1  \\\n+\"\"\"\n+    assert pretty(expr) == expected_ascii_str\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..904ba86 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -705,7 +705,18 @@ def test_uniq():\n         [2, 3, 4, [2], [1], [3]]\n \n \n-def test_kbins():\n+def test_uniq_modification():\n+    f = [1, 2, 3, 4, 5]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    f = [1, 1, 2, 2]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    f = list('THISTLE')\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    f = [[1, 2], [3, 4], [1, 2]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n     assert len(list(kbins('1123', 2, ordered=1))) == 24\n     assert len(list(kbins('1123', 2, ordered=11))) == 36\n     assert len(list(kbins('1123', 2, ordered=10))) == 10\n",
  "django__django-11797": "",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..54db0b0 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,7 +546,33 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n-    def test_uuid_pk_subquery(self):\n+    def test_subquery_sql(self):\n+        # Create a subquery from a queryset\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+\n+        # Verify that subquery flag is set correctly\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        self.assertIs(employees.query.subquery, False)\n+\n+        # Compile the SQL and ensure it includes the SELECT statement properly\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql)\n+        self.assertTrue(sql.endswith(')'))\n+\n+    def test_subquery_sql_without_setting_subquery(self):\n+        # Directly create a Subquery object without setting subquery=True\n+        apps_subquery = Subquery(App.objects.all())\n+        \n+        # Verify that the subquery flag is correctly set by default constructor\n+        self.assertIs(apps_subquery.query.subquery, True)\n+\n+        # Compile the SQL and check if it is valid\n+        compiler = apps_subquery.query.get_compiler(connection=connection)\n+        sql, _ = apps_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql)\n+        self.assertTrue(sql.endswith(')'))\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n         qs = UUIDPK.objects.filter(id__in=Subquery(UUID.objects.values('uuid_fk__id')))\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..1890dfc 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,4 +1,5 @@\n-from django.db.models import FilteredRelation\n+\n+from django.db.models import FilteredRelation, F\n from django.test import TestCase\n \n from .models import Organiser, Pool, PoolStyle, Tournament\n@@ -152,7 +153,38 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n-    def test_reverse_fk_select_related_multiple(self):\n+    def test_wrong_select_related(self):\n+        \"\"\"\n+        This test case verifies the issue described in the original problem.\n+        It confirms that the `select_related` with `FilteredRelation` sets the correct related object.\n+        \"\"\"\n+        with self.assertNumQueries(3):\n+            p = list(PoolStyle.objects.annotate(\n+                tournament_pool=FilteredRelation('pool__tournament__pool'),\n+            ).select_related('tournament_pool'))\n+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\n+\n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        \"\"\"\n+        This test case checks for a cycle in reverse ForeignKey relations\n+        with select_related and ensures the correct tournament is selected.\n+        \"\"\"\n+        with self.assertNumQueries(3):\n+            p = list(PoolStyle.objects.annotate(\n+                tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+            ).select_related(\"tournament_pool\", \"tournament_pool__tournament\"))\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        \"\"\"\n+        This test case verifies the use of select_related to fetch related objects\n+        through a ForeignKey using FilteredRelation.\n+        \"\"\"\n+        with self.assertNumQueries(2):\n+            p = list(Tournament.objects.filter(id=self.t2.id).annotate(\n+                style=FilteredRelation(\"pool__another_style\"),\n+            ).select_related(\"style\"))\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n         with self.assertNumQueries(1):\n             ps = list(\n                 PoolStyle.objects.annotate(\n@@ -163,4 +195,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..0e60502 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -14,6 +15,8 @@ from PIL import Image\n import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n+import matplotlib.pyplot as plt\n+import pickle\n from matplotlib.axes import Axes\n from matplotlib.figure import Figure, FigureBase\n from matplotlib.layout_engine import (ConstrainedLayoutEngine,\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..11bc1ab 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -1623,7 +1624,29 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_with_hue_in_map(self):\n+        import seaborn as sns\n+        import pandas as pd\n+        import numpy as np\n+\n+        # Load iris dataset\n+        iris = sns.load_dataset(\"iris\")\n+\n+        # Attempt to replicate the reported issue with PairGrid\n+        try:\n+            g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+\n+            # If no error occurs, we pass the test case\n+            passed = True\n+\n+        except Exception as e:\n+            # If an unexpected error occurs, fail the test case\n+            passed = False\n+            print(f\"Test failed with exception: {e}\")\n+\n+        assert passed, \"PairGrid with hue assigned in map should not raise an error.\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..d8e6b13 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -332,8 +332,18 @@ def test_excinfo_exconly():\n     assert msg.startswith(\"ValueError\")\n     assert msg.endswith(\"world\")\n \n+import pytest\n \n-def test_excinfo_repr():\n+def test_excinfo_raises_str():\n+    # Test to check if str(e) on pytest.raises context behaves as expected\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    \n+    # Verify that str(excinfo.value) provides the expected output\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n+    \n+    # Verify that str(excinfo) behaves differently than str(excinfo.value)\n+    assert str(excinfo) != str(excinfo.value)\n     excinfo = pytest.raises(ValueError, h)\n     s = repr(excinfo)\n     assert s == \"<ExceptionInfo ValueError tblen=4>\"\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..48f27f1 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,28 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+    def test_collect_only_shortcut(self, testdir):\n+        # Test using the single character shortcut `-co` for `--collect-only`\n+        testdir.makepyfile(\"def test_func(): pass\")\n+        result = testdir.runpytest(\"-co\")\n+        result.stdout.fnmatch_lines([\"*collected 1 item*\"])\n+        result.stdout.fnmatch_lines([\"*test_func*\"])\n+\n+    def test_collect_only_and_run(self, testdir):\n+        # Ensure that `-co` does not run tests, only collects them\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_one():\n+                assert 1 == 1\n+            def test_two():\n+                assert 1 == 2  # This would fail if ran\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-co\")\n+        result.stdout.fnmatch_lines([\"*collected 2 items*\"])\n+        assert \"1 failed\" not in result.stdout.str()\n+        assert \"1 passed\" not in result.stdout.str()\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..040ee79 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -91,11 +91,20 @@ def missing_attr(c,\n     return a + (b or \"\")\n \n \n-class _ClassWithDocumentedInit:\n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n     \"\"\"Class docstring.\"\"\"\n \n     def __init__(self, x: int) -> None:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..fc49227 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -80,6 +80,22 @@ def test_Identity():\n     assert A*Im == A\n     assert In*A == A\n \n+    # Test case to verify the sum of elements of an identity matrix\n+    i, j = symbols('i j', integer=True)\n+    M = MatrixSymbol('M', n, n)\n+    with assuming(Query.orthogonal(M)):\n+        e = refine((M.T * M).doit())\n+\n+        # Check that e is an identity matrix\n+        assert all(e[i, i] == 1 for i in range(n))\n+        assert all(e[i, j] == 0 for i in range(n) for j in range(n) if i != j)\n+\n+        # Check the sum of the diagonal elements is n\n+        assert Sum(e[i, i], (i, 0, n-1)).doit() == n\n+\n+        # Check the total sum of the elements is n\n+        assert Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..9a0416d 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,7 +251,19 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n-# These bad LaTeX strings should raise a LaTeXParsingError when parsed\n+def test_issue_21537():\n+    from sympy.parsing.latex import parse_latex\n+    from sympy import Symbol, Rational\n+    a = Symbol('a')\n+    b = Symbol('b')\n+    c = Symbol('c')\n+    \n+    # Original issue expression\n+    latex_expr = \"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\"\n+    expected_expr = ((a**3 + b)/c) / (1/(c**2))\n+    \n+    # Ensure the parsed expression matches the expected expression\n+    assert parse_latex(latex_expr) == expected_expr\n BAD_STRINGS = [\n     r\"(\",\n     r\")\",\n"
}