{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..2bec453 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -49,7 +49,21 @@ compound_models = {\n             (np.array([False, False]),\n              np.array([[True], [True]]))\n             ),\n-    'cm7': (map2 | p2 & sh1,\n+    'cm6': (m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5),\n+            (np.array([False, False, True, True]),\n+             np.array([[True,  True, False, False],\n+                       [True,  True, False, False],\n+                       [False, False, True,  False],\n+                       [False, False, False, True]]))\n+            ),\n+    'cm7': (m.Pix2Sky_TAN() & (m.Linear1D(10) & m.Linear1D(5)),\n+            (np.array([False, False, True, True]),\n+             np.array([[True,  True, False, False],\n+                       [True,  True, False, False],\n+                       [False, False, True,  True],\n+                       [False, False, True,  True]]))\n+            ),\n+    'cm8': (map2 | p2 & sh1,\n             (np.array([False, True]),\n              np.array([[True, False], [False, True]]))\n             )\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..ba1208b 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,6 +1,33 @@\n+\n+def test_rst_with_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n+import numpy as np\n+import astropy.units as u\n+from astropy.table import QTable\n \n from astropy.io import ascii\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..7e89ae1 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -108,8 +108,88 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+import pytest\n+import numpy as np\n+from astropy.utils.exceptions import AstropyUserWarning\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_roundtrip_lowercase(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n+    ! Columns are as labelled\n+    READ TERR 1\n+    READ SERR 2\n+    ! WT -- hard data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   NO       0.212439\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000\n+    NO NO NO NO NO\n+    ! WT -- soft data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   0.726155        0.583890\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   2.410935        1.393592\n+    NO NO NO NO NO\n+    ! WT -- hardness ratio\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    ! Add command, just to raise the warning.\n+    READ TERR 1\n+    ! WT -- whatever\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    NO 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    \"\"\"\n+    \n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n+\n+    path = str(tmp_path / \"test_lowercase.qdp\")\n+    path2 = str(tmp_path / \"test2_lowercase.qdp\")\n \n-def test_read_example():\n+    with open(path, \"w\") as fp:\n+        print(example_qdp, file=fp)\n+    with pytest.warns(AstropyUserWarning) as record:\n+        table = _read_table_qdp(path, names=[\"MJD\", \"Rate\"], table_id=0)\n+    assert np.any(\n+        [\n+            \"This file contains multiple command blocks\" in r.message.args[0]\n+            for r in record\n+        ]\n+    )\n+\n+    _write_table_qdp(table, path2)\n+\n+    new_table = _read_table_qdp(path2, names=[\"MJD\", \"Rate\"], table_id=0)\n+\n+    for col in new_table.colnames:\n+        is_masked = np.array([np.ma.is_masked(val) for val in new_table[col]])\n+        if np.any(is_masked):\n+            # All NaN values are read as such.\n+            assert np.ma.is_masked(table[col][is_masked])\n+\n+        is_nan = np.array(\n+            [(not np.ma.is_masked(val) and np.isnan(val)) for val in new_table[col]]\n+        )\n+        # All non-NaN values are the same\n+        assert np.allclose(new_table[col][~is_nan], table[col][~is_nan])\n+        if np.any(is_nan):\n+            # All NaN values are read as such.\n+            assert np.isnan(table[col][is_nan])\n+    assert np.allclose(new_table[\"MJD_perr\"], [2.378472e-05, 1.1446759e-05])\n+\n+    for meta_name in [\"initial_comments\", \"comments\"]:\n+        assert meta_name in new_table.meta\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..e9e6f8c 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,47 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+import numpy as np\n+import pytest\n+from astropy.nddata import NDDataRef\n+\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be\n+    # a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..4129e25 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -253,8 +253,21 @@ class TestTableFunctions(FitsTestCase):\n         # When there are scaled columns, the raw data are in data._parent\n \n         t.close()\n+    def test_d_exponent_in_floating_point(self):\n+        \"\"\"Test to ensure that floating point numbers with 'D' exponents are correctly converted to 'E' in ASCII tables.\"\"\"\n+        d_values = np.array([1.2345e40, 6.7890e-40])\n+        c1 = fits.Column(name='d_values', format='D', array=d_values)\n+        hdu = fits.TableHDU.from_columns([c1])\n \n-    def test_ascii_table(self):\n+        hdu.writeto(self.temp('test_d_exponent.fits'), overwrite=True)\n+\n+        with open(self.temp('test_d_exponent.fits')) as f:\n+            file_content = f.read()\n+            assert '1.23450000000000000E+40' in file_content\n+            assert '6.78900000000000000E-40' in file_content\n+\n+        with fits.open(self.temp('test_d_exponent.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data)\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n         ra1 = np.rec.array([\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..5838ad0 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1103,6 +1103,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Ensure default FILE_UPLOAD_PERMISSIONS is set to 0o644 if not explicitly configured.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n     def test_override_file_upload_directory_permissions(self):\n         \"\"\"\n         Overriding the FILE_UPLOAD_DIRECTORY_PERMISSIONS setting should be\n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex dbcbef0..0883fef 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -604,7 +604,20 @@ class MigrateTests(MigrationTestBase):\n         call_command(\"migrate\", \"migrations\", \"zero\", verbosity=0)\n \n     @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_non_atomic\"})\n-    def test_sqlmigrate_for_non_atomic_migration(self):\n+    def test_sqlmigrate_for_non_transactional_databases(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support\n+        transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n         \"\"\"\n         Transaction wrappers aren't shown for non-atomic migrations.\n         \"\"\"\n",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..0947b31 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -65,6 +65,10 @@ class TestSerialization(SimpleTestCase):\n         self.assertEqual(instance.field, datetime.timedelta(days=1, hours=1))\n \n \n+from django.core import exceptions\n+from django.test import SimpleTestCase\n+from django.db import models\n+\n class TestValidation(SimpleTestCase):\n \n     def test_invalid_string(self):\n@@ -72,16 +76,34 @@ class TestValidation(SimpleTestCase):\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n         self.assertEqual(cm.exception.code, 'invalid')\n+        # Test existing invalid format error message\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n             \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n         )\n \n+    def test_invalid_duration_format(self):\n+        field = models.DurationField()\n+        invalid_durations = [\n+            '14:00',  # This format is misleading, as it should include seconds (e.g., '14:00:00')\n+            '1:2',    # Missing seconds\n+            '1::2',   # Double colon with missing segment\n+        ]\n+        for duration in invalid_durations:\n+            with self.assertRaises(exceptions.ValidationError) as cm:\n+                field.clean(duration, None)\n+            self.assertEqual(cm.exception.code, 'invalid')\n+            self.assertEqual(\n+                cm.exception.message % cm.exception.params,\n+                f\"'{duration}' value has an invalid format. \"\n+                \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n+            )\n+\n \n class TestFormField(SimpleTestCase):\n     # Tests for forms.DurationField are in the forms_tests app.\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..b70c813 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -232,12 +232,18 @@ class NumericPasswordValidatorTest(SimpleTestCase):\n \n \n class UsernameValidatorsTests(SimpleTestCase):\n-    def test_unicode_validator(self):\n+    def test_ascii_validator_with_trailing_newline(self):\n+        invalid_usernames = ['username\\n', 'user\\nname', 'name\\n']\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['joe', 'Ren\u00e9', '\u1d2e\u1d35\u1d33\u1d2e\u1d35\u1d3f\u1d30', '\u0623\u062d\u0645\u062f']\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", \"trailingnewline\\n\",\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -248,9 +254,15 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_unicode_validator_with_trailing_newline(self):\n+        invalid_usernames = ['username\\n', 'user\\nname', 'name\\n']\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", \"trailingnewline\\n\"]\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +270,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..f41efd7 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,7 +356,22 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n-    def test_non_string_content(self):\n+\n+    def test_memoryview_content(self):\n+        # Testing memoryview content in HttpResponse\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_memoryview_with_empty_data(self):\n+        # Testing HttpResponse with an empty memoryview\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_memoryview_with_large_data(self):\n+        # Testing HttpResponse with a large memoryview\n+        large_data = b'a' * 10**6\n+        r = HttpResponse(memoryview(large_data))\n+        self.assertEqual(r.content, large_data)\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n         self.assertEqual(r.content, b'12345')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..a4d2853 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..70c7930 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,9 +1,11 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n+from django.test.utils import captured_stdout\n \n from .models import Proxy, UserProxy\n \n@@ -140,6 +142,46 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Permissions may already exist:\n+        - Old workaround was to manually create permissions for proxy models.\n+        - Model may have been concrete and then converted to proxy.\n+        Output a reminder to audit relevant permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_migration_fails_due_to_duplicate_permissions(self):\n+        \"\"\"\n+        Test that migration fails gracefully when attempting to apply duplicate permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        # Attempt to create the same permission again should raise an IntegrityError\n+        with self.assertRaises(IntegrityError):\n+            Permission.objects.create(\n+                content_type=proxy_model_content_type,\n+                codename='add_proxy',\n+                name='Can add proxy',\n+            )\n+\n     def test_user_keeps_same_permissions_after_migrating_backward(self):\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..bbeb152 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -17,7 +17,8 @@ from django.apps.registry import Apps\n from django.test import SimpleTestCase\n from django.test.utils import extend_sys_path\n from django.utils import autoreload\n-from django.utils.autoreload import WatchmanUnavailable\n+from django.utils.autoreload import WatchmanUnavailable, StatReloader\n+import os\n \n from .utils import on_macos_with_hfs\n \n@@ -127,6 +128,35 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         self.addCleanup(lambda: sys.modules.pop('time_proxy', None))\n         list(autoreload.iter_all_python_module_files())  # No crash.\n \n+    def test_manage_py_detection_with_statreloader(self):\n+        \"\"\"\n+        Test that changes to manage.py are detected by StatReloader.\n+        \"\"\"\n+        # Create a temporary manage.py file\n+        manage_py = self.temporary_file('manage.py')\n+        manage_py.write_text(\"print('Initial version')\\ndef main():\\n    pass\\n\")\n+        \n+        # Simulate importing manage.py as the main module\n+        with extend_sys_path(str(manage_py.parent)):\n+            main_module = types.ModuleType('__main__')\n+            main_module.__file__ = str(manage_py)\n+            sys.modules['__main__'] = main_module\n+            self.addCleanup(lambda: sys.modules.pop('__main__', None))\n+            \n+            # Use StatReloader to track file changes\n+            reloader = StatReloader()\n+            reloader.watch_file(manage_py)\n+\n+            # Assert that the file is initially found\n+            self.assertFileFound(manage_py)\n+\n+            # Modify manage.py to simulate a change\n+            manage_py.write_text(\"print('Updated version')\\ndef main():\\n    pass\\n\")\n+            \n+            # Check if the autoreloader detects the change\n+            changed_files = reloader.code_changed()\n+            self.assertIn(manage_py, changed_files)\n+\n     def test_module_without_spec(self):\n         module = types.ModuleType('test_module')\n         del module.__spec__\n",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..957d3f1 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -10,6 +10,10 @@ from pathlib import Path\n from unittest import mock\n \n from django.core import mail\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n+from django.test import SimpleTestCase\n+import unittest.mock as mock\n from django.core.files.uploadedfile import SimpleUploadedFile\n from django.db import DatabaseError, connection\n from django.shortcuts import render\n@@ -242,7 +246,31 @@ class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n \n-    def test_handle_db_exception(self):\n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        Test that when Http404 is raised in a path converter's to_python method,\n+        a technical 404 page is shown when DEBUG is True.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    def test_technical_404_converter_with_value_error(self):\n+        \"\"\"\n+        Test that raising a ValueError in a path converter's to_python method\n+        causes the URL resolver to try the next pattern.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=ValueError):\n+            response = self.client.get('/path-post/1/')\n+            self.assertEqual(response.status_code, 404)\n+\n+    def test_path_converter_with_valid_value(self):\n+        \"\"\"\n+        Test that a valid path using the converter returns a 200 response.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', return_value=1):\n+            response = self.client.get('/path-post/1/')\n+            self.assertEqual(response.status_code, 200)\n         \"\"\"\n         Ensure the debug view works when a database exception is raised by\n         performing an invalid query and passing the exception to the debug view.\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..d91c087 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -81,9 +81,44 @@ class BinaryFieldTests(SimpleTestCase):\n         ])\n \n \n+from django.core.checks import Error\n+from django.test import SimpleTestCase\n+from django.db import models\n+from django.utils.translation import gettext_lazy as _\n+from django.utils.functional import lazy\n+from django.test.utils import isolate_apps\n+import unittest\n+from django.db import connection\n+\n @isolate_apps('invalid_models_tests')\n class CharFieldTests(SimpleTestCase):\n \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n+\n     def test_valid_field(self):\n         class Model(models.Model):\n             field = models.CharField(\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..e12bfed 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -247,12 +247,39 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n \n-    def test_serialize_lazy_objects(self):\n+    def test_serialize_enum_with_translation(self):\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        field = models.CharField(\n+            default=TranslatedEnum.GOOD,\n+            choices=[(tag, tag.name) for tag in TranslatedEnum],\n+            max_length=128\n+        )\n+\n+        serialized_string = self.serialize_round_trip(field)\n+        self.assertIn(\"default=migrations.test_writer.TranslatedEnum['GOOD']\", serialized_string)\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n \n-    def test_serialize_enums(self):\n+    def test_serialize_enum_with_translation_in_migration(self):\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        field = models.CharField(\n+            default=TranslatedEnum.GOOD,\n+            choices=[(tag, tag.name) for tag in TranslatedEnum],\n+            max_length=128\n+        )\n+\n+        migration_string = MigrationWriter.serialize(field)[0]\n+        self.assertIn(\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD']\", \n+            migration_string\n+        )\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..1dce436 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -308,6 +310,27 @@ class ETagProcessingTests(unittest.TestCase):\n \n \n class HttpDateProcessingTests(unittest.TestCase):\n+\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_two_digit_year_logic(self, mocked_datetime):\n+        # Mock current UTC time to consistently test the 50-year logic.\n+        mocked_datetime.side_effect = datetime\n+        current_year = 2023\n+        mocked_datetime.utcnow = mock.Mock(return_value=datetime(current_year, 1, 1))\n+\n+        # Test cases for RFC 850 format with two-digit years.\n+        test_cases = [\n+            ('Sunday, 01-Jan-23 00:00:00 GMT', datetime(2023, 1, 1, 0, 0, 0)),  # Current year\n+            ('Wednesday, 01-Jan-70 00:00:00 GMT', datetime(1970, 1, 1, 0, 0, 0)),  # 1970 is less than 50 years ago\n+            ('Monday, 01-Jan-50 00:00:00 GMT', datetime(2050, 1, 1, 0, 0, 0)),  # 50 years from now is future\n+            ('Saturday, 01-Jan-99 00:00:00 GMT', datetime(1999, 1, 1, 0, 0, 0)),  # 1999 should be in the past\n+            ('Thursday, 31-Dec-68 23:59:59 GMT', datetime(2068, 12, 31, 23, 59, 59)),  # 50 years in the future logic\n+        ]\n+\n+        for rfc850str, expected_date in test_cases:\n+            with self.subTest(rfc850str=rfc850str):\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n     def test_http_date(self):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..177d648 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -39,8 +39,29 @@ class Gender(models.TextChoices):\n \n     __empty__ = '(Undeclared)'\n \n-\n-class ChoicesTests(SimpleTestCase):\n+from django.db import models\n+from django.test import TestCase\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", \"The first choice, it is\"\n+    SECOND_CHOICE = \"second\", \"The second choice, it is\"\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class EnumTest(TestCase):\n+    def setUp(self) -> None:\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+    \n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n+    \n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(my_object.my_str_value, \"first\")\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..e43cbab 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -187,7 +187,30 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertEqual(WhizIterEmpty(c='').c, '')        # Empty value\n \n \n-class GetChoicesTests(SimpleTestCase):\n+class OverriddenGetFieldDisplayTests(SimpleTestCase):\n+\n+    def test_overriding_get_FIELD_display(self):\n+        \"\"\"\n+        Test if get_FOO_display can be overridden in a model.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_original_get_FIELD_display(self):\n+        \"\"\"\n+        Ensure the original get_FIELD_display behavior remains unchanged when not overridden.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'foo')\n \n     def test_empty_choices(self):\n         choices = []\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..a548c3a 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,4 @@\n+\n import pickle\n \n from django import forms\n@@ -147,8 +148,22 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+from django.test import TestCase\n \n class GetFieldDisplayTests(SimpleTestCase):\n+    \n+    def test_overriding_inherited_FIELD_display(self):\n+        class Base(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Base A')])\n+            class Meta:\n+                abstract = True\n+        \n+        class Child(Base):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Child A'), ('B', 'Child B'), ('C', 'Child C')])\n+        \n+        self.assertEqual(Child(foo='A').get_foo_display(), 'Child A')\n+        self.assertEqual(Child(foo='B').get_foo_display(), 'Child B')\n+        self.assertEqual(Child(foo='C').get_foo_display(), 'Child C')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..874c643 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,7 +76,16 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n+    def test_no_error_for_sublanguage_when_base_language_available(self):\n+        \"\"\"Test that translation.E004 is not raised for a sublanguage if the base language is available.\"\"\"\n+        with self.settings(LANGUAGE_CODE='de-at', LANGUAGES=[('de', 'German')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+\n+        with self.settings(LANGUAGE_CODE='pt-BR', LANGUAGES=[('pt', 'Portuguese')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n+\n+        with self.settings(LANGUAGE_CODE='en-au', LANGUAGES=[('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..ca41b9a 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -5,7 +6,8 @@ from django.db import DEFAULT_DB_ALIAS, connection, connections\n from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, TransactionTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n@@ -18,7 +20,45 @@ def get_connection_copy():\n     return test_connection\n \n \n-class TestDbSignatureTests(SimpleTestCase):\n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+class TestTransactionRollback(TransactionTestCase):\n+    serialized_rollback = True\n+\n+    def test_serialized_rollback_integrity(self):\n+        # Testing if serialized_rollback = True restores objects with foreign key references.\n+        ObjectReference.objects.create(obj=Object.objects.create())\n+        serialized_data = connection.creation.serialize_db_to_string()\n+\n+        # Simulate test case isolation rollback\n+        connection.creation.deserialize_db_from_string(serialized_data)\n+\n+        self.assertEqual(Object.objects.count(), 1)\n+        self.assertEqual(ObjectReference.objects.count(), 1)\n+        self.assertEqual(ObjectReference.objects.first().obj, Object.objects.first())\n     def test_default_name(self):\n         # A test db name isn't set.\n         prod_name = 'hodor'\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..01c443b 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -159,7 +159,61 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_relationship_model_with_foreign_key_to_wrong_model(self):\n+    def test_intermediary_model_with_multiple_foreign_keys(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through='AmbiguousRelationship')\n+\n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('field')\n+        expected_error = Error(\n+            \"The model is used as an intermediate model by \"\n+            \"'invalid_models_tests.Group.field', but it has more than one \"\n+            \"foreign key from 'Group', which is ambiguous. You must \"\n+            \"specify which foreign key Django should use via the \"\n+            \"through_fields keyword argument.\",\n+            hint=(\n+                'If you want to create a recursive relationship, use '\n+                'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+            ),\n+            obj=field,\n+            id='fields.E334',\n+        )\n+        self.assertEqual(field.check(from_model=Group), [expected_error])\n+\n+    def test_intermediary_model_with_wrong_hint_foreign_key(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            members = models.ManyToManyField('Person', through='IncorrectRelationship')\n+\n+        class IncorrectRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('members')\n+        expected_error = Error(\n+            \"The model is used as an intermediate model by \"\n+            \"'invalid_models_tests.Group.members', but it has more than one \"\n+            \"foreign key from 'Group', which is ambiguous. You must \"\n+            \"specify which foreign key Django should use via the \"\n+            \"through_fields keyword argument.\",\n+            hint=(\n+                'If you want to create a recursive relationship, use '\n+                'ManyToManyField(\"self\", through=\"IncorrectRelationship\").'\n+            ),\n+            obj=field,\n+            id='fields.E334',\n+        )\n+        self.assertEqual(field.check(from_model=Group), [expected_error])\n         class WrongModel(models.Model):\n             pass\n \n",
  "django__django-12700": "",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..677902b 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,6 +1759,29 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_with_unique_together(self):\n+        app_label = 'test_alintoremove_wunto'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n     @skipUnlessDBFeature('supports_table_check_constraints')\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..d5465f9 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -685,7 +685,23 @@ class FastDeleteTests(TestCase):\n         self.assertNumQueries(2, a.delete)\n         self.assertEqual(User.objects.count(), 0)\n \n-    def test_fast_delete_empty_no_update_can_self_select(self):\n+    def test_queryset_delete_no_objects_with_foreign_keys(self):\n+        \"\"\"\n+        Test QuerySet.delete() on models with foreign keys where no objects exist.\n+        The result should consistently be (0, {'model_label': 0}).\n+        \"\"\"\n+        deleted, deleted_objs = HiddenUser.objects.all().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {HiddenUser._meta.label: 0})\n+\n+    def test_queryset_delete_no_objects_without_foreign_keys(self):\n+        \"\"\"\n+        Test QuerySet.delete() on simple models without foreign keys where no objects exist.\n+        The result should consistently be (0, {'model_label': 0}).\n+        \"\"\"\n+        deleted, deleted_objs = R.objects.all().delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {R._meta.label: 0})\n         \"\"\"\n         #25932 - Fast deleting on backends that don't have the\n         `no_update_can_self_select` feature should work even if the specified\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..dcc539f 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,31 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_async_static_file_handler(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(path='/static/test_file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        # Assume test_file.txt exists and we read its content successfully.\n+        with open(TEST_STATIC_ROOT / 'test_file.txt', 'rb') as file:\n+            expected_content = file.read()\n+        self.assertEqual(response_body['body'], expected_content)\n+        await communicator.wait()\n+\n+    async def test_async_static_file_handler_not_found(self):\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        scope = self.async_request_factory._base_scope(path='/static/non_existing_file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 404)\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..85f6bdd 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -203,7 +203,20 @@ class TestUtilsText(SimpleTestCase):\n         # interning the result may be useful, e.g. when fed to Path.\n         self.assertEqual(sys.intern(text.slugify('a')), 'a')\n \n-    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_slugify_strip_dashes_and_underscores(self):\n+        items = (\n+            # given - expected - Unicode?\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            (' multiple---dash and  space ', 'multiple-dash-and-space', False),\n+            ('\\t whitespace-in-value \\n', 'whitespace-in-value', False),\n+            ('underscore_in-value', 'underscore-in-value', False),\n+            ('__strip__underscore-value___', 'strip-underscore-value', False),\n+            ('--strip-dash-value---', 'strip-dash-value', False),\n+            ('__strip-mixed-value---', 'strip-mixed-value', False),\n+            ('_ -strip-mixed-value _-', 'strip-mixed-value', False),\n+        )\n+        for value, output, is_unicode in items:\n+            self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n     def test_unescape_entities(self):\n         items = [\n             ('', ''),\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..a0b7aac 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2819,6 +2819,73 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        # Setup test data\n+        marley = Character.objects.create(username='Marley', last_action='2023-01-01')\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-01-02')\n+        \n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+        \n+        # Define model to test ForeignKey with Q object\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        # Define form for the model\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        # Create form instance\n+        form = CharacterDetailsForm()\n+        \n+        # Check no duplicates in queryset\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n+\n     def test_callable_called_each_time_form_is_instantiated(self):\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..3f4444e 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -11,7 +11,25 @@ from django.test.utils import isolate_apps\n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n-    def test_single_parent(self):\n+    def test_abstract_field_equality(self):\n+        \"\"\"Fields from different concrete models inheriting the same abstract model should not be equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritedModel1(AbstractModel):\n+            pass\n+\n+        class InheritedModel2(AbstractModel):\n+            pass\n+\n+        field1 = InheritedModel1._meta.get_field('field')\n+        field2 = InheritedModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(field1, field2)\n+        self.assertNotEqual(hash(field1), hash(field2))\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n \n@@ -347,4 +365,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..e5bbffa 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -57,7 +57,12 @@ class SiteEachContextTest(TestCase):\n         self.assertEqual(len(admin_views['models']), 1)\n         self.assertEqual(admin_views['models'][0]['object_name'], 'Article')\n \n-        # auth.User\n+        # Additional test to verify model class presence in app_list context\n+        article_model_class = ctx['available_apps'][0]['models'][0]['model']\n+        user_model_class = ctx['available_apps'][1]['models'][0]['model']\n+        \n+        self.assertEqual(article_model_class, Article)\n+        self.assertEqual(user_model_class, User)\n         auth = apps[1]\n         self.assertEqual(auth['app_label'], 'auth')\n         self.assertEqual(len(auth['models']), 1)\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..06a3beb 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,12 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .with_custom_email_field import CustomEmailField\n+from .models import CustomEmailField, IntegerUsernameUser\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,6 +40,27 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n+\n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..a38a694 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -884,6 +885,19 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ordered=False\n         )\n \n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+    def test_range_lookup_tuple(self):\n+        qs = Company.objects.filter(\n+            num_employees__range=(51, 100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n     def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..f00dafc 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -23,6 +23,8 @@ from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n@@ -38,7 +40,39 @@ SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n \n class AdminScriptTestCase(SimpleTestCase):\n-    def setUp(self):\n+    class ExecuteFromCommandLine(SimpleTestCase):\n+        def test_program_name_from_argv(self):\n+            \"\"\"\n+            Program name is computed from the execute_from_command_line()'s argv\n+            argument, not sys.argv.\n+            \"\"\"\n+            args = ['help', 'shell']\n+            with captured_stdout() as out, captured_stderr() as err:\n+                with mock.patch('sys.argv', [None] + args):\n+                    execute_from_command_line(['django-admin'] + args)\n+            self.assertIn('usage: django-admin shell', out.getvalue())\n+            self.assertEqual(err.getvalue(), '')\n+\n+        def test_program_name_with_custom_argv(self):\n+            \"\"\"\n+            Test that a custom program name is used when provided in argv.\n+            \"\"\"\n+            args = ['help']\n+            with captured_stdout() as out, captured_stderr() as err:\n+                with mock.patch('sys.argv', ['incorrect_program_name'] + args):\n+                    execute_from_command_line(['custom-program'] + args)\n+            self.assertIn('usage: custom-program help', out.getvalue())\n+            self.assertEqual(err.getvalue(), '')\n+\n+        def test_program_name_with_empty_argv(self):\n+            \"\"\"\n+            Test behavior when argv is empty.\n+            \"\"\"\n+            with captured_stdout() as out, captured_stderr() as err:\n+                with mock.patch('sys.argv', [None]):\n+                    execute_from_command_line(['django-admin'])\n+            self.assertIn('usage: django-admin help', out.getvalue())\n+            self.assertEqual(err.getvalue(), '')\n         tmpdir = tempfile.TemporaryDirectory()\n         self.addCleanup(tmpdir.cleanup)\n         # os.path.realpath() is required for temporary directories on macOS,\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..414cb17 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -7,8 +8,50 @@ from django.core.management import CommandError, call_command\n from django.test import SimpleTestCase\n from django.test.utils import captured_stdin, captured_stdout\n \n+from django.utils import six\n \n class ShellCommandTestCase(SimpleTestCase):\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n \n     def test_command_option(self):\n         with self.assertLogs('test', 'INFO') as cm:\n@@ -49,4 +92,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..6cbd802 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -1013,7 +1013,23 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertContains(response, 'Add another Model with both - name')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n \n-    def test_both_verbose_names_inline(self):\n+    def test_verbose_name_as_plural_automatic(self):\n+        class OnlyVerboseProfileInline(TabularInline):\n+            model = Profile\n+            verbose_name = 'Only Verbose Child'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [OnlyVerboseProfileInline]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+\n+        # Test that the plural is automatically derived from the verbose_name\n+        self.assertContains(response, '<h2>Only Verbose Childs</h2>')\n+        self.assertContains(response, 'Add another Only Verbose Child')\n+        self.assertNotContains(response, '<h2>Profiles</h2>')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name = 'Non-verbose childs - name'\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..b0ff2d7 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -596,6 +596,16 @@ class TestQuerying(TestCase):\n         )\n \n     def test_isnull_key_or_none(self):\n+        # Test with key 'j' to ensure isnull=True does not match JSON null\n+        # Specifically for SQLite and Oracle\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=False),\n+            [self.objs[4]],\n+        )\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),\n",
  "django__django-13768": "",
  "django__django-13925": "",
  "django__django-13933": "",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..ac2d170 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -549,7 +550,28 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child(self):\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey()\n+            child = ChildStringPrimaryKeyParent()\n+            child.parent = parent\n+            child.parent.name = 'alice'\n+            parent.save()\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_before_parent_with_non_numeric_pk_set_on_child(self):\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey(name='bob')\n+            parent.save()\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            child.save()\n+            self.assertTrue(ChildStringPrimaryKeyParent.objects.filter(parent=parent).exists())\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, parent.name)\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..510c973 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -16,6 +17,14 @@ class QTests(SimpleTestCase):\n         self.assertEqual(q | Q(), q)\n         self.assertEqual(Q() | q, q)\n \n+    def test_q_object_with_non_pickleable_dict_keys(self):\n+        # Testing Q object creation with dict_keys\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..94c8fee 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -25,6 +25,16 @@ from django.db.models.functions import (\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from .models import Product\n+\n+...\n+\n+class BasicExpressionsTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.product = Product.objects.create(name=\"Sample Product\")\n+\n+from django.db.models import Exists, OuterRef, Q\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n@@ -794,7 +804,18 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n-    def test_boolean_expression_combined(self):\n+    def test_q_exists_and_commutativity(self):\n+        is_product = Product.objects.filter(name=OuterRef('name'))\n+        tests = [\n+            (Q(name=\"Sample Product\") & Exists(is_product)),\n+            (Exists(is_product) & Q(name=\"Sample Product\")),\n+            (Q(name=\"Sample Product\") | Exists(is_product)),\n+            (Exists(is_product) | Q(name=\"Sample Product\")),\n+        ]\n+        expected_result = [self.product]\n+        for conditions in tests:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Product.objects.filter(conditions), expected_result)\n         is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n",
  "django__django-14155": "",
  "django__django-14238": "",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..55a8327 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2217,7 +2217,35 @@ class StartApp(AdminScriptTestCase):\n             \"won't replace conflicting files.\"\n         )\n \n-    def test_template(self):\n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        \"\"\"\n+        Test startapp with a trailing slash in the target app directory name.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app1')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app1', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n+    def test_trailing_slash_in_nested_directory_name(self):\n+        \"\"\"\n+        Test startapp with a trailing slash in a nested target directory name.\n+        \"\"\"\n+        nested_dir = os.path.join(self.test_dir, 'projects', 'project1', 'app2/')\n+        os.makedirs(os.path.dirname(nested_dir))\n+        _, err = self.run_django_admin(['startapp', 'app2', nested_dir])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(nested_dir, 'apps.py')), True)\n+\n+    def test_multiple_trailing_slashes_in_directory_name(self):\n+        \"\"\"\n+        Test startapp with multiple trailing slashes in the directory name.\n+        \"\"\"\n+        multi_slash_dir = os.path.join(self.test_dir, 'apps', 'app3///')\n+        os.makedirs(multi_slash_dir.rstrip('/'))\n+        _, err = self.run_django_admin(['startapp', 'app3', multi_slash_dir])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(multi_slash_dir.rstrip('/'), 'apps.py')), True)\n         out, err = self.run_django_admin(['startapp', 'new_app'])\n         self.assertNoOutput(err)\n         app_path = os.path.join(self.test_dir, 'new_app')\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..f7110b8 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,6 +1,7 @@\n import datetime\n import re\n from unittest import mock\n+from django.forms import forms\n \n from django.contrib.auth.forms import (\n     AdminPasswordChangeForm, AuthenticationForm, PasswordChangeForm,\n@@ -1020,6 +1021,17 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_password_hash_widget_label(self):\n+        \"\"\"\n+        Test that ReadOnlyPasswordHashWidget's label does not have a 'for' attribute.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+        self.assertEqual(bound_field.label_tag(), '<label>Hash field:</label>')\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..9703051 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -655,6 +655,25 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(result.args, value.args)\n         self.assertEqual(result.keywords, value.keywords)\n \n+    def test_missing_import_in_migration(self):\n+        \"\"\"\n+        Test for missing import statement in migration file.\n+        \"\"\"\n+        fields = [\n+            ('name', models.TextField(primary_key=True)),\n+        ]\n+\n+        with self.assertRaises(NameError) as context:\n+            migrations.CreateModel(\n+                name='MyModel',\n+                fields=fields,\n+                options={\n+                    'abstract': False,\n+                },\n+                bases=(app.models.MyMixin, models.Model),\n+            )\n+        self.assertIn(\"name 'models' is not defined\", str(context.exception))\n+\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..781e108 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -982,7 +982,37 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        self.assertEqual(\n+            formset.non_form_errors(),\n+            ['You may only specify a drink once.'],\n+            msg=\"Ensure 'nonform' CSS class is applied correctly to non-form errors.\"\n+        )\n+\n+    def test_formset_nonform_css_class_applied(self):\n+        \"\"\"\n+        Test that the 'nonform' CSS class is correctly applied to non-form errors.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '3',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '0',\n+            'choices-0-choice': 'One',\n+            'choices-0-votes': '1',\n+            'choices-1-choice': 'Two',\n+            'choices-1-votes': '2',\n+            'choices-2-choice': '',\n+            'choices-2-votes': '',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(\n+            str(non_form_errors),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>',\n+            msg=\"Non-form error should have 'nonform' CSS class.\"\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..1f0925c 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -31,6 +31,20 @@ class M2mThroughTests(TestCase):\n             attrgetter(\"name\")\n         )\n \n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        \"\"\"\n+        Test that the 'through_fields' attribute in a ManyToManyField\n+        remains hashable and consistent across inherited models.\n+        \"\"\"\n+        person_m2m = Person._meta.get_field('events_invited')\n+        self.assertEqual(person_m2m.through_fields, ('event', 'invitee'))\n+\n+        person_child_m2m = PersonChild._meta.get_field('events_invited')\n+        self.assertEqual(person_child_m2m.through_fields, ('event', 'invitee'))\n+\n+        # Ensure that the ManyToManyFields are hashable and their hashes are equal\n+        self.assertEqual(hash(person_m2m), hash(person_child_m2m))\n+\n     def test_get_on_intermediate_model(self):\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..1d64b37 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -294,7 +294,54 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n         })\n \n \n-@override_settings(ROOT_URLCONF='admin_views.urls')\n+class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+    def serialize_result(self, obj, to_field_name):\n+        return {\n+            **super().serialize_result(obj, to_field_name),\n+            'posted': str(obj.posted),\n+        }\n+\n+class AutocompleteJsonViewTests(SimpleTestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='superuser@example.com',\n+        )\n+        self.url = '/admin/autocomplete/'\n+        self.opts = {}\n+\n+    def test_serialize_result(self):\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view()(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n+    def test_result_with_empty_term(self):\n+        request = self.factory.get(self.url, {'term': '', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view()(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+    def test_pagination(self):\n+        for i in range(25):\n+            Question.objects.create(question=f'Question {i}', posted=datetime.date(2021, 8, i%30+1))\n+\n+        request = self.factory.get(self.url, {'term': 'Question', 'page': '2', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view()(request)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertTrue(data['pagination']['more'])\n class SeleniumTests(AdminSeleniumTestCase):\n     available_apps = ['admin_views'] + AdminSeleniumTestCase.available_apps\n \n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..5d64fc6 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -412,7 +412,8 @@ class MethodDecoratorTests(SimpleTestCase):\n \n     def test_invalid_method_name_to_decorate(self):\n         \"\"\"\n-        @method_decorator on a nonexistent method raises an error.\n+from functools import wraps, partial\n+from django.utils.decorators import method_decorator\n         \"\"\"\n         msg = (\n             \"The keyword argument `name` must be the name of a method of the \"\n@@ -421,10 +422,39 @@ class MethodDecoratorTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             @method_decorator(lambda: None, name='nonexistent_method')\n             class Test:\n-                @classmethod\n                 def __module__(cls):\n                     return \"tests\"\n \n+    def test_method_decorator_preserves_wrapper_assignments_with_partial(self):\n+        \"\"\"\n+        Ensure method_decorator correctly preserves attributes with partial objects.\n+        \"\"\"\n+\n+        def logger(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                try:\n+                    result = func(*args, **kwargs)\n+                except Exception as e:\n+                    result = str(e)\n+                finally:\n+                    print(f\"{func.__name__} called with args: {args} and kwargs: {kwargs} resulting: {result}\")\n+                return result\n+            return inner\n+\n+        class Test:\n+            @method_decorator(logger)\n+            def hello_world(self):\n+                return \"hello\"\n+\n+        # Creating a partial object\n+        partial_func = partial(Test().hello_world)\n+        \n+        # While calling, the partial object should retain the __name__ attribute\n+        result = partial_func()\n+        self.assertEqual(partial_func.__name__, 'inner')\n+        self.assertEqual(result, \"hello\")\n+\n \n class XFrameOptionsDecoratorsTests(TestCase):\n     \"\"\"\n",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..3e0fa7e 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +343,31 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_hashable_in_dict(self):\n+        # Test that ModelChoiceIteratorValue can be used as a key in a dictionary\n+        test_dict = {}\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        test_dict[value_1] = \"test_value\"\n+        self.assertIn(value_1, test_dict)\n+        self.assertEqual(test_dict[value_1], \"test_value\")\n+\n+    def test_eq_with_different_instances(self):\n+        # Test equality with different instances but same value\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c1.pk, None)\n+        self.assertEqual(value_1, value_2)\n+\n+    def test_not_eq_different_values(self):\n+        # Test non-equality with different values\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        self.assertNotEqual(value_1, value_2)\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..a900627 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -154,7 +154,13 @@ class MultiValueFieldTest(SimpleTestCase):\n             \"\"\",\n         )\n \n-    def test_form_as_table_data(self):\n+    def test_multivaluefield_label_without_index(self):\n+        form = ComplexFieldForm()\n+        form_output = form.as_table()\n+        self.assertInHTML('<label for=\"id_field1_0\">Field1:</label>', form_output)\n+        self.assertNotIn('<label for=\"id_field1\">Field1:</label>', form_output)\n+        self.assertInHTML('<input type=\"text\" name=\"field1_0\" id=\"id_field1_0\" required>', form_output)\n+        self.assertInHTML('<select multiple name=\"field1_1\" id=\"id_field1_1\" required>', form_output)\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n             'field1_1': ['J', 'P'],\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..a4b7f4e 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -70,7 +70,14 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # IPv6.\n             ('http://[12:34::3a53]/', 'http://[12:34::3a53]/'),\n             ('http://[a34:9238::]:8080/', 'http://[a34:9238::]:8080/'),\n+            # Test for issue: URLField should raise ValidationError not ValueError\n+            ('////]@N.AN',),\n         ]\n+        msg = \"'Enter a valid URL.'\"\n+        for url, expected in tests:\n+            with self.subTest(url=url):\n+                with self.assertRaisesMessage(ValidationError, msg):\n+                    f.clean(url)\n         for url, expected in tests:\n             with self.subTest(url=url):\n                 self.assertEqual(f.clean(url), expected)\n@@ -100,8 +107,15 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # even on domains that don't fail the domain label length check in\n             # the regex.\n             'http://%s' % (\"X\" * 200,),\n+            # Test for issue: URLField should raise ValidationError not ValueError\n+            ('////]@N.AN',),\n         ]\n         msg = \"'Enter a valid URL.'\"\n+        for url, expected in tests:\n+            with self.subTest(url=url):\n+                with self.assertRaisesMessage(ValidationError, msg):\n+                    f.clean(url)\n+        msg = \"'Enter a valid URL.'\"\n         for value in tests:\n             with self.subTest(value=value):\n                 with self.assertRaisesMessage(ValidationError, msg):\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..0ab5e75 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -210,6 +210,26 @@ class NonAggregateAnnotationTestCase(TestCase):\n         self.assertEqual(len(books), Book.objects.count())\n         self.assertTrue(all(not book.selected for book in books))\n \n+    def test_full_expression_annotation(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_full_expression_annotation_with_aggregation(self):\n+        qs = Book.objects.filter(isbn='159059725').annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            rating_count=Count('rating'),\n+        )\n+        self.assertEqual([book.rating_count for book in qs], [1])\n+\n+    def test_aggregate_over_full_expression_annotation(self):\n+        qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(qs['selected__sum'], Book.objects.count())\n+\n     def test_empty_queryset_annotation(self):\n         qs = Author.objects.annotate(\n             empty=Subquery(Author.objects.values('id').none())\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..c9b42f0 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -142,8 +143,17 @@ class CookieTests(BaseTests, SimpleTestCase):\n         encoded = storage._encode(messages)\n         for illegal in non_compliant_chars:\n             self.assertEqual(encoded.find(illegal), -1)\n-\n-    def test_json_encoder_decoder(self):\n+    \n+    def test_message_extra_tags_serialization(self):\n+        \"\"\"\n+        Test that extra_tags is correctly serialized and deserialized, especially\n+        when it is an empty string.\n+        \"\"\"\n+        storage = self.get_storage()\n+        message = Message(constants.DEBUG, 'Test message', extra_tags='')\n+        encoded = storage._encode(message)\n+        decoded_message = storage._decode(encoded)\n+        self.assertEqual(decoded_message.extra_tags, '')\n         \"\"\"\n         A complex nested data structure containing Message\n         instances is properly encoded/decoded by the custom JSON\n",
  "django__django-15388": "",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..6f6fff9 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,12 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        An empty string for the If-Modified-Since header should not raise an exception and should return True.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..6e78009 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -7,6 +8,7 @@ from admin_scripts.tests import AdminScriptTestCase\n from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n+from argparse import ArgumentDefaultsHelpFormatter\n from django.core.management import BaseCommand, CommandError, find_commands\n from django.core.management.utils import (\n     find_command,\n@@ -411,7 +413,17 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_custom_formatter_class(self):\n+        \"\"\"Test that BaseCommand.create_parser sets custom formatter_class if provided.\"\"\"\n+        epilog = \"Example usage: ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\"\n+        parser = BaseCommand().create_parser(\n+            \"prog_name\",\n+            \"subcommand\",\n+            epilog=epilog,\n+            formatter_class=ArgumentDefaultsHelpFormatter,\n+        )\n+        self.assertEqual(parser.formatter_class, ArgumentDefaultsHelpFormatter)\n+        self.assertIn(\"Example usage:\", parser.epilog)\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..cfb1da5 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,5 +1,8 @@\n+\n import os\n from datetime import datetime\n+from django.core.serializers.json import DjangoJSONEncoder\n+import json\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n@@ -217,7 +220,32 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return json.dumps({\"custom\": \"encoder\"}, cls=DjangoJSONEncoder)\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"custom\": \"encoder\"}</script>',\n+        )\n+\n+    def test_json_script_with_default_encoder(self):\n+        default_output = json_script({\"key\": \"value\"})\n+        self.assertHTMLEqual(\n+            default_output,\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n+\n+    def test_json_script_with_id_and_custom_encoder(self):\n+        class CustomEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"hello\": \"world with id\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, element_id=\"test_id\", encoder=CustomEncoder),\n+            '<script id=\"test_id\" type=\"application/json\">{\"hello\": \"world with id\"}</script>',\n+        )\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..c9a7fb2 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -186,7 +186,21 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 ],\n             )\n \n-    def test_template_tags_with_different_library_name(self):\n+    @override_settings(\n+        INSTALLED_APPS=[\n+            \"check_framework.template_test_apps.same_tags_app_1\",\n+            \"check_framework.template_test_apps.same_tags_app_1\"\n+        ]\n+    )\n+    def test_template_tags_same_library_in_installed_apps_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"same_tags\", \"same_tags_app_1.templatetags.same_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n         with self.settings(\n             TEMPLATES=[\n                 self.get_settings(\n@@ -206,4 +220,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..a49dc8f 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -399,6 +399,53 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n+from django.test import TestCase\n+from django.db import models\n+from django.core.management import call_command\n+\n+# Assuming these models exist in the relevant models module\n+# class CustomModel(models.Model):\n+#     name = models.CharField(max_length=16)\n+# class ProxyCustomModel(CustomModel):\n+#     class Meta:\n+#         proxy = True\n+# class AnotherModel(models.Model):\n+#     custom = models.ForeignKey(\n+#         ProxyCustomModel,\n+#         on_delete=models.SET_NULL,\n+#         null=True,\n+#         blank=True,\n+#     )\n+\n+class ProxyModelTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.custom_model = CustomModel.objects.create(name=\"Test\")\n+        cls.proxy_custom_model = ProxyCustomModel.objects.create(name=\"Proxy Test\")\n+        cls.another_model = AnotherModel.objects.create(custom=cls.proxy_custom_model)\n+\n+    def test_select_related_only_on_proxy_model(self):\n+        # This test targets the original issue described\n+        try:\n+            qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+            objs = list(qs.all())\n+            self.assertEqual(len(objs), 1)\n+        except ValueError as e:\n+            self.fail(f\"select_related with only() on proxy model raised an exception: {e}\")\n+\n+    def test_select_related_only_on_proxy_model_non_existent_field(self):\n+        # Testing behavior when a non-existent field is used\n+        with self.assertRaises(FieldError):\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__non_existent_field\").all())\n+\n+    def test_select_related_only_on_proxy_model_without_foreign_key(self):\n+        # Test when no related object is present\n+        another_model_no_fk = AnotherModel.objects.create(custom=None)\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        objs = list(qs.all())\n+        self.assertEqual(len(objs), 2)  # Previous + this one\n+        self.assertIn(another_model_no_fk, objs)\n+\n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..6334c32 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,7 +157,11 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n-    @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n+    def test_parameters_reordered(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n+        )\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n \n@@ -183,4 +187,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..450ebf5 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1901,6 +1901,27 @@ class AllValidTests(SimpleTestCase):\n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        from django.utils.deprecation import RemovedInDjango50Warning\n+        from django.test.utils import isolate_lru_cache\n+        from django.forms import formset_factory, BaseFormSet, ChoiceField, Form\n+        \n+        class Choice(Form):\n+            choice = ChoiceField(choices=[('option1', 'Option 1'), ('option2', 'Option 2')])\n+\n+        def test_no_management_form_warning(self):\n+            \"\"\"\n+            Test to ensure that rendering a management form does not trigger\n+            the deprecation warning for default.html since it only produces\n+            hidden inputs and doesn't involve the deprecated template.\n+            \"\"\"\n+            with isolate_lru_cache(get_default_renderer), self.settings(\n+                FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+            ):\n+                ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+                formset = ChoiceFormSet()\n+                with self.assertRaises(AssertionError):\n+                    with self.assertRaisesMessage(RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG):\n+                        str(formset.management_form)\n \n         with isolate_lru_cache(get_default_renderer), self.settings(\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n@@ -1909,4 +1930,4 @@ class DeprecationTests(SimpleTestCase):\n         ):\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            str(formset)\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..d1cd638 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -173,6 +173,18 @@ class FormsFormsetTestCase(SimpleTestCase):\n             self.assertTrue(hasattr(form, \"custom_kwarg\"))\n             self.assertEqual(form.custom_kwarg, i)\n \n+    def test_empty_permitted_ignored_empty_form(self):\n+        # Import necessary components for the test\n+        from django.forms import modelformset_factory\n+        from .models import MyModel\n+        \n+        # Create a formset with empty_permitted in form_kwargs\n+        FormSet = modelformset_factory(MyModel, fields=['a_field'])\n+        formset = FormSet(queryset=MyModel.objects.none(), form_kwargs={\"empty_permitted\": False})\n+        \n+        # Check if the empty_form does not crash and defaults to True for empty_permitted\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n     def test_form_kwargs_empty_form(self):\n         FormSet = formset_factory(CustomKwargForm)\n         formset = FormSet(form_kwargs={\"custom_kwarg\": 1})\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..38ddd34 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,17 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_empty(self):\n+        # Test with empty string\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        # Test with None\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+        # Test with zero number\n+        self.assertEqual(nformat(0, \".\"), \"0\")\n+        # Test with negative zero\n+        self.assertEqual(nformat(-0.0, \".\"), \"0\")\n+        # Test with a floating point close to zero\n+        self.assertEqual(nformat(0.0, \".\"), \"0\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..2c1ff95 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,6 +25,7 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+from django.urls import reverse\n from django.utils.translation import gettext as _\n \n from .models.custom_user import (\n@@ -892,7 +894,25 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n-    def test_custom_form(self):\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.create_user(username=\"testclient\", password=\"testpassword\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        expected_pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, expected_pw_change_url)\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n                 model = ExtensionUser\n",
  "django__django-16255": "",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..20c8c7e 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,6 +1,9 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n+from unittest import mock\n+from django.core.cache import cache\n import io\n import os\n import pickle\n@@ -1755,7 +1758,43 @@ class FileBasedCacheTests(BaseCacheTests, TestCase):\n             with self.assertRaises(OSError):\n                 cache.get(\"foo\")\n \n-    def test_empty_cache_file_considered_expired(self):\n+    def test_has_key_race_handling(self):\n+        # Ensure the key is initially added\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        \n+        # Simulate the race condition by mocking open to raise FileNotFoundError\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mocked_open.assert_called_once()\n+    \n+    def test_has_key_with_expired_file(self):\n+        key = \"expired_key\"\n+        cache.add(key, \"value\", timeout=-1)  # Add an expired cache key\n+        \n+        # Test that has_key returns False for an expired file\n+        self.assertIs(cache.has_key(key), False)\n+    \n+    def test_concurrent_access(self):\n+        key = \"concurrent_key\"\n+        cache.add(key, \"value\")\n+        \n+        def access_cache():\n+            # Access the key concurrently\n+            return cache.has_key(key)\n+        \n+        # Create multiple threads to access the cache simultaneously\n+        threads = [threading.Thread(target=access_cache) for _ in range(10)]\n+        \n+        # Start threads\n+        for thread in threads:\n+            thread.start()\n+        \n+        # Join threads to ensure completion\n+        for thread in threads:\n+            thread.join()\n+        \n+        # Check if the key still exists after concurrent access\n+        self.assertIs(cache.has_key(key), True)\n         cache_file = cache._key_to_file(\"foo\")\n         with open(cache_file, \"wb\") as fh:\n             fh.write(b\"\")\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..c2ded0b 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_user_model, get_permission_codename\n+from .tests import get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n@@ -33,6 +36,42 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n+    def test_submit_row_save_as_new_permissions(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' is correctly displayed based on permissions.\n+        \"\"\"\n+        User = get_user_model()\n+\n+        # User with change permission only\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with add and change permissions\n+        add_change_user = User.objects.create_user(\n+            username=\"add_change_user\", password=\"secret\", is_staff=True\n+        )\n+        add_change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request.user = add_change_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_show_save_and_add_another(self):\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..44a2c4f 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -27,6 +28,20 @@ class JoinTests(SimpleTestCase):\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n \n     # Joining with unsafe joiners doesn't result in unsafe strings.\n+\n+    @setup({\"join09\": '{% autoescape off %}{{ a|join:var }}{% endautoescape %}'})\n+    def test_join_autoescape_off_with_unescaped_joiner(self):\n+        output = self.engine.render_to_string(\n+            \"join09\", {\"a\": [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"], \"var\": \"<br/>\"}\n+        )\n+        self.assertEqual(output, \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\")\n+\n+    @setup({\"join10\": '{% autoescape on %}{{ a|join:var }}{% endautoescape %}'})\n+    def test_join_autoescape_on_with_escaped_joiner(self):\n+        output = self.engine.render_to_string(\n+            \"join10\", {\"a\": [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"], \"var\": \"<br/>\"}\n+        )\n+        self.assertEqual(output, \"<p>Hello World!</p>&lt;br/&gt;beta &amp; me&lt;br/&gt;<script>Hi!</script>\")\n     @setup({\"join05\": \"{{ a|join:var }}\"})\n     def test_join05(self):\n         output = self.engine.render_to_string(\n@@ -78,4 +93,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..6f338b2 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -569,6 +569,52 @@ class BulkCreateTests(TestCase):\n                 unique_fields=[\"big_auto_fields\"],\n             )\n \n+    def _test_bulk_create_returning_ids(self, ModelClass, objects, unique_fields, update_fields):\n+        results = ModelClass.objects.bulk_create(\n+            objects,\n+            update_conflicts=True,\n+            unique_fields=unique_fields,\n+            update_fields=update_fields,\n+        )\n+        self.assertEqual(len(results), len(objects))\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+\n+    @skipUnlessDBFeature(\n+        \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n+    )\n+    def test_bulk_create_returning_ids_two_fields(self):\n+        initial_objects = [\n+            TwoFields(f1=1, f2=1, name=\"a\"),\n+            TwoFields(f1=2, f2=2, name=\"b\"),\n+        ]\n+        TwoFields.objects.bulk_create(initial_objects)\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"c\"),\n+            TwoFields(f1=2, f2=2, name=\"d\"),\n+        ]\n+        self._test_bulk_create_returning_ids(\n+            TwoFields, conflicting_objects, [\"f1\"], [\"name\"]\n+        )\n+\n+    @skipUnlessDBFeature(\n+        \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n+    )\n+    def test_bulk_create_returning_ids_upsert_conflict(self):\n+        initial_objects = [\n+            UpsertConflict(number=1, rank=1, name=\"John\"),\n+            UpsertConflict(number=2, rank=2, name=\"Mary\"),\n+        ]\n+        UpsertConflict.objects.bulk_create(initial_objects)\n+        conflicting_objects = [\n+            UpsertConflict(number=1, rank=4, name=\"Steve\"),\n+            UpsertConflict(number=2, rank=2, name=\"Olivia\"),\n+        ]\n+        self._test_bulk_create_returning_ids(\n+            UpsertConflict, conflicting_objects, [\"number\"], [\"name\", \"rank\"]\n+        )\n+\n     def _test_update_conflicts_two_fields(self, unique_fields):\n         TwoFields.objects.bulk_create(\n             [\n@@ -816,4 +862,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..1706a42 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -210,8 +210,24 @@ class WriterTests(SimpleTestCase):\n     class NestedChoices(models.TextChoices):\n         X = \"X\", \"X value\"\n         Y = \"Y\", \"Y value\"\n+    class NestedProfile(models.Model):\n+        class Capability(models.TextChoices):\n+            BASIC = \"BASIC\", \"Basic\"\n+            PROFESSIONAL = \"PROFESSIONAL\", \"Professional\"\n \n-    def safe_exec(self, string, value=None):\n+            @classmethod\n+            def default(cls) -> list[str]:\n+                return [cls.BASIC]\n+\n+    def test_serialize_nested_class_method_as_default(self):\n+        field = models.JSONField(default=self.NestedProfile.Capability.default)\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"models.JSONField(default=migrations.test_writer.WriterTests.NestedProfile.Capability.default)\"\n+        )\n+        self.assertIn(\"import migrations.test_writer\", imports)\n+        self.serialize_round_trip(field)\n         d = {}\n         try:\n             exec(string, globals(), d)\n@@ -1032,4 +1048,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..088c05d 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1120,6 +1120,32 @@ def test_range_slider(orientation):\n     assert_allclose(slider.val, [0.1, 0.34])\n \n \n+def test_range_slider_initial_value():\n+    fig, ax = plt.subplots()\n+\n+    # Test initializing RangeSlider with valinit that caused an error before fix\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"Threshold\", valmin=-1, valmax=1, valinit=[0.0, 0.0]\n+    )\n+\n+    # Ensure the initial values are set correctly\n+    assert_allclose(slider.val, (0.0, 0.0))\n+\n+    # Try setting new values to ensure slider still works after initialization\n+    slider.set_val((0.2, 0.6))\n+    assert_allclose(slider.val, (0.2, 0.6))\n+\n+    slider.set_val((0.6, 0.2))\n+    assert_allclose(slider.val, (0.2, 0.6))\n+\n+    slider.set_val((-1, 10))\n+    assert_allclose(slider.val, (-1, 1))\n+\n+    # Reset and ensure it goes back to initial values\n+    slider.reset()\n+    assert_allclose(slider.val, [0.0, 0.0])\n+\n+\n def check_polygon_selector(event_sequence, expected_result, selections_count,\n                            **kwargs):\n     \"\"\"\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..66150d7 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -508,7 +508,28 @@ def test_rcparams_reset_after_fail():\n         assert mpl.rcParams['text.usetex'] is False\n \n \n+import pytest\n+import sys\n+import matplotlib.pyplot as plt\n+from matplotlib import rc_context, get_backend\n+\n @pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n+\n+def test_get_backend_does_not_clear_figures_created_in_rc_context():\n+    # Ensure the backend is different from this arbitrary module\n+    assert mpl.rcParams['backend'] != 'module://aardvark'\n+    \n+    # Create a figure within an rc_context and check the figures before and after get_backend\n+    with rc_context():\n+        fig1 = plt.figure()\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    assert before == after, f'Figures were cleared: Before: {before}, After: {after}'\n+\n+    # Clean up the figure created\n+    plt.close(fig1)\n def test_backend_fallback_headless(tmpdir):\n     env = {**os.environ,\n            \"DISPLAY\": \"\", \"WAYLAND_DISPLAY\": \"\",\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..b8e85ba 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,7 +21,19 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d_projection(fig_test, fig_ref):\n+    # Create a 3D subplot and set visibility to False\n+    ax_test = fig_test.add_subplot(111, projection='3d')\n+    ax_test.scatter([1], [1], [1])\n+    ax_test.set_visible(False)\n+\n+    # Create a reference 3D subplot without any plot (fully invisible)\n+    ax_ref = fig_ref.add_subplot(111, projection='3d')\n+    ax_ref.set_visible(False)\n+\n+    # Both figures should be the same as the ax_test should be invisible\n+    # and not affect the output image.\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..9bfdb04 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,7 +774,26 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n-def test_get_set_draggable():\n+@pytest.mark.parametrize('draggable', [True, False])\n+def test_legend_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test_line')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n+\n+def test_legend_default_draggable_state():\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test_line')\n+    leg = ax.legend()\n+    assert not leg.get_draggable()\n+\n+def test_legend_draggable_interaction_with_other_params():\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test_line')\n+    leg = ax.legend(draggable=True, loc='upper right', fontsize='small')\n+    assert leg.get_draggable() is True\n+    assert leg.get_texts()[0].get_fontsize() == plt.rcParams[\"legend.fontsize\"]\n+    assert leg._loc_used_default is False\n     legend = plt.legend()\n     assert not legend.get_draggable()\n     legend.set_draggable(True)\n",
  "matplotlib__matplotlib-23964": "",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..d746b99 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,23 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+import pytest\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+@pytest.mark.parametrize('constrained_layout', [True, False])\n+def test_user_warning_with_constrained_layout_false(constrained_layout):\n+    a = np.linspace(0, 2*np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=constrained_layout)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+    if not constrained_layout:\n+        with pytest.warns(UserWarning, match=\"This figure was using a layout engine that is incompatible with subplots_adjust\"):\n+            plt.subplots_adjust(wspace=0)\n+    else:\n+        with pytest.raises(UserWarning):\n+            plt.subplots_adjust(wspace=0)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 64ba766..7b0764c 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -5731,8 +5731,50 @@ def test_set_get_ticklabels():\n     ax[1].set_xticklabels(ax[0].get_xticklabels())\n     ax[1].set_yticklabels(ax[0].get_yticklabels())\n \n+import pytest\n+import matplotlib.pyplot as plt\n \n-@check_figures_equal(extensions=[\"png\"])\n+def test_set_ticks_kwargs_raise_error_without_labels():\n+    \"\"\"\n+    When labels=None and any kwarg is passed, axis.set_ticks() raises a\n+    ValueError.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    with pytest.raises(ValueError):\n+        ax.xaxis.set_ticks(ticks, alpha=0.5)\n+\n+def test_set_ticks_with_valid_labels_and_kwargs():\n+    \"\"\"\n+    Ensure that providing both valid labels and kwargs does not raise an error\n+    and applies the kwargs correctly.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    labels = ['one', 'two', 'three']\n+    # Should not raise an error\n+    ax.xaxis.set_ticks(ticks, labels=labels, fontsize=10)\n+    for label in ax.get_xticklabels():\n+        assert label.get_fontsize() == 10\n+\n+def test_set_ticks_with_empty_labels_and_kwargs():\n+    \"\"\"\n+    Ensure that providing empty labels list and kwargs raises an error.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    labels = []\n+    with pytest.raises(ValueError):\n+        ax.xaxis.set_ticks(ticks, labels=labels, fontsize=10)\n+\n+def test_set_ticks_no_kwargs_no_labels():\n+    \"\"\"\n+    Ensure that providing no kwargs and no labels does not raise an error.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    # Should not raise an error\n+    ax.xaxis.set_ticks(ticks)\n def test_set_ticks_with_labels(fig_test, fig_ref):\n     \"\"\"\n     Test that these two are identical::\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..81d9653 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -30,7 +30,20 @@ def test_create_lookup_table(N, result):\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n \n-def test_resampled():\n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+\n+@pytest.mark.parametrize(\"test_input\", [257, 256, 258])\n+def test_numpy_uint8_deprecation_warning(test_input):\n+    cm = plt.get_cmap(\"viridis\")\n+    with pytest.warns(None) as record:  # We use None to catch any warning\n+        cm(np.array([test_input], dtype=np.uint8))\n+\n+    # Check that no warnings of type DeprecationWarning were raised\n+    assert not any(item.category is DeprecationWarning for item in record)\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n     here we test the method for LinearSegmentedColormap as well.\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..876c535 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,28 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+def test_draggable_legend_pickle():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+    ax.plot(time, speed, label=\"speed\")\n+\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    # Pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure that FigureCanvasAgg is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Unpickle the figure\n+    loaded = pickle.loads(pkl)\n+    assert loaded is not None\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..c1c76cf 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,32 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n \n-@mpl.style.context(\"default\")\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Align labels, which was causing the issue\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        # Unpickle to ensure it works correctly\n+        loaded_fig = pickle.loads(pickle_data)\n+        loaded_fig.canvas.draw()  # Ensure the unpickled figure can be drawn\n+    except Exception as e:\n+        assert False, f\"Pickling failed with exception: {e}\"\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..ec66bc4 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,4 +1,5 @@\n \n+\n import numpy as np\n import pandas as pd\n \n@@ -8,9 +9,32 @@ from numpy.testing import assert_array_equal, assert_array_almost_equal\n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n \n+from pandas.testing import assert_frame_equal\n \n class TestPolyFit:\n \n+    def test_missing_data_handling(self):\n+        data_with_nan = pd.DataFrame({\n+            \"x\": [1, 2, 3, np.nan, 4, 5],\n+            \"y\": [1, 4, 9, 16, 25, np.nan],\n+            \"group\": [1, 1, 1, 1, 1, 1]\n+        })\n+\n+        groupby = GroupBy([\"group\"])\n+\n+        # Result with missing data\n+        result_with_nan = PolyFit()(data_with_nan, groupby, \"x\", {})\n+\n+        # Drop missing data and compute result\n+        clean_data = data_with_nan.dropna()\n+        expected_result = PolyFit()(clean_data, groupby, \"x\", {})\n+\n+        # Assert that the results are equal after dropping missing data\n+        assert_frame_equal(result_with_nan, expected_result)\n+\n+        # Check that the results do not contain NaN values\n+        assert not result_with_nan.isnull().values.any()\n+\n     @pytest.fixture\n     def df(self, rng):\n \n",
  "mwaskom__seaborn-3190": "",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..21d0cae 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -707,6 +707,21 @@ class TestFacetGrid:\n                     assert mpl.colors.same_color(tick.tick2line.get_color(), color)\n                     assert tick.get_pad() == pad\n \n+    def test_pairplot_column_multiindex(self):\n+\n+        cols = pd.MultiIndex.from_arrays([[\"A\", \"A\", \"B\", \"B\"], [\"1\", \"2\", \"1\", \"2\"]])\n+        data = {\n+            (\"A\", \"1\"): np.random.rand(100),\n+            (\"A\", \"2\"): np.random.rand(100),\n+            (\"B\", \"1\"): np.random.rand(100),\n+            (\"B\", \"2\"): np.random.rand(100),\n+        }\n+        df = pd.DataFrame(data, columns=cols)\n+        g = ag.pairplot(df)\n+        assert g.diag_vars == list(cols)\n+        for ax in g.diag_axes:\n+            assert len(ax.patches) > 0  # Check that there are indeed plots\n+\n \n class TestPairGrid:\n \n@@ -1455,6 +1470,21 @@ class TestPairGrid:\n                     assert mpl.colors.same_color(tick.tick2line.get_color(), color)\n                     assert tick.get_pad() == pad\n \n+    def test_pairplot_column_multiindex(self):\n+\n+        cols = pd.MultiIndex.from_arrays([[\"A\", \"A\", \"B\", \"B\"], [\"1\", \"2\", \"1\", \"2\"]])\n+        data = {\n+            (\"A\", \"1\"): np.random.rand(100),\n+            (\"A\", \"2\"): np.random.rand(100),\n+            (\"B\", \"1\"): np.random.rand(100),\n+            (\"B\", \"2\"): np.random.rand(100),\n+        }\n+        df = pd.DataFrame(data, columns=cols)\n+        g = ag.pairplot(df)\n+        assert g.diag_vars == list(cols)\n+        for ax in g.diag_axes:\n+            assert len(ax.patches) > 0  # Check that there are indeed plots\n+\n \n class TestJointGrid:\n \n",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..9dc0c9d 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,8 +1,10 @@\n+\n import json\n import os\n import textwrap\n-\n import pytest\n+import tomllib\n+import tempfile\n \n import flask\n \n@@ -18,7 +20,19 @@ def common_object_test(app):\n     assert \"TestConfig\" not in app.config\n \n \n-def test_config_from_pyfile():\n+def test_config_from_file_toml_binary_mode():\n+    tomllib = pytest.importorskip(\"tomllib\", reason=\"tomllib added in 3.11\")\n+    app = flask.Flask(__name__)\n+    current_dir = os.path.dirname(os.path.abspath(__file__))\n+\n+    # Use a temporary file to write TOML content\n+    with tempfile.NamedTemporaryFile(suffix=\".toml\", mode='wb', delete=False) as temp_toml:\n+        temp_toml.write(b'TEST_KEY = \"foo\"\\nSECRET_KEY = \"config\"')\n+        temp_toml.flush()\n+        temp_toml.close()\n+        \n+        app.config.from_file(temp_toml.name, tomllib.load, mode='b')\n+        common_object_test(app)\n     app = flask.Flask(__name__)\n     app.config.from_pyfile(f\"{__file__.rsplit('.', 1)[0]}.py\")\n     common_object_test(app)\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..f27f994 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1662,5 +1662,50 @@ def test_vendor_aliases():\n     with pytest.raises(ImportError):\n         from requests.packages import webbrowser\n \n+\n+def test_urllib3_decode_error():\n+    import requests\n+    from requests.exceptions import ContentDecodingError\n+    from requests.adapters import HTTPAdapter\n+    from urllib3.response import HTTPResponse\n+    from urllib3.exceptions import DecodeError\n+    from io import BytesIO\n+\n+    class MockHTTPResponse(HTTPResponse):\n+        def _init_decoder(self):\n+            raise DecodeError(\"Mock Decode Error\")\n+\n+    class MockHTTPAdapter(HTTPAdapter):\n+        def send(self, request, **kwargs):\n+            return MockHTTPResponse(BytesIO(b\"Mock data\"), headers={\"content-encoding\": \"gzip\"})\n+\n+    s = requests.Session()\n+    s.mount(\"http://\", MockHTTPAdapter())\n+\n+    with pytest.raises(ContentDecodingError):\n+        s.get(\"http://mockurl\")\n+\n+def test_urllib3_timeout_error():\n+    import requests\n+    from requests.exceptions import Timeout\n+    from requests.adapters import HTTPAdapter\n+    from urllib3.exceptions import TimeoutError\n+    from urllib3 import PoolManager\n+    import time\n+\n+    class MockHTTPAdapter(HTTPAdapter):\n+        def __init__(self, *args, **kwargs):\n+            super(MockHTTPAdapter, self).__init__(*args, **kwargs)\n+            self.poolmanager = PoolManager()\n+\n+        def send(self, request, **kwargs):\n+            raise TimeoutError(\"Mock Timeout Error\")\n+\n+    s = requests.Session()\n+    s.mount(\"http://\", MockHTTPAdapter())\n+\n+    with pytest.raises(Timeout):\n+        s.get(\"http://mockurl\", timeout=0.001)\n+\n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..e5140ba 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,7 +980,23 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_response_iter_content_decode_unicode(self):\n+        \"\"\"\n+        Test iter_content with decode_unicode=True and decode_unicode=False.\n+        \"\"\"\n+        # Setup response object\n+        r = requests.Response()\n+        r._content_consumed = True\n+        r._content = b'{\"key\": \"value\"}'\n+        r.encoding = 'utf-8'\n+\n+        # Test with decode_unicode=True\n+        chunks_unicode = r.iter_content(chunk_size=16, decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks_unicode), \"Expected unicode strings when decode_unicode=True\"\n+\n+        # Test with decode_unicode=False\n+        chunks_bytes = r.iter_content(chunk_size=16, decode_unicode=False)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks_bytes), \"Expected bytes when decode_unicode=False\"\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..eacdaaf 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -744,7 +744,82 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             assert 'foo' in response.text\n             assert 'bar' in response.text\n \n-    def test_session_persistent_cookies(self):\n+    def test_allow_list_of_hooks_to_register_hook(self):\n+        \"\"\"Issue 785: https://github.com/kennethreitz/requests/issues/785\"\"\"\n+        def add_foo_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+\n+            args['headers'].update({\n+                'X-Foo': 'foo'\n+            })\n+\n+            return args\n+\n+        def add_bar_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+\n+            args['headers'].update({\n+                'X-Bar': 'bar'\n+            })\n+\n+            return args\n+\n+        def assert_hooks_are_callable(hooks):\n+            for h in hooks['args']:\n+                assert callable(h) is True\n+\n+        hooks = [add_foo_header, add_bar_header]\n+        r = requests.models.Request()\n+        r.register_hook('args', hooks)\n+        assert_hooks_are_callable(r.hooks)\n+\n+        r = requests.models.Request(hooks={'args': hooks})\n+        assert_hooks_are_callable(r.hooks)\n+\n+    def test_register_hook_with_single_callable(self):\n+        \"\"\"Test registering a single callable hook.\"\"\"\n+        def modify_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+            args['headers'].update({'X-Modified': 'modified'})\n+            return args\n+\n+        r = requests.models.Request(hooks={'args': modify_header})\n+        assert callable(r.hooks['args'][0]) is True\n+\n+    def test_register_hook_with_non_callable(self):\n+        \"\"\"Test registering a hook with non-callable object should raise an error.\"\"\"\n+        with pytest.raises(TypeError):\n+            r = requests.models.Request(hooks={'args': 'not-a-callable'})\n+\n+    def test_register_hook_with_mixed_list(self):\n+        \"\"\"Test registering a hook with a mixed list of callables and non-callables.\"\"\"\n+        def valid_hook(args):\n+            return args\n+\n+        with pytest.raises(TypeError):\n+            r = requests.models.Request(hooks={'args': [valid_hook, 'not-a-callable']})\n+\n+    def test_hooks_execute_in_order(self):\n+        \"\"\"Ensure that hooks are executed in the correct order.\"\"\"\n+        order = []\n+\n+        def first_hook(args):\n+            order.append('first')\n+            return args\n+\n+        def second_hook(args):\n+            order.append('second')\n+            return args\n+\n+        hooks = [first_hook, second_hook]\n+        r = requests.models.Request(hooks={'args': hooks})\n+        for hook in r.hooks['args']:\n+            hook({})  # simulate hook execution\n+\n+        assert order == ['first', 'second']\n \n         s = requests.session()\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..89bd634 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -53,9 +53,18 @@ reports = \"yes\"\n         f\"${env_var}\", file_to_lint_path\n     )\n     mock_exit.assert_called_once_with(0)\n-    check_configuration_file_reader(runner)\n+def check_configuration_file_reader(runner):\n+    pass\n \n \n+import pytest\n+from pylint.lint import Run\n+from pylint.config.exceptions import _UnrecognizedOptionError\n+from _pytest.capture import CaptureFixture\n+from os.path import getsize\n+\n+EMPTY_MODULE = \"/path/to/empty/module\"  # You should replace this with the actual path to an empty Python file for testing purposes.\n+\n def test_unknown_message_id(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown id.\"\"\"\n     Run([str(EMPTY_MODULE), \"--disable=12345\"], exit=False)\n@@ -79,7 +88,14 @@ def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n \n \n-def test_unknown_confidence(capsys: CaptureFixture) -> None:\n+def test_unrecognized_option_traceback(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that no traceback is printed for unrecognized options.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([\"-Q\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"E0015: Unrecognized option found: Q\" in output.err\n+    assert \"Traceback\" not in output.err\n+    assert \"usage: pylint\" in output.err\n     \"\"\"Check that we correctly error an unknown confidence value.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--confidence=UNKNOWN_CONFIG\"], exit=False)\n",
  "pylint-dev__pylint-7080": "",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..e4f0a87 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,6 +934,33 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n+def test_module_with_same_name_as_directory(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for issue with module having the same name as its containing directory\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create directory structure with a module of the same name\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    # There should be no parse errors related to missing __init__.py\n+    assert \"parse-error\" not in linter.stats.by_msg\n+\n+def test_import_in_module_with_same_name_as_directory(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test import resolution when module name matches directory name\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create directory structure and an additional module\n+        create_files(\n+            [\"a/a.py\", \"a/b.py\", \"r.py\"],\n+            contents={\n+                \"r.py\": \"from a import b\\n\"\n+            }\n+        )\n+        linter.check([\"r\", \"a\"])\n+    # There should be no import errors\n+    assert \"no-name-in-module\" not in linter.stats.by_msg\n+    # Ensure no parse errors\n+    assert \"parse-error\" not in linter.stats.by_msg\n+\n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n@@ -941,4 +968,31 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+def test_module_with_same_name_as_directory(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for issue with module having the same name as its containing directory\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create directory structure with a module of the same name\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    # There should be no parse errors related to missing __init__.py\n+    assert \"parse-error\" not in linter.stats.by_msg\n+\n+def test_import_in_module_with_same_name_as_directory(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test import resolution when module name matches directory name\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create directory structure and an additional module\n+        create_files(\n+            [\"a/a.py\", \"a/b.py\", \"r.py\"],\n+            contents={\n+                \"r.py\": \"from a import b\\n\"\n+            }\n+        )\n+        linter.check([\"r\", \"a\"])\n+    # There should be no import errors\n+    assert \"no-name-in-module\" not in linter.stats.by_msg\n+    # Ensure no parse errors\n+    assert \"parse-error\" not in linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..c558b2f 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -113,7 +114,23 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[2] == \"my_mod:2::()\"\n \n \n-def test_deprecation_set_output(recwarn):\n+def test_template_option_custom_braces(linter: PyLinter) -> None:\n+    output = StringIO()\n+    linter.reporter.out = output\n+    custom_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.config.msg_template = custom_template\n+    linter.open()\n+    linter.set_current_module(\"my_mod\")\n+\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\n+        \"line-too-long\", line=2, end_lineno=2, end_col_offset=4, args=(3, 4)\n+    )\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    \n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"convention\" }'\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n     # noinspection PyDeprecation\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..eb0d4be 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -298,6 +298,35 @@ class TestImportPath:\n         assert \"_src\" in sys.modules\n         assert \"_src.tests\" in sys.modules\n \n+    def test_importlib_prevents_double_import(self, pytester: Pytester) -> None:\n+        \"\"\"Ensure modules are not imported twice with importlib mode.\"\"\"\n+        pytester.makepyfile(\n+            **{\n+                \"module_a.py\": \"def foo(): return 'Hello from A'\",\n+                \"module_b.py\": \"from . import module_a\\n\"\n+                               \"def bar(): return module_a.foo() + ' and B'\",\n+                \"test_module.py\": \"\"\"\n+                    import importlib\n+                    from . import module_a, module_b\n+\n+                    def test_imports():\n+                        mod_a = importlib.import_module('module_a')\n+                        mod_b = importlib.import_module('module_b')\n+                        assert mod_a is module_a\n+                        assert mod_b is module_b\n+                        assert mod_b.bar() == 'Hello from A and B'\n+                \"\"\",\n+            }\n+        )\n+        pytester.makeini(\n+            \"\"\"\n+            [pytest]\n+            addopts = --import-mode importlib\n+            \"\"\"\n+        )\n+        result = pytester.runpytest_subprocess()\n+        result.stdout.fnmatch_lines(\"*1 passed*\")\n+\n     def test_importmode_twice_is_different_module(\n         self, simple_module: Path, tmp_path: Path\n     ) -> None:\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..0313044 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import py.io\n@@ -5,7 +6,38 @@ import py.io\n from _pytest.logging import ColoredLevelFormatter\n \n \n-def test_coloredlogformatter():\n+def test_coloredlogformatter_with_name_and_filename():\n+    # Test the format with %(name)s in the format string\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+\n+    record = logging.LogRecord(\n+        name=\"dummy.module\",\n+        level=logging.INFO,\n+        pathname=\"dummypath/dummy.py\",\n+        lineno=10,\n+        msg=\"Test Message with Name\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    class ColorConfig(object):\n+        class option(object):\n+            pass\n+\n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = True\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == (\n+        \"\\x1b[32mINFO    \\x1b[0m dummy.module:dummy.py:10 Test Message with Name\"\n+    )\n+\n+    tw.hasmarkup = False\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == (\n+        \"INFO     dummy.module:dummy.py:10 Test Message with Name\"\n+    )\n     logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n \n     record = logging.LogRecord(\n",
  "pytest-dev__pytest-5495": "",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..4c78325 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,4 +1,7 @@\n+\n import os\n+import platform\n+from datetime import datetime\n from xml.dom import minidom\n \n import py\n@@ -139,7 +142,29 @@ class TestPython:\n         node = dom.find_first_by_tag(\"testsuite\")\n         node.assert_attr(name=\"pytest\", errors=1, failures=2, skipped=1, tests=5)\n \n-    def test_timing_function(self, testdir):\n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+        \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+        \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n         testdir.makepyfile(\n             \"\"\"\n             import time, pytest\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..7adfeaf 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,33 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_repr_exception_handling():\n+    \"\"\"Test saferepr with a class whose __repr__ raises an exception.\"\"\"\n+\n+    class ExceptionRaisingRepr:\n+        def __repr__(self):\n+            raise ValueError(\"This is a repr exception\")\n+\n+    obj = ExceptionRaisingRepr()\n+    result = saferepr(obj)\n+    assert result.startswith(\"<[ValueError('This is a repr exception') raised in repr()] ExceptionRaisingRepr object at 0x\")\n+    assert \"raised in repr()\" in result\n+\n+def test_repr_and_getattribute_exceptions():\n+    \"\"\"Test saferepr with both __repr__ and __getattribute__ raising exceptions.\"\"\"\n+\n+    class ComplexExceptionClass:\n+        def __getattribute__(self, item):\n+            raise AttributeError(\"Attribute error raised\")\n+\n+        def __repr__(self):\n+            raise RuntimeError(\"Runtime error in repr\")\n+\n+    obj = ComplexExceptionClass()\n+    result = saferepr(obj)\n+    assert result.startswith(\"<[RuntimeError('Runtime error in repr') raised in repr()] ComplexExceptionClass object at 0x\")\n+    assert \"raised in repr()\" in result\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +180,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..946cc4c 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -291,6 +291,28 @@ class TestInlineRunModulesCleanup:\n def test_assert_outcomes_after_pytest_error(testdir) -> None:\n     testdir.makepyfile(\"def test_foo(): assert True\")\n \n+def test_failure_path_with_changed_cwd(testdir):\n+    \"\"\"Test that the failure path is correctly reported when the working directory is changed in a fixture.\"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+\n+        @pytest.fixture\n+        def change_dir(tmpdir):\n+            old_dir = os.getcwd()\n+            os.chdir(tmpdir.strpath)\n+            yield\n+            os.chdir(old_dir)\n+\n+        def test_failure(change_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    # Ensure that the path in the assertion error is the original and not relative to `tmpdir`\n+    result.stdout.fnmatch_lines([f'*{p.basename}:*: AssertionError', '*1 failed in *'])\n+\n     result = testdir.runpytest(\"--unexpected-argument\")\n     with pytest.raises(ValueError, match=\"Pytest terminal summary report not found\"):\n         result.assert_outcomes(passed=0)\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..a464e4f 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,6 @@\n import os\n import sys\n+import os\n from unittest import mock\n \n import pytest\n@@ -11,6 +12,66 @@ from _pytest.nodes import Node\n \n \n class TestMark:\n+    \n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"#7360\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert True\n+            \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr2=\"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+            \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n+\n+    def test_skipif_with_different_globals(self, testdir):\n+        \"\"\"Test that globals are not incorrectly cached.\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_module1=\"\"\"\n+            import pytest\n+\n+            cond = False\n+\n+            @pytest.mark.skipif(\"cond\")\n+            def test_1():\n+                assert True\n+            \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_module2=\"\"\"\n+            import pytest\n+\n+            cond = True\n+\n+            @pytest.mark.skipif(\"cond\")\n+            def test_2():\n+                assert False\n+            \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, failed=1)\n     @pytest.mark.parametrize(\"attr\", [\"mark\", \"param\"])\n     @pytest.mark.parametrize(\"modulename\", [\"py.test\", \"pytest\"])\n     def test_pytest_exists_in_namespace_all(self, attr: str, modulename: str) -> None:\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..dacf32f 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -152,8 +152,58 @@ class TestEvaluation:\n         assert skipped\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n+import pytest\n \n-class TestXFail:\n+class TestSkipping:\n+    @pytest.mark.parametrize(\n+        \"test_input, expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_location_reporting(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n+    @pytest.mark.parametrize(\n+        \"test_input, expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:3: skip if condition met\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:3: skip if condition met\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skipif_location_reporting(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skipif(True, reason=\"skip if condition met\")\n+            def test_skipif_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-7490": "",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..23def5f 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -21,6 +22,25 @@ from _pytest.pathlib import rm_rf\n from _pytest.pytester import Pytester\n from _pytest.tmpdir import get_user\n from _pytest.tmpdir import TempdirFactory\n+from _pytest.monkeypatch import MonkeyPatch\n+\n+def test_tmp_path_factory_handles_various_invalid_dir_characters(tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch) -> None:\n+    # Test with a variety of illegal characters in directory names\n+    illegal_usernames = [\n+        \"contoso\\\\john_doe\",\n+        \"invalid:username\",\n+        \"another*invalid?\",\n+        \"<illegal|name>\",\n+        \"name_with?question\"\n+    ]\n+    \n+    # Iterate over each illegal username and ensure the temporary path is created correctly\n+    for illegal_username in illegal_usernames:\n+        monkeypatch.setattr(\"getpass.getuser\", lambda: illegal_username)\n+        monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+        monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+        p = tmp_path_factory.getbasetemp()\n+        assert \"pytest-of-unknown\" in str(p)\n from _pytest.tmpdir import TempPathFactory\n \n \n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..93eb006 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,6 +574,29 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # New test added for RidgeClassifierCV store_cv_values parameter.\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    # Test with single target\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # Test with multiple targets\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..7fdbad9 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -5,8 +5,9 @@\n import numpy as np\n from scipy.special import gammaln\n \n-from sklearn.utils.testing import assert_raise_message\n-from sklearn.utils.testing import assert_almost_equal\n+from sklearn.utils.testing import assert_raise_message, assert_array_equal\n+from sklearn.metrics.cluster import adjusted_rand_score\n+from sklearn.exceptions import NotFittedError\n \n from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n from sklearn.mixture.bayesian_mixture import _log_wishart_norm\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..181fde0 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,7 +260,21 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n-def test_one_hot_encoder_no_categorical_features():\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n     cat = [False, False, False]\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..b41a6bf 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,8 +598,17 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n-def test_gaussian_mixture_fit():\n-    # recover the ground truth\n+from sklearn.mixture import GaussianMixture\n+from numpy.testing import assert_array_equal\n+import numpy as np\n+\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n     n_features = rand_data.n_features\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..72b692c 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,11 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n-                                   assert_raises)\n+                                   assert_raises, assert_allclose)\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n@@ -71,6 +72,18 @@ def test_kernel_pca_consistent_transform():\n     assert_array_almost_equal(transformed1, transformed2)\n \n \n+def test_kernel_pca_sign_consistency():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+    kpca = KernelPCA(n_components=7, kernel='rbf', random_state=0)\n+\n+    # Fit transform multiple times\n+    transformed_X1 = kpca.fit_transform(X)\n+    transformed_X2 = kpca.fit_transform(X)\n+\n+    # Ensure that the results are either the same or differ only by sign\n+    assert_allclose(np.abs(transformed_X1), np.abs(transformed_X2))\n+\n def test_kernel_pca_sparse():\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..63c9627 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1058,7 +1058,28 @@ def test_pipeline_memory():\n         shutil.rmtree(cachedir)\n \n \n-def test_make_pipeline_memory():\n+def test_pipeline_len():\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.decomposition import PCA\n+    from sklearn.svm import SVC\n+    from sklearn.feature_selection import SelectKBest\n+    from sklearn.feature_selection import f_classif\n+\n+    # Test with two steps\n+    pipe = Pipeline([('pca', PCA()), ('svc', SVC())])\n+    assert len(pipe) == 2\n+\n+    # Test with one step\n+    pipe = Pipeline([('svc', SVC())])\n+    assert len(pipe) == 1\n+\n+    # Test with three steps\n+    pipe = Pipeline([('select', SelectKBest(f_classif, k=10)), ('pca', PCA()), ('svc', SVC())])\n+    assert len(pipe) == 3\n+\n+    # Test empty pipeline\n+    pipe = Pipeline([])\n+    assert len(pipe) == 0\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n         # Deal with change of API in joblib\n@@ -1070,4 +1091,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..a691c03 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,6 +8,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n import numpy as np\n \n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..8fac5f4 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -197,4 +197,18 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n+    \n+    # Additional test cases to ensure the issue is resolved\n+    # Check with discrete_features as an array of indices\n+    mi_indices = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+    assert_array_equal(mi_6, mi_indices)\n+    \n+    # Check with discrete_features as a boolean mask\n+    mi_boolean = mutual_info(X, y, discrete_features=[True, False, True], random_state=0)\n+    assert_array_equal(mi_5, mi_boolean)\n+    \n+    # Check that invalid inputs raise the correct errors\n+    assert_raises(ValueError, mutual_info, X, y, discrete_features='invalid')\n+    assert_raises(IndexError, mutual_info, X, y, discrete_features=[0, 3])\n+    assert_raises(IndexError, mutual_info, X, y, discrete_features=[True, True, True, True])\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..a351c1b 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,8 +217,14 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n-\n-def test_pipeline():\n+def test_logistic_regression_cv_repr_with_array():\n+    # Ensure array parameters don't throw an error (see issue #13583)\n+    set_config(print_changed_only=True)\n+    try:\n+        repr_output = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+        assert \"Cs=array([0.1, 1. ])\" in repr_output  # Check if the array is correctly displayed\n+    finally:\n+        set_config(print_changed_only=False)\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n     expected = \"\"\"\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..768ff02 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -12,6 +13,8 @@ from sklearn.linear_model import LogisticRegression\n from sklearn.naive_bayes import GaussianNB\n from sklearn.ensemble import RandomForestClassifier\n from sklearn.ensemble import VotingClassifier, VotingRegressor\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.model_selection import GridSearchCV\n from sklearn import datasets\n from sklearn.model_selection import cross_val_score, train_test_split\n@@ -503,6 +506,7 @@ def test_transform():\n     assert_array_equal(eclf3.transform(X).shape, (3, 4, 2))\n     assert_array_almost_equal(eclf1.transform(X),\n                               eclf2.transform(X))\n+\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..8834601 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -119,6 +119,29 @@ def test_finite_differences():\n     np.testing.assert_almost_equal(rel_diff, 0., decimal=5)\n \n \n+def test_nca_in_grid_search():\n+    # Test NCA within GridSearchCV with numpy types to ensure no TypeError is raised\n+    import numpy as np\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.model_selection import GridSearchCV\n+    from sklearn.neighbors import NeighborhoodComponentsAnalysis\n+    from sklearn.neighbors import KNeighborsClassifier\n+\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+\n+    pipe = Pipeline([('nca', nca),\n+                     ('knn', knn)])\n+                    \n+    params = {'nca__tol': [0.1, 0.5, 1.0],  # Ensuring all are floats\n+              'nca__n_components': np.arange(1, 10).astype(int)}  # Ensure all are Python int\n+              \n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+    gs.fit(X, y)\n+\n def test_params_validation():\n     # Test that invalid parameters raise value error\n     X = np.arange(12).reshape(4, 3)\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..934e436 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -679,6 +679,42 @@ def test_unicode_kernel():\n                                 kernel='linear',\n                                 random_seed=0)\n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_no_support_vectors():\n+    # Test with sparse data which results in no support vectors\n+    X_train = sparse.csr_matrix([[0, 0, 0, 0],\n+                                 [0, 0, 0, 0],\n+                                 [0, 0, 0, 0],\n+                                 [0, 0, 0, 0]])\n+    y_train = np.array([0.0, 0.0, 0.0, 0.0])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_single_sample():\n+    # Test with a single sparse sample\n+    X_train = sparse.csr_matrix([[1, 0, 0, 0]])\n+    y_train = np.array([1.0])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert model.support_vectors_.shape[0] == 1\n+    assert model.dual_coef_.shape[0] == 1\n+\n+from sklearn import svm\n+from scipy import sparse\n+import numpy as np\n \n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..15d29d0 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,8 +972,14 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n-def test_repeated_cv_value_errors():\n+import pytest\n+@pytest.mark.parametrize(\"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold])\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    repeated_cv_repr = ('{}(n_repeats=6, n_splits=2, random_state=None)'\n+                        .format(repeated_cv.__class__.__name__))\n+    assert repeated_cv_repr == repr(repeated_cv)\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n         assert_raises(ValueError, cv, n_repeats=0)\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "diff --git a/sklearn/metrics/cluster/tests/test_common.py b/sklearn/metrics/cluster/tests/test_common.py\nindex 9991cff..20c3c01 100644\n--- a/sklearn/metrics/cluster/tests/test_common.py\n+++ b/sklearn/metrics/cluster/tests/test_common.py\n@@ -157,6 +157,17 @@ def test_format_invariance(metric_name):\n     y_true = [0, 0, 0, 0, 1, 1, 1, 1]\n     y_pred = [0, 1, 2, 3, 4, 5, 6, 7]\n \n+    # Additional test case for object dtype\n+    y_true_object = np.array(y_true, dtype=object)\n+    y_pred_object = np.array(y_pred, dtype=object)\n+    \n+    if metric_name in SUPERVISED_METRICS:\n+        metric = SUPERVISED_METRICS[metric_name]\n+        \n+        # Verify with object dtype\n+        score_object = metric(y_true_object, y_pred_object)\n+        assert score_1 == score_object\n+\n     def generate_formats(y):\n         y = np.array(y)\n         yield y, 'array of ints'\n",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..c162595 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,11 +1,17 @@\n+\n import warnings\n import numpy as np\n import pickle\n import copy\n \n import pytest\n-\n+import pytest\n+import numpy as np\n+import pandas as pd\n from sklearn.datasets import make_regression\n+from sklearn import set_config\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n from sklearn.isotonic import (\n     check_increasing,\n     isotonic_regression,\n",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..2df811b 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2120,12 +2120,43 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     # not define the method.\n     with pytest.raises(AttributeError, match=\"not provide get_feature_names_out\"):\n         ct.get_feature_names_out()\n+import pytest\n+import numpy as np\n+from sklearn.compose import ColumnTransformer\n+from sklearn.preprocessing import StandardScaler\n+from sklearn.utils._testing import assert_array_equal\n+\n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False]), [False, False]],\n+    ids=[\"list\", \"bool\", \"bool_int\"],\n+)\n+def test_empty_selection_pandas_output(empty_selection):\n+    \"\"\"Check that pandas output works when there is an empty selection.\n+\n+    Non-regression test for gh-25487\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n \n-    # The feature names are prefixed because verbose_feature_names_out=True is default\n+    X = pd.DataFrame([[1.0, 2.2], [3.0, 1.0]], columns=[\"a\", \"b\"])\n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", empty_selection),\n+            (\"numerical\", StandardScaler(), [\"a\", \"b\"]),\n+        ],\n+        verbose_feature_names_out=True,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\"])\n+\n+    ct.set_params(verbose_feature_names_out=False)\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"a\", \"b\"])\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n     assert_array_equal(X_trans_df0.columns, expected_verbose_names)\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..28c429c 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -112,6 +112,8 @@ def test_automodule_special_members(app):\n         '',\n     ]\n \n+import pytest\n+import sys\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_mock_imports': ['missing_module',\n@@ -125,4 +127,225 @@ def test_subclass_of_mocked_object(app):\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 21b6a7e..21c4150 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -691,6 +691,39 @@ def test_autodoc_typehints_description_for_invalid_node(app):\n \n @pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n @pytest.mark.sphinx('text', testroot='ext-autodoc')\n+def test_autodoc_type_aliases_for_variables_and_attributes(app):\n+    # Define aliases\n+    app.config.autodoc_type_aliases = {'String': 'example.MyString'}\n+\n+    # Autodoc the example module\n+    actual = do_autodoc(app, 'module', 'example', {\"members\": None, \"undoc-members\": True})\n+    \n+    # Verify if the alias is applied to the variable `var` and attribute `MyString.var`\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: example',\n+        '',\n+        '',\n+        '.. py:data:: var',\n+        '   :module: example',\n+        '   :type: MyString',\n+        '',\n+        '   blah blah blah',\n+        '',\n+        '',\n+        '.. py:class:: MyString',\n+        '   :module: example',\n+        '',\n+        '   mystring',\n+        '',\n+        '   .. py:attribute:: MyString.var',\n+        '      :module: example',\n+        '      :type: MyString',\n+        '',\n+        '      blah blah blah',\n+        '',\n+    ]\n+@pytest.mark.sphinx('text', testroot='ext-autodoc')\n def test_autodoc_type_aliases(app):\n     # default\n     options = {\"members\": None}\n",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..0722b9a 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -120,6 +120,37 @@ def test_glossary(app):\n                                                                      index)],\n                                                              definition)])],\n     ))\n+\n+def test_cmd_option_with_equal_sign(app):\n+    text = \".. option:: --name=value\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (index,\n+                          [desc, ([desc_signature, ([desc_name, '--name'],\n+                                                    [desc_addname, '=value'])],\n+                                  [desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('--name', '--name', 'cmdoption', 'index', 'cmdoption-name', 1) in objects\n+\n+def test_cmd_option_with_multiple_brackets(app):\n+    text = \".. option:: [enable=][debug=]PATTERN\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (index,\n+                          [desc, ([desc_signature, ([desc_name, '[enable'],\n+                                                    [desc_addname, '=][debug=]PATTERN'])],\n+                                  [desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n+    assert ('[debug', '[debug', 'cmdoption', 'index', 'cmdoption-arg-debug', 1) in objects\n+\n+def test_cmd_option_empty_brackets(app):\n+    text = \".. option:: []PATTERN\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (index,\n+                          [desc, ([desc_signature, ([desc_name, ''],\n+                                                    [desc_addname, ']PATTERN'])],\n+                                  [desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('', '', 'cmdoption', 'index', 'cmdoption-arg', 1) in objects\n     assert_node(doctree[0][0][0][0][1],\n                 entries=[(\"single\", \"term1\", \"term-term1\", \"main\", None)])\n     assert_node(doctree[0][0][0][1][1],\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..3b1948c 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,8 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n@@ -44,6 +46,21 @@ def do_autodoc(app, objtype, name, options=None):\n \n     return bridge.result\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_module(app):\n+    \"\"\"\n+    Test to ensure that when __all__ is empty, no members are documented.\n+    \"\"\"\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'example', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: example',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n \n def make_directive_bridge(env):\n     options = Options(\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..2fb3a5d 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -39,6 +41,7 @@ class BrokenType:\n \n \n def test_restify():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(int) == \":class:`int`\"\n     assert restify(str) == \":class:`str`\"\n     assert restify(None) == \":obj:`None`\"\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..ec04be3 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,10 +1455,38 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    def test_other_parameters_with_napoleon_use_param_false(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+    def test_other_parameters_with_napoleon_use_param_true(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..b2c8083 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -60,8 +60,13 @@ def test_linkcode(app, status, warning):\n     assert 'http://foobar/c/' in stuff\n     assert 'http://foobar/cpp/' in stuff\n \n+import pytest\n+from pathlib import Path\n \n-@pytest.mark.sphinx(testroot='ext-viewcode-find')\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled(app, status, warning):\n+    app.builder.build_all()\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n def test_local_source_files(app, status, warning):\n     def find_source(app, modname):\n         if modname == 'not_a_package':\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..c9eb176 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -354,6 +354,15 @@ def test_args():\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n+    # Test for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity permutation\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])\n+    assert Permutation([[0, 1, 2], [0, 2]]) == Permutation([2, 1, 0])\n+    assert Permutation([[1, 2], [0, 2], [0, 1]]) == Permutation([2, 0, 1])\n+\n+    # Original test case checking non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 2]]) == Permutation([[0, 1, 2]])\n+\n \n def test_Cycle():\n     assert str(Cycle()) == '()'\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..44e7c51 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -26,6 +27,12 @@ def test_sparse_matrix():\n     assert type(a.row_join(b)) == type(a)\n     assert type(a.col_join(b)) == type(a)\n \n+    # test hstack and vstack with zero-dimensional matrices\n+    sparse_matrices_hstack = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_hstack).shape == (0, 6)\n+    sparse_matrices_vstack = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_vstack).shape == (6, 0)\n+\n     # test element assignment\n     a = SparseMatrix((\n         (1, 0),\n",
  "sympy__sympy-13471": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 0a3b6ce..b452469 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -582,6 +582,11 @@ def test_Float_issue_2107():\n     assert S.Zero + b + (-b) == 0\n \n \n+def test_Float_from_tuple():\n+    a = Float((0, '1L', 0, 1))\n+    b = Float((0, '1', 0, 1))\n+    assert a == b\n+\n def test_Infinity():\n     assert oo != 1\n     assert 1*oo == oo\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..9060962 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -279,7 +279,16 @@ def test_coth_series():\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n \n \n-def test_csch():\n+def test_coth_subs_issue():\n+    from sympy import coth, log, tan, Symbol\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # Test substitutions with problematic integral values\n+    test_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for val in test_values:\n+        result = e.subs(x, val)\n+        assert result.is_real or result.has(I)  # Check that we do not encounter a NameError\n     x, y = symbols('x,y')\n \n     k = Symbol('k', integer=True)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..2edaa33 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,6 +201,49 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n+def test_issue_13643_col_insert():\n+    from sympy import eye, Matrix, ones\n+\n+    # Test case based on the issue description\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    \n+    # Expected result\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n+    # Additional test case: Insert at the start\n+    result_start = M.col_insert(0, V)\n+    expected_start = Matrix([\n+        [2, 2, 1, 0, 0, 0, 0, 0],\n+        [2, 2, 0, 1, 0, 0, 0, 0],\n+        [2, 2, 0, 0, 1, 0, 0, 0],\n+        [2, 2, 0, 0, 0, 1, 0, 0],\n+        [2, 2, 0, 0, 0, 0, 1, 0],\n+        [2, 2, 0, 0, 0, 0, 0, 1]\n+    ])\n+    assert result_start == expected_start\n+\n+    # Additional test case: Insert at the end\n+    result_end = M.col_insert(6, V)\n+    expected_end = Matrix([\n+        [1, 0, 0, 0, 0, 0, 2, 2],\n+        [0, 1, 0, 0, 0, 0, 2, 2],\n+        [0, 0, 1, 0, 0, 0, 2, 2],\n+        [0, 0, 0, 1, 0, 0, 2, 2],\n+        [0, 0, 0, 0, 1, 0, 2, 2],\n+        [0, 0, 0, 0, 0, 1, 2, 2]\n+    ])\n+    assert result_end == expected_end\n+\n def test_extract():\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..b539baf 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -616,7 +616,39 @@ def test_latex_Range():\n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n \n-def test_latex_sequences():\n+def test_seqformula_no_escape_brackets():\n+    from sympy import latex, SeqFormula, Symbol, oo\n+\n+    # Define a symbol and sequence\n+    n = Symbol('n', integer=True)\n+    s1 = SeqFormula(n**2, (n, 0, oo))\n+\n+    # Assert that the LaTeX representation does not escape square brackets\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(s1) == latex_str\n+\n+    s2 = SeqFormula(2*n, (n, 0, 3))\n+    latex_str = r'[0, 2, 4, 6]'\n+    assert latex(s2) == latex_str\n+\n+    s3 = SeqFormula(n**2, (n, -oo, 0))\n+    latex_str = r'[\\ldots, 9, 4, 1, 0]'\n+    assert latex(s3) == latex_str\n+\n+    s4 = SeqFormula(n**3, (n, 0, 3))\n+    latex_str = r'[0, 1, 8, 27]'\n+    assert latex(s4) == latex_str\n+\n+    # Test a mixed sequence\n+    s5 = SeqFormula(3*n + 1, (n, 0, oo))\n+    latex_str = r'[1, 4, 7, 10, \\ldots]'\n+    assert latex(s5) == latex_str\n+\n+    # Test sequence multiplication\n+    from sympy import SeqMul\n+    s6 = SeqMul(s1, s2)\n+    latex_str = r'[0, 2, 16, 54, \\ldots]'\n+    assert latex(s6) == latex_str\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..3d88748 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -153,8 +154,28 @@ def test_Greedy_postprocess():\n \n     assert opt == {'greedy': True}\n \n-\n-def test_Domain_preprocess():\n+def test_Domain_preprocess_RR_CC():\n+    # Tests specifically for Real and Complex domains with polynomial extensions\n+    assert Domain.preprocess('R[x]') == RR[x]\n+    assert Domain.preprocess('C[x]') == CC[x]\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n+\n+def test_Poly_with_RR_domain():\n+    from sympy import Poly\n+    from sympy.abc import x, y, z\n+\n+    # Test that Poly can handle domain 'RR[y,z]' correctly after the fix\n+    p = Poly(1.2*x*y*z, x, domain='RR[y,z]')\n+    assert p.as_expr() == 1.2*y*z*x\n+    assert p.gens == (x,)\n+\n+    # Test the error message when an invalid domain is provided\n+    raises(OptionError, lambda: Poly(1.2*x*y*z, x, domain='InvalidDomain'))\n     assert Domain.preprocess(ZZ) == ZZ\n     assert Domain.preprocess(QQ) == QQ\n     assert Domain.preprocess(EX) == EX\n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..5eb08a7 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,28 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import MatrixSymbol, pretty\n+from sympy.abc import n, a\n+\n+def test_issue_14814():\n+    # Original test cases for issue #14814\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+    assert pretty(x + y) == \"x + y*\"\n+    assert pretty(-a*x + -2*y*y) == \"-a*x -2*y**y*\"\n+\n+    # Additional test cases for thorough testing\n+    z = MatrixSymbol('z$', n, n)\n+    assert pretty(x + z) == \"x + z$\"\n+    assert pretty(z - y) == \"-y* + z$\"\n+    assert pretty(-z + y) == \"-z$ + y*\"\n+    assert pretty(z + y - x) == \"-x + y* + z$\"\n+\n+    # Test with negative coefficients\n+    assert pretty(-2*x + 3*y) == \"-2*x + 3*y*\"\n+    assert pretty(3*y - 2*x) == \"-2*x + 3*y*\"\n+    assert pretty(-a*x - 3*z) == \"-a*x -3*z$\"\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..9a53b24 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -728,7 +728,38 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n \n-def test_python_keywords():\n+def test_curly_matrix_symbol():\n+    # Import necessary components\n+    import sympy as sy\n+    from sympy import lambdify\n+\n+    # Test for issue #15009\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+\n+    # Test without dummify\n+    try:\n+        lam = lambdify(curlyv, curlyv)\n+        result = lam([[1], [1]])\n+        assert result == [[1], [1]], \"Test failed for curlyv without dummify\"\n+    except SyntaxError:\n+        assert False, \"SyntaxError was raised without dummify\"\n+\n+    # Test with dummify=True\n+    try:\n+        lam = lambdify(curlyv, curlyv, dummify=True)\n+        result = lam([[1], [1]])\n+        assert result == [[1], [1]], \"Test failed for curlyv with dummify=True\"\n+    except SyntaxError:\n+        assert False, \"SyntaxError was raised with dummify=True\"\n+\n+    # Additional test for different configurations\n+    curly_scalar = sy.symbols(\"{x}\")\n+    curly_scalar_lam = lambdify(curly_scalar, curly_scalar, dummify=True)\n+    assert curly_scalar_lam(1) == 1, \"Curly scalar test failed\"\n+    \n+    standardv = sy.MatrixSymbol(\"v\", 2, 1)\n+    standardv_lam = lambdify(standardv, standardv)\n+    assert standardv_lam([[1], [1]]) == [[1], [1]], \"Standard matrix symbol test failed\"\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n     # functions. This is an additional regression test.\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..c313bc4 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -29,8 +30,15 @@ def test_Function():\n     assert mcode(sin(x) ** cos(x)) == \"Sin[x]^Cos[x]\"\n     assert mcode(conjugate(x)) == \"Conjugate[x]\"\n \n-\n-def test_Pow():\n+def test_Max_Min():\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[x, 2]\"\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    assert mcode(Max(3, y, x)) == \"Max[3, y, x]\"\n+    assert mcode(Max(x)) == \"Max[x]\"\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(2, x)) == \"Min[x, 2]\"\n+    assert mcode(Max(x, y) + Min(x, y)) == \"Max[x, y] + Min[x, y]\"\n     assert mcode(x**3) == \"x^3\"\n     assert mcode(x**(y**3)) == \"x^(y^3)\"\n     assert mcode(1/(f(x)*3.5)**(x - y**x)/(x**2 + y)) == \\\n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..fe3306f 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,23 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+def test_indexed_matrix_expression_latex():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    # Original test case to verify the fix\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+\n+    # Additional test cases\n+    P = MatrixSymbol(\"P\", k, k)\n+    assert latex((M*P*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} \\sum_{i_{2}=0}^{k - 1} M_{i, i_{1}} P_{i_{1}, i_{2}} N_{i_{2}, j}'\n+\n+    Q = MatrixSymbol(\"Q\", 1, k)\n+    R = MatrixSymbol(\"R\", k, 1)\n+    assert latex((Q*R)[0, 0]) == r'\\sum_{i_{1}=0}^{k - 1} Q_{0, i_{1}} R_{i_{1}, 0}'\n+\n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..ad48c92 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, Eq, exp\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -9,7 +10,15 @@ def test_idiff():\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n-    # the use of idiff in ellipse also provides coverage\n+    f = Function('f')\n+    g = Function('g')\n+    \n+    # Test cases from the issue description\n+    assert idiff(Eq(y * exp(y), x * exp(x)), y, x) == (x + 1) * exp(x - y) / (y + 1)\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x) == (x + 1) * exp(x - f(x)) / (f(x) + 1)\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n     circ = x**2 + y**2 - 4\n     ans = -3*x*(x**2 + y**2)/y**5\n     assert ans == idiff(circ, y, x, 3).simplify()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..095d237 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,7 +582,35 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n-def test_empty_f_code():\n+from sympy.utilities.autowrap import autowrap\n+from sympy import MatrixSymbol\n+import numpy as np\n+\n+def test_ccode_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n+def test_autowrap_cython_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n     assert source == \"\"\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..a0ec6b3 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -339,10 +339,31 @@ def test_intersection():\n \n     assert Intersection(S.Complexes, FiniteSet(S.ComplexInfinity)) == S.EmptySet\n \n+    # Test for issue where Intersection should remove duplicates and handle symbolic elements\n+    x = symbols('x')\n+\n+    # Test where duplicates are present and result is expected to be Piecewise\n+    result = Intersection({1}, {1}, {x})\n+    expected = Piecewise((FiniteSet(1), Eq(x, 1)), (EmptySet(), True))\n+    assert result == expected, f\"Expected {expected}, got {result}\"\n+\n+    # Test where duplicates are removed\n+    result = Intersection({1}, {1}, {2}, {x})\n+    expected = Piecewise((EmptySet(), True))  # because no intersection possible with {2} and {x}\n+    assert result == expected, f\"Expected {expected}, got {result}\"\n+\n+    # Test with no duplicates and symbolic\n+    result = Intersection({1}, {2}, {x})\n+    expected = EmptySet()\n+    assert result == expected, f\"Expected {expected}, got {result}\"\n+\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n \n+from sympy import symbols, Eq, FiniteSet, Intersection, Piecewise\n+from sympy.sets import EmptySet\n+\n def test_issue_9623():\n     n = Symbol('n')\n \n",
  "sympy__sympy-17022": "",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..ce09761 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -801,6 +801,14 @@ def test_nc_simplify():\n     # commutative expressions should be returned without an error\n     assert nc_simplify(2*x**2) == 2*x**2\n \n+def test_issue_17137():\n+    x = Symbol('x')\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    assert simplify(cos(x)**(1 + 2*I)) == cos(x)**(1 + 2*I)\n+    assert simplify(sin(x)**(1 + I)) == sin(x)**(1 + I)\n+    assert simplify(exp(I*x)) == exp(I*x)\n+\n def test_issue_15965():\n     A = Sum(z*x**y, (x, 1, a))\n     anew = z*Sum(x**y, (x, 1, a))\n@@ -814,4 +822,4 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..3184164 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,12 +1,29 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n+from sympy import sympify\n from sympy.utilities.pytest import raises, warns\n \n+def test_multiplication_order():\n+    p1 = Point(0, 0)\n+    p2 = Point(1, 1)\n+    scalar = sympify(2.0)\n+\n+    # Both expressions should yield the same result\n+    assert (p1 + p2 * scalar) == (p1 + scalar * p2)\n+\n+    # Additional checks for ensuring that no exception is raised\n+    try:\n+        result1 = p1 + p2 * scalar\n+        result2 = p1 + scalar * p2\n+    except Exception as e:\n+        assert False, f\"Multiplication raised an exception: {e}\"\n \n-def test_point():\n+    assert result1 == Point(2, 2)\n+    assert result2 == Point(2, 2)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..caf69f9 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,36 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, Symbol, sympify, parse_expr\n+from sympy.core.sympify import SympifyError\n+from sympy.utilities.pytest import raises\n+\n+def test_sympy_eq_does_not_eval_repr():\n+    x = symbols('x')\n+\n+    # Test to ensure no AttributeError is raised due to 'eval' in __eq__\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+\n+    # This should not raise an AttributeError\n+    assert (x == C()) is False\n+\n+    class C2:\n+        def __repr__(self):\n+            return 'x'\n+\n+    # Ensure that an object whose repr is 'x' is not considered equal\n+    assert (x == C2()) is False\n+\n+    # General checks for comparison with non-expressions\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+\n+    # Testing with sympify to ensure it handles representation correctly\n+    assert (x == sympify('x')) is True\n+    assert (x != sympify('y')) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1932,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..71eb7c6 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,6 +553,18 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n+def test_issue_18186():\n+    from sympy.abc import m, n\n+\n+    # Test with sym order as (m, n)\n+    result_mn = diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m, n), permute=True)\n+    expected_mn = {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert result_mn == expected_mn, f\"Expected {expected_mn}, but got {result_mn}\"\n+\n+    # Test with sym order as (n, m)\n+    result_nm = diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n, m), permute=True)\n+    expected_nm = {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert result_nm == expected_nm, f\"Expected {expected_nm}, but got {result_nm}\"\n \n def test_general_pythagorean():\n     from sympy.abc import a, b, c, d, e\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..ef094f0 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -66,7 +67,7 @@ def test_sizeof():\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n-    assert all(atom == typename for atom in sz.atoms())\n+    assert sz.atoms() == {String(typename), String('sizeof')}\n \n \n def test_struct():\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..bb09cbe 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,13 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_single_element_conversion():\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..36d4dea 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n@@ -83,7 +84,21 @@ def test_block_index():\n     assert BI.as_explicit().equals(eye(6))\n \n \n-def test_slicing():\n+def test_block_matrix_issue():\n+    from sympy import MatrixSymbol, BlockMatrix, symbols, MatrixElement\n+    n, m = symbols('n m', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    \n+    # Test for correct behavior based on issue description\n+    assert C[0, 0] == A[0, 0]  # Should be the same as the element in A\n+    assert C[n, 0] == B[0, 0]  # Should be the same as the element in B\n+    assert C[n + m - 1, 0] == MatrixElement(C, n + m - 1, 0)\n+\n+    D = BlockMatrix([[A, A], [B.T, B.T]])\n+    assert D[n, 0] == B[0, 0]  # First element of B transposed\n+    assert D[0, 1] == A[0, 0]  # Second element in first block row\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..0328299 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -200,7 +200,23 @@ def test_im():\n     X = FunctionMatrix(3, 3, Lambda((n, m), n + m*I))\n     assert im(X) == Matrix([[0, 1, 2], [0, 1, 2], [0, 1, 2]])\n \n+from sympy import Abs, Piecewise, Eq, Function\n+\n def test_sign():\n+    # Test rewrite of sign using Abs\n+    x = Symbol('x')\n+    y = Symbol('y', real=True)\n+    z = Symbol('z', complex=True)\n+\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+    assert sign(z).rewrite(Abs) == Piecewise((0, Eq(z, 0)), (z/Abs(z), True))\n+\n+    # Test specific numeric values\n+    assert sign(0).rewrite(Abs) == 0\n+    assert sign(5).rewrite(Abs) == 5/Abs(5)\n+    assert sign(-5).rewrite(Abs) == -5/Abs(-5)\n+    assert sign(3 + 4*I).rewrite(Abs) == (3 + 4*I)/Abs(3 + 4*I)\n     assert sign(1.2) == 1\n     assert sign(-1.2) == -1\n     assert sign(3*I) == I\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..3bac309 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -513,8 +513,28 @@ def test_partitions():\n             i += 1\n         assert i == RGS_enum(n)\n \n-\n-def test_binary_partitions():\n+def test_partitions_uniqueness():\n+    # Test that each partition is a unique dictionary (not reused)\n+    generated_partitions = list(partitions(4))\n+    for i, p1 in enumerate(generated_partitions):\n+        for j, p2 in enumerate(generated_partitions):\n+            if i != j:\n+                assert p1 is not p2, f\"Partition dictionaries at index {i} and {j} are the same object!\"\n+            # Making a change in one should not affect the other\n+            p1_copy = p1.copy()\n+            p1_copy[1] = 99\n+            assert p1_copy != p2, f\"Modification in partition at index {i} affected partition at index {j}!\"\n+\n+    # Test with size option\n+    generated_partitions_with_size = list(partitions(4, size=True))\n+    for i, (_, p1) in enumerate(generated_partitions_with_size):\n+        for j, (_, p2) in enumerate(generated_partitions_with_size):\n+            if i != j:\n+                assert p1 is not p2, f\"Partition dictionaries at index {i} and {j} are the same object!\"\n+            # Making a change in one should not affect the other\n+            p1_copy = p1.copy()\n+            p1_copy[1] = 88\n+            assert p1_copy != p2, f\"Modification in partition at index {i} affected partition at index {j}!\"\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n         [4, 2, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2],\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..1980d84 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -254,6 +254,14 @@ def test_power_rewrite_exp():\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n \n+from sympy import S, oo, zoo, Pow, power\n+\n+def test_issue_19572():\n+    # Test cases to verify the fix for issue 19572\n+    assert 0 ** -oo == zoo\n+    assert power(0, -oo) == zoo\n+    assert Pow(0, -oo) == zoo\n+\n def test_zero():\n     x = Symbol('x')\n     y = Symbol('y')\n",
  "sympy__sympy-20442": "",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..1da3e04 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,17 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+from sympy import Symbol\n+from pytest import raises\n+\n+def test_symbol_no_dict():\n+    s = Symbol('s')\n+    # In SymPy 1.6.2, this should raise an AttributeError\n+    # because Symbols are now expected not to have a __dict__\n+    assert not hasattr(s, '__dict__')\n+    with raises(AttributeError):\n+        s.__dict__\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..f5fa0ac 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, Integral, oo, sin, exp)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -161,7 +162,23 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_issue_refine_complex_arguments():\n+    a = Symbol('a', real=True)\n+    x = Symbol('x')\n+    \n+    J = Integral(sin(x) * exp(-a * x), (x, 0, oo))\n+    result = J.doit()\n+\n+    # Test that refine simplifies the piecewise condition for a positive real number\n+    refined_result = refine(result, Q.positive(a))\n+    assert refined_result == 1/(a**2 + 1)\n+\n+    # Test refine on abs and arg functions with positive assumption\n+    assert refine(abs(a), Q.positive(a)) == a\n+    assert refine(arg(a), Q.positive(a)) == 0\n+\n+    # Verify behavior with negative argument\n+    assert refine(arg(a), Q.negative(a)) == pi\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/functions/elementary/tests/test_piecewise.py b/sympy/functions/elementary/tests/test_piecewise.py\nindex 400b22e..c25a864 100644\n--- a/sympy/functions/elementary/tests/test_piecewise.py\n+++ b/sympy/functions/elementary/tests/test_piecewise.py\n@@ -94,6 +94,24 @@ def test_piecewise1():\n     p5 = Piecewise( (0, Eq(cos(x) + y, 0)), (1, True))\n     assert p5.subs(y, 0) == Piecewise( (0, Eq(cos(x), 0)), (1, True))\n \n+def test_issue_21373():\n+    from sympy.functions.elementary.hyperbolic import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    # Verify no PolynomialError is raised\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})\n+\n+    expr_without_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    assert expr_without_exp.subs({1: 1.0}) == expr_without_exp.subs({1: 1.0})\n+\n+    expr_with_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_with_cosh.subs({1: 1.0}) == expr_with_cosh.subs({1: 1.0})\n+\n+    expr_with_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_with_tanh.subs({1: 1.0}) == expr_with_tanh.subs({1: 1.0})\n+\n     assert Piecewise((-1, y < 1), (0, x < 0), (1, Eq(x, 0)), (2, True)\n         ).subs(x, 1) == Piecewise((-1, y < 1), (2, True))\n     assert Piecewise((1, Eq(x**2, -1)), (2, x < 0)).subs(x, I) == 1\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..1588c9a 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -5,6 +6,7 @@ from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n+from sympy.core.function import Derivative\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n \n@@ -34,7 +36,10 @@ def test_Symbol_kind():\n     assert comm_x.kind is NumberKind\n     assert noncomm_x.kind is UndefinedKind\n \n-def test_Integral_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n     A = MatrixSymbol('A', 2,2)\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..f4cf0ef 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -130,6 +130,20 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 1])) == {S.One, x, y, x*y, x**2, x**2*y}\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n+    # Test cases for the issue with itermonomials when using min_degrees argument\n+\n+    # Test case: Monomials with total degree exactly 3 for commutative variables\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    monomials_degree_3 = set(itermonomials([x1, x2, x3], 3, 3))\n+    assert monomials_degree_3 == {x1**3, x2**3, x3**3, x1**2 * x2, x1**2 * x3, x1 * x2**2, x1 * x3**2,\n+                                  x2**2 * x3, x2 * x3**2, x1 * x2 * x3}\n+\n+    # Test case: Monomials with total degree from 2 to 3\n+    monomials_degree_2_to_3 = set(itermonomials([x1, x2, x3], 3, 2))\n+    expected_monomials_degree_2_to_3 = {x1**2, x2**2, x3**2, x1 * x2, x1 * x3, x2 * x3, x1**3, x2**3, x3**3,\n+                                         x1**2 * x2, x1**2 * x3, x1 * x2**2, x1 * x3**2, x2**2 * x3, x2 * x3**2,\n+                                         x1 * x2 * x3}\n+    assert monomials_degree_2_to_3 == expected_monomials_degree_2_to_3\n \n     i, j, k = symbols('i j k', commutative=False)\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..216c9c1 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -49,6 +50,10 @@ def test_solve_poly_system():\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n \n+def test_issue_infinite_solution_detection():\n+    # Test cases to verify the fix for detecting infinite solutions\n+    raises(NotImplementedError, lambda: solve_poly_system([x - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system([y - 1], (x, y)))\n \n def test_solve_biquadratic():\n     x0, y0, x1, y1, r = symbols('x0 y0 x1 y1 r')\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..5d5d3f6 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,6 @@\n+\n from sympy.core.basic import Basic\n+from sympy.core.parameters import evaluate\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n@@ -11,8 +13,27 @@ from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n \n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        Point(1, 2)\n+\n+def test_issue_22684_extended():\n+    # Testing with sympify directly\n+    with evaluate(False):\n+        assert sympify('Point2D(Integer(1),Integer(2))') == Point(1, 2)\n+\n+    # Testing with different integers\n+    with evaluate(False):\n+        assert sympify('Point2D(Integer(3),Integer(4))') == Point(3, 4)\n+\n+    # Testing without evaluate(False) to ensure normal functionality\n+    assert sympify('Point2D(Integer(1),Integer(2))') == Point(1, 2)\n \n-def test_point():\n+    # Ensure imaginary coordinates raise a ValueError\n+    raises(ValueError, lambda: Point(I, 2))\n+    raises(ValueError, lambda: Point(1, I))\n+    raises(ValueError, lambda: Point(I, I))\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..f4de51e 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -346,8 +346,25 @@ def test_cse_MatrixSymbol():\n     n = symbols('n', integer=True)\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n-\n-def test_cse_MatrixExpr():\n+def test_cse_MatrixSymbol_indexing():\n+    from sympy import symbols, MatrixSymbol, Matrix, cse\n+    \n+    # Create matrices using MatrixSymbol\n+    a = MatrixSymbol(\"a\", 4, 4)\n+    b = MatrixSymbol(\"b\", 4, 4)\n+    \n+    # Create a symbolic expression using the matrices\n+    expr = a * b\n+\n+    # Perform CSE on the expression\n+    cse_subs, cse_reduced = cse(expr)\n+    \n+    # Ensure that CSE does not introduce unnecessary substitutions\n+    # Specifically, ensure that it doesn't create unnecessary copies like x0 = a, x1 = b\n+    assert not any(isinstance(sub[1], MatrixSymbol) for sub in cse_subs)\n+\n+    # Verify that the simplified expression is equivalent to the original\n+    assert Matrix(cse_reduced[0]).shape == (4, 4)\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..2a17744 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -17,6 +18,12 @@ array_types = [\n     MutableSparseNDimArray\n ]\n \n+def test_empty_array_creation():\n+    for array_type in array_types:\n+        A = array_type([])\n+        assert isinstance(A, array_type)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n \n def test_array_negative_indices():\n     for ArrayType in array_types:\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..11716f7 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,9 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n@@ -1182,7 +1185,13 @@ def test_lambdify_inspect():\n     assert 'x**2' in inspect.getsource(f)\n \n \n-def test_issue_14941():\n+def test_python_code_printer_single_element_tuple():\n+    # Test for issue where a single-element tuple loses its comma in code generation\n+    f2b = lambdify([], (1,))  # Reference to issue\n+    assert f2b() == (1,)\n+    # Verify the source code to ensure the comma is present\n+    source_code = inspect.getsource(f2b)\n+    assert 'return (1,)' in source_code\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..90edba9 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,7 +541,28 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    \n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..bc753c2 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,8 +45,25 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n-\n-def test_tensor_product_commutator():\n+def test_tensor_product_expand():\n+    assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n+        TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n+        \n+    # Tests for issue fix\n+    assert TP(A-B, B-A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+        \n+    # Additional test cases\n+    assert TP(3*A - 4*B, B + C).expand(tensorproduct=True) == \\\n+        3 * TP(A, B) + 3 * TP(A, C) - 4 * TP(B, B) - 4 * TP(B, C)\n+    assert TP(5 * A * B, C - D).expand(tensorproduct=True) == \\\n+        5 * TP(A*B, C) - 5 * TP(A*B, D)\n+    assert TP(A + B, 2*C - 3*D).expand(tensorproduct=True) == \\\n+        2 * TP(A, C) - 3 * TP(A, D) + 2 * TP(B, C) - 3 * TP(B, D)\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..2049bd2 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,7 +563,47 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24211():\n+    from sympy.physics.units import time, velocity, acceleration, second, meter, Quantity\n+    from sympy.physics.units.systems.si import SI\n+\n+    # Original test patch to ensure the fix does not regress\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+    # New test cases to ensure thorough verification\n+    V2 = Quantity('V2')\n+    SI.set_quantity_dimension(V2, velocity)\n+    SI.set_quantity_scale_factor(V2, 2 * meter / second)\n+    A2 = Quantity('A2')\n+    SI.set_quantity_dimension(A2, acceleration)\n+    SI.set_quantity_scale_factor(A2, -9.8 * meter / second**2)\n+    T2 = Quantity('T2')\n+    SI.set_quantity_dimension(T2, time)\n+    SI.set_quantity_scale_factor(T2, 5 * second)\n+\n+    expr2 = A2*T2 + V2\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr2)\n+\n+    expr3 = V1 + V2\n+    # Adding velocities directly should be fine\n+    SI._collect_factor_and_dimension(expr3)\n+\n+    expr4 = A1 + A2\n+    # Adding accelerations directly should be fine\n+    SI._collect_factor_and_dimension(expr4)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..5580462 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, volt\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +28,12 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+    # Additional test cases for the bug with milli prefix\n+    assert milli * W == W / 1000  # milli watt should equal 1/1000 of a watt\n+    assert W * milli == W / 1000  # watt * milli should also equal 1/1000 of a watt\n+    assert milli * volt == volt / 1000  # milli volt should equal 1/1000 of a volt\n+    assert volt * milli == volt / 1000  # volt * milli should also equal 1/1000 of a volt\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "",
  "django__django-13033": "diff --git a/tests/ordering/models.py b/tests/ordering/models.py\nindex ec1f9e4..c55f9cf 100644\n--- a/tests/ordering/models.py\n+++ b/tests/ordering/models.py\n@@ -6,6 +6,21 @@ should be a list or tuple of field names. This tells Django how to order\n ``QuerySet`` results.\n \n If a field name in ``ordering`` starts with a hyphen, that field will be\n+from django.db import models\n+\n+class OneModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"self\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+    class Meta:\n+        ordering = (\"-id\",)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n+\n ordered in descending order. Otherwise, it'll be ordered in ascending order.\n The special-case field name ``\"?\"`` specifies random order.\n \n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..f14ea5f 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,6 +3202,28 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n+    def test_checkboxselectmultiple_subwidget_id_for_label_override(self):\n+        \"\"\"\n+        Verify that the id_for_label uses the overridden id set in the widget's attributes.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('option1', 'Option 1'), ('option2', 'Option 2')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        # Test with a custom id pattern\n+        form = SomeForm(auto_id='customprefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'customprefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'customprefix_field_1')\n+\n+        # Test with a specific id set in widget.attrs\n+        form['field'].field.widget.attrs['id'] = 'explicit_id'\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'explicit_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'explicit_id_1')\n+\n     def test_boundfield_widget_type(self):\n         class SomeForm(Form):\n             first_name = CharField()\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..eb53246 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,10 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib.colors import LogNorm, Normalize\n+import numpy as np\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n@@ -658,7 +662,28 @@ def test_colorbar_scale_reset():\n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n \n-def test_colorbar_get_ticks_2():\n+def test_update_colorbar_after_changing_norm():\n+    # Create a random image with log-normal distribution\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    fig, ax = plt.subplots()\n+    # Display the image\n+    plot = ax.imshow(img, cmap='gray')\n+    # Add a colorbar\n+    cb = fig.colorbar(plot, ax=ax)\n+    \n+    # Change the norm of the mappable to LogNorm\n+    plot.set_norm(LogNorm())\n+\n+    # Update the colorbar to reflect the new norm\n+    cb.update_normal(plot)\n+    \n+    # Draw the canvas to ensure updates take effect\n+    fig.canvas.draw()\n+    \n+    # Assert that the colorbar scale has been updated to log\n+    # Verify that the first tick label matches the expected format for LogNorm\n+    assert cb.ax.yaxis.get_ticklabels()[0].get_text() == '$\\\\mathdefault{10^{0}}$'\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n     pc = ax.pcolormesh([[.05, .95]])\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..396f23b 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3045,7 +3045,13 @@ class TestDataset:\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n \n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_to_stacked_array_to_unstacked_dataset_single_dim(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..2bddc8c 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,30 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with a custom transformer and pandas output.\"\"\"\n+    import pandas as pd\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X, y=None):\n+            return self\n+\n+        def transform(self, X, y=None):\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    # Set output to pandas\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())]).set_output(transform=\"pandas\")\n+\n+    # Perform fit_transform\n+    transformed_data = union.fit_transform(data)\n+    \n+    # Check if transformation was successful and had the expected number of rows\n+    assert transformed_data.shape[0] == data[\"date\"].nunique()\n",
  "sphinx-doc__sphinx-8801": "",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..448a1e6 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -9,6 +10,14 @@ from sympy.utilities.pytest import XFAIL\n from sympy.abc import x, y, z, t, a, b, c, d, e, f, g, h, i, k\n \n \n+def test_issue_15129_trigsimp_methods():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = t1.dot(t3)\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == sin(S(3)/50)\n \n def test_trigsimp1():\n     x, y = symbols('x,y')\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..e9bcd98 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,38 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_issue_bad_centering_sum_pretty_print():\n+    from sympy import Sum, oo, pprint\n+    from sympy.abc import x\n \n-def test_units():\n+    # Expression with alignment issue\n+    expr = Sum(x, (x, 1, oo)) + 3\n+\n+    # Expected pretty print output where `x` and `+ 3` are aligned\n+    expected_ascii = \\\n+\"\"\"\\\n+  oo   \\n\\\n+ ___   \\n\\\n+ \\\\  `  \\n\\\n+  \\\\   x\\n\\\n+  /     + 3\\n\\\n+ /__,  \\n\\\n+x = 1  \\\n+\"\"\"\n+    expected_unicode = \\\n+u(\"\"\"\\\n+  \u221e    \\n\\\n+ ___   \\n\\\n+ \u2572     \\n\\\n+  \u2572   x\\n\\\n+  \u2571     + 3\\n\\\n+ \u2571     \\n\\\n+ \u203e\u203e\u203e   \\n\\\n+x = 1  \\\n+\"\"\")\n+\n+    assert pretty(expr) == expected_ascii\n+    assert upretty(expr) == expected_unicode\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..5cd6cdf 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,9 +1,11 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n from operator import attrgetter\n \n from django.core.exceptions import FieldError\n+from django.db.models import Max\n from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..313d232 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,6 +546,25 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n+    def test_subquery_sql_validity(self):\n+        # Setup the initial query and subquery\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        \n+        # Check the initial state of the subquery attribute\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        \n+        # Obtain SQL through the compiler\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        \n+        # Verify that the generated SQL starts with '(SELECT ' and ends with ')'\n+        self.assertTrue(sql.startswith('(SELECT '))\n+        self.assertTrue(sql.endswith(')'))\n+        \n+        # Check that the original query's subquery attribute has not been affected\n+        self.assertIs(employees.query.subquery, False)\n+\n     def test_uuid_pk_subquery(self):\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..ba76673 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,34 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_wrong_select_related(self):\n+        # This test case reproduces the issue mentioned in the problem statement\n+        with self.assertNumQueries(3):\n+            p = list(PoolStyle.objects.annotate(\n+                tournament_pool=FilteredRelation('pool__tournament__pool'),\n+            ).select_related('tournament_pool'))\n+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\n+\n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n+\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +192,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..1bdcb89 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -5,7 +6,9 @@ from pathlib import Path\n import platform\n from threading import Timer\n from types import SimpleNamespace\n-import warnings\n+import pickle\n+import matplotlib.pyplot as plt\n+import pytest\n \n import numpy as np\n import pytest\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..a9f720a 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,7 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+from seaborn import PairGrid, scatterplot, regplot\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,7 +1625,18 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_with_hue_in_map(self):\n+        # Load the iris dataset\n+        iris = sns.load_dataset(\"iris\")\n+        \n+        # Attempt to create a PairGrid with scatterplot and hue in map\n+        try:\n+            g = PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            print(\"PairGrid plot created successfully without errors.\")\n+        except Exception as e:\n+            pytest.fail(f\"PairGrid with hue in map raised an exception: {e}\")\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..a774322 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -347,6 +347,19 @@ def test_excinfo_str():\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n \n+def test_raises_context_str_behavior():\n+    import pytest\n+    \n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    \n+    # str(excinfo) should not return the full message; it should be a representation of ExceptionInfo\n+    assert str(excinfo).startswith(\"<ExceptionInfo LookupError\")\n+    \n+    # str(excinfo.value) should return the full message\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n+\n+\n def test_excinfo_for_later():\n     e = ExceptionInfo.for_later()\n     assert \"for raises\" in repr(e)\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..c41c0fd 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,11 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+        # Adding test for the short option --co\n+        result_short = testdir.runpytest(\"--co\")\n+        result_short.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -434,6 +439,11 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n+        # Adding test for the short option --co\n+        result_short = testdir.runpytest(\"--co\")\n+        result_short.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..31fd36f 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -91,6 +91,17 @@ def missing_attr(c,\n     return a + (b or \"\")\n \n \n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n+\n class _ClassWithDocumentedInit:\n     \"\"\"Class docstring.\"\"\"\n \n@@ -98,4 +109,4 @@ class _ClassWithDocumentedInit:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..25458f5 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,20 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+def test_Identity_total_sum():\n+    from sympy import Sum, Symbol, symbols, MatrixSymbol, Identity\n+    from sympy.abc import n\n \n-def test_Identity_doit():\n+    i, j = symbols('i j', integer=True)\n+    # Create an identity matrix of size n x n\n+    In = Identity(n)\n+\n+    # Test that the total sum of the elements is n\n+    total_sum = Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+    assert total_sum == n, f\"Expected total sum to be {n}, but got {total_sum}\"\n+\n+    # Test for a specific size such as n=3\n+    assert total_sum.subs(n, 3) == 3\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..83097ea 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,7 +251,19 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n-# These bad LaTeX strings should raise a LaTeXParsingError when parsed\n+def test_latex_fraction_parsing():\n+    from sympy.parsing.latex import parse_latex\n+    from sympy import Symbol, Rational\n+\n+    a = Symbol('a')\n+    b = Symbol('b')\n+    c = Symbol('c')\n+\n+    # Test LaTeX string with nested fractions\n+    latex_str = r\"\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}\"\n+    expected_expr = ((a**3 + b)/c)/(1/(c**2))\n+\n+    assert parse_latex(latex_str) == expected_expr\n BAD_STRINGS = [\n     r\"(\",\n     r\")\",\n"
}