{
  "astropy__astropy-12907": "",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..06aedb6 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,8 +1,71 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n from astropy.io import ascii\n+from astropy.table import QTable\n+import astropy.units as u\n+import numpy as np\n+from io import StringIO\n+\n+def test_rst_with_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n+\n+\n+def test_rst_header_rows_only_name():\n+    \"\"\"Test writing RST with only name in header_rows\"\"\"\n+    tbl = QTable({'wave': [350, 950] * u.nm, 'response': [0.7, 1.2] * u.count})\n+    tbl['ints'] = [1, 2]\n+\n+    out = StringIO()\n+    tbl.write(out, format='ascii.rst', header_rows=['name'])\n+    expected = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"======= ======== ====\",\n+        \"  350.0      0.7    1\",\n+        \"  950.0      1.2    2\",\n+        \"======= ======== ====\",\n+    ]\n+    assert out.getvalue().splitlines() == expected\n+\n+\n+def test_rst_with_no_header_rows():\n+    \"\"\"Test writing RST with no header_rows specified\"\"\"\n+    tbl = QTable({'wave': [350, 950] * u.nm, 'response': [0.7, 1.2] * u.count})\n+\n+    out = StringIO()\n+    tbl.write(out, format='ascii.rst')\n+    expected = [\n+        \"===== ========\",\n+        \" wave response\",\n+        \"===== ========\",\n+        \"350.0      0.7\",\n+        \"950.0      1.2\",\n+        \"===== ========\",\n+    ]\n+    assert out.getvalue().splitlines() == expected\n \n from .common import assert_almost_equal, assert_equal\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..9a6ca40 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -42,8 +42,49 @@ def test_get_tables_from_qdp_file(tmp_path):\n     assert table2.meta[\"comments\"][0].startswith(\"WT -- hardness\")\n     assert np.isclose(table2[\"MJD_nerr\"][0], -2.37847222222222e-05)\n \n+import pytest\n+from astropy.utils.exceptions import AstropyUserWarning\n+\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_roundtrip(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n+    ! Columns are as labelled\n+    READ TERR 1\n+    READ SERR 2\n+    ! WT -- hard data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   NO       0.212439\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000\n+    NO NO NO NO NO\n+    ! WT -- soft data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   0.726155        0.583890\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   2.410935        1.393592\n+    NO NO NO NO NO\n+    ! WT -- hardness ratio\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    ! Add command, just to raise the warning.\n+    READ TERR 1\n+    ! WT -- whatever\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    NO 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    \"\"\"\n \n-def test_roundtrip(tmp_path):\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n     example_qdp = \"\"\"\n     ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n     ! Columns are as labelled\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..52468d8 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,45 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+import pytest\n+\n+def test_nddata_bitmask_arithmetic_issue():\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..1737c28 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -254,6 +254,24 @@ class TestTableFunctions(FitsTestCase):\n \n         t.close()\n \n+    def test_d_format_exponent_replacement(self):\n+        # Test to ensure correct replacement of 'E' with 'D' in exponent notation\n+        # in ASCII table columns with 'D' format\n+\n+        r1 = np.array([1.23e4, 5.67e8, 9.01e12])\n+        c1 = fits.Column(name='def', format='D', array=r1)\n+        hdu = fits.TableHDU.from_columns([c1])\n+        hdu.writeto(self.temp('test_d_format.fits'), overwrite=True)\n+\n+        with open(self.temp('test_d_format.fits')) as f:\n+            file_content = f.read()\n+            assert '1.23D+04' in file_content\n+            assert '5.67D+08' in file_content\n+            assert '9.01D+12' in file_content\n+\n+        with fits.open(self.temp('test_d_format.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data)\n+\n     def test_ascii_table(self):\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..a4f4b9d 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1102,8 +1102,19 @@ class OverrideSettingsTests(SimpleTestCase):\n         self.assertIsNone(default_storage.file_permissions_mode)\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Check that default FILE_UPLOAD_PERMISSIONS is set to 0o644.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n \n-    def test_override_file_upload_directory_permissions(self):\n+    def test_custom_file_upload_permissions(self):\n+        \"\"\"\n+        Test that custom FILE_UPLOAD_PERMISSIONS are applied correctly.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=0o600):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o600)\n         \"\"\"\n         Overriding the FILE_UPLOAD_DIRECTORY_PERMISSIONS setting should be\n         reflected in the directory_permissions_mode attribute of\n",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..f1c82ab 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,7 +75,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +84,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..20001b3 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            'en\\u2013dash', 'trailingnewline\\n',\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -248,6 +249,30 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n+    def test_unicode_validator_with_trailing_newline(self):\n+        invalid_usernames = ['user\\n', 'Ren\u00e9\\n', '\u1d2e\u1d35\u1d33\u1d2e\u1d35\u1d3f\u1d30\\n', '\u0623\u062d\u0645\u062f\\n']\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator_with_trailing_newline(self):\n+        invalid_usernames = ['glenn\\n', 'GLEnN\\n', 'jean-marc\\n']\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+        v = validators.UnicodeUsernameValidator()\n+        for valid in valid_usernames:\n+            with self.subTest(valid=valid):\n+                v(valid)\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n@@ -258,4 +283,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..6dfff20 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -366,6 +366,11 @@ class HttpResponseTests(unittest.TestCase):\n         r.content = 12345\n         self.assertEqual(r.content, b'12345')\n \n+    def test_memoryview_content(self):\n+        # This test checks if HttpResponse correctly handles memoryview objects\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_iter_content(self):\n         r = HttpResponse(['abc', 'def', 'ghi'])\n         self.assertEqual(r.content, b'abcdefghi')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..8c484cf 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,7 +1,9 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n+from django.db.models.deletion import Collector\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n from .models import (\n@@ -464,6 +466,14 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n     def test_fast_delete_qs(self):\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..dd68c49 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,9 +1,11 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n+from django.test.utils import captured_stdout\n \n from .models import Proxy, UserProxy\n \n@@ -140,7 +142,46 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n-    def test_user_keeps_same_permissions_after_migrating_backward(self):\n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Permissions may already exist:\n+\n+        - Old workaround was to manually create permissions for proxy models.\n+        - Model may have been concrete and then converted to proxy.\n+\n+        Output a reminder to audit relevant permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_update_proxy_permissions_resolves_duplicate_key_issue(self):\n+        \"\"\"\n+        Test the update_proxy_permissions function to ensure\n+        it doesn't raise IntegrityError due to duplicate permissions.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(UserProxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_userproxy',\n+            name='Can add user proxy',\n+        )\n+        try:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+            update_proxy_permissions.revert_proxy_model_permissions(apps, None)\n+        except IntegrityError:\n+            self.fail(\"update_proxy_permissions raised IntegrityError unexpectedly!\")\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n         user.user_permissions.add(self.custom_permission)\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..1e8c1b7 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -3,7 +3,10 @@ import os\n import py_compile\n import shutil\n import sys\n-import tempfile\n+import os\n+import sys\n+import shutil\n+import py_compile\n import threading\n import time\n import types\n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..841d4e1 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -141,6 +141,35 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         self.assertEqual(autoreload.iter_modules_and_files((fake_main,), frozenset()), frozenset())\n \n \n+    def test_path_with_embedded_null_bytes_in_different_places(self):\n+        # Test paths with embedded null bytes in various positions\n+        paths_with_null_bytes = [\n+            '\\x00embedded_null_byte.py',\n+            'embedded_null_byte.py\\x00',\n+            'em\\x00bedded_null_byte.py',\n+        ]\n+        for path in paths_with_null_bytes:\n+            with self.subTest(path=path):\n+                self.assertEqual(\n+                    autoreload.iter_modules_and_files((), frozenset([path])),\n+                    frozenset(),\n+                )\n+\n+    def test_multiple_paths_with_and_without_null_bytes(self):\n+        # Test a mix of paths with and without null bytes\n+        paths = [\n+            'normal_file.py',\n+            'another_normal_file.py',\n+            'weird\\x00file.py',\n+            '\\x00leading_null_byte.py',\n+        ]\n+        expected_result = frozenset([Path('normal_file.py').resolve().absolute(),\n+                                     Path('another_normal_file.py').resolve().absolute()])\n+        self.assertEqual(\n+            autoreload.iter_modules_and_files((), frozenset(paths)),\n+            expected_result,\n+        )\n+\n class TestCommonRoots(SimpleTestCase):\n     def test_common_roots(self):\n         paths = (\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..ba2a139 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1,5 +1,28 @@\n import importlib\n import inspect\n+# Mock path converter\n+class MockConverter(IntConverter):\n+    def to_python(self, value):\n+        raise Http404\n+\n+# Simple view to test with\n+def test_view(request):\n+    return HttpResponse(\"This is a test view\")\n+\n+class DebugViewTests(SimpleTestCase):\n+    @override_settings(ROOT_URLCONF=__name__, DEBUG=True)\n+    def test_technical_404_converter_raise_404(self):\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    @override_settings(DEBUG=True)\n+    def test_custom_converter_raises_404(self):\n+        with self.settings(ROOT_URLCONF=__name__):\n+            with mock.patch('django.urls.path', path('test/<mock>/', test_view, name='test-view')):\n+                response = self.client.get('/test/123/')\n+                self.assertContains(response, 'Page not found', status_code=404)\n+\n import os\n import re\n import sys\n@@ -8,6 +31,11 @@ import threading\n from io import StringIO\n from pathlib import Path\n from unittest import mock\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n+from django.test import SimpleTestCase\n+from django.http import Http404\n+from django.urls import path\n \n from django.core import mail\n from django.core.files.uploadedfile import SimpleUploadedFile\n",
  "django__django-11742": "",
  "django__django-11815": "",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..66d3884 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,9 +1,11 @@\n+\n import unittest\n from datetime import datetime\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n from django.utils.deprecation import RemovedInDjango40Warning\n+from unittest import mock\n from django.utils.http import (\n     base36_to_int, escape_leading_slashes, http_date, int_to_base36,\n     is_safe_url, is_same_domain, parse_etags, parse_http_date, quote_etag,\n@@ -316,6 +318,28 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mock(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n+\n     def test_parsing_rfc850(self):\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..e6324b1 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -40,7 +40,33 @@ class Gender(models.TextChoices):\n     __empty__ = '(Undeclared)'\n \n \n-class ChoicesTests(SimpleTestCase):\n+from django.test import TestCase\n+from django.utils.translation import gettext_lazy as _\n+from django.db import models\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class ChoicesTests(SimpleTestCase, TestCase):\n+    def setUp(self):\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_type(self):\n+        obj = self.my_object\n+        # Ensure that my_str_value is indeed a string\n+        self.assertIsInstance(obj.my_str_value, str)\n+        # Ensure that the string value corresponds to the choice value\n+        self.assertEqual(str(obj.my_str_value), \"first\")\n+\n+    def test_retrieved_object_type(self):\n+        obj = MyObject.objects.get(pk=self.my_object.pk)\n+        # Ensure that my_str_value is a string after retrieval\n+        self.assertIsInstance(obj.my_str_value, str)\n+        self.assertEqual(str(obj.my_str_value), \"first\")\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..fb37d76 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -147,9 +147,24 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+from django.db import models\n+from django.test import SimpleTestCase\n \n class GetFieldDisplayTests(SimpleTestCase):\n \n+    def test_overriding_get_FIELD_display(self):\n+        \"\"\"\n+        Test that overriding get_FIELD_display() works as expected.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n     def test_choices_and_field_display(self):\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex 12487f2..13e96dd 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -14,4 +14,5 @@ urlpatterns = [\n     re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n-]\n+    re_path(r'^module/(?P<format>(html|json|xml))?/?$', views.modules, name='modules'),\n+]\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..544f542 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,41 @@\n+\n+class OverridingInheritedFieldDisplayTests(TestCase):\n+\n+    def test_overriding_inherited_field_display(self):\n+        # Base model with a single choice\n+        class Base(models.Model):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Base A')])\n+\n+            class Meta:\n+                abstract = True\n+\n+        # Child model that overrides the choices and adds an extra choice\n+        class Child(Base):\n+            foo = models.CharField(max_length=254, choices=[('A', 'Child A'), ('B', 'Child B')])\n+\n+        # Verify that overridden choices in Child model are respected\n+        self.assertEqual(Child(foo='A').get_foo_display(), 'Child A')\n+        self.assertEqual(Child(foo='B').get_foo_display(), 'Child B')\n+\n+    def test_inherited_and_extended_choices(self):\n+        # Base model with initial choices\n+        class Base(models.Model):\n+            foo_choice = [('A', 'output1'), ('B', 'output2')]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+            class Meta:\n+                abstract = True\n+\n+        # Child model extends choices\n+        class Child(Base):\n+            foo_choice = [('A', 'output1'), ('B', 'output2'), ('C', 'output3')]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+        # Verify that the display values are correct for all options\n+        self.assertEqual(Child(field_foo='A').get_field_foo_display(), 'output1')\n+        self.assertEqual(Child(field_foo='B').get_field_foo_display(), 'output2')\n+        self.assertEqual(Child(field_foo='C').get_field_foo_display(), 'output3')\n+\n import pickle\n \n from django import forms\n",
  "django__django-12286": "",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..ac43f1b 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -5,10 +6,54 @@ from django.db import DEFAULT_DB_ALIAS, connection, connections\n from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, TestCase\n+from ..models import Object, ObjectReference\n+\n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n \n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n \n-def get_connection_copy():\n+    def test_simple_foreign_key(self):\n+        # Test deserialization with a simple foreign key relationship\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(id=1)\n+        obj_ref = ObjectReference.objects.get(id=1)\n+        self.assertEqual(obj_ref.obj, obj)\n     # Get a copy of the default connection. (Can't use django.db.connection\n     # because it'll modify the default connection itself.)\n     test_connection = copy.copy(connections[DEFAULT_DB_ALIAS])\n",
  "django__django-12497": "",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..36c089c 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1241,6 +1241,41 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.cleansed_substitute,\n         )\n \n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n     def test_cleanse_setting_recurses_in_dictionary(self):\n         reporter_filter = SafeExceptionReporterFilter()\n         initial = {'login': 'cooper', 'password': 'secret'}\n@@ -1257,6 +1292,41 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             reporter_filter.cleansed_substitute,\n         )\n \n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+\n     def test_exception_report_uses_meta_filtering(self):\n         response = self.client.get('/raises500/', HTTP_SECRET_HEADER='super_secret')\n         self.assertNotIn(b'super_secret', response.content)\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..ebdb7c3 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,7 +1759,29 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_and_unique_together(self):\n+        app_label = 'test_alter_index_unique_together'\n+        table_name = '%s_pony' % app_label\n+        # Set up initial model state with both index_together and unique_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Attempt to remove index_together and verify unique_together still exists\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..f360f5f 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -697,7 +697,23 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n-    def test_fast_delete_combined_relationships(self):\n+    def test_queryset_delete_with_foreign_keys(self):\n+        \"\"\"\n+        Test that QuerySet.delete() returns consistent results when no objects are deleted,\n+        regardless of the presence of foreign keys.\n+        \"\"\"\n+        foreign_key_model_obj = HiddenUser.objects.create()\n+        result = HiddenUser.objects.filter(id=foreign_key_model_obj.id + 1).delete()\n+        self.assertEqual(result, (0, {'delete.HiddenUser': 0}))\n+\n+    def test_queryset_delete_without_foreign_keys(self):\n+        \"\"\"\n+        Test that QuerySet.delete() returns consistent results when no objects are deleted\n+        for models without foreign keys.\n+        \"\"\"\n+        simple_model_obj = HiddenUserProfile.objects.create(user=None)\n+        result = HiddenUserProfile.objects.filter(id=simple_model_obj.id + 1).delete()\n+        self.assertEqual(result, (0, {'delete.HiddenUserProfile': 0}))\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n         origin = Origin.objects.create()\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..f2f2970 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,51 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_static_file_response_async(self):\n+        # This test verifies the async response handling\n+        application = ASGIStaticFilesHandler(ASGIHandler())\n+        scope = self.async_request_factory._base_scope(path='/static/async-file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        \n+        # Assuming async-file.txt exists in TEST_STATIC_ROOT\n+        file_path = TEST_STATIC_ROOT / 'async-file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        \n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"async-file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        await communicator.wait()\n+\n+    async def test_static_file_response_async_not_found(self):\n+        # This test handles the case where a file is not found\n+        application = ASGIStaticFilesHandler(ASGIHandler())\n+        scope = self.async_request_factory._base_scope(path='/static/nonexistent-file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 404)\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], b'')\n+        await communicator.wait()\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..058f858 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,22 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Test cases from the original test patch\n+            (' multiple---dash and  space ', 'multiple-dash-and-space', False),\n+            ('\\t whitespace-in-value \\n', 'whitespace-in-value', False),\n+            ('underscore_in-value', 'underscore_in-value', False),\n+            ('__strip__underscore-value___', 'strip__underscore-value', False),\n+            ('--strip-dash-value---', 'strip-dash-value', False),\n+            ('__strip-mixed-value---', 'strip-mixed-value', False),\n+            ('_ -strip-mixed-value _-', 'strip-mixed-value', False),\n+            \n+            # Additional test cases to ensure correct behavior\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('---Leading and trailing dashes---', 'leading-and-trailing-dashes', False),\n+            ('___Leading and trailing underscores___', 'leading-and-trailing-underscores', False),\n+            ('__--Mixed dashes and underscores--__', 'mixed-dashes-and-underscores', False),\n+            ('No special chars', 'no-special-chars', False),\n+            ('!!!Multiple!!!Special!!!Chars!!!', 'multiple-special-chars', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..0becef5 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,3 +1,4 @@\n+\n import operator\n \n from django.db import DatabaseError, NotSupportedError, connection\n@@ -38,6 +39,37 @@ class QuerySetSetOperationTests(TestCase):\n         self.assertEqual(reserved_name['order'], 2)\n         reserved_name = qs1.intersection(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n+    def test_union_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        # Ensure that qs3.none() returns an empty queryset\n+        self.assertSequenceEqual(qs3.none(), [])\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n+\n+    def test_union_none_with_empty_qs(self):\n+        qs1 = Number.objects.none()\n+        qs2 = Number.objects.none()\n+        qs3 = qs1.union(qs2)\n+        # Ensure that combining two none querysets also results in none\n+        self.assertSequenceEqual(qs3.none(), [])\n+\n+    def test_union_none_with_mixed_qs(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.none()\n+        qs3 = qs1.union(qs2)\n+        # Ensure that using none with an existing queryset results in none\n+        self.assertSequenceEqual(qs3.none(), [])\n+        self.assertNumbersEqual(qs3, [0, 1], ordered=False)\n+\n+    def test_union_with_actual_data_and_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num=5)\n+        qs3 = qs1.union(qs2)\n+        # Check normal union behavior\n+        self.assertNumbersEqual(qs3, [0, 1, 5], ordered=False)\n+        # Ensure none still returns no results\n+        self.assertSequenceEqual(qs3.none(), [])\n \n     @skipUnlessDBFeature('supports_select_difference')\n     def test_simple_difference(self):\n@@ -313,4 +345,4 @@ class QuerySetSetOperationTests(TestCase):\n                         NotSupportedError,\n                         msg % (operation, combinator),\n                     ):\n-                        getattr(getattr(qs, combinator)(qs), operation)()\n+                        getattr(getattr(qs, combinator)(qs), operation)()\n",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..9d759cb 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2819,6 +2819,68 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates_extended(self):\n+        # Setup test data\n+        self.marley = Character.objects.create(username='Marley', last_action='2023-10-10T00:00:00Z')\n+        self.threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-10T00:00:00Z')\n+\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+\n     def test_callable_called_each_time_form_is_instantiated(self):\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..0a0aa26 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -6,12 +6,40 @@ from django.core.checks import Error\n from django.core.exceptions import FieldDoesNotExist, FieldError\n from django.db import models\n from django.test import SimpleTestCase\n+from django.db import models\n from django.test.utils import isolate_apps\n \n \n @isolate_apps('model_inheritance')\n class AbstractInheritanceTests(SimpleTestCase):\n-    def test_single_parent(self):\n+    def test_abstract_inherited_fields_equality(self):\n+        \"\"\"Test that fields from different models inherited from the same abstract model are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        field1 = InheritAbstractModel1._meta.get_field('field')\n+        field2 = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Assert that fields from different models are not equal\n+        self.assertNotEqual(field1, field2)\n+\n+        # Test the hash values as well\n+        self.assertNotEqual(hash(field1), hash(field2))\n+\n+        # Assert that the fields do not compare less or greater than each other, emphasizing inequality\n+        with self.assertRaises(TypeError):\n+            _ = field1 < field2\n+        with self.assertRaises(TypeError):\n+            _ = field1 > field2\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n \n@@ -347,4 +375,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..0954355 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -45,7 +45,33 @@ class SiteEachContextTest(TestCase):\n         request.user = self.u1\n         self.assertEqual(site.each_context(request)['site_url'], '/my-script-name/')\n \n-    def test_available_apps(self):\n+from django.test import TestCase\n+from django.contrib.auth.models import User\n+from .models import Article  # Assuming Article is defined in models\n+\n+class AdminAppListTests(TestCase):\n+    def test_model_class_in_app_list(self):\n+        # Assuming an admin_context method is available to get the admin context\n+        context = self.admin_context()\n+        available_apps = context['available_apps']\n+        \n+        # Verify the admin_views app\n+        admin_views_app = next((app for app in available_apps if app['app_label'] == 'admin_views'), None)\n+        self.assertIsNotNone(admin_views_app, \"admin_views app should be available\")\n+        \n+        # Verify Article model is included with model class\n+        article_model = next((model for model in admin_views_app['models'] if model['object_name'] == 'Article'), None)\n+        self.assertIsNotNone(article_model, \"Article model should be included in admin_views app\")\n+        self.assertEqual(article_model['model'], Article, \"Article model class should be accessible from app_list context\")\n+        \n+        # Verify the auth app\n+        auth_app = next((app for app in available_apps if app['app_label'] == 'auth'), None)\n+        self.assertIsNotNone(auth_app, \"auth app should be available\")\n+        \n+        # Verify User model is included with model class\n+        user_model = next((model for model in auth_app['models'] if model['object_name'] == 'User'), None)\n+        self.assertIsNotNone(user_model, \"User model should be included in auth app\")\n+        self.assertEqual(user_model['model'], User, \"User model class should be accessible from app_list context\")\n         ctx = self.ctx\n         apps = ctx['available_apps']\n         # we have registered two models from two different apps\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..7608c2a 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models import CustomEmailField, IntegerUsernameUser\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,6 +39,29 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n+    def test_token_invalidation_on_email_change(self):\n+        \"\"\"Test that changing the user's email address invalidates the existing token.\"\"\"\n+        models_to_test = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in models_to_test:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertTrue(p0.check_token(user, tk1))\n+                # Change email to invalidate the token\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                # Ensure the token is now invalid\n+                self.assertFalse(p0.check_token(user, tk1))\n+\n     def test_timeout(self):\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..ce1d18f 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -875,6 +876,39 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ['<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>', '<Company: 5060 Ltd>'],\n             ordered=False\n         )\n+\n+    def test_range_lookup_namedtuple_edge_cases(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        # Test with a wider range that includes the target company\n+        qs_wide = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=1, maximum=200),\n+        )\n+        self.assertSequenceEqual(qs_wide, [self.c5])\n+\n+        # Test with a tighter range that excludes the target company\n+        qs_tight = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=100, maximum=200),\n+        )\n+        self.assertSequenceEqual(qs_tight, [])\n+\n+        # Test using namedtuple with more than two fields\n+        ExtendedEmployeeRange = namedtuple('ExtendedEmployeeRange', ['minimum', 'maximum', 'extra'])\n+        qs_extra = Company.objects.filter(\n+            num_employees__range=ExtendedEmployeeRange(minimum=1, maximum=200, extra='ignored'),\n+        )\n+        self.assertSequenceEqual(qs_extra, [self.c5])\n+\n+        # Test using a named tuple with the same values and ensure correctness\n+        qs_same_values = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=99, maximum=99),\n+        )\n+        self.assertSequenceEqual(qs_same_values, [self.c5])\n+\n+        # Test with a namedtuple that contains None values\n+        qs_none_values = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=None, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs_none_values, [])\n         self.assertQuerysetEqual(\n             Company.objects.filter(num_employees__range=(1, 100)),\n             [\n@@ -884,6 +918,39 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ordered=False\n         )\n \n+    def test_range_lookup_namedtuple_edge_cases(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        # Test with a wider range that includes the target company\n+        qs_wide = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=1, maximum=200),\n+        )\n+        self.assertSequenceEqual(qs_wide, [self.c5])\n+\n+        # Test with a tighter range that excludes the target company\n+        qs_tight = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=100, maximum=200),\n+        )\n+        self.assertSequenceEqual(qs_tight, [])\n+\n+        # Test using namedtuple with more than two fields\n+        ExtendedEmployeeRange = namedtuple('ExtendedEmployeeRange', ['minimum', 'maximum', 'extra'])\n+        qs_extra = Company.objects.filter(\n+            num_employees__range=ExtendedEmployeeRange(minimum=1, maximum=200, extra='ignored'),\n+        )\n+        self.assertSequenceEqual(qs_extra, [self.c5])\n+\n+        # Test using a named tuple with the same values and ensure correctness\n+        qs_same_values = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=99, maximum=99),\n+        )\n+        self.assertSequenceEqual(qs_same_values, [self.c5])\n+\n+        # Test with a namedtuple that contains None values\n+        qs_none_values = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=None, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs_none_values, [])\n+\n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n     def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..6355200 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,10 +19,48 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_from_main(self):\n+        \"\"\"\n+        Program name should default to 'python -m django' when executed as main\n+        and argv[0] is '__main__.py'.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['__main__.py'] + args)\n+        self.assertIn('usage: python -m django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_when_argv_is_none(self):\n+        \"\"\"\n+        Program name handling when argv is None.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line([None] + args)\n+        self.assertIn('usage: None shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..947db8f 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -29,15 +30,77 @@ class ShellCommandTestCase(SimpleTestCase):\n             stdin.seek(0)\n             call_command('shell')\n         self.assertEqual(stdout.getvalue().strip(), '100')\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command='print(\"__name__\" in globals())')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        script_with_inline_function = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()'\n+        )\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_inline_function_call(self, select):\n+        script_with_inline_function = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()'\n+        )\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'IPython': None})\n     def test_shell_with_ipython_not_installed(self, select):\n         select.return_value = ([], [], [])\n         with self.assertRaisesMessage(CommandError, \"Couldn't import ipython interface.\"):\n             call_command('shell', interface='ipython')\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command='print(\"__name__\" in globals())')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    def test_command_option_inline_function_call(self):\n+        script_with_inline_function = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()'\n+        )\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')  # [1]\n+    def test_stdin_read_inline_function_call(self, select):\n+        script_with_inline_function = (\n+            'import django\\n'\n+            'def f():\\n'\n+            '    print(django.__version__)\\n'\n+            'f()'\n+        )\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'bpython': None})\n     def test_shell_with_bpython_not_installed(self, select):\n         select.return_value = ([], [], [])\n@@ -49,4 +112,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..11d194b 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -1013,7 +1013,23 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertContains(response, 'Add another Model with both - name')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n \n-    def test_both_verbose_names_inline(self):\n+    def test_verbose_name_as_default_for_plural(self):\n+        class OnlyVerboseNameInline(TabularInline):\n+            model = Profile\n+            verbose_name = 'Singular Child'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [OnlyVerboseNameInline]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        \n+        # Check that verbose_name is used as the plural form\n+        self.assertContains(response, '<h2>Singular Childs</h2>')\n+        self.assertContains(response, 'Add another Singular Child')\n+        self.assertNotContains(response, '<h2>Profiles</h2>')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name = 'Non-verbose childs - name'\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..7ad16c3 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -596,6 +596,24 @@ class TestQuerying(TestCase):\n         )\n \n     def test_isnull_key_or_none(self):\n+        # This test case checks that using __isnull=True does not match JSON null values.\n+        # It ensures the correct behavior on SQLite and Oracle where this was previously incorrect.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+\n+        # Additional test case for ensuring no false positives for isnull=True\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__b__isnull=True),\n+            [self.objs[0], self.objs[2], self.objs[3], self.objs[5]],\n+        )\n+\n+        # Confirm that existing behavior for isnull=False remains unchanged.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__b__isnull=False),\n+            [self.objs[1], self.objs[4]],\n+        )\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n             NullableJSONModel.objects.filter(Q(value__a__isnull=True) | Q(value__a=None)),\n",
  "django__django-13768": "diff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py\nindex b1feefd..994992a 100644\n--- a/tests/dispatch/tests.py\n+++ b/tests/dispatch/tests.py\n@@ -152,11 +152,105 @@ class DispatcherTests(SimpleTestCase):\n \n     def test_send_robust_no_receivers(self):\n         result = a_signal.send_robust(sender=self, val='test')\n+\n+    def test_send_robust_exception_logging(self):\n+        import logging\n+        from django.dispatch import Signal\n+\n+        class MyTestHandler(logging.Handler):\n+            def __init__(self):\n+                super().__init__()\n+                self.log_records = []\n+\n+            def emit(self, record):\n+                self.log_records.append(record)\n+\n+        # Create a custom logger handler to capture log outputs\n+        logger = logging.getLogger('django.dispatch')\n+        test_handler = MyTestHandler()\n+        logger.addHandler(test_handler)\n+        logger.setLevel(logging.ERROR)\n+\n+        def fails(val, **kwargs):\n+            raise ValueError('this')\n+\n+        a_signal = Signal()\n+        a_signal.connect(fails)\n+        \n+        try:\n+            result = a_signal.send_robust(sender=self, val='test')\n+            err = result[0][1]\n+            self.assertIsInstance(err, ValueError)\n+            self.assertEqual(err.args, ('this',))\n+            self.assertTrue(hasattr(err, '__traceback__'))\n+            self.assertIsInstance(err.__traceback__, TracebackType)\n+\n+            # Check if an error log is created\n+            self.assertEqual(len(test_handler.log_records), 1)\n+            log_record = test_handler.log_records[0]\n+            self.assertEqual(\n+                log_record.getMessage(),\n+                'Error calling fails in Signal.send_robust() (this)'\n+            )\n+            self.assertIsNotNone(log_record.exc_info)\n+            _, exc_value, _ = log_record.exc_info\n+            self.assertIsInstance(exc_value, ValueError)\n+            self.assertEqual(str(exc_value), 'this')\n+        finally:\n+            logger.removeHandler(test_handler)\n+            a_signal.disconnect(fails)\n         self.assertEqual(result, [])\n \n     def test_send_robust_ignored_sender(self):\n         a_signal.connect(receiver_1_arg)\n         result = a_signal.send_robust(sender=self, val='test')\n+\n+    def test_send_robust_exception_logging(self):\n+        import logging\n+        from django.dispatch import Signal\n+\n+        class MyTestHandler(logging.Handler):\n+            def __init__(self):\n+                super().__init__()\n+                self.log_records = []\n+\n+            def emit(self, record):\n+                self.log_records.append(record)\n+\n+        # Create a custom logger handler to capture log outputs\n+        logger = logging.getLogger('django.dispatch')\n+        test_handler = MyTestHandler()\n+        logger.addHandler(test_handler)\n+        logger.setLevel(logging.ERROR)\n+\n+        def fails(val, **kwargs):\n+            raise ValueError('this')\n+\n+        a_signal = Signal()\n+        a_signal.connect(fails)\n+        \n+        try:\n+            result = a_signal.send_robust(sender=self, val='test')\n+            err = result[0][1]\n+            self.assertIsInstance(err, ValueError)\n+            self.assertEqual(err.args, ('this',))\n+            self.assertTrue(hasattr(err, '__traceback__'))\n+            self.assertIsInstance(err.__traceback__, TracebackType)\n+\n+            # Check if an error log is created\n+            self.assertEqual(len(test_handler.log_records), 1)\n+            log_record = test_handler.log_records[0]\n+            self.assertEqual(\n+                log_record.getMessage(),\n+                'Error calling fails in Signal.send_robust() (this)'\n+            )\n+            self.assertIsNotNone(log_record.exc_info)\n+            _, exc_value, _ = log_record.exc_info\n+            self.assertIsInstance(exc_value, ValueError)\n+            self.assertEqual(str(exc_value), 'this')\n+        finally:\n+            logger.removeHandler(test_handler)\n+            a_signal.disconnect(fails)\n         self.assertEqual(result, [(receiver_1_arg, 'test')])\n         a_signal.disconnect(receiver_1_arg)\n         self.assertTestIsClean(a_signal)\n",
  "django__django-13925": "",
  "django__django-13933": "",
  "django__django-13964": "",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..ad4ad9d 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,8 +1,34 @@\n+\n from django.db.models import F, Q\n+from django.db.models import Model, CharField\n from django.test import SimpleTestCase\n \n \n class QTests(SimpleTestCase):\n+    def test_pickleable_q_or_operator(self):\n+        # Initial test case provided in the issue\n+        q = Q(x__in={}.keys())\n+        \n+        # Testing the | operator with empty Q\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n+        # Ensuring no TypeError is raised when combined with a non-empty Q\n+        # Creating a sample model to use in Q objects\n+        class SampleModel(Model):\n+            name = CharField(max_length=100)\n+\n+        # Using Q with a model field and combining with dict_keys\n+        q2 = Q(name__in=[SampleModel(name='name1'), SampleModel(name='name2')])\n+        combined_q = q | q2\n+\n+        # Test if combined_q is still an instance of Q\n+        self.assertIsInstance(combined_q, Q)\n+\n+        # Test if combining with an empty Q returns the same Q\n+        self.assertEqual(combined_q | Q(), combined_q)\n+        self.assertEqual(Q() | combined_q, combined_q)\n+\n     def test_combine_and_empty(self):\n         q = Q(x=1)\n         self.assertEqual(q & Q(), q)\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..a03e0e0 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -803,6 +803,23 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Exists(is_ceo) | Exists(is_poc)),\n             [self.example_inc.ceo, self.foobar_ltd.ceo, self.max],\n         )\n+        # New test cases for commutativity of Q and Exists combination\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q() & Exists(is_ceo)),\n+            []\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_ceo) & Q()),\n+            []\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q() | Exists(is_ceo)),\n+            [self.example_inc.ceo, self.foobar_ltd.ceo]\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_ceo) | Q()),\n+            [self.example_inc.ceo, self.foobar_ltd.ceo]\n+        )\n         self.assertCountEqual(\n             Employee.objects.filter(Exists(is_ceo) & Exists(is_poc)),\n             [self.max],\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..6d9c0d2 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1145,8 +1145,24 @@ class ResolverMatchTests(SimpleTestCase):\n             \"namespaces=[], route=^no_kwargs/([0-9]+)/([0-9]+)/$)\",\n         )\n \n-\n-@override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n+    \n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_functools_partial(self):\n+        tests = [\n+            ('partial', views.empty_view, 'template.html'),\n+            ('partial_nested', functools.partial(views.empty_view), 'nested_partial.html'),\n+            ('partial_wrapped', functools.partial(views.empty_view, template_name='template.html'), 'template.html'),\n+        ]\n+        for name, view_func, template_name in tests:\n+            with self.subTest(name=name):\n+                partial_func = functools.partial(view_func, template_name=template_name)\n+                resolved = resolve(f'/{name}/')\n+                func_repr = repr(partial_func).replace('<function ', '').replace('>', '')\n+                self.assertIn(func_repr, repr(resolved))\n+                self.assertEqual(\n+                    repr(resolved),\n+                    f\"ResolverMatch(func=functools.partial({views.empty_view.__module__}.empty_view, template_name='{template_name}'), args=(), kwargs={{}}, url_name='{name}', app_names=[], namespaces=[], route='{name}/')\",\n+                )\n class ErroneousViewTests(SimpleTestCase):\n \n     def test_noncallable_view(self):\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..3b7e0e8 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import TestCase\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -66,7 +68,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +104,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..62d6ec0 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2216,8 +2216,16 @@ class StartApp(AdminScriptTestCase):\n             \"already exists. Overlaying an app into an existing directory \"\n             \"won't replace conflicting files.\"\n         )\n-\n-    def test_template(self):\n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        \"\"\"\n+        Test that django-admin startapp works correctly when target directory\n+        has a trailing slash.\n+        \"\"\"\n+        app_dir_with_slash = os.path.join(self.test_dir, 'apps', 'app_with_slash') + os.sep\n+        os.makedirs(app_dir_with_slash)\n+        _, err = self.run_django_admin(['startapp', 'app', app_dir_with_slash])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir_with_slash, 'apps.py')), True)\n         out, err = self.run_django_admin(['startapp', 'new_app'])\n         self.assertNoOutput(err)\n         app_path = os.path.join(self.test_dir, 'new_app')\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..f61e76f 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,6 +1,8 @@\n import datetime\n import re\n from unittest import mock\n+from django.contrib.auth.forms import ReadOnlyPasswordHashField\n+from django.test import SimpleTestCase\n \n from django.contrib.auth.forms import (\n     AdminPasswordChangeForm, AuthenticationForm, PasswordChangeForm,\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..80071dc 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,6 +658,16 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n+    def test_serialize_type_model(self):\n+        \"\"\"\n+        Ensure that 'models' is correctly imported in migration serialization.\n+        \"\"\"\n+        self.assertSerializedEqual(models.Model)\n+        self.assertSerializedResultEqual(\n+            MigrationWriter.serialize(models.Model),\n+            (\"('models.Model', {'from django.db import models'})\", set())\n+        )\n+\n     def test_simple_migration(self):\n         \"\"\"\n         Tests serializing a simple migration.\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..5da1608 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -334,6 +334,50 @@ class FormsFormsetTestCase(SimpleTestCase):\n             'choices-1-votes': '1',\n         }\n         ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n+        # Test that the non_form errors have the 'nonform' CSS class\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n+\n+    def test_formset_non_form_errors_with_min_num(self):\n+        \"\"\"\n+        Test that non form errors for min_num validation use the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '2',\n+            'choices-INITIAL_FORMS': '0',  \n+            'choices-MIN_NUM_FORMS': '3',  \n+            'choices-MAX_NUM_FORMS': '3',  \n+            'choices-0-choice': 'Zero',\n+            'choices-0-votes': '0',\n+            'choices-1-choice': 'One',\n+            'choices-1-votes': '1',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n+\n+    def test_formset_non_form_errors_with_custom_error(self):\n+        \"\"\"\n+        Test a custom non form error uses the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '2',\n+            'drinks-INITIAL_FORMS': '0',\n+            'drinks-0-name': 'Gin and Tonic',\n+            'drinks-1-name': 'Gin and Tonic',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n",
  "django__django-14672": "",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..c50a756 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -293,6 +293,30 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'pagination': {'more': False},\n         })\n \n+    def test_serialize_result_extension_point(self):\n+        # Create a subclass to test the extension point of serialize_result.\n+        class CustomAutocompleteJsonView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return super().serialize_result(obj, to_field_name) | {'posted': str(obj.posted)}\n+\n+        # Create example data.\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+\n+        response = CustomAutocompleteJsonView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n \n @override_settings(ROOT_URLCONF='admin_views.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..94d29c4 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -426,6 +426,80 @@ class MethodDecoratorTests(SimpleTestCase):\n                     return \"tests\"\n \n \n+from functools import wraps, partial\n+from django.utils.decorators import method_decorator\n+import unittest\n+\n+class TestMethodDecoratorPreservation(unittest.TestCase):\n+\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                \"\"\"Test method docstring\"\"\"\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n+    def test_partial_function_decorator(self):\n+        \"\"\"@method_decorator works with partial functions.\"\"\"\n+        def logging_decorator(func):\n+            @wraps(func)\n+            def wrapper(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return wrapper\n+\n+        class Test:\n+            @method_decorator(logging_decorator)\n+            def method(self, x, y):\n+                return x + y\n+\n+        # Create a partial function\n+        partial_method = partial(Test().method, y=2)\n+        result = partial_method(3)\n+        self.assertEqual(result, 5)\n+        # Check if the partial function retains the correct name\n+        self.assertEqual(partial_method.func.__name__, 'method')\n+\n+    def test_preserve_docstring(self):\n+        \"\"\"@method_decorator preserves the docstring of the function.\"\"\"\n+        func_doc = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_doc\n+                func_doc = func.__doc__\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                \"\"\"Sample docstring\"\"\"\n+                return 'hello'\n+\n+        Test().method()\n+        self.assertEqual(func_doc, 'Sample docstring')\n+\n+if __name__ == '__main__':\n+    unittest.main()\n+\n class XFrameOptionsDecoratorsTests(TestCase):\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..350b8cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..0d7f349 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,7 +793,51 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n-    def test_rename_m2m_target_model(self):\n+    def test_rename_model_with_db_table_noop_with_fk(self):\n+        app_label = 'test_rmwdbtn_with_fk'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Ensure no queries are run during forward and backward migrations\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_noop_and_constraints(self):\n+        app_label = 'test_rmwdbtn_and_constraints'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE, related_name='ponies')),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Ensure no queries are run during forward and backward migrations\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n             migrations.CreateModel(\"Rider\", fields=[\n",
  "django__django-15061": "diff --git a/tests/forms_tests/field_tests/test_multivaluefield.py b/tests/forms_tests/field_tests/test_multivaluefield.py\nindex 53aee21..133ab11 100644\n--- a/tests/forms_tests/field_tests/test_multivaluefield.py\n+++ b/tests/forms_tests/field_tests/test_multivaluefield.py\n@@ -154,7 +154,20 @@ class MultiValueFieldTest(SimpleTestCase):\n             \"\"\",\n         )\n \n-    def test_form_as_table_data(self):\n+    def test_multivaluewidget_label_without_for_attribute(self):\n+        class TestForm(Form):\n+            datetime = SplitDateTimeField()\n+\n+        form = TestForm()\n+        # Ensure that the label does not include the 'for' attribute with an index\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            \"\"\"\n+            <tr><th><label>Datetime:</label></th>\n+            <td><input type=\"text\" name=\"datetime_0\" id=\"id_datetime_0\" required>\n+            <input type=\"text\" name=\"datetime_1\" id=\"id_datetime_1\" required></td></tr>\n+            \"\"\"\n+        )\n         form = ComplexFieldForm({\n             'field1_0': 'some text',\n             'field1_1': ['J', 'P'],\n",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..368a141 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -91,7 +91,9 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             'http://inv-.-alid.com',\n             '[a',\n             'http://[a',\n-            # Non-string.\n+            # Invalid URLs raising ValueError before the fix; should raise ValidationError now.\n+            '////]@N.AN',\n+            '#@A.bO',\n             23,\n             # Hangs \"forever\" before fixing a catastrophic backtracking,\n             # see #11198.\n@@ -107,7 +109,17 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n                 with self.assertRaisesMessage(ValidationError, msg):\n                     f.clean(value)\n \n-    def test_urlfield_clean_required(self):\n+    def test_urlfield_clean_value_error_cases(self):\n+        f = URLField()\n+        tests = [\n+            '////]@N.AN',  # Previously raised ValueError, should raise ValidationError now.\n+            '#@A.bO',      # Previously raised ValueError, should raise ValidationError now.\n+        ]\n+        msg = \"'Enter a valid URL.'\"\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg):\n+                    f.clean(value)\n         f = URLField()\n         msg = \"'This field is required.'\"\n         with self.assertRaisesMessage(ValidationError, msg):\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..7f2a047 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -473,7 +473,25 @@ class NonAggregateAnnotationTestCase(TestCase):\n             lambda d: (d.other_name, d.other_chain, d.is_open, d.book_isbn)\n         )\n \n-    def test_null_annotation(self):\n+    def test_full_expression_annotation(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_full_expression_annotation_with_aggregation(self):\n+        qs = Book.objects.filter(isbn='159059725').annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            rating_count=Count('rating'),\n+        )\n+        self.assertEqual([book.rating_count for book in qs], [1])\n+\n+    def test_aggregate_over_full_expression_annotation(self):\n+        qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(qs['selected__sum'], Book.objects.count())\n         \"\"\"\n         Annotating None onto a model round-trips\n         \"\"\"\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..5f0b1be 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -10,6 +11,7 @@ from django.contrib.messages.storage.cookie import (\n from django.test import SimpleTestCase, override_settings\n from django.utils.crypto import get_random_string\n from django.utils.safestring import SafeData, mark_safe\n+from django.utils.safestring import SafeData, mark_safe\n \n from .base import BaseTests\n \n@@ -104,7 +106,18 @@ class CookieTests(BaseTests, SimpleTestCase):\n         # The message actually contains what we expect.\n         self.assertEqual(list(storage), [])\n \n-    def test_max_cookie_length(self):\n+    def test_extra_tags_serialization(self):\n+        \"\"\"\n+        Test that a message's extra_tags attribute is correctly preserved when\n+        serialized and deserialized.\n+        \"\"\"\n+        storage = self.get_storage()\n+        for extra_tags in ['', None, 'some tags']:\n+            with self.subTest(extra_tags=extra_tags):\n+                message = Message(constants.INFO, 'Test message', extra_tags=extra_tags)\n+                encoded = storage._encode(message)\n+                decoded = storage._decode(encoded)\n+                self.assertEqual(decoded.extra_tags, extra_tags)\n         \"\"\"\n         If the data exceeds what is allowed in a cookie, older messages are\n         removed before saving (and returned by the ``update`` method).\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..b2363d8 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -1,5 +1,6 @@\n from pathlib import Path\n from unittest import mock\n+from pathlib import Path\n \n from django.template import autoreload\n from django.test import SimpleTestCase, override_settings\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..9a3f53e 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,7 +185,31 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test that was_modified_since handles an empty string for the If-Modified-Since header gracefully.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n+    def test_was_modified_since_none_header(self):\n+        \"\"\"\n+        Test that was_modified_since handles None as the header value.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=None, mtime=1))\n+\n+    def test_was_modified_since_valid_header(self):\n+        \"\"\"\n+        Test that was_modified_since behaves correctly with a valid If-Modified-Since header.\n+        \"\"\"\n+        mtime = 1000000\n+        header = http_date(mtime)\n+        self.assertFalse(was_modified_since(header=header, mtime=mtime))\n+\n+    def test_was_modified_since_invalid_header(self):\n+        \"\"\"\n+        Test that was_modified_since handles an invalid If-Modified-Since header without raising exceptions.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"invalid-date\", mtime=1))\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..d2a9599 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,5 +1,7 @@\n+\n import os\n from io import StringIO\n+from argparse import ArgumentDefaultsHelpFormatter\n from unittest import mock\n \n from admin_scripts.tests import AdminScriptTestCase\n@@ -411,7 +413,27 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_custom_help_formatter_preserves_format(self):\n+        \"\"\"Test that custom help formatter preserves help text formatting.\"\"\"\n+        class CustomCommand(BaseCommand):\n+            help = '''\n+            Import a contract from tzkt.\n+            Example usage:\n+                ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+            '''\n+\n+        command = CustomCommand()\n+        parser = command.create_parser('manage.py', 'tzkt_import', formatter_class=ArgumentDefaultsHelpFormatter)\n+        help_output = parser.format_help()\n+\n+        expected_help = (\n+            \"usage: manage.py tzkt_import [-h]\\n\\n\"\n+            \"Import a contract from tzkt.\\n\\n\"\n+            \"Example usage:\\n\"\n+            \"    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\\n\"\n+        )\n+\n+        self.assertIn(expected_help, help_output)\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..993477b 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,7 +1,10 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n+from django.core.serializers.json import DjangoJSONEncoder\n+import json\n from django.utils.functional import lazystr\n from django.utils.html import (\n     conditional_escape,\n@@ -211,6 +214,29 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, \"test_id\"), expected)\n \n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"hello\": \"world\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"hello\": \"world\"}</script>',\n+        )\n+\n+    def test_json_script_default_encoder(self):\n+        # Ensures that the default encoder is still DjangoJSONEncoder\n+        data = {\"key\": datetime(2023, 10, 25, 10, 5, 0)}\n+        expected_json = json.dumps(data, cls=DjangoJSONEncoder).translate({\n+            ord(\">\"): \"\\\\u003E\",\n+            ord(\"<\"): \"\\\\u003C\",\n+            ord(\"&\"): \"\\\\u0026\",\n+        })\n+        self.assertHTMLEqual(\n+            json_script(data),\n+            f'<script type=\"application/json\">{expected_json}</script>',\n+        )\n+\n     def test_json_script_without_id(self):\n         self.assertHTMLEqual(\n             json_script({\"key\": \"value\"}),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..f6281c6 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -129,6 +129,42 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 },\n             },\n         }\n+    def test_template_tags_duplicate_in_same_template_config(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"duplicate_tags\", \"app1.templatetags.duplicate_tags\"\n+                ),\n+                self.get_settings(\n+                    \"duplicate_tags\", \"app2.templatetags.duplicate_tags\"\n+                ),\n+            ]\n+        ):\n+            expected_error = Error(\n+                E003.msg.format(\n+                    \"'duplicate_tags'\",\n+                    \"'check_framework.template_test_apps.app1.templatetags.duplicate_tags', \"\n+                    \"'check_framework.template_test_apps.app2.templatetags.duplicate_tags'\",\n+                ),\n+                id=E003.id,\n+            )\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [expected_error],\n+            )\n+\n+    def test_template_tags_no_duplicates_in_different_template_configs(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tags1\", \"app1.templatetags.unique_tags1\"\n+                ),\n+                self.get_settings(\n+                    \"unique_tags2\", \"app2.templatetags.unique_tags2\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n \n     @override_settings(\n         INSTALLED_APPS=[\n@@ -157,6 +193,42 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n                 check_for_template_tags_with_the_same_name(None),\n                 [self.error_same_tags],\n             )\n+    def test_template_tags_duplicate_in_same_template_config(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"duplicate_tags\", \"app1.templatetags.duplicate_tags\"\n+                ),\n+                self.get_settings(\n+                    \"duplicate_tags\", \"app2.templatetags.duplicate_tags\"\n+                ),\n+            ]\n+        ):\n+            expected_error = Error(\n+                E003.msg.format(\n+                    \"'duplicate_tags'\",\n+                    \"'check_framework.template_test_apps.app1.templatetags.duplicate_tags', \"\n+                    \"'check_framework.template_test_apps.app2.templatetags.duplicate_tags'\",\n+                ),\n+                id=E003.id,\n+            )\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [expected_error],\n+            )\n+\n+    def test_template_tags_no_duplicates_in_different_template_configs(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tags1\", \"app1.templatetags.unique_tags1\"\n+                ),\n+                self.get_settings(\n+                    \"unique_tags2\", \"app2.templatetags.unique_tags2\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n \n     @override_settings(\n         INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n@@ -198,6 +270,42 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             ]\n         ):\n             self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+    def test_template_tags_duplicate_in_same_template_config(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"duplicate_tags\", \"app1.templatetags.duplicate_tags\"\n+                ),\n+                self.get_settings(\n+                    \"duplicate_tags\", \"app2.templatetags.duplicate_tags\"\n+                ),\n+            ]\n+        ):\n+            expected_error = Error(\n+                E003.msg.format(\n+                    \"'duplicate_tags'\",\n+                    \"'check_framework.template_test_apps.app1.templatetags.duplicate_tags', \"\n+                    \"'check_framework.template_test_apps.app2.templatetags.duplicate_tags'\",\n+                ),\n+                id=E003.id,\n+            )\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [expected_error],\n+            )\n+\n+    def test_template_tags_no_duplicates_in_different_template_configs(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tags1\", \"app1.templatetags.unique_tags1\"\n+                ),\n+                self.get_settings(\n+                    \"unique_tags2\", \"app2.templatetags.unique_tags2\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n \n     @override_settings(\n         INSTALLED_APPS=[\n@@ -206,4 +314,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..388a9a2 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,9 +398,23 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+from django.test import TestCase\n+from .models import AnotherModel, ProxyCustomModel\n \n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n-class ProxyModelAdminTests(TestCase):\n+class ProxyModelTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.custom_instance = ProxyCustomModel.objects.create(name=\"Proxy Name\")\n+        cls.another_model_instance = AnotherModel.objects.create(custom=cls.custom_instance)\n+\n+    def test_only_after_select_related_on_proxy(self):\n+        # This test ensures that using select_related and only does not crash on proxy models.\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.get()\n+\n+        # Verify that the fetched object is the same as the one created.\n+        self.assertEqual(result, self.another_model_instance)\n+        self.assertEqual(result.custom.name, \"Proxy Name\")\n     @classmethod\n     def setUpTestData(cls):\n         cls.superuser = AuthUser.objects.create(is_superuser=True, is_staff=True)\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..a536116 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -152,6 +152,10 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         )\n \n     def test_parameters(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n@@ -183,4 +187,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..8c74dd9 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -173,6 +173,18 @@ class FormsFormsetTestCase(SimpleTestCase):\n             self.assertTrue(hasattr(form, \"custom_kwarg\"))\n             self.assertEqual(form.custom_kwarg, i)\n \n+    def test_empty_permitted_ignored_empty_form(self):\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": False})\n+        # Ensure that empty_form's empty_permitted is always True, regardless of form_kwargs\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n+    def test_empty_permitted_ignored_empty_form_true(self):\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": True})\n+        # Ensure that empty_form's empty_permitted is always True, regardless of form_kwargs\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n     def test_form_kwargs_empty_form(self):\n         FormSet = formset_factory(CustomKwargForm)\n         formset = FormSet(form_kwargs={\"custom_kwarg\": 1})\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..9924f41 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,13 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_empty(self):\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+        self.assertEqual(nformat(None, \".\", decimal_pos=2), \"None\")\n+        self.assertEqual(nformat(\"\", \".\", decimal_pos=2), \"\")\n+        self.assertEqual(nformat(\"\", \".\", grouping=2, thousand_sep=\",\"), \"\")\n+        self.assertEqual(nformat(None, \".\", grouping=2, thousand_sep=\",\"), \"None\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..fd1d4e7 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,9 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+from django.urls import reverse\n from django.utils.translation import gettext as _\n+from urllib.parse import urljoin\n \n from .models.custom_user import (\n     CustomUser,\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..6164a4c 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,9 +507,37 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n-\n-# RemovedInDjango50Warning\n-class DeprecatedTests(SitemapTestsBase):\n+from django.contrib.sitemaps import Sitemap\n+from django.test import TestCase\n+from django.urls import path, include\n+from django.utils import timezone\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod  # This should not cause an error since items are empty\n+\n+class SitemapTestsBase(TestCase):\n+    urlpatterns = [\n+        path(\n+            \"callable-lastmod-no-items/index.xml\",\n+            views.index,\n+            {\"sitemaps\": {\"callable-lastmod\": CallableLastmodNoItemsSitemap}},\n+        ),\n+    ]\n+\n+    def test_callable_sitemod_no_items(self):\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", response)\n+        expected_content = (\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            '<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n'\n+            '<sitemap><loc>http://example.com/callable-lastmod-no-items/sitemap.xml</loc></sitemap>\\n'\n+            '</sitemapindex>'\n+        )\n+        self.assertXMLEqual(response.content.decode(), expected_content)\n     @override_settings(\n         TEMPLATES=[\n             {\n",
  "django__django-16379": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..1f4a918 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -9,6 +10,8 @@ from django.test import RequestFactory, TestCase\n from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from .models import Article, Question\n from .tests import AdminViewBasicTestCase\n \n",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..75fff31 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -26,7 +27,13 @@ class JoinTests(SimpleTestCase):\n         output = self.engine.render_to_string(\"join04\", {\"a\": [\"alpha\", \"beta & me\"]})\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n \n-    # Joining with unsafe joiners doesn't result in unsafe strings.\n+    # Test case for issue: Template filter `join` should not escape the joining string if `autoescape` is `off`.\n+    @setup({\"join_autoescape_off\": '{% autoescape off %}{{ some_list|join:some_var }}{% endautoescape %}'})\n+    def test_join_autoescape_off(self):\n+        some_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        some_var = \"<br/>\"\n+        output = self.engine.render_to_string(\"join_autoescape_off\", {\"some_list\": some_list, \"some_var\": some_var})\n+        self.assertEqual(output, \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\")\n     @setup({\"join05\": \"{{ a|join:var }}\"})\n     def test_join05(self):\n         output = self.engine.render_to_string(\n@@ -78,4 +85,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..7fa10d7 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -654,7 +654,58 @@ class BulkCreateTests(TestCase):\n     def test_update_conflicts_two_fields_no_unique_fields(self):\n         self._test_update_conflicts_two_fields([])\n \n-    def _test_update_conflicts_unique_two_fields(self, unique_fields):\n+    def test_bulk_create_with_update_conflicts_returns_ids(self):\n+        initial_objects = [\n+            TwoFields(f1=1, f2=1, name=\"a\"),\n+            TwoFields(f1=2, f2=2, name=\"b\"),\n+        ]\n+        TwoFields.objects.bulk_create(initial_objects)\n+        self.assertEqual(TwoFields.objects.count(), 2)\n+\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"c\"),\n+            TwoFields(f1=2, f2=2, name=\"d\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\"],\n+            unique_fields=[\"f1\", \"f2\"],\n+        )\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+\n+    @skipUnlessDBFeature(\n+        \"supports_update_conflicts\", \"supports_returning_clause_on_conflict_update\"\n+    )\n+    def test_bulk_create_with_update_conflicts_mixed(self):\n+        initial_objects = [\n+            UpsertConflict(number=1, rank=1, name=\"John\"),\n+            UpsertConflict(number=2, rank=2, name=\"Mary\"),\n+            UpsertConflict(number=3, rank=3, name=\"Hannah\"),\n+        ]\n+        UpsertConflict.objects.bulk_create(initial_objects)\n+        self.assertEqual(UpsertConflict.objects.count(), 3)\n+\n+        # Mixed new and conflicting objects\n+        mix_objects = [\n+            UpsertConflict(number=1, rank=4, name=\"Steve\"),  # Conflicting\n+            UpsertConflict(number=4, rank=5, name=\"Olivia\"), # New\n+        ]\n+        results = UpsertConflict.objects.bulk_create(\n+            mix_objects,\n+            update_conflicts=True,\n+            update_fields=[\"name\", \"rank\"],\n+            unique_fields=[\"number\"],\n+        )\n+        self.assertEqual(len(results), len(mix_objects))\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+                # Ensure the object exists in the database\n+                self.assertTrue(UpsertConflict.objects.filter(pk=instance.pk).exists())\n         Country.objects.bulk_create(self.data)\n         self.assertEqual(Country.objects.count(), 4)\n \n@@ -816,4 +867,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..581929b 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1119,6 +1119,25 @@ def test_range_slider(orientation):\n     slider.reset()\n     assert_allclose(slider.val, [0.1, 0.34])\n \n+@pytest.mark.parametrize(\"orientation\", [\"horizontal\", \"vertical\"])\n+def test_range_slider_initial_values(orientation):\n+    fig, ax = plt.subplots()\n+\n+    # Try setting initial values to [0.0, 0.0] which caused issues before\n+    slider = widgets.RangeSlider(\n+        ax=ax, label=\"Threshold\", valmin=-1.0, valmax=1.0, orientation=orientation,\n+        valinit=[0.0, 0.0]\n+    )\n+\n+    # Assert that the initial values are set correctly\n+    assert_allclose(slider.val, (0.0, 0.0))\n+\n+    # Now change the values to test the set_val functionality\n+    slider.set_val((-0.5, 0.5))\n+    assert_allclose(slider.val, (-0.5, 0.5))\n+\n+    slider.reset()\n+    assert_allclose(slider.val, (0.0, 0.0))\n \n def check_polygon_selector(event_sequence, expected_result, selections_count,\n                            **kwargs):\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..da28407 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,11 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import pytest\n+import matplotlib as mpl\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n@@ -508,7 +513,16 @@ def test_rcparams_reset_after_fail():\n         assert mpl.rcParams['text.usetex'] is False\n \n \n-@pytest.mark.skipif(sys.platform != \"linux\", reason=\"Linux only\")\n+def test_get_backend_does_not_clear_figures():\n+    # This test specifically checks for the issue where get_backend()\n+    # clears figures if they were created within an rc_context.\n+    with rc_context():\n+        fig1 = plt.figure()\n+        before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+        get_backend()\n+        after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    \n+    assert before == after, f'Figures cleared: {before} != {after}'\n def test_backend_fallback_headless(tmpdir):\n     env = {**os.environ,\n            \"DISPLAY\": \"\", \"WAYLAND_DISPLAY\": \"\",\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..e36a11c 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,6 +21,23 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_3d(fig_test, fig_ref):\n+    # Create a figure with two 3D subplots\n+    ax1 = fig_test.add_subplot(121, projection='3d')\n+    ax2 = fig_ref.add_subplot(121, projection='3d')\n+    ax1.scatter([1], [1], [1])\n+    ax2.scatter([1], [1], [1])\n+\n+    # Set the first subplot to invisible\n+    ax1.set_visible(False)\n+\n+    # Add another subplot as a reference (which will be visible)\n+    ax1_b = fig_test.add_subplot(122, projection='3d')\n+    ax2_b = fig_ref.add_subplot(122, projection='3d')\n+    ax1_b.scatter([1], [1], [1], c='r')\n+    ax2_b.scatter([1], [1], [1], c='r')\n+\n def test_aspect_equal_error():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex a51a857..6e93b04 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -1773,7 +1773,41 @@ def test_margins_errors(err, args, kwargs, match):\n \n \n @check_figures_equal(extensions=[\"png\"])\n-def test_text_3d(fig_test, fig_ref):\n+def test_draw_single_lines_from_Nx1():\n+    # Smoke test for GH#23459\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    ax.plot([[0], [1]], [[0], [1]], [[0], [1]])\n+\n+def test_line3d_attribute_with_numpy_arrays():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    \n+    x_s = np.array([0, 1])\n+    x_e = np.array([1, 2])\n+    y_s = np.array([0, 1])\n+    y_e = np.array([1, 2])\n+    z_s = np.array([0, 1])\n+    z_e = np.array([1, 2])\n+    \n+    ax.plot([x_s[0], x_e[0]], [y_s[0], y_e[0]], [z_s[0], z_e[0]], 'r-')\n+    ax.plot([x_s[1], x_e[1]], [y_s[1], y_e[1]], [z_s[1], z_e[1]], 'r-')\n+\n+def test_line3d_attribute_after_integer_assignment():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(projection='3d')\n+    \n+    x_s = 0\n+    x_e = 1\n+    y_s = 0\n+    y_e = 1\n+    z_s = 0\n+    z_e = 1\n+    \n+    ax.plot([x_s, x_e], [y_s, y_e], [z_s, z_e], 'r-')\n+    \n+    # Check if Line3D has _verts3d attribute\n+    assert hasattr(ax.lines[0], '_verts3d')\n     ax = fig_ref.add_subplot(projection=\"3d\")\n     txt = Text(0.5, 0.5, r'Foo bar $\\int$')\n     art3d.text_2d_to_3d(txt, z=1)\n",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..0974578 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,6 +774,16 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n+@pytest.mark.parametrize('draggable', (True, False))\n+def test_legend_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test_line')\n+    leg = ax.legend(draggable=draggable)\n+    assert leg.get_draggable() is draggable\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_get_set_draggable():\n     legend = plt.legend()\n     assert not legend.get_draggable()\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..2b6894c 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -252,7 +252,29 @@ def test_linedash():\n \n     buf = io.BytesIO()\n     fig.savefig(buf, format=\"ps\")\n+    assert buf.tell() > 0\n+\n+\n+def test_multiline_text_with_empty_lines():\n+    import io\n+    from matplotlib.figure import Figure\n \n+    # This test tries to reproduce the issue described in gh#23954\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    \n+    # Test annotation with leading empty line\n+    ax.annotate(text='\\nLower label', xy=(0, 0))\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    buf.seek(0)\n+    assert buf.tell() > 0\n+\n+    # Test title with leading empty line\n+    ax.set_title('\\nLower title')\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    buf.seek(0)\n     assert buf.tell() > 0\n \n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..76375c7 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,21 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+import pytest\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+@pytest.mark.filterwarnings(\"error\")\n+def test_no_user_warning_with_constrained_layout_false():\n+    a = np.linspace(0, 2 * np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+    try:\n+        plt.subplots_adjust(wspace=0)\n+    except UserWarning:\n+        pytest.fail(\"UserWarning raised when constrained_layout=False\")\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 64ba766..5c8e9c5 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -5723,8 +5723,31 @@ def test_set_get_ticklabels():\n     ax[0].set_yticks(range(10))\n     ax[0].set_xticklabels(['a', 'b', 'c', 'd'] + 6 * [''])\n     ax[0].set_yticklabels(['11', '12', '13', '14'] + 6 * [''])\n+import matplotlib.pyplot as plt\n+import pytest\n \n-    # set ticklabel to the other plot, expect the 2 plots have same label\n+def test_set_ticks_kwargs_no_error_with_labels():\n+    \"\"\"\n+    When labels are provided and kwargs are passed, axis.set_ticks() does not raise an error.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    labels = ['one', 'two', 'three']\n+    try:\n+        ax.xaxis.set_ticks(ticks, labels=labels, alpha=0.5)\n+    except ValueError:\n+        pytest.fail(\"set_ticks raised ValueError unexpectedly!\")\n+\n+def test_set_ticks_no_kwargs_no_error_without_labels():\n+    \"\"\"\n+    When no labels and no kwargs are provided, axis.set_ticks() does not raise an error.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    try:\n+        ax.xaxis.set_ticks(ticks)\n+    except ValueError:\n+        pytest.fail(\"set_ticks raised ValueError unexpectedly!\")\n     # setting pass get_ticklabels return value as ticklabels argument\n     ax[1].set_xticks(ax[0].get_xticks())\n     ax[1].set_yticks(ax[0].get_yticks())\n",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..e167b51 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,30 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+\n+def test_pickle_draggable_legend():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+    \n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+    \n+    ax.plot(time, speed, label=\"speed\")\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    # Try to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Ensure 'FigureCanvasQTAgg' is not in the pickle stream\n+    assert \"FigureCanvasQTAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    # Ensure that the pickled figure can be loaded\n+    loaded = pickle.loads(pkl)\n+    loaded.canvas.draw()\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..310780e 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -90,7 +90,34 @@ def _generate_complete_test_figure(fig_ref):\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n \n-@mpl.style.context(\"default\")\n+import pytest\n+import matplotlib.pyplot as plt\n+from io import BytesIO\n+import pickle\n+\n+@pytest.mark.parametrize(\"align_function\", [lambda fig: None, lambda fig: fig.align_labels()])\n+def test_pickle_figure_with_aligned_labels(align_function):\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Apply the alignment function (either no-op or align_labels)\n+    align_function(fig)\n+\n+    # Attempt to pickle the figure\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+    loaded = pickle.loads(pkl.getbuffer())\n+    loaded.canvas.draw()\n+\n+    plt.close('all')\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..dca06b1 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -83,6 +83,27 @@ class TestContinuous:\n         s = Continuous(norm=(3, 7))._setup(x, IntervalProperty())\n         assert_array_equal(s(x), [-.5, 0, 1.5])\n \n+    def test_interval_with_bools(self):\n+        import pandas as pd\n+        from numpy.testing import assert_array_equal\n+        from seaborn._core.scales import Continuous\n+        from seaborn._core.properties import IntervalProperty\n+        x = pd.Series([True, False, False])\n+        s = Continuous()._setup(x, IntervalProperty())\n+        assert_array_equal(s(x), [1, 0, 0])\n+\n+    def test_color_with_boolean_data(self):\n+        import pandas as pd\n+        from numpy.testing import assert_array_equal\n+        from seaborn._core.scales import Continuous\n+        from seaborn._core.properties import Color\n+        from seaborn.palettes import color_palette\n+        \n+        x = pd.Series([True, False, True])\n+        cmap = color_palette(\"ch:\", as_cmap=True)\n+        s = Continuous()._setup(x, Color())\n+        assert_array_equal(s(x), cmap([1, 0, 1])[:, :3])\n+\n     def test_interval_with_range_norm_and_transform(self, x):\n \n         x = pd.Series([1, 10, 100])\n",
  "mwaskom__seaborn-3407": "",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..3468cca 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,8 +1,11 @@\n+\n import json\n import os\n import textwrap\n \n import pytest\n+import tomllib\n+import errno\n \n import flask\n \n@@ -18,7 +21,61 @@ def common_object_test(app):\n     assert \"TestConfig\" not in app.config\n \n \n-def test_config_from_pyfile():\n+def test_config_from_file_toml_binary():\n+    tomllib = pytest.importorskip(\"tomllib\", reason=\"tomllib added in 3.11\")\n+    app = flask.Flask(__name__)\n+    current_dir = os.path.dirname(os.path.abspath(__file__))\n+    \n+    # Create a test TOML file in binary mode\n+    toml_content = b'TEST_KEY = \"foo\"\\nSECRET_KEY = \"config\"\\n'\n+    toml_filepath = os.path.join(current_dir, \"test_config.toml\")\n+    \n+    with open(toml_filepath, \"wb\") as toml_file:\n+        toml_file.write(toml_content)\n+\n+    # Test loading the binary TOML file\n+    app.config.from_file(toml_filepath, tomllib.load, mode=\"b\")\n+    common_object_test(app)\n+\n+    # Clean up test file\n+    os.remove(toml_filepath)\n+\n+def test_config_from_file_toml_text_mode_should_fail():\n+    tomllib = pytest.importorskip(\"tomllib\", reason=\"tomllib added in 3.11\")\n+    app = flask.Flask(__name__)\n+    current_dir = os.path.dirname(os.path.abspath(__file__))\n+    \n+    # Create a test TOML file in text mode (for the purpose of testing error)\n+    toml_content = 'TEST_KEY = \"foo\"\\nSECRET_KEY = \"config\"\\n'\n+    toml_filepath = os.path.join(current_dir, \"test_config_text.toml\")\n+    \n+    with open(toml_filepath, \"w\") as toml_file:\n+        toml_file.write(toml_content)\n+\n+    # Test loading the text TOML file with tomllib (should raise an error)\n+    with pytest.raises(TypeError, match=\"File must be opened in binary mode\"):\n+        app.config.from_file(toml_filepath, tomllib.load, mode=\"t\")\n+\n+    # Clean up test file\n+    os.remove(toml_filepath)\n+\n+def test_config_from_file_json_text_mode():\n+    app = flask.Flask(__name__)\n+    current_dir = os.path.dirname(os.path.abspath(__file__))\n+    \n+    # Create a test JSON file\n+    json_content = '{\"TEST_KEY\": \"foo\", \"SECRET_KEY\": \"config\"}'\n+    json_filepath = os.path.join(current_dir, \"test_config.json\")\n+    \n+    with open(json_filepath, \"w\") as json_file:\n+        json_file.write(json_content)\n+\n+    # Test loading the JSON file\n+    app.config.from_file(json_filepath, json.load)\n+    common_object_test(app)\n+\n+    # Clean up test file\n+    os.remove(json_filepath)\n     app = flask.Flask(__name__)\n     app.config.from_pyfile(f\"{__file__.rsplit('.', 1)[0]}.py\")\n     common_object_test(app)\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..58baf2b 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1636,6 +1636,37 @@ def test_prepared_request_complete_copy():\n     assert_copy(p, p.copy())\n \n \n+import pytest\n+import requests\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import ConnectionError, ReadTimeout\n+from requests.packages.urllib3.exceptions import DecodeError, TimeoutError as Urllib3TimeoutError\n+from requests.packages.urllib3.util.retry import Retry\n+\n+def httpbin(*suffix):\n+    \"\"\"Returns URL for HTTPBIN resource.\"\"\"\n+    return 'http://httpbin.org/' + '/'.join(suffix)\n+\n+def test_urllib3_decode_error_wrapped():\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n+\n+    # Simulate DecodeError\n+    with pytest.raises(ConnectionError) as excinfo:\n+        raise DecodeError(\"Simulated DecodeError\")\n+    \n+    assert \"DecodeError\" in str(excinfo.value)\n+\n+def test_urllib3_timeout_error_wrapped():\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n+\n+    # Simulate TimeoutError\n+    with pytest.raises(ReadTimeout) as excinfo:\n+        raise Urllib3TimeoutError(\"Simulated TimeoutError\")\n+    \n+    assert \"TimeoutError\" in str(excinfo.value)\n+\n def test_prepare_unicode_url():\n     p = PreparedRequest()\n     p.prepare(\n@@ -1663,4 +1694,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "",
  "psf__requests-863": "diff --git a/requests/models.py b/requests/models.py\nindex bc1c443..6a26425 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -463,7 +463,10 @@ class Request(object):\n     def register_hook(self, event, hook):\n         \"\"\"Properly register a hook.\"\"\"\n \n-        self.hooks[event].append(hook)\n+        if isinstance(hook, list):\n+            self.hooks[event].extend(hook)\n+        else:\n+            self.hooks[event].append(hook)\n \n     def deregister_hook(self, event, hook):\n         \"\"\"Deregister a previously registered hook.\n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..04a5446 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -93,8 +93,26 @@ class TestFixme(CheckerTestCase):\n         code = 'print(\"# TODO this should not trigger a fixme\")'\n         with self.assertNoMessages():\n             self.checker.process_tokens(_tokenize_str(code))\n+    \n+    @set_config(notes=[\"???\"])\n+    def test_punctuation_note_tag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n \n-    def test_issue_2321_should_trigger(self) -> None:\n+    @set_config(notes=[\"!!!\"])\n+    def test_other_punctuation_note_tag(self) -> None:\n+        code = \"\"\"a = 1\n+                #!!!\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"!!!\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n         code = \"# TODO this should not trigger a fixme\"\n         with self.assertAddsMessages(\n             MessageTest(\n@@ -119,4 +137,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..2fd8c37 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -79,7 +79,23 @@ def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n \n \n-def test_unknown_confidence(capsys: CaptureFixture) -> None:\n+def test_unrecognized_short_option_exits_gracefully(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that pylint exits gracefully with usage message on unrecognized short option.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"usage: pylint\" in output.err\n+    assert \"Unrecognized option found: Q\" in output.err\n+    assert \"Traceback\" not in output.err\n+\n+def test_unrecognized_long_option_exits_gracefully(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that pylint exits gracefully with usage message on unrecognized long option.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"--unknown-option=yes\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"usage: pylint\" in output.err\n+    assert \"Unrecognized option found: unknown-option=yes\" in output.err\n+    assert \"Traceback\" not in output.err\n     \"\"\"Check that we correctly error an unknown confidence value.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--confidence=UNKNOWN_CONFIG\"], exit=False)\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..86a01f0 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1341,6 +1341,40 @@ class TestRunTC:\n             ]\n             with _test_cwd():\n                 os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\".\", \"--recursive=y\", \"--ignore-paths=^ignored_subdirectory/.*\"],\n+                    code=0,\n+                )\n+\n+    def test_ignore_path_recursive_with_pattern(self) -> None:\n+        \"\"\"Tests that ignore-paths works with specific patterns during recursive check.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\".\", \"--recursive=y\", \"--ignore-paths=^subdirectory/.*\"],\n+                    code=0,\n+                )\n+\n+    def test_ignore_path_recursive_absolute_path(self) -> None:\n+        \"\"\"Tests ignore-paths with an absolute path during recursive check.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                ignored_path = os.path.abspath(join(HERE, \"regrtest_data\", \"directory\", \"ignored_subdirectory\"))\n+                self._runtest(\n+                    [\".\", \"--recursive=y\", f\"--ignore-paths=^{ignored_path}\"],\n+                    code=0,\n+                )\n                 self._test_output(\n                     [\".\"],\n                     expected_output=\"No such file or directory\",\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..fd3759e 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,6 +934,26 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n+def test_module_same_name_as_package(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test that pylint can handle a module with the same name as its package.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"pkg/pkg.py\", \"pkg/other.py\"])\n+        linter.check([\"pkg\"])\n+    assert not linter.stats.by_msg\n+\n+def test_module_same_name_as_package_with_imports(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test that pylint handles imports correctly with a module having the same name as its package.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"pkg/pkg.py\", \"pkg/other.py\", \"main.py\"])\n+        with open(\"pkg/other.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"def foo(): pass\\n\")\n+        with open(\"main.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from pkg import other\\n\")\n+        linter.check([\"pkg\", \"main.py\"])\n+    assert not linter.stats.by_msg\n+\n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n@@ -941,4 +961,24 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+def test_module_same_name_as_package(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test that pylint can handle a module with the same name as its package.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"pkg/pkg.py\", \"pkg/other.py\"])\n+        linter.check([\"pkg\"])\n+    assert not linter.stats.by_msg\n+\n+def test_module_same_name_as_package_with_imports(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test that pylint handles imports correctly with a module having the same name as its package.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"pkg/pkg.py\", \"pkg/other.py\", \"main.py\"])\n+        with open(\"pkg/other.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"def foo(): pass\\n\")\n+        with open(\"main.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from pkg import other\\n\")\n+        linter.check([\"pkg\", \"main.py\"])\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..f18d097 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -113,6 +114,23 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[2] == \"my_mod:2::()\"\n \n \n+def test_custom_braces_in_msg_template(linter: PyLinter) -> None:\n+    \"\"\"Test custom message template with braces.\"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"my_mod\")\n+\n+    # Add messages to trigger the custom template\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\"E1101\", line=2, args=(3, 4))\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"error\" }'\n+\n+\n def test_deprecation_set_output(recwarn):\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..3b6ae0a 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -298,6 +298,34 @@ class TestImportPath:\n         assert \"_src\" in sys.modules\n         assert \"_src.tests\" in sys.modules\n \n+    def test_prevent_multiple_imports(self, simple_module: Path, tmp_path: Path) -> None:\n+        \"\"\"Ensure `importlib` mode does not cause multiple imports of the same module.\"\"\"\n+        module1 = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        module2 = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        assert module1 is module2\n+        assert module1.__name__ in sys.modules\n+        assert module2.__name__ in sys.modules\n+\n+    def test_import_side_effects(self, simple_module: Path, tmp_path: Path) -> None:\n+        \"\"\"Test if import side effects are executed only once when using importlib.\"\"\"\n+        side_effects_module_content = \"\"\"\n+        def foo():\n+            global COUNT\n+            COUNT += 1\n+        COUNT = 0\n+        foo()\n+        \"\"\"\n+\n+        side_effects_module = tmp_path / \"_src/tests/side_effects_module.py\"\n+        side_effects_module.parent.mkdir(parents=True)\n+        side_effects_module.write_text(side_effects_module_content, encoding=\"utf-8\")\n+\n+        module = import_path(side_effects_module, mode=\"importlib\", root=tmp_path)\n+        assert module.COUNT == 1  # type: ignore[attr-defined]\n+\n+        # Re-importing should not increment the COUNT again\n+        module_again = import_path(side_effects_module, mode=\"importlib\", root=tmp_path)\n+        assert module_again.COUNT == 1  # type: ignore[attr-defined]\n     def test_importmode_twice_is_different_module(\n         self, simple_module: Path, tmp_path: Path\n     ) -> None:\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..1958b49 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,11 +1,35 @@\n+\n import logging\n \n import py.io\n \n from _pytest.logging import ColoredLevelFormatter\n \n+def test_new_log_format():\n+    new_logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+\n+    record = logging.LogRecord(\n+        name=\"django.db.backends\",\n+        level=logging.DEBUG,\n+        pathname=\"utils.py\",\n+        lineno=114,\n+        msg=\"(0.000) SELECT \\\"app_url\\\".\\\"id\\\", \\\"app_url\\\".\\\"created\\\", \\\"app_url\\\".\\\"url\\\" FROM \\\"app_url\\\" WHERE \\\"app_url\\\".\\\"id\\\" = 2; args=(2,)\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    class ColorConfig(object):\n+        class option(object):\n+            pass\n \n-def test_coloredlogformatter():\n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = False\n+    formatter = ColoredLevelFormatter(tw, new_logfmt)\n+    output = formatter.format(record)\n+    expected_output = (\n+        \"DEBUG    django.db.backends:utils.py:114 (0.000) SELECT \\\"app_url\\\".\\\"id\\\", \\\"app_url\\\".\\\"created\\\", \\\"app_url\\\".\\\"url\\\" FROM \\\"app_url\\\" WHERE \\\"app_url\\\".\\\"id\\\" = 2; args=(2,)\"\n+    )\n+    assert output == expected_output\n     logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n \n     record = logging.LogRecord(\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..de7e0e3 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -301,6 +301,28 @@ def callequal(left, right, verbose=False):\n \n \n class TestAssert_reprcompare:\n+    \n+    def test_bytes_diff_empty_vs_nonempty(self):\n+        \"\"\"Test diff explanation for empty vs non-empty byte strings.\"\"\"\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+        ]\n+\n+    def test_bytes_diff_empty_vs_single_byte(self):\n+        \"\"\"Test diff explanation for empty byte string vs single byte.\"\"\"\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+        ]\n     def test_different_types(self):\n         assert callequal([0, 1], \"foo\") is None\n \n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..ae2719e 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,4 +1,7 @@\n+\n import os\n+from datetime import datetime\n+import platform\n from xml.dom import minidom\n \n import py\n@@ -157,7 +160,30 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n-    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n+    \n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+    \n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n         # mock LogXML.node_reporter so it always sets a known duration to each test report object\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..7113ccc 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,42 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ (#7145)\n+    \"\"\"\n+\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+def test_broken_repr_with_different_exception():\n+    \"\"\"saferepr() can handle different exceptions raised in __repr__\"\"\"\n+\n+    class AnotherClass:\n+        def __repr__(self):\n+            raise ValueError(\"unexpected error\")\n+\n+    assert saferepr(AnotherClass()).startswith(\n+        \"<[ValueError('unexpected error')] AnotherClass object at 0x\"\n+    )\n+\n+def test_normal_repr():\n+    \"\"\"saferepr() should work normally if __repr__ doesn't raise any exception\"\"\"\n+\n+    class NormalClass:\n+        def __repr__(self):\n+            return \"NormalClass\"\n+\n+    assert saferepr(NormalClass()) == \"NormalClass\"\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +189,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..d02f522 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -287,8 +287,31 @@ class TestInlineRunModulesCleanup:\n         testdir.inline_run(str(test_mod))\n         assert imported.data == 42\n \n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct.\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n \n-def test_assert_outcomes_after_pytest_error(testdir) -> None:\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n     testdir.makepyfile(\"def test_foo(): assert True\")\n \n     result = testdir.runpytest(\"--unexpected-argument\")\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..a5127ee 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,7 @@\n import os\n import sys\n+import os\n+\n from unittest import mock\n \n import pytest\n@@ -707,7 +709,36 @@ class TestFunctional:\n         reprec.assertoutcome(skipped=1)\n \n \n-class TestKeywordSelection:\n+class TestMark:\n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"#7360 - Test that caching does not lead to incorrect skipping behavior.\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert True\n+        \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr2=\"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+        \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n     def test_select_simple(self, testdir):\n         file_test = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..e41d124 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -234,8 +234,29 @@ class TestXFail:\n         result.stdout.fnmatch_lines(\n             [\"*def test_func():*\", \"*assert 0*\", \"*1 failed*1 pass*\"]\n         )\n-\n-    def test_xfail_evalfalse_but_fails(self, testdir):\n+    \n+    @pytest.mark.parametrize(\n+        \"test_input, expected\",\n+        [\n+            ([\"-rs\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+            ([\"-rs\", \"--runxfail\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+        ],\n+    )\n+    def test_skip_location_reporting(self, testdir, test_input, expected):\n+        \"\"\"\n+        Test case to verify that pytest.mark.skip reports the correct location\n+        when using --runxfail, which previously caused incorrect location reporting.\n+        \"\"\"\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n         item = testdir.getitem(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..8bfae31 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -411,6 +412,33 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*NOTRUN*\"])\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(\n+        self, testdir: Testdir\n+    ) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     def test_dynamic_xfail_set_during_funcarg_setup(self, testdir):\n         p = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..70460c7 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,4 +1,6 @@\n+\n import os\n+from _pytest.monkeypatch import MonkeyPatch\n import stat\n import sys\n from pathlib import Path\n",
  "scikit-learn__scikit-learn-10297": "",
  "scikit-learn__scikit-learn-11281": "",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..49d2df9 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,6 +260,44 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        ohe.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_handle_unknown_shorter_string():\n+    X = np.array(['a', 'b', 'c', 'd']).reshape((-1, 1))\n+    X2 = np.array(['e', 'b']).reshape((-1, 1))\n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        ohe.transform(X2_passed).toarray(),\n+        np.array([[0., 0., 0., 0.], [0., 1., 0., 0.]]))\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_ignore_nonstring():\n+    X = np.array(['22', '333', '4444', '11111111']).reshape((-1, 1))\n+    X2 = np.array(['55555', '66666']).reshape((-1, 1))\n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        ohe.transform(X2_passed).toarray(),\n+        np.array([[0., 0., 0., 0.], [0., 0., 0., 0.]]))\n+    assert_array_equal(X2, X2_passed)\n+\n def test_one_hot_encoder_no_categorical_features():\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..cfbe5ea 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -590,6 +590,23 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n                             covariance_type=covar_type,\n                             max_iter=max_iter, tol=tol)\n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+def test_gaussian_mixture_fit_predict_varied_n_init():\n+    # Test with different n_init values\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    for n_init in [1, 5, 10, 20]:\n+        gm = GaussianMixture(n_components=5, n_init=n_init, random_state=0)\n+        y_pred1 = gm.fit_predict(X)\n+        y_pred2 = gm.predict(X)\n+        assert_array_equal(y_pred1, y_pred2)\n+\n         # check if fit_predict(X) is equivalent to fit(X).predict(X)\n         f = copy.deepcopy(g)\n         Y_pred1 = f.fit(X).predict(X)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..89cac1e 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,11 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n-                                   assert_raises)\n+                                   assert_raises, assert_allclose)\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n@@ -70,8 +71,20 @@ def test_kernel_pca_consistent_transform():\n     transformed2 = kpca.transform(X_copy)\n     assert_array_almost_equal(transformed1, transformed2)\n \n-\n-def test_kernel_pca_sparse():\n+def test_kernel_pca_sign_invariance():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+    kpca = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+    \n+    signs = []\n+    for _ in range(10):\n+        transformed_X = kpca.fit_transform(X)\n+        signs.append(np.sign(transformed_X[0]))\n+\n+    # Check if any two sign patterns differ\n+    for i in range(len(signs) - 1):\n+        assert_allclose(np.abs(signs[i]), np.abs(signs[i + 1]))\n+        assert not np.all(signs[i] == signs[i + 1]), \"All sign patterns are the same, expected variability\"\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..100f9c1 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1057,6 +1057,25 @@ def test_pipeline_memory():\n     finally:\n         shutil.rmtree(cachedir)\n \n+def test_pipeline_len():\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.feature_selection import SelectKBest\n+    from sklearn.feature_selection import f_regression\n+    from sklearn.svm import SVC\n+\n+    # Test with two steps\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+    assert len(pipe) == 2, \"Length of pipeline with two steps should be 2.\"\n+\n+    # Test with one step\n+    pipe_one_step = Pipeline([('anova', anova_filter)])\n+    assert len(pipe_one_step) == 1, \"Length of pipeline with one step should be 1.\"\n+\n+    # Test with no steps\n+    pipe_no_step = Pipeline([])\n+    assert len(pipe_no_step) == 0, \"Length of pipeline with no steps should be 0.\"\n \n def test_make_pipeline_memory():\n     cachedir = mkdtemp()\n@@ -1070,4 +1089,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..1270084 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -197,4 +197,25 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n+\n+    # Additional test cases for discrete_features set to array of indices\n+    for mutual_info in (mutual_info_regression, mutual_info_classif):\n+        # Case with array of indices\n+        mi_indices = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+        mi_boolean = mutual_info(X, y, discrete_features=[True, False, True], random_state=0)\n+        \n+        # Ensure mutual information is calculated correctly for indices and boolean mask\n+        assert_array_equal(mi_indices, mi_boolean)\n+        \n+        # Case with boolean mask\n+        assert_raises(ValueError, mutual_info, X, y, discrete_features=[True, False, True, False])\n+\n+        # Invalid index\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[1, 4])\n+        \n+        # Invalid type for discrete_features\n+        assert_raises(TypeError, mutual_info, X, y, discrete_features=123)\n+\n+        # Mixed types in discrete_features\n+        assert_raises(ValueError, mutual_info, X, y, discrete_features=[0, '1'])\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..f25d034 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,8 +217,18 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_array_parameters_repr():\n+    # Set the configuration to print only changed parameters\n+    set_config(print_changed_only=True)\n+    \n+    # Test the representation of LogisticRegressionCV with array parameters\n+    try:\n+        repr_output = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+        print(repr_output)  # For debugging purposes, to see the output\n+    except ValueError as e:\n+        assert False, f\"Unexpected ValueError: {str(e)}\"\n \n-def test_pipeline():\n+    set_config(print_changed_only=False)\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n     expected = \"\"\"\n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..c24be4e 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -679,6 +679,52 @@ def test_unicode_kernel():\n                                 kernel='linear',\n                                 random_seed=0)\n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for a ZeroDivisionError in _sparse_fit when support_vectors_ is empty\n+    import numpy as np\n+    from scipy import sparse\n+    from sklearn import svm\n+\n+    # Sparse input data\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    \n+    # Initialize the SVR model with a linear kernel\n+    model = svm.SVR(kernel='linear')\n+    \n+    # Fit the model with the sparse data\n+    model.fit(X_train, y_train)\n+    \n+    # Ensure that the model's support_vectors_ and dual_coef_ are empty\n+    assert model.support_vectors_.shape[0] == 0\n+    assert model.dual_coef_.shape[1] == 0\n+\n+def test_sparse_fit_with_no_support_vectors():\n+    # Test with different scenario where the support vectors are expected to be empty\n+    import numpy as np\n+    from scipy import sparse\n+    from sklearn import svm\n+\n+    # Sparse input with a different configuration\n+    X_train = sparse.csr_matrix([[0, 0, 0, 0],\n+                                 [0, 0, 0, 0],\n+                                 [0, 0, 0, 0],\n+                                 [0, 0, 0, 0]])\n+    y_train = np.array([0, 0, 0, 0])\n+    \n+    # Initialize the SVR model with a linear kernel\n+    model = svm.SVR(kernel='linear')\n+    \n+    # Fit the model with the sparse data\n+    model.fit(X_train, y_train)\n+    \n+    # Ensure that the model's support_vectors_ and dual_coef_ are empty\n+    assert model.support_vectors_.shape[0] == 0\n+    assert model.dual_coef_.shape[1] == 0\n+\n \n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "diff --git a/sklearn/metrics/cluster/tests/test_common.py b/sklearn/metrics/cluster/tests/test_common.py\nindex 9991cff..bb1424f 100644\n--- a/sklearn/metrics/cluster/tests/test_common.py\n+++ b/sklearn/metrics/cluster/tests/test_common.py\n@@ -164,6 +164,8 @@ def test_format_invariance(metric_name):\n         yield [str(x) for x in y.tolist()], 'list of strs'\n         yield y - 1, 'including negative ints'\n         yield y + 1, 'strictly positive ints'\n+        yield [str(x) for x in y.tolist()], 'list of strs'\n+        yield np.array([str(x) for x in y.tolist()], dtype=object), 'array of strs'\n \n     if metric_name in SUPERVISED_METRICS:\n         metric = SUPERVISED_METRICS[metric_name]\n",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..cfdfd62 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -668,7 +669,19 @@ def test_isotonic_regression_sample_weight_not_overwritten():\n \n \n @pytest.mark.parametrize(\"shape\", [\"1d\", \"2d\"])\n-def test_get_feature_names_out(shape):\n+def test_calibrated_classifier_cv_with_isotonic_and_pandas_output():\n+    \"\"\"Test CalibratedClassifierCV with IsotonicRegression and pandas output.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    X, y = make_classification(n_samples=30, n_features=3, random_state=42)\n+    base_clf = SGDClassifier()\n+    calibrated_clf = CalibratedClassifierCV(base_clf, method='isotonic')\n+    \n+    with set_config(transform_output=\"pandas\"):\n+        calibrated_clf.fit(X, y)\n+        proba = calibrated_clf.predict_proba(X)\n+    \n+    # Check if the output is a numpy array, since predict_proba should return a numpy array always\n+    assert isinstance(proba, np.ndarray)\n     \"\"\"Check `get_feature_names_out` for `IsotonicRegression`.\"\"\"\n     X = np.arange(10)\n     if shape == \"2d\":\n",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..2473564 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2121,6 +2121,36 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     with pytest.raises(AttributeError, match=\"not provide get_feature_names_out\"):\n         ct.get_feature_names_out()\n \n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False, False]), [False, False, False]],\n+    ids=[\"list\", \"bool_array\", \"bool_list\"],\n+)\n+def test_column_transformer_with_empty_selection_and_pandas_output(empty_selection):\n+    \"\"\"Test ColumnTransformer with pandas output when a feature selection is empty.\n+    \n+    This is a non-regression test for a specific bug where empty selections\n+    caused an error in pandas output mode.\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    from sklearn.preprocessing import StandardScaler\n+\n+    X = pd.DataFrame([[1.0, 2.0, 3.0], [3.0, 1.0, 4.0]], columns=[\"a\", \"b\", \"c\"])\n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", empty_selection),\n+            (\"numerical\", StandardScaler(), [\"a\", \"b\", \"c\"]),\n+        ],\n+        verbose_feature_names_out=True,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\", \"numerical__c\"])\n+\n+    ct.set_params(verbose_feature_names_out=False)\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"a\", \"b\", \"c\"])\n+\n     # The feature names are prefixed because verbose_feature_names_out=True is default\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n@@ -2128,4 +2158,4 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..072d26e 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -113,6 +113,72 @@ def test_automodule_special_members(app):\n     ]\n \n \n+import pytest\n+import sys\n+from .test_ext_autodoc import do_autodoc\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_inherited_members_exclusion(app):\n+    if sys.version_info < (3, 7):\n+        args = ''\n+    else:\n+        args = '(iterable=(), /)'\n+\n+    # Test exclusion of members from the 'list' base class\n+    options = {'members': None,\n+               'undoc-members': None,\n+               'inherited-members': 'Base'}\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.inheritance',\n+        '',\n+        '',\n+        '.. py:class:: Base()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedclassmeth()',\n+        '      :module: target.inheritance',\n+        '      :classmethod:',\n+        '',\n+        '      Inherited class method.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedstaticmeth(cls)',\n+        '      :module: target.inheritance',\n+        '      :staticmethod:',\n+        '',\n+        '      Inherited static method.',\n+        '',\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Derived.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '.. py:class:: MyList%s' % args,\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: MyList.meth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_mock_imports': ['missing_module',\n                                                             'missing_package1',\n@@ -125,4 +191,225 @@ def test_subclass_of_mocked_object(app):\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 21b6a7e..5ee3efa 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -737,6 +737,23 @@ def test_autodoc_type_aliases(app):\n     ]\n \n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc')\n+def test_autodoc_type_aliases_on_variables_and_attributes(app):\n+    # Setup the configuration with type aliases\n+    app.config.autodoc_type_aliases = {'myint': 'int'}\n+\n+    # Setup options to include members and undoc-members\n+    options = {\"members\": None, \"undoc-members\": None}\n+\n+    # Documentation for module-level variable\n+    actual = do_autodoc(app, 'module', 'target.annotations', options)\n+    assert '.. py:data:: variable' in actual\n+    assert ':type: int' in actual\n+\n+    # Documentation for class attribute\n+    assert '.. py:attribute:: Foo.attr' in actual\n+    assert ':type: int' in actual\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_autodoc_default_options(app):\n     # no settings\n",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..6470c75 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,34 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+import pytest\n+from sphinx.testing.util import SphinxTestApp, assert_node\n+from sphinx import addnodes\n+\n+def test_cmd_option_with_optional_value(app: SphinxTestApp):\n+    text = \".. option:: -j[=N]\"\n+    doctree = app.env.get_doctree('index')\n+    assert_node(doctree, (addnodes.index,\n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '-j'],\n+                                                                      [addnodes.desc_addname, '[=N]'])],\n+                                           [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+\n+def test_cmd_option_starting_with_bracket(app: SphinxTestApp):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = app.env.get_doctree('index')\n+    assert_node(doctree, (addnodes.index,\n+                          [addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, '[enable'],\n+                                                                      [addnodes.desc_addname, '=]PATTERN'])],\n+                                           [addnodes.desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n+\n+@pytest.fixture\n+def app(make_app):\n+    return make_app('restructuredtext')\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..834f43f 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,7 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n@@ -29,8 +30,18 @@ try:\n except ImportError:\n     pyximport = None\n \n-\n-def do_autodoc(app, objtype, name, options=None):\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_autodoc_with_empty_all(app):\n+    \"\"\"Test that autodoc does not document members if __all__ is empty.\"\"\"\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n     if options is None:\n         options = {}\n     app.env.temp_data.setdefault('docname', 'index')  # set dummy docname\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..1bfe321 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -44,6 +46,7 @@ def test_restify():\n     assert restify(None) == \":obj:`None`\"\n     assert restify(Integral) == \":class:`numbers.Integral`\"\n     assert restify(Any) == \":obj:`Any`\"\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n \n \n def test_restify_type_hints_containers():\n@@ -119,7 +122,9 @@ def test_restify_broken_type_hints():\n     assert restify(BrokenType) == ':class:`tests.test_util_typing.BrokenType`'\n \n \n-def test_stringify():\n+def test_restify_struct():\n+    # Test that restify formats struct.Struct correctly\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert stringify(int) == \"int\"\n     assert stringify(str) == \"str\"\n     assert stringify(None) == \"None\"\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..161b258 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,10 +1455,39 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    \n+    def test_other_parameters_section_with_napoleon_use_param_false(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+    Description of param2.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+    def test_other_parameters_section_with_napoleon_use_param_true(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+    Description of param2.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..f3cdcfa 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,30 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from pathlib import Path\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode')\n+def test_viewcode_epub_disabled(app: SphinxTestApp, status, warning):\n+    # Set the configuration to disable viewcode for EPUB\n+    app.builder.config.viewcode_enable_epub = False\n+    # Build the EPUB\n+    app.builder.build_all()\n+    \n+    # Check that the module pages are not created in the EPUB output\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode')\n+def test_viewcode_epub_enabled_via_config(app: SphinxTestApp, status, warning):\n+    # Set the configuration to enable viewcode for EPUB\n+    app.builder.config.viewcode_enable_epub = True\n+    # Build the EPUB\n+    app.builder.build_all()\n+    \n+    # Check that the module pages are created in the EPUB output\n+    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..8b06d83 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -320,9 +320,22 @@ def test_mul():\n         h = _af_rmul(h, a[i])\n         h2 = _af_rmuln(*a[:i + 1])\n         assert h == h2\n-\n-\n-def test_args():\n+def test_nondisjoint_cycles():\n+    # Test non-disjoint cycles being applied in left-to-right order\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])\n+    assert Permutation([[2, 0], [0, 1]]) == Permutation([1, 0, 2])\n+    assert Permutation([[0, 1, 2], [0, 1]]) == Permutation([1, 2, 0])\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])  # should be identity\n+\n+    # Check more complex interleaved cycles\n+    assert Permutation([[0, 1, 2], [2, 3], [1, 2]]) == Permutation([0, 2, 3, 1])\n+\n+    # Test with disjoint cycles included\n+    assert Permutation([[0, 1], [2, 3], [1, 0]]) == Permutation([0, 1, 3, 2])\n+\n+    # Check with identity cycles included, should not affect the result\n+    assert Permutation([[0, 1], [0], [1, 0]]) == Permutation([0, 1])\n     p = Permutation([(0, 3, 1, 2), (4, 5)])\n     assert p._cyclic_form is None\n     assert Permutation(p) == p\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..c6aac13 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -448,8 +449,30 @@ def test_sparse_matrix():\n     assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n     assert SparseMatrix.eye(2).nnz() == 2\n \n-\n-def test_transpose():\n+def test_matrix_stack_behavior():\n+    # Test horizontal stacking of 0 x n matrices\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(0, 1)\n+    M3 = SparseMatrix.zeros(0, 2)\n+    M4 = SparseMatrix.zeros(0, 3)\n+    result = SparseMatrix.hstack(M1, M2, M3, M4)\n+    assert result.shape == (0, 6), f\"Expected shape (0, 6), but got {result.shape}\"\n+\n+    # Test horizontal stacking of 1 x n matrices\n+    M1 = SparseMatrix.zeros(1, 0)\n+    M2 = SparseMatrix.zeros(1, 1)\n+    M3 = SparseMatrix.zeros(1, 2)\n+    M4 = SparseMatrix.zeros(1, 3)\n+    result = SparseMatrix.hstack(M1, M2, M3, M4)\n+    assert result.shape == (1, 6), f\"Expected shape (1, 6), but got {result.shape}\"\n+\n+    # Test vertical stacking of m x 0 matrices\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(1, 0)\n+    M3 = SparseMatrix.zeros(2, 0)\n+    M4 = SparseMatrix.zeros(3, 0)\n+    result = SparseMatrix.vstack(M1, M2, M3, M4)\n+    assert result.shape == (6, 0), f\"Expected shape (6, 0), but got {result.shape}\"\n     assert SparseMatrix(((1, 2), (3, 4))).transpose() == \\\n         SparseMatrix(((1, 3), (2, 4)))\n \n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..8ce67b4 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -100,6 +100,22 @@ def test_core_symbol():\n         check(c)\n \n \n+def test_pickle_sympy_expression_with_float_between_py2_and_py3():\n+    import pickle\n+    from sympy import symbols\n+\n+    x = symbols(\"x\")\n+    expr = x + 1.0\n+\n+    # Simulate pickling in Python 2\n+    pickled_data = pickle.dumps(expr, protocol=2)\n+\n+    # Simulate unpickling in Python 3\n+    unpickled_expr = pickle.loads(pickled_data)\n+\n+    # Verify that the expression is correctly unpickled\n+    assert str(unpickled_expr) == 'x + 1.0'\n+\n def test_core_numbers():\n     for c in (Integer(2), Rational(2, 3), Float(\"1.2\")):\n         check(c)\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..23173e3 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -261,6 +261,19 @@ def test_coth():\n     assert coth(-5*pi*I/6) == -sqrt(3)*I\n \n     assert coth(pi*I/105) == -cot(pi/105)*I\n+\n+def test_coth_log_tan_subs():\n+    from sympy import coth, log, tan, Symbol\n+    \n+    x = Symbol('x')\n+    expression = coth(log(tan(x)))\n+    \n+    # Test substitution for values that previously caused errors\n+    values_to_test = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    \n+    for value in values_to_test:\n+        result = expression.subs(x, value)\n+        assert isinstance(result, coth), f\"Expected type coth, got {type(result)}\"\n     assert coth(-pi*I/105) == cot(pi/105)*I\n \n     assert coth(2 + 3*I) == coth(2 + 3*I)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..879c5b8 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,21 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import Matrix, eye, ones\n+    # Test for issue 13643\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..30f9592 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -615,51 +615,55 @@ def test_latex_Range():\n \n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n+from sympy.printing.latex import latex\n+from sympy.series.sequences import SeqFormula, SeqPer, SeqAdd, SeqMul\n+from sympy import oo, symbols\n \n def test_latex_sequences():\n+    a = symbols('a')\n+\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4, 9, \\ldots\\right\\]'\n+    latex_str = r'[0, 1, 4, 9, \\ldots]'\n     assert latex(s1) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1, 2, \\ldots\\right\\]'\n+    latex_str = r'[1, 2, 1, 2, \\ldots]'\n     assert latex(s2) == latex_str\n-\n     s3 = SeqFormula(a**2, (0, 2))\n     s4 = SeqPer((1, 2), (0, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4\\right\\]'\n+    latex_str = r'[0, 1, 4]'\n     assert latex(s3) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1\\right\\]'\n+    latex_str = r'[1, 2, 1]'\n     assert latex(s4) == latex_str\n \n     s5 = SeqFormula(a**2, (-oo, 0))\n     s6 = SeqPer((1, 2), (-oo, 0))\n \n-    latex_str = r'\\left\\[\\ldots, 9, 4, 1, 0\\right\\]'\n+    latex_str = r'[\\ldots, 9, 4, 1, 0]'\n     assert latex(s5) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 2, 1, 2, 1\\right\\]'\n+    latex_str = r'[\\ldots, 2, 1, 2, 1]'\n     assert latex(s6) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5, 11, \\ldots\\right\\]'\n+    latex_str = r'[1, 3, 5, 11, \\ldots]'\n     assert latex(SeqAdd(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5\\right\\]'\n+    latex_str = r'[1, 3, 5]'\n     assert latex(SeqAdd(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 11, 5, 3, 1\\right\\]'\n+    latex_str = r'[\\ldots, 11, 5, 3, 1]'\n     assert latex(SeqAdd(s5, s6)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4, 18, \\ldots\\right\\]'\n+    latex_str = r'[0, 2, 4, 18, \\ldots]'\n     assert latex(SeqMul(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4\\right\\]'\n+    latex_str = r'[0, 2, 4]'\n     assert latex(SeqMul(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 18, 4, 2, 0\\right\\]'\n+    latex_str = r'[\\ldots, 18, 4, 2, 0]'\n     assert latex(SeqMul(s5, s6)) == latex_str\n \n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..7ae612e 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,9 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, EX, RR, CC\n+from sympy import Poly\n+from sympy.abc import x, y, z\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -188,6 +191,21 @@ def test_Domain_preprocess():\n \n     raises(OptionError, lambda: Domain.preprocess('Z()'))\n \n+    # Additional test cases for verifying the issue: Poly(domain='RR[y,z]') doesn't work\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    \n+    # Test Poly with domain='RR[y,z]'\n+    assert Poly(1.2 * x * y * z, x).domain == RR[y, z]\n+    \n+    # Test specific cases of Poly with RR[y,z] with correct domain specification\n+    p = Poly(1.2 * x * y * z, x, domain=RR[y, z])\n+    assert p.domain == RR[y, z]\n+    assert p.as_expr() == 1.2 * y * z * x\n+\n+    # Test case with failing domain to ensure proper error is raised\n+    raises(OptionError, lambda: Domain.preprocess('RR(y)'))\n+\n     assert Domain.preprocess('Z(x)') == ZZ.frac_field(x)\n     assert Domain.preprocess('Q(x)') == QQ.frac_field(x)\n \n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..3efd081 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,7 +6111,22 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n-def test_MatrixSymbol_printing():\n+from sympy import MatrixSymbol, pretty, symbols\n+\n+def test_MatrixSymbol_special_character():\n+    # issue #14814\n+    n = symbols('n', integer=True)\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+    z = MatrixSymbol('z$', n, n)\n+\n+    assert pretty(x + y) == \"x + y*\"\n+    assert pretty(x + z) == \"x + z$\"\n+    assert pretty(y + z) == \"y* + z$\"\n+    assert pretty(-x + y) == \"-x + y*\"\n+    assert pretty(x - y) == \"x - y*\"\n+    assert pretty(-y + z) == \"-y* + z$\"\n+    assert pretty(y - z) == \"y* - z$\"\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n     B = MatrixSymbol(\"B\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..189d1a4 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -728,6 +728,19 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n \n+def test_curly_matrix_symbol():\n+    # Issue #15009\n+    from sympy import lambdify, MatrixSymbol\n+    curlyv = MatrixSymbol(\"{v}\", 2, 1)\n+    \n+    # Test if lambdify works without dummify\n+    lam = lambdify(curlyv, curlyv)\n+    assert lam([[1], [1]]) == [[1], [1]]\n+    \n+    # Test if lambdify works with dummify\n+    lam_dummified = lambdify(curlyv, curlyv, dummify=True)\n+    assert lam_dummified([[1], [1]]) == [[1], [1]]\n+\n def test_python_keywords():\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..5b06383 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -24,6 +25,16 @@ def test_Rational():\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n \n+def test_Max_Min():\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, y, z)) == \"Max[x, y, z]\"\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(2, x)) == \"Min[2, x]\"\n+    assert mcode(Min(x, y, z)) == \"Min[x, y, z]\"\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n+\n def test_Function():\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n     assert mcode(sin(x) ** cos(x)) == \"Sin[x]^Cos[x]\"\n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..5e67169 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,38 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+def test_indexed_matrix_expression_latex():\n+    # Test case to verify the resolution of the issue where indexed matrix expressions were not printing correctly in LaTeX.\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+\n+    # Additional test cases to ensure comprehensive coverage\n+    # Check different dimensions\n+    A = MatrixSymbol(\"A\", 2, 2)\n+    B = MatrixSymbol(\"B\", 2, 2)\n+    assert latex((A*B)[0, 1]) == r'\\sum_{i_{1}=0}^{1} A_{0, i_{1}} B_{i_{1}, 1}'\n+\n+    # Check symbolic dimensions\n+    m, n, p = symbols('m n p')\n+    X = MatrixSymbol(\"X\", m, n)\n+    Y = MatrixSymbol(\"Y\", n, p)\n+    assert latex((X*Y)[i, j]) == r'\\sum_{i_{1}=0}^{n - 1} X_{i, i_{1}} Y_{i_{1}, j}'\n+\n+    # Check for single element access on product\n+    assert latex((A*B)[1, 0]) == r'\\sum_{i_{1}=0}^{1} A_{1, i_{1}} B_{i_{1}, 0}'\n+\n+    # Ensure that the original test cases and behavior are not affected\n+    assert latex(A[0, 0]) == r'A_{0, 0}'\n+    assert latex(3 * A[0, 0]) == r'3 A_{0, 0}'\n+\n+    C = MatrixSymbol(\"C\", 1, 3)\n+    F = C[0, 0].subs(C, A - B)\n+    assert latex(F) == r'\\left(A - B\\right)_{0, 0}'\n+\n+from sympy import symbols, MatrixSymbol, latex\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..6d57754 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -21,7 +22,23 @@ def test_idiff():\n     assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n \n \n-def test_intersection():\n+def test_idiff_additional_cases():\n+    x = Symbol('x', real=True)\n+    y = Symbol('y', real=True)\n+    f = Function('f')\n+    g = Function('g')\n+\n+    # Test case for supporting Eq notation\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x).simplify() == (x + 1)*exp(x - y)/(y + 1)\n+\n+    # Test with function notation f(x)\n+    assert idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x).simplify() == (x + 1)*exp(x - f(x))/(f(x) + 1)\n+\n+    # Additional test cases to ensure broader functionality\n+    assert idiff(y*exp(y) - x*exp(x), y, x).simplify() == (x + 1)*exp(x - y)/(y + 1)\n+    assert idiff(f(x) - y*exp(x), [f(x), y], x).simplify() == (y + Derivative(y, x))*exp(x)\n+    assert idiff(f(x) - y*exp(x), [y, f(x)], x).simplify() == -y + exp(-x)*Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x).simplify() == Derivative(g(x), x)\n     assert intersection(Point(0, 0)) == []\n     raises(TypeError, lambda: intersection(Point(0, 0), 3))\n     assert intersection(\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..8c30413 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,6 +582,21 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n+def test_autowrap_unused_array_arg_cython():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    result = f(np.array([[1.0], [2.0]]))\n+    expected = 1.0\n+    \n+    assert result == expected, f\"Expected {expected}, got {result}\"\n+\n def test_empty_f_code():\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..3c43739 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,24 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n-\n-def test_issue_9623():\n+from sympy import Intersection, FiniteSet, Eq, symbols, S, Piecewise\n+\n+def test_intersection_remove_duplicates():\n+    x = symbols('x')\n+    # Test case for Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+    \n+    # Test case for Intersection({1}, {1}, {x}) producing Piecewise output\n+    assert Intersection({1}, {1}, {x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    \n+    # Test case for Intersection({1}, {x}) producing Piecewise output\n+    assert Intersection({1}, {x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    \n+    # Additional test cases to verify duplicates are handled\n+    assert Intersection({1, 1, 2}, {2, 2, 3}) == FiniteSet(2)\n+    assert Intersection({1, 1}, {1}) == FiniteSet(1)\n+    assert Intersection({1, 2}, {2, 2, 3}, {2}) == FiniteSet(2)\n+    assert Intersection(FiniteSet(1, 2), FiniteSet(2, 2, 3)) == FiniteSet(2)\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..2567505 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -811,7 +811,15 @@ def test_issue_15965():\n     assert simplify(B) == bnew\n \n \n+def test_issue_17137():\n+    x = Symbol('x')\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(sin(x)**(2 + 3*I)) == sin(x)**(2 + 3*I)\n+    assert simplify((cos(x) + sin(x))**I) == (cos(x) + sin(x))**I\n+\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..402ab8b 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -7,6 +8,13 @@ from sympy.utilities.pytest import raises, warns\n \n \n def test_point():\n+    # Test multiplication of Point2D by a scalar in both orders\n+    p1 = Point(0, 0)\n+    p2 = Point(1, 1)\n+    \n+    # Multiplying in different orders should yield the same result\n+    assert p1 + p2 * sympify(2.0) == Point(2, 2)\n+    assert p1 + sympify(2.0) * p2 == Point(2, 2)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n@@ -120,6 +128,13 @@ def test_point():\n \n \n def test_point3D():\n+    # Test multiplication of Point3D by a scalar in both orders\n+    p1 = Point3D(0, 0, 0)\n+    p2 = Point3D(1, 1, 1)\n+    \n+    # Multiplying in different orders should yield the same result\n+    assert p1 + p2 * sympify(2.0) == Point3D(2, 2, 2)\n+    assert p1 + sympify(2.0) * p2 == Point3D(2, 2, 2)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..db30ab4 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1899,7 +1899,44 @@ def test_expr():\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n \n \n+def test_non_string_equality():\n+    from sympy import symbols, sympify\n+    # Expressions should not compare equal to strings\n+    x = symbols('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Make sure == doesn't try to convert the resulting expression to a string\n+    # (e.g., by calling sympify() instead of _sympify())\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+\n+def test_sympy_symbol_comparison():\n+    from sympy import Symbol\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+\n+    assert (Symbol('x') == C()) is False\n+    assert (Symbol('x') != C()) is True\n+\n+    class D:\n+        def __repr__(self):\n+            return 'x'\n+\n+    assert (Symbol('x') == D()) is False\n+    assert (Symbol('x') != D()) is True\n+\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..b35df0c 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -547,7 +547,18 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n-    # issue 18122\n+    # issue 18186\n+    from sympy import symbols\n+\n+    x, y = symbols('x y', integer=True)\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=False) == \\\n+        set([(3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=False) == \\\n+        set([(3, 2)])\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n",
  "sympy__sympy-18532": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex f97b2ee..f2c2c88 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -137,6 +137,18 @@ def test_subs_with_unicode_symbols():\n \n \n def test_atoms():\n+    from sympy import Add, Mul, Symbol\n+    from sympy.core.numbers import Integer\n+\n+    # Verify that atoms() returns objects with no .args()\n+    # Symbols and numbers should be returned, but not expressions like Add or Mul\n+    x, y = Symbol('x'), Symbol('y')\n+    expr = Add(x, y) * Integer(2)\n+    assert expr.atoms() == {x, y, Integer(2)}\n+\n+    # Test with a more complex expression\n+    expr2 = Mul(Add(x, y), Integer(3))\n+    assert expr2.atoms() == {x, y, Integer(3)}\n     assert b21.atoms() == set()\n \n \n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..7f7e7e7 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,14 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_single_element_conversion():\n+    from sympy import Matrix, BlockDiagMatrix\n+    # Test for single matrix element in BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..f375025 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, XFAIL\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n k, l, m, n = symbols('k l m n', integer=True)\n@@ -83,7 +84,22 @@ def test_block_index():\n     assert BI.as_explicit().equals(eye(6))\n \n \n-def test_slicing():\n+def test_block_index_issue():\n+    # Test case derived from the issue description\n+    n, i = symbols('n, i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    \n+    # C[i, 0] should not simplify to (A)[i, 0] if i >= 1, as it is out of bounds for A\n+    assert C[i, 0] == MatrixElement(C, i, 0)  # Symbolic i case\n+\n+    # Additional checks for specific values\n+    assert C[0, 0] == A[0, 0]  # Element from A\n+    assert C[1, 0] == B[0, 0]  # Element from B when n > 0\n+\n+    # Ensure indexing beyond the concatenated size raises IndexError\n+    raises(IndexError, lambda: C[n + 1, 0])\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..433986c 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -316,8 +316,14 @@ def test_sign():\n     d = p - q\n     assert sign(d).func is sign or sign(d) == 0\n \n-\n-def test_as_real_imag():\n+    # Test the rewrite of sign to Abs\n+    y = Symbol('y')\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+    f = Function('f')\n+    assert sign(f(y)).rewrite(Abs) == Piecewise((0, Eq(f(y), 0)), (f(y)/Abs(f(y)), True))\n+    assert sign(0).rewrite(Abs) == 0\n+    assert sign(2*y).rewrite(Abs) == Piecewise((0, Eq(2*y, 0)), (2*y/Abs(2*y), True))\n+    assert sign(-3*y).rewrite(Abs) == Piecewise((0, Eq(-3*y, 0)), (-3*y/Abs(-3*y), True))\n     n = pi**1000\n     # the special code for working out the real\n     # and complex parts of a power with Integer exponent\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..c68516f 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -471,7 +471,22 @@ def test_multiset_permutations():\n         6\\n''')\n \n \n+from sympy.utilities.iterables import partitions\n+\n def test_partitions():\n+    \n+    # Test to ensure that partitions do not reuse dictionaries\n+    def test_non_reuse_of_dictionaries_in_partitions():\n+        # Collect partitions without copying\n+        results = list(partitions(6, k=2))\n+        # Modify one of the results\n+        results[0][2] = 999\n+        # Collect partitions again to see if the modification affected new results\n+        new_results = list(partitions(6, k=2))\n+        # Check if the new results are not affected by previous modification\n+        assert new_results[0][2] == 3, \"Partition dictionaries are being reused, but they should not be.\"\n+\n+    test_non_reuse_of_dictionaries_in_partitions()\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..1577dc3 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -254,7 +254,12 @@ def test_power_rewrite_exp():\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n \n-def test_zero():\n+from sympy import S, oo, power\n+\n+def test_issue_19572():\n+    # Verify that 0**-oo produces zoo\n+    assert 0**-oo == S.ComplexInfinity\n+    assert power(0, -oo) == S.ComplexInfinity\n     x = Symbol('x')\n     y = Symbol('y')\n     assert 0**x != 0\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..533e17e 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,6 @@\n+\n+from sympy.physics.units import joule\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..3028a67 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,21 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+import pytest\n+from sympy import Symbol\n+\n+def test_symbol_dict_absence():\n+    # Verify that Symbol instances don't have a __dict__ attribute\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"Symbol should not have a __dict__\"\n+    assert hasattr(s, '__slots__'), \"Symbol should have __slots__\"\n+    assert s.__slots__ == ('name',), \"Symbol.__slots__ should be ('name',)\"\n+\n+def test_symbol_instance():\n+    # Confirm instance creation and basic functionality\n+    s = Symbol('s')\n+    assert s.name == 's', \"Symbol's name attribute should be set correctly\"\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..7da2aef 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,22 @@\n+\n+def test_refine_complex_arguments():\n+    a = Symbol('a', real=True)\n+    x = Symbol('x', real=True)\n+    J = Integral(sin(x)*exp(-a*x), (x, 0, oo))\n+\n+    # Test case based on the issue description\n+    result = refine(J.doit(), Q.positive(a))\n+    expected = 1 / (a**2 + 1)\n+    assert result == expected, f\"Expected {expected}, but got {result}\"\n+\n+    # Additional test for refine on arg\n+    assert refine(arg(a), Q.positive(a)) == 0\n+\n+    # Additional test for refine on Abs\n+    assert refine(Abs(a), Q.positive(a)) == a\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, arg, Integral, sin, oo)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..5ade66f 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -19,6 +20,34 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+    # Test for issue with unexpected PolynomialError with Piecewise\n+    from sympy import sinh, exp, Piecewise, clear_cache\n+\n+    # Original issue example\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+\n+    # Clearing cache to simulate a fresh environment\n+    clear_cache()\n+    # This should not raise any errors\n+    expr.subs({1: 1.0})\n+\n+    # Additional cases to check similar issues do not occur\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+\n+    # Perform substitutions to ensure no PolynomialError is raised\n+    expr_cosh.subs({1: 1.0})\n+    expr_tanh.subs({1: 1.0})\n+\n+    # Variations with different functions and no division\n+    expr_log = log(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    expr_sin = sin(Piecewise((x_r, y_r > x_r), (y_r, True)))\n+\n+    # These should also not raise any errors\n+    expr_log.subs({1: 1.0})\n+    expr_sin.subs({1: 1.0})\n+\n \n def test_subs_Matrix():\n     z = zeros(2)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..ed6b133 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -5,6 +6,7 @@ from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n+from sympy.core.function import Derivative\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n \n@@ -45,7 +47,10 @@ def test_Matrix_kind():\n         m = cls.zeros(3, 2)\n         assert m.kind is MatrixKind(NumberKind)\n \n-def test_MatMul_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    d = Derivative(A, comm_x)\n+    assert d.kind is MatrixKind(NumberKind)\n     M = Matrix([[1,2],[3,4]])\n     assert MatMul(2, M).kind is MatrixKind(NumberKind)\n     assert MatMul(comm_x, M).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..6f77398 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -122,6 +122,15 @@ def test_monomials():\n \n     assert set(itermonomials([x, y], [1, 0])) == {S.One, x}\n     assert set(itermonomials([x, y], [1, 1])) == {S.One, x, y, x*y}\n+\n+    # New test cases for integer min_degrees and max_degrees\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {x1**3, x2**3, x3**3, x1*x2**2, x1**2*x3, x2*x3**2, x2**2*x1, x3**2*x1, x1*x3**2, x1*x2*x3}\n+\n+    assert set(itermonomials([x1, x2], 2, 1)) == {x1, x2, x1**2, x1*x2, x2**2}\n+\n+    # New test cases for list min_degrees and max_degrees\n+    assert set(itermonomials([x1, x2], [2, 2], [1, 1])) == {x1, x2, x1*x2, x1**2, x2**2}\n+    assert set(itermonomials([x1, x2], [3, 3], [2, 1])) == {x1**2, x1*x2, x1**2*x2, x1**3, x1*x2**2, x2**2, x2**3}\n     assert set(itermonomials([x, y], [1, 2])) == {S.One, x, y, x*y, y**2, x*y**2}\n     assert set(itermonomials([x, y], [1, 2], [1, 1])) == {x*y, x*y**2}\n     assert set(itermonomials([x, y], [1, 2], [1, 2])) == {x*y**2}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..bb12e73 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -45,6 +46,8 @@ def test_solve_poly_system():\n         [x + x*y - 3, y + x*y - 4], x, y) == [(-3, -2), (1, 2)]\n \n     raises(NotImplementedError, lambda: solve_poly_system([x**3 - y**3], x, y))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x - 1], (x, y)))\n     raises(NotImplementedError, lambda: solve_poly_system(\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..9799d2c 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy.core.basic import Basic\n+\n+from sympy.core.parameters import evaluate\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n@@ -12,6 +13,11 @@ from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n \n \n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        Point2D(1, 2)\n+\n def test_point():\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..f0ff58c 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -347,7 +347,25 @@ def test_cse_MatrixSymbol():\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n \n-def test_cse_MatrixExpr():\n+def test_cse_MatrixSymbol_indexing():\n+    from sympy import MatrixSymbol, cse, symbols\n+\n+    # Create a 4x4 MatrixSymbol\n+    A = MatrixSymbol('A', 4, 4)\n+    B = MatrixSymbol('B', 4, 4)\n+\n+    # Test simple element-wise multiplication and ensure cse handles it correctly\n+    assert cse(A[0, 0] * B[0, 0]) == ([], [A[0, 0] * B[0, 0]])\n+    assert cse(A[0, 0] * A[1, 0] + A[0, 0] * A[1, 0] * A[2, 0]) == ([(x0, A[0, 0] * A[1, 0])], [x0 * A[2, 0] + x0])\n+    assert cse(A[0, 1] * A[1, 0] + A[0, 1] * A[1, 0]) == ([(x0, A[0, 1] * A[1, 0])], [x0 + x0])\n+\n+    # Test with symbolic dimensions\n+    n, m = symbols('n m', integer=True)\n+    C = MatrixSymbol('C', n, m)\n+    D = MatrixSymbol('D', n, m)\n+\n+    # Using symbolic dimensions to ensure the function handles symbolic sizes correctly\n+    assert cse(C[0, 0] * D[0, 0]) == ([], [C[0, 0] * D[0, 0]])\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n \n",
  "sympy__sympy-23117": "",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..04b6cda 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,8 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n@@ -1182,7 +1184,19 @@ def test_lambdify_inspect():\n     assert 'x**2' in inspect.getsource(f)\n \n \n-def test_issue_14941():\n+def test_lambdify_single_element_tuple():\n+    # Test that lambdify returns a tuple with a single element correctly\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,)\n+    # Ensure the generated code reflects the correct tuple syntax\n+    source_code = inspect.getsource(f_single)\n+    assert \"return (1,)\" in source_code\n+\n+    # Test that lambdify returns a tuple with two elements correctly\n+    f_double = lambdify([], (1, 2))\n+    assert f_double() == (1, 2)\n+    source_code = inspect.getsource(f_double)\n+    assert \"return (1, 2)\" in source_code\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..73beb2a 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,28 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units.quantities import Quantity\n+    import sympy\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + sympy.exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..696ee2b 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,6 +45,22 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n+def test_tensor_product_issue_expansion():\n+    # Test for the issue described: TensorProduct expansion with scalar factors\n+    U = Operator('U')\n+    V = Operator('V')\n+    P = TensorProduct(2*U - V, U + V)\n+    expanded_P = P.expand(tensorproduct=True)\n+    expected_expansion = TensorProduct(2*U, U) + TensorProduct(2*U, V) - TensorProduct(V, U) - TensorProduct(V, V)\n+    assert expanded_P == expected_expansion\n+\n+    # Additional tests from the original test patch\n+    assert TP(A - B, B - A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n \n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..2edc7ad 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,7 +563,65 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_issue_24211_negative_factor():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, -3 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_issue_24211_different_units():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, kilometer, hour\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 50 * kilometer / hour)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 3.6 * kilometer / hour**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 2 * hour)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..f27bac4 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, volt\n+from sympy.physics.units.prefixes import milli\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -22,6 +24,18 @@ def test_prefix_operations():\n     assert 1 / m == k\n     assert k / m == M\n \n+    # Test milli prefix with watts\n+    assert milli * W == W / 1000\n+    assert W * milli == W / 1000\n+    # Ensure that multiplication is commutative\n+    assert milli * W == W * milli\n+\n+    # Test milli prefix with volts as another example\n+    assert milli * volt == volt / 1000\n+    assert volt * milli == volt / 1000\n+    assert milli * volt == volt * milli\n+\n+    # Original tests\n     assert dodeca * dodeca == 144\n     assert 1 / dodeca == S.One / 12\n     assert k / dodeca == S(1000) / 12\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 067de1c..82c041c 100644\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -204,8 +204,25 @@ class ModelInheritanceTests(TestCase):\n \n         self.assertEqual(A.attr.called, (A, 'attr'))\n \n+from .models import Child\n \n class ModelInheritanceDataTests(TestCase):\n+    def test_child_inherited_ordering_pk_desc(self):\n+        \"\"\"\n+        Tests that the Child model, when inherited from Parent with a \n+        specified ordering of '-pk', returns results ordered by 'pk' in descending order.\n+        \"\"\"\n+        # Create Parent instances, these will automatically relate to Child instances\n+        p1 = Parent.objects.create(first_name='Alice', last_name='Smith', email='alice.smith@email.com')\n+        p2 = Parent.objects.create(first_name='Bob', last_name='Brown', email='bob.brown@email.com')\n+        \n+        # Query the Child model\n+        qs = Child.objects.all()\n+        self.assertSequenceEqual(qs, [p2, p1], \"Expected Child instances to be ordered by '-pk' descending.\")\n+\n+        # Verify the SQL query used for ordering\n+        expected_order_by_sql = 'ORDER BY \"tests_parent\".\"id\" DESC'\n+        self.assertIn(expected_order_by_sql, str(qs.query), \"Expected SQL ordering to be DESC by Parent.pk\")\n     @classmethod\n     def setUpTestData(cls):\n         cls.restaurant = Restaurant.objects.create(\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..b7ed3b5 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,7 +343,40 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n-    def test_order_by_f_expression(self):\n+    def test_order_by_self_referential_fk(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        editor_1 = Author.objects.create(name=\"Editor 1\", editor=author_1)\n+        editor_2 = Author.objects.create(name=\"Editor 2\", editor=author_2)\n+\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=editor_1)\n+        article_2 = Article.objects.create(headline=\"Article 2\", author=editor_2)\n+\n+        # Test ordering by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            [\"Article 2\", \"Article 1\"],\n+            attrgetter('headline'),\n+        )\n+\n+        # Test ordering by self-referential foreign key ID\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            [\"Article 1\", \"Article 2\"],\n+            attrgetter('headline'),\n+        )\n+\n+        # Test order_by with inverted order to verify DESC behavior\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            [\"Article 2\", \"Article 1\"],\n+            attrgetter('headline'),\n+        )\n+\n+        # Test query generation to ensure no unnecessary joins\n+        qs = Article.objects.filter(author__isnull=False).order_by('author__editor_id')\n+        self.assertIn(\"INNER JOIN\", str(qs.query))\n+        self.assertNotIn(\"LEFT OUTER JOIN\", str(qs.query))\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n                 \"Article 1\",\n",
  "django__django-13265": "",
  "django__django-14534": "",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..4dabc94 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -640,6 +640,47 @@ def test_colorbar_format(fmt):\n             '$\\\\mathdefault{10^{-2}}$')\n \n \n+from matplotlib.colors import Normalize\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.colors import LogNorm\n+\n+def test_colorbar_update_normal():\n+    # Create sample data\n+    data = 10**np.random.normal(1, 1, size=(50, 50))\n+    \n+    # Create a plot with imshow and a colorbar\n+    fig, ax = plt.subplots()\n+    plot = ax.imshow(data, cmap='gray')\n+    cbar = fig.colorbar(plot, ax=ax)\n+    \n+    # Change the normalization to LogNorm\n+    plot.set_norm(LogNorm())\n+    \n+    # Attempt to update the colorbar\n+    cbar.update_normal(plot)\n+    \n+    # Check that the colorbar scale is log\n+    assert cbar.ax.yaxis.get_scale() == 'log'\n+\n+def test_colorbar_update_no_zero_division():\n+    # Create sample data\n+    data = 10**np.random.normal(1, 1, size=(50, 50))\n+    \n+    # Create a plot with imshow and a colorbar\n+    fig, ax = plt.subplots()\n+    plot = ax.imshow(data, cmap='gray')\n+    cbar = fig.colorbar(plot, ax=ax)\n+    \n+    # Change the normalization to LogNorm\n+    plot.set_norm(LogNorm())\n+    \n+    # Call update_bruteforce and ensure no ZeroDivisionError\n+    try:\n+        cbar.update_bruteforce(plot)\n+    except ZeroDivisionError:\n+        assert False, \"update_bruteforce raised ZeroDivisionError unexpectedly\"\n+\n def test_colorbar_scale_reset():\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..03f4b01 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,38 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_pandas_transform_output():\n+    \"\"\"Test FeatureUnion with pandas transform_output setting.\"\"\"\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn import set_config\n+    import numpy as np\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    # First test with default transform output\n+    set_config(transform_output=\"default\")\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    result_default = union.fit_transform(data)\n+    assert isinstance(result_default, np.ndarray)\n+    assert result_default.shape[0] == 4  # As there are 4 unique dates\n+\n+    # Now test with pandas transform output\n+    set_config(transform_output=\"pandas\")\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    result_pandas = union.fit_transform(data)\n+    assert isinstance(result_pandas, pd.DataFrame)\n+    assert result_pandas.shape[0] == 4  # As there are 4 unique dates\n+    assert list(result_pandas.columns) == [\"my_transformer__value\"]\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..37ccd2d 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -131,6 +131,34 @@ def test_decorators(app):\n         '',\n     ]\n \n+@pytest.mark.skipif(sys.version_info < (3, 6), reason='py36+ is available since python3.6.')\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_member_in_superclass(app):\n+    options = {\"members\": None, \"inherited-members\": True}\n+    # Test for the issue where annotation-only member in superclass is treated as undocumented\n+    actual = do_autodoc(app, 'class', 'example.Bar', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Bar()',\n+        '   :module: example',\n+        '',\n+        '   docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr1',\n+        '      :module: example',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Bar.attr2',\n+        '      :module: example',\n+        '      :type: str',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_slots_attribute(app):\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..e95ea63 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -357,8 +358,23 @@ def test_issue_2827_trigsimp_methods():\n     eq = 1/sqrt(E) + E\n     assert exptrigsimp(eq) == eq\n \n-\n-def test_exptrigsimp():\n+def test_issue_15129_trigsimp_methods():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = t1.dot(t3)\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == sin(S(3)/50)\n+\n+def test_issue_15129_acos_simplification():\n+    r = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    simplified_r = simplify(r)\n+    assert trigsimp(simplified_r) == cos(S(1)/50)\n+    \n+    acos_expr = acos(r)\n+    simplified_acos = acos_expr.simplify()\n+    assert simplified_acos == acos(cos(S(1)/50)), \"acos simplification should evaluate correctly\"\n     def valid(a, b):\n         from sympy.utilities.randtest import verify_numerically as tn\n         if not (tn(a, b) and a == b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..cf3c5af 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4863,7 +4863,44 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert upretty(expr) == ucode_str\n \n \n-def test_units():\n+def test_sum_pretty_print_alignment():\n+    from sympy import Sum, oo, pprint\n+    from sympy.abc import x\n+\n+    # The expression to test\n+    expr = Sum(x, (x, 1, oo)) + 3\n+\n+    # Expected Unicode pretty print\n+    expected_unicode = \\\n+u(\"\"\"\\\n+  \u221e   \\n\\\n+ ___  \\n\\\n+ \u2572    \\n\\\n+  \u2572   x\\n\\\n+  \u2571    \\n\\\n+ \u2571    + 3\\n\\\n+ \u203e\u203e\u203e  \\n\\\n+x = 1 \\n\\\n+\"\"\")\n+\n+    # Test the pretty print output\n+    assert upretty(expr) == expected_unicode\n+\n+    # Expected ASCII pretty print\n+    expected_ascii = \\\n+\"\"\"\\\n+  oo  \\n\\\n+ ___  \\n\\\n+ \\\\   \\n\\\n+  \\\\  x\\n\\\n+  /  \\n\\\n+ /  + 3\\n\\\n+ \u203e\u203e\u203e  \\n\\\n+x = 1 \\n\\\n+\"\"\"\n+\n+    # Test the pretty print output\n+    assert pretty(expr) == expected_ascii\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..7a9b57c 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -699,6 +699,17 @@ def test_uniq():\n     assert list(uniq('a')) == ['a']\n     assert list(uniq('ababc')) == list('abc')\n     assert list(uniq([[1], [2, 1], [1]])) == [[1], [2, 1]]\n+\n+    f = [1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = [[1]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = list('THISTLE')\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = [1, 2, 3]\n+    raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n+    f = list(range(10))\n+    raises(RuntimeError, lambda: [f.clear() for i in uniq(f)])\n     assert list(uniq(permutations(i for i in [[1], 2, 2]))) == \\\n         [([1], 2, 2), (2, [1], 2), (2, 2, [1])]\n     assert list(uniq([2, 3, 2, 4, [2], [1], [2], [3], [1]])) == \\\n",
  "django__django-11797": "",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..fe30f29 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,7 +546,19 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n-    def test_uuid_pk_subquery(self):\n+    def test_subquery_as_sql(self):\n+        # Testing that Subquery sets subquery=True automatically\n+        small_companies = Company.objects.filter(num_employees__lt=200).values('pk')\n+        subquery_instance = Subquery(small_companies)\n+        \n+        # Ensure subquery attribute is set to True in Subquery constructor\n+        self.assertTrue(subquery_instance.query.subquery)\n+        \n+        # Compile the SQL and check the correctness of SQL syntax\n+        compiler = subquery_instance.query.get_compiler(connection=connection)\n+        sql, _ = subquery_instance.as_sql(compiler, connection)\n+        self.assertTrue(sql.startswith('(SELECT '))\n+        self.assertTrue(sql.endswith(')'))\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n         qs = UUIDPK.objects.filter(id__in=Subquery(UUID.objects.values('uuid_fk__id')))\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..3375848 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,7 +153,12 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n-    def test_reverse_fk_select_related_multiple(self):\n+    def test_wrong_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(PoolStyle.objects.annotate(\n+                tournament_pool=FilteredRelation('pool__tournament__pool'),\n+                ).select_related('tournament_pool'))\n+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\n         with self.assertNumQueries(1):\n             ps = list(\n                 PoolStyle.objects.annotate(\n@@ -163,4 +169,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..bcfea86 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -15,6 +16,9 @@ import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.axes import Axes\n+import matplotlib.pyplot as plt\n+import pickle\n+from matplotlib.figure import Figure\n from matplotlib.figure import Figure, FigureBase\n from matplotlib.layout_engine import (ConstrainedLayoutEngine,\n                                       TightLayoutEngine)\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..63b1055 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -1623,7 +1624,32 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_scatterplot_with_categorical_hue(self):\n+        # This test replicates the issue where using a categorical hue\n+        # with scatterplot in PairGrid.map causes an error.\n+\n+        import seaborn as sns\n+        import pandas as pd\n+\n+        # Create a simple DataFrame similar to iris dataset\n+        df = pd.DataFrame({\n+            'sepal_length': [5.1, 4.9, 4.7, 4.6, 5.0],\n+            'sepal_width': [3.5, 3.0, 3.2, 3.1, 3.6],\n+            'petal_length': [1.4, 1.4, 1.3, 1.5, 1.4],\n+            'petal_width': [0.2, 0.2, 0.2, 0.2, 0.2],\n+            'species': ['setosa', 'versicolor', 'virginica', 'setosa', 'versicolor']\n+        })\n+\n+        # Create PairGrid and use map to add scatterplot with categorical hue\n+        g = sns.PairGrid(df, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        # Using map with categorical hue\n+        try:\n+            g.map(sns.scatterplot, hue=df[\"species\"])\n+            # If no exception occurs, the test should pass\n+            assert True\n+        except Exception as e:\n+            # If an exception occurs, the test should fail\n+            pytest.fail(f\"An exception occurred: {e}\")\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..1e0d4ff 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -346,8 +346,18 @@ def test_excinfo_str():\n     assert s.endswith(\"ValueError\")\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n+import pytest\n \n-def test_excinfo_for_later():\n+def test_raises_context_str_behavior():\n+    # This tests the specific behavior mentioned in the issue\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    \n+    # Ensure that str(excinfo) does not match str(e) from a standard try-except\n+    # This currently tests the expected behavior where str(excinfo) is not the full message\n+    assert str(excinfo) != \"A\\nB\\nC\"\n+    # Ensure that str(excinfo.value) is the full exception message\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n     e = ExceptionInfo.for_later()\n     assert \"for raises\" in repr(e)\n     assert \"for raises\" in str(e)\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..b67294a 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -404,6 +404,10 @@ class TestCustomConftests:\n         testdir.makepyfile(\"def test_x(): pass\")\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        \n+        # Testing with the single-character shortcut for collect-only\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n@@ -434,6 +438,14 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        \n+        # Testing with the single-character shortcut for collect-only\n+        result = testdir.runpytest(\"-c\")\n+        result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n+        \n+        # Testing with the single-character shortcut for collect-only\n+        result = testdir.runpytest(\"-c\")\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..bc6d551 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -90,12 +90,20 @@ def missing_attr(c,\n     # type: (...) -> str\n     return a + (b or \"\")\n \n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n \n-class _ClassWithDocumentedInit:\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n     \"\"\"Class docstring.\"\"\"\n \n     def __init__(self, x: int) -> None:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..ce24463 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,21 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Symbol, symbols, MatrixSymbol, Identity, Sum, assume, Q as Query, refine\n \n def test_Identity_doit():\n+    # Test for sum of elements of an identity matrix\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    M = MatrixSymbol('M', n, n)\n+\n+    with assume(Query.orthogonal(M)):\n+        e = refine((M.T * M).doit())\n+\n+    # Check if the total sum of elements is 'n'\n+    assert Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit().subs(n, 3) == 3\n+    assert Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit().subs(n, 4) == 4\n+    assert Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit().subs(n, 5) == 5\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..2e1d3e4 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,7 +251,11 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n-# These bad LaTeX strings should raise a LaTeXParsingError when parsed\n+def test_issue_latex_parsing_fractions():\n+    from sympy.parsing.latex import parse_latex\n+    expr = parse_latex(\"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\")\n+    expected = ((a**3 + b)/c)/(1/(c**2))\n+    assert expr == expected, f\"Expected {expected}, got {expr}\"\n BAD_STRINGS = [\n     r\"(\",\n     r\")\",\n"
}