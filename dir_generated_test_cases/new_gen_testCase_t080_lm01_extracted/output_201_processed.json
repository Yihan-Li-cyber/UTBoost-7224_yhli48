{
  "astropy__astropy-12907": "",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..7a926c3 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,6 +1,65 @@\n+\n+def test_write_rst_with_header_rows():\n+    \"\"\"Test writing a RST table with header_rows specified\"\"\"\n+    tbl = QTable({'wave': [350, 950] * u.nm, 'response': [0.7, 1.2] * u.count})\n+    \n+    # Define expected output\n+    expected_lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      0.7    1\",\n+        \"  950.0      1.2    2\",\n+        \"======= ======== ====\",\n+    ]\n+    \n+    # Use StringIO to capture the output\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    \n+    # Check if the output matches the expected lines\n+    assert out.getvalue().splitlines() == expected_lines\n+\n+def test_read_write_roundtrip_with_header_rows():\n+    \"\"\"Test reading and writing a RST table with header_rows specified\"\"\"\n+    \n+    # Define input lines to be read\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    \n+    # Read the table from the lines\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    \n+    # Assertions for units and data types\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    # Use StringIO to capture the output of writing\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    \n+    # Check if the output matches the input lines\n+    assert out.getvalue().splitlines() == lines\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n+import numpy as np\n+import astropy.units as u\n+from astropy.table import QTable\n \n from astropy.io import ascii\n \n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..b251a1e 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -108,8 +108,86 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+import pytest\n+import numpy as np\n+from astropy.table import Table\n+from astropy.utils.exceptions import AstropyUserWarning\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+\n+def lowercase_header(value):\n+    \"\"\"Make every non-comment line lower case.\"\"\"\n+    lines = []\n+    for line in value.splitlines():\n+        if not line.startswith(\"!\"):\n+            line = line.lower()\n+        lines.append(line)\n+    return \"\\n\".join(lines)\n+\n+@pytest.mark.parametrize(\"lowercase\", [False, True])\n+def test_roundtrip_with_case(tmp_path, lowercase):\n+    example_qdp = \"\"\"\n+    ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n+    ! Columns are as labelled\n+    READ TERR 1\n+    READ SERR 2\n+    ! WT -- hard data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   NO       0.212439\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        0.000000\n+    NO NO NO NO NO\n+    ! WT -- soft data\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   0.726155        0.583890\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   2.410935        1.393592\n+    NO NO NO NO NO\n+    ! WT -- hardness ratio\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    55045.099887 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    ! Add command, just to raise the warning.\n+    READ TERR 1\n+    ! WT -- whatever\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.123456 2.37847222222222e-05    -2.37847222222222e-05   -0.292553       -0.374935\n+    NO 1.14467592592593e-05    -1.14467592592593e-05   0.000000        NO\n+    \"\"\"\n+\n+    if lowercase:\n+        example_qdp = lowercase_header(example_qdp)\n \n-def test_read_example():\n+    path = str(tmp_path / \"test.qdp\")\n+    path2 = str(tmp_path / \"test2.qdp\")\n+\n+    with open(path, \"w\") as fp:\n+        print(example_qdp, file=fp)\n+    with pytest.warns(AstropyUserWarning) as record:\n+        table = _read_table_qdp(path, names=[\"MJD\", \"Rate\"], table_id=0)\n+    assert np.any(\n+        [\n+            \"This file contains multiple command blocks\" in r.message.args[0]\n+            for r in record\n+        ]\n+    )\n+\n+    _write_table_qdp(table, path2)\n+\n+    new_table = _read_table_qdp(path2, names=[\"MJD\", \"Rate\"], table_id=0)\n+\n+    for col in new_table.colnames:\n+        is_masked = np.array([np.ma.is_masked(val) for val in new_table[col]])\n+        if np.any(is_masked):\n+            assert np.ma.is_masked(table[col][is_masked])\n+\n+        is_nan = np.array(\n+            [(not np.ma.is_masked(val) and np.isnan(val)) for val in new_table[col]]\n+        )\n+        assert np.allclose(new_table[col][~is_nan], table[col][~is_nan])\n+        if np.any(is_nan):\n+            assert np.isnan(table[col][is_nan])\n+    assert np.allclose(new_table[\"MJD_perr\"], [2.378472e-05, 1.1446759e-05])\n+\n+    for meta_name in [\"initial_comments\", \"comments\"]:\n+        assert meta_name in new_table.meta\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..64cb6c6 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,34 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+def test_nddata_mask_propagation():\n+    # Test to ensure mask propagation works correctly when one operand lacks a mask.\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # Ensure that complex mask operations still work correctly.\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..432749f 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -254,6 +254,25 @@ class TestTableFunctions(FitsTestCase):\n \n         t.close()\n \n+    def test_d_exponent_conversion(self):\n+        \"\"\"Test handling of 'D' exponents in FITS table.\"\"\"\n+        # Create a FITS table with a column that should use 'D' exponent\n+        r1 = np.array([1.23e45, 6.78e90])\n+        c1 = fits.Column(name='large_floats', format='D', array=r1)\n+        hdu = fits.TableHDU.from_columns([c1])\n+        \n+        # Write to a temporary FITS file\n+        hdu.writeto(self.temp('test_d_exponent.fits'), overwrite=True)\n+        \n+        # Read back the file and verify contents\n+        with open(self.temp('test_d_exponent.fits')) as f:\n+            file_content = f.read()\n+            assert '1.23D+45' in file_content\n+            assert '6.78D+90' in file_content\n+        \n+        with fits.open(self.temp('test_d_exponent.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data)\n+\n     def test_ascii_table(self):\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..01c9b40 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1090,6 +1090,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         base_url attribute of django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertEqual(default_storage.base_location, '')\n+\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Default FILE_UPLOAD_PERMISSIONS should be 0o644.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n",
  "django__django-10924": "",
  "django__django-11001": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 4e3940c..9973dda 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -366,6 +366,33 @@ class BasicExpressionsTests(TestCase):\n             pk=F('company_ceo_set__num_employees')\n         )\n         self.assertEqual(str(qs.query).count('JOIN'), 1)\n+    def test_order_by_multiline_sql(self):\n+        raw_order_by = (\n+            RawSQL('''\n+                CASE WHEN num_employees > 1000\n+                     THEN num_chairs\n+                     ELSE 0 END\n+            ''', []).desc(),\n+            RawSQL('''\n+                CASE WHEN num_chairs > 1\n+                     THEN 1\n+                     ELSE 0 END\n+            ''', []).asc(),\n+            RawSQL('''\n+                CASE WHEN num_chairs <= 1\n+                     THEN num_employees\n+                     ELSE 0 END\n+            ''', []).desc()\n+        )\n+        for qs in (\n+            Company.objects.all(),\n+            Company.objects.distinct(),\n+        ):\n+            with self.subTest(qs=qs):\n+                self.assertSequenceEqual(\n+                    qs.order_by(*raw_order_by),\n+                    [self.example_inc, self.gmbh, self.foobar_ltd],\n+                )\n \n     def test_ticket_18375_chained_filters(self):\n         # F() expressions do not reuse joins from previous filter.\n",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..55e2229 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -75,13 +75,28 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n-\n-class TestFormField(SimpleTestCase):\n+    def test_invalid_duration_format(self):\n+        field = models.DurationField()\n+        invalid_durations = [\n+            '14:00',         # Should be '00:14:00', but lacks seconds\n+            '1:15',          # Should be '00:01:15', but lacks seconds\n+            '1 12:',         # Ends with colon, no seconds\n+            '1 12:15:',      # Ends with colon, no seconds\n+            '1:15.1234567',  # Too many microseconds\n+        ]\n+        for duration in invalid_durations:\n+            with self.assertRaises(exceptions.ValidationError) as cm:\n+                field.clean(duration, None)\n+            self.assertEqual(cm.exception.code, 'invalid')\n+            self.assertIn(\n+                \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\",\n+                cm.exception.message % cm.exception.params\n+            )\n     # Tests for forms.DurationField are in the forms_tests app.\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..793cb50 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            'trailingnewline\\n', 'trailingnewline\\u000A'\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -258,4 +259,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..95b9ed3 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,7 +356,9 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n-    def test_non_string_content(self):\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n         self.assertEqual(r.content, b'12345')\n@@ -366,7 +368,10 @@ class HttpResponseTests(unittest.TestCase):\n         r.content = 12345\n         self.assertEqual(r.content, b'12345')\n \n-    def test_iter_content(self):\n+    def test_memoryview_content_via_property(self):\n+        r = HttpResponse()\n+        r.content = memoryview(b'some data')\n+        self.assertEqual(r.content, b'some data')\n         r = HttpResponse(['abc', 'def', 'ghi'])\n         self.assertEqual(r.content, b'abcdefghi')\n \n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..c99b8c7 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,6 +1,8 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n+from django.db.models.deletion import Collector\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n@@ -464,7 +466,34 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_instance_with_mixin(self):\n+        class SimpleModel(models.Model):\n+            name = models.CharField(max_length=100)\n+\n+        instance = SimpleModel.objects.create(name=\"Test\")\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(instance))\n+        instance.delete()\n+        self.assertIsNone(instance.pk)\n+\n+    def test_fast_delete_instance_with_fk_dependency(self):\n+        class RelatedModel(models.Model):\n+            user = models.ForeignKey(User, on_delete=models.CASCADE)\n+\n+        u = User.objects.create()\n+        related_instance = RelatedModel.objects.create(user=u)\n+        collector = Collector(using='default')\n+        self.assertFalse(collector.can_fast_delete(related_instance))\n+        related_instance.delete()\n+        self.assertIsNotNone(related_instance.pk)  # PK should not be None due to dependency\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..5096c94 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,6 +1,58 @@\n+\n+class MigrationAuthTests(TestCase):\n+    def test_migrate_with_existing_target_permission(self):\n+        \"\"\"\n+        Permissions may already exist:\n+\n+        - Old workaround was to manually create permissions for proxy models.\n+        - Model may have been concrete and then converted to proxy.\n+\n+        Output a reminder to audit relevant permissions.\n+        \"\"\"\n+        # Simulate pre-existing permissions for proxy models\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='display_proxys',\n+            name='May display proxys information',\n+        )\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_no_duplicate_permissions_created(self):\n+        \"\"\"\n+        Test that no duplicate permissions are created during migration.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        existing_permission = Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        \n+        # Attempt to run migration function\n+        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        \n+        # Fetch all permissions for proxy model to ensure no duplicates\n+        permissions = Permission.objects.filter(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+        )\n+        self.assertEqual(permissions.count(), 1)\n+        self.assertEqual(permissions.first(), existing_permission)\n+\n from importlib import import_module\n \n from django.apps import apps\n+from django.contrib.contenttypes.models import ContentType\n+from django.contrib.auth.models import Permission\n+from django.test.utils import captured_stdout\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..9c5a972 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -17,12 +17,30 @@ from django.apps.registry import Apps\n from django.test import SimpleTestCase\n from django.test.utils import extend_sys_path\n from django.utils import autoreload\n-from django.utils.autoreload import WatchmanUnavailable\n+from django.utils.autoreload import WatchmanUnavailable, StatReloader\n \n from .utils import on_macos_with_hfs\n \n \n-class TestIterModulesAndFiles(SimpleTestCase):\n+class TestStatReloader(SimpleTestCase):\n+    def test_manage_py_file_change_triggers_reload(self):\n+        \"\"\"\n+        Test that modifications to manage.py trigger the autoreloader.\n+        \"\"\"\n+        reloader = StatReloader()\n+        manage_py = self.temporary_file('manage.py')\n+        manage_py.write_text(\"print('Original content')\")\n+\n+        # Simulate initial state\n+        reloader.watch_file(manage_py)\n+\n+        # Modify manage.py to simulate a change\n+        manage_py.write_text(\"print('Modified content')\")\n+\n+        changed_files = reloader.tick()\n+\n+        # Assert that the manage.py file is detected as changed\n+        self.assertIn(manage_py.resolve(), changed_files)\n     def import_and_cleanup(self, name):\n         import_module(name)\n         self.addCleanup(lambda: sys.path_importer_cache.clear())\n",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..6784f07 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -18,6 +18,8 @@ from django.test import RequestFactory, SimpleTestCase, override_settings\n from django.test.utils import LoggingCaptureMixin\n from django.urls import path, reverse\n from django.utils.functional import SimpleLazyObject\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.utils.safestring import mark_safe\n from django.views.debug import (\n     CLEANSED_SUBSTITUTE, CallableSettingWrapper, ExceptionReporter,\n@@ -238,6 +240,28 @@ class DebugViewTests(SimpleTestCase):\n             m.assert_called_once_with(encoding='utf-8')\n \n \n+class Custom404PathConverterTests(SimpleTestCase):\n+    @override_settings(DEBUG=True)\n+    def test_custom_converter_http404_debug(self):\n+        \"\"\"\n+        Test that raising Http404 in a path converter's to_python method\n+        results in a technical 404 response when DEBUG is True.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+            self.assertContains(response, 'Technical details:', status_code=404)\n+\n+    @override_settings(DEBUG=False)\n+    def test_custom_converter_http404_no_debug(self):\n+        \"\"\"\n+        Test that raising Http404 in a path converter's to_python method\n+        results in a plain 404 response when DEBUG is False.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Not found', status_code=404)\n+\n class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..68c1c76 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -97,8 +97,55 @@ class CharFieldTests(SimpleTestCase):\n \n         field = Model._meta.get_field('field')\n         self.assertEqual(field.check(), [])\n+    \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, choices=[\n+                    ('ABC', 'Value Too Long!'), ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+        \n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n \n-    def test_missing_max_length(self):\n+    def test_valid_max_length_for_choices(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=3, choices=[\n+                    ('AB', 'Short'), ('OK', 'Good')\n+                ],\n+            )\n+        \n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [])\n+\n+    def test_nested_choices_with_valid_max_length(self):\n+        class Model(models.Model):\n+            group = models.CharField(\n+                max_length=7, choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+        \n+        field = Model._meta.get_field('group')\n+        self.assertEqual(field.check(), [])\n         class Model(models.Model):\n             field = models.CharField()\n \n",
  "django__django-11815": "",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..d2f0877 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,9 +317,26 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_two_digit_year(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        \n+        # Assuming current year is 2023 for testing purposes\n+        utcnow = datetime(2023, 11, 6, 8, 49, 37)\n+        mocked_datetime.utcnow.return_value = utcnow\n+        \n+        tests = (\n+            ('Sunday, 06-Nov-49 08:49:37 GMT', datetime(2049, 11, 6, 8, 49, 37)),  # Year 49 should map to 2049\n+            ('Monday, 06-Nov-50 08:49:37 GMT', datetime(1950, 11, 6, 8, 49, 37)),  # Year 50 should map to 1950\n+            ('Tuesday, 06-Nov-23 08:49:37 GMT', datetime(2023, 11, 6, 8, 49, 37)),  # Year 23 should map to 2023\n+            ('Wednesday, 06-Nov-73 08:49:37 GMT', datetime(1973, 11, 6, 8, 49, 37)),  # Year 73 should map to 1973\n+            ('Thursday, 06-Nov-99 08:49:37 GMT', datetime(1999, 11, 6, 8, 49, 37)),  # Year 99 should map to 1999\n+        )\n+        for rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..acc1d38 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,28 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+\n+class EnumFieldTypeTests(TestCase):\n+    def setUp(self) -> None:\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_value_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_retrieved_object_value_is_str(self):\n+        my_object = MyObject.objects.get(pk=self.my_object.pk)\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..2687f3b 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -147,9 +147,24 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+from django.db import models\n+from django.test import SimpleTestCase\n \n class GetFieldDisplayTests(SimpleTestCase):\n \n+    def test_overriding_get_FIELD_display(self):\n+        \"\"\"\n+        Test case for overriding get_FIELD_display in models.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return \"something\"\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n     def test_choices_and_field_display(self):\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex 12487f2..bdc63cb 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -2,6 +2,9 @@ from django.urls import include, path, re_path\n \n from . import views\n \n+from django.urls import re_path, path, include\n+from . import views\n+\n urlpatterns = [\n     path('articles/2003/', views.empty_view, name='articles-2003'),\n     path('articles/<int:year>/', views.empty_view, name='articles-year'),\n@@ -13,5 +16,6 @@ urlpatterns = [\n     re_path(r'^regex/(?P<pk>[0-9]+)/$', views.empty_view, name='regex'),\n     re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n     path('', include('urlpatterns.more_urls')),\n+    re_path(r'^module/(?P<format>(html|json|xml))?/?$', views.modules, name='modules'),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n-]\n+]\n",
  "django__django-12284": "",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..effc890 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,4 +1,6 @@\n+\n from django.core.checks import Error\n+from django.test import override_settings\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n@@ -75,7 +77,46 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n-    def test_inconsistent_language_settings(self):\n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+            ('ca', 'Catalan'),\n+        ],\n+    )\n+    def test_sublanguage_with_base_language_available(self):\n+        tests = [\n+            # Valid sublanguage + base language available.\n+            'de-at',  # de is available\n+            'fr-CA',  # fr is available\n+        ]\n+        for tag in tests:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('en', 'English'),\n+        ],\n+    )\n+    def test_sublanguage_without_base_language_available(self):\n+        tests = [\n+            # Invalid sublanguage + no base language available.\n+            'fr-CA',  # fr is not available\n+            'de-at',  # de is not available\n+        ]\n+        msg = (\n+            'You have provided a value for the LANGUAGE_CODE setting that is '\n+            'not in the LANGUAGES setting.'\n+        )\n+        for tag in tests:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [\n+                    Error(msg, id='translation.E004'),\n+                ])\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n             'not in the LANGUAGES setting.'\n",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..017699a 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +7,7 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n@@ -17,8 +19,67 @@ def get_connection_copy():\n     )\n     return test_connection\n \n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_missing_reference(self):\n+        # Test deserialize_db_from_string() with an object missing a reference.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": null, \"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        self.assertIsNone(obj.obj_ref)\n \n-class TestDbSignatureTests(SimpleTestCase):\n+    def test_multiple_objects(self):\n+        # Test deserialization of multiple objects with foreign key dependencies.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 2}\n+            },\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj_ref\": null, \"related_objects\": []}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(pk=2)\n+        obj_ref = ObjectReference.objects.get(pk=1)\n+        self.assertIsNone(obj.obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n     def test_default_name(self):\n         # A test db name isn't set.\n         prod_name = 'hodor'\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..8f1e6f6 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -159,7 +159,63 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_relationship_model_with_foreign_key_to_wrong_model(self):\n+    def test_ambiguous_relationship_model_with_two_foreign_keys(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through='AmbiguousRelationship')\n+\n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('field')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.field', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n+    def test_ambiguous_relationship_model_with_correct_hint(self):\n+        class Person(models.Model):\n+            pass\n+\n+        class Group(models.Model):\n+            field = models.ManyToManyField('Person', through='AmbiguousRelationship')\n+\n+        class AmbiguousRelationship(models.Model):\n+            person = models.ForeignKey(Person, models.CASCADE)\n+            first_group = models.ForeignKey(Group, models.CASCADE, related_name='first')\n+            second_group = models.ForeignKey(Group, models.CASCADE, related_name='second')\n+\n+        field = Group._meta.get_field('field')\n+        self.assertEqual(field.check(from_model=Group), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Group.field', but it has more than one \"\n+                \"foreign key from 'Group', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"AmbiguousRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n         class WrongModel(models.Model):\n             pass\n \n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..0673ff4 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1249,7 +1249,48 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n-    def test_request_meta_filtering(self):\n+    def test_cleanse_setting_recurses_in_list_tuples_and_nested_dicts(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+                'nested_list': [\n+                    {'secret_key': 'nested_secret_1'},\n+                    {'another_key': 'nested_value', 'token': 'nested_token'},\n+                ],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+                'nested_list': [\n+                    {'secret_key': reporter_filter.cleansed_substitute},\n+                    {'another_key': 'nested_value', 'token': reporter_filter.cleansed_substitute},\n+                ],\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n         self.assertEqual(\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..6c449ff 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1751,6 +1751,63 @@ class OperationTests(OperationTestBase):\n         self.assertIndexNotExists(\"test_alinto_pony\", [\"pink\", \"weight\"])\n         # And deconstruction\n         definition = operation.deconstruct()\n+\n+    def test_alter_index_together_remove_with_unique_together_and_additional_checks(self):\n+        \"\"\"\n+        Test removing index_together while having unique_together and creating indexes using the Options.indexes.\n+        \"\"\"\n+        app_label = 'test_alterindextogether_remove_with_unique_together'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        \n+        # Add index together using Options.indexes.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        \n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        \n+        # Ensure no recreation of indexes\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'], False)\n+\n+    def test_alter_index_together_with_different_constraints(self):\n+        \"\"\"\n+        Test adding and removing index_together with multiple constraints on different columns.\n+        \"\"\"\n+        app_label = 'test_differential_constraints'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=['pink', 'height'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'height'])\n+\n+        # Add index together on different columns.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('blue', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['blue', 'weight'])\n+        \n+        # Remove the recently added index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['blue', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'height'])\n         self.assertEqual(definition[0], \"AlterIndexTogether\")\n         self.assertEqual(definition[1], [])\n         self.assertEqual(definition[2], {'name': \"Pony\", 'index_together': {(\"pink\", \"weight\")}})\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..7f6567d 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -697,6 +697,23 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n+    def test_queryset_delete_zero_objects(self):\n+        \"\"\"\n+        Test that deleting objects from a queryset returns consistent results\n+        when zero objects are deleted, both for models with and without foreign keys.\n+        \"\"\"\n+        # Model with foreign keys\n+        related = HiddenUser.objects.filter(pk=0)  # No objects to delete\n+        deleted, deleted_objs = related.delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {})\n+\n+        # Simple model without foreign keys\n+        simple = R.objects.filter(pk=0)  # No objects to delete\n+        deleted, deleted_objs = simple.delete()\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, {'delete.R': 0})\n+\n     def test_fast_delete_combined_relationships(self):\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..ef88c28 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -94,6 +94,37 @@ class ASGITest(SimpleTestCase):\n             ),\n         )\n         await communicator.send_input({'type': 'http.request'})\n+\n+    async def test_static_file_async_response(self):\n+        # Set up ASGIStaticFilesHandler and test application\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Construct HTTP request for a static file\n+        scope = self.async_request_factory._base_scope(path='/static/test/file.txt')\n+        communicator = ApplicationCommunicator(application, scope)\n+        await communicator.send_input({'type': 'http.request'})\n+        # Get the file content\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            test_file_contents = test_file.read()\n+        # Read the response\n+        stat = file_path.stat()\n+        response_start = await communicator.receive_output()\n+        self.assertEqual(response_start['type'], 'http.response.start')\n+        self.assertEqual(response_start['status'], 200)\n+        self.assertEqual(\n+            set(response_start['headers']),\n+            {\n+                (b'Content-Length', str(len(test_file_contents)).encode('ascii')),\n+                (b'Content-Type', b'text/plain'),\n+                (b'Content-Disposition', b'inline; filename=\"file.txt\"'),\n+                (b'Last-Modified', http_date(stat.st_mtime).encode('ascii')),\n+            },\n+        )\n+        response_body = await communicator.receive_output()\n+        self.assertEqual(response_body['type'], 'http.response.body')\n+        self.assertEqual(response_body['body'], test_file_contents)\n+        # Allow response.close() to finish\n+        await communicator.wait()\n         response_start = await communicator.receive_output()\n         self.assertEqual(response_start['type'], 'http.response.start')\n         self.assertEqual(response_start['status'], 200)\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..2ceef11 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,21 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Test cases from the original patch\n+            (' multiple---dash and  space ', 'multiple-dash-and-space', False),\n+            ('\\t whitespace-in-value \\n', 'whitespace-in-value', False),\n+            ('underscore_in-value', 'underscore_in-value', False),\n+            ('__strip__underscore-value___', 'strip__underscore-value', False),\n+            ('--strip-dash-value---', 'strip-dash-value', False),\n+            ('__strip-mixed-value---', 'strip-mixed-value', False),\n+            ('_ -strip-mixed-value _-', 'strip-mixed-value', False),\n+            # New test cases for the issue\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('---leading dashes', 'leading-dashes', False),\n+            ('trailing dashes---', 'trailing-dashes', False),\n+            ('__leading underscores', 'leading-underscores', False),\n+            ('trailing underscores__', 'trailing-underscores', False),\n+            ('-__mixed leading and trailing__-', 'mixed-leading-and-trailing', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..db2cadd 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2830,6 +2830,62 @@ class LimitChoicesToTests(TestCase):\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n \n+class LimitChoicesToTests(TestCase):\n+\n+    def setUp(self):\n+        # Setting up the Characters\n+        self.marley = Character.objects.create(username='Marley', last_action='2023-10-01')\n+        self.threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-01')\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        # Creating jokes\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(jokes__funny=True, jokes_today__funny=True),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={'jokes__funny': True, 'jokes_today__funny': True},\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(jokes__funny=True, jokes_today__funny=True),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(form.fields['character1'].queryset, [self.marley, self.threepwood])\n+        self.assertCountEqual(form.fields['character2'].queryset, [self.marley, self.threepwood])\n+        self.assertCountEqual(form.fields['character3'].queryset, [self.marley, self.threepwood])\n+\n+\n+from django.test import TestCase\n+from .models import Character, StumpJoke\n+from django import forms\n+from django.db import models\n+from django.db.models import Q\n+from django.test.utils import isolate_apps\n+\n class FormFieldCallbackTests(SimpleTestCase):\n \n     def test_baseform_with_widgets_in_meta(self):\n",
  "django__django-13321": "",
  "django__django-13401": "",
  "django__django-13447": "",
  "django__django-13551": "diff --git a/tests/auth_tests/models/__init__.py b/tests/auth_tests/models/__init__.py\nindex c6505e4..bb7b322 100644\n--- a/tests/auth_tests/models/__init__.py\n+++ b/tests/auth_tests/models/__init__.py\n@@ -1,3 +1,4 @@\n+\n from .custom_permissions import CustomPermissionsUser\n from .custom_user import (\n     CustomUser, CustomUserWithoutIsActiveField, ExtensionUser,\n@@ -10,6 +11,7 @@ from .proxy import Proxy, UserProxy\n from .uuid_pk import UUIDUser\n from .with_foreign_key import CustomUserWithFK, Email\n from .with_integer_username import IntegerUsernameUser\n+from .with_custom_email_field import CustomEmailField\n from .with_last_login_attr import UserWithDisabledLastLoginField\n from .with_many_to_many import (\n     CustomUserWithM2M, CustomUserWithM2MThrough, Organization,\n@@ -22,4 +24,4 @@ __all__ = (\n     'IntegerUsernameUser', 'IsActiveTestUser1', 'MinimalUser',\n     'NoPasswordUser', 'Organization', 'Proxy', 'UUIDUser', 'UserProxy',\n     'UserWithDisabledLastLoginField',\n-)\n+)\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..1147d25 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -884,6 +885,27 @@ class IterableLookupInnerExpressionsTests(TestCase):\n             ordered=False\n         )\n \n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_with_zero(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=0, maximum=50),\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_range_lookup_namedtuple_with_large_numbers(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=100, maximum=10000),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n     def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..fd37306 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -28,6 +28,7 @@ from django.core.management.commands.testserver import (\n )\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n+from unittest import mock\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..0a04350 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -29,15 +30,93 @@ class ShellCommandTestCase(SimpleTestCase):\n             stdin.seek(0)\n             call_command('shell')\n         self.assertEqual(stdout.getvalue().strip(), '100')\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'IPython': None})\n     def test_shell_with_ipython_not_installed(self, select):\n         select.return_value = ([], [], [])\n         with self.assertRaisesMessage(CommandError, \"Couldn't import ipython interface.\"):\n             call_command('shell', interface='ipython')\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n \n-    @mock.patch('django.core.management.commands.shell.select.select')  # [1]\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n     @mock.patch.dict('sys.modules', {'bpython': None})\n     def test_shell_with_bpython_not_installed(self, select):\n         select.return_value = ([], [], [])\n@@ -49,4 +128,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..ee919b4 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -967,7 +967,38 @@ class TestReadOnlyChangeViewInlinePermissions(TestCase):\n class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n     factory = RequestFactory()\n \n-    def test_verbose_name_plural_inline(self):\n+    def test_verbose_name_inline_defaults(self):\n+        class DefaultVerboseProfileInline(TabularInline):\n+            model = Profile\n+\n+        class DefaultVerboseNameProfileInline(TabularInline):\n+            model = VerboseNameProfile\n+            verbose_name = 'Child with verbose name'\n+\n+        class DefaultVerboseNamePluralProfileInline(TabularInline):\n+            model = VerboseNamePluralProfile\n+            verbose_name = 'Child with verbose name plural'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [\n+            DefaultVerboseProfileInline,\n+            DefaultVerboseNameProfileInline,\n+            DefaultVerboseNamePluralProfileInline,\n+        ]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        # Default model without explicit verbose names.\n+        self.assertContains(response, '<h2>Profiles</h2>')\n+        self.assertContains(response, 'Add another Profile')\n+        # Model with only verbose name.\n+        self.assertContains(response, '<h2>Child with verbose names</h2>')\n+        self.assertContains(response, 'Add another Child with verbose name')\n+        # Model with only verbose name plural.\n+        self.assertContains(response, '<h2>Child with verbose name plurals</h2>')\n+        self.assertContains(response, 'Add another Child with verbose name plural')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name_plural = 'Non-verbose childs'\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..26e651d 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -594,6 +594,17 @@ class TestQuerying(TestCase):\n             NullableJSONModel.objects.filter(value__j__isnull=False),\n             [self.objs[4]],\n         )\n+        # Additional tests for __isnull=True behavior on SQLite and Oracle\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+        \n+        # Test case ensuring no objects with a key having JSON null are returned\n+        self.assertNotIn(\n+            self.objs[4],\n+            NullableJSONModel.objects.filter(value__j__isnull=True)\n+        )\n \n     def test_isnull_key_or_none(self):\n         obj = NullableJSONModel.objects.create(value={'a': None})\n",
  "django__django-13768": "",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..9d47ade 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -395,6 +395,46 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_explicit_inherited_pk(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_explicit_inherited_parent_link(self):\n+        class Parent(models.Model):\n+            id = models.AutoField(primary_key=True)\n+\n+        class Child(Parent):\n+            parent_ptr = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_auto_created_inherited_pk(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            pass\n+\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [\n+            Warning(\n+                \"Auto-created primary key used when not defining a primary \"\n+                \"key type, by default 'django.db.models.AutoField'.\",\n+                hint=(\n+                    \"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                    \"CheckDefaultPKConfig.default_auto_field attribute to \"\n+                    \"point to a subclass of AutoField, e.g. \"\n+                    \"'django.db.models.BigAutoField'.\"\n+                ),\n+                obj=Parent,\n+                id='models.W042',\n+            ),\n+        ])\n+\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.BigAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -414,4 +454,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..6351968 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,8 +281,50 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n+from .assertions import AssertFormErrorsMixin\n+from django.test import TestCase\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Create choices for the model choice field tests\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+        ChoiceModel.objects.create(pk=3, name='c')\n+        \n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        \n+        # Test with a valid choice\n+        self.assertFormErrors([], f.clean, 1)\n+\n+        # Test with an invalid choice\n+        self.assertFormErrors(['\"invalid\" is not one of the available choices.'], f.clean, 'invalid')\n+        \n+    def test_modelmultiplechoicefield_value_placeholder(self):\n+        # Create choices for the model choice field tests\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+        ChoiceModel.objects.create(pk=3, name='c')\n+        \n+        f = ModelMultipleChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+                'invalid_list': 'Enter a list of values.',\n+            },\n+        )\n+        \n+        # Test with valid choices\n+        self.assertFormErrors([], f.clean, [1, 2])\n+\n+        # Test with an invalid choice\n+        self.assertFormErrors(['\"4\" is not one of the available choices.'], f.clean, [4])\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +349,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..9826b2a 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,5 +1,7 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n+from collections import UserDict\n \n \n class QTests(SimpleTestCase):\n@@ -16,6 +18,23 @@ class QTests(SimpleTestCase):\n         self.assertEqual(q | Q(), q)\n         self.assertEqual(Q() | q, q)\n \n+    def test_issue_pickle_error_with_dict_keys(self):\n+        # Test that using dict_keys does not raise a TypeError when using the | operator.\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n+    def test_issue_pickle_error_with_userdict_keys(self):\n+        # Test that using UserDict keys does not raise a TypeError when using the | operator.\n+        data = UserDict({'a': 1, 'b': 2})\n+        q = Q(x__in=data.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..3c44986 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -28,12 +28,14 @@ from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import (\n     Approximate, CaptureQueriesContext, isolate_apps, register_lookup,\n )\n+from django.db.models import Exists, OuterRef, Q\n from django.utils.functional import SimpleLazyObject\n \n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n     RemoteEmployee, Result, SimulationRun, Time,\n )\n+from django.db.models import Exists, OuterRef, Q\n \n \n class BasicExpressionsTests(TestCase):\n",
  "django__django-14155": "",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..94e9ae4 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test import override_settings\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -74,7 +76,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_mybigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_mysmallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_app_default_auto_field(self):\n         class Model(models.Model):\n@@ -91,7 +113,27 @@ class TestDefaultPK(SimpleTestCase):\n         m2m_pk = M2MModel._meta.get_field('m2m').remote_field.through._meta.pk\n         self.assertIsInstance(m2m_pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_mybigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_mysmallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_m2m_app_default_auto_field(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..2daf238 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2216,8 +2216,26 @@ class StartApp(AdminScriptTestCase):\n             \"already exists. Overlaying an app into an existing directory \"\n             \"won't replace conflicting files.\"\n         )\n+    def test_trailing_slash_in_nested_directory(self):\n+        \"\"\"\n+        Test creating an app in a nested directory with a trailing slash.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'nested', 'apps', 'app1')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('nested', 'apps', 'app1', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n \n-    def test_template(self):\n+    def test_nonexistent_directory_with_trailing_slash(self):\n+        \"\"\"\n+        Test attempting to create an app in a non-existent directory with a trailing slash.\n+        \"\"\"\n+        app_dir = os.path.join(self.test_dir, 'nonexistent', 'app1', '')\n+        _, err = self.run_django_admin(['startapp', 'app', app_dir])\n+        self.assertOutput(\n+            err,\n+            \"CommandError: Destination directory '{}' does not exist, please create it first.\".format(app_dir.rstrip(os.sep))\n+        )\n         out, err = self.run_django_admin(['startapp', 'new_app'])\n         self.assertNoOutput(err)\n         app_path = os.path.join(self.test_dir, 'new_app')\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..5dc83a4 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -8,6 +8,7 @@ from django.contrib.auth.forms import (\n     SetPasswordForm, UserChangeForm, UserCreationForm,\n )\n from django.contrib.auth.models import User\n+from django.forms import forms\n from django.contrib.auth.signals import user_login_failed\n from django.contrib.sites.models import Site\n from django.core import mail\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..b3f354d 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -655,6 +655,49 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(result.args, value.args)\n         self.assertEqual(result.keywords, value.keywords)\n \n+    def test_generate_migration_with_custom_field_and_mixin(self):\n+        \"\"\"\n+        Test that makemigrations properly imports 'models' when using a custom field and mixin.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+\n+        # Simulate makemigrations output\n+        migration_code = \"\"\"\n+# Generated by Django 3.2.4 on 2021-06-30 19:13\n+import app.models\n+from django.db import migrations, models\n+\n+class Migration(migrations.Migration):\n+    initial = True\n+    dependencies = []\n+    operations = [\n+        migrations.CreateModel(\n+            name='MyModel',\n+            fields=[\n+                ('name', app.models.MyField(primary_key=True, serialize=False)),\n+            ],\n+            options={\n+                'abstract': False,\n+            },\n+            bases=(app.models.MyMixin, models.Model),\n+        ),\n+    ]\n+\"\"\"\n+        # Check if 'models' is properly imported in the migration\n+        self.assertIn('from django.db import migrations, models', migration_code)\n+        self.assertNotIn('NameError: name \\'models\\' is not defined', migration_code)\n+\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..923b871 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -337,6 +337,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        # Check that nonform error class is correctly applied in HTML\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -359,6 +364,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        # Check that nonform error class is correctly applied in HTML\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -983,6 +993,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        # Check that nonform error class is correctly applied in HTML\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 6fb82ec..4fcb7a0 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -821,6 +821,33 @@ class ShadowingFieldsTests(SimpleTestCase):\n             )\n         ])\n \n+    def test_field_name_clash_with_m2m_through(self):\n+        class Parent(models.Model):\n+            clash_id = models.IntegerField()\n+\n+        class Child(Parent):\n+            clash = models.ForeignKey('Child', models.CASCADE)\n+\n+        class Model(models.Model):\n+            parents = models.ManyToManyField(\n+                to=Parent,\n+                through='Through',\n+                through_fields=['parent', 'model'],\n+            )\n+\n+        class Through(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE)\n+            model = models.ForeignKey(Model, models.CASCADE)\n+\n+        self.assertEqual(Child.check(), [\n+            Error(\n+                \"The field 'clash' clashes with the field 'clash_id' from \"\n+                \"model 'invalid_models_tests.parent'.\",\n+                obj=Child._meta.get_field('clash'),\n+                id='models.E006',\n+            )\n+        ])\n+\n     def test_multiinheritance_clash(self):\n         class Mother(models.Model):\n             clash = models.IntegerField()\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..5117520 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -281,7 +281,40 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[:PAGINATOR_SIZE]],\n             'pagination': {'more': True},\n         })\n-        # The second page of results.\n+        # Test to ensure that serialize_result can be customized\n+        def test_custom_serialize_result(self):\n+            class CustomAutocompleteJsonView(AutocompleteJsonView):\n+                def serialize_result(self, obj, to_field_name):\n+                    return super().serialize_result(obj, to_field_name) | {'custom_field': 'custom_value'}\n+\n+            Question.objects.create(question='Question 1')\n+            Question.objects.create(question='Question 2')\n+            request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+            request.user = self.superuser\n+            response = CustomAutocompleteJsonView.as_view(**self.as_view_args)(request)\n+            self.assertEqual(response.status_code, 200)\n+            data = json.loads(response.content.decode('utf-8'))\n+            self.assertEqual(data, {\n+                'results': [\n+                    {'id': str(q.pk), 'text': q.question, 'custom_field': 'custom_value'}\n+                    for q in Question.objects.order_by('pk')\n+                ],\n+                'pagination': {'more': False},\n+            })\n+\n+        # Test to ensure serialize_result defaults work as expected\n+        def test_default_serialize_result(self):\n+            Question.objects.create(question='Question 1')\n+            Question.objects.create(question='Question 2')\n+            request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+            request.user = self.superuser\n+            response = AutocompleteJsonView.as_view(**self.as_view_args)(request)\n+            self.assertEqual(response.status_code, 200)\n+            data = json.loads(response.content.decode('utf-8'))\n+            self.assertEqual(data, {\n+                'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.order_by('pk')],\n+                'pagination': {'more': False},\n+            })\n         request = self.factory.get(self.url, {'term': '', 'page': '2', **self.opts})\n         request.user = self.superuser\n         with model_admin(Question, PKOrderingQuestionAdmin):\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..09827c4 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -426,7 +426,55 @@ class MethodDecoratorTests(SimpleTestCase):\n                     return \"tests\"\n \n \n-class XFrameOptionsDecoratorsTests(TestCase):\n+class MethodDecoratorTests(TestCase):\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n+    def test_partial_function(self):\n+        \"\"\"@method_decorator works with functools.partial.\"\"\"\n+        func_name = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name\n+                func_name = getattr(func, '__name__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        def simple_function(x):\n+            return x\n+\n+        partial_func = partial(simple_function, x=1)\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return partial_func()\n+\n+        result = Test().method()\n+        self.assertEqual(func_name, 'simple_function')\n+        self.assertEqual(result, 1)\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n     \"\"\"\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..7092c2f 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,6 +5085,41 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Test that ForeignKey readonly fields generate correct URLs for a given admin site.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser,\n+        )\n+        response = self.client.get(\n+            reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,))\n+        )\n+        self.assertEqual(response.status_code, 200)\n+        self.assertContains(\n+            response,\n+            f'href=\"/{admin_site}/admin_views/language/{language.pk}/change/\"'\n+        )\n+        self.assertContains(\n+            response,\n+            f'href=\"/{admin_site}/auth/user/{self.superuser.pk}/change/\"'\n+        )\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        self._test_readonly_foreignkey_links('custom_admin')\n+        self.assertEqual(response.status_code, 404)\n+\n     def test_change_form_renders_correct_null_choice_value(self):\n         \"\"\"\n         Regression test for #17911.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..3aa1ee8 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -346,7 +347,26 @@ class ModelChoiceFieldTests(TestCase):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n \n-    def test_queryset_manager(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        # Ensure hash consistency with the same value\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        # Ensure different instances have different hashes\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_choice_value_in_dict(self):\n+        # Testing if ModelChoiceIteratorValue can be used as dictionary keys\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        test_dict = {value_1: 'test_value'}\n+        self.assertIn(value_1, test_dict)\n+        self.assertEqual(test_dict[value_1], 'test_value')\n+\n+    def test_choice_value_in_set(self):\n+        # Testing if ModelChoiceIteratorValue can be added to a set\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        test_set = {value_1}\n+        self.assertIn(value_1, test_set)\n         f = forms.ModelChoiceField(Category.objects)\n         self.assertEqual(len(f.choices), 4)\n         self.assertEqual(list(f.choices), [\n",
  "django__django-14999": "",
  "django__django-15061": "",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..b3a974e 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -93,6 +93,9 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             'http://[a',\n             # Non-string.\n             23,\n+            # Invalid IPv6 URL causing ValueError before fix.\n+            '////]@N.AN',\n+            '#@A.bO',\n             # Hangs \"forever\" before fixing a catastrophic backtracking,\n             # see #11198.\n             'http://%s' % ('X' * 60,),\n",
  "django__django-15213": "",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..0d1aa08 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -10,6 +11,7 @@ from django.contrib.messages.storage.cookie import (\n from django.test import SimpleTestCase, override_settings\n from django.utils.crypto import get_random_string\n from django.utils.safestring import SafeData, mark_safe\n+from django.utils.safestring import SafeData, mark_safe\n \n from .base import BaseTests\n \n@@ -95,7 +97,18 @@ class CookieTests(BaseTests, SimpleTestCase):\n             settings.SESSION_COOKIE_SAMESITE,\n         )\n \n-    def test_get_bad_cookie(self):\n+    def test_extra_tags_preserved(self):\n+        \"\"\"\n+        Test that extra_tags are preserved correctly through encoding and decoding,\n+        even when they are an empty string.\n+        \"\"\"\n+        storage = self.get_storage()\n+        for extra_tags in ['', None, 'tag1 tag2']:\n+            with self.subTest(extra_tags=extra_tags):\n+                message = Message(constants.INFO, 'Test message', extra_tags=extra_tags)\n+                encoded = storage._encode(message)\n+                decoded = storage._decode(encoded)\n+                self.assertEqual(decoded.extra_tags, extra_tags)\n         request = self.get_request()\n         storage = self.storage_class(request)\n         # Set initial (invalid) data.\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..5ab2335 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -64,6 +64,16 @@ class TemplateReloadTests(SimpleTestCase):\n         autoreload.reset_loaders()\n         self.assertEqual(mock_reset.call_count, 2)\n \n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    def test_base_dir_in_templates_dirs(self, mock_reset):\n+        settings = {\n+            'DIRS': [str(ROOT)],  # Simulate adding BASE_DIR\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }\n+        with override_settings(TEMPLATES=[settings]):\n+            self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n+            mock_reset.assert_not_called()\n+\n     @override_settings(\n         TEMPLATES=[{\n             'DIRS': [\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..d6e8b24 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,6 +185,13 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        An empty string for the If-Modified-Since header should not raise an exception\n+        and should return True, indicating the resource has been modified.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n     def test_was_modified_since_fp(self):\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..8faf912 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,5 +1,7 @@\n+\n import os\n from io import StringIO\n+from argparse import ArgumentParser\n from unittest import mock\n \n from admin_scripts.tests import AdminScriptTestCase\n@@ -411,7 +413,24 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n-    def test_outputwrapper_flush(self):\n+    def test_custom_command_help_formatter(self):\n+        \"\"\"Test that the custom command help formatter formats help text correctly.\"\"\"\n+        class TestCommand(BaseCommand):\n+            help = '''\n+            Custom command description.\n+            Example usage:\n+                ./manage.py custom_command --option value\n+            '''\n+\n+        command = TestCommand()\n+        parser = command.create_parser(\"manage.py\", \"custom_command\")\n+        output = StringIO()\n+        parser.print_help(output)\n+        help_output = output.getvalue()\n+\n+        # Check that the help output contains the description and usage on separate lines\n+        self.assertIn(\"Custom command description.\\n\\nExample usage:\", help_output)\n+        self.assertIn(\"./manage.py custom_command --option value\", help_output)\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n             management.call_command(\"outputwrapper\", stdout=out)\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..c83c0c8 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,8 +1,10 @@\n+\n import os\n from datetime import datetime\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n+from django.core.serializers.json import DjangoJSONEncoder\n from django.utils.html import (\n     conditional_escape,\n     escape,\n@@ -217,7 +219,31 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"foo\": \"bar\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"foo\": \"bar\"}</script>',\n+        )\n+\n+    def test_json_script_custom_encoder_with_special_chars(self):\n+        class SpecialCharEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"special\": \"<&>\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=SpecialCharEncoder),\n+            '<script type=\"application/json\">{\"special\": \"\\\\u003C\\\\u0026\\\\u003E\"}</script>',\n+        )\n+\n+    def test_json_script_default_encoder(self):\n+        self.assertHTMLEqual(\n+            json_script({\"key\": \"value\"}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..c33bc71 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -104,6 +104,12 @@ class CheckTemplateStringIfInvalidTest(SimpleTestCase):\n             self.assertEqual(check_string_if_invalid_is_string(None), [self.error1])\n \n \n+from django.test import SimpleTestCase, override_settings\n+from django.core.checks import Error\n+from django.conf import settings\n+from django.utils.module_loading import import_string\n+from collections import defaultdict\n+\n class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n     @classmethod\n     def setUpClass(cls):\n@@ -161,29 +167,16 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n     @override_settings(\n         INSTALLED_APPS=[\"check_framework.template_test_apps.same_tags_app_1\"]\n     )\n-    def test_template_tags_with_same_library_name_and_module_name(self):\n+    def test_template_tags_same_library_in_installed_apps_libraries(self):\n         with self.settings(\n             TEMPLATES=[\n                 self.get_settings(\n-                    \"same_tags\",\n-                    \"different_tags_app.templatetags.different_tags\",\n+                    \"same_tags\", \"same_tags_app_1.templatetags.same_tags\"\n                 ),\n             ]\n         ):\n             self.assertEqual(\n-                check_for_template_tags_with_the_same_name(None),\n-                [\n-                    Error(\n-                        E003.msg.format(\n-                            \"'same_tags'\",\n-                            \"'check_framework.template_test_apps.different_tags_app.\"\n-                            \"templatetags.different_tags', \"\n-                            \"'check_framework.template_test_apps.same_tags_app_1.\"\n-                            \"templatetags.same_tags'\",\n-                        ),\n-                        id=E003.id,\n-                    )\n-                ],\n+                check_for_template_tags_with_the_same_name(None), []\n             )\n \n     def test_template_tags_with_different_library_name(self):\n@@ -206,4 +199,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..3337339 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -382,7 +382,36 @@ class ProxyModelTests(TestCase):\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n \n-        # Select related + filter on a related proxy of proxy field\n+class ProxyRelatedQuerySetTests(TestCase):\n+    def setUp(self):\n+        class CustomModel(models.Model):\n+            name = models.CharField(max_length=16)\n+\n+        class ProxyCustomModel(CustomModel):\n+            class Meta:\n+                proxy = True\n+\n+        class AnotherModel(models.Model):\n+            custom = models.ForeignKey(\n+                ProxyCustomModel,\n+                on_delete=models.SET_NULL,\n+                null=True,\n+                blank=True,\n+            )\n+\n+        self.CustomModel = CustomModel\n+        self.ProxyCustomModel = ProxyCustomModel\n+        self.AnotherModel = AnotherModel\n+\n+        self.CustomModel.objects.create(name=\"Test\")\n+        self.proxy_instance = self.ProxyCustomModel.objects.get(name=\"Test\")\n+        self.AnotherModel.objects.create(custom=self.proxy_instance)\n+\n+    def test_select_related_only_with_proxy(self):\n+        qs = self.AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.first()\n+        self.assertIsNotNone(result)\n+        self.assertEqual(result.custom.name, \"Test\")\n         resp = ProxyImprovement.objects.select_related().get(\n             associated_bug__summary__icontains=\"fix\"\n         )\n@@ -399,6 +428,10 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n+from django.test import TestCase\n+from django.db import models\n+from django.core.management import call_command\n+\n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..ef988ca 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,6 +157,12 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_before_dbname(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT * FROM test;\"]),\n+            ([\"psql\", \"-c\", \"SELECT * FROM test;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n@@ -183,4 +189,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "",
  "django__django-16041": "",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..6cb642a 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,37 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_empty_string(self):\n+        # Test empty string input\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+\n+    def test_none_input(self):\n+        # Test None input\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+    def test_negative_number(self):\n+        # Test negative number input\n+        self.assertEqual(nformat(-1234.56, \".\"), \"-1234.56\")\n+\n+    def test_zero_input(self):\n+        # Test zero input, ensuring sign handling is correct\n+        self.assertEqual(nformat(0, \".\"), \"0\")\n+\n+    def test_large_number(self):\n+        # Test a very large number\n+        self.assertEqual(nformat(1e10, \".\"), \"10000000000\")\n+        \n+    def test_float_input(self):\n+        # Test float input\n+        self.assertEqual(nformat(1234.567, \".\"), \"1234.567\")\n+        \n+    def test_integer_input(self):\n+        # Test integer input\n+        self.assertEqual(nformat(1234, \".\"), \"1234\")\n+        \n+    def test_with_grouping(self):\n+        # Test number with grouping\n+        self.assertEqual(nformat(1234567.89, \".\", grouping=3, thousand_sep=\",\"), \"1,234,567.89\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..f93a827 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,8 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n-from django.utils.translation import gettext as _\n+from django.urls import reverse\n+import urllib.parse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -892,6 +894,66 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_password_reset_link_correct_for_pk(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via pk.\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.pk,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_password_reset_link_for_custom_to_field(self):\n+        user = User.objects.create_user(username=\"testcustom\", uuid=\"11111111-2222-3333-4444-555566667777\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via custom to_field.\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.uuid,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..16ad83a 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,8 +507,66 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+from django.test import TestCase\n+from django.contrib.sitemaps import Sitemap\n+from django.urls import path\n+from django.test.utils import override_settings\n+\n+class CallableLastmodNoItemsTest(TestCase):\n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n \n-# RemovedInDjango50Warning\n+    def test_callable_sitemod_with_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-with-items/index.xml\")\n+        self.assertIn(\"Last-Modified\", index_response)\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class CallableLastmodWithItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        o1 = object()\n+        o1.lastmod = \"2023-10-01\"\n+        return [o1]\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+callable_lastmod_no_items_sitemap = {\n+    \"callable-lastmod-no-items\": CallableLastmodNoItemsSitemap,\n+}\n+\n+callable_lastmod_with_items_sitemap = {\n+    \"callable-lastmod-with-items\": CallableLastmodWithItemsSitemap,\n+}\n+\n+urlpatterns += [\n+    path(\n+        \"callable-lastmod-no-items/index.xml\",\n+        views.index,\n+        {\"sitemaps\": callable_lastmod_no_items_sitemap},\n+    ),\n+    path(\n+        \"callable-lastmod-with-items/index.xml\",\n+        views.index,\n+        {\"sitemaps\": callable_lastmod_with_items_sitemap},\n+    ),\n+]\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n         TEMPLATES=[\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..2a89f2e 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,6 +1,8 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n+from unittest import mock, TestCase\n import io\n import os\n import pickle\n@@ -1755,7 +1757,29 @@ class FileBasedCacheTests(BaseCacheTests, TestCase):\n             with self.assertRaises(OSError):\n                 cache.get(\"foo\")\n \n-    def test_empty_cache_file_considered_expired(self):\n+    def test_has_key_race_handling(self):\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mocked_open.assert_called_once()\n+\n+    def test_has_key_with_simulated_deletion(self):\n+        key = \"race_condition_key\"\n+        cache.add(key, \"value\")\n+\n+        # Define a function to simulate a race condition\n+        def simulate_deletion():\n+            fname = cache._key_to_file(key)\n+            if os.path.exists(fname):\n+                os.remove(fname)\n+\n+        # Run simulate_deletion in a separate thread\n+        thread = threading.Thread(target=simulate_deletion)\n+        thread.start()\n+        thread.join()\n+\n+        # Test that has_key handles the race condition gracefully\n+        self.assertIs(cache.has_key(key), False)\n         cache_file = cache._key_to_file(\"foo\")\n         with open(cache_file, \"wb\") as fh:\n             fh.write(b\"\")\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..761166a 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,7 +1,10 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..a8ddac1 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -216,7 +216,31 @@ class OptimizerTests(SimpleTestCase):\n             migrations.AlterIndexTogether(\"Foo\", [[\"a\", \"b\"]])\n         )\n \n-    def test_create_alter_owrt_delete_model(self):\n+    def test_alter_alter_field(self):\n+        # Test that multiple AlterField operations can be collapsed to the last one\n+        operations = [\n+            migrations.AlterField(\n+                model_name=\"Foo\",\n+                name=\"name\",\n+                field=models.IntegerField(),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"Foo\",\n+                name=\"name\",\n+                field=models.IntegerField(help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"Foo\",\n+                name=\"name\",\n+                field=models.IntegerField(help_text=\"help\", default=42),\n+            ),\n+        ]\n+        optimizer = MigrationOptimizer()\n+        new_operations = optimizer.optimize(operations, app_label=\"testapp\")\n+        self.assertEqual(len(new_operations), 1)\n+        self.assertIsInstance(new_operations[0], migrations.AlterField)\n+        self.assertEqual(new_operations[0].field.help_text, \"help\")\n+        self.assertEqual(new_operations[0].field.default, 42)\n         self._test_create_alter_foo_delete_model(\n             migrations.AlterOrderWithRespectTo(\"Foo\", \"a\")\n         )\n",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..89e7e56 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -60,7 +61,13 @@ class FunctionTests(SimpleTestCase):\n     def test_list(self):\n         self.assertEqual(join([0, 1, 2], \"glue\"), \"0glue1glue2\")\n \n-    def test_autoescape(self):\n+    @setup({\"join09\": '{% autoescape off %}{{ a|join:var }}{% endautoescape %}'})\n+    def test_join_autoescape_off_with_html(self):\n+        var_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        context = {\"a\": var_list, \"var\": \"<br/>\"}\n+        output = self.engine.render_to_string(\"join09\", context)\n+        expected_result = \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\"\n+        self.assertEqual(output, expected_result)\n         self.assertEqual(\n             join([\"<a>\", \"<img>\", \"</a>\"], \"<br>\"),\n             \"&lt;a&gt;&lt;br&gt;&lt;img&gt;&lt;br&gt;&lt;/a&gt;\",\n@@ -78,4 +85,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..3f313de 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -790,6 +790,46 @@ class BulkCreateTests(TestCase):\n     @skipUnlessDBFeature(\n         \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n     )\n+    def test_update_conflicts_returning_ids(self):\n+        # Insert initial data\n+        initial_objects = [\n+            TwoFields(f1=1, f2=1, name=\"a\"),\n+            TwoFields(f1=2, f2=2, name=\"b\"),\n+        ]\n+        TwoFields.objects.bulk_create(initial_objects)\n+        \n+        # Create conflicting objects\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"c\"),\n+            TwoFields(f1=3, f2=3, name=\"d\"),\n+        ]\n+        \n+        # Bulk create with update_conflicts\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"f1\"],\n+            update_fields=[\"name\"],\n+        )\n+        \n+        # Verify that length of results matches input data\n+        self.assertEqual(len(results), len(conflicting_objects))\n+        \n+        # Verify that pks are set for each object\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in results:\n+                self.assertIsNotNone(instance.pk)\n+        \n+        # Verify database state\n+        self.assertCountEqual(\n+            TwoFields.objects.values(\"f1\", \"f2\", \"name\"),\n+            [\n+                {\"f1\": 1, \"f2\": 1, \"name\": \"c\"},  # Updated\n+                {\"f1\": 2, \"f2\": 2, \"name\": \"b\"},  # Unchanged\n+                {\"f1\": 3, \"f2\": 3, \"name\": \"d\"},  # New\n+            ],\n+        )\n+        \n     def test_update_conflicts_unique_fields_update_fields_db_column(self):\n         FieldsWithDbColumns.objects.bulk_create(\n             [\n@@ -816,4 +856,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..7216c7c 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1083,6 +1083,13 @@ def test_slider_reset():\n     slider = widgets.Slider(ax=ax, label='', valmin=0, valmax=1, valinit=.5)\n     slider.set_val(0.75)\n     slider.reset()\n+\n+    # Additional test case for the bug that was described\n+    slider_bug_test = widgets.RangeSlider(\n+        ax=ax, label=\"Bug Test\", valmin=img.min(), valmax=img.max(),\n+        valinit=[0.0, 0.0]\n+    )\n+    assert_allclose(slider_bug_test.val, (0.0, 0.0))\n     assert slider.val == 0.5\n \n \n@@ -1117,6 +1124,13 @@ def test_range_slider(orientation):\n     assert_allclose(slider.val, (0, 1))\n \n     slider.reset()\n+\n+    # Additional test case for the bug that was described\n+    slider_bug_test = widgets.RangeSlider(\n+        ax=ax, label=\"Bug Test\", valmin=img.min(), valmax=img.max(),\n+        valinit=[0.0, 0.0]\n+    )\n+    assert_allclose(slider_bug_test.val, (0.0, 0.0))\n     assert_allclose(slider.val, [0.1, 0.34])\n \n \n",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..3aab31b 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,6 +21,19 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_invisible_3d_axes(fig_test, fig_ref):\n+    # Create a figure with a 3D subplot\n+    ax_test = fig_test.add_subplot(1, 1, 1, projection='3d')\n+    ax_ref = fig_ref.add_subplot(1, 1, 1, projection='3d')\n+    \n+    # Plot a simple scatter in the reference figure\n+    ax_ref.scatter([1], [1], [1])\n+\n+    # In the test figure, plot the same scatter but set the axes to be invisible\n+    ax_test.scatter([1], [1], [1])\n+    ax_test.set_visible(False)\n+\n def test_aspect_equal_error():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..52b69d9 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,6 +774,33 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n+import pytest\n+import matplotlib.pyplot as plt\n+\n+@pytest.mark.parametrize('draggable', [True, False])\n+def test_legend_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test_line')\n+    legend = ax.legend(draggable=draggable)\n+    assert legend.get_draggable() == draggable\n+\n+def test_legend_draggable_default():\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test_line')\n+    legend = ax.legend()\n+    # By default, draggable should be False.\n+    assert not legend.get_draggable()\n+\n+def test_legend_toggle_draggable():\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='test_line')\n+    legend = ax.legend(draggable=True)\n+    assert legend.get_draggable() is True\n+    legend.set_draggable(False)\n+    assert legend.get_draggable() is False\n+    legend.set_draggable(True)\n+    assert legend.get_draggable() is True\n+\n def test_get_set_draggable():\n     legend = plt.legend()\n     assert not legend.get_draggable()\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..28e3718 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -246,7 +246,35 @@ def test_fonttype(fonttype):\n \n def test_linedash():\n     \"\"\"Test that dashed lines do not break PS output\"\"\"\n-    fig, ax = plt.subplots()\n+import io\n+from matplotlib.figure import Figure\n+import matplotlib.pyplot as plt\n+\n+def test_empty_line():\n+    # Smoke-test for gh#23954\n+    figure = Figure()\n+    figure.text(0.5, 0.5, \"\\nfoo\\n\\n\")\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n+\n+def test_annotate_with_empty_line():\n+    # Test for annotate text with an empty line\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.annotate(text='\\nLower label', xy=(0, 0))\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n+\n+def test_title_with_empty_line():\n+    # Test for title with an empty line\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.set_title('\\nLower title')\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n \n     ax.plot([0, 1], linestyle=\"--\")\n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..a9f8799 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -649,10 +649,24 @@ def test_compressed1():\n \n     fig.colorbar(pc, ax=axs)\n     fig.draw_without_rendering()\n+import pytest\n+import matplotlib.pyplot as plt\n+import numpy as np\n \n+def test_no_warning_with_constrained_layout_false():\n+    a = np.linspace(0, 2*np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+    # Ensure no warning is raised\n+    with pytest.warns(None) as record:\n+        plt.subplots_adjust(wspace=0)\n+    assert len(record) == 0\n     pos = axs[0, 0].get_position()\n     np.testing.assert_allclose(pos.x0, 0.06195, atol=1e-3)\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 64ba766..3c2fde5 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -5731,8 +5731,42 @@ def test_set_get_ticklabels():\n     ax[1].set_xticklabels(ax[0].get_xticklabels())\n     ax[1].set_yticklabels(ax[0].get_yticklabels())\n \n+import pytest\n+import matplotlib.pyplot as plt\n \n-@check_figures_equal(extensions=[\"png\"])\n+def test_set_ticks_kwargs_raise_error_without_labels():\n+    \"\"\"\n+    When labels=None and any kwarg is passed, axis.set_ticks() raises a\n+    ValueError.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [1, 2, 3]\n+    with pytest.raises(ValueError):\n+        ax.xaxis.set_ticks(ticks, alpha=0.5)\n+\n+def test_set_ticks_with_valid_kwargs_and_labels():\n+    \"\"\"\n+    Test that set_ticks does not raise an error when valid kwargs are passed\n+    with labels.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [0, 1]\n+    labels = ['a', 'b']\n+    try:\n+        ax.xaxis.set_ticks(ticks, labels=labels, color='red')\n+    except ValueError:\n+        pytest.fail(\"set_ticks raised ValueError unexpectedly!\")\n+\n+def test_set_ticks_with_invalid_kwargs_and_labels():\n+    \"\"\"\n+    Test that set_ticks raises an error when invalid kwargs are passed\n+    even with labels.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ticks = [0, 1]\n+    labels = ['a', 'b']\n+    with pytest.raises(TypeError):\n+        ax.xaxis.set_ticks(ticks, labels=labels, invalid_kwarg='value')\n def test_set_ticks_with_labels(fig_test, fig_ref):\n     \"\"\"\n     Test that these two are identical::\n",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..170a527 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,31 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+\n+def test_pickle_figure_with_draggable_legend():\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+\n+    ax.plot(time, speed, label=\"speed\")\n+\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Check that 'FigureCanvasAgg' is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Load the pickled figure to ensure it unpickles correctly\n+    loaded_fig = pickle.loads(pkl)\n+    assert loaded_fig is not None\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..5311e8c 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -446,7 +446,53 @@ def test_paddedbox():\n     ab = AnchoredOffsetbox('upper right', child=pb)\n     ax.add_artist(ab)\n \n+def test_mplcursor_interaction():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    scatter = ax.scatter(x, y1)\n+    \n+    cursor = mplcursors.cursor(scatter)\n+    \n+    # Simulate clicking on a few data points\n+    event = plt.backend_bases.MouseEvent('button_press_event', fig.canvas, x=5, y=5)\n+    cursor._on_click(event)\n+    event = plt.backend_bases.MouseEvent('button_press_event', fig.canvas, x=6, y=6)\n+    cursor._on_click(event)\n+    \n+    # Check that the canvas still exists and there's no AttributeError\n+    assert fig.canvas is not None\n+    plt.close(fig)\n+\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n+\n+def test_mplcursor_interaction():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    import mplcursors\n+\n+    x = np.arange(1, 11)\n+    y1 = x\n+\n+    fig, ax = plt.subplots()\n+    scatter = ax.scatter(x, y1)\n+    \n+    cursor = mplcursors.cursor(scatter)\n+    \n+    # Simulate clicking on a few data points\n+    event = plt.backend_bases.MouseEvent('button_press_event', fig.canvas, x=5, y=5)\n+    cursor._on_click(event)\n+    event = plt.backend_bases.MouseEvent('button_press_event', fig.canvas, x=6, y=6)\n+    cursor._on_click(event)\n+    \n+    # Check that the canvas still exists and there's no AttributeError\n+    assert fig.canvas is not None\n+    plt.close(fig)\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..5b7f8ce 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -90,7 +90,16 @@ class TestContinuous:\n         s = Continuous((2, 3), (10, 100), \"log\")._setup(x, IntervalProperty())\n         assert_array_equal(s(x), [1, 2, 3])\n \n+    def test_interval_with_bools(self):\n+        x = pd.Series([True, False, False])\n+        s = Continuous()._setup(x, IntervalProperty())\n+        assert_array_equal(s(x), [1, 0, 0])\n+\n     def test_color_defaults(self, x):\n+        \"\"\" Test color mapping with boolean data \"\"\"\n+        cmap = color_palette(\"ch:\", as_cmap=True)\n+        s = Continuous()._setup(pd.Series([True, False]), Color())\n+        assert_array_equal(s(pd.Series([True, False])), cmap([1, 0])[:, :3])\n \n         cmap = color_palette(\"ch:\", as_cmap=True)\n         s = Continuous()._setup(x, Color())\n",
  "mwaskom__seaborn-3407": "",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..2ce2ee6 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,7 +1,9 @@\n+\n import json\n import os\n import textwrap\n \n+import tomllib\n import pytest\n \n import flask\n@@ -18,7 +20,14 @@ def common_object_test(app):\n     assert \"TestConfig\" not in app.config\n \n \n-def test_config_from_pyfile():\n+def test_config_from_file_toml_binary_mode():\n+    tomllib = pytest.importorskip(\"tomllib\", reason=\"tomllib added in 3.11\")\n+    app = flask.Flask(__name__)\n+    current_dir = os.path.dirname(os.path.abspath(__file__))\n+    app.config.from_file(\n+        os.path.join(current_dir, \"static\", \"config.toml\"), tomllib.load, mode=\"b\"\n+    )\n+    common_object_test(app)\n     app = flask.Flask(__name__)\n     app.config.from_pyfile(f\"{__file__.rsplit('.', 1)[0]}.py\")\n     common_object_test(app)\n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..5be1db1 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1635,8 +1635,37 @@ def test_prepared_request_complete_copy():\n     )\n     assert_copy(p, p.copy())\n \n+import pytest\n+import requests\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import DecodeError, Timeout\n+from requests.packages.urllib3.exceptions import DecodeError as Urllib3DecodeError\n+from requests.packages.urllib3.exceptions import ReadTimeoutError\n+\n+def httpbin(endpoint):\n+    return f\"http://httpbin.org/{endpoint}\"\n+\n+def test_urllib3_decode_error_wrapped():\n+    session = requests.Session()\n+    session.mount('http://', HTTPAdapter())\n \n-def test_prepare_unicode_url():\n+    # Simulate a urllib3 DecodeError and check if it is wrapped as expected\n+    with pytest.raises(DecodeError):\n+        try:\n+            raise Urllib3DecodeError(\"Decode error\")\n+        except Urllib3DecodeError as e:\n+            raise DecodeError(e)\n+\n+def test_urllib3_timeout_error_wrapped():\n+    session = requests.Session()\n+    session.mount('http://', HTTPAdapter())\n+\n+    # Simulate a urllib3 TimeoutError and check if it is wrapped as expected\n+    with pytest.raises(Timeout):\n+        try:\n+            raise ReadTimeoutError(None, None, \"Read timeout\")\n+        except ReadTimeoutError as e:\n+            raise Timeout(e)\n     p = PreparedRequest()\n     p.prepare(\n         method='GET',\n@@ -1663,4 +1692,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..ebf1d0c 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,7 +980,45 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_iter_content_decode_unicode_bytes(self):\n+        \"\"\"\n+        Test iter_content with decode_unicode=True should yield Unicode strings.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'\\xe2\\x9c\\x94 the content')  # includes a UTF-8 check mark\n+        r.encoding = 'utf-8'\n+        \n+        # Check that iter_content with decode_unicode=True returns strings\n+        chunks = r.iter_content(16*1024, decode_unicode=True)\n+        for chunk in chunks:\n+            assert isinstance(chunk, str)\n+        \n+        # Check that iter_content with decode_unicode=False returns bytes\n+        r.raw.seek(0)\n+        chunks = r.iter_content(16*1024, decode_unicode=False)\n+        for chunk in chunks:\n+            assert isinstance(chunk, bytes)\n+\n+    def test_iter_content_vs_text(self):\n+        \"\"\"\n+        Compare iter_content with r.text when decode_unicode=True.\n+        \"\"\"\n+        content = b'\\xe2\\x9c\\x94 the content'  # includes a UTF-8 check mark\n+        r = requests.Response()\n+        r._content_consumed = True\n+        r._content = content\n+        r.encoding = 'utf-8'\n+        \n+        # Check r.text\n+        text_content = r.text\n+        assert isinstance(text_content, str)\n+        \n+        # Check iter_content with decode_unicode=True\n+        r.raw = io.BytesIO(content)\n+        chunks = r.iter_content(16*1024, decode_unicode=True)\n+        iter_content = ''.join(chunks)\n+        \n+        assert iter_content == text_content\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..cf524e6 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -743,8 +743,33 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n \n             assert 'foo' in response.text\n             assert 'bar' in response.text\n+    def test_hooks_with_empty_dict(self):\n+        \"\"\"Test Request initialization with an empty hooks dictionary.\"\"\"\n+        r = requests.models.Request(hooks={})\n+        assert r.hooks == {'args': []}\n+\n+    def test_hooks_with_empty_list(self):\n+        \"\"\"Test Request initialization with hooks containing an empty list.\"\"\"\n+        r = requests.models.Request(hooks={'args': []})\n+        assert r.hooks['args'] == []\n+\n+    def test_hooks_with_non_callable(self):\n+        \"\"\"Test Request initialization with non-callable items in hooks list.\"\"\"\n+        r = requests.models.Request(hooks={'args': [None, 1, \"string\"]})\n+        assert all(not callable(h) for h in r.hooks['args'])\n+\n+    def test_register_hook_with_list(self):\n+        \"\"\"Test registering a list of hooks for the same event after initialization.\"\"\"\n+        def hook1(args):\n+            return args\n+\n+        def hook2(args):\n+            return args\n \n-    def test_session_persistent_cookies(self):\n+        r = requests.models.Request()\n+        r.register_hook('args', [hook1, hook2])\n+        assert len(r.hooks['args']) == 2\n+        assert all(callable(h) for h in r.hooks['args'])\n \n         s = requests.session()\n \n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..d54d10a 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -89,6 +89,26 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n+    @set_config(notes=[\"###\"])\n+    def test_entirely_punctuation_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                ####### Some comment\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"### Some comment\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     def test_issue_2321_should_not_trigger(self) -> None:\n         code = 'print(\"# TODO this should not trigger a fixme\")'\n         with self.assertNoMessages():\n@@ -119,4 +139,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..20619fc 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -73,10 +73,12 @@ def test_unknown_option_name(capsys: CaptureFixture) -> None:\n \n def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly raise a message on an unknown short option.\"\"\"\n-    with pytest.raises(_UnrecognizedOptionError):\n+    with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n     output = capsys.readouterr()\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n+    assert \"usage: pylint\" in output.err\n+    assert \"Unrecognized option\" in output.err\n \n \n def test_unknown_confidence(capsys: CaptureFixture) -> None:\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..23e6533 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,28 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive(self):\n+        \"\"\"Verify that --recursive=y respects ignore-paths setting in pyproject.toml.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                # Change working directory to a known directory structure\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                \n+                # Run pylint with recursive and ignore-paths options\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..306426d 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,6 +934,26 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n+def test_lint_identically_named_module_directory(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for modules and directories with the same name causing linting issues.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create the directory structure as described in the issue\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        # Run pylint and verify it doesn't fail due to missing __init__.py\n+        linter.check([\"a\"])\n+        assert not linter.stats.by_msg.get(\"parse-error\")\n+\n+    with tempdir():\n+        # Create an additional file structure to test imports\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+        # Run pylint for both the module and the script\n+        linter.check([\"r\", \"a\"])\n+        assert not linter.stats.by_msg.get(\"no-name-in-module\")\n+        assert not linter.stats.by_msg.get(\"parse-error\")\n+\n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n@@ -941,4 +961,24 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+def test_lint_identically_named_module_directory(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for modules and directories with the same name causing linting issues.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        # Create the directory structure as described in the issue\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        # Run pylint and verify it doesn't fail due to missing __init__.py\n+        linter.check([\"a\"])\n+        assert not linter.stats.by_msg.get(\"parse-error\")\n+\n+    with tempdir():\n+        # Create an additional file structure to test imports\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\\n\")\n+        # Run pylint for both the module and the script\n+        linter.check([\"r\", \"a\"])\n+        assert not linter.stats.by_msg.get(\"no-name-in-module\")\n+        assert not linter.stats.by_msg.get(\"parse-error\")\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..a5b53fd 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,6 @@\n+\n+from _pytest.recwarn import WarningsRecorder\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..65d171b 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -298,6 +298,24 @@ class TestImportPath:\n         assert \"_src\" in sys.modules\n         assert \"_src.tests\" in sys.modules\n \n+    def test_importlib_does_not_duplicate_modules(self, simple_module: Path, tmp_path: Path) -> None:\n+        \"\"\"`importlib` mode should not duplicate module instances.\"\"\"\n+        module1 = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        module2 = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        assert module1 is module2\n+\n+    def test_importlib_with_side_effects(self, tmp_path: Path) -> None:\n+        \"\"\"Ensure importlib mode handles modules with side effects only once.\"\"\"\n+        side_effect_file = tmp_path / \"_src/tests/side_effect_mod.py\"\n+        side_effect_file.parent.mkdir(parents=True)\n+        side_effect_file.write_text(\"import sys\\nsys.SIDE_EFFECT_COUNT = getattr(sys, 'SIDE_EFFECT_COUNT', 0) + 1\", encoding=\"utf-8\")\n+\n+        import_path(side_effect_file, mode=\"importlib\", root=tmp_path)\n+        import_path(side_effect_file, mode=\"importlib\", root=tmp_path)\n+        \n+        # The side effect (modification on sys) should only occur once\n+        assert sys.SIDE_EFFECT_COUNT == 1\n+\n     def test_importmode_twice_is_different_module(\n         self, simple_module: Path, tmp_path: Path\n     ) -> None:\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_reporting.py b/testing/logging/test_reporting.py\nindex 82f0458..31899e7 100644\n--- a/testing/logging/test_reporting.py\n+++ b/testing/logging/test_reporting.py\n@@ -257,6 +257,32 @@ def test_log_cli_enabled_disabled(testdir, enabled):\n \n \n def test_log_cli_default_level(testdir):\n+    # Test to ensure that the log format includes levelname, name, filename, and lineno\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test_log_format():\n+            logger = logging.getLogger(\"test_logger\")\n+            logger.setLevel(logging.DEBUG)\n+            handler = logging.StreamHandler()\n+            formatter = logging.Formatter(\"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\")\n+            handler.setFormatter(formatter)\n+            logger.addHandler(handler)\n+\n+            with open(\"test.log\", \"w\") as f:\n+                handler.stream = f\n+                logger.debug(\"Debug message\")\n+\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines(\n+        [\n+            \"*DEBUG    test_logger:*.py:* Debug message*\",\n+        ]\n+    )\n+    assert result.ret == 0\n     # Default log file level\n     testdir.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..6438d1a 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -383,8 +383,28 @@ class TestAssert_reprcompare:\n         assert expl[-1] == \"Use -v to get the full diff\"\n         expl = \"\\n\".join(callequal(left, right, verbose=True))\n         assert expl.endswith(textwrap.dedent(expected).strip())\n+    \n+    def test_bytes_diff_empty_vs_filled(self):\n+        \"\"\"Test bytes comparison with one being empty.\"\"\"\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains two more items: 52, 50\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+        ]\n \n-    def test_list_different_lengths(self):\n+    def test_bytes_diff_single_byte(self):\n+        \"\"\"Test bytes comparison with single differing byte.\"\"\"\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains one more item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+        ]\n         expl = callequal([0, 1], [0, 1, 2])\n         assert len(expl) > 1\n         expl = callequal([0, 1, 2], [0, 1])\n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..72e9ba7 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,4 +1,7 @@\n+\n import os\n+from datetime import datetime\n+import platform\n from xml.dom import minidom\n \n import py\n@@ -139,6 +142,30 @@ class TestPython:\n         node = dom.find_first_by_tag(\"testsuite\")\n         node.assert_attr(name=\"pytest\", errors=1, failures=2, skipped=1, tests=5)\n \n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n+\n     def test_timing_function(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..94695f9 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -144,6 +144,20 @@ def test_repr_on_newstyle():\n     assert saferepr(Function())\n \n \n+def test_broken_getattribute_and_repr():\n+    \"\"\"Test that saferepr() can handle exceptions in both __getattribute__ and __repr__.\"\"\"\n+\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError(\"Error in __getattribute__\")\n+\n+        def __repr__(self):\n+            raise RuntimeError(\"Error in __repr__\")\n+\n+    result = saferepr(SomeClass())\n+    assert result.startswith(\"<[RuntimeError('Error in __repr__') raised in repr()] SomeClass object at 0x\")\n+\n+\n def test_unicode():\n     val = \"\u00a3\u20ac\"\n     reprval = \"'\u00a3\u20ac'\"\n@@ -153,4 +167,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..ab60405 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -288,6 +288,33 @@ class TestInlineRunModulesCleanup:\n         assert imported.data == 42\n \n \n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct (#6428).\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n+\n+\n def test_assert_outcomes_after_pytest_error(testdir) -> None:\n     testdir.makepyfile(\"def test_foo(): assert True\")\n \n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..fcf39eb 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,37 @@\n import os\n import sys\n+class TestSkipIfCaching:\n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"Test that `@pytest.mark.skipif` reevaluates the condition for each module.\"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr1=\"\"\"\n+            import pytest\n+\n+            skip = True\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert False\n+        \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr2=\"\"\"\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+        \"\"\"\n+        )\n+\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n+\n+import os\n from unittest import mock\n \n import pytest\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..3f7f8d3 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -154,6 +154,21 @@ class TestEvaluation:\n \n \n class TestXFail:\n+    @pytest.mark.parametrize('test_input,expected', [\n+        ([\"-rs\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+        ([\"-rs\", \"--runxfail\"], [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"]),\n+    ])\n+    def test_skip_location_with_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-7490": "",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..8d2bce7 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -9,6 +10,7 @@ from typing import List\n import attr\n \n import pytest\n+from _pytest.monkeypatch import MonkeyPatch\n from _pytest import pathlib\n from _pytest.config import Config\n from _pytest.pathlib import cleanup_numbered_dir\n",
  "scikit-learn__scikit-learn-10297": "",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..ccc8960 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -5,7 +5,33 @@\n import numpy as np\n from scipy.special import gammaln\n \n-from sklearn.utils.testing import assert_raise_message\n+from sklearn.utils.testing import assert_raise_message, assert_greater_equal\n+from sklearn.mixture import BayesianGaussianMixture\n+import numpy as np\n+\n+def test_bayesian_mixture_labels_():\n+    rng = np.random.RandomState(0)\n+    rand_data = RandomData(rng)\n+    for covar_type in COVARIANCE_TYPE:\n+        X = rand_data.X[covar_type]\n+        bgmm = BayesianGaussianMixture(n_components=rand_data.n_components,\n+                                       random_state=rng, \n+                                       covariance_type=covar_type)\n+        bgmm.fit(X)\n+        assert hasattr(bgmm, 'labels_'), \"BayesianGaussianMixture should have 'labels_' after fit.\"\n+        assert_array_equal(bgmm.labels_, bgmm.predict(X))\n+\n+def test_bayesian_mixture_fit_predict_consistency():\n+    rng = np.random.RandomState(0)\n+    rand_data = RandomData(rng)\n+    for covar_type in COVARIANCE_TYPE:\n+        X = rand_data.X[covar_type]\n+        bgmm = BayesianGaussianMixture(n_components=rand_data.n_components,\n+                                       random_state=rng, \n+                                       covariance_type=covar_type)\n+        Y_pred1 = bgmm.fit(X).predict(X)\n+        Y_pred2 = bgmm.fit_predict(X)\n+        assert_array_equal(Y_pred1, Y_pred2)\n from sklearn.utils.testing import assert_almost_equal\n \n from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..efe3618 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,7 +260,54 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n-def test_one_hot_encoder_no_categorical_features():\n+from sklearn.preprocessing import OneHotEncoder\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+import pytest\n+\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+    \n+def test_one_hot_encoder_handle_unknown_long_known_strings():\n+    # Test case where known strings are long and unknown strings are short\n+    train = np.array(['aaa', 'bbbbb', 'ccccccccc']).reshape((-1, 1))\n+    test = np.array(['dd', 'aaa']).reshape((-1, 1))\n+    \n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(train)\n+    transformed = ohe.transform(test).toarray()\n+    # Expecting a sparse matrix where only the 'aaa' maps to non-zero\n+    assert_array_equal(\n+        transformed,\n+        np.array([[0., 0., 0.], [1., 0., 0.]])\n+    )\n+\n+def test_one_hot_encoder_handle_unknown_mixed_string_lengths():\n+    # Test case with mixed known and unknown string lengths\n+    train = np.array(['x', 'yy', 'zzzzzzzz']).reshape((-1, 1))\n+    test = np.array(['zzz', 'x']).reshape((-1, 1))\n+    \n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(train)\n+    transformed = ohe.transform(test).toarray()\n+    # Expecting a sparse matrix with a 1 at the index of 'x'\n+    assert_array_equal(\n+        transformed,\n+        np.array([[0., 0., 0.], [1., 0., 0.]])\n+    )\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n     cat = [False, False, False]\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..9a81aa6 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,6 +598,15 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+\n def test_gaussian_mixture_fit():\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..ccd0c0b 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n@@ -70,8 +71,20 @@ def test_kernel_pca_consistent_transform():\n     transformed2 = kpca.transform(X_copy)\n     assert_array_almost_equal(transformed1, transformed2)\n \n+from sklearn.utils.testing import assert_allclose\n \n-def test_kernel_pca_sparse():\n+def test_kernel_pca_sign_flip_consistency():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+    kpca = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+    transformed_X_1 = kpca.fit_transform(X)\n+    \n+    for _ in range(10):\n+        kpca = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+        transformed_X_2 = kpca.fit_transform(X)\n+        \n+        # Check if transformed_X_1 and transformed_X_2 are the same up to sign flip\n+        assert_allclose(np.abs(transformed_X_1), np.abs(transformed_X_2))\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..9a71886 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -5,8 +6,9 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # Authors: Nicolas Goix <nicolas.goix@telecom-paristech.fr>\n #          Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>\n # License: BSD 3 clause\n-\n import pytest\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n import numpy as np\n \n",
  "scikit-learn__scikit-learn-13497": "diff --git a/sklearn/feature_selection/tests/test_mutual_info.py b/sklearn/feature_selection/tests/test_mutual_info.py\nindex f5a2908..4dbc53c 100644\n--- a/sklearn/feature_selection/tests/test_mutual_info.py\n+++ b/sklearn/feature_selection/tests/test_mutual_info.py\n@@ -197,4 +197,26 @@ def test_mutual_info_options():\n         assert_array_equal(mi_1, mi_2)\n         assert_array_equal(mi_3, mi_4)\n \n-    assert not np.allclose(mi_1, mi_3)\n+    assert not np.allclose(mi_1, mi_3)\n+\n+    # Additional test cases for the issue regarding discrete_features\n+    for mutual_info in (mutual_info_regression, mutual_info_classif):\n+        # Test discrete_features as a boolean mask matching the number of features\n+        mi_bool_mask = mutual_info(X, y, discrete_features=[True, False, True], random_state=0)\n+        mi_indices = mutual_info(X, y, discrete_features=[0, 2], random_state=0)\n+        assert_array_equal(mi_bool_mask, mi_indices)\n+\n+        # Test discrete_features as an array of indices\n+        mi_indices = mutual_info(X, y, discrete_features=[0, 1], random_state=0)\n+        mi_auto = mutual_info(X, y, discrete_features='auto', random_state=0)\n+        assert not np.allclose(mi_indices, mi_auto)\n+\n+        # Test discrete_features as boolean mask with incorrect length\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[True, False, True, False])\n+\n+        # Test discrete_features with an out-of-bound index\n+        assert_raises(IndexError, mutual_info, X, y, discrete_features=[1, 4])\n+\n+        # Test if mutual_info works correctly with all features set to discrete\n+        mi_all_discrete = mutual_info(X, y, discrete_features=True, random_state=0)\n+        assert mi_all_discrete is not None\n",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..20cbcdc 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,7 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -215,6 +217,30 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n     set_config(print_changed_only=False)\n \n \n+def test_logistic_regression_cv_with_array():\n+    # Test case for ensuring array parameters do not cause errors when print_changed_only is True\n+    set_config(print_changed_only=True)\n+    try:\n+        repr_result = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+        assert isinstance(repr_result, str), \"Expected the repr result to be a string\"\n+    except Exception as e:\n+        assert False, f\"No exception was expected, but got: {e}\"\n+    finally:\n+        set_config(print_changed_only=False)\n+\n+\n+def test_logistic_regression_cv_without_array():\n+    # Test case for comparing behavior with non-array parameter\n+    set_config(print_changed_only=True)\n+    try:\n+        repr_result = repr(LogisticRegressionCV(Cs=[0.1, 1]))\n+        assert isinstance(repr_result, str), \"Expected the repr result to be a string\"\n+    except Exception as e:\n+        assert False, f\"No exception was expected, but got: {e}\"\n+    finally:\n+        set_config(print_changed_only=False)\n+\n+\n def test_pipeline():\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..6a351e9 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n@@ -12,6 +13,8 @@ from sklearn.linear_model import LogisticRegression\n from sklearn.naive_bayes import GaussianNB\n from sklearn.ensemble import RandomForestClassifier\n from sklearn.ensemble import VotingClassifier, VotingRegressor\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.model_selection import GridSearchCV\n from sklearn import datasets\n from sklearn.model_selection import cross_val_score, train_test_split\n@@ -506,4 +509,23 @@ def test_transform():\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n+\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(datasets.load_iris(return_X_y=True), VotingClassifier(\n+        [('lr', LogisticRegression()),\n+         ('rf', RandomForestClassifier(n_estimators=5))])),\n+     (datasets.load_diabetes(return_X_y=True), VotingRegressor(\n+         [('lr', LinearRegression()),\n+          ('rf', RandomForestRegressor(n_estimators=5))]))]\n+)\n+def test_none_estimator_with_weights(X, y, voter):\n+    # check that an estimator can be set to None and passing some weight\n+    # regression test for\n+    # https://github.com/scikit-learn/scikit-learn/issues/13777\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..ace81cf 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -160,8 +160,36 @@ def test_params_validation():\n                          .format(n_components, X.shape[1]),\n                          NCA(n_components=n_components).fit, X, y)\n \n+@pytest.mark.parametrize('param, value', [\n+    ('n_components', np.int32(3)),\n+    ('max_iter', np.int32(100)),\n+    ('tol', np.float32(0.0001))])\n+def test_parameters_valid_types(param, value):\n+    # check that no error is raised when parameters have numpy integer or\n+    # floating types.\n+    nca = NeighborhoodComponentsAnalysis(**{param: value})\n+\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n \n-def test_transformation_dimensions():\n+    nca.fit(X, y)\n+\n+def test_nca_grid_search():\n+    # Test GridSearchCV with NCA to ensure no type errors occur\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+\n+    pipe = Pipeline([('nca', nca),\n+                     ('knn', knn)])\n+\n+    params = {'nca__tol': [0.1, 0.5, 1.0],  # using 1.0 instead of 1 for float\n+              'nca__n_components': np.arange(1, 10).astype(int)}  # ensure type is int\n+\n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+    assert_no_warnings(gs.fit, X, y)\n     X = np.arange(12).reshape(4, 3)\n     y = [1, 1, 2, 2]\n \n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..aefb343 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -689,8 +689,24 @@ def test_sparse_precomputed():\n     except TypeError as e:\n         assert \"Sparse precomputed\" in str(e)\n \n-\n-def test_linearsvc_parameters():\n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for issue where sparse data with empty support_vectors_ causes ZeroDivisionError\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    \n+    # Ensure no support vectors are found\n+    assert model.support_vectors_.shape[0] == 0\n+    # Ensure dual coefficients matrix is empty\n+    assert model.dual_coef_.shape[1] == 0\n     # Test possible parameter combinations in LinearSVC\n     # Generate list of possible parameter combinations\n     losses = ['hinge', 'squared_hinge', 'logistic_regression', 'foo']\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15512": "diff --git a/sklearn/cluster/tests/test_affinity_propagation.py b/sklearn/cluster/tests/test_affinity_propagation.py\nindex 5de7c5e..1d5079e 100644\n--- a/sklearn/cluster/tests/test_affinity_propagation.py\n+++ b/sklearn/cluster/tests/test_affinity_propagation.py\n@@ -151,8 +151,22 @@ def test_affinity_propagation_predict_non_convergence():\n     y = assert_warns(ConvergenceWarning, af.predict, to_predict)\n     assert_array_equal(np.array([-1, -1, -1]), y)\n \n-\n-def test_equal_similarities_and_preferences():\n+def test_affinity_propagation_non_convergence_regressiontest():\n+    X = np.array([[1, 0, 0, 0, 0, 0],\n+                  [0, 1, 1, 1, 0, 0],\n+                  [0, 0, 1, 0, 0, 1]])\n+    af = AffinityPropagation(affinity='euclidean', max_iter=2).fit(X)\n+    assert_array_equal(np.array([-1, -1, -1]), af.labels_)\n+    assert_array_equal(np.array([], dtype=int), af.cluster_centers_indices_)\n+\n+def test_affinity_propagation_convergence():\n+    # This test case is for when the algorithm does converge\n+    X = np.array([[1, 2], [1, 4], [1, 0],\n+                  [4, 2], [4, 4], [4, 0]])\n+    af = AffinityPropagation(affinity='euclidean').fit(X)\n+    assert af.n_iter_ < af.max_iter\n+    assert len(af.cluster_centers_indices_) > 0\n+    assert all(label != -1 for label in af.labels_)\n     # Unequal distances\n     X = np.array([[0, 0], [1, 1], [-2, -2]])\n     S = -euclidean_distances(X, squared=True)\n",
  "scikit-learn__scikit-learn-15535": "",
  "scikit-learn__scikit-learn-25500": "",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..27b2e14 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2120,12 +2120,41 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     # not define the method.\n     with pytest.raises(AttributeError, match=\"not provide get_feature_names_out\"):\n         ct.get_feature_names_out()\n-\n+    \n     # The feature names are prefixed because verbose_feature_names_out=True is default\n+\n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False]), [False, False]],\n+    ids=[\"list\", \"bool\", \"bool_int\"],\n+)\n+def test_empty_selection_pandas_output(empty_selection):\n+    \"\"\"Check that pandas output works when there is an empty selection.\n+    \n+    Non-regression test for issue related to ColumnTransformer with no features.\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    \n+    X = pd.DataFrame([[1.0, 2.2], [3.0, 1.0]], columns=[\"a\", \"b\"])\n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", empty_selection),\n+            (\"numerical\", StandardScaler(), [\"a\", \"b\"]),\n+        ],\n+        verbose_feature_names_out=True,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\"])\n+    \n+    # Testing with verbose_feature_names_out=False\n+    ct.set_params(verbose_feature_names_out=False)\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"a\", \"b\"])\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n     assert_array_equal(X_trans_df0.columns, expected_verbose_names)\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/test_ext_autodoc_automodule.py b/tests/test_ext_autodoc_automodule.py\nindex 787cd0c..ecadfb1 100644\n--- a/tests/test_ext_autodoc_automodule.py\n+++ b/tests/test_ext_autodoc_automodule.py\n@@ -113,6 +113,64 @@ def test_automodule_special_members(app):\n     ]\n \n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_automodule_multiple_inherited_members(app):\n+    options = {\n+        'members': None,\n+        'undoc-members': None,\n+        'inherited-members': 'Base, list, set'\n+    }\n+    actual = do_autodoc(app, 'module', 'target.inheritance', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.inheritance',\n+        '',\n+        '',\n+        '.. py:class:: Base()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedclassmeth()',\n+        '      :module: target.inheritance',\n+        '      :classmethod:',\n+        '',\n+        '      Inherited class method.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '   .. py:method:: Base.inheritedstaticmeth(cls)',\n+        '      :module: target.inheritance',\n+        '      :staticmethod:',\n+        '',\n+        '      Inherited static method.',\n+        '',\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: Derived.inheritedmeth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      Inherited function.',\n+        '',\n+        '',\n+        '.. py:class:: MyList%s' % ('(iterable=(), /)'),\n+        '   :module: target.inheritance',\n+        '',\n+        '',\n+        '   .. py:method:: MyList.meth()',\n+        '      :module: target.inheritance',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n+\n @pytest.mark.sphinx('html', testroot='ext-autodoc',\n                     confoverrides={'autodoc_mock_imports': ['missing_module',\n                                                             'missing_package1',\n@@ -125,4 +183,225 @@ def test_subclass_of_mocked_object(app):\n \n     options = {'members': None}\n     actual = do_autodoc(app, 'module', 'target.need_mocks', options)\n-    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+    assert '.. py:class:: Inherited(*args: ~typing.Any, **kwargs: ~typing.Any)' in actual\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..0c2f026 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,12 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+import pytest\n+from sphinx.testing.util import assert_node\n+from sphinx import addnodes\n+from sphinx.util.docutils import nodes\n+import restructuredtext\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..3a91497 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,6 +21,8 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+import pytest\n+from .test_ext_autodoc import do_autodoc\n \n try:\n     # Enable pyximport to test cython module\n",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..54a9cf9 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n \n import pytest\n \n+from struct import Struct\n from sphinx.util.typing import restify, stringify\n \n \n@@ -119,7 +121,8 @@ def test_restify_broken_type_hints():\n     assert restify(BrokenType) == ':class:`tests.test_util_typing.BrokenType`'\n \n \n-def test_stringify():\n+def test_restify_struct():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert stringify(int) == \"int\"\n     assert stringify(str) == \"str\"\n     assert stringify(None) == \"None\"\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..858ca78 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1455,10 +1455,33 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+    \n+    def test_other_parameters_section(self):\n+        docstring = \"\"\"\\\n+Other parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+\n+        # Test case when napoleon_use_param is False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n-    def test_multiple_parameters(self):\n+        # Test case when napoleon_use_param is True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..b352c35 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -351,6 +351,13 @@ def test_args():\n     raises(ValueError, lambda: Permutation([1, 1, 0]))\n     raises(ValueError, lambda: Permutation([[1], [1, 2]]))\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n+\n+    # Test for non-disjoint cycles which should be applied in sequence\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # identity\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])\n+    assert Permutation([[1, 2], [2, 3]]) == Permutation([0, 2, 3, 1])\n+    assert Permutation([[2, 0], [1, 2]]) == Permutation([2, 0, 1])\n+    assert Permutation([[0, 1, 2], [2, 3]]) == Permutation([1, 0, 3, 2])\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..7b5108e 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -448,6 +449,24 @@ def test_sparse_matrix():\n     assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n     assert SparseMatrix.eye(2).nnz() == 2\n \n+    # Test hstack with empty matrices\n+    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    result = SparseMatrix.hstack(*sparse_matrices)\n+    assert result.shape == (0, 6), f\"Expected shape (0, 6), got {result.shape}\"\n+\n+    # Test vstack with empty matrices\n+    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    result = SparseMatrix.vstack(*sparse_matrices)\n+    assert result.shape == (6, 0), f\"Expected shape (6, 0), got {result.shape}\"\n+\n+    # Additional test cases for hstack with non-zero rows\n+    M1 = SparseMatrix.zeros(1, 0)\n+    M2 = SparseMatrix.zeros(1, 1)\n+    M3 = SparseMatrix.zeros(1, 2)\n+    M4 = SparseMatrix.zeros(1, 3)\n+    result = SparseMatrix.hstack(M1, M2, M3, M4)\n+    assert result.shape == (1, 6), f\"Expected shape (1, 6), got {result.shape}\"\n+\n \n def test_transpose():\n     assert SparseMatrix(((1, 2), (3, 4))).transpose() == \\\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..64d5907 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -100,6 +100,21 @@ def test_core_symbol():\n         check(c)\n \n \n+def test_float_cross_version_pickle():\n+    import pickle\n+    from sympy import symbols, Float\n+\n+    # Create a sympy expression containing a float\n+    x = symbols(\"x\")\n+    expr = x + 1.0\n+\n+    # Pickle the expression in Python 2 format (protocol version 2)\n+    pickled_expr = pickle.dumps(expr, protocol=2)\n+\n+    # Unpickle the expression in Python 3 and check no errors arise\n+    unpickled_expr = pickle.loads(pickled_expr)\n+    assert unpickled_expr == expr\n+\n def test_core_numbers():\n     for c in (Integer(2), Rational(2, 3), Float(\"1.2\")):\n         check(c)\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..59ea3ea 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -278,8 +278,27 @@ def test_coth_series():\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n \n-\n-def test_csch():\n+def test_issue_coth_log_tan():\n+    from sympy import log, tan, coth, Symbol\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    # Test the specific values mentioned in the issue\n+    assert e.subs(x, 2) != \"NameError\"\n+    assert e.subs(x, 3) != \"NameError\"\n+    assert e.subs(x, 5) != \"NameError\"\n+    assert e.subs(x, 6) != \"NameError\"\n+    assert e.subs(x, 8) != \"NameError\"\n+    assert e.subs(x, 9) != \"NameError\"\n+    assert e.subs(x, 11) != \"NameError\"\n+    assert e.subs(x, 12) != \"NameError\"\n+    assert e.subs(x, 13) != \"NameError\"\n+    assert e.subs(x, 15) != \"NameError\"\n+    assert e.subs(x, 18) != \"NameError\"\n+\n+    # Check a few other random values for thoroughness\n+    assert e.subs(x, 4) != \"NameError\"\n+    assert e.subs(x, 7) != \"NameError\"\n+    assert e.subs(x, 10) != \"NameError\"\n     x, y = symbols('x,y')\n \n     k = Symbol('k', integer=True)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..fed3e90 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,6 +201,22 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n+def test_issue_13643_col_insert():\n+    from sympy import Matrix, eye, ones\n+\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n def test_extract():\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..5f6c321 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -615,52 +615,55 @@ def test_latex_Range():\n \n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n+from sympy import symbols, SeqFormula, SeqPer, SeqAdd, SeqMul, latex, oo\n \n def test_latex_sequences():\n+    a = symbols('a')\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4, 9, \\ldots\\right\\]'\n-    assert latex(s1) == latex_str\n+    # Test for correct output without backslash-escaped brackets\n+    expected_latex_str = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(s1) == expected_latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1, 2, \\ldots\\right\\]'\n-    assert latex(s2) == latex_str\n+    expected_latex_str = r'[1, 2, 1, 2, \\ldots]'\n+    assert latex(s2) == expected_latex_str\n \n     s3 = SeqFormula(a**2, (0, 2))\n     s4 = SeqPer((1, 2), (0, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4\\right\\]'\n-    assert latex(s3) == latex_str\n+    expected_latex_str = r'[0, 1, 4]'\n+    assert latex(s3) == expected_latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1\\right\\]'\n-    assert latex(s4) == latex_str\n+    expected_latex_str = r'[1, 2, 1]'\n+    assert latex(s4) == expected_latex_str\n \n     s5 = SeqFormula(a**2, (-oo, 0))\n     s6 = SeqPer((1, 2), (-oo, 0))\n \n-    latex_str = r'\\left\\[\\ldots, 9, 4, 1, 0\\right\\]'\n-    assert latex(s5) == latex_str\n+    expected_latex_str = r'[\\ldots, 9, 4, 1, 0]'\n+    assert latex(s5) == expected_latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 2, 1, 2, 1\\right\\]'\n-    assert latex(s6) == latex_str\n+    expected_latex_str = r'[\\ldots, 2, 1, 2, 1]'\n+    assert latex(s6) == expected_latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5, 11, \\ldots\\right\\]'\n-    assert latex(SeqAdd(s1, s2)) == latex_str\n+    expected_latex_str = r'[1, 3, 5, 11, \\ldots]'\n+    assert latex(SeqAdd(s1, s2)) == expected_latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5\\right\\]'\n-    assert latex(SeqAdd(s3, s4)) == latex_str\n+    expected_latex_str = r'[1, 3, 5]'\n+    assert latex(SeqAdd(s3, s4)) == expected_latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 11, 5, 3, 1\\right\\]'\n-    assert latex(SeqAdd(s5, s6)) == latex_str\n+    expected_latex_str = r'[\\ldots, 11, 5, 3, 1]'\n+    assert latex(SeqAdd(s5, s6)) == expected_latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4, 18, \\ldots\\right\\]'\n-    assert latex(SeqMul(s1, s2)) == latex_str\n+    expected_latex_str = r'[0, 2, 4, 18, \\ldots]'\n+    assert latex(SeqMul(s1, s2)) == expected_latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4\\right\\]'\n-    assert latex(SeqMul(s3, s4)) == latex_str\n+    expected_latex_str = r'[0, 2, 4]'\n+    assert latex(SeqMul(s3, s4)) == expected_latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 18, 4, 2, 0\\right\\]'\n-    assert latex(SeqMul(s5, s6)) == latex_str\n+    expected_latex_str = r'[\\ldots, 18, 4, 2, 0]'\n+    assert latex(SeqMul(s5, s6)) == expected_latex_str\n \n \n def test_latex_FourierSeries():\n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..ce1f215 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,9 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n+from sympy.polys.polytools import Poly\n+from sympy.abc import x, y, z\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -188,6 +191,14 @@ def test_Domain_preprocess():\n \n     raises(OptionError, lambda: Domain.preprocess('Z()'))\n \n+    # Adding test cases related to the issue\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n+    \n+    raises(OptionError, lambda: Poly(1.2*x*y*z, x, domain='RR[y,z]'))\n+\n     assert Domain.preprocess('Z(x)') == ZZ.frac_field(x)\n     assert Domain.preprocess('Q(x)') == QQ.frac_field(x)\n \n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..9938699 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,34 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+def test_issue_14814_pretty_printing():\n+    # Issue #14814: Error pretty printing MatAdd\n+    x = MatrixSymbol('x', n, n)\n+    y = MatrixSymbol('y*', n, n)\n+    z = MatrixSymbol('z-', n, n)\n+    a = symbols('a')\n+\n+    # Test the original scenario\n+    assert pretty(x + y) == \"x + y*\"\n+    # Additional test cases\n+    assert pretty(x + z) == \"x + z-\"\n+    assert pretty(y + z) == \"y* + z-\"\n+    assert pretty(-x + y) == \"-x + y*\"\n+    assert pretty(x - y) == \"x - y*\"\n+    assert pretty(-a*x + -2*y*y) == \"-a*x - 2*y**y*\"\n+    assert pretty(-x - y*z) == \"-x - y*z\"\n+\n+    # Test case with MatMul\n+    assert pretty(x*y) == \"x*y*\"\n+    assert pretty(-x*y) == \"-x*y*\"\n+\n+    # Ensure special character handling in other operations\n+    assert pretty(x + z + y) == \"x + z- + y*\"\n+    assert pretty(-x - y - z) == \"-x - y* - z-\"\n+\n+from sympy import MatrixSymbol, pretty, symbols\n+n = symbols('n')\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..1d43811 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -727,8 +727,29 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(F(t) * G(t), F(t) * G(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n+import sympy as sy\n+from sympy.utilities.pytest import raises\n \n-def test_python_keywords():\n+def test_curly_matrix_symbol_with_lambdify():\n+    # Creating symbols with curly braces\n+    curlyx = sy.symbols(\"{x}\")\n+    v = sy.MatrixSymbol(\"v\", 2, 1)\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+\n+    # Test lambdify with a scalar symbol containing curly braces\n+    curlyScalarId = sy.lambdify(curlyx, curlyx)\n+    assert curlyScalarId(2) == 2\n+\n+    # Test lambdify with a regular MatrixSymbol\n+    vectorId = sy.lambdify(v, v)\n+    assert (vectorId([[1], [2]]) == [[1], [2]])\n+\n+    # Test lambdify with a MatrixSymbol containing curly braces without dummify\n+    raises(SyntaxError, lambda: sy.lambdify(curlyv, curlyv))\n+\n+    # Test lambdify with a MatrixSymbol containing curly braces with dummify=True\n+    curlyVectorIdDummified = sy.lambdify(curlyv, curlyv, dummify=True)\n+    assert (curlyVectorIdDummified([[3], [4]]) == [[3], [4]])\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n     # functions. This is an additional regression test.\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..ee87bfc 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,28 @@\n+\n+def test_Max():\n+    # Test the issue specifically\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    # Test with more than two arguments\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    assert mcode(Max(2, x, y)) == \"Max[2, x, y]\"\n+    # Test with integer values\n+    assert mcode(Max(1, 2, 3)) == \"Max[1, 2, 3]\"\n+\n+    # Verify the original test patch related to Max and Min\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n+def test_Min():\n+    # Test Min function for completeness\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(x, y, 2)) == \"Min[x, y, 2]\"\n+    assert mcode(Min(2, x, y)) == \"Min[2, x, y]\"\n+    assert mcode(Min(1, 2, 3)) == \"Min[1, 2, 3]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..59867f2 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,8 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+from sympy import symbols, MatrixSymbol, latex, sum\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..1badf44 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -9,7 +10,21 @@ def test_idiff():\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n-    # the use of idiff in ellipse also provides coverage\n+    f = Function('f')\n+    g = Function('g')\n+    y = Symbol('y', real=True)\n+\n+    # Additional test cases\n+    # Test case for Eq with y*exp(y) == x*exp(x)\n+    assert idiff(Eq(y*exp(y), x*exp(x)), y, x) == (x + 1) * exp(x - y) / (y + 1)\n+\n+    # Test case for function notation f(x)*exp(f(x)) - x*exp(x)\n+    assert idiff(f(x)*exp(f(x)) - x*exp(x), f(x), x) == (x + 1) * exp(x - f(x)) / (f(x) + 1)\n+\n+    # Test case for Eq with function notation\n+    assert idiff(Eq(f(x)*exp(f(x)), x*exp(x)), f(x), x) == (x + 1) * exp(x - f(x)) / (f(x) + 1)\n+\n+    # Original test patch cases\n     circ = x**2 + y**2 - 4\n     ans = -3*x*(x**2 + y**2)/y**5\n     assert ans == idiff(circ, y, x, 3).simplify()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..0eb7ffb 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -581,8 +581,40 @@ def test_ccode_cse():\n         '}\\n'\n     )\n     assert source == expected\n+from sympy.utilities.codegen import codegen, CCodeGen\n+from sympy import MatrixSymbol, S\n+\n+def test_ccode_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", S(1.0))\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n+def test_autowrap_unused_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = S(1.0)\n+    f = autowrap(expr, args=(x,), backend='cython')\n \n-def test_empty_f_code():\n+    result = f(np.array([[1.0], [2.0]]))\n+    expected = 1.0\n+\n+    assert result == expected\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n     assert source == \"\"\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..51ebf6b 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,37 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import Intersection, FiniteSet, Eq, S, Symbol\n \n-def test_issue_9623():\n+def test_intersection_removes_duplicates():\n+    x = Symbol('x')\n+    \n+    # Case where both sets are identical\n+    result = Intersection({1}, {1}, {x})\n+    expected = Intersection({1}, {x})\n+    assert result == expected, f\"Expected {expected}, but got {result}\"\n+\n+    # Case where duplicates are present but with a symbolic variable\n+    result = Intersection({1}, {1}, {x})\n+    expected = Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert result == expected, f\"Expected {expected}, but got {result}\"\n+\n+    # Case with more than two sets with duplicates\n+    result = Intersection({1}, {1}, {1}, {x})\n+    expected = Intersection({1}, {x})\n+    assert result == expected, f\"Expected {expected}, but got {result}\"\n+\n+    # Case where no intersection exists\n+    result = Intersection({1}, {2}, {x})\n+    expected = S.EmptySet\n+    assert result == expected, f\"Expected {expected}, but got {result}\"\n+\n+    # Validate existing functionality is unaffected\n+    n = Symbol('n')\n+    a = S.Reals\n+    b = Interval(0, oo)\n+    c = FiniteSet(n)\n+    assert Intersection(a, b, c, evaluate=False) == Intersection(S.Reals, Interval(0, oo), FiniteSet(n), evaluate=False)\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "diff --git a/sympy/printing/tests/test_numpy.py b/sympy/printing/tests/test_numpy.py\nindex fa5ed1f..c385496 100644\n--- a/sympy/printing/tests/test_numpy.py\n+++ b/sympy/printing/tests/test_numpy.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Piecewise, lambdify, Equality, Unequality, Sum, Mod, cbrt, sqrt,\n     MatrixSymbol, BlockMatrix\n@@ -10,13 +11,29 @@ from sympy.codegen.array_utils import (CodegenArrayContraction,\n         CodegenArrayPermuteDims, CodegenArrayElementwiseAdd)\n from sympy.printing.lambdarepr import NumPyPrinter\n \n-from sympy.utilities.pytest import warns_deprecated_sympy\n+from sympy.matrices import MatrixSymbol, Identity\n+from sympy.utilities.pytest import skip, raises\n from sympy.utilities.pytest import skip\n from sympy.external import import_module\n \n np = import_module('numpy')\n \n-def test_numpy_piecewise_regression():\n+def test_lambdify_identity_matrix():\n+    if not np:\n+        skip(\"NumPy not installed\")\n+\n+    n = symbols('n', integer=True)\n+    A = MatrixSymbol(\"A\", 2, 2)\n+    a = np.array([[1, 2], [3, 4]])\n+    f = lambdify(A, A + Identity(2), modules='numpy')\n+    result = f(a)\n+    expected = np.array([[2, 2], [3, 5]])\n+    \n+    assert np.array_equal(result, expected), f\"Expected {expected}, got {result}\"\n+\n+    # Test for symbolic-sized matrix\n+    N = MatrixSymbol(\"N\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\n     \"\"\"\n     NumPyPrinter needs to print Piecewise()'s choicelist as a list to avoid\n     breaking compatibility with numpy 1.8. This is not necessary in numpy 1.9+.\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..d84ac73 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -93,6 +94,14 @@ def test_point():\n     assert p4 * 5 == Point(5, 5)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n+    # Test multiplying Point and scalar from both sides\n+    from sympy import sympify\n+    p0 = Point(0, 0)\n+    assert p0 + p4 * sympify(2.0) == Point(2, 2)\n+    assert p0 + sympify(2.0) * p4 == Point(2, 2)\n+    assert p4 * sympify(2.0) == Point(2, 2)\n+    assert sympify(2.0) * p4 == Point(2, 2)\n+\n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n     # Point differences should be simplified\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..e423694 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1893,8 +1893,56 @@ def test_normal():\n     e = Mul(S.Half, 1 + x, evaluate=False)\n     assert e.normal() == e\n \n+from sympy import symbols, sympify, Symbol\n+from sympy.core.compatibility import iterable\n+import pytest\n \n def test_expr():\n+    # Additional test cases for verifying the fix of the issue\n+    def test_non_string_equality():\n+        # Expressions should not compare equal to strings\n+        x = symbols('x')\n+        one = sympify(1)\n+        assert (x == 'x') is False\n+        assert (x != 'x') is True\n+        assert (one == '1') is False\n+        assert (one != '1') is True\n+        assert (x + 1 == 'x + 1') is False\n+        assert (x + 1 != 'x + 1') is True\n+\n+        # Make sure == doesn't try to convert the resulting expression to a string\n+        class BadRepr(object):\n+            def __repr__(self):\n+                raise RuntimeError\n+\n+        assert (x == BadRepr()) is False\n+        assert (x != BadRepr()) is True\n+\n+    test_non_string_equality()\n+\n+    def test_repr_equality_issue():\n+        # Testing the original issue where repr is used in equality\n+        class C:\n+            def __repr__(self):\n+                return 'x.y'\n+\n+        x = symbols('x')\n+        with pytest.raises(AttributeError):\n+            _ = (x == C())\n+\n+    test_repr_equality_issue()\n+\n+    def test_repr_equality_issue_with_same_symbol():\n+        # Testing the related issue where repr returns the same symbol name\n+        class C:\n+            def __repr__(self):\n+                return 'x'\n+\n+        x = symbols('x')\n+        assert (x == C()) is False\n+        assert (x != C()) is True\n+\n+    test_repr_equality_issue_with_same_symbol()\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n \n@@ -1902,4 +1950,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..3852dce 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,20 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n+def test_issue_18186():\n+    from sympy.abc import m, n\n \n-def test_general_pythagorean():\n+    # Test cases to verify the issue with permute=True\n+    equation = n**4 + m**4 - 2**4 - 3**4\n+\n+    # Check for both orders of symbols\n+    result_m_n = diophantine(equation, syms=(m, n), permute=True)\n+    result_n_m = diophantine(equation, syms=(n, m), permute=True)\n+\n+    # Assert that both results are equal and contain all expected solutions\n+    expected_solutions = {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert result_m_n == expected_solutions\n+    assert result_n_m == expected_solutions\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..d0a489e 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -60,9 +61,17 @@ def test_PostIncrement():\n     assert ccode(p) == '(x)++'\n \n \n-def test_sizeof():\n+def test_atoms_with_sizeof():\n     typename = 'unsigned int'\n     sz = sizeof(typename)\n+    # Check if atoms contains strings with no args\n+    assert sz.atoms() == {String(typename), String('sizeof')}\n+    \n+def test_atoms_with_struct():\n+    vx, vy = Variable(x, type=float64), Variable(y, type=float64)\n+    s = struct('vec2', [vx, vy])\n+    # Check if atoms does not mistakenly return struct parts as 'Atom' subclasses\n+    assert all(len(atom.args) == 0 for atom in s.atoms())\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..5273b99 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,26 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_single_element_conversion():\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n+def test_BlockDiagMatrix_multiple_elements_conversion():\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M, M)\n+    B = Matrix(D)\n+    expected = Matrix([\n+        [1, 2, 0, 0],\n+        [3, 4, 0, 0],\n+        [0, 0, 1, 2],\n+        [0, 0, 3, 4]\n+    ])\n+    assert B == expected\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..4aa7c74 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, XFAIL\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n k, l, m, n = symbols('k l m n', integer=True)\n@@ -83,7 +84,50 @@ def test_block_index():\n     assert BI.as_explicit().equals(eye(6))\n \n \n-def test_slicing():\n+def test_block_index_symbolic():\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    assert C[i, 0] == MatrixElement(C, i, 0)  # Should not simplify to (A)[i, 0]\n+\n+def test_block_index_symbolic_nonzero():\n+    k, l, m, n = symbols('k l m n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True, nonnegative=True)\n+    A1 = MatrixSymbol('A1', n, k)\n+    A2 = MatrixSymbol('A2', n, l)\n+    A3 = MatrixSymbol('A3', m, k)\n+    A4 = MatrixSymbol('A4', m, l)\n+    A = BlockMatrix([[A1, A2], [A3, A4]])\n+    assert A[0, 0] == A1[0, 0]\n+    assert A[n + m - 1, 0] == A3[m - 1, 0]\n+    assert A[0, k + l - 1] == A2[0, l - 1]\n+    assert A[n + m - 1, k + l - 1] == A4[m - 1, l - 1]\n+    assert A[i, j] == MatrixElement(A, i, j)\n+    assert A[n + i, k + j] == A4[i, j]\n+    assert A[n - i - 1, k - j - 1] == A1[n - i - 1, k - j - 1]\n+    assert A[2 * n, 2 * k] == A4[n, k]\n+\n+def test_block_index_large():\n+    n, m, k = symbols('n m k', integer=True, positive=True)\n+    i = symbols('i', integer=True, nonnegative=True)\n+    A1 = MatrixSymbol('A1', n, n)\n+    A2 = MatrixSymbol('A2', n, m)\n+    A3 = MatrixSymbol('A3', n, k)\n+    A4 = MatrixSymbol('A4', m, n)\n+    A5 = MatrixSymbol('A5', m, m)\n+    A6 = MatrixSymbol('A6', m, k)\n+    A7 = MatrixSymbol('A7', k, n)\n+    A8 = MatrixSymbol('A8', k, m)\n+    A9 = MatrixSymbol('A9', k, k)\n+    A = BlockMatrix([[A1, A2, A3], [A4, A5, A6], [A7, A8, A9]])\n+    assert A[n + i, n + i] == MatrixElement(A, n + i, n + i)\n+\n+@XFAIL\n+def test_block_index_symbolic_fail():\n+    A1 = MatrixSymbol('A1', n, 1)\n+    A2 = MatrixSymbol('A2', m, 1)\n+    A = BlockMatrix([[A1], [A2]])\n+    assert A[2 * n, 0] == A2[n, 0]  # This currently fails due to non-negative assumption issues\n     A.as_explicit()[0, :]  # does not raise an error\n \n \n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..039d879 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -302,6 +302,18 @@ def test_sign():\n     assert sign(x).rewrite(Heaviside) == 2*Heaviside(x, H0=S(1)/2) - 1\n     assert sign(y).rewrite(Heaviside) == sign(y)\n \n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+    assert sign(0).rewrite(Abs) == 0\n+\n+    z = Symbol('z', complex=True)\n+    assert sign(z).rewrite(Abs) == Piecewise((0, Eq(z, 0)), (z/Abs(z), True))\n+\n+    # Test with complex numbers\n+    assert sign(2 + 2*I).rewrite(Abs) == (2 + 2*I) / Abs(2 + 2*I)\n+    assert sign(0 + 0*I).rewrite(Abs) == 0\n+    assert sign(2 - 3*I).rewrite(Abs) == (2 - 3*I) / Abs(2 - 3*I)\n+\n     # evaluate what can be evaluated\n     assert sign(exp_polar(I*pi)*pi) is S.NegativeOne\n \n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..fd798bf 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,6 +470,9 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n+import sympy\n+from sympy.utilities.iterables import partitions, uniq\n+from sympy import S\n \n def test_partitions():\n     ans = [[{}], [(0, {})]]\n@@ -500,6 +503,12 @@ def test_partitions():\n         {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}] == [\n         i.copy() for i in partitions(4) if all(k <= 3 for k in i)]\n \n+    # Test that each partition is a unique dictionary object\n+    partitions_generated = list(partitions(6, k=2))\n+    partition_ids = [id(p) for p in partitions_generated]\n+    assert len(set(partition_ids)) == len(partition_ids), \\\n+        \"Partitions should not reuse the same dictionary object\"\n+\n \n     # Consistency check on output of _partitions and RGS_unrank.\n     # This provides a sanity test on both routines.  Also verifies that\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..4f869c7 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -253,8 +253,12 @@ def test_power_rewrite_exp():\n     assert all((1/func(x)).rewrite(exp) == 1/(func(x).rewrite(exp)) for func in\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n+from sympy import S, zoo, oo, power\n \n def test_zero():\n+    # Test issue 19572\n+    assert 0**-oo == zoo\n+    assert power(0, -oo) == zoo\n     x = Symbol('x')\n     y = Symbol('y')\n     assert 0**x != 0\n",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..1d113d5 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,8 +1,9 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n-                                 volume, kilometer)\n-from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n+                                 volume, kilometer, joule)\n+from sympy.physics.units.definitions import (amu, au, centimeter, coulomb, joule,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n     byte, kibibyte, mebibyte, gibibyte, tebibyte, pebibyte, exbibyte,\n@@ -44,6 +45,11 @@ def test_convert_to():\n     # Wrong dimension to convert:\n     assert q.convert_to(s) == q\n     assert speed_of_light.convert_to(m) == speed_of_light\n+    \n+    # Test issue with converting orthogonal units\n+    expr = joule * second\n+    conv = convert_to(expr, joule)\n+    assert conv == expr, f\"Expected {expr}, but got {conv}\"\n \n \n def test_Quantity_definition():\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..f740b19 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,19 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+import pytest\n+from sympy import Symbol\n+\n+def test_symbol_no_dict():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__'), \"Symbol instances should not have a __dict__ attribute\"\n+    assert s.__slots__ == ('name',), \"Symbol should use __slots__ to prevent __dict__\"\n+\n+def test_symbol_slots():\n+    s = Symbol('s')\n+    assert hasattr(s, '__slots__'), \"Symbol instances should have __slots__ defined\"\n+    assert s.__slots__ == ('name',), \"Symbol should have 'name' as its slot\"\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..db59022 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, Integral, sin, oo, arg, exp)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n",
  "sympy__sympy-21379": "",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..75c4bca 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n@@ -5,6 +6,7 @@ from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.integrals.integrals import Integral\n+from sympy.core.function import Derivative\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n \n@@ -39,7 +41,10 @@ def test_Integral_kind():\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n \n-def test_Matrix_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n     classes = (Matrix, SparseMatrix, ImmutableMatrix, ImmutableSparseMatrix)\n     for cls in classes:\n         m = cls.zeros(3, 2)\n",
  "sympy__sympy-21847": "",
  "sympy__sympy-22005": "",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..d345589 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,6 @@\n+\n from sympy.core.basic import Basic\n+from sympy.core.parameters import evaluate\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n@@ -440,6 +442,30 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n+def test_issue_22684():\n+    # Test if Point2D can be created without errors using evaluate(False)\n+    with evaluate(False):\n+        p = Point2D(Integer(1), Integer(2))\n+        assert p == Point2D(1, 2)\n+\n+    # Test if creating a Point2D directly without evaluate behaves correctly\n+    p = Point2D(1, 2)\n+    assert p == Point2D(1, 2)\n+\n+    # Test if Point2D can be created with symbolic expressions\n+    x = Symbol('x', real=True)\n+    with evaluate(False):\n+        p = Point2D(x, 2)\n+        assert p == Point2D(x, 2)\n+\n+    # Ensure ValueError is raised for imaginary parts when not using evaluate(False)\n+    raises(ValueError, lambda: Point2D(1 + I, 2))\n+\n+    # Ensure no error is raised with evaluate(False) even for imaginary parts\n+    with evaluate(False):\n+        p = Point2D(1 + I, 2)\n+        assert p == Point2D(1 + I, 2)\n+\n def test_dot():\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..c920071 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -347,6 +347,23 @@ def test_cse_MatrixSymbol():\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n \n+def test_cse_MatrixSymbol_indexing():\n+    from sympy import Matrix, symbols, MatrixSymbol\n+    from sympy.simplify.cse_main import cse\n+\n+    def t44(name):\n+        return Matrix(4, 4, lambda i, j: symbols('%s_%d_%d' % (name, i, j)))\n+\n+    a = t44(\"a\")\n+    b = t44(\"b\")\n+    \n+    e = a * b\n+    e2 = e.subs({a: MatrixSymbol(\"a\", 4, 4), b: MatrixSymbol(\"b\", 4, 4)})\n+    \n+    cse_subs, cse_reduced = cse(e2)\n+    assert len(cse_subs) > 0\n+    assert isinstance(cse_reduced[0], Matrix)\n+\n def test_cse_MatrixExpr():\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n",
  "sympy__sympy-23117": "",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..4d2931e 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,24 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n+def test_lambdify_single_element_tuple():\n+    # Test for a tuple with a single element\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,)\n+    # Verify that the generated code includes the comma for a tuple\n+    source = inspect.getsource(f_single)\n+    assert 'return (1,)' in source\n+\n+def test_lambdify_single_element_tuple_string():\n+    # Test for a tuple with a single string element\n+    f_single_str = lambdify([], ('a',))\n+    assert f_single_str() == ('a',)\n+    source_str = inspect.getsource(f_single_str)\n+    assert \"return ('a',)\" in source_str\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..78434c3 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,7 +528,28 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n-def test_issue_20288():\n+from sympy.core.numbers import E\n+from sympy import exp\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+from sympy.physics.units.systems.si import SI\n+from sympy.physics.units import Quantity\n+\n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n     u = Quantity('u')\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..e606d48 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -40,8 +40,24 @@ def test_tensor_product_abstract():\n     assert isinstance(TP(A, B), TP)\n     assert TP(A, B).subs(A, C) == TP(C, B)\n \n+from sympy import symbols\n \n def test_tensor_product_expand():\n+    # Additional test cases for issue #24142\n+    # Test case with scalar factors\n+    assert TP(2*U - V, U + V).expand(tensorproduct=True) == \\\n+        2*TP(U, U) + 2*TP(U, V) - TP(V, U) - TP(V, V)\n+    \n+    # Test case with zero tensor factor\n+    assert TP(U - U, U + V).expand(tensorproduct=True) == 0\n+    \n+    # Test case with more complex scalar multiplication\n+    assert TP(3*U + 2*V, 4*U - V).expand(tensorproduct=True) == \\\n+        12*TP(U, U) - 3*TP(U, V) + 8*TP(V, U) - 2*TP(V, V)\n+    \n+    # Test case involving nested tensor products\n+    assert TP(TP(U, V) + TP(V, U), U).expand(tensorproduct=True) == \\\n+        TP(TP(U, V), U) + TP(TP(V, U), U)\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..57507d0 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,6 +563,28 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, SI, velocity, acceleration, time, second, meter\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+\n+    # Expression combining acceleration*time and velocity\n+    expr = A1 * T1 + V1\n+\n+    # Should not raise ValueError, indicating dimensions are correctly recognized as equivalent\n+    factor, dimension = SI._collect_factor_and_dimension(expr)\n+    assert dimension == SI.get_quantity_dimension(V1)\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..296bc96 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, volt\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -18,6 +19,15 @@ def test_prefix_operations():\n     dodeca = Prefix('dodeca', 'dd', 1, base=12)\n \n     assert m * k == 1\n+    \n+    # Test for the bug with milli prefix with watts\n+    assert milli * W == W / 1000\n+    assert W * milli == W / 1000\n+\n+    # Additional test cases for milli prefix with other units\n+    assert milli * meter == meter / 1000\n+    assert milli * volt == volt / 1000\n+    assert milli * length == length / 1000\n     assert k * k == M\n     assert 1 / m == k\n     assert k / m == M\n",
  "django__django-12470": "diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 067de1c..6e1cbc6 100644\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -1,5 +1,21 @@\n from operator import attrgetter\n \n+class ModelInheritanceOrderingTests(TestCase):\n+    def test_inherited_ordering_pk_desc_on_child(self):\n+        # Create Parent and Child instances\n+        p1 = Parent.objects.create(first_name='Alice', email='alice@example.com')\n+        p2 = Parent.objects.create(first_name='Bob', email='bob@example.com')\n+        c1 = Child.objects.create(first_name='Charlie', email='charlie@example.com')\n+        c2 = Child.objects.create(first_name='David', email='david@example.com')\n+\n+        # Test order of Child instances\n+        ordered_children = list(Child.objects.all())\n+        self.assertEqual(ordered_children, [c2, c1])\n+\n+        # Check SQL query order clause\n+        expected_order_by_sql = 'ORDER BY \"myapp_parent\".\"id\" DESC'\n+        self.assertIn(expected_order_by_sql, str(Child.objects.all().query))\n+\n from django.core.exceptions import FieldError, ValidationError\n from django.db import connection, models\n from django.test import SimpleTestCase, TestCase\n@@ -8,7 +24,7 @@ from django.test.utils import CaptureQueriesContext, isolate_apps\n from .models import (\n     Base, Chef, CommonInfo, GrandChild, GrandParent, ItalianRestaurant,\n     MixinModel, ParkingLot, Place, Post, Restaurant, Student, SubBase,\n-    Supplier, Title, Worker,\n+    Supplier, Title, Worker, Parent, Child\n )\n \n \n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..25b317b 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -342,6 +342,34 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+    def test_order_by_self_referential_fk(self):\n+        author_1 = Author.objects.create(name='Author 1')\n+        author_2 = Author.objects.create(name='Author 2')\n+        editor_1 = Author.objects.create(name='Editor 1', editor=author_1)\n+        editor_2 = Author.objects.create(name='Editor 2', editor=author_2)\n+        \n+        article_1 = Article.objects.create(author=author_1, headline='Article 1')\n+        article_2 = Article.objects.create(author=author_2, headline='Article 2')\n+\n+        # Test ordering by self-referential foreign key (editor) explicitly\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+        # Test ordering by self-referential foreign key's ID explicitly\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+        \n+        # Additional test cases for order_by(\"-author__editor_id\")\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n \n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..0a13906 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3189,7 +3189,22 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n \n         self.assertEqual(SomeForm()['field'].id_for_label, 'id_field')\n \n-    def test_boundfield_id_for_label_override_by_attrs(self):\n+    def test_checkboxselectmultiple_subwidget_id_for_label(self):\n+        \"\"\"\n+        Test that CheckboxSelectMultiple widgets correctly use the id provided\n+        in ChoiceWidget.options for subwidgets.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_%s'}),\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = list(form['field'].subwidgets)\n+        # Ensure the id for label uses the custom ID from attrs\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_field_1')\n         \"\"\"\n         If an id is provided in `Widget.attrs`, it overrides the generated ID,\n         unless it is `None`.\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..745a38b 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,39 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas output and a custom transformer.\"\"\"\n+\n+    import pandas as pd\n+    from sklearn.pipeline import make_union\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn import set_config\n+\n+    # Sample data\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Define a custom transformer\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y=None):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y=None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().to_frame(\"value\")\n+\n+    # Set pandas output and create a FeatureUnion\n+    set_config(transform_output=\"pandas\")\n+    union = make_union(MyTransformer())\n+    \n+    # Transform data and check the result\n+    result = union.fit_transform(data)\n+    expected_index = pd.Index(data[\"date\"].unique(), name=\"date\")\n+    \n+    # Assert the transformation result\n+    assert isinstance(result, pd.DataFrame), \"Result should be a DataFrame\"\n+    assert result.index.equals(expected_index), \"Index mismatch in the result DataFrame\"\n+    assert \"MyTransformer__value\" in result.columns, \"Expected column not found in result\"\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..369a6ac 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,11 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+import pytest\n+import sys\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.ext.autodoc import do_autodoc\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..7afcb83 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -357,8 +358,23 @@ def test_issue_2827_trigsimp_methods():\n     eq = 1/sqrt(E) + E\n     assert exptrigsimp(eq) == eq\n \n-\n-def test_exptrigsimp():\n+def test_issue_15129_trigsimp_methods():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    r2 = t1.dot(t3)\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == sin(S(3)/50)\n+\n+def test_issue_15129_simplify_with_rationals():\n+    # Test direct simplification\n+    r = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    assert simplify(r) == cos(S(1)/25)\n+\n+    # Test with acos\n+    r_acos = acos(r)\n+    assert simplify(r_acos) == acos(cos(S(1)/25))\n     def valid(a, b):\n         from sympy.utilities.randtest import verify_numerically as tn\n         if not (tn(a, b) and a == b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..15f4864 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,28 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_sum_pretty_print_alignment():\n+    from sympy import Sum, oo\n+    from sympy.abc import x\n \n-def test_units():\n+    # Expression to test the alignment issue\n+    expr = Sum(x, (x, 1, oo)) + 3\n+\n+    # Expected unicode pretty print representation with proper alignment\n+    expected_unicode = \\\n+u(\"\"\"\\\n+  \u221e     \\n\\\n+ ___    \\n\\\n+ \u2572      \\n\\\n+  \u2572   x \\n\\\n+  \u2571    + 3\\n\\\n+ \u2571      \\n\\\n+ \u203e\u203e\u203e    \\n\\\n+x = 1   \\\n+\"\"\")\n+\n+    # Assert that the pretty print matches the expected alignment\n+    assert upretty(expr) == expected_unicode\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..2d1c355 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,7 +692,28 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.iterables import uniq\n+from sympy.utilities.pytest import raises\n+\n def test_uniq():\n+    # Original test patch\n+    f = [1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = [[1]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    # Additional test cases\n+    f = list('THISTLE')\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    f = [1, 2, 3, 4, 5]\n+    raises(RuntimeError, lambda: [f.pop() for i in uniq(f)])\n+    \n+    f = [1, 2, 3, 1, 2, 3]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    f = ['a', 'b', 'c', 'a', 'b', 'c']\n+    raises(RuntimeError, lambda: [f.pop(0) for i in uniq(f)])\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     assert list(uniq(x % 2 for x in range(5))) == [0, 1]\n",
  "django__django-11797": "",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..082a121 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,7 +546,24 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n-    def test_uuid_pk_subquery(self):\n+    def test_subquery_with_set_subquery(self):\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        self.assertIs(employees.query.subquery, False)\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql)\n+        \n+    def test_subquery_sql_without_setting_subquery(self):\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        employees_subquery.query.subquery = False  # Explicitly set to False to simulate issue\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        # Here we expect the SQL to be malformed because subquery is not set to true\n+        self.assertNotIn('(SELECT ', sql)\n+        self.assertIn('ELECT ', sql)  # Incomplete SQL simulating the issue\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n         qs = UUIDPK.objects.filter(id__in=Subquery(UUID.objects.values('uuid_fk__id')))\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..7dd199a 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,6 +153,15 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n+    def test_wrong_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation('pool__tournament__pool'),\n+                ).select_related('tournament_pool', 'tournament_pool__tournament')\n+            )\n+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\n+\n     def test_reverse_fk_select_related_multiple(self):\n         with self.assertNumQueries(1):\n             ps = list(\n@@ -163,4 +173,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..2286d3e 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -10,6 +11,7 @@ from numpy.testing import assert_array_equal\n from seaborn.external.version import Version\n from seaborn.palettes import color_palette\n \n+import seaborn as sns\n from seaborn.relational import (\n     _RelationalPlotter,\n     _LinePlotter,\n@@ -1623,7 +1625,20 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_with_hue_in_map(self):\n+        # Load the sample iris data\n+        iris = sns.load_dataset(\"iris\")\n+        # Create PairGrid without hue, apply hue in map\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            plot_successful = True\n+        except Exception as e:\n+            plot_successful = False\n+            print(f\"Plotting failed with exception: {e}\")\n+        \n+        assert plot_successful, \"The PairGrid plotting failed when using hue in map function.\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..48a2802 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,12 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+    def test_collect_only_shortcut(self, testdir):\n+        testdir.makepyfile(\"def test_x(): pass\")\n+        result = testdir.runpytest(\"-c\")  # Assuming '-c' is the new shortcut\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -434,6 +440,12 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n+    def test_collect_only_shortcut(self, testdir):\n+        testdir.makepyfile(\"def test_x(): pass\")\n+        result = testdir.runpytest(\"-c\")  # Assuming '-c' is the new shortcut\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..d098941 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -82,6 +82,13 @@ def test_Identity():\n \n     assert transpose(In) == In\n     assert In.inverse() == In\n+\n+    # Test case based on reported issue\n+    i, j = symbols('i j', integer=True)\n+    In = Identity(n)\n+    # Total sum of the elements should be 'n'\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit().subs(n, 3) == 3\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit().subs(n, 5) == 5\n     assert In.conjugate() == In\n \n def test_Identity_doit():\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..80c3899 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,7 +251,17 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n-# These bad LaTeX strings should raise a LaTeXParsingError when parsed\n+def test_issue_21537():\n+    from sympy.parsing.latex import parse_latex\n+    from sympy import symbols, Rational\n+\n+    a, b, c = symbols('a b c')\n+    \n+    # Test the problematic LaTeX expression\n+    latex_expr = r\"\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}\"\n+    expected_expr = (a**3 + b)/c / (1 / c**2)\n+    \n+    assert parse_latex(latex_expr) == expected_expr\n BAD_STRINGS = [\n     r\"(\",\n     r\")\",\n"
}