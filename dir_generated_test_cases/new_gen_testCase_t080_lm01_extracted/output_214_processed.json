{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..f9317de 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -134,8 +134,34 @@ def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n \n-\n-def test_custom_model_separable():\n+def test_nested_compound_model_separability():\n+    from astropy.modeling import models\n+    from astropy.modeling.separable import separability_matrix\n+    \n+    # Simple compound model\n+    cm = models.Linear1D(10) & models.Linear1D(5)\n+    expected_simple = np.array([[True, False], [False, True]])\n+    assert_allclose(separability_matrix(cm), expected_simple)\n+\n+    # More complex compound model\n+    complex_model = models.Pix2Sky_TAN() & models.Linear1D(10) & models.Linear1D(5)\n+    expected_complex = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, False],\n+        [False, False, False, True]\n+    ])\n+    assert_allclose(separability_matrix(complex_model), expected_complex)\n+\n+    # Nested compound model\n+    nested_model = models.Pix2Sky_TAN() & cm\n+    expected_nested = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, True],\n+        [False, False, True, True]\n+    ])\n+    assert_allclose(separability_matrix(nested_model), expected_nested)\n     @custom_model\n     def model_a(x):\n         return x\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..45b2eb4 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,8 +1,13 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n from astropy.io import ascii\n+from astropy.table import QTable\n+import astropy.units as u\n+import numpy as np\n+from io import StringIO\n \n from .common import assert_almost_equal, assert_equal\n \n@@ -184,4 +189,70 @@ Col1      Col2 Col3 Col4\n  2.4 's worlds    2    2\n ==== ========= ==== ====\n \"\"\",\n-    )\n+    )\n+\n+def test_rst_with_header_rows():\n+    \"\"\"Round-trip a table with header_rows specified\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n+\n+def test_rst_with_two_header_rows():\n+    \"\"\"Test writing a table with two header rows specified\"\"\"\n+    tbl = QTable(\n+        {\n+            'wave': [350, 950] * u.nm,\n+            'response': [0.7, 1.2] * u.count,\n+        }\n+    )\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\n+    expected_output = [\n+        \"===== ========\",\n+        \"wave response\",\n+        \"  nm      ct \",\n+        \"===== ========\",\n+        \"350.0      0.7\",\n+        \"950.0      1.2\",\n+        \"===== ========\",\n+    ]\n+    assert out.getvalue().splitlines() == expected_output\n+\n+def test_rst_with_no_header_rows():\n+    \"\"\"Test writing a table without specifying header rows\"\"\"\n+    tbl = QTable(\n+        {\n+            'wave': [350, 950] * u.nm,\n+            'response': [0.7, 1.2] * u.count,\n+        }\n+    )\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\")\n+    expected_output = [\n+        \"===== =======\",\n+        \"wave response\",\n+        \"===== =======\",\n+        \"350.0      0.7\",\n+        \"950.0      1.2\",\n+        \"===== =======\",\n+    ]\n+    assert out.getvalue().splitlines() == expected_output\n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..2721148 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -43,6 +43,11 @@ def test_get_tables_from_qdp_file(tmp_path):\n     assert np.isclose(table2[\"MJD_nerr\"][0], -2.37847222222222e-05)\n \n \n+import pytest\n+from astropy.utils.exceptions import AstropyUserWarning\n+from astropy.io.ascii.qdp import _read_table_qdp, _write_table_qdp\n+import numpy as np\n+\n def test_roundtrip(tmp_path):\n     example_qdp = \"\"\"\n     ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\n@@ -108,8 +113,28 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+def test_read_lowercase_commands(tmp_path):\n+    lowercase_qdp = \"\"\"\n+    ! A simple QDP file with lowercase commands\n+    read serr 1 2\n+    1 0.5 1 0.5\n+    NO NO NO NO\n+    \"\"\"\n+\n+    path = str(tmp_path / \"lowercase_test.qdp\")\n+\n+    with open(path, \"w\") as fp:\n+        print(lowercase_qdp, file=fp)\n+\n+    with pytest.warns(None) as record:\n+        table = _read_table_qdp(path, names=[\"X\", \"Y\"], table_id=0)\n \n-def test_read_example():\n+    assert not record  # No warnings should be issued\n+    assert len(table) == 1  # Only one data row\n+    assert table[\"X\"][0] == 1\n+    assert table[\"Y\"][0] == 0.5\n+    assert np.isclose(table[\"Y_nerr\"][0], 0.5)\n+    assert np.isclose(table[\"Y_perr\"][0], 0.5)\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..7e4e111 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -254,6 +254,25 @@ class TestTableFunctions(FitsTestCase):\n \n         t.close()\n \n+    def test_d_exponent_replacement(self):\n+        # Creating a FITS file with a column in 'D' format\n+        a1 = chararray.array(['abcd', 'def'])\n+        r1 = np.array([11., 12.])\n+        c1 = fits.Column(name='abc', format='A3', array=a1)\n+        c2 = fits.Column(name='def', format='D', array=r1)\n+        hdu = fits.TableHDU.from_columns([c1, c2])\n+        hdu.writeto(self.temp('test_d_exponent.fits'), overwrite=True)\n+\n+        # Verify that the written file has the correct format\n+        with open(self.temp('test_d_exponent.fits')) as f:\n+            content = f.read()\n+            assert '1.1000000000000000D+01' in content  # Check for 'D' exponent\n+            assert '1.2000000000000000D+01' in content\n+\n+        # Read back the data and verify accuracy\n+        with fits.open(self.temp('test_d_exponent.fits')) as hdul:\n+            assert comparerecords(hdu.data, hdul[1].data)\n+\n     def test_ascii_table(self):\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..2eb1e56 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1093,7 +1093,12 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n-    def test_override_file_upload_permissions(self):\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Default FILE_UPLOAD_PERMISSIONS setting should be 0o644.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n         the file_permissions_mode attribute of\n",
  "django__django-10924": "",
  "django__django-11001": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 4e3940c..3393c4b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -367,7 +367,33 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertEqual(str(qs.query).count('JOIN'), 1)\n \n-    def test_ticket_18375_chained_filters(self):\n+    def test_order_by_multiline_rawsql(self):\n+        raw_order_by = (\n+            RawSQL('''\n+                CASE WHEN status IN ('accepted', 'verification')\n+                     THEN 2 ELSE 1 END\n+            ''', []).desc(),\n+            RawSQL('''\n+                CASE WHEN status IN ('accepted', 'verification')\n+                     THEN (accepted_datetime, preferred_datetime)\n+                     ELSE NULL END\n+            ''', []).asc(),\n+            RawSQL('''\n+                CASE WHEN status NOT IN ('accepted', 'verification')\n+                     THEN (accepted_datetime, preferred_datetime, created_at)\n+                     ELSE NULL END\n+            ''', []).desc(),\n+        )\n+        for qs in (\n+            Company.objects.all(),\n+            Company.objects.distinct(),\n+        ):\n+            with self.subTest(qs=qs):\n+                # Assuming example_inc, gmbh, and foobar_ltd are set up elsewhere in the test\n+                self.assertSequenceEqual(\n+                    qs.order_by(*raw_order_by),\n+                    [self.example_inc, self.gmbh, self.foobar_ltd],\n+                )\n         # F() expressions do not reuse joins from previous filter.\n         qs = Employee.objects.filter(\n             company_ceo_set__num_employees=F('pk')\n",
  "django__django-11039": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex dbcbef0..35b56cc 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -514,6 +514,22 @@ class MigrateTests(MigrationTestBase):\n             out.getvalue()\n         )\n \n+    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n+    def test_sqlmigrate_for_non_transactional_databases(self):\n+        \"\"\"\n+        Transaction wrappers aren't shown for databases that don't support\n+        transactional DDL.\n+        \"\"\"\n+        out = io.StringIO()\n+        with mock.patch.object(connection.features, 'can_rollback_ddl', False):\n+            call_command('sqlmigrate', 'migrations', '0001', stdout=out)\n+        output = out.getvalue().lower()\n+        queries = [q.strip() for q in output.splitlines()]\n+        start_transaction_sql = connection.ops.start_transaction_sql()\n+        if start_transaction_sql:\n+            self.assertNotIn(start_transaction_sql.lower(), queries)\n+        self.assertNotIn(connection.ops.end_transaction_sql().lower(), queries)\n+\n     @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app'])\n     def test_showmigrations_plan_app_label_no_migrations(self):\n         out = io.StringIO()\n",
  "django__django-11049": "",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..e45f699 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,7 +237,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", 'trailingnewline\\u000A'\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -248,9 +248,15 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_ascii_validator_trailing_newline(self):\n+        invalid_usernames = ['username\\n', 'validname\\n']\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", 'trailingnewline\\n']\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +264,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..6cc8d26 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,7 +356,15 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n-    def test_non_string_content(self):\n+    def test_memoryview_content(self):\n+        # Test that HttpResponse correctly handles memoryview objects\n+        r = HttpResponse(memoryview(b'memoryview content'))\n+        self.assertEqual(r.content, b'memoryview content')\n+\n+        # Test setting memoryview content via property\n+        r = HttpResponse()\n+        r.content = memoryview(b'another memoryview')\n+        self.assertEqual(r.content, b'another memoryview')\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n         self.assertEqual(r.content, b'12345')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..0225ddf 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,8 +1,10 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from django.db.models.deletion import Collector\n \n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n@@ -464,7 +466,33 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        # This test ensures that deleting a model instance without dependencies sets its pk to None.\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_instance_with_dependencies(self):\n+        # This test checks the behavior when an instance of a model with dependencies gets deleted.\n+        a = Avatar.objects.create(desc='avatar')\n+        u = User.objects.create(avatar=a)\n+        collector = Collector(using='default')\n+        self.assertFalse(collector.can_fast_delete(u))\n+        u.delete()\n+        with self.assertRaises(User.DoesNotExist):\n+            User.objects.get(pk=u.pk)\n+\n+    def test_delete_instance_multiple_times(self):\n+        # This test ensures that deleting an already deleted instance doesn't cause an error.\n+        u = User.objects.create()\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+        # Deleting again should not raise any error.\n+        u.delete()\n+        self.assertIsNone(u.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..da4e860 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,9 +1,11 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.test import TestCase\n+from django.test.utils import captured_stdout  # Ensure captured_stdout is imported\n \n from .models import Proxy, UserProxy\n \n@@ -140,7 +142,42 @@ class ProxyModelWithSameAppLabelTests(TestCase):\n         self.custom_permission.refresh_from_db()\n         self.assertEqual(self.custom_permission.content_type, self.concrete_content_type)\n \n-    def test_user_keeps_same_permissions_after_migrating_backward(self):\n+    def test_duplicate_permission_handling(self):\n+        \"\"\"\n+        Test that migration handles existing permissions without failing due to duplicates.\n+        \"\"\"\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        Permission.objects.create(\n+            content_type=proxy_model_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        \n+        # Simulate running the migration\n+        with captured_stdout() as stdout:\n+            update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        self.assertIn('A problem arose migrating proxy model permissions', stdout.getvalue())\n+\n+    def test_proxy_permission_update(self):\n+        \"\"\"\n+        Test that the migration updates the content_type for proxy model permissions.\n+        \"\"\"\n+        concrete_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=True)\n+        proxy_model_content_type = ContentType.objects.get_for_model(Proxy, for_concrete_model=False)\n+        \n+        # Create a permission with the concrete content type\n+        permission = Permission.objects.create(\n+            content_type=concrete_content_type,\n+            codename='add_proxy',\n+            name='Can add proxy',\n+        )\n+        \n+        # Run the migration\n+        update_proxy_permissions.update_proxy_model_permissions(apps, None)\n+        \n+        # Check if the permission content_type is updated to proxy\n+        permission.refresh_from_db()\n+        self.assertEqual(permission.content_type, proxy_model_content_type)\n         user = User.objects.create()\n         user.user_permissions.add(self.default_permission)\n         user.user_permissions.add(self.custom_permission)\n",
  "django__django-11422": "",
  "django__django-11583": "",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..8b6a5d6 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -17,6 +17,8 @@ from django.template import TemplateDoesNotExist\n from django.test import RequestFactory, SimpleTestCase, override_settings\n from django.test.utils import LoggingCaptureMixin\n from django.urls import path, reverse\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from django.utils.functional import SimpleLazyObject\n from django.utils.safestring import mark_safe\n from django.views.debug import (\n@@ -234,6 +236,32 @@ class DebugViewTests(SimpleTestCase):\n             default_urlconf(None)\n             m.assert_called_once_with(encoding='utf-8')\n             m.reset_mock()\n+\n+    def test_technical_404_converter_raise_404(self):\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+            response = self.client.get('/path-post/1/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n+    def test_technical_404_converter_value_error(self):\n+        \"\"\"\n+        Test that raising a ValueError in a path converter's to_python method\n+        results in a URL resolution failure and not a 404 response.\n+        \"\"\"\n+        with mock.patch.object(IntConverter, 'to_python', side_effect=ValueError):\n+            response = self.client.get('/path-post/invalid/')\n+            # The response should not be a 404, as ValueError should just skip this path.\n+            self.assertNotContains(response, 'Page not found', status_code=404)\n+            self.assertContains(response, 'Django tried these URL patterns')\n+\n+    def test_technical_404_with_debug_false(self):\n+        \"\"\"\n+        Verify that when DEBUG is False, even raising Http404 in to_python\n+        results in a generic 404 page.\n+        \"\"\"\n+        with override_settings(DEBUG=False):\n+            with mock.patch.object(IntConverter, 'to_python', side_effect=Http404):\n+                response = self.client.get('/path-post/1/')\n+                self.assertContains(response, 'Not Found', status_code=404)\n             technical_404_response(mock.MagicMock(), mock.Mock())\n             m.assert_called_once_with(encoding='utf-8')\n \n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..a91f2a1 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -80,6 +80,44 @@ class BinaryFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_too_long_for_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('ABC', 'Value Too Long!'),\n+                    ('OK', 'Good'),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (3 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_nested_choices_with_max_length(self):\n+        class Model(models.Model):\n+            group = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('group')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (6 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n \n @isolate_apps('invalid_models_tests')\n class CharFieldTests(SimpleTestCase):\n@@ -111,6 +149,44 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_too_long_for_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('ABC', 'Value Too Long!'),\n+                    ('OK', 'Good'),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (3 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_nested_choices_with_max_length(self):\n+        class Model(models.Model):\n+            group = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('group')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (6 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n     def test_negative_max_length(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=-1)\n@@ -124,6 +200,44 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_too_long_for_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('ABC', 'Value Too Long!'),\n+                    ('OK', 'Good'),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (3 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_nested_choices_with_max_length(self):\n+        class Model(models.Model):\n+            group = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('group')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (6 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n     def test_bad_max_length_value(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=\"bad\")\n@@ -137,6 +251,44 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_too_long_for_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('ABC', 'Value Too Long!'),\n+                    ('OK', 'Good'),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (3 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_nested_choices_with_max_length(self):\n+        class Model(models.Model):\n+            group = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('group')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (6 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n     def test_str_max_length_value(self):\n         class Model(models.Model):\n             field = models.CharField(max_length='20')\n@@ -150,6 +302,44 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_too_long_for_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('ABC', 'Value Too Long!'),\n+                    ('OK', 'Good'),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (3 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_nested_choices_with_max_length(self):\n+        class Model(models.Model):\n+            group = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('group')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (6 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n     def test_str_max_length_type(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=True)\n@@ -163,6 +353,44 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_too_long_for_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('ABC', 'Value Too Long!'),\n+                    ('OK', 'Good'),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (3 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_nested_choices_with_max_length(self):\n+        class Model(models.Model):\n+            group = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('group')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (6 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n     def test_non_iterable_choices(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=10, choices='bad')\n@@ -176,6 +404,44 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_too_long_for_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('ABC', 'Value Too Long!'),\n+                    ('OK', 'Good'),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (3 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_nested_choices_with_max_length(self):\n+        class Model(models.Model):\n+            group = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('group')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (6 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n     def test_non_iterable_choices_two_letters(self):\n         \"\"\"Two letters isn't a valid choice pair.\"\"\"\n         class Model(models.Model):\n@@ -191,6 +457,44 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_too_long_for_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('ABC', 'Value Too Long!'),\n+                    ('OK', 'Good'),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (3 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_nested_choices_with_max_length(self):\n+        class Model(models.Model):\n+            group = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('group')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (6 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n     def test_iterable_of_iterable_choices(self):\n         class ThingItem:\n             def __init__(self, value, display):\n@@ -272,6 +576,44 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_too_long_for_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('ABC', 'Value Too Long!'),\n+                    ('OK', 'Good'),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (3 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_nested_choices_with_max_length(self):\n+        class Model(models.Model):\n+            group = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('group')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (6 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n     def test_choices_named_group_bad_structure(self):\n         class Model(models.Model):\n             field = models.CharField(\n@@ -293,6 +635,44 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_too_long_for_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('ABC', 'Value Too Long!'),\n+                    ('OK', 'Good'),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (3 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_nested_choices_with_max_length(self):\n+        class Model(models.Model):\n+            group = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('group')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (6 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n     def test_choices_named_group_lazy(self):\n         class Model(models.Model):\n             field = models.CharField(\n@@ -317,6 +697,44 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_too_long_for_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('ABC', 'Value Too Long!'),\n+                    ('OK', 'Good'),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (3 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_nested_choices_with_max_length(self):\n+        class Model(models.Model):\n+            group = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('group')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (6 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n     def test_bad_validators(self):\n         class Model(models.Model):\n             field = models.CharField(max_length=10, validators=[True])\n@@ -334,6 +752,44 @@ class CharFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_choices_too_long_for_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('ABC', 'Value Too Long!'),\n+                    ('OK', 'Good'),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('field')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (3 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n+    def test_nested_choices_with_max_length(self):\n+        class Model(models.Model):\n+            group = models.CharField(\n+                max_length=2,\n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        field = Model._meta.get_field('group')\n+        self.assertEqual(field.check(), [\n+            Error(\n+                \"'max_length' is too small to fit the longest value in 'choices' (6 characters).\",\n+                obj=field,\n+                id='fields.E009',\n+            ),\n+        ])\n+\n     @unittest.skipUnless(connection.vendor == 'mysql',\n                          \"Test valid only for MySQL\")\n     def test_too_long_char_field_under_mysql(self):\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..738b04c 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -257,6 +257,24 @@ class WriterTests(SimpleTestCase):\n             A = 'a-value'\n             B = 'value-b'\n \n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('b-value')\n+\n+        field = models.CharField(\n+            default=TextTranslatedEnum.A,\n+            choices=[(m.value, m) for m in TextTranslatedEnum],\n+        )\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('b-value', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n+\n+        # Testing the Binary Enum serialization part remains unchanged\n         class BinaryEnum(enum.Enum):\n             A = b'a-value'\n             B = b'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..0661ec1 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,7 +1,8 @@\n+\n import unittest\n from datetime import datetime\n \n-from django.test import SimpleTestCase, ignore_warnings\n+from unittest import mock\n from django.utils.datastructures import MultiValueDict\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.http import (\n@@ -324,7 +325,26 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_year_less_than_70(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_two_digit_year(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        test_cases = [\n+            # Current year is 2019\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Monday, 31-Dec-69 08:49:37 GMT', datetime(1969, 12, 31, 8, 49, 37)),\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Monday, 01-Jan-70 08:49:37 GMT', datetime(1970, 1, 1, 8, 49, 37)),\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Sunday, 31-Dec-19 08:49:37 GMT', datetime(2019, 12, 31, 8, 49, 37)),\n+            # Current year is 2048\n+            (datetime(2048, 11, 6, 8, 49, 37), 'Friday, 01-Jan-50 08:49:37 GMT', datetime(2050, 1, 1, 8, 49, 37)),\n+            (datetime(2048, 11, 6, 8, 49, 37), 'Thursday, 31-Dec-49 08:49:37 GMT', datetime(2049, 12, 31, 8, 49, 37))\n+        ]\n+\n+        for current_utc, date_string, expected in test_cases:\n+            with self.subTest(date_string=date_string):\n+                mocked_datetime.utcnow.return_value = current_utc\n+                parsed_timestamp = parse_http_date(date_string)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed_timestamp), expected)\n         parsed = parse_http_date('Sun Nov  6 08:49:37 0037')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(2037, 11, 6, 8, 49, 37))\n \n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..c8964a9 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -40,7 +40,24 @@ class Gender(models.TextChoices):\n     __empty__ = '(Undeclared)'\n \n \n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", \"The first choice, it is\"\n+    SECOND_CHOICE = \"second\", \"The second choice, it is\"\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n class ChoicesTests(SimpleTestCase):\n+    def test_mychoice_field_type(self):\n+        # Create an instance of MyObject with a choice\n+        obj = MyObject(my_str_value=MyChoice.FIRST_CHOICE)\n+        # Test that the value type is string\n+        self.assertIsInstance(obj.my_str_value, str)\n+        # Test that the value is 'first'\n+        self.assertEqual(obj.my_str_value, \"first\")\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..9a93959 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -162,7 +162,15 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertEqual(Whiz(c='').get_c_display(), '')        # Empty value\n         self.assertEqual(WhizDelayed(c=0).get_c_display(), 'Other')  # Delayed choices\n \n-    def test_get_FIELD_display_translated(self):\n+    def test_override_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+            \n+            def get_foo_bar_display(self):\n+                return \"something\"\n+        \n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n         \"\"\"A translated display value is coerced to str.\"\"\"\n         val = Whiz(c=5).get_c_display()\n         self.assertIsInstance(val, str)\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/tests.py b/tests/urlpatterns/tests.py\nindex 7b8648d..b9fee39 100644\n--- a/tests/urlpatterns/tests.py\n+++ b/tests/urlpatterns/tests.py\n@@ -73,6 +73,21 @@ class SimplifiedURLTests(SimpleTestCase):\n         self.assertEqual(match.url_name, 'inner-extra')\n         self.assertEqual(match.route, 'included_urls/extra/<extra>/')\n \n+    def test_re_path_with_optional_format_parameter(self):\n+        # Test case for the issue with optional URL parameters\n+        # We are testing that the view correctly defaults 'format' to 'html' when not provided.\n+        match = resolve('/module/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': 'html'})\n+\n+        match = resolve('/module/json/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': 'json'})\n+\n+        match = resolve('/module/xml/')\n+        self.assertEqual(match.url_name, 'modules')\n+        self.assertEqual(match.kwargs, {'format': 'xml'})\n+\n     def test_path_lookup_with_empty_string_inclusion(self):\n         match = resolve('/more/99/')\n         self.assertEqual(match.url_name, 'inner-more')\n",
  "django__django-12284": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex 7dc81d2..15c4845 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -1,3 +1,35 @@\n+\n+class InheritedChoicesTests(TestCase):\n+\n+    def test_inherited_choices_display(self):\n+        \"\"\"\n+        Test get_FOO_display() for models with inherited choices.\n+        \"\"\"\n+\n+        class BaseModel(models.Model):\n+            foo_choice = [(\"A\", \"output1\"), (\"B\", \"output2\")]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ChildModel(BaseModel):\n+            foo_choice = [(\"A\", \"output1\"), (\"B\", \"output2\"), (\"C\", \"output3\")]\n+            field_foo = models.CharField(max_length=254, choices=foo_choice)\n+\n+        # Create instances of ChildModel with different values\n+        instance_a = ChildModel(field_foo=\"A\")\n+        instance_b = ChildModel(field_foo=\"B\")\n+        instance_c = ChildModel(field_foo=\"C\")\n+        instance_invalid = ChildModel(field_foo=\"D\")\n+\n+        # Assert that get_field_foo_display() returns the correct display value\n+        self.assertEqual(instance_a.get_field_foo_display(), \"output1\")\n+        self.assertEqual(instance_b.get_field_foo_display(), \"output2\")\n+        self.assertEqual(instance_c.get_field_foo_display(), \"output3\")\n+        # Assert that invalid choice returns the field value itself\n+        self.assertEqual(instance_invalid.get_field_foo_display(), \"D\")\n+\n import pickle\n \n from django import forms\n@@ -10,6 +42,7 @@ from .models import (\n     Bar, Choiceful, Foo, RenamedField, VerboseNameField, Whiz, WhizDelayed,\n     WhizIter, WhizIterEmpty,\n )\n+from django.db import models\n \n \n class Nested:\n",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..2f42b69 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -83,4 +84,30 @@ class TranslationCheckTests(SimpleTestCase):\n         with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n             self.assertEqual(check_language_settings_consistent(None), [\n                 Error(msg, id='translation.E004'),\n-            ])\n+            ])\n+\n+    def test_valid_variant_consistent_language_settings(self):\n+        tests = [\n+            'fr-CA',    # language + region, valid\n+            'es-419',   # language + region, valid\n+            'de-at',    # language + region, valid, only de is available\n+        ]\n+        for tag in tests:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag, LANGUAGES=[\n+                ('de', 'German'),\n+                ('es', 'Spanish'),\n+                ('fr', 'French'),\n+            ]):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n+    def test_invalid_variant_language_settings(self):\n+        msg = (\n+            'You have provided a value for the LANGUAGE_CODE setting that is '\n+            'not in the LANGUAGES setting.'\n+        )\n+        with self.settings(LANGUAGE_CODE='fr-357', LANGUAGES=[('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [\n+                Error(msg, id='translation.E004'),\n+            ])\n+        with self.settings(LANGUAGE_CODE='en-us', LANGUAGES=[('en', 'English')]):\n+            self.assertEqual(check_language_settings_consistent(None), [])\n",
  "django__django-12308": "",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..98290fb 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,50 @@\n+\n+class TestDeserializeDbFromString(SimpleTestCase):\n+    databases = {'default'}\n+\n+    def test_circular_reference(self):\n+        # deserialize_db_from_string() handles circular references.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj_ref\": 1, \"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 1,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get()\n+        obj_ref = ObjectReference.objects.get()\n+        self.assertEqual(obj.obj_ref, obj_ref)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n+    def test_non_circular_reference(self):\n+        # Test non-circular references to ensure they also handle ordering.\n+        data = \"\"\"\n+        [\n+            {\n+                \"model\": \"backends.object\",\n+                \"pk\": 1,\n+                \"fields\": {\"related_objects\": []}\n+            },\n+            {\n+                \"model\": \"backends.objectreference\",\n+                \"pk\": 2,\n+                \"fields\": {\"obj\": 1}\n+            }\n+        ]\n+        \"\"\"\n+        connection.creation.deserialize_db_from_string(data)\n+        obj = Object.objects.get(id=1)\n+        obj_ref = ObjectReference.objects.get(id=2)\n+        self.assertEqual(obj_ref.obj, obj)\n+\n import copy\n from unittest import mock\n \n@@ -6,6 +53,7 @@ from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n from django.test import SimpleTestCase\n+from ..models import Object, ObjectReference\n \n \n def get_connection_copy():\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..2227327 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -159,6 +159,31 @@ class RelativeFieldTests(SimpleTestCase):\n             ),\n         ])\n \n+    def test_recursive_relationship_hint(self):\n+        class Node(models.Model):\n+            related_nodes = models.ManyToManyField('self', through='NodeRelationship')\n+\n+        class NodeRelationship(models.Model):\n+            node_from = models.ForeignKey(Node, models.CASCADE, related_name='from_nodes')\n+            node_to = models.ForeignKey(Node, models.CASCADE, related_name='to_nodes')\n+\n+        field = Node._meta.get_field('related_nodes')\n+        self.assertEqual(field.check(from_model=Node), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Node.related_nodes', but it has more than one \"\n+                \"foreign key from 'Node', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"NodeRelationship\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n+\n     def test_relationship_model_with_foreign_key_to_wrong_model(self):\n         class WrongModel(models.Model):\n             pass\n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..68a66fb 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1267,8 +1267,67 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n         )\n         self.assertNotIn(b'super_secret', response.content)\n \n+    def test_cleanse_setting_recurses_in_list_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'login': 'cooper',\n+                'password': 'secret',\n+                'apps': (\n+                    {'name': 'app1', 'api_key': 'a06b-c462cffae87a'},\n+                    {'name': 'app2', 'api_key': 'a9f4-f152e97ad808'},\n+                ),\n+                'tokens': ['98b37c57-ec62-4e39', '8690ef7d-8004-4916'],\n+            },\n+            {'SECRET_KEY': 'c4d77c62-6196-4f17-a06b-c462cffae87a'},\n+        ]\n+        cleansed = [\n+            {\n+                'login': 'cooper',\n+                'password': reporter_filter.cleansed_substitute,\n+                'apps': (\n+                    {'name': 'app1', 'api_key': reporter_filter.cleansed_substitute},\n+                    {'name': 'app2', 'api_key': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': reporter_filter.cleansed_substitute,\n+            },\n+            {'SECRET_KEY': reporter_filter.cleansed_substitute},\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', tuple(initial)),\n+            tuple(cleansed),\n+        )\n \n-class CustomExceptionReporterFilter(SafeExceptionReporterFilter):\n+    def test_cleanse_setting_handles_nested_iterables(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {\n+            'level_1': [\n+                {'api_key': 'key1', 'token': 'token1'},\n+                {'api_key': 'key2', 'token': 'token2'},\n+            ],\n+            'level_2': (\n+                [{'password': 'pass1'}, {'password': 'pass2'}],\n+                [{'SECRET_KEY': 'secret1'}, {'SECRET_KEY': 'secret2'}],\n+            ),\n+        }\n+        expected_cleansed = {\n+            'level_1': [\n+                {'api_key': reporter_filter.cleansed_substitute, 'token': reporter_filter.cleansed_substitute},\n+                {'api_key': reporter_filter.cleansed_substitute, 'token': reporter_filter.cleansed_substitute},\n+            ],\n+            'level_2': (\n+                [{'password': reporter_filter.cleansed_substitute}, {'password': reporter_filter.cleansed_substitute}],\n+                [{'SECRET_KEY': reporter_filter.cleansed_substitute}, {'SECRET_KEY': reporter_filter.cleansed_substitute}],\n+            ),\n+        }\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            expected_cleansed,\n+        )\n     cleansed_substitute = 'XXXXXXXXXXXXXXXXXXXX'\n     hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE|DATABASE_URL', flags=re.I)\n \n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..4f14a6a 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,7 +1759,48 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_with_and_without_unique_together(self):\n+        app_label = 'test_alterindexwithunique'\n+        table_name = '%s_pony' % app_label\n+        \n+        # Setting up initial state with unique_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        \n+        # Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        \n+        # Attempt to remove index_together while unique_together still exists\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Testing re-adding the index using new Options.indexes\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterModelOptions(\n+            name='Pony',\n+            options={'indexes': [models.Index(fields=['pink', 'weight'], name='pony_pink_weight_idx')]}\n+        )\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        self.assertIndexExists(table_name, ['pink', 'weight'], index_type='idx')\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..8f79cb4 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -559,8 +559,19 @@ class DeletionTests(TestCase):\n         self.assertEqual(deleted, sum(existed_objs.values()))\n         for k, v in existed_objs.items():\n             self.assertEqual(deleted_objs[k], v)\n+    def test_delete_no_objects_foreign_key_model(self):\n+        \"\"\"\n+        Test that deleting from a model with foreign keys and no objects returns a consistent result.\n+        \"\"\"\n+        foreign_key_objects = HiddenUser.objects.filter(pk__in=[]).delete()\n+        self.assertEqual(foreign_key_objects, (0, {'delete.HiddenUser': 0}))\n \n-    def test_proxied_model_duplicate_queries(self):\n+    def test_delete_no_objects_simple_model(self):\n+        \"\"\"\n+        Test that deleting from a model without foreign keys and no objects returns a consistent result.\n+        \"\"\"\n+        simple_objects = R.objects.filter(pk__in=[]).delete()\n+        self.assertEqual(simple_objects, (0, {'delete.R': 0}))\n         \"\"\"\n         #25685 - Deleting instances of a model with existing proxy\n         classes should not issue multiple queries during cascade\n",
  "django__django-12856": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 7fb65b7..dd363b9 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1280,6 +1280,7 @@ class Model(metaclass=ModelBase):\n                 *cls._check_indexes(databases),\n                 *cls._check_ordering(),\n                 *cls._check_constraints(databases),\n+                *cls._check_unique_constraint_fields_exist(),\n             ]\n \n         return errors\n",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..30dcd42 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -94,6 +94,19 @@ class ASGITest(SimpleTestCase):\n             ),\n         )\n         await communicator.send_input({'type': 'http.request'})\n+\n+    async def test_get_async_response(self):\n+        request = self.async_request_factory.get('/static/test/file.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        response.close()\n+        self.assertEqual(response.status_code, 200)\n+\n+    async def test_get_async_response_not_found(self):\n+        request = self.async_request_factory.get('/static/test/not-found.txt')\n+        handler = ASGIStaticFilesHandler(ASGIHandler())\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n         response_start = await communicator.receive_output()\n         self.assertEqual(response_start['type'], 'http.response.start')\n         self.assertEqual(response_start['status'], 200)\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..a407291 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,17 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Testing for the fix: strip leading and trailing dashes and underscores\n+            # given - expected - Unicode?\n+            ('---Hello---', 'hello', False),\n+            ('___Hello___', 'hello', False),\n+            ('__Hello--World--', 'hello-world', False),\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('_', '', False),\n+            ('-', '', False),\n+            ('__foo__', 'foo', False),\n+            ('--bar--', 'bar', False),\n+            ('_ -strip-mixed-value _-', 'strip-mixed-value', False),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..2c8796c 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,3 +1,4 @@\n+\n import operator\n \n from django.db import DatabaseError, NotSupportedError, connection\n@@ -86,7 +87,23 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.difference(qs2).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_empty_qs(self):\n+    def test_union_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        # Ensuring that calling none() on a unioned queryset results in an empty result.\n+        self.assertSequenceEqual(qs3.none(), [])\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n+\n+    def test_combined_queryset_none_behavior(self):\n+        qs1 = Number.objects.filter(num__lte=3)\n+        qs2 = Number.objects.filter(num__gte=7)\n+        union_qs = qs1.union(qs2)\n+        none_qs = union_qs.none()\n+        # Expecting no results when none() is called on a combined queryset.\n+        self.assertQuerysetEqual(none_qs, [])\n+        # Ensure that original union queryset is unaffected by calling none().\n+        self.assertNumbersEqual(union_qs, [0, 1, 2, 3, 7, 8, 9], ordered=False)\n         qs1 = Number.objects.all()\n         qs2 = Number.objects.none()\n         qs3 = Number.objects.filter(pk__in=[])\n@@ -313,4 +330,4 @@ class QuerySetSetOperationTests(TestCase):\n                         NotSupportedError,\n                         msg % (operation, combinator),\n                     ):\n-                        getattr(getattr(qs, combinator)(qs), operation)()\n+                        getattr(getattr(qs, combinator)(qs), operation)()\n",
  "django__django-13230": "",
  "django__django-13315": "",
  "django__django-13321": "",
  "django__django-13401": "diff --git a/tests/model_inheritance/test_abstract_inheritance.py b/tests/model_inheritance/test_abstract_inheritance.py\nindex 536c423..1d9544b 100644\n--- a/tests/model_inheritance/test_abstract_inheritance.py\n+++ b/tests/model_inheritance/test_abstract_inheritance.py\n@@ -9,9 +9,43 @@ from django.test import SimpleTestCase\n from django.test.utils import isolate_apps\n \n \n-@isolate_apps('model_inheritance')\n+import pickle\n+from django.db import models\n+from django.test import SimpleTestCase\n+from django.test.utils import isolate_apps\n class AbstractInheritanceTests(SimpleTestCase):\n-    def test_single_parent(self):\n+    def test_abstract_inherited_fields_equality(self):\n+        \"\"\"Field instances from different models are not equal, even if inherited from the same abstract base.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Test that fields from different models are not equal\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        # Test that fields from different models have different hash values\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+        # Test that fields from different models are ordered by creation_counter\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n         class AbstractBase(models.Model):\n             name = models.CharField(max_length=30)\n \n@@ -347,4 +381,4 @@ class AbstractInheritanceTests(SimpleTestCase):\n                 ('age', models.SmallIntegerField), ('concretemodel2_ptr', models.OneToOneField),\n                 ('name', models.CharField),\n             ]\n-        )\n+        )\n",
  "django__django-13447": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..892bdd6 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,7 +1,9 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n-from django.contrib.auth.models import User\n+from django.contrib.auth.models import User, AbstractBaseUser\n+from .models import CustomEmailField\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n from django.test.utils import ignore_warnings\n@@ -37,7 +39,33 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_email_change_invalidates_token(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        user = User.objects.create_user('changeemailuser', 'foo@example.com', 'testpw')\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertTrue(p0.check_token(user, tk1))\n+        \n+        # Change the email and save the user\n+        user.email = 'newfoo@example.com'\n+        user.save()\n+        \n+        # The token should be invalid after email change\n+        self.assertFalse(p0.check_token(user, tk1))\n+\n+    def test_no_email_does_not_crash(self):\n+        \"\"\"Users without an email should not cause token generation to crash.\"\"\"\n+        user = AbstractBaseUser()\n+        # AbstractBaseUser requires additional attributes for full functionality\n+        user.username = 'noemailuser'\n+        user.set_password('testpw')\n+        # Simulate saving user without email\n+        user.email = None\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        \n+        # Ensure token can be generated and validated (would always be false since user isn't fully saved)\n+        self.assertFalse(p0.check_token(user, tk1))\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13590": "",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..5040f98 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,18 +19,63 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_empty_sysargv(self):\n+        \"\"\"\n+        Verify behavior when sys.argv is empty and argv is provided to\n+        execute_from_command_line.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', []):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_none_sysargv(self):\n+        \"\"\"\n+        Verify behavior when sys.argv[0] is None and argv is provided to\n+        execute_from_command_line.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['custom-prog-name'] + args)\n+        self.assertIn('usage: custom-prog-name shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..e5e795f 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -7,8 +8,44 @@ from django.core.management import CommandError, call_command\n from django.test import SimpleTestCase\n from django.test.utils import captured_stdin, captured_stdout\n \n+from django import __version__ as django_version\n \n class ShellCommandTestCase(SimpleTestCase):\n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), django_version)\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(sys.platform == 'win32', \"Windows select() doesn't support file descriptors.\")\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), django_version)\n \n     def test_command_option(self):\n         with self.assertLogs('test', 'INFO') as cm:\n@@ -49,4 +86,4 @@ class ShellCommandTestCase(SimpleTestCase):\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..3ee0039 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -1013,7 +1013,51 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertContains(response, 'Add another Model with both - name')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n \n-    def test_both_verbose_names_inline(self):\n+    def test_default_verbose_name_plural(self):\n+        # Test that verbose_name_plural defaults to verbose_name + 's' if not specified\n+\n+        class DefaultVerboseNameInline(TabularInline):\n+            model = Profile\n+            verbose_name = 'Default verbose child'\n+\n+        class BothSpecifiedInline(TabularInline):\n+            model = VerboseNameProfile\n+            verbose_name = 'Child with verbose name'\n+            verbose_name_plural = 'Children with verbose name'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [\n+            DefaultVerboseNameInline,\n+            BothSpecifiedInline,\n+        ]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        # Default verbose name inline\n+        self.assertContains(response, '<h2>Default verbose childs</h2>')\n+        self.assertContains(response, 'Add another Default verbose child')\n+        # Both specified inline\n+        self.assertContains(response, '<h2>Children with verbose name</h2>')\n+        self.assertContains(response, 'Add another Child with verbose name')\n+\n+    def test_inheritance_of_verbose_names(self):\n+        # Test handling when only verbose_name is provided and should be inherited\n+\n+        class InheritedVerboseNameInline(TabularInline):\n+            model = VerboseNameProfile\n+            verbose_name = 'Inherited child'\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [InheritedVerboseNameInline]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+        self.assertContains(response, '<h2>Inherited childs</h2>')\n+        self.assertContains(response, 'Add another Inherited child')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name = 'Non-verbose childs - name'\n",
  "django__django-13757": "",
  "django__django-13768": "diff --git a/tests/dispatch/tests.py b/tests/dispatch/tests.py\nindex b1feefd..e2da8d4 100644\n--- a/tests/dispatch/tests.py\n+++ b/tests/dispatch/tests.py\n@@ -165,12 +165,44 @@ class DispatcherTests(SimpleTestCase):\n         def fails(val, **kwargs):\n             raise ValueError('this')\n         a_signal.connect(fails)\n-        result = a_signal.send_robust(sender=self, val=\"test\")\n+        with self.assertLogs('django.dispatch', 'ERROR') as cm:\n+            result = a_signal.send_robust(sender=self, val=\"test\")\n         err = result[0][1]\n         self.assertIsInstance(err, ValueError)\n         self.assertEqual(err.args, ('this',))\n         self.assertTrue(hasattr(err, '__traceback__'))\n         self.assertIsInstance(err.__traceback__, TracebackType)\n+        \n+        log_record = cm.records[0]\n+        self.assertEqual(\n+            log_record.getMessage(),\n+            f\"Error calling {fails} in Signal.send_robust() (this)\"\n+        )\n+        self.assertIsNotNone(log_record.exc_info)\n+        _, exc_value, _ = log_record.exc_info\n+        self.assertIsInstance(exc_value, ValueError)\n+        self.assertEqual(str(exc_value), 'this')\n+\n+        a_signal.disconnect(fails)\n+\n+    def test_send_robust_logging(self):\n+        def fails(val, **kwargs):\n+            raise KeyError('missing_key')\n+        \n+        a_signal.connect(fails)\n+        with self.assertLogs('django.dispatch', level='ERROR') as cm:\n+            a_signal.send_robust(sender=self, val='test')\n+        \n+        log_record = cm.records[0]\n+        self.assertEqual(\n+            log_record.getMessage(),\n+            f\"Error calling {fails} in Signal.send_robust() (missing_key)\"\n+        )\n+        self.assertIsNotNone(log_record.exc_info)\n+        _, exc_value, _ = log_record.exc_info\n+        self.assertIsInstance(exc_value, KeyError)\n+        self.assertEqual(str(exc_value), 'missing_key')\n+\n         a_signal.disconnect(fails)\n         self.assertTestIsClean(a_signal)\n \n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..7efed3f 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,6 +281,20 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+    def test_modelchoicefield_value_placeholder(self):\n+        # Ensure ModelChoiceField raises ValidationError with the value of the invalid choice\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n+\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n     def test_modelchoicefield(self):\n@@ -307,4 +321,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..9c577c6 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -11,6 +12,8 @@ from .models import (\n     First, Parent, Record, Relation, Reporter, School, Student, Third,\n     ToFieldChild,\n )\n+from django.db import models, transaction\n+from .models import ParentStringPrimaryKey, ChildStringPrimaryKeyParent\n \n \n class ManyToOneTests(TestCase):\n@@ -549,7 +552,26 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child_before_assign(self):\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey(name='jeff')\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            parent.save()\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child_after_assign(self):\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey()\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            child.parent.name = 'jeff'\n+            parent.save()\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, parent.name)\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..5b98f37 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,9 +1,21 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n+from django.test import SimpleTestCase\n \n \n class QTests(SimpleTestCase):\n-    def test_combine_and_empty(self):\n+    def test_unpickleable_with_and_operator(self):\n+        # Test that Q objects with unpickleable types like dict_keys work with &\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+\n+    def test_unpickleable_with_or_operator(self):\n+        # Test that Q objects with unpickleable types like dict_keys work with |\n+        q = Q(x__in={}.keys())\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n         q = Q(x=1)\n         self.assertEqual(q & Q(), q)\n         self.assertEqual(Q() & q, q)\n",
  "django__django-14017": "",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..767b274 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1137,7 +1137,25 @@ class ResolverMatchTests(SimpleTestCase):\n         request = HttpRequest()\n         self.assertIsNone(request.resolver_match)\n \n-    def test_repr(self):\n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_functools_partial(self):\n+        tests = [\n+            ('partial', 'template.html'),\n+            ('partial_nested', 'nested_partial.html'),\n+            ('partial_wrapped', 'template.html'),\n+        ]\n+        for name, template_name in tests:\n+            with self.subTest(name=name):\n+                func = (\n+                    f\"functools.partial({views.empty_view!r}, \"\n+                    f\"template_name='{template_name}')\"\n+                )\n+                self.assertEqual(\n+                    repr(resolve(f'/{name}/')),\n+                    f\"ResolverMatch(func={func}, args=(), kwargs={{}}, \"\n+                    f\"url_name='{name}', app_names=[], namespaces=[], \"\n+                    f\"route='{name}/')\",\n+                )\n         self.assertEqual(\n             repr(resolve('/no_kwargs/42/37/')),\n             \"ResolverMatch(func=urlpatterns_reverse.views.empty_view, \"\n@@ -1146,6 +1164,12 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+from django.urls import resolve\n+from django.test import SimpleTestCase\n+from django.test.utils import override_settings\n+import urlpatterns_reverse.views as views\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..b6ea61a 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -66,7 +67,16 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +92,16 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..7c1df25 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2217,6 +2217,24 @@ class StartApp(AdminScriptTestCase):\n             \"won't replace conflicting files.\"\n         )\n \n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app1')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app1', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n+    def test_trailing_slash_on_nonexistent_directory(self):\n+        \"\"\"\n+        Test that providing a nonexistent directory with a trailing slash correctly raises an error.\n+        \"\"\"\n+        non_existent_dir = os.path.join(self.test_dir, 'nonexistent_dir/')\n+        _, err = self.run_django_admin(['startapp', 'app', non_existent_dir])\n+        self.assertOutput(\n+            err,\n+            \"CommandError: Destination directory '%s' does not exist, please create it first.\" % non_existent_dir.rstrip('/')\n+        )\n+\n     def test_template(self):\n         out, err = self.run_django_admin(['startapp', 'new_app'])\n         self.assertNoOutput(err)\n",
  "django__django-14411": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 331338c..8b201c1 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,6 +1,7 @@\n import datetime\n import re\n from unittest import mock\n+from django.forms import forms\n \n from django.contrib.auth.forms import (\n     AdminPasswordChangeForm, AuthenticationForm, PasswordChangeForm,\n@@ -1020,6 +1021,21 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_password_hash_widget_label(self):\n+        \"\"\"\n+        Test that the label for ReadOnlyPasswordHashWidget does not have a 'for' attribute\n+        since it doesn't render a labelable element.\n+        \"\"\"\n+        class TestForm(forms.Form):\n+            hash_field = ReadOnlyPasswordHashField()\n+\n+        bound_field = TestForm()['hash_field']\n+        self.assertEqual(bound_field.field.widget.id_for_label('id'), None)\n+        label_html = bound_field.label_tag()\n+        self.assertIn('<label>', label_html)\n+        self.assertNotIn('for=', label_html)\n+        self.assertIn('Hash field', label_html)\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertIs(field.disabled, True)\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..1906052 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -655,6 +655,37 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(result.args, value.args)\n         self.assertEqual(result.keywords, value.keywords)\n \n+    def test_missing_import_in_migration(self):\n+        \"\"\"\n+        Test to check if the migration generated for a complex model setup \n+        with mixins and base classes imports all necessary modules.\n+        \"\"\"\n+        from django.db import models\n+        from django.db.migrations.writer import MigrationWriter\n+\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+\n+        # Simulate the creation of a migration file\n+        writer = MigrationWriter(None)\n+        serialized = writer.serialize(MyModel)\n+        \n+        # The expected correct import statement that should be in the migration\n+        expected_import = \"from django.db import models\"\n+\n+        # Check if the import statement is present in the serialized migration\n+        self.assertIn(expected_import, serialized)\n+\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..40194f3 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -336,7 +336,15 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        self.assertEqual(\n+            formset.non_form_errors(), \n+            ['Please submit at most 1 form.']\n+        )\n+        # Check that the nonform CSS class is applied\n+        self.assertEqual(\n+            str(formset.non_form_errors(as_text=False)),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>',\n+        )\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -358,7 +366,15 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        self.assertEqual(\n+            formset.non_form_errors(), \n+            ['Please submit at least 3 forms.']\n+        )\n+        # Check that the nonform CSS class is applied\n+        self.assertEqual(\n+            str(formset.non_form_errors(as_text=False)),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>',\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -982,7 +998,15 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        self.assertEqual(\n+            formset.non_form_errors(), \n+            ['You may only specify a drink once.']\n+        )\n+        # Check that the nonform CSS class is applied\n+        self.assertEqual(\n+            str(formset.non_form_errors(as_text=False)),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>',\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..0ebe509 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -31,6 +31,18 @@ class M2mThroughTests(TestCase):\n             attrgetter(\"name\")\n         )\n \n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        # Retrieve the reverse M2M field from Person model\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        self.assertEqual(reverse_m2m.through_fields, ['event', 'invitee'])\n+        \n+        # Retrieve the same field from the inherited PersonChild model\n+        inherited_reverse_m2m = PersonChild._meta.get_field('events_invited')\n+        self.assertEqual(inherited_reverse_m2m.through_fields, ['event', 'invitee'])\n+        \n+        # Ensure both have the same hash value confirming hashability\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n+\n     def test_get_on_intermediate_model(self):\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..62ef762 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -294,6 +294,49 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n         })\n \n \n+import json\n+from django.test import RequestFactory, TestCase\n+from django.urls import reverse\n+from django.contrib.auth.models import User\n+from .models import Question\n+from .admin import QuestionAdmin\n+from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n+\n+class AutocompleteJsonViewTests(TestCase):\n+    def setUp(self):\n+        self.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com'\n+        )\n+        self.factory = RequestFactory()\n+        self.url = reverse('admin:autocomplete')\n+        self.opts = {'app_label': 'app', 'model': 'model'}\n+        self.as_view_args = {'admin_site': AdminSite()}\n+\n+    def test_autocomplete_with_extra_fields(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'notes': obj.notes,\n+                }\n+\n+        Question.objects.create(question='Question 1', notes='Note 1')\n+        Question.objects.create(question='Question 2', notes='Note 2')\n+\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'notes': q.notes}\n+                for q in Question.objects.order_by('question')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n @override_settings(ROOT_URLCONF='admin_views.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n     available_apps = ['admin_views'] + AdminSeleniumTestCase.available_apps\n",
  "django__django-14787": "",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..5d56ab5 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,42 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        c1 = Category.objects.create(name='Test Category 1')\n+        c2 = Category.objects.create(name='Test Category 2')\n+\n+        value_1 = ModelChoiceIteratorValue(c1.pk, c1)\n+        value_2 = ModelChoiceIteratorValue(c2.pk, c2)\n+\n+        # Check that value_1 is hashable and equals another value with same pk\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(c1.pk, None)))\n+        # Check that value_1 is not equal to value_2\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_model_choice_iterator_value_in_dict(self):\n+        c1 = Category.objects.create(name='Test Category 1')\n+        c2 = Category.objects.create(name='Test Category 2')\n+\n+        value_1 = ModelChoiceIteratorValue(c1.pk, c1)\n+        value_2 = ModelChoiceIteratorValue(c2.pk, c2)\n+\n+        # Ensure ModelChoiceIteratorValue instances can be used as keys in a dictionary\n+        test_dict = {value_1: 'value 1', value_2: 'value 2'}\n+        self.assertIn(value_1, test_dict)\n+        self.assertIn(value_2, test_dict)\n+        self.assertEqual(test_dict[value_1], 'value 1')\n+        self.assertEqual(test_dict[value_2], 'value 2')\n+\n+    def test_model_choice_iterator_value_in_set(self):\n+        c1 = Category.objects.create(name='Test Category 1')\n+        c2 = Category.objects.create(name='Test Category 2')\n+\n+        value_1 = ModelChoiceIteratorValue(c1.pk, c1)\n+        value_3 = ModelChoiceIteratorValue(c1.pk, None)  # Different instance but same pk as value_1\n+\n+        # Ensure ModelChoiceIteratorValue instances can be added to a set\n+        test_set = {value_1, value_3}\n+        self.assertEqual(len(test_set), 1)  # value_1 and value_3 should be considered equal\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "",
  "django__django-15061": "",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..4bf2688 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -91,7 +91,9 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             'http://inv-.-alid.com',\n             '[a',\n             'http://[a',\n-            # Non-string.\n+            # Test case for issue: URLField throws ValueError instead of ValidationError on clean\n+            '////]@N.AN',\n+            '#@A.bO',\n             23,\n             # Hangs \"forever\" before fixing a catastrophic backtracking,\n             # see #11198.\n@@ -101,6 +103,7 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # the regex.\n             'http://%s' % (\"X\" * 200,),\n         ]\n+        # The expected error message for invalid URLs\n         msg = \"'Enter a valid URL.'\"\n         for value in tests:\n             with self.subTest(value=value):\n",
  "django__django-15213": "",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..09cec7a 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -163,7 +164,30 @@ class CookieTests(BaseTests, SimpleTestCase):\n         decoded_messages = json.loads(value, cls=MessageDecoder)\n         self.assertEqual(messages, decoded_messages)\n \n-    def test_safedata(self):\n+    def test_extra_tags_serialization(self):\n+        \"\"\"\n+        Test that the extra_tags attribute is correctly preserved through\n+        the serialization/deserialization process, especially when it is an empty string.\n+        \"\"\"\n+        storage = self.get_storage()\n+\n+        # Scenario 1: extra_tags is an empty string\n+        message = Message(constants.DEBUG, 'Test message', extra_tags='')\n+        encoded = storage._encode(message)\n+        decoded = storage._decode(encoded)\n+        self.assertEqual(decoded.extra_tags, '')\n+\n+        # Scenario 2: extra_tags is None\n+        message = Message(constants.DEBUG, 'Test message', extra_tags=None)\n+        encoded = storage._encode(message)\n+        decoded = storage._decode(encoded)\n+        self.assertIsNone(decoded.extra_tags)\n+\n+        # Scenario 3: extra_tags is a non-empty string\n+        message = Message(constants.DEBUG, 'Test message', extra_tags='tag1 tag2')\n+        encoded = storage._encode(message)\n+        decoded = storage._decode(encoded)\n+        self.assertEqual(decoded.extra_tags, 'tag1 tag2')\n         \"\"\"\n         A message containing SafeData is keeping its safe status when\n         retrieved from the message storage.\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..b54feac 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -1,5 +1,7 @@\n from pathlib import Path\n from unittest import mock\n+from pathlib import Path\n+from django.test import override_settings\n \n from django.template import autoreload\n from django.test import SimpleTestCase, override_settings\n@@ -50,7 +52,23 @@ class TemplateReloadTests(SimpleTestCase):\n             ]\n         )\n \n-    def test_get_template_directories(self):\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [str(ROOT)],  # Simulating adding BASE_DIR to DIRS\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    def test_dev_server_restart_issue_with_base_dir_in_templates_dirs(self, mock_reset):\n+        \"\"\"\n+        Test if adding BASE_DIR to TEMPLATES[0]['DIRS'] causes dev server restart issue.\n+        This simulates the presence of BASE_DIR in the DIRS list.\n+        \"\"\"\n+        file_path = ROOT / 'dummy.txt'  # Simulate a file change\n+        # Simulate template_changed function call with the file path\n+        self.assertIsNone(autoreload.template_changed(None, file_path))\n+        # Check that reset_loaders was not called, indicating no restart\n+        mock_reset.assert_not_called()\n         self.assertSetEqual(\n             autoreload.get_template_directories(),\n             {\n",
  "django__django-15400": "diff --git a/tests/utils_tests/test_lazyobject.py b/tests/utils_tests/test_lazyobject.py\nindex f0097c4..6e4d7ac 100644\n--- a/tests/utils_tests/test_lazyobject.py\n+++ b/tests/utils_tests/test_lazyobject.py\n@@ -297,6 +297,31 @@ class LazyObjectTestCase(TestCase):\n         self.assertIs(obj._wrapped, empty)\n         self.assertIs(obj2._wrapped, empty)\n \n+    def test_radd_with_different_types(self):\n+        obj_str = self.lazy_wrap(\"lazy\")\n+        self.assertEqual(\"hello \" + obj_str, \"hello lazy\")\n+\n+        obj_list = self.lazy_wrap([1, 2, 3])\n+        self.assertEqual([0] + obj_list, [0, 1, 2, 3])\n+\n+    def test_radd_with_objects(self):\n+        class CustomNumber:\n+            def __init__(self, value):\n+                self.value = value\n+\n+            def __add__(self, other):\n+                if isinstance(other, CustomNumber):\n+                    return CustomNumber(self.value + other.value)\n+                return NotImplemented\n+\n+            def __eq__(self, other):\n+                if isinstance(other, CustomNumber):\n+                    return self.value == other.value\n+                return NotImplemented\n+\n+        obj_custom = self.lazy_wrap(CustomNumber(5))\n+        self.assertEqual(CustomNumber(10) + obj_custom, CustomNumber(15))\n+\n \n class SimpleLazyObjectTestCase(LazyObjectTestCase):\n     # By inheriting from LazyObjectTestCase and redefining the lazy_wrap()\n",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..2dbda1b 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -184,7 +185,29 @@ class StaticHelperTest(StaticTests):\n \n \n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        If-Modified-Since header with an empty string should not raise an exception.\n+        \"\"\"\n+        try:\n+            result = was_modified_since(header=\"\", mtime=1)\n+            self.assertTrue(result)\n+        except Exception as e:\n+            self.fail(f\"was_modified_since raised an exception with an empty string header: {e}\")\n+\n+    def test_was_modified_since_invalid_date(self):\n+        \"\"\"\n+        If-Modified-Since header with invalid date string should not raise an exception and return True.\n+        \"\"\"\n+        result = was_modified_since(header=\"invalid-date\", mtime=1)\n+        self.assertTrue(result)\n+\n+    def test_was_modified_since_no_header(self):\n+        \"\"\"\n+        If-Modified-Since header not present should return True.\n+        \"\"\"\n+        result = was_modified_since(header=None, mtime=1)\n+        self.assertTrue(result)\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..135ad1e 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,5 +1,8 @@\n+\n import os\n from io import StringIO\n+from argparse import ArgumentDefaultsHelpFormatter\n+from io import StringIO\n from unittest import mock\n \n from admin_scripts.tests import AdminScriptTestCase\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..e392186 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,5 +1,8 @@\n+\n import os\n from datetime import datetime\n+import json\n+from django.core.serializers.json import DjangoJSONEncoder\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n@@ -217,7 +220,33 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return '{\"hello\": \"world\"}'\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"hello\": \"world\"}</script>',\n+        )\n+\n+    def test_json_script_default_encoder(self):\n+        data = {\"key\": \"value\"}\n+        expected = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+        self.assertHTMLEqual(json_script(data), expected)\n+\n+    def test_json_script_custom_encoder_with_data(self):\n+        class CustomEncoder(json.JSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, datetime):\n+                    return obj.strftime(\"%Y-%m-%d %H:%M:%S\")\n+                return super().default(obj)\n+\n+        data = {\"time\": datetime(2023, 10, 1, 12, 0, 0)}\n+        expected = (\n+            '<script type=\"application/json\">{\"time\": \"2023-10-01 12:00:00\"}</script>'\n+        )\n+        self.assertHTMLEqual(json_script(data, encoder=CustomEncoder), expected)\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..95b7f83 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -142,6 +142,44 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             [self.error_same_tags],\n         )\n \n+    def test_template_with_no_conflicting_tags(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"unique_tags\", \"unique_app1.templatetags.unique_tags\"\n+                ),\n+                self.get_settings(\n+                    \"different_tags\", \"unique_app2.templatetags.different_tags\"\n+                ),\n+            ]\n+        ):\n+            self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+\n+    def test_template_with_conflicting_tags(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"conflict_tags\", \"conflict_app1.templatetags.conflict_tags\"\n+                ),\n+                self.get_settings(\n+                    \"conflict_tags\", \"conflict_app2.templatetags.different_conflict_tags\"\n+                ),\n+            ]\n+        ):\n+            expected_error = [\n+                Error(\n+                    E003.msg.format(\n+                        \"'conflict_tags'\",\n+                        \"'check_framework.template_test_apps.conflict_app1.templatetags.conflict_tags', \"\n+                        \"'check_framework.template_test_apps.conflict_app2.templatetags.different_conflict_tags'\",\n+                    ),\n+                    id=E003.id,\n+                )\n+            ]\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None), expected_error\n+            )\n+\n     def test_template_tags_with_same_library_name(self):\n         with self.settings(\n             TEMPLATES=[\n@@ -206,4 +244,4 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n         ]\n     )\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..95e6df0 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -399,7 +399,19 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n+from django.test import TestCase, override_settings\n+from .models import ProxyCustomModel, AnotherModel\n+\n+class ProxyModelSelectRelatedOnlyTests(TestCase):\n+    def setUp(self):\n+        self.custom_model = ProxyCustomModel.objects.create(name=\"Test Name\")\n+        self.another_model = AnotherModel.objects.create(custom=self.custom_model)\n+\n+    def test_select_related_only_proxy_model(self):\n+        # This test specifically targets the issue described where 'select_related' and 'only' are used together with a proxy model.\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.get()\n+        self.assertEqual(result.custom.name, \"Test Name\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..5287bca 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,6 +157,13 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_additional_parameters_before_dbname(self):\n+        # This test ensures that additional parameters are placed before the dbname.\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT * FROM some_table;\"]),\n+            ([\"psql\", \"-c\", \"SELECT * FROM some_table;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n@@ -183,4 +190,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..dbd9648 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1900,13 +1900,22 @@ class AllValidTests(SimpleTestCase):\n \n class DeprecationTests(SimpleTestCase):\n     def test_warning(self):\n+        import warnings\n         from django.forms.utils import DEFAULT_TEMPLATE_DEPRECATION_MSG\n+        from django.forms.formsets import formset_factory, BaseFormSet\n+        from myapp.forms import Choice  # Assuming Choice is defined in your app's forms\n \n-        with isolate_lru_cache(get_default_renderer), self.settings(\n-            FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n-        ), self.assertRaisesMessage(\n-            RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG\n-        ):\n-            ChoiceFormSet = formset_factory(Choice)\n-            formset = ChoiceFormSet()\n-            str(formset)\n+        def test_no_management_form_warning(self):\n+            \"\"\"\n+            Management forms should not raise a deprecation warning.\n+            \"\"\"\n+            with isolate_lru_cache(get_default_renderer), self.settings(\n+                FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n+            ):\n+                ChoiceFormSet = formset_factory(Choice, formset=BaseFormSet)\n+                formset = ChoiceFormSet()\n+                with warnings.catch_warnings(record=True) as w:\n+                    warnings.simplefilter(\"always\")\n+                    str(formset.management_form)\n+                    # Ensure no warnings were raised\n+                    self.assertEqual(len(w), 0)\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..4d90c68 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -179,7 +179,15 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertTrue(hasattr(formset.empty_form, \"custom_kwarg\"))\n         self.assertEqual(formset.empty_form.custom_kwarg, 1)\n \n-    def test_formset_validation(self):\n+    def test_empty_permitted_ignored_empty_form_true(self):\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": True})\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n+\n+    def test_empty_permitted_ignored_empty_form_false(self):\n+        FormSet = formset_factory(CustomKwargForm)\n+        formset = FormSet(form_kwargs={\"empty_permitted\": False})\n+        self.assertIs(formset.empty_form.empty_permitted, True)\n         # FormSet instances can also have an error attribute if validation failed for\n         # any of the forms.\n         formset = self.make_choiceformset([(\"Calexico\", \"\")])\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..fe6f2e9 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,11 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_null_and_empty_string(self):\n+        # Test with empty string\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        # Test with None\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..658a33a 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,4 +1,5 @@\n-import datetime\n+\n+import urllib.parse\n import re\n from unittest import mock\n \n@@ -24,7 +25,7 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n-from django.utils.translation import gettext as _\n+from django.urls import reverse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -892,6 +893,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..b0975bc 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -508,6 +508,62 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n+from django.test import TestCase\n+from django.contrib.sitemaps import Sitemap\n+from django.urls import path\n+from datetime import datetime\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class NonCallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+    lastmod = datetime(2023, 10, 5)\n+\n+    def items(self):\n+        return []\n+\n+class TestSitemapIssues(TestCase):\n+    def test_callable_lastmod_no_items(self):\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", response)\n+        expected_content = (\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            '<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n'\n+            '<sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\\n'\n+            '</sitemapindex>'\n+        )\n+        self.assertXMLEqual(response.content.decode(), expected_content)\n+\n+    def test_non_callable_lastmod_no_items(self):\n+        response = self.client.get(\"/non-callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", response)\n+        expected_content = (\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            '<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n'\n+            '<sitemap><loc>http://example.com/simple/sitemap-non-callable-lastmod.xml</loc></sitemap>\\n'\n+            '</sitemapindex>'\n+        )\n+        self.assertXMLEqual(response.content.decode(), expected_content)\n+\n+non_callable_lastmod_no_items_sitemap = {\n+    \"non-callable-lastmod\": NonCallableLastmodNoItemsSitemap,\n+}\n+\n+urlpatterns += [\n+    path(\n+        \"non-callable-lastmod-no-items/index.xml\",\n+        views.index,\n+        {\"sitemaps\": non_callable_lastmod_no_items_sitemap},\n+    ),\n+]\n+\n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..4e5aa3d 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n@@ -7,6 +8,8 @@ import pickle\n import re\n import shutil\n import sys\n+from unittest import mock\n+import unittest\n import tempfile\n import threading\n import time\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..17c920e 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -6,6 +7,8 @@ from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..952b763 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -26,7 +27,21 @@ class JoinTests(SimpleTestCase):\n         output = self.engine.render_to_string(\"join04\", {\"a\": [\"alpha\", \"beta & me\"]})\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n \n-    # Joining with unsafe joiners doesn't result in unsafe strings.\n+    @setup({\"join_autoescape_off\": '{% autoescape off %}{{ a|join:var }}{% endautoescape %}'})\n+    def test_join_autoescape_off(self):\n+        a = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        var = \"<br/>\"\n+        output = self.engine.render_to_string(\"join_autoescape_off\", {\"a\": a, \"var\": var})\n+        expected_result = \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\"\n+        self.assertEqual(output, expected_result)\n+\n+    @setup({\"join_mixed\": '{% autoescape off %}{{ a|join:var }}{% endautoescape %}'})\n+    def test_join_mixed(self):\n+        a = [\"<p>Test</p>\", mark_safe(\"Safe & Secure\"), \"<script>Alert!</script>\"]\n+        var = \"&\"\n+        output = self.engine.render_to_string(\"join_mixed\", {\"a\": a, \"var\": var})\n+        expected_result = \"<p>Test</p>&Safe & Secure&<script>Alert!</script>\"\n+        self.assertEqual(output, expected_result)\n     @setup({\"join05\": \"{{ a|join:var }}\"})\n     def test_join05(self):\n         output = self.engine.render_to_string(\n@@ -78,4 +93,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..6a63199 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -560,6 +560,16 @@ class BulkCreateTests(TestCase):\n                 update_fields=[\"name\"],\n                 unique_fields=[\"relatedmodel\"],\n             )\n+            # Test for returning IDs after conflict updates\n+            results = TwoFields.objects.bulk_create(\n+                conflicting_objects,\n+                update_conflicts=True,\n+                unique_fields=[\"f1\"],\n+                update_fields=[\"name\"],\n+            )\n+            if connection.features.can_return_rows_from_bulk_insert:\n+                for instance in results:\n+                    self.assertIsNotNone(instance.pk)\n         # Many-to-many relationship.\n         with self.assertRaisesMessage(ValueError, msg):\n             RelatedModel.objects.bulk_create(\n@@ -568,6 +578,16 @@ class BulkCreateTests(TestCase):\n                 update_fields=[\"name\"],\n                 unique_fields=[\"big_auto_fields\"],\n             )\n+            # Test for returning IDs after conflict updates\n+            results = TwoFields.objects.bulk_create(\n+                conflicting_objects,\n+                update_conflicts=True,\n+                unique_fields=[\"f1\"],\n+                update_fields=[\"name\"],\n+            )\n+            if connection.features.can_return_rows_from_bulk_insert:\n+                for instance in results:\n+                    self.assertIsNotNone(instance.pk)\n \n     def _test_update_conflicts_two_fields(self, unique_fields):\n         TwoFields.objects.bulk_create(\n@@ -589,6 +609,12 @@ class BulkCreateTests(TestCase):\n             update_fields=[\"name\"],\n         )\n         self.assertEqual(TwoFields.objects.count(), 2)\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in new_data:\n+                self.assertIsNotNone(instance.pk)\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in conflicting_objects:\n+                self.assertIsNotNone(instance.pk)\n         self.assertCountEqual(\n             TwoFields.objects.values(\"f1\", \"f2\", \"name\"),\n             [\n@@ -634,6 +660,12 @@ class BulkCreateTests(TestCase):\n             update_fields=[\"name\"],\n         )\n         self.assertEqual(TwoFields.objects.count(), 2)\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in new_data:\n+                self.assertIsNotNone(instance.pk)\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in conflicting_objects:\n+                self.assertIsNotNone(instance.pk)\n         self.assertCountEqual(\n             TwoFields.objects.values(\"f1\", \"f2\", \"name\"),\n             [\n@@ -687,6 +719,12 @@ class BulkCreateTests(TestCase):\n             unique_fields=unique_fields,\n         )\n         self.assertEqual(Country.objects.count(), 6)\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in new_data:\n+                self.assertIsNotNone(instance.pk)\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in conflicting_objects:\n+                self.assertIsNotNone(instance.pk)\n         self.assertCountEqual(\n             Country.objects.values(\"iso_two_letter\", \"description\"),\n             [\n@@ -750,6 +788,12 @@ class BulkCreateTests(TestCase):\n             unique_fields=unique_fields,\n         )\n         self.assertEqual(UpsertConflict.objects.count(), 3)\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in new_data:\n+                self.assertIsNotNone(instance.pk)\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in conflicting_objects:\n+                self.assertIsNotNone(instance.pk)\n         self.assertCountEqual(\n             UpsertConflict.objects.values(\"number\", \"rank\", \"name\"),\n             [\n@@ -766,6 +810,12 @@ class BulkCreateTests(TestCase):\n             unique_fields=unique_fields,\n         )\n         self.assertEqual(UpsertConflict.objects.count(), 4)\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in new_data:\n+                self.assertIsNotNone(instance.pk)\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in conflicting_objects:\n+                self.assertIsNotNone(instance.pk)\n         self.assertCountEqual(\n             UpsertConflict.objects.values(\"number\", \"rank\", \"name\"),\n             [\n@@ -810,10 +860,16 @@ class BulkCreateTests(TestCase):\n             update_fields=[\"name\"],\n         )\n         self.assertEqual(FieldsWithDbColumns.objects.count(), 2)\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in new_data:\n+                self.assertIsNotNone(instance.pk)\n+        if connection.features.can_return_rows_from_bulk_insert:\n+            for instance in conflicting_objects:\n+                self.assertIsNotNone(instance.pk)\n         self.assertCountEqual(\n             FieldsWithDbColumns.objects.values(\"rank\", \"name\"),\n             [\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..fcc5bd1 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1105,6 +1105,15 @@ def test_range_slider(orientation):\n     # Check initial value is set correctly\n     assert_allclose(slider.val, (0.1, 0.34))\n \n+    # Test initialization with different valinit values\n+    slider_with_init = widgets.RangeSlider(\n+        ax=ax, label=\"\", valmin=0.0, valmax=1.0, orientation=orientation,\n+        valinit=[0.0, 0.0]\n+    )\n+    assert_allclose(slider_with_init.val, (0.0, 0.0))\n+    box_with_init = slider_with_init.poly.get_extents().transformed(ax.transAxes.inverted())\n+    assert_allclose(box_with_init.get_points().flatten()[idx], [0.0, 0.25, 0.0, 0.75])\n+\n     slider.set_val((0.2, 0.6))\n     assert_allclose(slider.val, (0.2, 0.6))\n     box = slider.poly.get_extents().transformed(ax.transAxes.inverted())\n",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..a6a9d0a 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -20,8 +20,21 @@ import numpy as np\n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_axes_set_visible(fig_test, fig_ref):\n+    # Create a 3D subplot in fig_test and set it to invisible\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.scatter([1], [1], [1])\n+    ax_test.set_visible(False)\n+\n+    # Create an empty figure for comparison\n+    fig_ref.add_subplot(projection='3d')\n \n-def test_aspect_equal_error():\n+def test_3d_axes_set_visible_responsive():\n+    fig, ax = plt.subplots(subplot_kw={'projection': '3d'})\n+    assert fig.canvas.inaxes((200, 200)) is not None\n+    ax.set_visible(False)\n+    assert fig.canvas.inaxes((200, 200)) is None\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..a54f8f9 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -255,6 +255,37 @@ def test_linedash():\n \n     assert buf.tell() > 0\n \n+import io\n+from matplotlib.figure import Figure\n+\n+def test_empty_line():\n+    # Smoke-test for gh#23954 to ensure no error with empty lines in text\n+    figure = Figure()\n+    figure.text(0.5, 0.5, \"\\nfoo\\n\\n\")  # Test with a text object\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n+    assert buf.tell() > 0  # Ensure something was written\n+\n+def test_annotate_with_empty_line():\n+    # Test annotation with an empty line\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.annotate(text='\\nLower label', xy=(0, 0))  # Annotation with empty line\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n+    assert buf.tell() > 0  # Ensure something was written\n+\n+def test_title_with_empty_line():\n+    # Test title with an empty line\n+    figure = Figure()\n+    ax = figure.add_subplot(111)\n+    ax.set_title('\\nLower title')  # Title with empty line\n+    buf = io.BytesIO()\n+    figure.savefig(buf, format='eps')\n+    figure.savefig(buf, format='ps')\n+    assert buf.tell() > 0  # Ensure something was written\n \n def test_no_duplicate_definition():\n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..4200fee 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -655,4 +655,19 @@ def test_compressed1():\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+\n+import pytest\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+def test_no_warning_with_constrained_layout_false():\n+    a = np.linspace(0, 2 * np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=False)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+    with pytest.warns(None) as record:\n+        plt.subplots_adjust(wspace=0)\n+    assert len(record) == 0, f\"Unexpected warnings: {record}\"\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..8e16093 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -30,6 +30,18 @@ def test_create_lookup_table(N, result):\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n \n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+from numpy.testing import assert_array_equal\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype(dtype):\n+    # We use subtraction in the indexing, so need to verify that uint8 works\n+    cm = mpl.colormaps[\"viridis\"]\n+    assert_array_equal(cm(dtype(0)), cm(0))\n+\n def test_resampled():\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..c5324de 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,6 +90,29 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+def test_pickle_figure_with_draggable_legend():\n+    import pickletools\n+\n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+\n+    ax.plot(time, speed, label=\"speed\")\n+\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Ensure that 'FigureCanvasAgg' is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    # Load the pickled figure to ensure it can be unpickled without error\n+    loaded_fig = pickle.loads(pkl)\n+    plt.close(loaded_fig)\n+\n \n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..804f84b 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -90,7 +90,31 @@ def _generate_complete_test_figure(fig_ref):\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n \n-@mpl.style.context(\"default\")\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Use align_labels and ensure pickling works\n+    fig.align_labels()\n+    \n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        unpickled_fig = pickle.loads(pickle_data)\n+        unpickled_fig.canvas.draw()  # Ensure it can be drawn\n+    except Exception as e:\n+        pytest.fail(f\"Pickling failed with exception: {e}\")\n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n+\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 204af9c..5651c9f 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -449,4 +449,33 @@ def test_paddedbox():\n     ta = TextArea(\"foobar\")\n     pb = PaddedBox(ta, pad=15, draw_frame=True)\n     ab = AnchoredOffsetbox('lower right', child=pb)\n-    ax.add_artist(ab)\n+    ax.add_artist(ab)\n+\n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import mplcursors\n+\n+@pytest.mark.parametrize(\"backend\", [\"QtAgg\"])\n+def test_mplcursor_matplotlib_combination(backend):\n+    plt.switch_backend(backend)\n+    x = np.arange(1, 11)\n+    y1 = x\n+    fig, ax = plt.subplots()\n+    scatter = ax.scatter(x, y1)\n+    cursor = mplcursors.cursor(scatter)\n+    fig.canvas.draw()\n+    \n+    # Simulate clicking on a few points to ensure no error occurs.\n+    for _ in range(5):\n+        xclick, yclick = np.random.choice(x), np.random.choice(y1)\n+        event = MouseEvent(\n+            name=\"button_press_event\",\n+            canvas=fig.canvas,\n+            x=xclick,\n+            y=yclick,\n+            button=1,\n+        )\n+        cursor._on_click(event)\n+    plt.close(fig)\n+    ax.add_artist(ab)\n",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..70d2f8f 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,9 +1,11 @@\n \n+\n import numpy as np\n import pandas as pd\n \n import pytest\n from numpy.testing import assert_array_equal, assert_array_almost_equal\n+from pandas.testing import assert_frame_equal\n \n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n",
  "mwaskom__seaborn-3190": "diff --git a/tests/_core/test_scales.py b/tests/_core/test_scales.py\nindex 72a27ec..6cd07e7 100644\n--- a/tests/_core/test_scales.py\n+++ b/tests/_core/test_scales.py\n@@ -83,6 +83,28 @@ class TestContinuous:\n         s = Continuous(norm=(3, 7))._setup(x, IntervalProperty())\n         assert_array_equal(s(x), [-.5, 0, 1.5])\n \n+    def test_interval_with_bools(self):\n+        import pandas as pd\n+        from seaborn._core.scales import Continuous\n+        from seaborn._core.properties import IntervalProperty\n+        from numpy.testing import assert_array_equal\n+\n+        x = pd.Series([True, False, False])\n+        s = Continuous()._setup(x, IntervalProperty())\n+        assert_array_equal(s(x), [1, 0, 0])\n+\n+    def test_color_mapping_with_bools(self):\n+        import pandas as pd\n+        from seaborn._core.scales import Continuous\n+        from seaborn._core.properties import Color\n+        from seaborn.palettes import color_palette\n+        from numpy.testing import assert_array_equal\n+\n+        x = pd.Series([True, False, True])\n+        cmap = color_palette(\"viridis\", as_cmap=True)\n+        s = Continuous(\"viridis\")._setup(x, Color())\n+        assert_array_equal(s(x), cmap([1, 0, 1])[:, :3])  # Ensure the color mapping matches the boolean input\n+\n     def test_interval_with_range_norm_and_transform(self, x):\n \n         x = pd.Series([1, 10, 100])\n",
  "mwaskom__seaborn-3407": "diff --git a/tests/test_axisgrid.py b/tests/test_axisgrid.py\nindex b2e4a92..dbe83bc 100644\n--- a/tests/test_axisgrid.py\n+++ b/tests/test_axisgrid.py\n@@ -1314,6 +1314,29 @@ class TestPairGrid:\n         for ax in g.diag_axes:\n             assert len(ax.collections) == n\n \n+    def test_pairplot_column_multiindex(self):\n+\n+        # Create a MultiIndex DataFrame\n+        cols = pd.MultiIndex.from_arrays([[\"x\", \"y\"], [1, 2]])\n+        df = self.df[[\"x\", \"y\"]].set_axis(cols, axis=1)\n+        g = ag.pairplot(df)\n+        assert g.diag_vars == list(cols)\n+\n+    def test_pairplot_multiindex_with_hue(self):\n+        # Test MultiIndex DataFrame with hue\n+        cols = pd.MultiIndex.from_arrays([[\"x\", \"y\", \"z\"], [1, 2, 1]])\n+        df = self.df[[\"x\", \"y\", \"z\"]].set_axis(cols, axis=1)\n+        df[\"hue\"] = self.df[\"a\"]\n+        g = ag.pairplot(df, hue=('hue', ''))\n+        assert g.diag_vars == list(cols)\n+\n+    def test_pairplot_multiindex_different_levels(self):\n+        # Test MultiIndex DataFrame with different levels\n+        cols = pd.MultiIndex.from_arrays([[\"x\", \"y\", \"z\"], [\"level1\", \"level2\", \"level1\"]])\n+        df = self.df[[\"x\", \"y\", \"z\"]].set_axis(cols, axis=1)\n+        g = ag.pairplot(df)\n+        assert g.diag_vars == list(cols)\n+\n     def test_pairplot_reg(self):\n \n         vars = [\"x\", \"y\", \"z\"]\n",
  "pallets__flask-4992": "diff --git a/tests/test_config.py b/tests/test_config.py\nindex 179b09c..8cfbb0d 100644\n--- a/tests/test_config.py\n+++ b/tests/test_config.py\n@@ -1,8 +1,12 @@\n+\n import json\n import os\n import textwrap\n \n import pytest\n+import os\n+import io\n+import textwrap\n \n import flask\n \n",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..1a38cc2 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1655,7 +1655,33 @@ def test_urllib3_retries():\n     with pytest.raises(RetryError):\n         s.get(httpbin('status/500'))\n \n-def test_vendor_aliases():\n+def test_urllib3_decode_error():\n+    import requests\n+    from requests.adapters import HTTPAdapter\n+    from requests.exceptions import HTTPError\n+    from requests.packages.urllib3.exceptions import DecodeError\n+    from unittest.mock import patch, Mock\n+    \n+    # Mock the HTTPAdapter to raise a DecodeError\n+    with patch.object(HTTPAdapter, 'send', side_effect=DecodeError):\n+        s = requests.Session()\n+        s.mount('http://', HTTPAdapter())\n+        with pytest.raises(HTTPError):\n+            s.get('http://example.com')\n+\n+def test_urllib3_timeout_error():\n+    import requests\n+    from requests.adapters import HTTPAdapter\n+    from requests.exceptions import Timeout\n+    from requests.packages.urllib3.exceptions import TimeoutError\n+    from unittest.mock import patch, Mock\n+    \n+    # Mock the HTTPAdapter to raise a TimeoutError\n+    with patch.object(HTTPAdapter, 'send', side_effect=TimeoutError):\n+        s = requests.Session()\n+        s.mount('http://', HTTPAdapter())\n+        with pytest.raises(Timeout):\n+            s.get('http://example.com', timeout=0.01)\n     from requests.packages import urllib3\n     from requests.packages import chardet\n \n@@ -1663,4 +1689,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..6915ce0 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,7 +980,35 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_iter_content_with_decode_unicode_true(self):\n+        \"\"\"\n+        Test that `iter_content` with `decode_unicode=True` returns unicode strings.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'{\"key\": \"value\"}')\n+        r.encoding = 'utf-8'\n+        \n+        chunks = r.iter_content(chunk_size=5, decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"Expected all chunks to be unicode strings\"\n+\n+        # Verify that it actually decodes the JSON correctly when concatenated\n+        result = ''.join(chunks)\n+        assert result == '{\"key\": \"value\"}', f\"Expected JSON content to be decoded, got: {result}\"\n+\n+    def test_iter_content_with_decode_unicode_false(self):\n+        \"\"\"\n+        Test that `iter_content` with `decode_unicode=False` returns bytes.\n+        \"\"\"\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'{\"key\": \"value\"}')\n+        r.encoding = 'utf-8'\n+        \n+        chunks = r.iter_content(chunk_size=5, decode_unicode=False)\n+        assert all(isinstance(chunk, bytes) for chunk in chunks), \"Expected all chunks to be bytes\"\n+\n+        # Verify that it actually matches the original bytes content when concatenated\n+        result = b''.join(chunks)\n+        assert result == b'{\"key\": \"value\"}', f\"Expected bytes content to match, got: {result}\"\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 0ee4333..5cf04fc 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -744,6 +744,57 @@ class RequestsTestSuite(TestSetup, TestBaseMixin, unittest.TestCase):\n             assert 'foo' in response.text\n             assert 'bar' in response.text\n \n+    def test_single_hook_registration(self):\n+        \"\"\"Test registering a single hook function.\"\"\"\n+        def add_baz_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+\n+            args['headers'].update({\n+                'X-Baz': 'baz'\n+            })\n+\n+            return args\n+\n+        hooks = [add_baz_header]\n+        r = requests.models.Request()\n+        r.register_hook('args', hooks)\n+        assert_hooks_are_callable(r.hooks)\n+\n+        r = requests.models.Request(hooks={'args': hooks})\n+        assert_hooks_are_callable(r.hooks)\n+\n+    def test_empty_hooks_registration(self):\n+        \"\"\"Test registering an empty list of hooks.\"\"\"\n+        hooks = []\n+        r = requests.models.Request()\n+        r.register_hook('args', hooks)\n+        assert len(r.hooks['args']) == 0\n+\n+        r = requests.models.Request(hooks={'args': hooks})\n+        assert len(r.hooks['args']) == 0\n+\n+    def test_mixed_type_hooks_registration(self):\n+        \"\"\"Test registering a mix of callable and non-callable in hooks.\"\"\"\n+        def add_qux_header(args):\n+            if not args.get('headers'):\n+                args['headers'] = {}\n+\n+            args['headers'].update({\n+                'X-Qux': 'qux'\n+            })\n+\n+            return args\n+\n+        hooks = [add_qux_header, \"not_callable\"]\n+        r = requests.models.Request()\n+        r.register_hook('args', hooks)\n+\n+        try:\n+            assert_hooks_are_callable(r.hooks)\n+        except AssertionError:\n+            print(\"Non-callable detected in hooks, as expected.\")\n+\n     def test_session_persistent_cookies(self):\n \n         s = requests.session()\n",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..6c4a2a9 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -388,7 +388,7 @@ repr_da = xr.DataArray(\n def test_groupby_repr(obj, dim):\n     actual = repr(obj.groupby(dim))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over %r \" % dim\n+    expected += \", grouped over %r\" % dim\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj[dim])))\n     if dim == \"x\":\n         expected += \"1, 2, 3, 4, 5.\"\n@@ -405,7 +405,7 @@ def test_groupby_repr(obj, dim):\n def test_groupby_repr_datetime(obj):\n     actual = repr(obj.groupby(\"t.month\"))\n     expected = \"%sGroupBy\" % obj.__class__.__name__\n-    expected += \", grouped over 'month' \"\n+    expected += \", grouped over 'month'\"\n     expected += \"\\n%r groups with labels \" % (len(np.unique(obj.t.dt.month)))\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..d3fb447 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -78,6 +78,16 @@ class TestFixme(CheckerTestCase):\n         with self.assertNoMessages():\n             self.checker.process_tokens(_tokenize_str(code))\n \n+    @set_config(notes=[\"???\"])\n+    def test_punctuation_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                # ???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n+\n     @set_config(notes=[\"CODETAG\"])\n     def test_other_present_codetag(self) -> None:\n         code = \"\"\"a = 1\n@@ -119,4 +129,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..bf647e9 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -69,6 +69,7 @@ def test_unknown_option_name(capsys: CaptureFixture) -> None:\n         Run([str(EMPTY_MODULE), \"--unknown-option=yes\"], exit=False)\n     output = capsys.readouterr()\n     assert \"E0015: Unrecognized option found: unknown-option=yes\" in output.out\n+    assert \"Traceback\" not in output.err\n \n \n def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n@@ -77,6 +78,7 @@ def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n         Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n     output = capsys.readouterr()\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n+    assert \"Traceback\" not in output.err\n \n \n def test_unknown_confidence(capsys: CaptureFixture) -> None:\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..d04e519 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1327,6 +1327,25 @@ class TestRunTC:\n                 os.chdir(join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"))\n                 self._runtest(\n                     [\".\", \"--recursive=y\"],\n+                )\n+                \n+    def test_ignore_path_recursive_custom_path(self) -> None:\n+        \"\"\"Tests that a specified path is ignored when running recursively with --ignore-paths\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^subdirectory/.*\",\n+                    ],\n+                    code=0,\n                     code=0,\n                 )\n \n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..bde3626 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -934,6 +934,18 @@ print(submodule1)\n             linter.check([\"submodule2.py\"])\n     assert not linter.stats.by_msg\n \n+def test_lint_identically_named_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for module with the same name as its directory.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"identical/identical.py\", \"identical/b.py\"])\n+        with open(\"identical/identical.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"# This is a test module\")\n+        with open(\"identical/b.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"# Another test module\")\n+        linter.check([\"identical\"])\n+    assert not linter.stats.by_msg\n+\n \n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n@@ -941,4 +953,16 @@ def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+def test_lint_identically_named_module(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for module with the same name as its directory.\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"identical/identical.py\", \"identical/b.py\"])\n+        with open(\"identical/identical.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"# This is a test module\")\n+        with open(\"identical/b.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"# Another test module\")\n+        linter.check([\"identical\"])\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..b5ee89b 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -9,6 +10,7 @@ from __future__ import annotations\n import sys\n import warnings\n from contextlib import redirect_stdout\n+from _pytest.recwarn import WarningsRecorder\n from io import StringIO\n from json import dumps\n from typing import TYPE_CHECKING\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..8eaa4b1 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -289,6 +289,42 @@ class TestImportPath:\n         return fn\n \n     def test_importmode_importlib(self, simple_module: Path, tmp_path: Path) -> None:\n+        \"\"\"Test that modules are imported once with importlib mode\"\"\"\n+        module = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n+        assert module.foo(2) == 42  # type: ignore[attr-defined]\n+        assert str(simple_module.parent) not in sys.path\n+        assert module.__name__ in sys.modules\n+        assert module.__name__ == \"_src.tests.mymod\"\n+        assert \"_src\" in sys.modules\n+        assert \"_src.tests\" in sys.modules\n+\n+    def test_importlib_does_not_duplicate_imports(self, pytester: Pytester) -> None:\n+        \"\"\"Test to ensure module is not imported twice with importlib mode.\"\"\"\n+        pytester.makepyfile(\n+            **{\n+                \"pmxbot/commands.py\": \"from . import logging\",\n+                \"pmxbot/logging.py\": \"class Logger:\\n    pass\",\n+                \"tests/__init__.py\": \"\",\n+                \"tests/test_double_import.py\": \"\"\"\n+                    import importlib\n+                    from pmxbot import logging\n+\n+                    def test_single_import():\n+                        # Ensure the module is only imported once\n+                        assert importlib.import_module('pmxbot.logging') is logging\n+                \"\"\",\n+            }\n+        )\n+        pytester.makeini(\n+            \"\"\"\n+            [pytest]\n+            addopts =\n+                --doctest-modules\n+                --import-mode importlib\n+            \"\"\"\n+        )\n+        result = pytester.runpytest_subprocess()\n+        result.stdout.fnmatch_lines(\"*1 passed*\")\n         \"\"\"`importlib` mode does not change sys.path.\"\"\"\n         module = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n         assert module.foo(2) == 42  # type: ignore[attr-defined]\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..d49a091 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,9 +1,39 @@\n+\n import logging\n \n import py.io\n \n from _pytest.logging import ColoredLevelFormatter\n \n+def test_updated_log_format():\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+\n+    record = logging.LogRecord(\n+        name=\"dummy_module\",\n+        level=logging.DEBUG,\n+        pathname=\"dummy_path\",\n+        lineno=20,\n+        msg=\"Debug Message\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    class ColorConfig(object):\n+        class option(object):\n+            pass\n+\n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = True\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    expected_output = \"DEBUG    dummy_module:dummy_path:20 Debug Message\"\n+    assert output == expected_output\n+\n+    tw.hasmarkup = False\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == expected_output\n+\n \n def test_coloredlogformatter():\n     logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n",
  "pytest-dev__pytest-5495": "",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..fbd29fe 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,3 +1,4 @@\n+\n import os\n from xml.dom import minidom\n \n@@ -157,7 +158,29 @@ class TestPython:\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n \n-    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+        \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n+\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+        \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n         # mock LogXML.node_reporter so it always sets a known duration to each test report object\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..19c2857 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -150,7 +150,48 @@ def test_unicode():\n     assert saferepr(val) == reprval\n \n \n+def test_broken_getattribute():\n+    \"\"\"saferepr() can create proper representations of classes with\n+    broken __getattribute__ (#7145)\n+    \"\"\"\n+\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError\n+\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[RuntimeError() raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+def test_broken_repr_no_exception():\n+    \"\"\"Test saferepr() with a __repr__ raising a non-standard exception.\"\"\"\n+    \n+    class SomeClass:\n+        def __repr__(self):\n+            raise ValueError(\"A value error occurred\")\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[ValueError('A value error occurred') raised in repr()] SomeClass object at 0x\"\n+    )\n+\n+def test_broken_repr_custom_exception():\n+    \"\"\"Test saferepr() with a __repr__ raising a user-defined exception.\"\"\"\n+    \n+    class CustomException(Exception):\n+        pass\n+\n+    class SomeClass:\n+        def __repr__(self):\n+            raise CustomException(\"Custom exception raised\")\n+\n+    assert saferepr(SomeClass()).startswith(\n+        \"<[CustomException('Custom exception raised') raised in repr()] SomeClass object at 0x\"\n+    )\n+\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..b9d2e17 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -287,8 +287,31 @@ class TestInlineRunModulesCleanup:\n         testdir.inline_run(str(test_mod))\n         assert imported.data == 42\n \n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct (#6428).\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n \n-def test_assert_outcomes_after_pytest_error(testdir) -> None:\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n     testdir.makepyfile(\"def test_foo(): assert True\")\n \n     result = testdir.runpytest(\"--unexpected-argument\")\n",
  "pytest-dev__pytest-7373": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..6d6088d 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -153,6 +153,33 @@ class TestEvaluation:\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n \n+class TestSkippingWithRunXFail:\n+    @pytest.mark.parametrize(\n+        \"test_input,expected\",\n+        [\n+            (\n+                [\"-rs\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+            (\n+                [\"-rs\", \"--runxfail\"],\n+                [\"SKIPPED [1] test_sample.py:2: unconditional skip\", \"*1 skipped*\"],\n+            ),\n+        ],\n+    )\n+    def test_skip_location_with_runxfail(self, testdir, test_input, expected):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location() -> None:\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines(expected)\n+\n+        \n class TestXFail:\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..0fcbc91 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -152,8 +153,34 @@ class TestEvaluation:\n         assert skipped\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n+from _pytest.pytester import Testdir\n \n class TestXFail:\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # This test verifies the behavior of dynamically adding an xfail mark during test execution\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"dynamic xfail during test\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # This test verifies the behavior of dynamically adding a strict xfail mark during test execution\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xpass_strict(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"should fail\", strict=True))\n+                pass\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..19c1e9b 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -20,7 +21,38 @@ from _pytest.pathlib import register_cleanup_lock_removal\n from _pytest.pathlib import rm_rf\n from _pytest.pytester import Pytester\n from _pytest.tmpdir import get_user\n-from _pytest.tmpdir import TempdirFactory\n+from _pytest.monkeypatch import MonkeyPatch\n+\n+def test_tmp_path_factory_handles_invalid_dir_characters(\n+    tmp_path_factory: TempPathFactory, monkeypatch: MonkeyPatch\n+) -> None:\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"os/<:*?;>agnostic\")\n+    # _basetemp / _given_basetemp are cached / set in parallel runs, patch them\n+    monkeypatch.setattr(tmp_path_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmp_path_factory, \"_given_basetemp\", None)\n+    p = tmp_path_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n+\n+\n+def test_tmpdir_factory_handles_invalid_dir_characters(\n+    tmpdir_factory: TempdirFactory, monkeypatch: MonkeyPatch\n+) -> None:\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"os/<:*?;>agnostic\")\n+    # _basetemp / _given_basetemp are cached / set in parallel runs, patch them\n+    monkeypatch.setattr(tmpdir_factory._tmppath_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmpdir_factory._tmppath_factory, \"_given_basetemp\", None)\n+    p = tmpdir_factory.getbasetemp()\n+    assert \"pytest-of-unknown\" in str(p)\n+\n+\n+def test_tmpdir_factory_mktemp_with_invalid_characters(\n+    tmpdir_factory: TempdirFactory, monkeypatch: MonkeyPatch\n+) -> None:\n+    monkeypatch.setattr(\"getpass.getuser\", lambda: \"os/<:*?;>agnostic\")\n+    monkeypatch.setattr(tmpdir_factory._tmppath_factory, \"_basetemp\", None)\n+    monkeypatch.setattr(tmpdir_factory._tmppath_factory, \"_given_basetemp\", None)\n+    dir_path = tmpdir_factory.mktemp(\"testing\")\n+    assert \"pytest-of-unknown\" in str(dir_path)\n from _pytest.tmpdir import TempPathFactory\n \n \n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..a1230d4 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -598,7 +598,42 @@ def test_ridgecv_store_cv_values():\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n \n-def test_ridgecv_sample_weight():\n+def test_ridge_classifier_cv_store_cv_values():\n+    from sklearn.linear_model import RidgeClassifierCV\n+    import numpy as np\n+\n+    # Test case for RidgeClassifierCV with store_cv_values=True\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-0.8, -1.0], [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [0.1, 1.0, 10.0]\n+    n_alphas = len(alphas)\n+\n+    # Initialize RidgeClassifierCV with store_cv_values=True\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # Fit with single target\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    # Test with multiple targets\n+    y_multi = np.array([[1, 1, 1, -1, -1],\n+                        [1, -1, 1, -1, 1],\n+                        [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y_multi.shape[1]\n+    r.fit(x, y_multi)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    # Test ValueError when cv is not None and store_cv_values is True\n+    from sklearn.model_selection import KFold\n+    cv = KFold(n_splits=3)\n+    try:\n+        r = RidgeClassifierCV(alphas=alphas, cv=cv, store_cv_values=True)\n+        r.fit(x, y)\n+    except ValueError as e:\n+        assert str(e) == \"cv!=None and store_cv_values=True  are incompatible\"\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..0c7c75e 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -15,7 +15,22 @@ from sklearn.mixture import BayesianGaussianMixture\n \n from sklearn.mixture.tests.test_gaussian_mixture import RandomData\n from sklearn.exceptions import ConvergenceWarning\n-from sklearn.utils.testing import assert_greater_equal, ignore_warnings\n+from sklearn.utils.testing import assert_greater_equal, ignore_warnings, assert_array_equal\n+\n+def test_bayesian_mixture_labels_storage():\n+    rng = np.random.RandomState(0)\n+    rand_data = RandomData(rng)\n+    for covar_type in COVARIANCE_TYPE:\n+        X = rand_data.X[covar_type]\n+        Y = rand_data.Y\n+        bgmm = BayesianGaussianMixture(n_components=rand_data.n_components,\n+                                       random_state=rng, weight_concentration_prior_type='dirichlet_process',\n+                                       covariance_type=covar_type)\n+        # Fit the model and store labels\n+        bgmm.fit(X)\n+        labels = bgmm.predict(X)\n+        # Ensure the stored labels match predictions\n+        assert_array_equal(labels, bgmm.predict(X))\n \n \n COVARIANCE_TYPE = ['full', 'tied', 'diag', 'spherical']\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..ff669e0 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,7 +260,53 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n-def test_one_hot_encoder_no_categorical_features():\n+import numpy as np\n+import pytest\n+from numpy.testing import assert_array_equal\n+from sklearn.preprocessing import OneHotEncoder\n+\n+def test_one_hot_encoder_handle_unknown_strings():\n+    X = np.array(['11111111', '22', '333', '4444']).reshape((-1, 1))\n+    X2 = np.array(['55555', '22']).reshape((-1, 1))\n+\n+    # Non Regression test for the issue #12470\n+    # Test the ignore option, when categories are numpy string dtype\n+    # particularly when the known category strings are larger\n+    # than the unknown category strings\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0.,  0.,  0.,  0.], [0.,  1.,  0.,  0.]]))\n+    # ensure transformed data was not modified in place\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_handle_unknown_long_strings():\n+    X = np.array(['short', 'medium', 'longlong', 'veryverylong']).reshape((-1, 1))\n+    X2 = np.array(['unknownlongest', 'short']).reshape((-1, 1))\n+\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    # Expected transformation should ignore unknown 'unknownlongest'\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0., 0., 0., 0.], [1., 0., 0., 0.]]))\n+    assert_array_equal(X2, X2_passed)\n+\n+def test_one_hot_encoder_ignore_unknown_numeric_mixed():\n+    X = np.array(['123', '456', '789', '10']).reshape((-1, 1))\n+    X2 = np.array(['11', '123']).reshape((-1, 1))\n+\n+    oh = OneHotEncoder(handle_unknown='ignore')\n+    oh.fit(X)\n+    X2_passed = X2.copy()\n+    # Testing mixed numeric handling with strings\n+    assert_array_equal(\n+        oh.transform(X2_passed).toarray(),\n+        np.array([[0., 0., 0., 0.], [1., 0., 0., 0.]]))\n+    assert_array_equal(X2, X2_passed)\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n     cat = [False, False, False]\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..f890b3c 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,15 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_different_random_state():\n+    # Check that fit_predict is equivalent to fit.predict across different random states\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    for random_state in [0, 1, 42, 123, None]:\n+        gm = GaussianMixture(n_components=5, n_init=5, random_state=random_state)\n+        y_pred1 = gm.fit_predict(X)\n+        y_pred2 = gm.predict(X)\n+        assert_array_equal(y_pred1, y_pred2)\n+        print(f'Test passed for random_state={random_state}')\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..d7c2371 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,10 +1,11 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n                                    assert_equal, assert_not_equal,\n-                                   assert_raises)\n+                                   assert_raises, assert_allclose)\n \n from sklearn.decomposition import PCA, KernelPCA\n from sklearn.datasets import make_circles\n@@ -70,8 +71,18 @@ def test_kernel_pca_consistent_transform():\n     transformed2 = kpca.transform(X_copy)\n     assert_array_almost_equal(transformed1, transformed2)\n \n-\n-def test_kernel_pca_sparse():\n+def test_kernel_pca_sign_consistency():\n+    rng = np.random.RandomState(0)\n+    X = rng.rand(10, 10)\n+    \n+    kpca = KernelPCA(n_components=7, kernel='rbf', random_state=rng)\n+    \n+    transformed_1 = kpca.fit_transform(X)\n+    transformed_2 = kpca.fit_transform(X)\n+    \n+    # Since signs can change, check if they are equal up to a sign flip\n+    for i in range(transformed_1.shape[1]):\n+        assert_allclose(np.abs(transformed_1[:, i]), np.abs(transformed_2[:, i]))\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..f8c4270 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,6 +8,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n import numpy as np\n \n@@ -295,6 +298,53 @@ def test_score_samples():\n                        clf2.score_samples([[2., 2.]]))\n \n \n+@pytest.mark.filterwarnings('ignore:default contamination')\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_warm_start_initialization():\n+    \"\"\"Test if warm_start parameter can be set during initialization\"\"\"\n+\n+    clf = IsolationForest(n_estimators=5, warm_start=True)\n+    assert clf.warm_start is True\n+\n+    clf = IsolationForest(n_estimators=5, warm_start=False)\n+    assert clf.warm_start is False\n+\n+@pytest.mark.filterwarnings('ignore:default contamination')\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_iforest_warm_start_multiple_iterations():\n+    \"\"\"Test warm start over multiple iterations with increased n_estimators\"\"\"\n+\n+    rng = check_random_state(42)\n+    X = rng.randn(30, 3)\n+\n+    clf = IsolationForest(n_estimators=10, max_samples=30, random_state=rng, warm_start=True)\n+    clf.fit(X)\n+    initial_trees = len(clf.estimators_)\n+\n+    # Increment n_estimators and refit\n+    clf.set_params(n_estimators=15)\n+    clf.fit(X)\n+    assert len(clf.estimators_) == initial_trees + 5\n+\n+    # Further increment\n+    clf.set_params(n_estimators=20)\n+    clf.fit(X)\n+    assert len(clf.estimators_) == initial_trees + 10\n+\n+    # Check that the first tree is still the same\n+    assert clf.estimators_[0] is clf.estimators_[0]\n+\n+@pytest.mark.filterwarnings('ignore:default contamination')\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_warm_start_initialization():\n+    \"\"\"Test if warm_start parameter can be set during initialization\"\"\"\n+\n+    clf = IsolationForest(n_estimators=5, warm_start=True)\n+    assert clf.warm_start is True\n+\n+    clf = IsolationForest(n_estimators=5, warm_start=False)\n+    assert clf.warm_start is False\n+\n @pytest.mark.filterwarnings('ignore:default contamination')\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_deprecation():\n",
  "scikit-learn__scikit-learn-13497": "",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..dea50d5 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -8,6 +9,8 @@ from sklearn.pipeline import make_pipeline\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.feature_selection import SelectKBest, chi2\n from sklearn import set_config\n+from sklearn.linear_model import LogisticRegressionCV\n+import numpy as np\n \n \n # Ignore flake8 (lots of line too long issues)\n@@ -214,8 +217,16 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n-\n-def test_pipeline():\n+def test_print_changed_only_with_array():\n+    # Test to ensure array parameters don't throw a ValueError\n+    set_config(print_changed_only=True)\n+    try:\n+        repr_output = repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))\n+        assert isinstance(repr_output, str)\n+    except ValueError as e:\n+        raise AssertionError(\"ValueError should not be raised when using array parameters with print_changed_only=True\") from e\n+    finally:\n+        set_config(print_changed_only=False)\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n     expected = \"\"\"\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..0ba1fb0 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,9 +1,12 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n import numpy as np\n \n from sklearn.utils.testing import assert_almost_equal, assert_array_equal\n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_raise_message\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..b9d92c3 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -511,8 +511,31 @@ def test_expected_transformation_shape():\n     nca.fit(X, y)\n     assert_equal(transformation_storer.transformation.size, X.shape[1]**2)\n \n+from sklearn.pipeline import Pipeline\n+from sklearn.model_selection import GridSearchCV\n+from sklearn.datasets import load_iris\n+from sklearn.neighbors import KNeighborsClassifier\n+import numpy as np\n+\n+iris = load_iris()\n+iris_data = iris.data\n+iris_target = iris.target\n \n-def test_convergence_warning():\n+def test_grid_search_parameter_types():\n+    # Test GridSearchCV with numpy integer and float types for parameters\n+    X = iris_data\n+    y = iris_target\n+\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+\n+    pipe = Pipeline([('nca', nca), ('knn', knn)])\n+    \n+    params = {'nca__tol': [0.1, 0.5, np.float32(1.0)],\n+              'nca__n_components': [np.int64(1), 2, 3]}\n+    \n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+    gs.fit(X, y)\n     nca = NeighborhoodComponentsAnalysis(max_iter=2, verbose=1)\n     cls_name = nca.__class__.__name__\n     assert_warns_message(ConvergenceWarning,\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..531ca57 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,41 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    import numpy as np\n+    from scipy import sparse\n+    from sklearn import svm\n+\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+\n+def test_sparse_fit_no_zero_division_error():\n+    import numpy as np\n+    from scipy import sparse\n+    from sklearn import svm\n+\n+    # Using data that should result in an empty support_vectors_ array\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 0],\n+                                 [0, 0, 0, 0],\n+                                 [0, 0, 0, 0]])\n+    y_train = np.array([0.04, 0.04, 0.04, 0.04])\n+    model = svm.SVR(kernel='linear')\n+    try:\n+        model.fit(X_train, y_train)\n+    except ZeroDivisionError:\n+        assert False, \"ZeroDivisionError was raised!\"\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex dd52c66..e15c311 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -972,7 +972,24 @@ def test_leave_one_p_group_out_error_on_fewer_number_of_groups():\n                          LeavePGroupsOut(n_groups=3).split(X, y, groups))\n \n \n-@ignore_warnings\n+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\n+import pytest\n+\n+@pytest.mark.parametrize(\"RepeatedCV\", [RepeatedKFold, RepeatedStratifiedKFold])\n+def test_repeated_cv_repr(RepeatedCV):\n+    n_splits, n_repeats = 2, 6\n+    repeated_cv = RepeatedCV(n_splits=n_splits, n_repeats=n_repeats)\n+    repeated_cv_repr = ('{}(n_repeats=6, n_splits=2, random_state=None)'\n+                        .format(repeated_cv.__class__.__name__))\n+    assert repeated_cv_repr == repr(repeated_cv)\n+\n+@pytest.mark.parametrize(\"RepeatedCV, expected_repr\", [\n+    (RepeatedKFold, \"RepeatedKFold(n_repeats=3, n_splits=4, random_state=42)\"),\n+    (RepeatedStratifiedKFold, \"RepeatedStratifiedKFold(n_repeats=3, n_splits=4, random_state=42)\")\n+])\n+def test_repeated_cv_repr_with_random_state(RepeatedCV, expected_repr):\n+    repeated_cv = RepeatedCV(n_splits=4, n_repeats=3, random_state=42)\n+    assert expected_repr == repr(repeated_cv)\n def test_repeated_cv_value_errors():\n     # n_repeats is not integer or <= 0\n     for cv in (RepeatedKFold, RepeatedStratifiedKFold):\n",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "diff --git a/sklearn/metrics/cluster/tests/test_common.py b/sklearn/metrics/cluster/tests/test_common.py\nindex 9991cff..1940abc 100644\n--- a/sklearn/metrics/cluster/tests/test_common.py\n+++ b/sklearn/metrics/cluster/tests/test_common.py\n@@ -168,6 +168,16 @@ def test_format_invariance(metric_name):\n     if metric_name in SUPERVISED_METRICS:\n         metric = SUPERVISED_METRICS[metric_name]\n         score_1 = metric(y_true, y_pred)\n+        \n+        # Test with object dtype arrays for mutual_info_score\n+        if metric_name == 'mutual_info_score':\n+            y_true_obj = np.array(y_true, dtype=object)\n+            y_pred_obj = np.array(y_pred, dtype=object)\n+            assert score_1 == metric(y_true_obj, y_pred_obj), (\n+                \"Test failed for object dtype arrays in mutual_info_score\"\n+            )\n+        metric = SUPERVISED_METRICS[metric_name]\n+        score_1 = metric(y_true, y_pred)\n         y_true_gen = generate_formats(y_true)\n         y_pred_gen = generate_formats(y_pred)\n         for (y_true_fmt, fmt_name), (y_pred_fmt, _) in zip(y_true_gen,\n",
  "scikit-learn__scikit-learn-25500": "diff --git a/sklearn/tests/test_isotonic.py b/sklearn/tests/test_isotonic.py\nindex 5021282..366057e 100644\n--- a/sklearn/tests/test_isotonic.py\n+++ b/sklearn/tests/test_isotonic.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n import numpy as np\n import pickle\n@@ -14,6 +15,10 @@ from sklearn.isotonic import (\n )\n \n from sklearn.utils.validation import check_array\n+from sklearn.calibration import CalibratedClassifierCV\n+from sklearn.linear_model import SGDClassifier\n+from sklearn import set_config\n+import pandas as pd\n from sklearn.utils._testing import (\n     assert_allclose,\n     assert_array_equal,\n",
  "scikit-learn__scikit-learn-25570": "",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/roots/test-ext-autodoc/target/inheritance.py b/tests/roots/test-ext-autodoc/target/inheritance.py\nindex ac389bf..efa653f 100644\n--- a/tests/roots/test-ext-autodoc/target/inheritance.py\n+++ b/tests/roots/test-ext-autodoc/target/inheritance.py\n@@ -10,8 +10,12 @@ class Base(object):\n     def inheritedstaticmeth(cls):\n         \"\"\"Inherited static method.\"\"\"\n \n+class Ignored(list):\n+    \"\"\"A class inheriting from list that should be ignored in documentation.\"\"\"\n+    def ignored_meth(self):\n+        \"\"\"This method should be ignored.\"\"\"\n \n-class Derived(Base):\n+class Derived(Base, Ignored):\n     def inheritedmeth(self):\n         # no docstring here\n-        pass\n+        pass\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 21b6a7e..c53e313 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -737,7 +737,20 @@ def test_autodoc_type_aliases(app):\n     ]\n \n \n-@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc')\n+def test_autodoc_type_aliases_on_variables_and_attributes(app):\n+    # Set up the configuration with type aliases\n+    app.config.autodoc_type_aliases = {'String': 'example.MyString'}\n+    \n+    # Test autodoc for the module-level variable\n+    actual = do_autodoc(app, 'module', 'target.annotations', {\"members\": None})\n+    assert '.. py:data:: variable' in actual\n+    assert ':type: example.MyString' in actual\n+    \n+    # Test autodoc for the class attribute\n+    actual = do_autodoc(app, 'class', 'target.annotations.Foo', {\"members\": None})\n+    assert '.. py:attribute:: Foo.attr' in actual\n+    assert ':type: example.MyString' in actual\n def test_autodoc_default_options(app):\n     # no settings\n     actual = do_autodoc(app, 'class', 'target.enums.EnumCls')\n",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..616bb4c 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -91,6 +91,45 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+from sphinx.testing.util import assert_node, restructuredtext\n+from sphinx.addnodes import desc, desc_signature, desc_name, desc_addname, desc_content\n+from sphinx.domains.std import StandardDomain\n+from docutils import nodes\n+\n+def test_cmd_option_with_optional_value(app):\n+    text = \".. option:: -j[=N]\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (desc, ([desc_signature, ([desc_name, '-j'],\n+                                                   [desc_addname, '[=N]'])],\n+                                 [desc_content, ()])))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+\n+def test_cmd_option_starting_with_bracket(app):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (desc, ([desc_signature, ([desc_name, '[enable'],\n+                                                   [desc_addname, '=]PATTERN'])],\n+                                 [desc_content, ()])))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n+\n+def test_cmd_option_with_special_characters(app):\n+    text = \".. option:: --opt*arg\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (desc, ([desc_signature, ([desc_name, '--opt*arg'])],\n+                                 [desc_content, ()])))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('--opt*arg', '--opt*arg', 'cmdoption', 'index', 'cmdoption-opt-arg', 1) in objects\n+\n+def test_cmd_option_with_subcommands(app):\n+    text = \".. option:: subcommand:command\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (desc, ([desc_signature, ([desc_name, 'subcommand:command'])],\n+                                 [desc_content, ()])))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('subcommand:command', 'subcommand:command', 'cmdoption', 'index', 'cmdoption-subcommand-command', 1) in objects\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..6be530b 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -16,6 +17,7 @@ from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tup\n import pytest\n \n from sphinx.util.typing import restify, stringify\n+from struct import Struct\n \n \n class MyClass1:\n@@ -115,7 +117,9 @@ def test_restify_type_ForwardRef():\n     assert restify(ForwardRef(\"myint\")) == \":class:`myint`\"\n \n \n-def test_restify_broken_type_hints():\n+def test_restify_struct():\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(BrokenType) == ':class:`tests.test_util_typing.BrokenType`'\n \n \n",
  "sphinx-doc__sphinx-8713": "",
  "sphinx-doc__sphinx-8721": "",
  "sympy__sympy-12481": "",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..c710559 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,3 +1,4 @@\n+\n from sympy import Abs, S, Symbol, I, Rational, PurePoly\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n@@ -448,6 +449,22 @@ def test_sparse_matrix():\n     assert A.col_list() == [(0, 0, 18), (4, 2, 19), (6, 2, 12), (1, 4, 18), (2, 7, 16), (5, 7, 16), (9, 7, 18), (0, 9, 12), (3, 9, 12)]\n     assert SparseMatrix.eye(2).nnz() == 2\n \n+    # Test hstack with zero row matrices\n+    zero_row_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*zero_row_matrices).shape == (0, 6)\n+\n+    # Test vstack with zero column matrices\n+    zero_column_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*zero_column_matrices).shape == (6, 0)\n+\n+    # Additional test for hstack with non-zero row and zero column matrix\n+    non_zero_row_matrices = [SparseMatrix.zeros(1, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*non_zero_row_matrices).shape == (1, 6)\n+\n+    # Additional test for vstack with non-zero column and zero row matrix\n+    non_zero_column_matrices = [SparseMatrix.zeros(n, 1) for n in range(4)]\n+    assert SparseMatrix.vstack(*non_zero_column_matrices).shape == (6, 1)\n+\n \n def test_transpose():\n     assert SparseMatrix(((1, 2), (3, 4))).transpose() == \\\n",
  "sympy__sympy-13471": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 0a3b6ce..080b3f9 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -582,6 +582,12 @@ def test_Float_issue_2107():\n     assert S.Zero + b + (-b) == 0\n \n \n+def test_Float_from_tuple():\n+    # This tests the creation of a Float from a tuple with hexadecimal components.\n+    a = Float((0, '1L', 0, 1))\n+    b = Float((0, '1', 0, 1))\n+    assert a == b\n+\n def test_Infinity():\n     assert oo != 1\n     assert 1*oo == oo\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..636e1e6 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -267,6 +267,23 @@ def test_coth():\n \n     assert coth(x*I) == -cot(x)*I\n \n+    # Test cases for issue: .subs on coth(log(tan(x))) errors for certain integral values\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # Check for several problematic integer values\n+    assert e.subs(x, 2) == coth(log(tan(2)))\n+    assert e.subs(x, 3) == coth(log(tan(3)))\n+    assert e.subs(x, 5) == coth(log(tan(5)))\n+    assert e.subs(x, 6) == coth(log(tan(6)))\n+    assert e.subs(x, 8) == coth(log(tan(8)))\n+    assert e.subs(x, 9) == coth(log(tan(9)))\n+    assert e.subs(x, 11) == coth(log(tan(11)))\n+    assert e.subs(x, 12) == coth(log(tan(12)))\n+    assert e.subs(x, 13) == coth(log(tan(13)))\n+    assert e.subs(x, 15) == coth(log(tan(15)))\n+    assert e.subs(x, 18) == coth(log(tan(18)))\n+\n     assert coth(k*pi*I) == -cot(k*pi)*I\n     assert coth(17*k*pi*I) == -cot(17*k*pi)*I\n \n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..894faa4 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,23 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import eye, Matrix, ones\n+\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..ca5d57a 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -620,48 +620,64 @@ def test_latex_sequences():\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4, 9, \\ldots\\right\\]'\n+    latex_str = r'\\left[0, 1, 4, 9, \\ldots\\right]'\n     assert latex(s1) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1, 2, \\ldots\\right\\]'\n+    latex_str = r'\\left[1, 2, 1, 2, \\ldots\\right]'\n     assert latex(s2) == latex_str\n \n     s3 = SeqFormula(a**2, (0, 2))\n     s4 = SeqPer((1, 2), (0, 2))\n \n-    latex_str = r'\\left\\[0, 1, 4\\right\\]'\n+    latex_str = r'\\left[0, 1, 4\\right]'\n     assert latex(s3) == latex_str\n \n-    latex_str = r'\\left\\[1, 2, 1\\right\\]'\n+    latex_str = r'\\left[1, 2, 1\\right]'\n     assert latex(s4) == latex_str\n \n     s5 = SeqFormula(a**2, (-oo, 0))\n     s6 = SeqPer((1, 2), (-oo, 0))\n \n-    latex_str = r'\\left\\[\\ldots, 9, 4, 1, 0\\right\\]'\n+    latex_str = r'\\left[\\ldots, 9, 4, 1, 0\\right]'\n     assert latex(s5) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 2, 1, 2, 1\\right\\]'\n+    latex_str = r'\\left[\\ldots, 2, 1, 2, 1\\right]'\n     assert latex(s6) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5, 11, \\ldots\\right\\]'\n+    latex_str = r'\\left[1, 3, 5, 11, \\ldots\\right]'\n     assert latex(SeqAdd(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[1, 3, 5\\right\\]'\n+    latex_str = r'\\left[1, 3, 5\\right]'\n     assert latex(SeqAdd(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 11, 5, 3, 1\\right\\]'\n+    latex_str = r'\\left[\\ldots, 11, 5, 3, 1\\right]'\n     assert latex(SeqAdd(s5, s6)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4, 18, \\ldots\\right\\]'\n+    latex_str = r'\\left[0, 2, 4, 18, \\ldots\\right]'\n     assert latex(SeqMul(s1, s2)) == latex_str\n \n-    latex_str = r'\\left\\[0, 2, 4\\right\\]'\n+    latex_str = r'\\left[0, 2, 4\\right]'\n     assert latex(SeqMul(s3, s4)) == latex_str\n \n-    latex_str = r'\\left\\[\\ldots, 18, 4, 2, 0\\right\\]'\n+    latex_str = r'\\left[\\ldots, 18, 4, 2, 0\\right]'\n     assert latex(SeqMul(s5, s6)) == latex_str\n \n+    # Additional test cases\n+    # Empty sequence\n+    s7 = SeqFormula(a**2, (0, 0))  # Should result in an empty sequence\n+    latex_str = r'\\left[\\,\\right]'\n+    assert latex(s7) == latex_str\n+\n+    # Single element sequence\n+    s8 = SeqFormula(a**2, (0, 1))  # Single element sequence [0]\n+    latex_str = r'\\left[0\\right]'\n+    assert latex(s8) == latex_str\n+\n+    # Sequence with three elements\n+    s9 = SeqFormula(a**2, (0, 3))  # Sequence with three elements [0, 1, 4]\n+    latex_str = r'\\left[0, 1, 4\\right]'\n+    assert latex(s9) == latex_str\n+\n \n def test_latex_FourierSeries():\n     latex_str = r'2 \\sin{\\left (x \\right )} - \\sin{\\left (2 x \\right )} + \\frac{2}{3} \\sin{\\left (3 x \\right )} + \\ldots'\n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..279e047 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n@@ -188,6 +189,16 @@ def test_Domain_preprocess():\n \n     raises(OptionError, lambda: Domain.preprocess('Z()'))\n \n+    # New test cases for RR and CC domains\n+    assert Domain.preprocess('R[x]') == RR[x]\n+    assert Domain.preprocess('C[x]') == CC[x]\n+    assert Domain.preprocess('RR[x]') == RR[x]\n+    assert Domain.preprocess('CC[x]') == CC[x]\n+    assert Domain.preprocess('R[x,y]') == RR[x, y]\n+    assert Domain.preprocess('C[x,y]') == CC[x, y]\n+    assert Domain.preprocess('RR[x,y]') == RR[x, y]\n+    assert Domain.preprocess('CC[x,y]') == CC[x, y]\n+\n     assert Domain.preprocess('Z(x)') == ZZ.frac_field(x)\n     assert Domain.preprocess('Q(x)') == QQ.frac_field(x)\n \n",
  "sympy__sympy-14774": "",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..547a830 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6111,6 +6111,9 @@ u(\"\"\"\\\n     assert upretty((1/y)*e.j) == ucode_str\n \n \n+from sympy import MatrixSymbol, pretty, symbols\n+n = symbols('n')\n+\n def test_MatrixSymbol_printing():\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..89ceb8e 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -728,6 +728,19 @@ def test_dummification():\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 2 * F(t) + 5))\n     raises(SyntaxError, lambda: lambdify(2 * F(t), 4 * F(t) + 5))\n \n+def test_curly_matrix_symbol_issue():\n+    # Test for issue regarding curly braces in MatrixSymbol names\n+    import sympy as sy\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+\n+    # This should work without raising an exception if the issue is fixed\n+    lam = sy.lambdify(curlyv, curlyv)\n+    assert lam([[1], [1]]) == [[1], [1]]\n+\n+    # This should also work without raising an exception if the issue is fixed\n+    lam_dummify = sy.lambdify(curlyv, curlyv, dummify=True)\n+    assert lam_dummify([[1], [1]]) == [[1], [1]]\n+\n def test_python_keywords():\n     # Test for issue 7452. The automatic dummification should ensure use of\n     # Python reserved keywords as symbol names will create valid lambda\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..9ece1f9 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -23,6 +24,16 @@ def test_Rational():\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n+def test_Max_Min():\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, y, z)) == \"Max[x, y, z]\"\n+    assert mcode(Max(x, y, Min(z, 1))) == \"Max[x, y, Min[z, 1]]\"\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(2, x)) == \"Min[2, x]\"\n+    assert mcode(Min(x, y, z)) == \"Min[x, y, z]\"\n+    assert mcode(Max(x, y) * Min(y, z)) == \"Max[x, y]*Min[y, z]\"\n+\n \n def test_Function():\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n",
  "sympy__sympy-15609": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 7f3c1a5..7305696 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1717,6 +1717,23 @@ def test_issue_13651():\n     assert latex(expr) == r\"c - \\left(a + b\\right)\"\n \n \n+def test_indexed_matrix_expression_latex():\n+    i, j, k = symbols(\"i j k\")\n+    M = MatrixSymbol(\"M\", k, k)\n+    N = MatrixSymbol(\"N\", k, k)\n+    # Verify the fix by checking that the generated LaTeX string is compilable\n+    assert latex((M*N)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, j}'\n+\n+    # Additional test cases to ensure robustness\n+    P = MatrixSymbol(\"P\", k, k)\n+    assert latex((M*N*P)[i, j]) == r'\\sum_{i_{2}=0}^{k - 1}\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} N_{i_{1}, i_{2}} P_{i_{2}, j}'\n+    Q = MatrixSymbol(\"Q\", k, k)\n+    assert latex((M*(N + Q))[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} M_{i, i_{1}} \\left(N_{i_{1}, j} + Q_{i_{1}, j}\\right)'\n+    assert latex(((M + N)*Q)[i, j]) == r'\\sum_{i_{1}=0}^{k - 1} \\left(M_{i, i_{1}} + N_{i, i_{1}}\\right) Q_{i_{1}, j}'\n+\n+from sympy import symbols, MatrixSymbol, latex\n+from sympy.matrices.expressions import MatMul\n+\n def test_latex_UnevaluatedExpr():\n     x = symbols(\"x\")\n     he = UnevaluatedExpr(1/x)\n",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..3ea874c 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, exp, Eq\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -18,7 +19,22 @@ def test_idiff():\n     explicit  = 12*x/sqrt(-x**2 + 4)**5\n     assert ans.subs(y, solve(circ, y)[0]).equals(explicit)\n     assert True in [sol.diff(x, 3).equals(explicit) for sol in solve(circ, y)]\n-    assert idiff(x + t + y, [y, t], x) == -Derivative(t, x) - 1\n+    f = Function('f')\n+    g = Function('g')\n+\n+    # Test case from the issue description for f(x)\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x).simplify() == ((x + 1) * exp(x - f(x))/(f(x) + 1)).simplify()\n+\n+    # Test case involving multiple variables with functions\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x).simplify() == ((y + Derivative(y, x)) * exp(x)).simplify()\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x).simplify() == (-y + exp(-x) * Derivative(f(x), x)).simplify()\n+    \n+    # Test case involving two functions\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+\n+    # Original issue test for Eq, rewritten to test the resolution\n+    eq_test = Eq(y*exp(y), x*exp(x))\n+    assert idiff(eq_test, y, x).simplify() == ((x + 1) * exp(x - y)/(y + 1)).simplify()\n \n \n def test_intersection():\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..9408e57 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -582,7 +582,36 @@ def test_ccode_cse():\n     )\n     assert source == expected\n \n-def test_empty_f_code():\n+from sympy.utilities.autowrap import autowrap\n+from sympy import MatrixSymbol\n+import numpy as np\n+\n+def test_ccode_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    name_expr = (\"test\", 1.0)\n+    generator = CCodeGen()\n+    result = codegen(name_expr, code_gen=generator, header=False, empty=False, argument_sequence=(x,))\n+    source = result[0][1]\n+    # note: x should appear as (double *)\n+    expected = (\n+        '#include \"test.h\"\\n'\n+        '#include <math.h>\\n'\n+        'double test(double *x) {\\n'\n+        '   double test_result;\\n'\n+        '   test_result = 1.0;\\n'\n+        '   return test_result;\\n'\n+        '}\\n'\n+    )\n+    assert source == expected\n+\n+def test_autowrap_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    expected = 1.0\n+    assert result == expected\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n     assert source == \"\"\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..7495d35 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -339,6 +339,16 @@ def test_intersection():\n \n     assert Intersection(S.Complexes, FiniteSet(S.ComplexInfinity)) == S.EmptySet\n \n+    # Test cases for the issue regarding duplicates in Intersection\n+    x = Symbol('x')\n+    # This should verify the handling of duplicates and order\n+    assert Intersection({1}, {1}, {x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection({1}, {x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection({1}, {1}, {1}) == {1}\n+    assert Intersection({1, 1}, {1, 1}, {1, x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection(FiniteSet(1, 1, 1), FiniteSet(1), FiniteSet(x)) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+    assert Intersection({1, 2, 2}, {1, x}) == Piecewise(({1}, Eq(x, 1)), (S.EmptySet, True))\n+\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n",
  "sympy__sympy-17022": "",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_fu.py b/sympy/simplify/tests/test_fu.py\nindex 135b4cd..116f945 100644\n--- a/sympy/simplify/tests/test_fu.py\n+++ b/sympy/simplify/tests/test_fu.py\n@@ -65,7 +65,16 @@ def test_TR3():\n     for f in (cos, sin, tan, cot, csc, sec):\n         i = f(3*pi/7)\n         j = TR3(i)\n-        assert verify_numerically(i, j) and i.func != j.func\n+from sympy import Symbol, simplify, cos, sin, I\n+\n+def test_issue_17137_fu():\n+    x = Symbol('x')\n+    h = lambda x: 1 - x\n+    assert T(sin(x)**I, sin, cos, h, 4, True) == sin(x)**I\n+    assert T(sin(x)**(2*I + 1), sin, cos, h, 4, True) == sin(x)**(2*I + 1)\n+    # Additional test case for the issue\n+    assert T(cos(x)**I, sin, cos, h, 4, True) == cos(x)**I\n+    assert T(cos(x)**(2 + 3*I), sin, cos, h, 4, True) == cos(x)**(2 + 3*I)\n \n \n def test__TR56():\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..feaafd9 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,12 +1,19 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n+from sympy.geometry import Point\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n+def test_point_commutative_multiplication():\n+    p1 = Point(0, 0)\n+    p2 = Point(1, 1)\n \n-def test_point():\n+    # Test commutative property of multiplication\n+    assert p1 + p2 * sympify(2.0) == Point(2.0, 2.0)\n+    assert p1 + sympify(2.0) * p2 == Point(2.0, 2.0)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..11bbe6d 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1893,6 +1893,44 @@ def test_normal():\n     e = Mul(S.Half, 1 + x, evaluate=False)\n     assert e.normal() == e\n \n+from sympy import Symbol, symbols, sympify, raises\n+\n+def test_non_string_equality():\n+    # Expressions should not compare equal to strings\n+    x = symbols('x')\n+    one = sympify(1)\n+    assert (x == 'x') is False\n+    assert (x != 'x') is True\n+    assert (one == '1') is False\n+    assert (one != '1') is True\n+    assert (x + 1 == 'x + 1') is False\n+    assert (x + 1 != 'x + 1') is True\n+\n+    # Make sure == doesn't try to convert the resulting expression to a string\n+    # (e.g., by calling sympify() instead of _sympify())\n+\n+    class BadRepr(object):\n+        def __repr__(self):\n+            raise RuntimeError\n+\n+    assert (x == BadRepr()) is False\n+    assert (x != BadRepr()) is True\n+\n+    # Additional test for the issue described\n+    class C:\n+        def __repr__(self):\n+            return 'x.y'\n+    \n+    assert (x == C()) is False\n+    assert (x != C()) is True\n+\n+    class D:\n+        def __repr__(self):\n+            return 'x'\n+    \n+    assert (x == D()) is False\n+    assert (x != D()) is True\n+\n \n def test_expr():\n     x = symbols('x')\n@@ -1902,4 +1940,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..48e6fd0 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -547,7 +547,12 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n-    # issue 18122\n+    # issue 18186: Ensure all solutions are returned regardless of symbol order\n+    from sympy.abc import x, y\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..fb8c856 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,7 @@\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -60,7 +61,17 @@ def test_PostIncrement():\n     assert ccode(p) == '(x)++'\n \n \n-def test_sizeof():\n+def test_atoms_sizeof():\n+    typename = 'unsigned int'\n+    sz = sizeof(typename)\n+    # Ensure that atoms() returns components that have no args, like String objects.\n+    assert sz.atoms() == {String('unsigned int'), String('sizeof')}\n+\n+def test_atoms_basic():\n+    # Check that an empty Basic returns an empty set of atoms\n+    from sympy.core import Basic\n+    b = Basic()\n+    assert b.atoms() == set()\n     typename = 'unsigned int'\n     sz = sizeof(typename)\n     assert ccode(sz) == 'sizeof(%s)' % typename\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..04cb2e0 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,13 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_single_element():\n+    from sympy import Matrix, BlockDiagMatrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    B = Matrix(D)\n+    assert B == M\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..f735b41 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n-from sympy.testing.pytest import raises\n+from sympy.testing.pytest import raises, XFAIL\n from sympy.matrices.expressions.matexpr import MatrixElement, MatrixExpr\n \n k, l, m, n = symbols('k l m n', integer=True)\n@@ -66,7 +67,20 @@ def test_Identity_index():\n     raises(IndexError, lambda: I[3, 3])\n \n \n-def test_block_index():\n+def test_block_index_element_fetching():\n+    # Test for issue related to incorrect element fetching from BlockMatrix\n+    n, i = symbols('n i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+\n+    # Ensure C[i, 0] correctly returns a MatrixElement and isn't simplified incorrectly\n+    assert C[i, 0] == MatrixElement(C, i, 0)\n+\n+    # Test specific elements when indices are known\n+    assert C[0, 0] == A[0, 0]  # Should access the element in A\n+    assert C[n, 0] == B[0, 0]  # Should access the first element in B\n+    assert C[n-1, 0] == B[n-1, 0]  # Should access the last element in B\n     I = Identity(3)\n     Z = ZeroMatrix(3, 3)\n     B = BlockMatrix([[I, I], [I, I]])\n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..a7e59bd 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -317,7 +317,42 @@ def test_sign():\n     assert sign(d).func is sign or sign(d) == 0\n \n \n-def test_as_real_imag():\n+def test_sign_rewrite_abs():\n+    from sympy import Symbol, Abs, Piecewise, Eq, I, sign\n+\n+    # Test case for zero value\n+    x = Symbol('x')\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+\n+    # Test case for a function\n+    f = Function('f')\n+    assert sign(f(x)).rewrite(Abs) == Piecewise((0, Eq(f(x), 0)), (f(x)/Abs(f(x)), True))\n+\n+    # Test specific numeric values\n+    assert sign(0).rewrite(Abs) == 0\n+    assert sign(1).rewrite(Abs) == 1\n+    assert sign(-1).rewrite(Abs) == -1\n+    assert sign(I).rewrite(Abs) == I/Abs(I)\n+    assert sign(-2*I).rewrite(Abs) == -2*I/Abs(-2*I)\n+\n+    # Test a real symbol\n+    y = Symbol('y', real=True)\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n+\n+    # Test a purely imaginary symbol\n+    z = Symbol('z', imaginary=True)\n+    assert sign(z).rewrite(Abs) == z/Abs(z)\n+\n+    # Test a non-zero symbol\n+    nz = Symbol('nz', nonzero=True)\n+    assert sign(nz).rewrite(Abs) == nz/Abs(nz)\n+\n+    # Test for piecewise condition with zero\n+    assert sign(0).rewrite(Abs) == 0\n+\n+    # Test for certain functions and expressions\n+    expr = x**2 - 1\n+    assert sign(expr).rewrite(Abs) == Piecewise((0, Eq(expr, 0)), (expr/Abs(expr), True))\n     n = pi**1000\n     # the special code for working out the real\n     # and complex parts of a power with Integer exponent\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..61447ed 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -501,7 +501,19 @@ def test_partitions():\n         i.copy() for i in partitions(4) if all(k <= 3 for k in i)]\n \n \n-    # Consistency check on output of _partitions and RGS_unrank.\n+    # Test to ensure that partitions are not reusing dictionaries.\n+    def test_partition_no_reuse():\n+        # Generate partitions and modify them to see if it affects others\n+        parts = list(partitions(6, k=2))\n+        parts_copy = [p.copy() for p in parts]\n+\n+        # Modify the first partition dictionary\n+        parts[0][2] = 0\n+\n+        # Ensure modifications do not affect the copies\n+        assert parts_copy != parts, \"Partitions should not reuse dictionaries.\"\n+\n+    test_partition_no_reuse()\n     # This provides a sanity test on both routines.  Also verifies that\n     # the total number of partitions is the same in each case.\n     #    (from pkrathmann2)\n",
  "sympy__sympy-20212": "",
  "sympy__sympy-20442": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 6a8906d..f402182 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (Abs, Add, Function, Number, Rational, S, Symbol,\n                    diff, exp, integrate, log, sin, sqrt, symbols)\n from sympy.physics.units import (amount_of_substance, convert_to, find_unit,\n-                                 volume, kilometer)\n+                                 volume, kilometer, joule)\n from sympy.physics.units.definitions import (amu, au, centimeter, coulomb,\n     day, foot, grams, hour, inch, kg, km, m, meter, millimeter,\n     minute, quart, s, second, speed_of_light, bit,\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..9428704 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,7 +28,13 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n-def test_structure():\n+def test_symbol_dict_issue():\n+    # Test that Symbol instances should not have __dict__ attribute\n+    s = Symbol('s')\n+    with pytest.raises(AttributeError):\n+        _ = s.__dict__\n+    assert hasattr(s, '__slots__')\n+    assert s.__slots__ == ('name',)\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n     assert bool(b1)\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..95738c6 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,5 +1,6 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n-                   atan, atan2, nan, Symbol, re, im, sign)\n+                   atan, atan2, nan, Symbol, re, im, sign, sin, Integral, oo, arg)\n from sympy.abc import w, x, y, z\n from sympy.core.relational import Eq, Ne\n from sympy.functions.elementary.piecewise import Piecewise\n@@ -161,7 +162,14 @@ def test_sign():\n     assert refine(sign(x), Q.zero(x)) == 0\n \n \n-def test_func_args():\n+def test_issue_refine_complex_arguments():\n+    a = Symbol('a', real=True)\n+    J = Integral(sin(x) * exp(-a * x), (x, 0, oo))\n+    result = J.doit()\n+    assert result == Piecewise((1 / (a**2 + 1), 2 * Abs(arg(a)) < pi), (Integral(exp(-a*x)*sin(x), (x, 0, oo)), True))\n+    \n+    refined_result = refine(result, Q.positive(a))\n+    assert refined_result == Piecewise((1 / (a**2 + 1), True))\n     class MyClass(Expr):\n         # A class with nontrivial .func\n \n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..1ab9dd4 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -7,6 +8,36 @@ from sympy import (\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n+from sympy import sinh, cosh, tanh, exp, Piecewise, S, Symbol, sqrt\n+\n+def test_issue_21373_subs_polynomial_error():\n+    # Recreate the issue to ensure the fix works and no error is raised\n+\n+    # Test with sinh\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr_sinh = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_sinh.subs({1: 1.0}) is not None  # Should not raise PolynomialError\n+\n+    # Test with cosh\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_cosh.subs({1: 1.0}) is not None  # Should not raise PolynomialError\n+\n+    # Test with tanh\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_tanh.subs({1: 1.0}) is not None  # Should not raise PolynomialError\n+\n+    # Test removing division by z\n+    expr_no_division = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    assert expr_no_division.subs({1: 1.0}) is not None  # Should not raise PolynomialError\n+\n+    # Test removing exp\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    assert expr_no_exp.subs({1: 1.0}) is not None  # Should not raise PolynomialError\n+\n+    # Test with non-real symbol z\n+    z_noreal = Symbol('z_noreal')\n+    expr_non_real_z = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_noreal))\n+    assert expr_non_real_z.subs({1: 1.0}) is not None  # Should not raise PolynomialError\n \n def test_subs():\n     n3 = Rational(3)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..10b7de4 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,4 +1,5 @@\n-from sympy.core.add import Add\n+\n+from sympy.core.function import Derivative\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n@@ -45,7 +46,10 @@ def test_Matrix_kind():\n         m = cls.zeros(3, 2)\n         assert m.kind is MatrixKind(NumberKind)\n \n-def test_MatMul_kind():\n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2,2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)\n     M = Matrix([[1,2],[3,4]])\n     assert MatMul(2, M).kind is MatrixKind(NumberKind)\n     assert MatMul(comm_x, M).kind is MatrixKind(NumberKind)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..76acdd9 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -131,6 +131,24 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n+    x, y, z = symbols('x y z', commutative=True)\n+\n+    # Test case for the reported issue with min_degrees and max_degrees both set to 3\n+    assert set(itermonomials([x, y, z], 3, 3)) == {\n+        x**3, y**3, z**3, x**2*y, x**2*z, x*y**2, y**2*z, y*z**2, z**2*x, x*y*z\n+    }\n+\n+    # Test increasing max_degrees above min_degrees\n+    assert set(itermonomials([x, y, z], 4, 3)) == {\n+        x**3, y**3, z**3, x**2*y, x**2*z, x*y**2, y**2*z, y*z**2, z**2*x, x*y*z,\n+        x**4, y**4, z**4, x**3*y, x**3*z, x**2*y**2, x**2*y*z, x**2*z**2,\n+        x*y**3, x*y**2*z, x*y*z**2, x*z**3, y**3*z, y**2*z**2, y*z**3\n+    }\n+\n+    # Additional test cases to verify behavior with min_degrees and max_degrees\n+    assert set(itermonomials([x, y], 2, 1)) == {x, y, x**2, x*y, y**2}\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, y**2, x**2*y, x*y**2, y**3, x**3, x*y**2, y**3, x**2*y}\n+\n     i, j, k = symbols('i j k', commutative=False)\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..f122f21 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -49,8 +50,20 @@ def test_solve_poly_system():\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n \n+def test_solve_infinite_solution_detection():\n+    from sympy import Poly\n+\n+    # The following tests check for raising NotImplementedError for systems with potentially infinite solutions\n+    raises(NotImplementedError, lambda: solve_poly_system([x-1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system([y-1], (x, y)))\n+\n+    # Additional tests to ensure correct behavior for edge cases\n+    raises(NotImplementedError, lambda: solve_poly_system([x - y, y - 1], (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system([2*x - 2, y - x], (x, y)))\n \n-def test_solve_biquadratic():\n+    # Cases that are still zero-dimensional and should not raise an error\n+    assert solve_poly_system([x - 1, y - 2], (x, y)) == [(1, 2)]\n+    assert solve_poly_system([x**2 - 1, y - x], (x, y)) == [(1, 1), (-1, -1)]\n     x0, y0, x1, y1, r = symbols('x0 y0 x1 y1 r')\n \n     f_1 = (x - 1)**2 + (y - 1)**2 - r**2\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..89459de 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,7 @@\n+\n from sympy.core.basic import Basic\n+from sympy.core.parameters import evaluate\n+from sympy.geometry import Point2D\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..412ace3 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -337,6 +337,29 @@ def test_cse_Indexed():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n+def test_cse_MatrixSymbol_indexing():\n+    from sympy import MatrixSymbol, Matrix, symbols\n+    from sympy.simplify.cse_main import cse\n+\n+    # Create MatrixSymbols\n+    a = MatrixSymbol(\"a\", 4, 4)\n+    b = MatrixSymbol(\"b\", 4, 4)\n+\n+    # Create expressions using these MatrixSymbols\n+    expr = a * b\n+    expr_with_symbols = sub_in_matrixsymbols(expr, [a, b])\n+\n+    # Test CSE on the modified expression\n+    cse_subs, cse_reduced = cse(expr_with_symbols)\n+\n+    # Ensure that the CSE substitutions are as expected\n+    assert len(cse_subs) > 0\n+    assert isinstance(cse_reduced[0], Matrix)\n+\n+    # Ensure CSE does not just copy whole matrices without simplification\n+    assert all(not isinstance(sub[1], MatrixSymbol) for sub in cse_subs)\n+    assert all(isinstance(sub[0], symbols) for sub in cse_subs)\n+\n \n def test_cse_MatrixSymbol():\n     # MatrixSymbols have non-Basic args, so make sure that works\n@@ -356,6 +379,29 @@ def test_cse_MatrixExpr():\n     replacements, reduced_exprs = cse([expr1, expr2])\n     assert len(replacements) > 0\n \n+def test_cse_MatrixSymbol_indexing():\n+    from sympy import MatrixSymbol, Matrix, symbols\n+    from sympy.simplify.cse_main import cse\n+\n+    # Create MatrixSymbols\n+    a = MatrixSymbol(\"a\", 4, 4)\n+    b = MatrixSymbol(\"b\", 4, 4)\n+\n+    # Create expressions using these MatrixSymbols\n+    expr = a * b\n+    expr_with_symbols = sub_in_matrixsymbols(expr, [a, b])\n+\n+    # Test CSE on the modified expression\n+    cse_subs, cse_reduced = cse(expr_with_symbols)\n+\n+    # Ensure that the CSE substitutions are as expected\n+    assert len(cse_subs) > 0\n+    assert isinstance(cse_reduced[0], Matrix)\n+\n+    # Ensure CSE does not just copy whole matrices without simplification\n+    assert all(not isinstance(sub[1], MatrixSymbol) for sub in cse_subs)\n+    assert all(isinstance(sub[0], symbols) for sub in cse_subs)\n+\n     replacements, reduced_exprs = cse([expr1 + expr2, expr1])\n     assert replacements\n \n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..3f8def5 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -9,6 +10,7 @@ from sympy.tensor.array.sparse_ndim_array import (\n     ImmutableSparseNDimArray, MutableSparseNDimArray)\n \n from sympy.abc import x, y\n+from sympy.tensor.array import ImmutableDenseNDimArray, MutableDenseNDimArray, ImmutableSparseNDimArray, MutableSparseNDimArray\n \n array_types = [\n     ImmutableDenseNDimArray,\n@@ -36,9 +38,19 @@ def test_array_negative_indices():\n         raises(ValueError, lambda: test_array[-3, :])\n \n         assert test_array[-1, -1] == 10\n+def test_issue_17851():\n+    for array_type in array_types:\n+        A = array_type([])\n+        assert isinstance(A, array_type)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n \n-\n-def test_issue_18361():\n+def test_issue_18715():\n+    mutable_array_types = [MutableDenseNDimArray, MutableSparseNDimArray]\n+    for array_type in mutable_array_types:\n+        A = array_type([0, 1, 2])\n+        A[0] += 5\n+        assert A[0] == 5\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n     B = Array([sin(x)**2 + cos(x)**2, 0])\n     C = Array([(x + x**2)/(x*sin(y)**2 + x*cos(y)**2), 2*sin(x)*cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..8557325 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,7 +1175,13 @@ def test_scipy_polys():\n \n \n \n-def test_lambdify_inspect():\n+def test_issue_single_element_tuple():\n+    # Test for single-element tuple\n+    f_single_tuple = lambdify([], (1,))\n+    assert f_single_tuple() == (1,)\n+    # Ensure source code has the correct comma for single-element tuple\n+    source_code = inspect.getsource(f_single_tuple)\n+    assert 'return (1,)' in source_code\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..d11e630 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,6 +541,30 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units.quantities import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..d7f3240 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,8 +45,26 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n-\n-def test_tensor_product_commutator():\n+def test_tensor_product_issue_24142():\n+    # Test cases for the fix of issue #24142\n+    \n+    assert TP(A - B, B - A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+        \n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+        \n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n+        \n+    # Additional test cases to ensure expanded terms with scalar factors work correctly\n+    U = Operator('U')\n+    V = Operator('V')\n+    assert TP(2*U - V, U + V).expand(tensorproduct=True) == \\\n+        2*TP(U, U) + 2*TP(U, V) - TP(V, U) - TP(V, V)\n+        \n+    assert TP(3*U + 4*V, U - 5*V).expand(tensorproduct=True) == \\\n+        3*TP(U, U) - 15*TP(U, V) + 4*TP(V, U) - 20*TP(V, V)\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..517fcc4 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -562,7 +563,40 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+from sympy.physics.units import time, velocity, acceleration, second, meter, Quantity\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_collect_factor_and_dimension_equivalence():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 3 * meter / second)\n+    \n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 2 * second)\n+\n+    expr = A1*T1 + V1\n+    # should also not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..d48887a 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,6 +28,9 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n+    # Test for bug with milli prefix\n+    assert milli * W == W / 1000\n+\n     m = Quantity(\"fake_meter\")\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n",
  "django__django-12470": "",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..9da5524 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -330,8 +330,38 @@ class OrderingTests(TestCase):\n         for i in range(1, 5):\n             author = Author.objects.get(pk=i)\n             article = getattr(self, \"a%d\" % (5 - i))\n-            article.author = author\n-            article.save(update_fields={'author'})\n+from django.test import TestCase\n+from django.db.models import F\n+from .models import Author, Article\n+\n+class OrderBySelfReferentialFKTest(TestCase):\n+    def setUp(self):\n+        self.author_1 = Author.objects.create(name=\"Author 1\")\n+        self.author_2 = Author.objects.create(name=\"Author 2\")\n+        self.a1 = Article.objects.create(headline=\"Article 1\", author=self.author_1)\n+        self.a2 = Article.objects.create(headline=\"Article 2\", author=self.author_2)\n+\n+    def test_order_by_self_referential_fk(self):\n+        self.author_1.editor = Author.objects.create(name=\"Editor 1\")\n+        self.author_1.save()\n+        self.author_2.editor = Author.objects.create(name=\"Editor 2\")\n+        self.author_2.save()\n+        \n+        # Test sorting by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            [self.a2, self.a1],\n+            transform=lambda x: x.headline,\n+            ordered=False\n+        )\n+        \n+        # Test sorting by self-referential foreign key ID\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            [self.a1, self.a2],\n+            transform=lambda x: x.headline,\n+            ordered=True\n+        )\n \n         self.assertQuerysetEqual(\n             Article.objects.order_by('author_id'), [\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..4aa2cf1 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,21 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_uses_option_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the id set by ChoiceWidget.options.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        # Assuming the fix has been applied, these should reflect the provided auto_id\n+        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..2341909 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -658,7 +658,43 @@ def test_colorbar_scale_reset():\n     assert cbar.outline.get_edgecolor() == mcolors.to_rgba('red')\n \n \n-def test_colorbar_get_ticks_2():\n+def test_colorbar_update_after_norm_change():\n+    import matplotlib.pyplot as plt\n+    from matplotlib.colors import Normalize, LogNorm\n+    import numpy as np\n+\n+    # Create data\n+    z = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    # Create plot and colorbar\n+    fig, ax = plt.subplots()\n+    pcm = ax.imshow(z, cmap='gray')\n+    cbar = fig.colorbar(pcm, ax=ax)\n+\n+    # Initially, the scale should be linear\n+    assert cbar.ax.yaxis.get_scale() == 'linear'\n+\n+    # Change the norm to LogNorm and update the colorbar\n+    pcm.set_norm(LogNorm())\n+    fig.canvas.draw()\n+    \n+    # Now, the scale should be logarithmic\n+    assert cbar.ax.yaxis.get_scale() == 'log'\n+\n+    # Check if colorbar ticks are updated correctly\n+    ticks = cbar.get_ticks()\n+    assert len(ticks) > 0  # Ensure there are ticks\n+    assert ticks[0] > 0  # Log scale should not have zero or negative ticks\n+\n+    # Reset the norm to linear\n+    pcm.set_norm(Normalize())\n+    fig.canvas.draw()\n+\n+    # Confirm the colorbar scale is back to linear\n+    assert cbar.ax.yaxis.get_scale() == 'linear'\n+\n+    # Close the plot to avoid resource warning\n+    plt.close(fig)\n     plt.rcParams['_internal.classic_mode'] = False\n     fig, ax = plt.subplots()\n     pc = ax.pcolormesh([[.05, .95]])\n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..073a37e 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -251,12 +251,93 @@ def test_set_output_mro():\n \n     class A(Base):\n         pass\n+import pytest\n+import pandas as pd\n+from sklearn.pipeline import make_union\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn import set_config\n+\n+class MyTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+        return self\n \n+    def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+        return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+def test_feature_union_pandas_output_with_aggregation():\n+    \"\"\"Test FeatureUnion with pandas output and aggregation in custom transformer.\"\"\"\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    set_config(transform_output=\"pandas\")\n+    \n+    union = make_union(MyTransformer())\n+    result = union.fit_transform(data)\n+    \n+    # Check if the output is a pandas DataFrame\n+    assert isinstance(result, pd.DataFrame)\n+    # Check if the aggregated result has the correct length\n+    assert len(result) == len(data[\"date\"].unique())\n     class B(Base):\n         def transform(self, X):\n             return \"B\"\n+import pytest\n+import pandas as pd\n+from sklearn.pipeline import make_union\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn import set_config\n \n+class MyTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+        return self\n+\n+    def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+        return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+def test_feature_union_pandas_output_with_aggregation():\n+    \"\"\"Test FeatureUnion with pandas output and aggregation in custom transformer.\"\"\"\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    set_config(transform_output=\"pandas\")\n+    \n+    union = make_union(MyTransformer())\n+    result = union.fit_transform(data)\n+    \n+    # Check if the output is a pandas DataFrame\n+    assert isinstance(result, pd.DataFrame)\n+    # Check if the aggregated result has the correct length\n+    assert len(result) == len(data[\"date\"].unique())\n     class C(A, B):\n         pass\n+import pytest\n+import pandas as pd\n+from sklearn.pipeline import make_union\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn import set_config\n+\n+class MyTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+        return self\n \n-    assert C().transform(None) == \"B\"\n+    def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+        return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+def test_feature_union_pandas_output_with_aggregation():\n+    \"\"\"Test FeatureUnion with pandas output and aggregation in custom transformer.\"\"\"\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    set_config(transform_output=\"pandas\")\n+    \n+    union = make_union(MyTransformer())\n+    result = union.fit_transform(data)\n+    \n+    # Check if the output is a pandas DataFrame\n+    assert isinstance(result, pd.DataFrame)\n+    # Check if the aggregated result has the correct length\n+    assert len(result) == len(data[\"date\"].unique())\n+    assert C().transform(None) == \"B\"\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..1000ef5 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -131,6 +131,31 @@ def test_decorators(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_annotation_only_inherited_members(app):\n+    options = {\"members\": None,\n+               \"inherited-members\": True}\n+    actual = do_autodoc(app, 'class', 'target.uninitialized_attributes.Derived', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: Derived()',\n+        '   :module: target.uninitialized_attributes',\n+        '',\n+        '',\n+        '   .. py:attribute:: Derived.attr1',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+        '',\n+        '   .. py:attribute:: Derived.attr3',\n+        '      :module: target.uninitialized_attributes',\n+        '      :type: int',\n+        '',\n+        '      docstring',\n+        '',\n+    ]\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_slots_attribute(app):\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..dae2a95 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -358,7 +359,26 @@ def test_issue_2827_trigsimp_methods():\n     assert exptrigsimp(eq) == eq\n \n \n-def test_exptrigsimp():\n+def test_issue_15129_trigsimp_methods():\n+    # Test matrices with trigonometric functions involving Rational\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    t3 = Matrix([cos(Rational(1, 25)), sin(Rational(1, 25)), 0])\n+    \n+    r1 = t1.dot(t2)\n+    r2 = t1.dot(t3)\n+    \n+    # Verify that trigsimp returns expected simplifications\n+    assert trigsimp(r1) == cos(S(1)/50)\n+    assert trigsimp(r2) == sin(S(3)/50)\n+\n+    # Additional checks for direct trigonometric expressions\n+    expr = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))\n+    assert trigsimp(expr) == cos(S(1)/25 - S(1/50))\n+\n+    # Check acos of the expression to ensure no simplification error\n+    acos_expr = acos(expr)\n+    assert acos_expr.simplify() == acos(cos(S(1)/25 - S(1/50)))\n     def valid(a, b):\n         from sympy.utilities.randtest import verify_numerically as tn\n         if not (tn(a, b) and a == b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..5ab1067 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4862,8 +4862,25 @@ k = \u2500\u2500\u2500\u2500\u2500                                \\n\\\n     assert pretty(expr) == ascii_str\n     assert upretty(expr) == ucode_str\n \n+def test_sum_with_addition_alignment():\n+    from sympy import Sum, oo, pprint\n+    from sympy.abc import x\n+    \n+    expr = Sum(x, (x, 1, oo)) + 3\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e   \\n\\\n+ ___  \\n\\\n+ \u2572    \\n\\\n+  \u2572   x\\n\\\n+  \u2571   \\n\\\n+ \u2571    \\n\\\n+ \u203e\u203e\u203e  \\n\\\n+x = 1 \\n\\\n+  + 3 \\\n+\"\"\")\n \n-def test_units():\n+    assert upretty(expr) == ucode_str\n     expr = joule\n     ascii_str1 = \\\n \"\"\"\\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..43965e9 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,7 +692,19 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.iterables import uniq\n+from sympy.utilities.pytest import raises\n+\n def test_uniq():\n+    # Test for RuntimeError when modifying the list during iteration\n+    f = list('THISTLE')\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    f = [1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+\n+    f = [[1]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     assert list(uniq(x % 2 for x in range(5))) == [0, 1]\n",
  "django__django-11797": "",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..550559f 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -545,8 +545,33 @@ class BasicExpressionsTests(TestCase):\n         self.assertCountEqual(subquery_test, [self.foobar_ltd, self.gmbh])\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n-\n-    def test_uuid_pk_subquery(self):\n+    def test_subquery_sql(self):\n+        # Import necessary functions and classes\n+        from django.db import connection\n+        from apps.models import Employee, Company  # Assuming models are imported from apps.models\n+\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        \n+        # Check the subquery attribute\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        self.assertIs(employees.query.subquery, False)\n+\n+        # Compile and check SQL\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql)\n+\n+        # Test direct SQL string without the attribute set\n+        q = Subquery(Company.objects.all())\n+        sql_no_subquery_attr, _ = q.as_sql(q.query.get_compiler('default'), connection)\n+        self.assertNotIn('(SELECT ', sql_no_subquery_attr)\n+        self.assertNotIn('SELECT ', sql_no_subquery_attr[0])  # SQL should be malformed\n+\n+        # Set the subquery attribute and check again\n+        q.query.subquery = True\n+        sql_with_subquery_attr, _ = q.as_sql(q.query.get_compiler('default'), connection)\n+        self.assertIn('(SELECT ', sql_with_subquery_attr)\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n         qs = UUIDPK.objects.filter(id__in=Subquery(UUID.objects.values('uuid_fk__id')))\n",
  "django__django-15819": "",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..90ea0f4 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -27,8 +28,32 @@ class ExistingRelatedInstancesTests(TestCase):\n         cls.ps3 = PoolStyle.objects.create(\n             name=\"T1 Pool 1/3 Style\", pool=cls.p1, another_pool=cls.p3\n         )\n+    def test_wrong_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(PoolStyle.objects.annotate(\n+                tournament_pool=FilteredRelation('pool__tournament__pool'),\n+            ).select_related('tournament_pool'))\n+            self.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\n+\n+    def test_multilevel_reverse_fk_cyclic_select_related(self):\n+        with self.assertNumQueries(3):\n+            p = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation(\"pool__tournament__pool\"),\n+                ).select_related(\"tournament_pool\", \"tournament_pool__tournament\")\n+            )\n+            self.assertEqual(p[0].tournament_pool.tournament, p[0].pool.tournament)\n \n-    def test_foreign_key(self):\n+    def test_multilevel_reverse_fk_select_related(self):\n+        with self.assertNumQueries(2):\n+            p = list(\n+                Tournament.objects.filter(id=self.t2.id)\n+                .annotate(\n+                    style=FilteredRelation(\"pool__another_style\"),\n+                )\n+                .select_related(\"style\")\n+            )\n+            self.assertEqual(p[0].style.another_pool, self.p3)\n         with self.assertNumQueries(2):\n             tournament = Tournament.objects.get(pk=self.t1.pk)\n             pool = tournament.pool_set.all()[0]\n@@ -163,4 +188,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..5523cfe 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -5,12 +6,69 @@ from pathlib import Path\n import platform\n from threading import Timer\n from types import SimpleNamespace\n+import pickle\n import warnings\n-\n+def test_unpickle_with_device_pixel_ratio():\n+    fig = Figure(dpi=42)\n+    fig.canvas._set_device_pixel_ratio(7)\n+    assert fig.dpi == 42 * 7\n+    fig2 = pickle.loads(pickle.dumps(fig))\n+    assert fig2.dpi == 42\n+\n+def test_figure_dpi_post_unpickle():\n+    import matplotlib.pyplot as plt\n+\n+    # Create a figure and store its initial DPI\n+    fig = plt.figure(dpi=200)\n+    \n+    # Serialize and deserialize the figure\n+    fig2 = pickle.loads(pickle.dumps(fig))\n+    \n+    # Assert the DPI remains unchanged after unpickling\n+    assert fig2.dpi == fig.dpi\n+\n+def test_figure_dpi_unpickle_loop():\n+    import matplotlib.pyplot as plt\n+\n+    fig = plt.figure(dpi=200)\n+    initial_dpi = fig.dpi\n+\n+    # Serialize and deserialize the figure multiple times\n+    for _ in range(32):\n+        fig = pickle.loads(pickle.dumps(fig))\n+        assert fig.dpi == initial_dpi\n import numpy as np\n import pytest\n from PIL import Image\n-\n+def test_unpickle_with_device_pixel_ratio():\n+    fig = Figure(dpi=42)\n+    fig.canvas._set_device_pixel_ratio(7)\n+    assert fig.dpi == 42 * 7\n+    fig2 = pickle.loads(pickle.dumps(fig))\n+    assert fig2.dpi == 42\n+\n+def test_figure_dpi_post_unpickle():\n+    import matplotlib.pyplot as plt\n+\n+    # Create a figure and store its initial DPI\n+    fig = plt.figure(dpi=200)\n+    \n+    # Serialize and deserialize the figure\n+    fig2 = pickle.loads(pickle.dumps(fig))\n+    \n+    # Assert the DPI remains unchanged after unpickling\n+    assert fig2.dpi == fig.dpi\n+\n+def test_figure_dpi_unpickle_loop():\n+    import matplotlib.pyplot as plt\n+\n+    fig = plt.figure(dpi=200)\n+    initial_dpi = fig.dpi\n+\n+    # Serialize and deserialize the figure multiple times\n+    for _ in range(32):\n+        fig = pickle.loads(pickle.dumps(fig))\n+        assert fig.dpi == initial_dpi\n import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..347a8dc 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -1623,7 +1624,19 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_hue_map_categorical(self):\n+        import seaborn as sns\n+        iris = sns.load_dataset(\"iris\")\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\",\"sepal_width\"], x_vars=[\"petal_length\",\"petal_width\"])\n+        # Test that using `hue` with `map` does not raise an error\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            error_raised = False\n+        except Exception as e:\n+            error_raised = True\n+        assert not error_raised, \"Using `hue` in `map` raised an error\"\n+\n+        # Further checks can be added here, such as verifying the plot visually or checking properties\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..60396a5 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -347,6 +347,21 @@ def test_excinfo_str():\n     assert len(s.split(\":\")) >= 3  # on windows it's 4\n \n \n+def test_str_on_raises_context_manager():\n+    import pytest\n+\n+    # This test case corresponds to the issue description.\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+\n+    # Check that str(excinfo) returns the expected string representation.\n+    # This test replicates the behavior described in the issue.\n+    assert str(excinfo) == repr(excinfo)\n+\n+    # Ensure that str(excinfo.value) returns the full message.\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n+\n+\n def test_excinfo_for_later():\n     e = ExceptionInfo.for_later()\n     assert \"for raises\" in repr(e)\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..8965262 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,11 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+        # Test with the new shortcut for --collect-only\n+        result_shortcut = testdir.runpytest(\"--co\")\n+        result_shortcut.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -434,6 +439,11 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n+        # Test with the new shortcut for --collect-only\n+        result_shortcut = testdir.runpytest(\"--co\")\n+        result_shortcut.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..62bd34d 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -90,6 +90,17 @@ def missing_attr(c,\n     # type: (...) -> str\n     return a + (b or \"\")\n \n+class _ClassWithDocumentedInitAndStarArgs:\n+    \"\"\"Class docstring.\"\"\"\n+\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n+\n \n class _ClassWithDocumentedInit:\n     \"\"\"Class docstring.\"\"\"\n@@ -98,4 +109,4 @@ class _ClassWithDocumentedInit:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..7988eda 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,18 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Symbol, symbols, Sum\n \n-def test_Identity_doit():\n+def test_Identity_sum():\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    In = Identity(n)\n+    \n+    # Test case to check the sum of all elements of the identity matrix\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+    \n+    # Additional test case to verify with specific value of n\n+    assert Sum(Sum(In[i, j], (i, 0, 2)), (j, 0, 2)).doit() == 3\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..01a9d18 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,6 +251,21 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n+def test_latex_fraction_parsing_issue():\n+    from sympy.parsing.latex import parse_latex\n+    from sympy import Symbol, Rational, Pow, Add\n+\n+    a = Symbol('a')\n+    b = Symbol('b')\n+    c = Symbol('c')\n+\n+    # Test case for the reported issue\n+    latex_expr = \"\\\\frac{\\\\frac{a^3+b}{c}}{\\\\frac{1}{c^2}}\"\n+    expected_expr = (Add(a**3, b)/c) / Pow(Rational(1, c**2), -1)\n+\n+    parsed_expr = parse_latex(latex_expr)\n+    assert parsed_expr == expected_expr, f\"Failed to parse: {latex_expr}. Got: {parsed_expr}. Expected: {expected_expr}\"\n+\n # These bad LaTeX strings should raise a LaTeXParsingError when parsed\n BAD_STRINGS = [\n     r\"(\",\n"
}