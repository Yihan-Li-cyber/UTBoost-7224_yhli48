{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..b89f2c5 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -49,6 +49,18 @@ compound_models = {\n             (np.array([False, False]),\n              np.array([[True], [True]]))\n             ),\n+    'nested_cm1': (m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5),\n+        (np.array([False, False, True, True]), \n+        np.array([[True,  True, False, False],\n+                  [True,  True, False, False],\n+                  [False, False, True, False],\n+                  [False, False, False, True]]))),\n+    'nested_cm2': (m.Pix2Sky_TAN() & cm,\n+        (np.array([False, False, True, True]), \n+        np.array([[True,  True, False, False],\n+                  [True,  True, False, False],\n+                  [False, False, True, False],\n+                  [False, False, False, True]]))),\n     'cm7': (map2 | p2 & sh1,\n             (np.array([False, True]),\n              np.array([[True, False], [False, True]]))\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..960655f 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -136,9 +136,47 @@ class TestHeaderFunctions(FitsTestCase):\n             \"FLOATNUM= -4.6737463674763E+032\"\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+    def test_floating_point_precision_edge_cases(self):\n+        \"\"\"Additional test cases for edge cases in float precision\"\"\"\n+\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"Test comment for precision edge cases\"\n+\n+        # Test for a case with a small float value\n+        c = fits.Card(k, 1.23e-10, com)\n+        expected_str = f\"{k} = 1.23E-10 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test for a case with a very large float value\n+        c = fits.Card(k, 1.23e+20, com)\n+        expected_str = f\"{k} = 1.23E+20 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n \n-    def test_complex_value_card(self):\n-        \"\"\"Test Card constructor with complex value\"\"\"\n+        # Test for a case right at the edge of floating-point precision\n+        c = fits.Card(k, 1.123456789012345, com)\n+        expected_str = f\"{k} = 1.123456789012345 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n \n         c = fits.Card(\"abc\", (1.2345377437887837487e88 + 6324767364763746367e-33j))\n         f1 = _pad(\"ABC     = (1.23453774378878E+88, 6.32476736476374E-15)\")\n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..a040d74 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,7 +601,46 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_fits_diff_identical_files_with_vla(self):\n+        \"\"\"\n+        Test that FITSDiff reports identical when comparing files with VLA columns\n+        that are actually identical.\n+        \"\"\"\n+\n+        col = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        hdu.writeto('vla_identical_test.fits', overwrite=True)\n+\n+        # Compare the file to itself\n+        assert fits.FITSDiff('vla_identical_test.fits', 'vla_identical_test.fits').identical\n+\n+        # Clean up the test file\n+        os.remove('vla_identical_test.fits')\n+\n+    def test_fits_diff_non_identical_files_with_vla(self):\n+        \"\"\"\n+        Test that FITSDiff reports differences when comparing non-identical files\n+        with VLA columns.\n+        \"\"\"\n+\n+        col1 = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        col2 = fits.Column('a', format='QD', array=[[1], [0, 1]])\n+        hdu1 = fits.BinTableHDU.from_columns([col1])\n+        hdu2 = fits.BinTableHDU.from_columns([col2])\n+        hdu1.writeto('vla_diff_test1.fits', overwrite=True)\n+        hdu2.writeto('vla_diff_test2.fits', overwrite=True)\n+\n+        # Compare the two different files\n+        diff_result = fits.FITSDiff('vla_diff_test1.fits', 'vla_diff_test2.fits')\n+        assert not diff_result.identical\n+\n+        # There should be precise details on where the differences are\n+        report = diff_result.report()\n+        assert \"Column a data differs\" in report\n+\n+        # Clean up the test files\n+        os.remove('vla_diff_test1.fits')\n+        os.remove('vla_diff_test2.fits')\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..9359d63 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,20 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings_with_properties():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return 0\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 42\n \n-def test_set_locale():\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..8d5f801 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -168,6 +168,15 @@ def test_multiple_solidus():\n     assert 'm/s/kg' in str(warning_lines[0].message)\n     assert 'discouraged' in str(warning_lines[0].message)\n \n+def test_unit_equality_with_none():\n+    # Test for the issue where UnrecognizedUnit compared with None should be False\n+    unit = u.Unit('asdf', parse_strict='silent')\n+    assert unit != None  # This should not raise TypeError, but return False\n+    \n+    assert unit == unit  # Comparing with self should be True\n+    assert not unit == None  # Ensure that comparison with None is False with '=='\n+    assert unit is not None  # Additional test that `is not` should naturally work\n+\n     with pytest.raises(ValueError):\n         u.Unit(\"m/s/kg\", format=\"vounit\")\n \n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..b7b908a 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -68,8 +68,18 @@ def test_minversion():\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n-    bad_versions = ['1', '1.2rc1']\n+    bad_versions = ['1', '1.2rc1', '0.12a1']\n+\n+    # Testing compatibility with LooseVersion issue\n+    test_module.__version__ = '1.14.3'\n+    special_versions = ['1.14dev', '1.14.3dev0']\n+    for version in special_versions:\n+        assert not minversion(test_module, version)\n+    assert minversion(test_module, '1.13')\n+    assert minversion(test_module, '1.14')\n+    assert minversion(test_module, '1.14.3')\n+    assert not minversion(test_module, '1.15')\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..5010e9f 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -77,7 +77,43 @@ class TestHeaderFunctions(FitsTestCase):\n         assert 'B' in header\n         assert header[0] == 'B'\n         assert header['B'] == 'B'\n-        assert header.comments['B'] == 'C'\n+import pytest\n+from astropy.io import fits\n+from astropy.io.fits.card import Card\n+from astropy.io.fits.header import Header\n+from astropy.tests.helper import FitsTestCase\n+\n+...\n+\n+class TestHeaderByteCompatibility(FitsTestCase):\n+    def test_header_fromstring_unicode(self):\n+        \"\"\"Test reading a Header from a `str` (unicode) string.\"\"\"\n+        header_str = \"SIMPLE  =                    T / conforms to FITS standard\\n\" \\\n+                     \"BITPIX  =                   8 / array data type\\n\" \\\n+                     \"NAXIS   =                    0 / no data\\n\" \\\n+                     \"END\\n\"\n+        header = Header.fromstring(header_str)\n+        assert header['SIMPLE'] == True\n+        assert header['NAXIS'] == 0\n+\n+    def test_card_from_unicode(self):\n+        \"\"\"Test loading a Card from a `str` (unicode) object.\"\"\"\n+        card_str = \"SIMPLE  = T\"\n+        c = Card.fromstring(card_str)\n+        assert c.keyword == 'SIMPLE'\n+        assert c.value == True\n+\n+    def test_header_fromstring_mixed(self):\n+        \"\"\"Test reading a Header from a `bytes` and `str` mixture.\"\"\"\n+        header_str = b\"SIMPLE  = T\\nBITPIX  = 8\"\n+        header = Header.fromstring(header_str.decode('ascii'))\n+        assert header['SIMPLE'] == True\n+        assert header['BITPIX'] == 8\n+\n+    def test_card_from_bytes_with_non_ascii(self):\n+        \"\"\"Test that a non-ASCII bytes value in a Card raises an error.\"\"\"\n+        with pytest.raises(UnicodeDecodeError):\n+            Card.fromstring(b\"ABC     = '\\x80abc'\")\n \n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..a0c1ad4 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -149,6 +149,31 @@ class TestQuantityCreation:\n \n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n+    def test_float16_preservation(self):\n+        \"\"\"Test that np.float16 is preserved in Quantity creation.\"\"\"\n+        # Create a float16 array and convert it to a Quantity\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        \n+        # Assert that the dtype of the Quantity matches the original array dtype\n+        assert q3_16.dtype == a3_16.dtype\n+\n+    def test_float_dtypes(self):\n+        \"\"\"Test that float32, float64, and float128 dtypes are preserved.\"\"\"\n+        # Create float32, float64, and float128 arrays and convert them to Quantities\n+        a_float32 = np.array([1., 2.], dtype=np.float32)\n+        q_float32 = u.Quantity(a_float32, u.km)\n+        assert q_float32.dtype == a_float32.dtype\n+\n+        a_float64 = np.array([1., 2.], dtype=np.float64)\n+        q_float64 = u.Quantity(a_float64, u.km)\n+        assert q_float64.dtype == a_float64.dtype\n+\n+        # Ensure the test environment supports float128\n+        if hasattr(np, 'float128'):\n+            a_float128 = np.array([1., 2.], dtype=np.float128)\n+            q_float128 = u.Quantity(a_float128, u.km)\n+            assert q_float128.dtype == a_float128.dtype\n \n     def test_copy(self):\n \n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..5b372f1 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -225,7 +225,14 @@ TEST_DATA = [\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n \n-    (BaseValidator(True), True, None),\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n     (BaseValidator(True), False, ValidationError),\n \n     (RegexValidator(), '', None),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..14f8961 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -9,6 +10,7 @@ from django.db.models import (\n     Max, Min, Sum, Value,\n )\n from django.test import TestCase\n+from django.db.models.expressions import Case, When\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n",
  "django__django-10914": "diff --git a/tests/file_uploads/tests.py b/tests/file_uploads/tests.py\nindex edc5fba..dc154e3 100644\n--- a/tests/file_uploads/tests.py\n+++ b/tests/file_uploads/tests.py\n@@ -14,7 +14,9 @@ from django.http.multipartparser import (\n     MultiPartParser, MultiPartParserError, parse_header,\n )\n from django.test import SimpleTestCase, TestCase, client, override_settings\n-\n+import os\n+import tempfile\n+import shutil\n from . import uploadhandler\n from .models import FileModel\n \n@@ -36,6 +38,28 @@ class FileUploadTests(TestCase):\n         shutil.rmtree(MEDIA_ROOT)\n         super().tearDownClass()\n \n+    def test_default_upload_permissions(self):\n+        \"\"\"\n+        Test that the default file upload permissions are set to 0o644.\n+        \"\"\"\n+        with tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n+            tmp_file.write(b\"Dummy file content\")\n+            tmp_file_name = tmp_file.name\n+\n+        with open(tmp_file_name, 'rb') as fp:\n+            post_data = {\n+                'name': 'George',\n+                'file_field': fp,\n+            }\n+            self.client.post('/upload/', post_data)\n+\n+        uploaded_file_path = os.path.join(MEDIA_ROOT, 'test_upload')\n+        uploaded_files = os.listdir(uploaded_file_path)\n+\n+        self.assertTrue(uploaded_files, \"No file was uploaded.\")\n+        uploaded_file_full_path = os.path.join(uploaded_file_path, uploaded_files[0])\n+        self.assertEqual(oct(os.stat(uploaded_file_full_path).st_mode)[-3:], '644')\n+\n     def test_simple_upload(self):\n         with open(__file__, 'rb') as fp:\n             post_data = {\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..3ab24aa 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,3 +1,4 @@\n+\n import os\n import signal\n from unittest import mock\n@@ -8,7 +9,25 @@ from django.test import SimpleTestCase\n \n class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n \n-    def _run_it(self, dbinfo):\n+    def _run_it_with_subprocess_run(self, dbinfo):\n+        \"\"\"\n+        This function is similar to _run_it but uses subprocess.run\n+        and returns a 2-tuple with:\n+        - The command line list\n+        - The value of the PGPASSWORD environment variable, or None.\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.subprocess_args = list(*args)\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(self.subprocess_args, 0)\n+        \n+        self.subprocess_args = None\n+        self.pgpassword = None\n+        \n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db(dbinfo)\n+        \n+        return self.subprocess_args, self.pgpassword\n         \"\"\"\n         That function invokes the runshell command, while mocking\n         subprocess.call. It returns a 2-tuple with:\n@@ -29,7 +48,32 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n-    def test_basic(self):\n+    def test_basic_with_run(self):\n+        self.assertEqual(\n+            self._run_it_with_subprocess_run({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': 'somepassword',\n+                'host': 'somehost',\n+                'port': '444',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                'somepassword',\n+            )\n+        )\n+\n+    def test_nopass_with_run(self):\n+        self.assertEqual(\n+            self._run_it_with_subprocess_run({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None,\n+            )\n+        )\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +157,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..a24cd48 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -5,6 +5,8 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n+from django.contrib.contenttypes.models import ContentType\n+from django.core.management import call_command\n \n \n @override_settings(\n@@ -55,7 +57,21 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_content_type_rename_conflict(self):\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        # Create content type in the 'other' database\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+\n+        # Perform renaming migration in the 'other' database\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+\n+        # Revert migration in the 'other' database\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         ContentType.objects.create(app_label='contenttypes_tests', model='renamedfoo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0)\n@@ -63,4 +79,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..b2e269f 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,35 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inlines(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+        request = type('Request', (), {})()  # Mock request object\n+\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+        for name, inline_class in (('alternate', AlternateInline), ('media', MediaInline)):\n+            request.name = name\n+            self.assertEqual(ma.get_inlines(request, None), (inline_class,))\n+            inline_instances = ma.get_inline_instances(request)\n+            self.assertEqual(len(inline_instances), 1)\n+            self.assertEqual(type(inline_instances[0]), inline_class)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..416361d 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,8 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            'trailingnewline\\n', 'justnewline\\n'\n+            'trailingnewline\\n', 'endingwith\\r\\n'\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -258,4 +260,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..ad606d7 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -15,14 +15,24 @@ class RenderToStringTest(SimpleTestCase):\n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n-    def test_basic_context(self):\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n         self.assertEqual(\n             self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n             'obj:test\\n',\n         )\n \n \n-class GetDefaultTests(SimpleTestCase):\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<em>'}),\n+            'obj:<em>\\n',\n+        )\n \n     @override_settings(TEMPLATES=[])\n     def test_no_engines_configured(self):\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..0b898b0 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -278,6 +278,26 @@ class QueryDictTests(SimpleTestCase):\n         expected['\u028e\u01dd\u029e'] = '\u01ddnl\u0250\u028c'\n         self.assertEqual(q, expected)\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_multiple_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'start') + memoryview(b'end'))\n+        self.assertEqual(r.content, b'startend')\n+\n+    def test_empty_memoryview_content(self):\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_mixed_content_types(self):\n+        r = HttpResponse(memoryview(b'start') + b'middle' + memoryview(b'end'))\n+        self.assertEqual(r.content, b'startmiddleend')\n+\n+    def test_memoryview_with_non_memoryview(self):\n+        r = HttpResponse(memoryview(b'start') + 'middle' + memoryview(b'end'))\n+        self.assertEqual(r.content, b'startmiddleend')\n+\n     def test_fromkeys_empty_iterable(self):\n         self.assertEqual(QueryDict.fromkeys([]), QueryDict(''))\n \n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..09d1946 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -501,6 +501,17 @@ class LoaderTests(TestCase):\n         self.assertEqual(plan, expected_plan)\n \n     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_private'})\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n     def test_ignore_files(self):\n         \"\"\"Files prefixed with underscore, tilde, or dot aren't loaded.\"\"\"\n         loader = MigrationLoader(connection)\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..9aa4e16 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -564,6 +564,11 @@ class TestInlineProtectedOnDelete(TestDataMixin, TestCase):\n                             % (chapter, foot_note))\n \n \n+from django.contrib.auth.models import Permission\n+from django.test import TestCase\n+from django.urls import reverse\n+from .models import Author, Book, Holder2, Inner2\n+\n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n class TestInlinePermissions(TestCase):\n     \"\"\"\n@@ -773,6 +778,39 @@ class TestInlinePermissions(TestCase):\n         )\n         self.assertContains(response, 'id=\"id_inner2_set-0-DELETE\"')\n \n+    def test_inline_add_m2m_view_only_perm(self):\n+        # Add view permission on books\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # Verify view-only inlines are present, but cannot be modified\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+\n+    def test_inline_change_m2m_view_only_perm(self):\n+        # Add view permission on books\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # Verify view-only inlines are present for existing relationships but cannot be modified\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertContains(response, '<p>The inline Book</p>')\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n+\n     def test_inline_change_fk_all_perms(self):\n         permission = Permission.objects.get(codename='add_inner2', content_type=self.inner_ct)\n         self.user.user_permissions.add(permission)\n",
  "django__django-11163": "",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..2585a34 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,8 +1,10 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from django.db.models.deletion import Collector\n \n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..cf2e9ac 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,12 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-201', 2, '0.00'),\n+            ('5e-300', 4, '0.0000'),\n+            ('1e-300', 3, '0.000'),\n+            ('1e-200', 50, '0.' + '0'*49 + '1'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..1477511 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,4 @@\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n@@ -196,7 +197,17 @@ class Comment(models.Model):\n         ordering = ['id']\n \n \n-# Models for lookup ordering tests\n+# Models for specific test case with UUID Primary Key and GFK\n+\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, related_name='bar_objects',\n+                                         on_delete=models.CASCADE, db_index=True)\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class House(models.Model):\n     name = models.CharField(max_length=50)\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..dd95d88 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,6 @@\n import os\n+import os\n+\n import signal\n import subprocess\n from unittest import mock\n@@ -81,6 +83,44 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                {\n+                    'PGSSLMODE': 'verify-ca',\n+                    'PGSSLROOTCERT': 'root.crt',\n+                    'PGSSLCERT': 'client.crt',\n+                    'PGSSLKEY': 'client.key',\n+                }\n+            )\n+        )\n+\n+    def test_ssl_without_certificates(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'testuser',\n+                'host': 'localhost',\n+                'port': '5432',\n+                'sslmode': 'require',\n+            }), (\n+                ['psql', '-U', 'testuser', '-h', 'localhost', '-p', '5432', 'dbname'],\n+                {\n+                    'PGSSLMODE': 'require',\n+                }\n+            )\n+        )\n+\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n",
  "django__django-11265": "",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..48c13f0 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -22,6 +22,8 @@ class TestUtilsHtml(SimpleTestCase):\n         self.assertEqual(function(value), output)\n \n     def test_escape(self):\n+        import html\n+\n         items = (\n             ('&', '&amp;'),\n             ('<', '&lt;'),\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..5d4af81 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,7 +243,28 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n-    def test_disallowed_abbreviated_options(self):\n+    def test_skip_checks(self):\n+        \"\"\"\n+        Verifies that the --skip-checks option successfully skips system checks.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['user_commands'])\n+        # We're assuming 'dummy_check' is a system check that always fails.\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        # Since we passed --skip-checks, no error should be thrown despite 'dummy_check' failing.\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+        \n+    def test_no_skip_checks(self):\n+        \"\"\"\n+        Verifies that without --skip-checks, system checks are not skipped and an error is shown.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['user_commands'])\n+        # Assume 'dummy_check' is a system check that always fails when NOT skipped.\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        # Without the skip option, expect some error output.\n+        self.assertNotEqual(err.strip(), '')\n+        # Just a fail-check can suffice since the dummy check isn't defined elsewhere.\n+        self.assertIn('dummy_check failed', err)\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n         abbreviated forms of the --setting and --pythonpath options.\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..d326502 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,10 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls import reverse\n+from django.urls.base import set_urlconf, get_urlconf\n+from django.conf import settings\n+from unittest import mock\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -8,8 +13,37 @@ class RegexPatternTests(SimpleTestCase):\n     def test_str(self):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n \n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_with_set_urlconf(self):\n+        # Use default URLconf\n+        resolver1 = get_resolver() \n+        \n+        # Simulate request handling by setting ROOT_URLCONF\n+        set_urlconf('urlpatterns.path_urls')\n+        resolver2 = get_resolver()\n+        \n+        self.assertIs(resolver1, resolver2, \"Resolver objects should be the same when set_urlconf is used with the default ROOT_URLCONF\")\n \n-class RoutePatternTests(SimpleTestCase):\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_called_with_none_then_with_urlconf(self):\n+        # Call with None initially\n+        resolver_none = get_resolver(None)\n+        # Call with actual ROOT_URLCONF\n+        resolver_urlconf = get_resolver('urlpatterns.path_urls')\n+        \n+        self.assertIs(resolver_none, resolver_urlconf, \"Resolver should be the same when called with None and ROOT_URLCONF\")\n+        \n+    @mock.patch('django.urls.resolvers.URLResolver._populate')\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_does_not_double_populate(self, mock_populate):\n+        # Ensure _populate is called only once\n+        get_resolver()\n+        set_urlconf('urlpatterns.path_urls')\n+        get_resolver()\n+        \n+        self.assertEqual(mock_populate.call_count, 1, \"_populate should only be called once, even with multiple get_resolver calls\")\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..06730a9 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -226,8 +226,33 @@ class BaseModelBackendTest:\n         authenticate(username='no_such_user', password='test')\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n+from django.test import TestCase, override_settings\n+from django.contrib.auth import get_user_model, authenticate\n+from auth_tests.test_auth_backends import CountingMD5PasswordHasher\n+\n+User = get_user_model()\n \n class ModelBackendTest(BaseModelBackendTest, TestCase):\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_with_none_username_or_password(self):\n+        # Reset hasher call count\n+        CountingMD5PasswordHasher.calls = 0\n+        \n+        # Test scenarios where username or password is None, in which case no DB query should happen.\n+        test_credentials = [\n+            {},\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},\n+            {'password': 'test'},\n+            {'username': None, 'password': None},\n+            {'username': None, 'password': 'test'},\n+            {'username': 'test', 'password': None},\n+        ]\n+        \n+        for credentials in test_credentials:\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n     \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..3fb36f3 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,6 +124,20 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    def test_composed_queries_values_list_columns_change(self):\n+        # Create test data\n+        ReservedName.objects.create(name='a', order=2)\n+        \n+        # Initial QuerySet\n+        qs1 = ReservedName.objects.all()\n+        \n+        # Test changing columns with values_list and union\n+        reserved_name = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name, ('a', 2))\n+        \n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n+\n     def test_union_with_two_annotated_values_list(self):\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..5ca4836 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -16,8 +16,9 @@ from smtplib import SMTP, SMTPAuthenticationError, SMTPException\n from ssl import SSLError\n \n from django.core import mail\n+from unittest.mock import patch\n from django.core.mail import (\n-    EmailMessage, EmailMultiAlternatives, mail_admins, mail_managers,\n+    DNS_NAME, EmailMessage, EmailMultiAlternatives, mail_admins, mail_managers,\n     send_mail, send_mass_mail,\n )\n from django.core.mail.backends import console, dummy, filebased, locmem, smtp\n@@ -363,6 +364,40 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n     def test_none_body(self):\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n+\n+    @patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_handling_in_message_id(self, mocked_getfqdn):\n+        \"\"\"\n+        Test the conversion of a non-ASCII DNS name to punycode for the Message-ID header\n+        when email encoding is set to iso-8859-1.\n+        \"\"\"\n+        # Clear cached DNS_NAME fqdn\n+        delattr(DNS_NAME, '_fqdn')\n+\n+        # Create EmailMessage and set encoding to iso-8859-1\n+        email = EmailMessage('subject', '', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        \n+        # Get the generated message and check the Message-ID\n+        message = email.message()\n+        self.assertIn('@xn--p8s937b', message['Message-ID'])\n+   \n+    @patch('socket.getfqdn', return_value='\u30c6\u30b9\u30c8')\n+    def test_another_non_ascii_dns_handling_in_message_id(self, mocked_getfqdn):\n+        \"\"\"\n+        Test with another non-ASCII value to ensure that hostname conversion to punycode\n+        is handled generally for various scripts.\n+        \"\"\"\n+        # Reinitialize DNS_NAME fqdn to remove the cache value\n+        delattr(DNS_NAME, '_fqdn')\n+\n+        # Create EmailMessage and set encoding to iso-8859-1\n+        email = EmailMessage('A subject', '', 'from@example.com', ['test@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        \n+        # Check that the punycode conversion is as expected\n+        message = email.message()\n+        self.assertIn('@xn--zckzah', message['Message-ID'])\n         self.assertEqual(msg.message().get_payload(), '')\n \n     def test_encoding(self):\n",
  "django__django-11551": "",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..eb93f24 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,7 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n \n \n class OrderingTests(TestCase):\n@@ -456,6 +456,29 @@ class OrderingTests(TestCase):\n         \"\"\"F expressions can be used in Meta.ordering.\"\"\"\n         articles = OrderedByFArticle.objects.all()\n         articles.filter(headline='Article 2').update(author=self.author_2)\n+\n+    def test_order_by_ptr_field_with_default_ordering_by_expression(self):\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(\n+            headline='h1',\n+            pub_date=datetime(2005, 7, 28)\n+        )\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n         articles.filter(headline='Article 3').update(author=self.author_1)\n         self.assertQuerysetEqual(\n             articles, ['Article 1', 'Article 4', 'Article 3', 'Article 2'],\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..66a1a11 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -391,7 +391,24 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_distinct_on_aggregate(self):\n+        for aggregate, expected_result in (\n+            (Avg, 4.125),\n+            (Count, 4),\n+            (Sum, 16.5),\n+        ):\n+            with self.subTest(aggregate=aggregate.__name__):\n+                books = Book.objects.aggregate(ratings=aggregate('rating', distinct=True))\n+                self.assertEqual(books['ratings'], expected_result)\n+                \n+    def test_distinct_on_min_max(self):\n+        for aggregate, expected_result in (\n+            (Min, 3.0),  # Assuming some expected value for Min\n+            (Max, 5.0),  # Assuming some expected value for Max\n+        ):\n+            with self.subTest(aggregate=aggregate.__name__):\n+                books = Book.objects.aggregate(ratings=aggregate('rating', distinct=True))\n+                self.assertEqual(books['ratings'], expected_result)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..65a47a2 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -669,7 +669,30 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, 'testapp', 0, [\"DeleteModel\"])\n         self.assertOperationAttributes(changes, \"testapp\", 0, 0, name=\"Author\")\n \n-    def test_add_field(self):\n+    def test_alter_uuid_to_fk_dependency(self):\n+        \"\"\"\n+        Test case for altering a UUIDField to a ForeignKey and ensuring migration\n+        dependencies are detected correctly.\n+        \"\"\"\n+        app1_initial = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True)),\n+        ])\n+        app2 = ModelState(\"testapp2\", \"App2\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+        ])\n+        app1_altered = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+\n+        changes = self.get_changes([app1_initial, app2], [app1_altered, app2])\n+        self.assertNumberMigrations(changes, \"testapp1\", 1)\n+        self.assertOperationTypes(changes, \"testapp1\", 0, [\"AlterField\"])\n+        self.assertMigrationDependencies(changes, \"testapp1\", 0, [(\"testapp2\", \"__first__\")])\n         \"\"\"Tests autodetection of new fields.\"\"\"\n         changes = self.get_changes([self.author_empty], [self.author_name])\n         # Right number/type of migrations?\n@@ -2399,4 +2422,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..2c61dc1 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -224,7 +224,33 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n-    def test_subparser_dest_required_args(self):\n+    def test_mutually_exclusive_group_required_options(self):\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        \n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+        \n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command('mutually_exclusive_required', stdout=out)\n+\n+    def test_mutually_exclusive_group_passed_as_kwargs(self):\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_name='test_name', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+        \n+    def test_mutually_exclusive_group_fail_on_missing_argument(self):\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        out = StringIO()\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command('mutually_exclusive_required', stdout=out)\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..028a4a1 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,28 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_renders_with_maxlength(self):\n+        \"\"\"\n+        Test that the username field renders with the maxlength attribute set.\n+        \"\"\"\n+        data = {\n+            'username': 'user',\n+            'password': 'password',\n+        }\n+        form = AuthenticationForm(None, data)\n+        # Check if the 'maxlength' attribute is set correctly to 255.\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n+    def test_username_field_renders_with_correct_maxlength_when_default(self):\n+        \"\"\"\n+        Test username field maxlength defaults to 254 when user model does not specify a max_length.\n+        \"\"\"\n+        with override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser'):\n+            IntegerUsernameUser.objects.create_user(\n+                username='user_default', password='password'\n+            )\n+            form = AuthenticationForm()\n+            self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..697ae33 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -247,6 +247,21 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n \n+    def test_enum_default_uses_enum_name(self):\n+        class TranslatedTextEnum(enum.Enum):\n+            A = _('translated-a')\n+            B = _('translated-b')\n+\n+        field = models.CharField(default=TranslatedTextEnum.A, choices=[(m.value, m) for m in TranslatedTextEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('translated-a', migrations.test_writer.TranslatedTextEnum['A']), \"\n+            \"('translated-b', migrations.test_writer.TranslatedTextEnum['B'])], \"\n+            \"default=migrations.test_writer.TranslatedTextEnum['A'])\"\n+        )\n+\n     def test_serialize_lazy_objects(self):\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..8a86c5c 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,9 +1,11 @@\n+\n import unittest\n from datetime import datetime\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n from django.utils.deprecation import RemovedInDjango40Warning\n+from unittest import mock\n from django.utils.http import (\n     base36_to_int, escape_leading_slashes, http_date, int_to_base36,\n     is_safe_url, is_same_domain, parse_etags, parse_http_date, quote_etag,\n@@ -312,7 +314,34 @@ class HttpDateProcessingTests(unittest.TestCase):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n \n-    def test_parsing_rfc1123(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mocked_datetime(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Define different \"current\" dates to check how the function determines 2-digit years.\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+\n+        tests = (\n+            # According to our RFC interpretation, year 69 should be in 2069 if checked when the year is 2019\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(1969, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            # With a different current year, the same RFC850 year should compute differently if following the logic.\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(1970, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(2071, 12, 31, 8, 49, 37)),\n+            # Checking behavior when beyond typical 2-digit bounds & near future years\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..85f68e1 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3686,6 +3686,38 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertIsInstance(p.files, MultiValueDict)\n \n \n+import copy\n+from django.forms import CharField, Form\n+from django.test import SimpleTestCase\n+\n+class DeepCopyErrorMessageTests(SimpleTestCase):\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_deep_copy_with_modified_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Original error message.'}\n+                super().__init__(**kwargs)\n+\n+        original_field = CustomCharField()\n+        original_field.error_messages['invalid'] = 'Modified error message.'\n+\n+        field_copy = copy.deepcopy(original_field)\n+        field_copy.error_messages['invalid'] = 'Modified in copy error message.'\n+\n+        self.assertEqual(original_field.error_messages['invalid'], 'Modified error message.')\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Modified in copy error message.')\n+        self.assertIsNot(original_field.error_messages, field_copy.error_messages)\n+\n class CustomRenderer(DjangoTemplates):\n     pass\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..19dfe24 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n@@ -205,6 +207,26 @@ class BulkCreateTests(TestCase):\n         NoFields.objects.bulk_create([NoFields() for i in range(2)])\n         self.assertEqual(NoFields.objects.count(), 2)\n \n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        # Calculate the maximum allowable batch size for these objects\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        # Use batch_size as max_batch_size + 1 and expect the effective batch size to be max_batch_size\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n+        \n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_no_batch_size_uses_max_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        # Calculate the maximum allowable batch size as the default\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        # Without setting a batch_size, it should default to max_batch_size\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs)\n+\n     @skipUnlessDBFeature('has_bulk_insert')\n     def test_explicit_batch_size_efficiency(self):\n         objs = [TwoFields(f1=i, f2=i) for i in range(0, 100)]\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..8a1761a 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,23 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from .models import MyChoice, MyObject\n+from django.test import TestCase\n+\n+class EnumIntegrationTest(TestCase):\n+    def setUp(self):\n+        # Setup a model instance with MyChoice enums.\n+        self.my_object_str = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_str_value_with_textchoices(self):\n+        self.assertEqual(str(self.my_object_str.my_str_value), \"first\")\n+\n+    def test_retrieved_object_value_type(self):\n+        # Retrieve the object again to ensure the value type is consistent.\n+        retrieved_object_str = MyObject.objects.get(id=self.my_object_str.id)\n+        self.assertIsInstance(retrieved_object_str.my_str_value, str)\n+        self.assertEqual(retrieved_object_str.my_str_value, MyChoice.FIRST_CHOICE)\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..c9150fc 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,7 +148,19 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n-class GetFieldDisplayTests(SimpleTestCase):\n+from django.test import SimpleTestCase\n+from django.db import models\n+\n+class TestGetFooBarDisplayOverride(SimpleTestCase):\n+    def test_overriding_get_FOO_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+            \n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..480e699 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -10,6 +10,8 @@ from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n from django.test.utils import override_settings\n+from django.db import connection\n+from django.db.models import Index\n from django.utils import timezone\n \n from .models import (\n@@ -70,6 +72,46 @@ class SchemaIndexesTests(TestCase):\n             index_sql[0]\n         )\n \n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n     def test_index_together_single_list(self):\n         # Test for using index_together with a single list (#22172)\n         index_sql = connection.schema_editor()._model_indexes_sql(IndexTogetherSingleList)\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..dd915bb 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -9,6 +10,7 @@ from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n+from .models import PickledFieldObject  # Assuming such a model exists for testing PickledField\n from django.test.utils import register_lookup\n \n from .models import Author, Item, ObjectC, Ranking\n@@ -107,7 +109,19 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_pickled_field_exact_query_with_list(self):\n+        query = Query(PickledFieldObject)\n+        where = query.build_where(Q(pickled_field=['x', 'y']))\n+        pickled_exact = where.children[0]\n+        self.assertIsInstance(pickled_exact, Exact)\n+        self.assertEqual(pickled_exact.rhs, ['x', 'y'])\n+\n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..c355015 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -179,6 +179,44 @@ class OperationWriterTests(SimpleTestCase):\n             '),'\n         )\n \n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n+\n \n class WriterTests(SimpleTestCase):\n     \"\"\"\n@@ -229,12 +267,88 @@ class WriterTests(SimpleTestCase):\n             (\"Decimal('1.3')\", {'from decimal import Decimal'})\n         )\n \n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n+\n         self.assertSerializedEqual(Money('1.3'))\n         self.assertSerializedResultEqual(\n             Money('1.3'),\n             (\"migrations.test_writer.Money('1.3')\", {'import migrations.test_writer'})\n         )\n \n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n+\n     def test_serialize_constants(self):\n         self.assertSerializedEqual(None)\n         self.assertSerializedEqual(True)\n@@ -270,6 +384,44 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n \n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n+\n     def test_serialize_lazy_objects(self):\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n@@ -280,18 +432,170 @@ class WriterTests(SimpleTestCase):\n             TextEnum.A,\n             (\"migrations.test_writer.TextEnum['A']\", {'import migrations.test_writer'})\n         )\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n         self.assertSerializedResultEqual(\n             TextTranslatedEnum.A,\n             (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n         )\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n         self.assertSerializedResultEqual(\n             BinaryEnum.A,\n             (\"migrations.test_writer.BinaryEnum['A']\", {'import migrations.test_writer'})\n         )\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n         self.assertSerializedResultEqual(\n             IntEnum.B,\n             (\"migrations.test_writer.IntEnum['B']\", {'import migrations.test_writer'})\n         )\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n         self.assertSerializedResultEqual(\n             self.NestedEnum.A,\n             (\n@@ -299,6 +603,44 @@ class WriterTests(SimpleTestCase):\n                 {'import migrations.test_writer'},\n             ),\n         )\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n         self.assertSerializedEqual(self.NestedEnum.A)\n \n         field = models.CharField(default=TextEnum.B, choices=[(m.value, m) for m in TextEnum])\n@@ -310,10 +652,86 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextEnum['B'])], \"\n             \"default=migrations.test_writer.TextEnum['B'])\"\n         )\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n         field = models.CharField(\n             default=TextTranslatedEnum.A,\n             choices=[(m.value, m) for m in TextTranslatedEnum],\n         )\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -322,6 +740,44 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n             \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n         )\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n         field = models.CharField(default=BinaryEnum.B, choices=[(m.value, m) for m in BinaryEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -331,6 +787,44 @@ class WriterTests(SimpleTestCase):\n             \"(b'value-b', migrations.test_writer.BinaryEnum['B'])], \"\n             \"default=migrations.test_writer.BinaryEnum['B'])\"\n         )\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n         field = models.IntegerField(default=IntEnum.A, choices=[(m.value, m) for m in IntEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -341,6 +835,44 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum['A'])\"\n         )\n \n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n+\n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n@@ -360,6 +892,44 @@ class WriterTests(SimpleTestCase):\n             DateChoices.DATE_1,\n             ('datetime.date(1969, 7, 20)', {'import datetime'}),\n         )\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n         field = models.CharField(default=TextChoices.B, choices=TextChoices.choices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -367,12 +937,88 @@ class WriterTests(SimpleTestCase):\n             \"models.CharField(choices=[('A', 'A value'), ('B', 'B value')], \"\n             \"default='B')\",\n         )\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n         field = models.IntegerField(default=IntegerChoices.B, choices=IntegerChoices.choices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n             \"models.IntegerField(choices=[(1, 'One'), (2, 'Two')], default=2)\",\n         )\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n         field = models.DateField(default=DateChoices.DATE_2, choices=DateChoices.choices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -383,6 +1029,44 @@ class WriterTests(SimpleTestCase):\n             \"default=datetime.date(1969, 11, 19))\"\n         )\n \n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n+\n     def test_serialize_uuid(self):\n         self.assertSerializedEqual(uuid.uuid1())\n         self.assertSerializedEqual(uuid.uuid4())\n@@ -393,11 +1077,87 @@ class WriterTests(SimpleTestCase):\n             uuid_a,\n             (\"uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8')\", {'import uuid'})\n         )\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n         self.assertSerializedResultEqual(\n             uuid_b,\n             (\"uuid.UUID('c7853ec1-2ea3-4359-b02d-b54e8f1bcee2')\", {'import uuid'})\n         )\n \n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n+\n         field = models.UUIDField(choices=((uuid_a, 'UUID A'), (uuid_b, 'UUID B')), default=uuid_a)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -408,6 +1168,44 @@ class WriterTests(SimpleTestCase):\n             \"default=uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8'))\"\n         )\n \n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n+\n     def test_serialize_functions(self):\n         with self.assertRaisesMessage(ValueError, 'Cannot serialize function: lambda'):\n             self.assertSerializedEqual(lambda x: 42)\n@@ -430,6 +1228,44 @@ class WriterTests(SimpleTestCase):\n             datetime.datetime(2014, 1, 1, 1, 1),\n             (\"datetime.datetime(2014, 1, 1, 1, 1)\", {'import datetime'})\n         )\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n         self.assertSerializedResultEqual(\n             datetime.datetime(2012, 1, 1, 1, 1, tzinfo=utc),\n             (\n@@ -438,18 +1274,132 @@ class WriterTests(SimpleTestCase):\n             )\n         )\n \n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n+\n     def test_serialize_fields(self):\n         self.assertSerializedFieldEqual(models.CharField(max_length=255))\n         self.assertSerializedResultEqual(\n             models.CharField(max_length=255),\n             (\"models.CharField(max_length=255)\", {\"from django.db import models\"})\n         )\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n         self.assertSerializedFieldEqual(models.TextField(null=True, blank=True))\n         self.assertSerializedResultEqual(\n             models.TextField(null=True, blank=True),\n             (\"models.TextField(blank=True, null=True)\", {'from django.db import models'})\n         )\n \n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n+\n     def test_serialize_settings(self):\n         self.assertSerializedEqual(SettingsReference(settings.AUTH_USER_MODEL, \"AUTH_USER_MODEL\"))\n         self.assertSerializedResultEqual(\n@@ -457,12 +1407,88 @@ class WriterTests(SimpleTestCase):\n             (\"settings.AUTH_USER_MODEL\", {\"from django.conf import settings\"})\n         )\n \n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n+\n     def test_serialize_iterators(self):\n         self.assertSerializedResultEqual(\n             ((x, x * x) for x in range(3)),\n             (\"((0, 0), (1, 1), (2, 4))\", set())\n         )\n \n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n+\n     def test_serialize_compiled_regex(self):\n         \"\"\"\n         Make sure compiled regex can be serialized.\n@@ -558,6 +1584,44 @@ class WriterTests(SimpleTestCase):\n             FoodQuerySet.as_manager(),\n             ('migrations.models.FoodQuerySet.as_manager()', {'import migrations.models'})\n         )\n+\n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n         self.assertSerializedEqual(FoodManager('a', 'b'))\n         self.assertSerializedEqual(FoodManager('x', 'y', c=3, d=4))\n \n@@ -661,6 +1725,44 @@ class WriterTests(SimpleTestCase):\n             result['custom_migration_operations'].more_operations.TestOperation\n         )\n \n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n+\n     def test_sorted_imports(self):\n         \"\"\"\n         #24155 - Tests ordering of imports.\n@@ -681,6 +1783,44 @@ class WriterTests(SimpleTestCase):\n             output\n         )\n \n+    def test_serialize_inner_class_field(self):\n+        \"\"\"\n+        Test that inner classes inheriting from Field are serialized correctly.\n+        \"\"\"\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Test serialization of inner class field\n+        expected_string = (\n+            \"models.CharField(max_length=20)\"\n+        )\n+        string, imports = MigrationWriter.serialize(A._meta.get_field('field'))\n+        self.assertIn(expected_string, string)\n+\n+    def test_serialize_inner_enumclass_field(self):\n+        \"\"\"\n+        Test that EnumFields using inner classes are serialized correctly.\n+        \"\"\"\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State)\n+\n+        # Test serialization of EnumField using inner class\n+        expected_string = (\n+            \"enumfields.fields.EnumField(enum=migrations.test_writer.WriterTests.\"\n+            \"test_serialize_inner_enumclass_field.<locals>.Thing.State\"\n+        )\n+        string, imports = MigrationWriter.serialize(Thing._meta.get_field('state'))\n+        self.assertIn(expected_string, string)\n+\n     def test_migration_file_header_comments(self):\n         \"\"\"\n         Test comments at top of file.\n@@ -746,4 +1886,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..7956328 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1102,6 +1102,44 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n                 }\n             }\n         )\n+    \n+    def test_split_array_field_handling_boolean_data_correctly(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        \n+        # Test with different combinations of True and False values\n+        context = widget.get_context('name', [False, True, False])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {'checked': True}, {}]\n+        )\n+        \n+        context = widget.get_context('name', [False, False, False])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {}, {}]\n+        )\n+        \n+        context = widget.get_context('name', [True, True, True])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {'checked': True}, {'checked': True}]\n+        )\n+        \n+        context = widget.get_context('name', [True, False, True])\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {}, {'checked': True}]\n+        )\n+    \n+    def test_split_array_field_with_no_initial_data(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+\n+        # No initial data, expecting all unchecked\n+        context = widget.get_context('name', None)\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {}, {}]\n+        )\n \n     def test_render(self):\n         self.check_html(\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..4fea229 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -261,6 +261,23 @@ class FKToUUID(models.Model):\n     data = models.ForeignKey(UUIDData, models.CASCADE)\n \n \n+class SampleTestCase(TestCase):\n+    def test_uuid_primary_key_with_default(self):\n+        # In this test, we verify that creating a Sample instance, retrieving it and then trying to save it\n+        # again with the same pk does an update instead of an insert.\n+        \n+        # create an instance\n+        s0 = Sample.objects.create(name='Initial Test')\n+        self.assertIsNotNone(s0.pk)\n+        \n+        # create a new instance with the same primary key\n+        s1 = Sample(pk=s0.pk, name='Test 1')\n+        s1.save()\n+\n+        # Fetch the object from database and check if the name is updated\n+        s1_from_db = Sample.objects.get(pk=s0.pk)\n+        self.assertEqual(s1_from_db.name, 'Test 1')\n+\n # Tests for handling fields with pre_save functions, or\n # models with save functions that modify data\n \n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..515b568 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -79,6 +79,25 @@ class SimpleTagTests(TagTestCase):\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n         ]\n \n+        # Additional cases to verify custom tag behavior with keyword-only arguments\n+        templates.extend([\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello world'), # Correct output with keyword argument\n+            ('{% load custom %}{% hello %}', 'hello world'), # Correct output with default value\n+            ('{% load custom %}{% hi greeting=\"hello\" %}', 'hello world'), # Correct single keyword usage\n+        ])\n+\n+    def test_custom_tag_error_cases(self):\n+        error_cases = [\n+            # Errors for multiple values for a keyword argument\n+            (\"'hello' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'),\n+            (\"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'),\n+        ]\n+        for entry in error_cases:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1]).render({})\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n@@ -103,6 +122,25 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n         ]\n \n+        # Additional cases to verify custom tag behavior with keyword-only arguments\n+        templates.extend([\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello world'), # Correct output with keyword argument\n+            ('{% load custom %}{% hello %}', 'hello world'), # Correct output with default value\n+            ('{% load custom %}{% hi greeting=\"hello\" %}', 'hello world'), # Correct single keyword usage\n+        ])\n+\n+    def test_custom_tag_error_cases(self):\n+        error_cases = [\n+            # Errors for multiple values for a keyword argument\n+            (\"'hello' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'),\n+            (\"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'),\n+        ]\n+        for entry in error_cases:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1]).render({})\n+\n         for entry in errors:\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(entry[1])\n@@ -192,6 +230,25 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n         ]\n \n+        # Additional cases to verify custom tag behavior with keyword-only arguments\n+        templates.extend([\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello world'), # Correct output with keyword argument\n+            ('{% load custom %}{% hello %}', 'hello world'), # Correct output with default value\n+            ('{% load custom %}{% hi greeting=\"hello\" %}', 'hello world'), # Correct single keyword usage\n+        ])\n+\n+    def test_custom_tag_error_cases(self):\n+        error_cases = [\n+            # Errors for multiple values for a keyword argument\n+            (\"'hello' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'),\n+            (\"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'),\n+        ]\n+        for entry in error_cases:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1]).render({})\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..e66526a 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -14,6 +15,7 @@ from django.forms import (\n     SplitDateTimeField, SplitHiddenDateTimeWidget, Textarea, TextInput,\n     TimeField, ValidationError, forms,\n )\n+from django.forms import FileInput\n from django.forms.renderers import DjangoTemplates, get_default_renderer\n from django.forms.utils import ErrorList\n from django.http import QueryDict\n@@ -2478,7 +2480,23 @@ Password: <input type=\"password\" name=\"password\" required>\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n         )\n \n-    def test_filefield_initial_callable(self):\n+    def test_filefield_with_fileinput_required(self):\n+        class FileForm(Form):\n+            file1 = FileField(widget=FileInput)\n+\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+        # A required file field with initial data doesn't contain the required\n+        # HTML attribute. The file input is left blank by the user to keep the\n+        # existing, initial value.\n+        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n         class FileForm(forms.Form):\n             file1 = forms.FileField(initial=lambda: 'resume.txt')\n \n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..3119921 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,6 @@\n+\n+from django.template import Context, Template\n+\n import datetime\n import decimal\n import ipaddress\n@@ -143,7 +146,23 @@ class ChoicesTests(SimpleTestCase):\n                 APPLE = 1, 'Apple'\n                 PINEAPPLE = 1, 'Pineapple'\n \n-    def test_str(self):\n+    def test_template_enumeration(self):\n+        # Test to see if enum can be used directly in template context\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}Frosh!{% endif %}')\n+        context = Context({'YearInSchool': YearInSchool, 'student': {'year_in_school': YearInSchool.FRESHMAN}})\n+        output = template.render(context)\n+        self.assertEqual(output, 'Frosh!')\n+\n+        # Test rendering of enum attributes\n+        template = Template('{{ Suit.DIAMOND.label }}|{{ Suit.DIAMOND.value }}')\n+        context = Context({'Suit': Suit})\n+        output = template.render(context)\n+        self.assertEqual(output, 'Diamond|1')\n+\n+        # Additional check for another Suit Enum\n+        template = Template('{{ Suit.SPADE.label }}|{{ Suit.SPADE.value }}')\n+        output = template.render(context)\n+        self.assertEqual(output, 'Spade|2')\n         for test in [Gender, Suit, YearInSchool, Vehicle]:\n             for member in test:\n                 with self.subTest(member=member):\n",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..c6c1910 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1006,6 +1006,35 @@ class OtherModelTests(SimpleTestCase):\n \n         self.assertEqual(ShippingMethod.check(), [])\n \n+    def test_multiple_onetoone_with_parent_link_ordering_matters(self):\n+        class Document(models.Model):\n+            pass\n+\n+        with self.assertRaisesMessage(ImproperlyConfigured, \"Add parent_link=True to invalid_models_tests.Picking.origin.\"):\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+    def test_multiple_onetoone_with_parent_link_correct_order(self):\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        self.assertEqual(Picking.check(), [])\n+\n+    def test_multiple_onetoone_no_parent_link(self):\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            another_origin = models.OneToOneField(Document, related_name='another_picking', on_delete=models.PROTECT)\n+\n+        self.assertEqual(Picking.check(), [])\n+\n     def test_missing_parent_link(self):\n         msg = 'Add parent_link=True to invalid_models_tests.ParkingLot.parent.'\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..e9425c0 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -223,6 +223,24 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         ret = self.process_request(\"get\", \"/some/url\")\n         self.assertIsNone(ret)\n \n+    @override_settings(SECURE_REFERRER_POLICY=None)\n+    def test_default_referrer_policy(self):\n+        \"\"\"\n+        With SECURE_REFERRER_POLICY set to None, the middleware should default\n+        to adding a \"Referrer-Policy: same-origin\" header to the response.\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response['Referrer-Policy'], 'same-origin')\n+\n+    @override_settings(SECURE_REFERRER_POLICY='')\n+    def test_blank_referrer_policy_falls_back_to_default(self):\n+        \"\"\"\n+        With SECURE_REFERRER_POLICY set to an empty string, the middleware should\n+        default to adding a \"Referrer-Policy: same-origin\" header to the response.\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response['Referrer-Policy'], 'same-origin')\n+\n     @override_settings(SECURE_REFERRER_POLICY=None)\n     def test_referrer_policy_off(self):\n         \"\"\"\n@@ -254,4 +272,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..4286491 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -13,6 +13,33 @@ from django.db.models import (\n     Func, IntegerField, Max, Min, Model, OrderBy, OuterRef, Q, StdDev,\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n+class SimpleLazyObjectTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.manager = Manager.objects.create(name=\"Manager\")\n+        cls.employee = Employee.objects.create(firstname=\"Max\", lastname=\"Manager\")\n+        cls.company = Company.objects.create(name=\"LearnTest Inc.\", ceo=cls.employee)\n+\n+    def test_subquery_filter_by_lazy(self):\n+        max_manager = SimpleLazyObject(lambda: Manager.objects.get(name=\"Manager\"))\n+        qs = Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    lastname=OuterRef('ceo__lastname')\n+                ).values('manager__name')\n+            ),\n+        ).filter(ceo_manager=max_manager.name)\n+        self.assertEqual(qs.get(), self.company)\n+\n+    def test_lazy_object_without_subquery(self):\n+        max_manager = SimpleLazyObject(lambda: Manager.objects.get(name=\"Manager\"))\n+        self.assertEqual(max_manager.name, \"Manager\")\n+\n+    def test_lazy_object_evaluation(self):\n+        lazy_user = SimpleLazyObject(lambda: User.objects.create_user(\"lazyuser\"))\n+        self.assertEqual(lazy_user.username, \"lazyuser\")\n+\n+from django.utils.functional import SimpleLazyObject\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..f1fd56a 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n@@ -138,7 +138,19 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         self.assertEqual(f2.widget.attrs['maxlength'], '20')\n         self.assertEqual(f2.widget.attrs['size'], '10')\n \n-    def test_formfield_overrides_for_datetime_field(self):\n+    def test_formfield_overrides_m2m_widget(self):\n+        \"\"\"\n+        Overriding the widget for ManyToManyField in formfield_overrides should\n+        take precedence over default widgets like filter_vertical or filter_horizontal.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_vertical = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n         \"\"\"\n         Overriding the widget for DateTimeField doesn't overrides the default\n         form_class for that field (#26449).\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..66b2d11 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,6 +2444,30 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n \n     def test_mti_inheritance_model_removal(self):\n         Animal = ModelState('app', 'Animal', [\n@@ -2453,4 +2477,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..c688666 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -8,10 +8,11 @@ from django.db import connection\n from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n-from django.utils.deprecation import RemovedInDjango40Warning\n+from django.test.utils import isolate_apps\n+from django.db import models\n \n from .models import (\n-    Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n+    Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag\n )\n \n \n@@ -194,6 +195,44 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n+    def test_in_bulk_meta_constraint(self):\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year], \n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n+\n     def test_values(self):\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..1f6b4a8 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -905,7 +905,24 @@ class OtherModelTests(SimpleTestCase):\n \n         self.assertEqual(Child.check(), [])\n \n-    def test_ordering_pointing_to_foreignkey_field(self):\n+    def test_ordering_with_isnull_lookup_across_related_fields(self):\n+        class Parent(models.Model):\n+            pass\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey(Parent, models.CASCADE, null=True)\n+        \n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+        \n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+            \n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+        \n+        # This should not raise an error even though it uses an isnull lookup.\n+        self.assertEqual(Stock.check(), [])\n         class Parent(models.Model):\n             pass\n \n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..0261d17 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,29 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Func(Value('f'), function='LOWER'), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_constant_expression_wrapped(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        query = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n+        sql, params = query.query.sql_with_params()\n+        self.assertNotIn(\"GROUP BY 3\", sql, \"Constant expression should not be in GROUP BY clause.\")\n+\n+    def test_variable_expression_wrapped(self):\n+        expr = ExpressionWrapper(F('some_field') + 1, output_field=IntegerField())\n+        query = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n+        sql, params = query.query.sql_with_params()\n+        self.assertIn(\"GROUP BY\", sql, \"Variable expression should be in GROUP BY clause (implicitly).\")\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..4b4d2af 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1217,6 +1217,23 @@ class Queries2Tests(TestCase):\n         Number.objects.create(num=4)\n         Number.objects.create(num=8)\n         Number.objects.create(num=12)\n+        \n+    def test_filter_with_nonfilterable_flag(self):\n+        # Create ProductMetaDataType object\n+        metadata_type = ProductMetaDataType.objects.create(\n+            label='Brand', filterable=False\n+        )\n+        # Create ProductMetaData related object\n+        product_metadata = ProductMetaData.objects.create(\n+            product=self.product,\n+            value='Dark Vador',\n+            marketplace=self.marketplace,\n+            metadata_type=metadata_type\n+        )\n+        \n+        # Check if NotSupportedError is raised or not\n+        with self.assertRaises(NotSupportedError):\n+            ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=metadata_type)\n \n     def test_ticket4289(self):\n         # A slight variation on the restricting the filtering choices by the\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..ae7b5b4 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,43 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_fk_with_descending_ordering(self):\n+        # Setup\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        article_1 = Article.objects.create(author=author_1, headline=\"Article 1\", pub_date=\"2023-01-01\")\n+        article_2 = Article.objects.create(author=author_2, headline=\"Article 2\", pub_date=\"2023-02-01\")\n+        \n+        # The issue described that the queryset ordering might be wrong due to self-referencing FK\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+    def test_order_by_self_referential_fk_with_inverted_ordering(self):\n+        # This test checks if the inversion of the ordering works correctly\n+        author_1 = Author.objects.create(name=\"Author 3\")\n+        author_2 = Author.objects.create(name=\"Author 4\")\n+        article_1 = Article.objects.create(author=author_1, headline=\"Article 3\", pub_date=\"2023-03-01\")\n+        article_2 = Article.objects.create(author=author_2, headline=\"Article 4\", pub_date=\"2023-04-01\")\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +390,43 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_order_by_self_referential_fk_with_descending_ordering(self):\n+        # Setup\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        article_1 = Article.objects.create(author=author_1, headline=\"Article 1\", pub_date=\"2023-01-01\")\n+        article_2 = Article.objects.create(author=author_2, headline=\"Article 2\", pub_date=\"2023-02-01\")\n+        \n+        # The issue described that the queryset ordering might be wrong due to self-referencing FK\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+    def test_order_by_self_referential_fk_with_inverted_ordering(self):\n+        # This test checks if the inversion of the ordering works correctly\n+        author_1 = Author.objects.create(name=\"Author 3\")\n+        author_2 = Author.objects.create(name=\"Author 4\")\n+        article_1 = Article.objects.create(author=author_1, headline=\"Article 3\", pub_date=\"2023-03-01\")\n+        article_2 = Article.objects.create(author=author_2, headline=\"Article 4\", pub_date=\"2023-04-01\")\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..ff97da7 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1645,7 +1645,55 @@ class ModelFormBasicTests(TestCase):\n         obj.full_clean()\n \n \n-class ModelMultipleChoiceFieldTests(TestCase):\n+from django.test import TestCase\n+from django import forms\n+from django.core.exceptions import ValidationError\n+from django.utils import timezone\n+\n+from .models import Writer, Article, FavoriteArticle\n+\n+class ForeignKeyValidationTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.archived_writer = Writer.objects.create(name='Archived Writer', archived=True)\n+        \n+    def test_foreign_key_validation_with_default_manager(self):\n+        class FavoriteArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = FavoriteArticle\n+                fields = '__all__'\n+\n+        # Creating form data with an archived writer that is not available through the default manager\n+        data = {\n+            'article': self.archived_writer.pk,\n+        }\n+\n+        form = FavoriteArticleForm(data)\n+        self.assertFalse(form.is_valid())\n+        self.assertEqual(\n+            form.errors,\n+            {'article': ['Select a valid choice. That choice is not one of the available choices.']}\n+        )\n+\n+    def test_foreign_key_validation_with_base_manager(self):\n+        class FavoriteArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = FavoriteArticle\n+                fields = '__all__'\n+\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                self.fields['article'].queryset = Writer._base_manager.all()\n+\n+        # Creating form data with an archived writer that should be available through the base manager\n+        data = {\n+            'article': self.archived_writer.pk,\n+        }\n+\n+        form = FavoriteArticleForm(data)\n+        self.assertTrue(form.is_valid())\n+        favorite_article = form.save()\n+        self.assertEqual(favorite_article.article, self.archived_writer)\n     @classmethod\n     def setUpTestData(cls):\n         cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n",
  "django__django-13112": "",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..18923c4 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1618,7 +1618,14 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n-    def test_datetime_subtraction_microseconds(self):\n+    def test_simple_datetime_subtraction(self):\n+        # Test the subtraction of two DateTimeField fields directly\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for obj in queryset:\n+            # Ensure the result of 'end' - 'start' is a timedelta object\n+            self.assertIsInstance(obj.delta, datetime.timedelta)\n         delta = datetime.timedelta(microseconds=8999999999999999)\n         Experiment.objects.update(end=F('start') + delta)\n         qs = Experiment.objects.annotate(\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..a7d6c72 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -38,8 +38,12 @@ class QuerySetSetOperationTests(TestCase):\n         self.assertEqual(reserved_name['order'], 2)\n         reserved_name = qs1.intersection(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n-\n-    @skipUnlessDBFeature('supports_select_difference')\n+    def test_union_with_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        # Combine with union and apply none() to simulate the issue\n+        qs3 = qs1.union(qs2).none()\n+        self.assertEqual(list(qs3), [])\n     def test_simple_difference(self):\n         qs1 = Number.objects.filter(num__lte=5)\n         qs2 = Number.objects.filter(num__lte=4)\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..be700fa 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -31,9 +31,10 @@ from django.core.cache.backends.base import InvalidCacheBackendError\n from django.core.exceptions import ImproperlyConfigured, SuspiciousOperation\n from django.http import HttpResponse\n from django.test import (\n-    RequestFactory, TestCase, ignore_warnings, override_settings,\n+    RequestFactory, TestCase, ignore_warnings, override_settings, SimpleTestCase\n )\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -330,6 +331,13 @@ class SessionTestsMixin:\n         # The failed decode is logged.\n         self.assertIn('corrupted', cm.output[0])\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'a test key': 'a test value'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n     def test_actual_expiry(self):\n         # this doesn't work with JSONSerializer (serializing timedelta)\n         with override_settings(SESSION_SERIALIZER='django.contrib.sessions.serializers.PickleSerializer'):\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..72bc93c 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -5,6 +5,9 @@ from django.http import HttpResponse\n from django.test import (\n     RequestFactory, SimpleTestCase, ignore_warnings, override_settings,\n )\n+from django.utils.functional import SimpleLazyObject\n+from django.shortcuts import get_object_or_404\n+from .models import Account  # Assuming Account model is similar to Artist\n from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -590,7 +593,34 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    def test_lazy_object_filtering_issue(self):\n+        \"\"\"Test filtering with a SimpleLazyObject in kwargs.\"\"\"\n+        class AccountView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, *, account_slug, **kwargs):\n+                context = super().get_context_data(**kwargs)\n+                # Here we are testing the use of SimpleLazyObject\n+                # Convert it to string to simulate the fix\n+                account_slug = str(account_slug)\n+                account = get_object_or_404(Account, slug=account_slug)\n+                return {**context, 'account': account}\n+\n+        # Setup data\n+        account = Account.objects.create(name='Test Account', slug='test-account')\n+        \n+        # Test without converting SimpleLazyObject to str, should raise error\n+        with self.assertRaises(Exception) as ctx:\n+            AccountView.as_view()(\n+                self.rf.get('/offers/test-account/'), account_slug=SimpleLazyObject(lambda: account.slug)\n+            )\n+        self.assertIn('unsupported type', str(ctx.exception))\n+\n+        # Test with converting SimpleLazyObject to str, should pass\n+        response = AccountView.as_view()(\n+            self.rf.get('/offers/test-account/'), account_slug=str(SimpleLazyObject(lambda: account.slug))\n+        )\n+        self.assertEqual(response.context_data['account'], account)\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..bfef805 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -16,7 +16,7 @@ from django.forms.models import (\n )\n from django.template import Context, Template\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n-\n+from django.test.utils import isolate_apps\n from .models import (\n     Article, ArticleStatus, Author, Author1, Award, BetterWriter, BigInt, Book,\n     Category, Character, Colour, ColourfulItem, CustomErrorMessage, CustomFF,\n",
  "django__django-13343": "",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..fb0bcd5 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -622,8 +622,21 @@ class TestQuerying(TestCase):\n                     NullableJSONModel.objects.filter(value__bar__contains=value),\n                     expected,\n                 )\n+    def test_key_in_lookup(self):\n+        test_cases = [\n+            ('value__key1__in', [0], []),  # Expecting no results since '0' is not found in mock data\n+            ('value__key1__in', [1], self.objs[3:5]),  # Example with known correct value\n+            ('value__key2__in', ['some_value'], [self.objs[7]]),  # Value 'some_value' should match\n+            ('value__key2__in', ['non_existent'], []),  # Ensuring no result on non-existent value\n+            ('value__key2__in', ['some_value', 'another_value'], [self.objs[7]]),  # Test with multiple values\n+        ]\n \n-    def test_key_iexact(self):\n+        for lookup, value, expected in test_cases:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='\"BaR\"').exists(), False)\n \n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..09295bc 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -17,7 +17,9 @@ from django.db.models.functions import (\n from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n+import pytz\n from django.utils import timezone\n+from datetime import datetime\n \n from ..models import Author, DTModel, Fan\n \n",
  "django__django-13401": "",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..d750c8c 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -6,6 +7,9 @@ import tempfile\n import unittest\n from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n+from unittest import skipIf\n+import platform\n+from django.core.files import locks\n from unittest import mock\n \n from django.core.files import File\n",
  "django__django-13417": "",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..0a82c80 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -335,6 +335,17 @@ class CommandTests(SimpleTestCase):\n             with self.assertRaisesMessage(TypeError, msg):\n                 management.call_command('subparser_dest', subcommand='foo', bar=12)\n \n+    def test_outputwrapper_flush(self):\n+        from django.core.management import call_command\n+        from io import StringIO\n+        from unittest import mock\n+        \n+        out = StringIO()\n+        with mock.patch.object(out, 'flush') as mocked_flush:\n+            call_command('outputwrapper', stdout=out)\n+        self.assertIn('Working...', out.getvalue())\n+        self.assertTrue(mocked_flush.called)\n+\n     def test_create_parser_kwargs(self):\n         \"\"\"BaseCommand.create_parser() passes kwargs to CommandParser.\"\"\"\n         epilog = 'some epilog text'\n@@ -346,6 +357,20 @@ class CommandRunTests(AdminScriptTestCase):\n     \"\"\"\n     Tests that need to run by simulating the command line, not by call_command.\n     \"\"\"\n+    def test_migration_output_flush(self):\n+        from django.core.management import call_command\n+        from io import StringIO\n+        from unittest import mock\n+        \n+        out = StringIO()\n+        with mock.patch.object(out, 'flush') as mocked_flush:\n+            call_command('migrate', stdout=out)\n+        \n+        output_value = out.getvalue()\n+        self.assertIn('Running migrations:', output_value)\n+        self.assertNotIn('Applying', output_value)  # Ensure it doesn't accumulate without flush\n+        self.assertTrue(mocked_flush.called)\n+\n     def test_script_prefix_set_in_commands(self):\n         self.write_settings('settings.py', apps=['user_commands'], sdict={\n             'ROOT_URLCONF': '\"user_commands.urls\"',\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..45adc7b 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,10 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n-from django.test.utils import ignore_warnings\n+from .models.with_custom_email_field import CustomEmailField\n from django.utils.deprecation import RemovedInDjango40Warning\n \n \n@@ -37,7 +38,23 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_invalidation_on_email_change(self):\n+        \"\"\"\n+        Test that changing a user's email address invalidates the existing password reset token.\n+        \"\"\"\n+        user = CustomEmailField.objects.create_user('changeemailuser', 'test5@example.com', 'testpw')\n+        token_generator = PasswordResetTokenGenerator()\n+        token = token_generator.make_token(user)\n+\n+        # Check that token is valid initially.\n+        self.assertIs(token_generator.check_token(user, token), True)\n+\n+        # Change the user's email.\n+        user.email_address = 'newemail@example.com'\n+        user.save()\n+\n+        # Check that the token is now invalid after email change.\n+        self.assertIs(token_generator.check_token(user, token), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..6768293 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n@@ -8,6 +9,7 @@ from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n )\n from django.test.utils import isolate_apps\n+from django.db.models import Q, UniqueConstraint\n \n from .models import CustomUserNonUniqueUsername\n \n@@ -138,6 +140,30 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserNonUniqueWithUniqueConstraint')\n+    def test_username_non_unique_with_partial_unique_constraint(self):\n+        class CustomUserNonUniqueWithUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                # Define a partial unique constraint to ensure username is not unique globally\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_non_unique_constraint', \n+                                     condition=Q(id__isnull=False))\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Warning(\n+                \"'CustomUserNonUniqueWithUniqueConstraint.username' is named as the 'USERNAME_FIELD', \"\n+                \"but it is not unique.\",\n+                hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n+                obj=CustomUserNonUniqueWithUniqueConstraint,\n+                id='auth.W004',\n+            ),\n+        ])\n+\n     def test_non_clashing_custom_permissions(self):\n         class Checked(models.Model):\n             class Meta:\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..01e9542 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1314,4 +1314,18 @@ class AggregateTestCase(TestCase):\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+    \n+    def test_order_by_random_does_not_affect_aggregation(self):\n+        \"\"\"\n+        Test that order_by('?') does not incorrectly affect the aggregation count.\n+        \"\"\"\n+        things = Thing.objects.annotate(related_count=Count('related')).order_by('?').values('id', 'related_count')\n+        self.assertTrue(all(item['related_count'] == 2 for item in things))\n+        \n+    def test_order_by_random_not_in_group_by_for_aggregation(self):\n+        \"\"\"\n+        Test that Random() used in order_by is not included in GROUP BY clause for aggregation.\n+        \"\"\"\n+        authors = Author.objects.annotate(contact_count=Count('book')).order_by('?').values('id', 'contact_count')\n+        self.assertTrue(all(a['contact_count'] == 1 for a in authors))\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..f80726a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -8,6 +9,7 @@ from unittest import mock\n \n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n+from collections import namedtuple\n from django.db.models import (\n     AutoField, Avg, BinaryField, BooleanField, Case, CharField, Count,\n     DateField, DateTimeField, DecimalField, DurationField, Exists, Expression,\n@@ -815,6 +817,36 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(\n+            qs, ['<Company: 99300 Ltd>'], ordered=False\n+        )\n+\n+    def test_range_lookup_namedtuple_empty(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=1000, maximum=2000),\n+        )\n+        self.assertQuerysetEqual(\n+            qs, [], ordered=False\n+        )\n+\n+    def test_range_lookup_namedtuple_with_zero(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=0, maximum=99),\n+        )\n+        self.assertQuerysetEqual(\n+            qs, [\n+                '<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>',\n+                '<Company: 5060 Ltd>', '<Company: 99300 Ltd>',\n+            ], ordered=False\n+        )\n+\n     def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..043c4c1 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -14,7 +14,9 @@ import unittest\n from io import StringIO\n from unittest import mock\n \n+import os\n from django import conf, get_version\n+from django.test.utils import captured_stderr, captured_stdout\n from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n@@ -32,6 +34,41 @@ from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n \n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_main_module(self):\n+        \"\"\"\n+        Test when __main__.py is used as the program, it reflects correctly in usage.\n+        \"\"\"\n+        args = ['help', 'check']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['python -m django'] + args)\n+        self.assertIn('usage: python -m django check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_invalid_sys_argv(self):\n+        \"\"\"\n+        Test with invalid sys.argv to ensure the program handles it gracefully.\n+        \"\"\"\n+        args = ['help', 'migrate']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None]):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin migrate', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..8a8b113 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,4 +1,6 @@\n+\n from datetime import date, datetime\n+from django.utils import dateformat\n \n from django.test import SimpleTestCase, override_settings\n from django.test.utils import TZ_SUPPORT, requires_tz_support\n@@ -146,7 +148,23 @@ class DateFormatTests(SimpleTestCase):\n         # Ticket #16924 -- We don't need timezone support to test this\n         self.assertEqual(dateformat.format(aware_dt, 'O'), '-0330')\n \n-    def test_invalid_time_format_specifiers(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (123, '23'),\n+            (56, '56'),\n+            (8, '08'),\n+            (0, '00'),  # assuming year 0 is supported as '00'\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         my_birthday = date(1984, 8, 7)\n \n         for specifier in ['a', 'A', 'f', 'g', 'G', 'h', 'H', 'i', 'P', 'r', 's', 'u']:\n@@ -164,4 +182,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..34464ea 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,7 +1020,23 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n-    def test_readonly_field_has_changed(self):\n+    def test_readonly_password_hash_field_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n+\n+    def test_readonly_password_field_tamper_proof(self):\n+        \"\"\"\n+        Verify that tampering with the disabled ReadOnlyPasswordHashField doesn't affect the initial value.\n+        \"\"\"\n+        initial_password_hash = \"initial_password_hash\"\n+        tampered_password_hash = \"tampered_password_hash\"\n+        \n+        field = ReadOnlyPasswordHashField()\n+        form = forms.Form(data={'password': tampered_password_hash}, initial={'password': initial_password_hash})\n+        form.fields['password'] = field\n+\n+        # Check that the field's bound data returns the initial password, ignoring the tampered value.\n+        self.assertEqual(form.cleaned_data['password'], initial_password_hash)\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n \n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..f5c1aa2 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,6 +119,58 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n+    def test_create_model_squash_empty_options(self):\n+        \"\"\"\n+        Test case covering the issue where CreateModel should clear options\n+        when squashed with empty AlterModelOptions.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Test Model', 'db_table': 'test_table'},\n+                ),\n+                migrations.AlterModelOptions('TestModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('TestModel', fields=[]),\n+            ],\n+        )\n+\n+    def test_create_model_squash_partial_options(self):\n+        \"\"\"\n+        Test case where CreateModel options should be partially preserved\n+        when squashed with AlterModelOptions containing some options.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'Test Model',\n+                        'verbose_name_plural': 'Test Models',\n+                        'db_table': 'test_table',\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'TestModel',\n+                    options={\n+                        'verbose_name': 'Test Model',\n+                        'db_table': 'test_table',\n+                    },\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Test Model', 'db_table': 'test_table'},\n+                ),\n+            ],\n+        )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..fbebd8d 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,9 +1,11 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n from ..utils import setup\n+from django.utils.translation import gettext_lazy, lazy\n \n \n class AddTests(SimpleTestCase):\n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..5cf097a 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -18,10 +18,11 @@ from django.test import (\n     skipUnlessDBFeature,\n )\n \n+from django.db import connection, IntegrityError, transaction\n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n-    VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n+    VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ, SQLKeywordsModel,\n )\n \n \n@@ -626,7 +627,21 @@ class FkConstraintsTests(TransactionTestCase):\n             transaction.set_rollback(True)\n \n \n-class ThreadTests(TransactionTestCase):\n+class SQLReservedWordsTests(TransactionTestCase):\n+\n+    available_apps = ['backends']\n+\n+    def test_check_constraints_sql_keywords(self):\n+        with transaction.atomic():\n+            reporter = Reporter.objects.create(first_name=\"John\", last_name=\"Doe\", email=\"john.doe@example.com\")\n+            obj = SQLKeywordsModel.objects.create(reporter=reporter)\n+            obj.refresh_from_db()\n+            obj.reporter_id = 30\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n \n     available_apps = ['backends']\n \n",
  "django__django-13809": "",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..7752064 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -266,6 +267,26 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             self.client.get('/middleware_exceptions/template_response/')\n \n+    @override_settings(\n+        MIDDLEWARE=[\n+            \"middleware_exceptions.middleware.SyncAndAsyncMiddleware\",\n+            \"middleware_exceptions.tests.MyMiddleware\", # Ensure this is tested\n+        ]\n+    )\n+    async def test_async_and_sync_middleware_chain_async_call_log_correctly(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n     ])\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..abd791f 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -512,6 +513,34 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_without_file'})\n+    def test_loading_non_namespace_package_without_file(self):\n+        \"\"\"\n+        MigrationLoader should load migrations for non-namespace packages\n+        in frozen environments where the __file__ attribute is not set.\n+        \"\"\"\n+        original_module_name = 'migrations.test_migrations_without_file'\n+        test_module = import_module(original_module_name)\n+        loader = MigrationLoader(connection)\n+        \n+        # Simulate the environment where __file__ is not set.\n+        module_file = test_module.__file__\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+        try:\n+            del test_module.__file__\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            loader.load_disk()\n+            migrations = [\n+                name for app, name in loader.disk_migrations if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..ddedac0 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -36,7 +36,20 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n+\n+    def test_check_minimum_supported_sqlite_version(self):\n+        \"\"\"Ensure that using SQLite versions older than 3.9.0 raises an ImproperlyConfigured error.\"\"\"\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.7).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 7)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.7'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..6842098 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,6 +281,50 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+    def test_modelchoicefield_value_placeholder(self):\n+        # Assume ChoiceModel.objects.create() has been called to populate choices.\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        # Test with an invalid choice that is a string.\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n+\n+        # Test with an invalid choice that represented a non-existent primary key.\n+        self.assertFormErrors(\n+            ['\"999\" is not one of the available choices.'],\n+            f.clean,\n+            '999',\n+        )\n+\n+    def test_modelmultiplechoicefield_value_placeholder(self):\n+        f = ModelMultipleChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+                'invalid_list': 'Enter a valid list of choices.',\n+            },\n+        )\n+        # Test with a list that contains an invalid choice.\n+        self.assertFormErrors(\n+            ['\"999\" is not one of the available choices.'],\n+            f.clean,\n+            ['999'],\n+        )\n+\n+        # Additional multiple choice with mixed valid and invalid\n+        self.assertFormErrors(\n+            ['\"999\" is not one of the available choices.'],\n+            f.clean,\n+            ['1', '999'],\n+        )\n+\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n     def test_modelchoicefield(self):\n@@ -307,4 +351,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..355e13e 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -9,7 +10,7 @@ from django.utils.translation import gettext_lazy\n from .models import (\n     Article, Category, Child, ChildNullableParent, City, Country, District,\n     First, Parent, Record, Relation, Reporter, School, Student, Third,\n-    ToFieldChild,\n+    ToFieldChild, ParentStringPrimaryKey, ChildStringPrimaryKeyParent\n )\n \n \n@@ -549,7 +550,30 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child(self):\n+        parent = ParentStringPrimaryKey()\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        child.parent.name = 'jeff'\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_with_initialized_non_numeric_pk_in_parent(self):\n+        parent = ParentStringPrimaryKey(name='jeff')\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_after_uninitialized_non_numeric_pk_in_parent_raises_error(self):\n+        with self.assertRaises(ValueError):  # Expect a value error due to invalid save\n+            parent = ParentStringPrimaryKey()  # Uninitialized primary key\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            child.save()  # Attempting to save should raise an error\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..9030450 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,9 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+\n+from .fields import MyAutoField, MyWrapperField, MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n@@ -220,6 +224,35 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n+\n+class CustomAutoFieldTests(TestCase):\n+    \n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that the MyAutoField is correctly using from_db_value on create.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that the MyAutoField is correctly using from_db_value on bulk create.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n+    \n+    # Verify other pathways such as retrieving objects from the database\n+    def test_auto_field_subclass_retrieve(self):\n+        \"\"\"\n+        Test that the MyAutoField is correctly using from_db_value on retrieval.\n+        \"\"\"\n+        # Create and retrieve an instance\n+        CustomAutoFieldModel.objects.create()\n+        obj = CustomAutoFieldModel.objects.first()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n     # SQLite lets objects be saved with an empty primary key, even though an\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n",
  "django__django-14017": "",
  "django__django-14053": "",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..8387481 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -5,6 +6,7 @@ Tests for stuff in django.utils.datastructures.\n import copy\n import pickle\n \n+import collections.abc\n from django.test import SimpleTestCase\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n@@ -18,7 +20,27 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        # Original test case\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+        \n+        # Additional test cases\n+        # Test reversing an empty OrderedSet\n+        s = reversed(OrderedSet())\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+        \n+        # Test reversing an OrderedSet with one element\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+        \n+        # Test reversing an OrderedSet with different types\n+        s = reversed(OrderedSet(['a', 1, (2, 3)]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [(2, 3), 1, 'a'])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex b2ec8af..d62ce5b 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -13,7 +14,7 @@ from django.test import TestCase\n from django.test.testcases import skipUnlessDBFeature\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n-\n+from django.db.models import Q\n from .models import Author, Book, Publisher, Store\n \n \n@@ -100,8 +101,26 @@ class AggregateTestCase(TestCase):\n         s1.books.add(cls.b1, cls.b2, cls.b3, cls.b4, cls.b5, cls.b6)\n         s2.books.add(cls.b1, cls.b3, cls.b5, cls.b6)\n         s3.books.add(cls.b3, cls.b4, cls.b6)\n-\n-    def test_empty_aggregate(self):\n+    def test_meta_ordering_not_in_group_by(self):\n+        \"\"\"\n+        Test that ordering fields in Meta are not included in the GROUP BY clause\n+        leading to wrong aggregation results.\n+        \"\"\"\n+        books = (\n+            Book.objects.values('publisher_id')\n+            .annotate(max_rating=Max('rating'))\n+            .filter(pubdate__year=2008)\n+        )\n+        # Ensure that the aggregation works correctly and does not implicitly group by ordering fields\n+        self.assertQuerysetEqual(\n+            books,\n+            [\n+                {'publisher_id': self.p1.id, 'max_rating': 4.5},\n+                {'publisher_id': self.p2.id, 'max_rating': 3.0},\n+                {'publisher_id': self.p3.id, 'max_rating': 4.0},\n+            ],\n+            lambda x: {'publisher_id': x['publisher_id'], 'max_rating': x['max_rating']}\n+        )\n         self.assertEqual(Author.objects.all().aggregate(), {})\n \n     def test_aggregate_in_order_by(self):\n@@ -1339,4 +1358,4 @@ class AggregateTestCase(TestCase):\n             ('Wesley J. Chun', 1),\n             ('Stuart Russell', 1),\n             ('Peter Norvig', 2),\n-        ], lambda a: (a.name, a.contact_count), ordered=False)\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..ddb1216 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -823,6 +823,13 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n             [self.example_inc.ceo, self.max],\n         )\n+    def test_deconstruct_boolean_expression_exists(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        q = Q(Exists(is_poc))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(is_poc),))\n+        self.assertEqual(kwargs, {})\n \n     def test_boolean_expression_combined_with_empty_Q(self):\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..85d374e 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,6 +1,8 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n+from django.db import models\n from django.test.utils import isolate_apps\n \n \n@@ -65,8 +67,29 @@ class TestDefaultPK(SimpleTestCase):\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             class Model(models.Model):\n                 pass\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n+    def test_default_auto_field_setting_mybigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    def test_default_auto_field_setting_mysmallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -81,8 +104,29 @@ class TestDefaultPK(SimpleTestCase):\n             pass\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n+    def test_default_auto_field_setting_mybigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    def test_default_auto_field_setting_mysmallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..befa3a2 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,7 +226,13 @@ TEST_DATA = [\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n-    # Trailing newlines not accepted\n+    # Trailing and embedded newlines, carriage returns, and tabs not accepted\n+    (URLValidator(), 'http://www.djangoproject.com\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n     # Trailing junk does not take forever to reject\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..4a21171 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,6 +1526,48 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+from django.test import TestCase\n+from django.db.models import Q, Count\n+from myapp.models import Agent, PropertyGroup, ManagerTicketRatingCumulativeMovingAverage\n+\n+class QObjectTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Assuming setup of test data preparation is needed.\n+        cls.management_agent = Agent.objects.create(name=\"Test Agent\")\n+        cls.property_group1 = PropertyGroup.objects.create(name=\"Group 1\")\n+        cls.property_group2 = PropertyGroup.objects.create(name=\"Group 2\")\n+        \n+        # Establishing relationships\n+        cls.management_agent.property_groups.add(cls.property_group1, cls.property_group2)\n+\n+    def test_or_q_object_in_correct(self):\n+        property_groups = PropertyGroup.objects.filter(agent=self.management_agent)\n+        queryset = ManagerTicketRatingCumulativeMovingAverage.objects.annotate(Count(\"agent__property_groups\"))\n+\n+        # Query expected to fail in earlier versions (before fix).\n+        with self.assertRaises(ProgrammingError):\n+            queryset.filter(\n+                Q(agent__property_groups__in=property_groups)\n+                | Q(agent__property_groups__count=0)\n+            ).distinct()\n+\n+    def test_or_q_object_id_in_correct(self):\n+        property_groups = PropertyGroup.objects.filter(agent=self.management_agent)\n+        queryset = ManagerTicketRatingCumulativeMovingAverage.objects.annotate(Count(\"agent__property_groups\"))\n+        \n+        # This should not raise an error, confirming intended behavior.\n+        resulting_set = queryset.filter(\n+            Q(agent__property_groups__id__in=property_groups.values_list(\"id\", flat=True))\n+            | Q(agent__property_groups__count=0)\n+        ).distinct()\n+\n+        self.assertQuerysetEqual(\n+            resulting_set, \n+            list(queryset), \n+            transform=lambda x: x\n+        )\n+\n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..efed1a2 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -68,7 +68,71 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n-    def test_options_password(self):\n+    def test_deprecated_kwargs_are_handled(self):\n+        \"\"\"\n+        Test that both deprecated 'db' and 'passwd' kwargs, and new 'database' and 'password'\n+        kwargs are handled correctly.\n+        \"\"\"\n+        for keys in [('database', 'password'), ('db', 'passwd')]:\n+            with self.subTest(keys=keys):\n+                database, password = keys\n+                expected_args = [\n+                    'mysql',\n+                    '--user=optionuser',\n+                    '--host=optionhost',\n+                    '--port=%s' % 555,\n+                    'optiondbname',\n+                ]\n+                expected_env = {'MYSQL_PWD': 'optionpassword'}\n+                self.assertEqual(\n+                    self.settings_to_cmd_args_env({\n+                        'NAME': 'settingdbname',\n+                        'USER': 'settinguser',\n+                        'PASSWORD': 'settingpassword',\n+                        'HOST': 'settinghost',\n+                        'PORT': 444,\n+                        'OPTIONS': {\n+                            database: 'optiondbname',\n+                            'user': 'optionuser',\n+                            password: 'optionpassword',\n+                            'host': 'optionhost',\n+                            'port': 555,\n+                        },\n+                    }),\n+                    (expected_args, expected_env),\n+                )\n+\n+    def test_options_prefer_non_deprecated_keys(self):\n+        \"\"\"\n+        Test that non-deprecated keys 'database' and 'password' are preferred over\n+        deprecated 'db' and 'passwd' keys if both are present.\n+        \"\"\"\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=settinghost',\n+            '--port=555',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'port': 555,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n         expected_args = [\n             'mysql',\n             '--user=someuser',\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..3101e95 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2193,7 +2193,19 @@ class SchemaTests(TransactionTestCase):\n             if details['columns'] == ['name', 'birthday'] and details['unique'] and name != custom_constraint_name\n         ]\n         self.assertEqual(len(other_constraints), 1)\n-        # Drop the unique constraint\n+        # Test with an expression to ensure references_column works correctly.\n+        constraint_with_expression = UniqueConstraint(F('name').desc(), name='name_desc_uq')\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint_with_expression)\n+            sql_with_expression = constraint_with_expression.create_sql(Author, editor)\n+        self.assertIs(sql_with_expression.references_column(table, 'name'), True)\n+        \n+        # Test with no references to ensure references_column returns False.\n+        constraint_no_reference = UniqueConstraint(fields=['birthday'], name='birthday_uq')\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint_no_reference)\n+            sql_no_reference = constraint_no_reference.create_sql(Author, editor)\n+        self.assertIs(sql_no_reference.references_column(table, 'name'), False)\n         with connection.schema_editor() as editor:\n             AuthorWithUniqueNameAndBirthday._meta.constraints = []\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex dc966a1..f983ef1 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -94,6 +94,10 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n     )\n \n \n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+\n class NoneHashStorage(ManifestStaticFilesStorage):\n     def file_hash(self, name, content=None):\n-        return None\n+        return None\n",
  "django__django-14500": "",
  "django__django-14539": "",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..db64d10 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -133,7 +133,34 @@ class BulkUpdateTests(TestCase):\n             for i in range(0, 2000)\n         ])\n         notes = list(Note.objects.all())\n-        Note.objects.bulk_update(notes, ['note'])\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_bulk_update_no_matches(self):\n+        \"\"\"\n+        Test that bulk_update() returns 0 if no objects are updated.\n+        \"\"\"\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(0, 10)\n+        ])\n+        notes = Note.objects.filter(note=\"Non-existing\")\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_bulk_update_partial_matches(self):\n+        \"\"\"\n+        Test that bulk_update() returns the correct number of matched rows when some objects match.\n+        \"\"\"\n+        Note.objects.bulk_create([\n+            Note(note='match', misc=str(i)) for i in range(0, 5)\n+        ])\n+        notes = list(Note.objects.all())\n+        # Intentionally leave one Note out of updates\n+        for note in notes[:-1]:\n+            note.note = 'updated-note'\n+        rows_updated = Note.objects.bulk_update(notes[:-1], ['note'])\n+        self.assertEqual(rows_updated, 4)\n \n     def test_only_concrete_fields_allowed(self):\n         obj = Valid.objects.create(valid='test')\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..4573fba 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -365,6 +365,50 @@ class FormsFormsetTestCase(SimpleTestCase):\n         min_num validation doesn't consider unchanged forms with initial data\n         as \"empty\".\n         \"\"\"\n+\n+    def test_formset_non_form_errors_css_class(self):\n+        \"\"\"\n+        Non-form errors should include the 'nonform' CSS class in their error HTML output.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '2',  # the number of forms rendered\n+            'choices-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'choices-MIN_NUM_FORMS': '0',  # min number of forms\n+            'choices-MAX_NUM_FORMS': '0',  # max number of forms\n+            'choices-0-choice': 'Choice 1',\n+            'choices-0-votes': '0',\n+            'choices-1-choice': 'Choice 1',  # This should trigger a non-form error\n+            'choices-1-votes': '1',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, validate_max=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertHTMLEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a choice once.</li></ul>'\n+        )\n+        \n+    def test_formset_validate_max_html_output(self):\n+        \"\"\"\n+        Test the HTML output of non-form errors when exceeding max forms.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '3',  # more than max_num\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-0-choice': 'Choice 1',\n+            'choices-0-votes': '1',\n+            'choices-1-choice': 'Choice 2',\n+            'choices-1-votes': '1',\n+            'choices-2-choice': 'Choice 3',\n+            'choices-2-votes': '1',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=0, max_num=2, validate_max=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertHTMLEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n         initial = [\n             {'choice': 'Zero', 'votes': 0},\n             {'choice': 'One', 'votes': 0},\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..b0a7ff1 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,38 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_datetime_clean_initial_callable_disabled_bound_field_consistency(self):\n+        \"\"\"\n+        Ensure consistency when using BoundField for a disabled field with callable initial.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        cleaned = form.cleaned_data['dt']\n+        bf_initial = form['dt'].initial\n+        \n+        self.assertEqual(cleaned, bf_initial)\n+        self.assertEqual(cleaned, now)\n+\n+    def test_bound_field_changes_detected_correctly(self):\n+        \"\"\"\n+        Verify that changed_data works correctly when accessing fields via BoundField.\n+        \"\"\"\n+        initial_data = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+        \n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: initial_data)\n+        \n+        # Same data, should not be in changed_data\n+        form_with_same_data = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n+        self.assertEqual(form_with_same_data.changed_data, [])\n+\n+        # Different data, should detect change\n+        form_with_different_data = DateTimeForm({'dt': '2006-10-25 15:30:45'})\n+        self.assertEqual(form_with_different_data.changed_data, ['dt'])\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..1e5b02b 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -3,6 +3,8 @@ from operator import attrgetter\n \n from django.db import IntegrityError\n from django.test import TestCase\n+from django.db import models\n+from django.core.checks import Error\n \n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..fe0d535 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,5 +1,42 @@\n+\n+import json\n+import datetime\n import json\n-from contextlib import contextmanager\n+from django.test import TestCase\n+from django.urls import path\n+from .models import Question\n+from django.utils.safestring import mark_safe\n+from django.views import View\n+\n+\n+class CustomAutocompleteJsonView(AutocompleteJsonView):\n+    def serialize_result(self, obj, to_field_name):\n+        return {**super().serialize_result(obj, to_field_name), 'notes': obj.notes}\n+\n+\n+class AutocompleteJsonViewTestCase(TestCase):\n+    def setUp(self):\n+        self.superuser = User.objects.create_superuser(username='super', password='secret', email='super@example.com')\n+        self.factory = RequestFactory()\n+        self.view = CustomAutocompleteJsonView.as_view(admin_site=AdminSeleniumTestCase.admin_site)\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9), notes='Note 1')\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7), notes='Note 2')\n+        self.url = reverse('admin:app_question_autocomplete')\n+\n+    def test_serialize_result_with_notes(self):\n+        request = self.factory.get(self.url, {'term': 'Question'})\n+        request.user = self.superuser\n+        response = self.view(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode())\n+        expected_data = {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'notes': q.notes}\n+                for q in Question.objects.all().order_by('posted')\n+            ],\n+            'pagination': {'more': False}\n+        }\n+        self.assertEqual(data, expected_data)\n \n from django.contrib import admin\n from django.contrib.admin.tests import AdminSeleniumTestCase\n",
  "django__django-14765": "",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..123e375 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -165,8 +165,32 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                     frozenset(),\n                 )\n \n+import sys\n+from django.utils import autoreload\n+from unittest import mock, SimpleTestCase\n+import tempfile\n+from pathlib import Path\n+import types\n+from subprocess import CompletedProcess\n \n class TestChildArguments(SimpleTestCase):\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    def test_xoptions_passed_correctly(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    @mock.patch('sys._xoptions', {})\n+    def test_no_xoptions(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, __file__, 'runserver']\n+        )\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..94b7561 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -271,7 +271,29 @@ class MethodDecoratorTests(SimpleTestCase):\n                 self.assertEqual(Test.method.__doc__, 'A method')\n                 self.assertEqual(Test.method.__name__, 'method')\n \n-    def test_new_attribute(self):\n+    def test_wrapper_assignments_partial(self):\n+        \"\"\"Ensure method_decorator preserves wrapper assignments with partial objects.\"\"\"\n+\n+        from functools import partial, wraps\n+        \n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            def real_method(self):\n+                return \"hello\"\n+        \n+            @method_decorator(decorator)\n+            def method(self):\n+                return self.real_method()\n+\n+        partial_method = partial(Test().method)\n+        self.assertEqual(partial_method(), \"hello\")\n+        self.assertEqual(partial_method.__name__, \"method\")\n+        self.assertIsNotNone(partial_method.__module__)\n         \"\"\"A decorator that sets a new attribute on the method.\"\"\"\n         def decorate(func):\n             func.x = 1\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..12f9a20 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5132,6 +5132,43 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n \n+    def _test_readonly_foreignkey_links_for_custom_admin_sites(self, admin_site):\n+        chapter = Chapter.objects.create(\n+            title='Chapter 2',\n+            content='content',\n+            book=Book.objects.create(name='Book 2'),\n+        )\n+        language = Language.objects.create(iso='_41', name='Test Custom Admin')\n+        chapter.language = language\n+        chapter.save()\n+\n+        # Access the change form view for the created chapter object\n+        response = self.client.get(reverse(f'{admin_site}:admin_views_chapter_change', args=(chapter.pk,)))\n+        self.assertEqual(response.status_code, 200)\n+\n+        # Assert the foreign key link is correctly generated with the custom admin namespace\n+        language_url = reverse(\n+            f'{admin_site}:admin_views_language_change',\n+            args=(quote(language.pk),),\n+        )\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_41</a></div>' % language_url,\n+            html=True,\n+        )\n+\n+    def test_readonly_foreignkey_links_for_custom_site2(self):\n+        \"\"\"\n+        Test readonly ForeignKey links generation in a site2 custom admin.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links_for_custom_admin_sites('site2')\n+\n+    def test_readonly_foreignkey_links_for_custom_site7(self):\n+        \"\"\"\n+        Test readonly ForeignKey links generation in a site7 custom admin.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links_for_custom_admin_sites('admin7')\n+\n     def test_readonly_manytomany_backwards_ref(self):\n         \"\"\"\n         Regression test for #16433 - backwards references for related objects\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..2b2df97 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,27 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_choice_value_in_dict(self):\n+        \"\"\"\n+        Test that ModelChoiceIteratorValue can be used as a key in a dict,\n+        providing it behaves like a hashable object.\n+        \"\"\"\n+        mapping = {ModelChoiceIteratorValue(self.c1.pk, self.c1): 'value_1'}\n+        self.assertIn(ModelChoiceIteratorValue(self.c1.pk, None), mapping)\n+\n+    def test_choice_value_in_set(self):\n+        \"\"\"\n+        Test that ModelChoiceIteratorValue can be used in a set,\n+        ensuring set operations work as expected.\n+        \"\"\"\n+        value_set = {ModelChoiceIteratorValue(self.c1.pk, self.c1)}\n+        self.assertIn(ModelChoiceIteratorValue(self.c1.pk, None), value_set)\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..6ac4da4 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -170,8 +170,30 @@ class ChangeListTests(TestCase):\n         link = reverse('admin:admin_changelist_child_change', args=(new_child.id,))\n         row_html = build_tbody_html(new_child.id, link, '<td class=\"field-parent nowrap\">-</td>')\n         self.assertNotEqual(table_output.find(row_html), -1, 'Failed to find expected row element: %s' % table_output)\n-\n-    def test_result_list_set_empty_value_display_on_admin_site(self):\n+    \n+    def test_unnecessary_joins_with_multiple_search_terms(self):\n+        \"\"\"\n+        Test that searching with multiple terms in the admin does not result in unnecessary joins.\n+        Specifically tests the case where more than 3 search terms resulted in a stall\n+        due to excessive joins in the past.\n+        \"\"\"\n+        # Set up test data that mirrors the issue context\n+        client = Client.objects.create(name='ClientA')\n+        ClientOffice.objects.create(client=client, name='Office1')\n+        ClientOffice.objects.create(client=client, name='Office2')\n+\n+        # Create admin instance and request\n+        m = ClientAdmin(Client, custom_site)\n+        request = self.factory.get('/client/', data={SEARCH_VAR: 'office1 office2'})\n+        request.user = self.superuser\n+        \n+        # Capture queries to check the number of JOINs\n+        cl = m.get_changelist_instance(request)\n+        with CaptureQueriesContext(connection) as context:\n+            cl.queryset.count()\n+        \n+        # Check that not more than a reasonable number of joins are present\n+        self.assertLessEqual(context.captured_queries[0]['sql'].count('JOIN'), 2)\n         \"\"\"\n         Empty value display can be set on AdminSite.\n         \"\"\"\n",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex b862331..6b5ac0b 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -152,6 +152,23 @@ class TestUtilsHtml(SimpleTestCase):\n                 self.check_output(escapejs, lazystr(value), output)\n \n     def test_json_script(self):\n+        # Test without an element_id\n+        self.assertEqual(\n+            json_script({'key': 'value'}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+        )\n+        self.assertEqual(\n+            json_script('simple string'),\n+            '<script type=\"application/json\">\"simple string\"</script>'\n+        )\n+        self.assertEqual(\n+            json_script(12345),\n+            '<script type=\"application/json\">12345</script>'\n+        )\n+        self.assertEqual(\n+            json_script({'nested': {'key': 'value'}}),\n+            '<script type=\"application/json\">{\"nested\": {\"key\": \"value\"}}</script>'\n+        )\n         tests = (\n             # \"<\", \">\" and \"&\" are quoted inside JSON strings\n             (('&<>', '<script id=\"test_id\" type=\"application/json\">\"\\\\u0026\\\\u003C\\\\u003E\"</script>')),\n@@ -276,4 +293,4 @@ class TestUtilsHtml(SimpleTestCase):\n         )\n         for value in tests:\n             with self.subTest(value=value):\n-                self.assertEqual(urlize(value), value)\n+                self.assertEqual(urlize(value), value)\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..14a86c5 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2834,8 +2834,49 @@ class AutodetectorTests(TestCase):\n                     expected_number,\n                 )\n \n+from django.test import SimpleTestCase\n+from django.db import models\n+from django.db.migrations.state import ModelState, ProjectState\n+from django.db.migrations.autodetector import MigrationAutodetector\n \n-class MigrationSuggestNameTests(SimpleTestCase):\n+class CustomForeignKey(models.ForeignKey):\n+    def __init__(self, *args, **kwargs):\n+        kwargs['to'] = 'testapp.HardcodedModel'\n+        super().__init__(*args, **kwargs)\n+\n+    def deconstruct(self):\n+        name, path, args, kwargs = super().deconstruct()\n+        del kwargs['to']\n+        return name, path, args, kwargs\n+\n+class MigrationAutodetectorCustomFKTests(SimpleTestCase):\n+\n+    def test_custom_fk_with_hardcoded_to_field(self):\n+        before_state = ProjectState()\n+        before_state.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        \n+        after_state = ProjectState()\n+        after_state.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after_state.add_model(ModelState('testapp', 'TestModel', [\n+            ('field', CustomForeignKey(on_delete=models.CASCADE))\n+        ]))\n+\n+        changes = MigrationAutodetector(before_state, after_state).changes(graph=None)\n+        self.assertEqual(len(changes['testapp']), 1)\n+\n+    def test_custom_fk_handling_deconstruction_of_to_kwarg(self):\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'AnotherModel', [\n+            ('custom_fk', CustomForeignKey(on_delete=models.CASCADE))\n+        ]))\n+\n+        detector = MigrationAutodetector(before, after)\n+        changes = detector._detect_changes()\n+        self.assertEqual(len(changes['testapp']), 1)\n+        self.assertIn('AnotherModel', str(changes['testapp'][0]))\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n             operations = []\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..6b372aa 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -375,6 +376,34 @@ class BaseTests:\n         constants.ERROR: 'bad',\n         29: 'custom',\n     })\n+\n+    @override_settings(MESSAGE_TAGS={\n+        constants.INFO: 'overridden_info',\n+        constants.DEBUG: 'overridden_debug',\n+        constants.WARNING: 'overridden_warning',\n+        constants.ERROR: 'overridden_error',\n+        13: 'overridden_custom',\n+    })\n+    def test_override_settings_updates_level_tags(self):\n+        # Verify that the settings have overridden LEVEL_TAGS\n+        expected_tags = {\n+            constants.INFO: 'overridden_info',\n+            constants.DEBUG: 'overridden_debug',\n+            constants.WARNING: 'overridden_warning',\n+            constants.ERROR: 'overridden_error',\n+            13: 'overridden_custom',\n+        }\n+        self.assertEqual(base.LEVEL_TAGS, expected_tags)\n+\n+        # Create a storage object and ensure it uses the new tags\n+        storage = self.get_storage()\n+        storage.add(constants.INFO, 'info message')\n+        storage.add(constants.DEBUG, 'debug message')\n+        storage.add(constants.WARNING, 'warning message')\n+        storage.add(constants.ERROR, 'error message')\n+\n+        tags = [msg.tags for msg in storage]\n+        self.assertEqual(tags, ['overridden_info', 'overridden_debug', 'overridden_warning', 'overridden_error'])\n     def test_custom_tags(self):\n         storage = self.get_storage()\n         storage.level = 0\n",
  "django__django-15128": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a7bb7e8..e2b4fdd 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -613,7 +613,8 @@ class OrderItem(models.Model):\n \n \n class BaseUser(models.Model):\n-    pass\n+    annotation = models.ForeignKey('Annotation', models.CASCADE, null=True, blank=True)\n+    note = models.ForeignKey('Note', on_delete=models.CASCADE, null=True, blank=True)\n \n \n class Task(models.Model):\n",
  "django__django-15161": "",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..e461ff0 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1762,7 +1762,43 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'newfield2')},\n         )\n \n-    def test_proxy(self):\n+    def test_foo_together_optimization(self):\n+        \"\"\"\n+        Verify that multiple AlterFooTogether operations are optimized into one.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book], [self.author_empty, self.book_foo_together_3]\n+        )\n+        # Check that the operations have been optimized\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, \"otherapp\", 0, [\n+            \"AddField\", \"AlterUniqueTogether\", \"AlterIndexTogether\"\n+        ])\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 1, name=\"book\", unique_together={(\"title\", \"newfield\")}\n+        )\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 2, name=\"book\", index_together={(\"title\", \"newfield\")}\n+        )\n+\n+    def test_reduce_foo_together(self):\n+        \"\"\"\n+        Test case to verify the reduction of AlterFooTogether operations.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together], [self.author_empty, self.book_foo_together_4]\n+        )\n+        # Check that the operations have been optimized and reduced\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, \"otherapp\", 0, [\n+            \"AlterUniqueTogether\", \"AlterIndexTogether\"\n+        ])\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 0, name=\"book\", unique_together={(\"title\", \"newfield2\")}\n+        )\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 1, name=\"book\", index_together={(\"title\", \"newfield2\")}\n+        )\n         \"\"\"The autodetector correctly deals with proxy models.\"\"\"\n         # First, we test adding a proxy model\n         changes = self.get_changes([self.author_empty], [self.author_empty, self.author_proxy])\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..647226e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,7 +1847,34 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n-    def test_resolve_output_field_failure(self):\n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        Ensures output fields from Value(...) do not instantiate broken validators.\n+        \"\"\"\n+        import datetime\n+        from decimal import Decimal\n+        import uuid\n+        from django.db.models import Value\n+\n+        value_types = [\n+            'str',  # String test\n+            True,  # Boolean test\n+            42,  # Integer test\n+            3.14,  # Float test\n+            datetime.date(2019, 5, 15),  # Date test\n+            datetime.datetime(2019, 5, 15),  # DateTime test\n+            datetime.time(3, 16),  # Time test\n+            datetime.timedelta(1),  # Timedelta test\n+            Decimal('3.14'),  # Decimal test\n+            b'',  # Byte string test\n+            uuid.uuid4(),  # UUID test\n+        ]\n+\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                # Ensure no error is raised on clean as validators should not break\n+                field.clean(value, model_instance=None)\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n             Value(object()).output_field\n",
  "django__django-15278": "",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..3612f61 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -19,6 +19,19 @@ class Nested:\n \n class BasicFieldTests(SimpleTestCase):\n \n+    def test_hash_immutability(self):\n+        \"\"\"\n+        Test that the hash value of a model field does not change \n+        after assignment to a model class.\n+        \"\"\"\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n     def test_show_hidden_initial(self):\n         \"\"\"\n         Fields with choices respect show_hidden_initial as a kwarg to\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..57f261e 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,7 +204,28 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n-    def test_field_references(self):\n+    def test_f_expression_char_field(self):\n+        # Prepare test data\n+        notes = [\n+            Note.objects.create(note='test_note', misc='test_misc')\n+            for _ in range(10)\n+        ]\n+        # Assign F() expressions\n+        for note in notes:\n+            note.misc = F('note')\n+        # Perform bulk update\n+        Note.objects.bulk_update(notes, ['misc'])\n+        # Verify results\n+        self.assertCountEqual(Note.objects.filter(misc='test_note'), notes)\n+\n+    def test_f_expression_selfref(self):\n+        # Prepare self-referential model test data\n+        o = SelfRef.objects.create(name='test_name', c8='random_data')\n+        o.c8 = F('name')\n+        SelfRef.objects.bulk_update([o], ['c8'])\n+        o.refresh_from_db()\n+        # Verify that F() expression resolves correctly\n+        self.assertEqual(o.c8, 'test_name')\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n             number.num = F('num') + 1\n",
  "django__django-15380": "",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..5d5f106 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1905,6 +1905,21 @@ class ExistsTests(TestCase):\n         )\n         self.assertNotIn('ORDER BY', captured_sql)\n \n+class ExistsSubqueryTests(TestCase):\n+    \n+    def test_negated_exists_with_empty_subquery(self):\n+        manager = Manager.objects.create(name='test')\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none())\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+        \n+        captured_queries = connection.queries_log\n+        self.assertEqual(len(captured_queries), 1)\n+        captured_sql = captured_queries[0]['sql']\n+        self.assertIn('NOT EXISTS', captured_sql, \"SQL should contain NOT EXISTS\")\n+        self.assertIn('name', captured_sql, \"SQL should contain the name field\")\n+\n \n class FieldTransformTests(TestCase):\n \n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..d0cef13 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -10,6 +10,10 @@ except ImportError:\n     from backports import zoneinfo\n \n from django import forms\n+from django.contrib import admin\n+from django.db.models import ForeignKey\n+from django.test import TestCase\n+from .models import Inventory\n from django.conf import settings\n from django.contrib import admin\n from django.contrib.admin import widgets\n@@ -140,8 +144,16 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             radio_fields={\"main_band\": admin.VERTICAL},\n         )\n         self.assertIsNone(ff.empty_label)\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            formfield_overrides = {\n+                ForeignKey: {\"empty_label\": \"Custom empty label\"},\n+            }\n \n-    def test_many_to_many(self):\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n         self.assertFormfield(Band, \"members\", forms.SelectMultiple)\n \n     def test_raw_id_many_to_many(self):\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..79d8e7e 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,118 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_alter_model_managers_simple(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Foo\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Foo\",\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\",\n+                    fields=[],\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_and_alter_managers_and_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    options={\"verbose_name\": \"Bar\"},\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[(\"objects\", models.Manager())],\n+                ),\n+                migrations.AlterModelOptions(\n+                    name=\"Bar\",\n+                    options={\"verbose_name\": \"Bar Modified\"}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[(\"objects\", models.Manager())],\n+                    options={\"verbose_name\": \"Bar Modified\"},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+        )\n+\n+    def test_create_alter_model_managers_simple(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Foo\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Foo\",\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\",\n+                    fields=[],\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_and_alter_managers_and_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    options={\"verbose_name\": \"Bar\"},\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[(\"objects\", models.Manager())],\n+                ),\n+                migrations.AlterModelOptions(\n+                    name=\"Bar\",\n+                    options={\"verbose_name\": \"Bar Modified\"}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[(\"objects\", models.Manager())],\n+                    options={\"verbose_name\": \"Bar Modified\"},\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n@@ -137,6 +249,62 @@ class OptimizerTests(SimpleTestCase):\n                     fields=[],\n                     options={\"verbose_name\": \"My Model\"},\n                 ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n+                ),\n+            ],\n+        )\n+\n+    def test_create_alter_model_managers_simple(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Foo\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Foo\",\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\",\n+                    fields=[],\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_and_alter_managers_and_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    options={\"verbose_name\": \"Bar\"},\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[(\"objects\", models.Manager())],\n+                ),\n+                migrations.AlterModelOptions(\n+                    name=\"Bar\",\n+                    options={\"verbose_name\": \"Bar Modified\"}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[(\"objects\", models.Manager())],\n+                    options={\"verbose_name\": \"Bar Modified\"},\n+                ),\n                 migrations.AlterModelOptions(\"MyModel\", options={}),\n             ],\n             [migrations.CreateModel(\"MyModel\", fields=[])],\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/models.py b/tests/fixtures_regress/models.py\nindex 6245d2f..3bcbf94 100644\n--- a/tests/fixtures_regress/models.py\n+++ b/tests/fixtures_regress/models.py\n@@ -15,6 +15,34 @@ class Animal(models.Model):\n         return self.name\n \n \n+from django.db import models\n+\n+\n+class Person(models.Model):\n+    name = models.CharField(max_length=255, unique=True)\n+\n+    def natural_key(self):\n+        return (self.name,)\n+\n+\n+class NaturalKeyWithFKDependencyManager(models.Manager):\n+    def get_by_natural_key(self, name, author):\n+        return self.get(name=name, author__name=author)\n+\n+\n+class NaturalKeyWithFKDependency(models.Model):\n+    name = models.CharField(max_length=255)\n+    author = models.ForeignKey(Person, models.CASCADE)\n+    objects = NaturalKeyWithFKDependencyManager()\n+\n+    class Meta:\n+        unique_together = [\"name\", \"author\"]\n+\n+    def natural_key(self):\n+        return (self.name,) + self.author.natural_key()\n+\n+    natural_key.dependencies = [\"fixtures_regress.Person\"]\n+\n class Plant(models.Model):\n     name = models.CharField(max_length=150)\n \n",
  "django__django-15561": "",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..a72e1c6 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -312,6 +312,22 @@ class LookupTests(TestCase):\n         with register_lookup(models.Field, Exactly):\n             self.assertIsNone(field.get_lookup(\"exactly\"))\n \n+    def test_lookup_unregister_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+        \n+        # Ensure the cache is cleared initially\n+        field.get_lookups.cache_clear()\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+\n+        with register_lookup(models.ForeignObject, Exactly):\n+            # Ensure 'exactly' lookup is registered\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n+            # Unregister the lookup\n+            models.ForeignObject._unregister_lookup(Exactly)\n+            # Assert cache is cleared and 'exactly' is no longer in lookups\n+            self.assertNotIn(\"exactly\", field.get_lookups())\n+\n     def test_lookups_caching(self):\n         field = Article._meta.get_field(\"author\")\n \n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..84fb194 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -6,6 +7,8 @@ from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n from django.db.models.manager import BaseManager\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n+import inspect\n+from functools import wraps\n from django.test import (\n     SimpleTestCase,\n     TestCase,\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..214ee2a 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,7 +1,10 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy as _\n+from django.utils.formats import get_format\n from django.utils import timezone, translation\n \n from ..utils import setup\n@@ -74,7 +77,15 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n-    def test_date(self):\n+    def test_get_format_lazy_format(self):\n+        \"\"\"Tests get_format with a lazy string input to ensure it returns the expected format.\"\"\"\n+        self.assertEqual(get_format(_(\"DATE_FORMAT\")), \"N j, Y\")\n+\n+    @setup({\"datelazy\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy(self):\n+        \"\"\"Tests date template filter with lazy input to ensure proper rendering.\"\"\"\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n     def test_no_args(self):\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..938d52f 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,11 +398,19 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n-\n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n-class ProxyModelAdminTests(TestCase):\n-    @classmethod\n-    def setUpTestData(cls):\n+from django.test import TestCase\n+from django.db import models\n+from myapp.models import ProxyCustomModel, AnotherModel\n+\n+class ProxyModelSelectRelatedTests(TestCase):\n+    def setUp(self):\n+        self.proxy_custom = ProxyCustomModel.objects.create(name=\"Proxy Model\")\n+        \n+    def test_select_related_only_proxy_model(self):\n+        another_instance = AnotherModel.objects.create(custom=self.proxy_custom)\n+        qs = AnotherModel.objects.select_related('custom').only('custom__name')\n+        result = qs.first()\n+        self.assertEqual(result.custom.name, \"Proxy Model\")\n         cls.superuser = AuthUser.objects.create(is_superuser=True, is_staff=True)\n         cls.tu1 = ProxyTrackerUser.objects.create(name=\"Django Pony\", status=\"emperor\")\n         cls.i1 = Issue.objects.create(summary=\"Pony's Issue\", assignee=cls.tu1)\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..c243d2d 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,6 +157,12 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_custom_parameters_order(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..6d537e8 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -73,8 +73,25 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, 20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n-\n-    def test_force_grouping(self):\n+    \n+    def test_decimal_precision(self):\n+        # Test case for verifying that precision is not lost for high precision Decimals\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.000000000000003142\"), 18),\n+            \"0.000000000000003142\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"-0.000000000000003142\"), 18),\n+            \"-0.000000000000003142\"\n+        )\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n             self.assertEqual(floatformat(66666.666, \"1g\"), \"66,666.7\")\n",
  "django__django-15930": "",
  "django__django-15987": "",
  "django__django-16032": "",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..bf3823f 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2406,7 +2406,22 @@ class CombinableTests(SimpleTestCase):\n             object() ^ Combinable()\n \n \n-class CombinedExpressionTests(SimpleTestCase):\n+class ModExpressionTests(SimpleTestCase):\n+    def test_mod_output_field_resolution(self):\n+        tests = [\n+            (IntegerField, DecimalField, DecimalField),\n+            (DecimalField, IntegerField, DecimalField),\n+            (DecimalField, DecimalField, DecimalField),\n+            (IntegerField, IntegerField, IntegerField),\n+        ]\n+\n+        for lhs, rhs, expected_output in tests:\n+            with self.subTest(lhs=lhs, rhs=rhs, expected_output=expected_output):\n+                lhs_expr = F('lhs', output_field=lhs())\n+                rhs_expr = F('rhs', output_field=rhs())\n+                mod_expr = CombinedExpression(lhs_expr, Combinable.MOD, rhs_expr)\n+                # Check the output field of the mod expression\n+                self.assertIsInstance(mod_expr.output_field, expected_output)\n     def test_resolve_output_field_number(self):\n         tests = [\n             (IntegerField, AutoField, IntegerField),\n@@ -2416,7 +2431,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..674c4d8 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,10 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.urls import reverse\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +404,55 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        # Create test objects\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+\n+        # Simulate an error during logging changes\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Verify objects retain original values\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        # Test successful post without exceptions\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=None\n+        ):\n+            response = self.client.post(changelist_url, data)\n+            self.assertEqual(response.status_code, 200)\n+        # Verify objects are updated\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 9)\n+        self.assertEqual(a.speed, 3)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 5)\n+        self.assertEqual(b.speed, 1)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..188ddd5 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,17 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_dry_run_equivalent(self):\n+        \"\"\"\n+        makemigrations --check should behave as if --dry-run is also applied,\n+        i.e., it should not create migrations if there are changes.\n+        Only the exit status should indicate if changes are needed.\n+        \"\"\"\n+        with self.temporary_migration_module() as migration_dir:\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            # The directory should not exist, meaning no migrations were created\n+            self.assertFalse(os.path.exists(migration_dir))\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..0534743 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,8 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+import asyncio\n+from django.test import SimpleTestCase, RequestFactory\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n \n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..fe35069 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,6 +1,8 @@\n+\n import datetime\n import re\n-from unittest import mock\n+import urllib.parse\n+from django.urls import reverse\n \n from django.contrib.auth.forms import (\n     AdminPasswordChangeForm,\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..c0b633c 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,6 +1600,27 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n+    def test_runserver_zero_ip(self):\n+        \"\"\"\n+        Ensure that running runserver with the zero IP '0:8000' format\n+        correctly outputs the address 'http://0.0.0.0:8000/'.\n+        \"\"\"\n+        with mock.patch(\"django.core.management.commands.runserver.run\"), \\\n+             mock.patch(\"django.core.management.base.BaseCommand.check_migrations\"):\n+                 \n+            self.output = io.StringIO()\n+            call_command(\n+                \"runserver\",\n+                addrport=\"0:8000\",\n+                use_reloader=False,\n+                skip_checks=True,\n+                stdout=self.output,\n+            )\n+            self.assertIn(\n+                \"Starting development server at http://0.0.0.0:8000/\",\n+                self.output.getvalue()\n+            )\n+\n     def test_runner_hostname(self):\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..9afcab8 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,9 +507,39 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+import os\n+from django.test import TestCase, override_settings\n+from django.contrib.sitemaps import Sitemap\n+from django.urls import path\n+from django.utils import timezone\n+from datetime import datetime\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+callable_lastmod_no_items_sitemap = {\n+    \"callable-lastmod\": CallableLastmodNoItemsSitemap,\n+}\n+\n+class SitemapTests(TestCase):\n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        # Ensure there is no Last-Modified header\n+        self.assertNotIn(\"Last-Modified\", index_response.headers)\n \n-# RemovedInDjango50Warning\n-class DeprecatedTests(SitemapTestsBase):\n+        # Compare the XML content\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n     @override_settings(\n         TEMPLATES=[\n             {\n",
  "django__django-16315": "",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..0a16d81 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -261,6 +263,74 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = UserCreationForm(data)\n         self.assertTrue(form.is_valid())\n         self.assertEqual(form.cleaned_data[\"password1\"], data[\"password1\"])\n+\n+    def test_custom_form_saves_many_to_many_field(self):\n+        \"\"\"\n+        Test that the CustomUserCreationForm correctly saves ManyToManyField data.\n+        \"\"\"\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_save_without_commit(self):\n+        \"\"\"\n+        Test that saving a CustomUserCreationForm with commit=False does\n+        not immediately save the ManyToManyField data.\n+        \"\"\"\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient2@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=False)\n+        # At this point, user.orgs.all() should be empty\n+        self.assertSequenceEqual(user.orgs.all(), [], \"Org data should not yet be saved.\")\n+        # Now, we call form.save_m2m() and the related object should be added\n+        form.save_m2m()\n+        self.assertSequenceEqual(user.orgs.all(), [organization], \"Org data should be saved after calling save_m2m().\")\n+\n+    def test_custom_form_invalid_data(self):\n+        \"\"\"\n+        Test that the form is invalid if ManyToManyField data is absent.\n+        \"\"\"\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        # No organizations provided\n+        data = {\n+            \"username\": \"testclient3@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertFalse(form.is_valid(), \"Form should be invalid when orgs field is empty.\")\n         self.assertEqual(form.cleaned_data[\"password2\"], data[\"password2\"])\n \n     @override_settings(\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..e058569 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -170,6 +171,22 @@ class TimesinceTests(TestCase):\n         past = datetime.datetime(1980, 1, 1, tzinfo=naive())\n         self.assertEqual(timeuntil(past), \"0\\xa0minutes\")\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_tz_aware(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        dt_with_tz = timezone.make_aware(d, timezone.get_default_timezone())\n+        self.assertEqual(timesince(dt_with_tz, now), \"1\\xa0month\")\n+        \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_tz_aware_future(self):\n+        now = timezone.now()\n+        d = now + datetime.timedelta(days=31)\n+        dt_with_tz = timezone.make_aware(d, timezone.get_default_timezone())\n+        self.assertEqual(timeuntil(dt_with_tz, now), \"1\\xa0month\")\n+\n     def test_thousand_years_ago(self):\n         t = datetime.datetime(1007, 8, 14, 13, 46, 0)\n         self.assertEqual(timesince(t, self.t), \"1000\\xa0years\")\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..02debf5 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -468,6 +468,30 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), \"Set foo\")\n \n+    def test_missing_subcommand_argument(self):\n+        \"\"\"\n+        Test case for missing subcommand argument to check error message formatting.\n+        \"\"\"\n+        out, err = self.run_manage([\"cheeses\", \"create\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertIn(\n+            \"manage.py cheeses create: error: the following arguments are required: name\",\n+            err_lines,\n+        )\n+\n+    def test_invalid_subcommand_argument(self):\n+        \"\"\"\n+        Test case for invalid subcommand argument type.\n+        \"\"\"\n+        out, err = self.run_manage([\"subparser\", \"foo\", \"not_an_int\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(\n+            err_lines[-1],\n+            \"manage.py subparser foo: error: argument bar: invalid int value: 'not_an_int'\",\n+        )\n+\n \n class UtilsTests(SimpleTestCase):\n     def test_no_existent_external_program(self):\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..a90a481 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -108,6 +108,25 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(0, 6), \"0.000000\")\n         self.assertEqual(floatformat(0, 7), \"0.0000000\")\n         self.assertEqual(floatformat(0, 10), \"0.0000000000\")\n+\n+    def test_issue_floatformat_precision(self):\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")  # Original test case\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")  # Original test case\n+\n+        # Additional test cases for robustness\n+        self.assertEqual(floatformat(\"0.00\", 1), \"0.0\")\n+        self.assertEqual(floatformat(\"0.00\", 2), \"0.00\")\n+        self.assertEqual(floatformat(\"-0.00\", 2), \"0.00\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 3), \"0.000\")\n+        self.assertEqual(floatformat(\"-0.01\", 1), \"-0.0\")\n+        self.assertEqual(floatformat(Decimal(\"-0.01\"), 1), \"-0.0\")\n+        self.assertEqual(floatformat(0.001, 0), \"0\")\n+        self.assertEqual(floatformat(\"-0.001\", 0), \"0\")\n+\n+        # Test with non-decimal numbers\n+        self.assertEqual(floatformat(123.456, 0), \"123\")\n+        self.assertEqual(floatformat(123.456, -1), \"123.5\")\n+        self.assertEqual(floatformat(123.456, 1), \"123.5\")\n         self.assertEqual(\n             floatformat(0.000000000000000000015, 20), \"0.00000000000000000002\"\n         )\n",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..54075c2 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,6 +1018,26 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n+\n+    def test_random_storage_callable_deconstruction(self):\n+        \"\"\"\n+        Test the deconstruction of a FileField using a random choice storage callable.\n+        \"\"\"\n+        class ModelWithRandomStorage(models.Model):\n+            file = models.FileField(storage=get_storage)\n+\n+        fields = [ModelWithRandomStorage._meta.get_field(\"file\").deconstruct() for _ in range(10)]\n+        for args, kwargs in (f[1:] for f in fields):\n+            self.assertIn('storage', kwargs)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..c43b984 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -9,6 +10,8 @@ from django.test import RequestFactory, TestCase\n from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from .models import Article, Question\n from .tests import AdminViewBasicTestCase\n \n@@ -33,6 +36,40 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        # User with only change permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with add and change permission\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_show_save_and_add_another(self):\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n",
  "django__django-16560": "",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..8fd3f83 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1476,6 +1476,22 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n \n         formset = ChoiceFormFormset(initial=[{\"choice\": \"Zero\", \"votes\": \"1\"}])\n+\n+    def test_formset_empty_form_does_not_raise_error_when_index_is_none(self):\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+\n+        my_formset = MyFormSet(\n+            initial=None,\n+        )\n+        empty_form = my_formset.empty_form\n+        self.assertNotIn(\"DELETE\", empty_form.fields)\n         self.assertEqual(len(formset), 3)\n         self.assertIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "",
  "django__django-16612": "",
  "django__django-16642": "",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..2337a11 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -141,17 +141,47 @@ class ModelAdminTests(TestCase):\n         class EmployeeProfileAdmin(ModelAdmin):\n             list_filter = [\n                 \"employee__employeeinfo__description\",\n-                \"employee__department__code\",\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n             ]\n \n-        ma = EmployeeProfileAdmin(EmployeeProfile, self.site)\n-        # Reverse OneToOneField\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n         self.assertIs(\n-            ma.lookup_allowed(\"employee__employeeinfo__description\", \"test_value\"), True\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n         )\n-        # OneToOneField and ForeignKey\n         self.assertIs(\n-            ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+\n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_foreign_primary(self):\n+        # Test case to ensure lookups with foreign keys as primary keys are allowed\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n         )\n \n     def test_field_arguments(self):\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..1097e02 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,55 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_import_order_with_multiple_imports(self):\n+        \"\"\"\n+        Test the order of imports when multiple modules are imported.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ],\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n+\n+    def test_import_order_mixed_import_types(self):\n+        \"\"\"\n+        Test the order of imports when mixing 'import' and 'from ... import'.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield3\",\n+                        models.CharField(max_length=255),\n+                    ),\n+                ],\n+                # Dummy attribute to check isort compliance\n+                \"dummy_import\": datetime.datetime.now,\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..6e9f8f7 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -296,6 +296,32 @@ class SystemChecksTestCase(SimpleTestCase):\n         class SongAdmin(admin.ModelAdmin):\n             list_editable = [\"original_release\"]\n \n+        errors = SongAdmin(Song, AdminSite()).check()\n+        self.assertEqual(errors, [])\n+\n+    def test_readonly_field_name_in_error_message(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"non_existent_field\",)\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'non_existent_field', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an \"\n+                \"attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_readonly_fields_callable(self):\n+        def readonly_method(obj):\n+            return \"Read Only\"\n+\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (readonly_method,)\n+\n         errors = SongAdmin(Song, AdminSite()).check()\n         expected = [\n             checks.Error(\n@@ -784,6 +810,32 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         self.assertEqual(errors, [])\n \n+    def test_readonly_field_name_in_error_message(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"non_existent_field\",)\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'non_existent_field', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an \"\n+                \"attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_readonly_fields_callable(self):\n+        def readonly_method(obj):\n+            return \"Read Only\"\n+\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (readonly_method,)\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        self.assertEqual(errors, [])\n+\n     def test_readonly_method_on_model(self):\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = (\"readonly_method_on_model\",)\n@@ -791,10 +843,62 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         self.assertEqual(errors, [])\n \n+    def test_readonly_field_name_in_error_message(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"non_existent_field\",)\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'non_existent_field', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an \"\n+                \"attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_readonly_fields_callable(self):\n+        def readonly_method(obj):\n+            return \"Read Only\"\n+\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (readonly_method,)\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        self.assertEqual(errors, [])\n+\n     def test_nonexistent_field(self):\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = (\"title\", \"nonexistent\")\n \n+        errors = SongAdmin(Song, AdminSite()).check()\n+        self.assertEqual(errors, [])\n+\n+    def test_readonly_field_name_in_error_message(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"non_existent_field\",)\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'non_existent_field', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an \"\n+                \"attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_readonly_fields_callable(self):\n+        def readonly_method(obj):\n+            return \"Read Only\"\n+\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (readonly_method,)\n+\n         errors = SongAdmin(Song, AdminSite()).check()\n         expected = [\n             checks.Error(\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..4376b45 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -19,7 +20,30 @@ class XorLookupsTests(TestCase):\n             self.numbers[:3] + self.numbers[8:],\n         )\n \n-    def test_filter_negated(self):\n+    def test_xor_parity(self):\n+        # Testing XOR in a parity context with an odd number of terms.\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5)),\n+            self.numbers[1:3] + self.numbers[5:],\n+        )\n+\n+        # Testing XOR in a parity context with an even number of terms.\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5) ^ Q(num__gte=7)),\n+            self.numbers[1:3] + self.numbers[5:7],\n+        )\n+\n+        # Testing XOR with a larger number of terms to examine odd/even behavior.\n+        self.assertCountEqual(\n+            Number.objects.filter(\n+                Q(num__gte=1)\n+                ^ Q(num__gte=3)\n+                ^ Q(num__gte=5)\n+                ^ Q(num__gte=7)\n+                ^ Q(num__gte=9),\n+            ),\n+            self.numbers[1:3] + self.numbers[5:7] + self.numbers[9:],\n+        )\n         self.assertCountEqual(\n             Number.objects.filter(Q(num__lte=7) ^ ~Q(num__lt=3)),\n             self.numbers[:3] + self.numbers[8:],\n@@ -64,4 +88,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..f0c6522 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -24,6 +24,11 @@ SOME_INSTALLED_APPS = [\n     \"django.contrib.staticfiles\",\n ]\n \n+from django.apps import apps\n+from django.test import SimpleTestCase, override_settings\n+import os\n+from functools import lru_cache\n+\n SOME_INSTALLED_APPS_NAMES = [\n     \"django.contrib.admin\",\n     \"django.contrib.auth\",\n@@ -139,6 +144,23 @@ class AppsTests(SimpleTestCase):\n         self.assertIsInstance(config, TwoConfig)\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache_with_swappable(self):\n+        \"\"\"\n+        Test clear_cache with get_swappable_settings_name caching.\n+        \"\"\"\n+        # Set cache for get_swappable_settings_name.\n+        swappable_before = apps.get_swappable_settings_name(\"auth.User\")\n+        # Verify it's cached (i.e., currsize > 0).\n+        self.assertGreater(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        \n+        apps.clear_cache()\n+        \n+        # Verify that the cache is cleared (i.e., currsize == 0).\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        \n+        # Ensure functionality remains after clearing cache.\n+        swappable_after = apps.get_swappable_settings_name(\"auth.User\")\n+        self.assertEqual(swappable_before, swappable_after)\n     def test_get_app_configs(self):\n         \"\"\"\n         Tests apps.get_app_configs().\n@@ -149,6 +171,23 @@ class AppsTests(SimpleTestCase):\n         )\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache_with_swappable(self):\n+        \"\"\"\n+        Test clear_cache with get_swappable_settings_name caching.\n+        \"\"\"\n+        # Set cache for get_swappable_settings_name.\n+        swappable_before = apps.get_swappable_settings_name(\"auth.User\")\n+        # Verify it's cached (i.e., currsize > 0).\n+        self.assertGreater(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        \n+        apps.clear_cache()\n+        \n+        # Verify that the cache is cleared (i.e., currsize == 0).\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        \n+        # Ensure functionality remains after clearing cache.\n+        swappable_after = apps.get_swappable_settings_name(\"auth.User\")\n+        self.assertEqual(swappable_before, swappable_after)\n     def test_get_app_config(self):\n         \"\"\"\n         Tests apps.get_app_config().\n@@ -167,6 +206,23 @@ class AppsTests(SimpleTestCase):\n             apps.get_app_config(\"django.contrib.auth\")\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache_with_swappable(self):\n+        \"\"\"\n+        Test clear_cache with get_swappable_settings_name caching.\n+        \"\"\"\n+        # Set cache for get_swappable_settings_name.\n+        swappable_before = apps.get_swappable_settings_name(\"auth.User\")\n+        # Verify it's cached (i.e., currsize > 0).\n+        self.assertGreater(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        \n+        apps.clear_cache()\n+        \n+        # Verify that the cache is cleared (i.e., currsize == 0).\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        \n+        # Ensure functionality remains after clearing cache.\n+        swappable_after = apps.get_swappable_settings_name(\"auth.User\")\n+        self.assertEqual(swappable_before, swappable_after)\n     def test_is_installed(self):\n         \"\"\"\n         Tests apps.is_installed().\n@@ -177,6 +233,23 @@ class AppsTests(SimpleTestCase):\n         self.assertIs(apps.is_installed(\"django.contrib.admindocs\"), False)\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache_with_swappable(self):\n+        \"\"\"\n+        Test clear_cache with get_swappable_settings_name caching.\n+        \"\"\"\n+        # Set cache for get_swappable_settings_name.\n+        swappable_before = apps.get_swappable_settings_name(\"auth.User\")\n+        # Verify it's cached (i.e., currsize > 0).\n+        self.assertGreater(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        \n+        apps.clear_cache()\n+        \n+        # Verify that the cache is cleared (i.e., currsize == 0).\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        \n+        # Ensure functionality remains after clearing cache.\n+        swappable_after = apps.get_swappable_settings_name(\"auth.User\")\n+        self.assertEqual(swappable_before, swappable_after)\n     def test_get_model(self):\n         \"\"\"\n         Tests apps.get_model().\n",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..abdd980 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,6 +641,21 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n+    def test_makemigrations_calls_allow_migrate_correctly(self):\n+        \"\"\"\n+        Test that makemigrations calls allow_migrate with correct (app_label, model) pairs.\n+        \"\"\"\n+        with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n+            # Mock the allow_migrate method\n+            with mock.patch('migrations.routers.TestRouter.allow_migrate', return_value=True) as allow_migrate:\n+                # Define expected app-model combinations\n+                expected_calls = [\n+                    mock.call('default', 'migrations', model_name='UnicodeModel'),\n+                    mock.call('other', 'migrations', model_name='UnicodeModel')\n+                ]\n+                call_command('makemigrations', 'migrations', verbosity=0)\n+                allow_migrate.assert_has_calls(expected_calls, any_order=True)\n+\n     def test_failing_migration(self):\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..a0bf81d 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -297,6 +297,41 @@ class PaginationTests(SimpleTestCase):\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_empty_paginator(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_full_iteration(self):\n+        paginator = Paginator(range(1, 11), 3)\n+        page_iterator = iter(paginator)\n+        pages = [list(page) for page in page_iterator]\n+        expected_pages = [\n+            [1, 2, 3],\n+            [4, 5, 6],\n+            [7, 8, 9],\n+            [10]\n+        ]\n+        self.assertEqual(pages, expected_pages)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_iteration_multiple_calls(self):\n+        paginator = Paginator(range(1, 7), 2)\n+        page_iterator1 = iter(paginator)\n+        page_iterator2 = iter(paginator)\n+        self.assertEqual(list(next(page_iterator1)), [1, 2])\n+        self.assertEqual(list(next(page_iterator2)), [1, 2])\n+        self.assertEqual(list(next(page_iterator1)), [3, 4])\n+        self.assertEqual(list(next(page_iterator2)), [3, 4])\n \n class ModelPaginationTests(TestCase):\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..7f3d76c 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -930,6 +930,20 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (-3, 5)\n     plt.close()\n \n+    # Test inverting a log-scaled y-axis with set_ylim\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1)\n+    plt.close()\n+\n+    # Test inverting a log-scaled x-axis with set_xlim\n+    fig, ax = plt.subplots()\n+    ax.set_xscale(\"log\")\n+    ax.set_xlim(10, 1)\n+    assert ax.get_xlim() == (10, 1)\n+    plt.close()\n+\n     fig, ax = plt.subplots()\n     ax.invert_yaxis()\n     ax.plot([-5, -3, 2, 4], [1, 2, -3, 5])\n@@ -938,6 +952,20 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+    # Test inverting a log-scaled y-axis with set_ylim\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1)\n+    plt.close()\n+\n+    # Test inverting a log-scaled x-axis with set_xlim\n+    fig, ax = plt.subplots()\n+    ax.set_xscale(\"log\")\n+    ax.set_xlim(10, 1)\n+    assert ax.get_xlim() == (10, 1)\n+    plt.close()\n+\n \n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..5e32f77 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6961,7 +6961,31 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n \n-def test_shared_axes_retick():\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear_behaviour(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure without clearing axes\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure with clearing axes\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+    # Additional assertions to ensure shared axes behavior as expected\n+    for ax in axs_test.flat:\n+        # Check if top and right spines are not visible\n+        assert not ax.spines['top'].get_visible(), \"Top spine should not be visible\"\n+        assert not ax.spines['right'].get_visible(), \"Right spine should not be visible\"\n+        # Check if only appropriate tick labels are visible\n+        xlabels = [label.get_text() for label in ax.get_xticklabels()]\n+        ylabels = [label.get_text() for label in ax.get_yticklabels()]\n+        assert all((not xlabels[0], not xlabels[-1])), \"Certain X tick labels should be hidden\"\n+        assert all((not ylabels[0], not ylabels[-1])), \"Certain Y tick labels should be hidden\"\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..b5aab14 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -929,6 +929,44 @@ def test_negative_boundarynorm():\n     np.testing.assert_allclose(cb.ax.get_ylim(), [clevs[0], clevs[-1]])\n     np.testing.assert_allclose(cb.ax.get_yticks(), clevs)\n \n+\n+@pytest.mark.parametrize(\"extend, expected_segments\", [\n+    ('both', [\n+        np.array([[0., 0.], [0., 1.]]),\n+        np.array([[1., 0.], [1., 1.]]),\n+        np.array([[2., 0.], [2., 1.]]),\n+        np.array([[3., 0.], [3., 1.]])\n+    ]),\n+    ('min', [\n+        np.array([[0., 0.], [0., 1.]]),\n+        np.array([[1., 0.], [1., 1.]]),\n+        np.array([[2., 0.], [2., 1.]])\n+    ]),\n+    ('max', [\n+        np.array([[1., 0.], [1., 1.]]),\n+        np.array([[2., 0.], [2., 1.]]),\n+        np.array([[3., 0.], [3., 1.]])\n+    ]),\n+    ('neither', [\n+        np.array([[1., 0.], [1., 1.]]),\n+        np.array([[2., 0.], [2., 1.]])\n+    ]),\n+])\n+def test_colorbar_extend_drawedges(extend, expected_segments):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(4)  # Adjusted the range to match expected_segments\n+    colors = cmap(np.linspace(100, 255, len(bounds) + 1).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal',\n+                    drawedges=True)\n+\n+    segments = cbar.dividers.get_segments()\n+    for seg, expected in zip(segments, expected_segments):\n+        np.testing.assert_array_almost_equal(seg, expected)\n+\n     clevs = np.arange(85, 94)\n     norm = BoundaryNorm(clevs, cmap.N)\n     cb = fig.colorbar(cm.ScalarMappable(cmap=cmap, norm=norm), cax=ax)\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..a677b1c 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,7 +490,30 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n-def test_keymaps():\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+from matplotlib._pylab_helpers import Gcf\n+\n+def test_no_backend_reset_rccontext():\n+    assert mpl.rcParams['backend'] != 'module://aardvark'\n+    with mpl.rc_context():\n+        mpl.rcParams['backend'] = 'module://aardvark'\n+    assert mpl.rcParams['backend'] == 'module://aardvark'\n+\n+def test_get_backend_does_not_clear_gcf():\n+    # The test case to reproduce the original issue.\n+    # It ensures that calling get_backend() does not clear figures created\n+    # within an rc_context.\n+    fig1 = plt.figure()  # Create a figure outside of rc_context\n+    with rc_context():\n+        fig2 = plt.figure()  # Create a figure within rc_context\n+    before = f'{id(Gcf)} {Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(Gcf)} {Gcf.figs!r}'\n+    assert before == after, f'Figures were cleared from Gcf!\\nBefore: {before}\\nAfter: {after}'\n+    \n+    plt.close(fig1)\n+    plt.close(fig2)\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..b2347b8 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -14,6 +14,7 @@ from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n import numpy as np\n \n \n@@ -28,7 +29,14 @@ def test_aspect_equal_error():\n         ax.set_aspect('equal')\n \n \n-@mpl3d_image_comparison(['bar3d.png'])\n+# Test case to verify set_visible(False) on a 3D projection\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_false_3d(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(False)\n+    ax_ref.scatter(1, 1, 1)\n def test_bar3d():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..f7f43d7 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -148,8 +148,33 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_test.set_angle(angle)\n     assert rect_test.get_angle() == angle\n \n+import matplotlib.pyplot as plt\n+import matplotlib.patches as mpatches\n+import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_offset_dash_linestyle(fig_test, fig_ref):\n+    # Create a subplot in the figure\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n \n-def test_negative_rect():\n+    # Apply offset dash linestyle on Rectangle patches\n+    rect_test1 = mpatches.Rectangle((0.2, 0.2), 0.6, 0.6, linewidth=2, edgecolor='g', linestyle=(0, (5, 5)))\n+    rect_test2 = mpatches.Rectangle((0.5, 0.5), 0.6, 0.6, linewidth=2, edgecolor='orange', linestyle=(10, (5, 5)))\n+    ax_test.add_patch(rect_test1)\n+    ax_test.add_patch(rect_test2)\n+\n+    # Create similar rectangles without dash offset for reference\n+    rect_ref1 = mpatches.Rectangle((0.2, 0.2), 0.6, 0.6, linewidth=2, edgecolor='g', linestyle=(0, (5, 5)))\n+    rect_ref2 = mpatches.Rectangle((0.5, 0.5), 0.6, 0.6, linewidth=2, edgecolor='orange', linestyle=(0, (5, 5)))\n+    ax_ref.add_patch(rect_ref1)\n+    ax_ref.add_patch(rect_ref2)\n+\n+    ax_test.set_xlim(0, 1)\n+    ax_test.set_ylim(0, 1)\n+    ax_ref.set_xlim(0, 1)\n+    ax_ref.set_ylim(0, 1)\n     # These two rectangles have the same vertices, but starting from a\n     # different point.  (We also drop the last vertex, which is a duplicate.)\n     pos_vertices = Rectangle((-3, -2), 3, 2).get_verts()[:-1]\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..6db9bb1 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2859,6 +2859,32 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+\n+def test_stackplot_with_color_aliases():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    from matplotlib.patches import Rectangle\n+\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+\n+    # Before calling stackplot, plot a line and a rectangle with color aliases\n+    line_1, = ax.plot([1, 3], [1, 3], color='C0')\n+    rect = Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1')\n+    ax.add_patch(rect)\n+\n+    # Call stackplot with color aliases\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+\n+    # Axes current cycle colors should remain usable for other plot types after stackplot\n+    line_2, = ax.plot([1, 2], [3, 1], color='C1')\n+    assert line_1.get_color() == 'C0'\n+    assert rect.get_facecolor()[:3] == plt.gcf().get_facecolor()[:3]\n+    assert line_2.get_color() == 'C1'\n+\n+    ax.set_xlim((0, 4))\n+    ax.set_ylim((0, 70))\n+\n     # Reuse testcase from above for a labeled data test\n     data = {\"x\": x, \"y1\": y1, \"y2\": y2, \"y3\": y3}\n     fig, ax = plt.subplots()\n@@ -2867,6 +2893,32 @@ def test_stackplot():\n     ax.set_ylim((0, 70))\n \n \n+def test_stackplot_with_color_aliases():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    from matplotlib.patches import Rectangle\n+\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+\n+    # Before calling stackplot, plot a line and a rectangle with color aliases\n+    line_1, = ax.plot([1, 3], [1, 3], color='C0')\n+    rect = Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1')\n+    ax.add_patch(rect)\n+\n+    # Call stackplot with color aliases\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+\n+    # Axes current cycle colors should remain usable for other plot types after stackplot\n+    line_2, = ax.plot([1, 2], [3, 1], color='C1')\n+    assert line_1.get_color() == 'C0'\n+    assert rect.get_facecolor()[:3] == plt.gcf().get_facecolor()[:3]\n+    assert line_2.get_color() == 'C1'\n+\n+    ax.set_xlim((0, 4))\n+    ax.set_ylim((0, 70))\n+\n+\n @image_comparison(['stackplot_test_baseline'], remove_text=True)\n def test_stackplot_baseline():\n     np.random.seed(0)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..812c6a7 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,25 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib.colors as mcolors\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype(dtype):\n+    # We use subtraction in the indexing, so need to verify that  the dtype works\n+    cm = plt.colormaps[\"viridis\"]\n+    assert_array_equal(cm(dtype(0)), cm(0))\n+\n+def test_numpy_uint8_conversion():\n+    # Check specifically for the uint8 overflow behavior post NumPy 1.24\n+    cm = plt.colormaps[\"viridis\"]\n+    with pytest.warns(None) as record:\n+        cm(np.empty((0, ), dtype=np.uint8))\n+    # assert no deprecation warnings are raised\n+    assert all(item.category != DeprecationWarning for item in record)\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..b337f80 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,30 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..fbc4c0b 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -13,6 +14,7 @@ from matplotlib.dates import rrulewrapper\n from matplotlib.lines import VertexSelector\n import matplotlib.pyplot as plt\n import matplotlib.transforms as mtransforms\n+import pickletools\n import matplotlib.figure as mfigure\n from mpl_toolkits.axes_grid1 import parasite_axes\n \n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..ce53d08 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -43,8 +43,33 @@ def test_simple():\n     ax.set_yscale('log')\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pickle\n+from io import BytesIO\n+\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+    \n+    fig.align_labels()\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle.dumps(fig)\n+        pickle_successful = True\n+    except TypeError:\n+        pickle_successful = False\n \n-def _generate_complete_test_figure(fig_ref):\n+    assert pickle_successful, \"Pickling failed for figure with aligned labels\"\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n \n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..fecc960 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,7 +991,46 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n \n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_with_and_without_C(fig_test, fig_ref):\n+    # Test issue #12926: Ensure that mincnt behaves consistently with and without C\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    # Plot with C parameter\n+    ax_test = fig_test.subplots()\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=np.sum,\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")  # make background green for contrast\n+\n+    # Reference plot without C parameter\n+    ax_ref = fig_ref.subplots()\n+    ax_ref.hexbin(\n+        X, Y,\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_ref.set_facecolor(\"green\")\n+\n+# Existing test follows\n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..7631da8 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -646,6 +646,53 @@ class TestScaling:\n             p.plot()\n \n \n+import seaborn.objects as so\n+import pytest\n+import numpy as np\n+import matplotlib as mpl\n+from seaborn import Plot\n+\n+class TestNominalScale:\n+\n+    def test_nominal_x_axis_tweaks(self):\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_xlim() == (-.5, 2.5)\n+        assert not any(x.get_visible() for x in ax1.xaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(x=lim).plot()._figure.axes[0]\n+        assert ax2.get_xlim() == lim\n+\n+    def test_nominal_y_axis_tweaks(self):\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_ylim() == (2.5, -.5)\n+        assert not any(y.get_visible() for y in ax1.yaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(y=lim).plot()._figure.axes[0]\n+        assert ax2.get_ylim() == lim\n+\n+    # New test for axis inversion logic on y-axis for nominal scale\n+    def test_nominal_y_axis_inversion(self):\n+        p = Plot(x=[1, 2, 3], y=[\"d\", \"e\", \"f\"]).scale(y=so.Nominal())\n+        ax = p.plot()._figure.axes[0]\n+        # Verifying that the y-axis starts from the last nominal entry and goes down to the first\n+        assert ax.get_ylim() == (2.5, -.5)\n+\n+    # New test to check grid visibility toggle based on theme\n+    def test_nominal_grid_toggle(self):\n+        p = Plot(x=[\"w\", \"x\", \"y\", \"z\"], y=[1, 2, 3, 4])\n+\n+        # Assign a seaborn theme where grids are visible\n+        sns.set_theme(style=\"darkgrid\")\n+        ax = p.plot()._figure.axes[0]\n+        \n+        # Even with a grid theme, the gridlines should be invisible for nominal axes as per issue\n+        assert not any(x.get_visible() for x in ax.xaxis.get_gridlines())\n+        assert not any(y.get_visible() for y in ax.yaxis.get_gridlines())\n+\n class TestPlotting:\n \n     def test_matplotlib_object_creation(self):\n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..5ad5ffc 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,8 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+import pytest\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n@@ -251,7 +253,20 @@ def test_templates_list(test_apps):\n     assert templates == [\"admin/index.html\", \"frontend/index.html\"]\n \n \n-def test_dotted_name_not_allowed(app, client):\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+def test_whitespace_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"   \", __name__)\n+\n+def test_valid_name_allowed(app, client):\n+    # This should not raise an error\n+    try:\n+        bp = flask.Blueprint(\"valid_name\", __name__)\n+    except ValueError:\n+        pytest.fail(\"ValueError raised with valid blueprint name\")\n     with pytest.raises(ValueError):\n         flask.Blueprint(\"app.ui\", __name__)\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "diff --git a/requests/api.py b/requests/api.py\nindex 66d7f21..a6a92fd 100644\n--- a/requests/api.py\n+++ b/requests/api.py\n@@ -15,6 +15,9 @@ from . import sessions\n \n \n def request(method, url, **kwargs):\n+    # Ensure the method is always a string (not unicode) in Python 2\n+    if isinstance(method, unicode):\n+        method = str(method)\n     \"\"\"Constructs and sends a :class:`Request <Request>`.\n     Returns :class:`Response <Response>` object.\n \n",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..ce51e0a 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,12 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),  \n+            (InvalidURL, 'http://-example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://example.-com'),\n+            (InvalidURL, 'http://example.com-'),\n+            (InvalidURL, 'http://example.com..'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..f5a9c82 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2069,7 +2069,24 @@ class TestDataset:\n \n             assert data.attrs['Test'] is not copied.attrs['Test']\n \n-    def test_copy_with_data(self):\n+    def test_copy_regression_unicode_to_object(self):\n+        import xarray as xr\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])}\n+        )\n+\n+        # Assert original dataset types\n+        assert ds.x.dtype.kind == 'U'\n+        assert ds.y.dtype.kind == 'U'\n+        assert ds.z.dtype.kind == 'U'\n+\n+        ds_copy = ds.copy(deep=True)\n+\n+        # Validate copy keeps '<U*' for all coordinates and variables\n+        assert ds_copy.x.dtype.kind == 'U'\n+        assert ds_copy.y.dtype.kind == 'U'\n+        assert ds_copy.z.dtype.kind == 'U'\n         orig = create_test_data()\n         new_data = {k: np.random.randn(*v.shape)\n                     for k, v in orig.data_vars.items()}\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..f1f5cb0 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -574,6 +574,53 @@ class TestCombineAuto:\n         def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n+    def test_combine_non_monotonic_identical_coords(self):\n+        # Test with non-monotonic identical coordinate dimension\n+        ycoord = ['z', 'y', 'x']\n+        data1 = np.random.rand(3, 3)\n+        data2 = np.random.rand(4, 3)\n+\n+        ds1 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data1)),\n+            coords=dict(x=[1, 2, 3], y=ycoord)\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data2)),\n+            coords=dict(x=[4, 5, 6, 7], y=ycoord)\n+        )\n+\n+        # Expect combine_by_coords to succeed without error\n+        expected = Dataset(\n+            data_vars=dict(data=(['x', 'y'], np.concatenate([data1, data2], axis=0))),\n+            coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord)\n+        )\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n+    def test_combine_with_partial_overlap(self):\n+        # Define datasets with partial overlap on non-monotonic coordinates\n+        ycoord = ['a', 'c', 'b']\n+        ds1 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], np.random.rand(3, 3))),\n+            coords=dict(x=[1, 2, 3], y=ycoord)\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], np.random.rand(3, 3))),\n+            coords=dict(x=[3, 4, 5], y=ycoord)\n+        )\n+\n+        # Combine and ensure no errors, focusing on axis expansion\n+        expected = Dataset(\n+            data_vars=dict(data=(['x', 'y'], np.vstack([ds1['data'].data, ds2['data'].data]))),\n+            coords=dict(x=[1, 2, 3, 4, 5], y=ycoord)\n+        )\n+\n+        actual = combine_by_coords([ds1, ds2])\n+        assert_identical(expected, actual)\n+\n     def test_infer_order_from_coords(self):\n         data = create_test_data()\n         objs = [data.isel(dim2=slice(4, 9)), data.isel(dim2=slice(4))]\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..4dcb20d 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,8 +2309,28 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n-\n-    def test_reduce_keep_attrs(self):\n+    def test_quantile_keep_attrs(self):\n+        # Create a DataArray with attributes\n+        da = xr.DataArray([0, 0, 1, 1], dims=\"x\", attrs={'units': 'K'})\n+        \n+        # Test quantile with keep_attrs=True\n+        out = da.quantile(0.5, dim='x', keep_attrs=True)\n+        assert out.attrs == da.attrs\n+\n+        # Test quantile with keep_attrs=False (or default which is None)\n+        out = da.quantile(0.5, dim='x', keep_attrs=False)\n+        assert out.attrs == {}\n+\n+        out = da.quantile(0.5, dim='x')\n+        assert out.attrs == {}\n+\n+        # Test quantile over multiple dimensions\n+        da = xr.DataArray([[0, 2], [1, 3]], dims=[\"x\", \"y\"], attrs={'description': 'test'})\n+        out = da.quantile([0.25, 0.75], dim='x', keep_attrs=True)\n+        assert out.attrs == {'description': 'test'}\n+\n+        out = da.quantile([0.25, 0.75], dim='y', keep_attrs=True)\n+        assert out.attrs == {'description': 'test'}\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..2fa042c 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,10 +1,11 @@\n+\n import numpy as np\n import pytest\n \n import xarray as xr\n from xarray.core import dtypes, merge\n \n-from . import raises_regex\n+from xarray.testing import assert_identical\n from .test_dataset import create_test_data\n \n \n@@ -159,7 +160,37 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n-    def test_merge_broadcast_equals(self):\n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+        \n+        # Verify that merging using Dataset.merge works as expected with a DataArray\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n+\n+        # Additional tests for different scenarios:\n+        \n+        # Test with DataArray that has different dimensionality\n+        da_2d = xr.DataArray(data=[[1, 2], [3, 4]], dims=(\"x\", \"y\"), name=\"c\")\n+        ds_with_da_2d = ds.merge(da_2d)\n+        expected_ds_with_da_2d = xr.merge([ds, da_2d])\n+        assert_identical(ds_with_da_2d, expected_ds_with_da_2d)\n+\n+        # Test with DataArray having coordinates\n+        da_with_coords = xr.DataArray(data=[10, 20, 30], dims=\"z\", coords={\"z\": [1, 2, 3]}, name=\"d\")\n+        ds_with_da_coords = ds.merge(da_with_coords)\n+        expected_ds_with_da_coords = xr.merge([ds, da_with_coords])\n+        assert_identical(ds_with_da_coords, expected_ds_with_da_coords)\n+\n+        # Test with an empty DataArray\n+        da_empty = xr.DataArray(data=[], dims=\"e\", name=\"e\")\n+        ds_with_empty = ds.merge(da_empty)\n+        expected_ds_with_empty = xr.merge([ds, da_empty])\n+        assert_identical(ds_with_empty, expected_ds_with_empty)\n+\n+        # Expect a MergeError when there is a conflict in data names\n+        da_conflict = xr.DataArray(data=5, name=\"a\")\n+        with pytest.raises(xr.MergeError):\n+            ds.merge(da_conflict)\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n         actual = ds1.merge(ds2)\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..52d57bc 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,6 +109,16 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        import xarray as xr\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds3.attrs[\"x\"] == 2\n+\n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..7e4659d 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1922,7 +1922,26 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n-@pytest.mark.parametrize(\"use_dask\", [True, False])\n+def test_where_attr_preservation() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 2], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    \n+    # Test with keep_attrs=True\n+    result_with_attrs = xr.where(cond, x, y, keep_attrs=True)\n+    expected_with_attrs = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected_with_attrs, result_with_attrs)\n+\n+    # Test with keep_attrs=False\n+    result_without_attrs = xr.where(cond, x, y, keep_attrs=False)\n+    expected_without_attrs = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected_without_attrs, result_without_attrs)\n+\n+def test_dataarray_dtype_preservation() -> None:\n+    data = xr.DataArray(np.ones([10, 10], dtype=np.int8), attrs={\"attr_1\": \"test1\", \"attr_2\": \"test2\"})\n+    result = xr.where(data == 1, 5, 0)\n+    assert result.dtype == np.int8  # Ensure dtype preservation\n+    assert result.attrs == data.attrs  # Ensure attribute preservation\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n     if use_dask and not has_dask:\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..a7fc7f3 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -9,9 +9,34 @@ from xarray.coding import variables\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n \n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n+import numpy as np\n+import pytest\n \n-with suppress(ImportError):\n-    import dask.array as da\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_unsigned_from_signed(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([np.iinfo(unsigned_dtype).max], dtype=unsigned_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(signed_dtype), attrs={\"_Unsigned\": \"true\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == unsigned_dtype\n+    assert decoded.values == original_values\n+\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_signed_from_unsigned(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([-1], dtype=signed_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == signed_dtype\n+    assert np.array_equal(decoded.values, original_values)\n \n \n def test_CFMaskCoder_decode():\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..0f4f7c4 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1920,6 +1920,31 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n+def test_where_with_scalars_and_keep_attrs() -> None:\n+    \"\"\"Test xr.where with scalar x and y with keep_attrs=True.\"\"\"\n+    cond = xr.DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+    # Test with scalar instead of DataArray\n+    cond_scalar = xr.DataArray(True)\n+    actual_scalar = xr.where(cond_scalar, 1, 0, keep_attrs=True)\n+    expected_scalar = xr.DataArray(1, attrs={})\n+    assert_identical(expected_scalar, actual_scalar)\n+\n+    # Test with attributes on the condition DataArray\n+    cond_with_attrs = xr.DataArray([True, False], dims=\"x\", attrs={\"description\": \"condition\"})\n+    actual_with_attrs = xr.where(cond_with_attrs, 1, 0, keep_attrs=True)\n+    expected_with_attrs = xr.DataArray([1, 0], dims=\"x\", attrs={})\n+    assert_identical(expected_with_attrs, actual_with_attrs)\n+\n+    # Ensure no exceptions with mixed types and keep_attrs=True\n+    actual_mixed = xr.where(cond, 1.5, 0.0, keep_attrs=True)\n+    expected_mixed = xr.DataArray([1.5, 0.0, 1.5], dims=\"x\", attrs={})\n+    assert_identical(expected_mixed, actual_mixed)\n+\n+\n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n     x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n",
  "pydata__xarray-6599": "",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..3c56ff2 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -210,7 +210,14 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n             if isinstance(v, IndexVariable):\n                 self._indexvars.add(k)\n \n-    def get_variables(self):\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # Check if accessing 'chunks' does not trigger unnecessary data loading\n+        ds = xr.open_dataset(\"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\", engine='zarr')\n+        try:\n+            ds.chunks\n+            # If it gets here, no loading was triggered\n+        except Exception as e:\n+            raise AssertionError(\"Data loading was unexpectedly triggered\") from e\n         def lazy_inaccessible(k, v):\n             if k in self._indexvars:\n                 return v\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..4f6624d 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -49,8 +49,26 @@ class TestDataArrayRolling:\n                     expected.values[expected.values.nonzero()],\n                 )\n \n-    @pytest.mark.parametrize(\"da\", (1,), indirect=True)\n-    def test_rolling_repr(self, da) -> None:\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    @pytest.mark.parametrize(\"size\", [1, 2, 3, 7])\n+    def test_rolling_iter_center(self, center: bool, size: int) -> None:\n+        my_data = xr.DataArray(np.arange(1, 10), dims=\"x\")\n+        rolling_obj = my_data.rolling(x=size, center=center)\n+\n+        result1 = rolling_obj.mean().values\n+\n+        result2 = [window.mean().values.item() for label, window in rolling_obj]\n+\n+        if center:\n+            assert len(result1) == len(result2)\n+            for i, val in enumerate(result1):\n+                if np.isnan(val):\n+                    assert np.isnan(result2[i])\n+                else:\n+                    np.testing.assert_allclose(val, result2[i], rtol=1e-5)\n+        else:\n+            assert len(result2) == len(result1[size-1:])\n+            np.testing.assert_allclose(result2, result1[size-1:], rtol=1e-5)\n         rolling_obj = da.rolling(time=7)\n         assert repr(rolling_obj) == \"DataArrayRolling [time->7]\"\n         rolling_obj = da.rolling(time=7, center=True)\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..e61ada6 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,32 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import pytest\n+from pylint.lint import Run\n+from _pytest.capture import CaptureFixture\n+\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_verbose_no_argument_needed(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the -v flag does not require an additional argument.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-v\", \"unexpected_argument\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"error: unrecognized arguments: unexpected_argument\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex d5ccd91..046ebed 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -863,8 +863,43 @@ def test_by_module_statement_value(initialized_linter: PyLinter) -> None:\n         # computed for that module\n         assert module_stats[\"statement\"] == linter2.stats.statement\n \n+import os\n+import pytest\n+from pylint.lint import Run\n+from os.path import join\n+\n+@pytest.mark.parametrize(\n+    \"ignore_parameter,ignore_parameter_value\",\n+    [\n+        (\"--ignore\", \".a\"),\n+        (\"--ignore-patterns\", \"^\\\\.a\"),\n+        (\"--ignore-paths\", \".*/\\\\.a/.*\"),\n+    ],\n+)\n+def test_recursive_ignore_respect(ignore_parameter, ignore_parameter_value) -> None:\n+    \"\"\"Test that Pylint respects ignore options in recursive mode.\"\"\"\n+    run = Run(\n+        [\n+            \"--recursive=y\",\n+            ignore_parameter,\n+            ignore_parameter_value,\n+            os.path.abspath(\"tests/data\"),  # Assume tests/data contains .a/foo.py and bar.py\n+        ],\n+        exit=False,\n+    )\n+\n+    linted_files = run.linter._iterate_file_descrs(\n+        tuple(run.linter._discover_files([os.path.abspath(\"tests/data\")]))\n+    )\n+    linted_file_paths = [file_item.filepath for file_item in linted_files]\n+\n+    # Check that foo.py in .a is ignored\n+    ignored_file = os.path.abspath(\"tests/data/.a/foo.py\")\n+    assert ignored_file not in linted_file_paths\n \n-def test_import_sibling_module_from_namespace(initialized_linter: PyLinter) -> None:\n+    # Check that bar.py is not ignored\n+    non_ignored_file = os.path.abspath(\"tests/data/bar.py\")\n+    assert non_ignored_file in linted_file_paths\n     \"\"\"If the parent directory above `namespace` is on sys.path, ensure that\n     modules under `namespace` can import each other without raising `import-error`.\"\"\"\n     linter = initialized_linter\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..3a9ba7b 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1324,13 +1324,30 @@ class TestRunTC:\n                 if not os.path.basename(path) == \"regrtest_data\"\n             ]\n             with _test_cwd():\n-                os.chdir(join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"))\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n                 self._runtest(\n                     [\".\", \"--recursive=y\"],\n                     code=0,\n                 )\n-\n-    def test_regression_recursive_current_dir(self):\n+    \n+    def test_ignore_path_recursive_with_toml(self):\n+        \"\"\"Test that the --recursive option respects the ignore-paths from pyproject.toml.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \"src/\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^src/gen/.*$\"\n+                    ],\n+                    code=0,\n+                )\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n             # astroid to believe that directory is a package.\n",
  "pylint-dev__pylint-7277": "diff --git a/pylint/__init__.py b/pylint/__init__.py\nindex 79f7224..dcef42a 100644\n--- a/pylint/__init__.py\n+++ b/pylint/__init__.py\n@@ -96,7 +96,8 @@ def modify_sys_path() -> None:\n       if pylint is installed in an editable configuration (as the last item).\n       https://github.com/PyCQA/pylint/issues/4161\n     \"\"\"\n-    sys.path.pop(0)\n+    if sys.path and sys.path[0] in (\"\", \".\", os.getcwd()):\n+        sys.path.pop(0)\n     env_pythonpath = os.environ.get(\"PYTHONPATH\", \"\")\n     cwd = os.getcwd()\n     if env_pythonpath.startswith(\":\") and env_pythonpath not in (f\":{cwd}\", \":.\"):\n@@ -105,4 +106,4 @@ def modify_sys_path() -> None:\n         sys.path.pop(1)\n \n \n-version = __version__\n+version = __version__\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..d208e9e 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,36 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+def test_clear_multiple_times(caplog):\n+    \"\"\"Test caplog.clear() multiple times and ensure it maintains expected behavior.\"\"\"\n+    logger.info(\"first_log\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"first_log\"]\n+\n+    caplog.clear()\n+    assert caplog.get_records(\"call\") == []\n+\n+    logger.info(\"second_log\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"second_log\"]\n+\n+    caplog.clear()\n+    assert caplog.get_records(\"call\") == []\n+\n+    logger.info(\"third_log\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"third_log\"]\n+\n+def test_logging_during_all_stages_without_clear(caplog, logging_during_setup_and_teardown):\n+    \"\"\"Test logging without clearing and ensure caplog.get_records does not lose sync.\"\"\"\n+    logger.info(\"a_call_log_before\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"a_call_log_before\"]\n+\n+    logging.warning(\"a_call_warning\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"a_call_log_before\", \"a_call_warning\"]\n+\n+    logger.info(\"a_call_log_after\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"a_call_log_before\", \"a_call_warning\", \"a_call_log_after\"]\n+\n+import logging\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n@@ -172,6 +202,28 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n \n+def test_caplog_clear_freezes_get_records(caplog):\n+    \"\"\"Test case to reproduce the issue where caplog.get_records is frozen after caplog.clear.\"\"\"\n+    def verify_consistency():\n+        # Verifies if caplog.get_records(\"call\") and caplog.records are in sync\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    # Initial consistency check\n+    verify_consistency()\n+\n+    # Log a warning\n+    logging.warning(\"test\")\n+\n+    # Verify consistency after logging\n+    verify_consistency()\n+\n+    # Clear logs\n+    caplog.clear()\n+\n+    # Check consistency after clearing, should fail according to issue description\n+    # This reproduces the problem described: caplog.get_records is supposed to be cleared\n+    verify_consistency()\n+\n def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n     pytester.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_debugging.py b/testing/test_debugging.py\nindex 912abd7..53becf6 100644\n--- a/testing/test_debugging.py\n+++ b/testing/test_debugging.py\n@@ -191,7 +191,28 @@ class TestPDB:\n         child.expect_exact(\"= 1 skipped in\")\n         child.sendeof()\n         self.flush(child)\n+    def test_pdb_teardown_skipped_for_unittest_skip_class(self, pytester: Pytester) -> None:\n+        p1 = pytester.makepyfile(\n+            \"\"\"\n+            import unittest\n+\n+            @unittest.skip(\"Testing class-level skip with --pdb\")\n+            class MySkippedTestCase(unittest.TestCase):\n+                def setUp(self):\n+                    raise RuntimeError(\"setUp should not run\")\n+\n+                def tearDown(self):\n+                    raise RuntimeError(\"tearDown should not run\")\n \n+                def test_method(self):\n+                    pass\n+            \"\"\"\n+        )\n+        child = pytester.spawn_pytest(f\"--pdb {p1}\")\n+        child.expect(\"Testing class-level skip with --pdb\")\n+        child.expect_exact(\"= 1 skipped in\")\n+        self.flush(child)\n+        \n     def test_pdb_print_captured_stdout_and_stderr(self, pytester: Pytester) -> None:\n         p1 = pytester.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..1b5ba23 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1050,10 +1050,27 @@ class TestFDCapture(object):\n             cap.suspend()\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n-\n-\n-@contextlib.contextmanager\n-def saved_fd(fd):\n+def test_encodedfile_write_mode():\n+    from _pytest.capture import EncodedFile\n+    import io\n+\n+    buffer = io.StringIO()\n+    encoding = \"utf-8\"\n+    ef = EncodedFile(buffer, encoding)\n+    \n+    # The mode should not include 'b'\n+    assert \"b\" not in getattr(buffer, 'mode', \"\")\n+    \n+    # Test writing a string\n+    ef.write(\"test string\\n\")\n+    \n+    # Ensure it is written correctly\n+    assert buffer.getvalue() == \"test string\\n\"\n+    \n+    # Try writing bytes, should raise TypeError\n+    import pytest\n+    with pytest.raises(TypeError, match=r\"write\\(\\) argument must be str, not bytes\"):\n+        ef.write(b\"test bytes\")\n     new_fd = os.dup(fd)\n     try:\n         yield\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/python/integration.py b/testing/python/integration.py\nindex 044a31a..1935e7d 100644\n--- a/testing/python/integration.py\n+++ b/testing/python/integration.py\n@@ -178,6 +178,30 @@ class TestMockDecoration:\n         reprec = testdir.inline_run()\n         reprec.assertoutcome(passed=2)\n \n+    def test_mock_patch_with_numpy_array(self, testdir):\n+        \"\"\"\n+        Test that patching with a numpy array works correctly\n+        and does not raise a ValueError in pytest collection.\n+        \"\"\"\n+        pytest.importorskip(\"numpy\")\n+        import numpy as np\n+        testdir.makepyfile(\n+            \"\"\"\n+            from unittest.mock import patch\n+            import numpy as np\n+            class TestPatchWithNumpyArray:\n+                @patch(\"dummy_module.dummy\", new=np.array([-5.5, 3.0]))\n+                def test_array_patch(self):\n+                    import dummy_module\n+                    # Assert the patched dummy is equal to the desired state\n+                    assert (dummy_module.dummy == np.array([-5.5, 3.0])).all()\n+            \"\"\"\n+        )\n+        # Create a dummy module to patch\n+        testdir.makepyfile(dummy_module=\"dummy = None\")\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=1)\n+\n     def test_mock(self, testdir):\n         pytest.importorskip(\"mock\", \"1.0.1\")\n         testdir.makepyfile(\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..91959dd 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -119,15 +119,39 @@ class TestPaste(object):\n \n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n-\n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n         assert url == \"https://bpaste.net\"\n-        assert \"lexer=%s\" % lexer in data.decode()\n+        assert \"lexer=text\" in data.decode()  # Update assertion to check lexer is \"text\"\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+\n+    def test_create_new_paste_with_large_data(self, pastebin, mocked_urlopen):\n+        large_data = b\"x\" * 1024 * 1024  # 1MB of data\n+        result = pastebin.create_new_paste(large_data)\n+        assert result.startswith(\"https://bpaste.net/show/\")\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()  # Ensure lexer is still \"text\"\n+        assert f\"code={large_data[:50].decode()}...\" in data.decode()  # Truncated check\n+        assert \"expiry=1week\" in data.decode()\n+\n+    def test_create_new_paste_with_special_characters(self, pastebin, mocked_urlopen):\n+        special_chars_data = b\"Line with special characters: <>&@#{}\\nAnother line\"\n+        result = pastebin.create_new_paste(special_chars_data)\n+        assert result.startswith(\"https://bpaste.net/show/\")\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()  # Ensure lexer is still \"text\"\n+        assert \"expiry=1week\" in data.decode()\n+        decoded_data = data.decode()\n+        assert \"Line with special characters: &lt;&gt;&amp;@#{}\" in decoded_data  # Check special characters\n+        assert \"Another line\" in decoded_data\n",
  "pytest-dev__pytest-6202": "",
  "pytest-dev__pytest-7205": "diff --git a/src/_pytest/setuponly.py b/src/_pytest/setuponly.py\nindex 7d5414b..14ced52 100644\n--- a/src/_pytest/setuponly.py\n+++ b/src/_pytest/setuponly.py\n@@ -66,7 +66,8 @@ def _show_fixture_action(fixturedef, msg):\n             tw.write(\" (fixtures used: {})\".format(\", \".join(deps)))\n \n     if hasattr(fixturedef, \"cached_param\"):\n-        tw.write(\"[{}]\".format(fixturedef.cached_param))\n+        from _pytest._io.saferepr import saferepr\n+        tw.write(\"[{}]\".format(saferepr(fixturedef.cached_param)))\n \n     tw.flush()\n \n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..58e59f8 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -595,7 +595,29 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*testing stuff*\", \"*1 skipped*\"])\n \n-    def test_skip_no_reason(self, testdir):\n+    def test_skip_no_reason_location(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\")\n+        result.stdout.fnmatch_lines([\"*test_skip_location*\", \"SKIPPED [1] test_skip_location: 2: unconditional skip\"])\n+    \n+    def test_skip_no_reason_with_runxfail(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"*test_skip_location*\", \"SKIPPED [1] test_skip_location: 2: unconditional skip\"])\n         testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..b84535f 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -155,7 +156,30 @@ class TestEvaluation:\n \n class TestXFail:\n     @pytest.mark.parametrize(\"strict\", [True, False])\n-    def test_xfail_simple(self, testdir, strict):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486: dynamically adding an xfail marker.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Issue #7486: dynamically adding an xfail marker with strict=True.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         item = testdir.getitem(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..14e588a 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,8 +513,11 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n-\n-    def test_capfdbinary(self, testdir):\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n             def test_hello(capfdbinary):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..94e46c1 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -26,8 +27,25 @@ def test_change_level(caplog):\n     assert \"WARNING\" not in caplog.text\n     assert \"CRITICAL\" in caplog.text\n \n+def test_caplog_restores_level(testdir):\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n \n-def test_change_level_undo(testdir):\n+        def test_a(caplog):\n+            # Initial handler level should be DEBUG (default)\n+            assert caplog.handler.level == logging.NOTSET\n+            caplog.set_level(42)\n+            assert caplog.handler.level == 42\n+\n+        def test_b(caplog):\n+            # Handler level should be reset to DEBUG (default) after previous test\n+            assert caplog.handler.level == logging.NOTSET\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n     \"\"\"Ensure that 'set_level' is undone after the end of the test\"\"\"\n     testdir.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..e1032c9 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1177,8 +1178,33 @@ def test_collect_symlink_out_of_tree(testdir):\n     )\n     assert result.ret == 0\n \n-\n-def test_collectignore_via_conftest(testdir):\n+def test_collect_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"Test that a symlinked directory is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_collect_symlink_nested(pytester: Pytester) -> None:\n+    \"\"\"Test that nested symlinked directories are also collected.\"\"\"\n+    base_dir = pytester.mkdir(\"base_dir\")\n+    nested_dir = base_dir.mkdir(\"nested\")\n+    nested_dir.joinpath(\"test_nested.py\").write_text(\"def test_nested(): pass\", \"utf-8\")\n+    \n+    pytester.path.joinpath(\"symlink_base\").symlink_to(base_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+  \n+def test_collect_symlink_external(pytester: Pytester, tmp_path: Path) -> None:\n+    \"\"\"Test that symlink to an external directory is collected.\"\"\"\n+    external_dir = tmp_path / \"external\"\n+    external_dir.mkdir()\n+    external_dir.joinpath(\"test_external.py\").write_text(\"def test_external(): pass\", \"utf-8\")\n+    \n+    pytester.path.joinpath(\"symlink_external\").symlink_to(external_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=1)\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n     tests = testdir.mkpydir(\"tests\")\n     tests.ensure(\"conftest.py\").write(\"collect_ignore = ['ignore_me']\")\n",
  "pytest-dev__pytest-8399": "",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..0f6e022 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -573,8 +573,35 @@ def test_class_weights_cv():\n \n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n+from sklearn.linear_model import RidgeClassifierCV\n+import numpy as np\n+from numpy.testing import assert_equal\n+\n+\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-0.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n \n-def test_ridgecv_store_cv_values():\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # case with single target variable\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, n_targets, n_alphas))\n+\n+    # case with multiple target variables\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, n_targets, n_alphas))\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..0111c3e 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -167,6 +167,9 @@ def test_adjusted_mutual_info_score():\n     assert_almost_equal(ami, 0.37, 2)\n \n \n+from sklearn.metrics.cluster import fowlkes_mallows_score\n+from sklearn.utils._testing import assert_all_finite\n+\n def test_expected_mutual_info_overflow():\n     # Test for regression where contingency cell exceeds 2**16\n     # leading to overflow in np.outer, resulting in EMI > 1\n@@ -184,7 +187,14 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+def test_fowlkes_mallows_score_overflow():\n+    # Create large array sizes to mimic the overflow condition\n+    labels_true = np.array([1] * (52632 + 2529) + [2] * (14660 + 793) + [3] * (3271 + 204) + [4] * (814 + 39) + [5] * (316 + 20))\n+    labels_pred = np.array([0] * 52632 + [1] * 2529 + [0] * 14660 + [1] * 793 + [0] * 3271 + [1] * 204 + [0] * 814 + [1] * 39 + [0] * 316 + [1] * 20)\n+    \n+    # Verify no overflow warning and result is finite\n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert_all_finite(score)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..0fce4f3 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,16 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+def test_countvectorizer_with_vocabulary_get_feature_names():\n+    # Define a custom vocabulary\n+    vocabulary = ['beer', 'burger', 'celeri']\n \n-def test_vectorizer_max_features():\n+    # Initialize CountVectorizer with the custom vocabulary\n+    cv = CountVectorizer(vocabulary=vocabulary)\n+\n+    # Ensure `get_feature_names` does not raise a NotFittedError and returns the vocabulary provided\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(['beer', 'burger', 'celeri'], feature_names)\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..a79254c 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,6 +21,11 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n+from sklearn.metrics import log_loss\n+from sklearn.preprocessing import LabelBinarizer\n+from sklearn.datasets import make_classification\n+from sklearn.utils._testing import assert_array_almost_equal\n+from sklearn.metrics.scorer import get_scorer\n \n from sklearn.exceptions import ConvergenceWarning\n from sklearn.exceptions import ChangedBehaviorWarning\n@@ -491,8 +496,50 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n-\n-def test_multinomial_logistic_regression_string_inputs():\n+@pytest.mark.parametrize('scoring, multiclass_agg_list',\n+                         [('accuracy', ['']),\n+                          ('precision', ['_macro', '_weighted']),\n+                          ('f1', ['_macro', '_weighted']),\n+                          ('neg_log_loss', ['']),\n+                          ('recall', ['_macro', '_weighted'])])\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # test that LogisticRegressionCV uses the right score to compute its\n+    # cross-validation scores when using a multinomial scoring\n+    # see https://github.com/scikit-learn/scikit-learn/issues/8720\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    # we use lbfgs to support multinomial\n+    params = lr.get_params()\n+    # we store the params to set them further in _log_reg_scoring_path\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        assert_array_almost_equal(\n+            _log_reg_scoring_path(X, y, train, test, Cs=[1.],\n+                                  scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test]))\n+\n+def test_logistic_regressioncv_predict_proba_multinomial():\n+    # Test to ensure that LogisticRegressionCV with `multi_class='multinomial'`\n+    # uses the softmax function for `predict_proba` as expected.\n+    X, y = make_classification(n_samples=200, n_classes=3, n_features=10,\n+                               random_state=42)\n+    lr_multinomial = LogisticRegressionCV(multi_class='multinomial', solver='lbfgs')\n+    lr_multinomial.fit(X, y)\n+    \n+    probs_multinomial = lr_multinomial.predict_proba(X)\n+    \n+    # Calculate probabilities directly using the softmax function\n+    decision_function = lr_multinomial.decision_function(X)\n+    lb = LabelBinarizer()\n+    y_bin = lb.fit_transform(y)\n+    probs_direct = utils.extmath.softmax(decision_function)\n+        \n+    assert_array_almost_equal(probs_multinomial, probs_direct)\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..7010472 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -167,6 +167,18 @@ def test_clone_sparse_matrices():\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n \n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    from sklearn.base import BaseEstimator\n+    class MyEstimator(BaseEstimator):\n+        def __init__(self, empty=None):\n+            self.empty = empty\n+\n+    clf = MyEstimator(empty=MyEstimator)\n+    clf_cloned = clone(clf)\n+\n+    assert clf.empty is clf_cloned.empty\n+\n def test_repr():\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..fa55cdd 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -7,6 +7,27 @@ from scipy import linalg\n \n import pytest\n \n+@pytest.mark.parametrize('init_copy_X, fit_copy_X', [(True, None), (False, None), (True, True), (False, False), (True, False), (False, True)])\n+def test_lasso_lars_fit_copyX_interaction(init_copy_X, fit_copy_X):\n+    \"\"\"\n+    Test the interaction between the initialization copy_X and the fit method's copy_X parameter.\n+    Specifically, this checks that if fit's copy_X is None, the initialization copy_X is respected.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=init_copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+\n+    if fit_copy_X is None:\n+        lasso_lars.fit(X, y)\n+        assert init_copy_X == np.array_equal(X, X_copy)\n+    else:\n+        lasso_lars.fit(X, y, copy_X=fit_copy_X)\n+        assert fit_copy_X == np.array_equal(X, X_copy)\n+\n+import pytest\n+\n from sklearn.model_selection import train_test_split\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_array_almost_equal\n@@ -18,7 +39,8 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..40e73b8 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,6 +493,31 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n+def test_stratifiedkfold_shuffling_within_classes():\n+    # Test to ensure StratifiedKFold shuffles samples within each class\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+    skf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\n+    skf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=2)\n+    \n+    # Collect test indices for two different random states\n+    test_indices_1 = [test for _, test in skf1.split(X, y)]\n+    test_indices_2 = [test for _, test in skf2.split(X, y)]\n+    \n+    # Check that the test indices are different across random states due to shuffle\n+    assert any(np.any(test_1 != test_2) for test_1, test_2 in zip(test_indices_1, test_indices_2))\n+\n+    # Ensure stratification is preserved\n+    for test in test_indices_1 + test_indices_2:\n+        class_counts = np.bincount(y[test])\n+        assert np.all(class_counts == 2)  # since 10 samples of each class split into 5 parts\n+\n+    # Check for completeness of the dataset split\n+    all_test_indices_1 = np.concatenate(test_indices_1)\n+    all_test_indices_2 = np.concatenate(test_indices_2)\n+    assert np.array_equal(np.sort(all_test_indices_1), np.arange(20))\n+    assert np.array_equal(np.sort(all_test_indices_2), np.arange(20))\n+\n \n def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n     # The digits samples are dependent: they are apparently grouped by authors\n",
  "scikit-learn__scikit-learn-13135": "",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..e462f15 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,6 +598,16 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    from sklearn.utils._testing import assert_array_equal\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+\n def test_gaussian_mixture_fit():\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..6991e4b 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,10 +8,13 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n+import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n import numpy as np\n \n-from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils.testing import assert_array_equal, assert_equal\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..b8eb20c 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,9 +396,28 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n-\n-def test_plot_tree_entropy(pyplot):\n-    # mostly smoke tests\n+def test_export_text_single_feature():\n+    from sklearn.tree import DecisionTreeClassifier\n+    from sklearn.tree import export_text\n+    from sklearn.datasets import load_iris\n+    \n+    # Load iris dataset and use only one feature\n+    X, y = load_iris(return_X_y=True)\n+    X = X[:, 0].reshape(-1, 1)  # Use only the first feature\n+    \n+    tree = DecisionTreeClassifier()\n+    tree.fit(X, y)\n+    \n+    expected_report = dedent(\"\"\"\n+    |--- sepal_length <= 5.45\n+    |   |--- class: 0\n+    |--- sepal_length >  5.45\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+    \n+    # Test if export_text works without IndexError for single feature\n+    report = export_text(tree, feature_names=['sepal_length'])\n+    assert report.startswith(\"|--- sepal_length\")\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n                                  min_samples_split=2,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..fa95b08 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1531,9 +1531,34 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_train) == gs.predict(X_train)).mean() >= .8\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit(penalty, multi_class):\n+    # Test LogisticRegressionCV does not throw an IndexError when refit is False\n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n-def test_LogisticRegressionCV_no_refit(multi_class):\n+    n_classes = 3\n+    n_features = 20\n+    X, y = make_classification(n_samples=200, n_classes=n_classes,\n+                               n_informative=n_classes, n_features=n_features,\n+                               random_state=0)\n+\n+    Cs = np.logspace(-4, 4, 3)\n+\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver='saga',\n+                                l1_ratios=l1_ratios, random_state=0,\n+                                multi_class=multi_class, refit=False)\n+    lrcv.fit(X, y)\n+    \n+    # Check dimensions of output matrices\n+    if penalty == 'elasticnet':\n+        assert lrcv.l1_ratio_.shape == (n_classes,)\n+    assert lrcv.C_.shape == (n_classes,)\n+    assert lrcv.coef_.shape == (n_classes, n_features)\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n     n_classes = 3\n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..cb0e9c3 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -15,6 +15,9 @@ def test_get_sys_info():\n def test_get_deps_info():\n     deps_info = _get_deps_info()\n \n+    assert 'joblib' in deps_info\n+    deps_info = _get_deps_info()\n+\n     assert 'pip' in deps_info\n     assert 'setuptools' in deps_info\n     assert 'sklearn' in deps_info\n@@ -30,4 +33,4 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..c034fba 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -124,6 +124,22 @@ def test_extract_xi():\n                    xi=0.04).fit(X)\n     assert_array_equal(clust.labels_, expected_labels)\n \n+def test_optics_float_min_samples():\n+    # Test using min_samples as a float\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 5\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * 5, [1] * 5, [2] * 5]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi', xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n \n def test_cluster_hierarchy_():\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..b014579 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,24 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+from scipy import sparse\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for zero division error with empty support vectors in SVR\n+    X_train = sparse.csr_matrix([\n+        [0, 1, 0, 0],\n+        [0, 0, 0, 1],\n+        [0, 0, 1, 0],\n+        [0, 0, 0, 1]\n+    ])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    \n+    model = svm.SVR(C=316.227766017, gamma=1.0, kernel='linear', max_iter=15000, tol=0.001)\n+    model.fit(X_train, y_train)\n+    \n+    assert model.support_.size == 0, \"Expected no support vectors.\"\n+    assert model.dual_coef_.data.size == 0, \"Expected no dual coefficients.\"\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..f5a1e7d 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,36 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+def test_nkfd_form_accent_stripping():\n+    from sklearn.feature_extraction.text import strip_accents_unicode\n \n-def test_to_ascii():\n+    # This string contains LATIN SMALL LETTER N WITH TILDE\n+    s1 = chr(241)\n+    # This string contains LATIN SMALL LETTER N followed by COMBINING TILDE\n+    s2 = chr(110) + chr(771)\n+\n+    # They are visually identical\n+    assert s1 == \"\u00f1\"\n+    assert s2 == \"n\u0303\"\n+\n+    # They should both normalize to \"n\"\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n+\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..20803cb 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1523,9 +1523,60 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     X_imputed = imputer.transform(X)\n     assert_allclose(X_imputed[:, 1], 0)\n \n+from sklearn.impute import IterativeImputer\n+from numpy.testing import assert_array_equal\n+import numpy as np\n+import pytest\n \n-@pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n-def test_knn_imputer_keep_empty_features(keep_empty_features):\n+def test_iterative_imputer_constant_fill_value():\n+    \"\"\"Check that the fill_value parameter is correctly propagated in IterativeImputer.\"\"\"\n+    X = np.array([[-1, 2, 3], [4, -1, 5], [6, 7, -1]])\n+    fill_value = 100\n+\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0\n+    )\n+    Xt = imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, [fill_value, fill_value, fill_value])\n+\n+def test_iterative_imputer_fill_value_default():\n+    \"\"\"Check default behavior if fill_value is not set and initial_strategy is constant.\"\"\"\n+    X = np.array([[-1, 2, 3], [4, -1, 5], [6, 7, -1]])\n+    \n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        max_iter=0\n+    )\n+    Xt = imputer.fit_transform(X)\n+    # Default for fill_value is 0 for numerical data\n+    assert_array_equal(imputer.initial_imputer_.statistics_, [0, 0, 0])\n+\n+def test_iterative_imputer_fill_value_strings():\n+    \"\"\"Test if fill_value works with string data.\"\"\"\n+    X = np.array([[\"?\", \"yes\", \"no\"], [\"maybe\", \"?\", \"yes\"], [\"yes\", \"no\", \"?\"]], dtype=object)\n+    fill_value = \"unknown\"\n+\n+    imputer = IterativeImputer(\n+        missing_values=\"?\",\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0\n+    )\n+    Xt = imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, [fill_value, fill_value, fill_value])\n+\n+def test_iterative_imputer_error_on_fill_value_without_constant():\n+    \"\"\"Ensure that an error is raised if fill_value is provided without 'constant' strategy.\"\"\"\n+    with pytest.raises(ValueError, match=\"fill_value can only be used with initial_strategy='constant'\"):\n+        IterativeImputer(\n+            missing_values=np.nan,\n+            initial_strategy=\"mean\",\n+            fill_value=5\n+        )\n     \"\"\"Check the behaviour of `keep_empty_features` for `KNNImputer`.\"\"\"\n     X = np.array([[1, np.nan, 2], [3, np.nan, np.nan]])\n \n",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..1028690 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -330,7 +330,48 @@ def test_iforest_with_n_jobs_does_not_segfault():\n def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n-    model = IsolationForest()\n+import pytest\n+import warnings\n+import numpy as np\n+import pandas as pd\n+from sklearn.ensemble import IsolationForest\n+\n+def test_iforest_preserve_feature_names():\n+    \"\"\"Check that feature names are preserved when contamination is not \"auto\".\n+    \n+    Feature names are required for consistency checks during scoring.\n+    \n+    Non-regression test for Issue #25844\n+    \"\"\"\n+    rng = np.random.RandomState(0)\n+    X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+    \n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+\n+def test_iforest_auto_contamination_no_warning():\n+    \"\"\"Check that no warnings are raised when contamination is \"auto\".\"\"\"\n+    rng = np.random.RandomState(0)\n+    X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+    model = IsolationForest(random_state=0, contamination=\"auto\")\n+    \n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+\n+def test_iforest_predict_preserve_feature_names():\n+    \"\"\"Ensure feature names don't cause warnings during prediction.\"\"\"\n+    rng = np.random.RandomState(0)\n+    X = pd.DataFrame(data=rng.randn(10, 1), columns=[\"feature_1\"])\n+    model = IsolationForest(random_state=0, contamination=0.2)\n+    model.fit(X)\n+    \n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        predictions = model.predict(X)\n+    assert predictions is not None\n     model.fit(X, y)\n \n     warn_msg = (\n@@ -338,4 +379,4 @@ def test_base_estimator_property_deprecated():\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..01b86c5 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,6 +22,10 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+import pytest\n+import numpy as np\n+import pandas as pd\n+from sklearn.feature_selection import VarianceThreshold\n \n \n class Trans(TransformerMixin, BaseEstimator):\n@@ -2177,11 +2181,49 @@ def test_raise_error_if_index_not_aligned():\n             (\"num2\", reset_index_transformer, [\"b\"]),\n         ],\n     )\n+\n+def test_remainder_with_transformer_get_output():\n+    \"\"\"Check that the remainder transformer correctly outputs with pandas DataFrame\"\"\"\n+    \n+    df = pd.DataFrame({\"bool_col\": [True, False, True], \"int_col\": [1, 2, 3]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)  # The output should match the input DataFrame\n+\n+    ct.set_output(transform=\"default\")\n+    out_default = ct.fit_transform(df)\n+    assert isinstance(out_default, np.ndarray)  # The output should be a numpy array in default mode\n     ct.set_output(transform=\"pandas\")\n     msg = (\n         \"Concatenating DataFrames from the transformer's output lead to\"\n         \" an inconsistent number of samples. The output may have Pandas\"\n         \" Indexes that do not match.\"\n     )\n+\n+def test_remainder_with_transformer_get_output():\n+    \"\"\"Check that the remainder transformer correctly outputs with pandas DataFrame\"\"\"\n+    \n+    df = pd.DataFrame({\"bool_col\": [True, False, True], \"int_col\": [1, 2, 3]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)  # The output should match the input DataFrame\n+\n+    ct.set_output(transform=\"default\")\n+    out_default = ct.fit_transform(df)\n+    assert isinstance(out_default, np.ndarray)  # The output should be a numpy array in default mode\n     with pytest.raises(ValueError, match=msg):\n         ct.fit_transform(X)\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..01407a6 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,6 +945,30 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # Testing for the issue where KMeans results vary with different n_jobs\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n+\n+    # Additional tests for a higher number of jobs\n+    result_3 = KMeans(n_clusters=3, random_state=0, n_jobs=3).fit(X).labels_\n+    result_4 = KMeans(n_clusters=3, random_state=0, n_jobs=4).fit(X).labels_\n+    assert_array_equal(result_1, result_3)\n+    assert_array_equal(result_1, result_4)\n+\n+    # Testing with inertia\n+    inertia_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).inertia_\n+    assert_almost_equal(inertia_1, inertia_2)\n+\n+    inertia_3 = KMeans(n_clusters=3, random_state=0, n_jobs=3).fit(X).inertia_\n+    inertia_4 = KMeans(n_clusters=3, random_state=0, n_jobs=4).fit(X).inertia_\n+    assert_almost_equal(inertia_1, inertia_3)\n+    assert_almost_equal(inertia_1, inertia_4)\n \n def test_minibatch_kmeans_partial_fit_int_data():\n     # Issue GH #14314\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..ce4960c 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,6 +251,26 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_dedent_maintains_prepend(literal_inc_path):\n+    # Test to check if prepend maintains leading whitespace when used with dedent\n+    # dedent: 2\n+    options = {\n+        'lines': '9-14', \n+        'dedent': 2, \n+        'prepend': '  <plugin>', \n+        'language': 'xml'\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\n+        \"  <plugin>\\n\"\n+        \"  <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+        \"  <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+        \"  <version>2.15.0</version>\\n\"\n+        \"  <configuration>\\n\"\n+        \"    <verifyFailOn>strict</verifyFailOn>\\n\"\n+    )\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n",
  "sphinx-doc__sphinx-10449": "",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..05ad5bd 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +10,52 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n+\n+def test_Catalog_handle_duplicate_locations():\n+    catalog = Catalog()\n+    # Adding the same message with the same location multiple times\n+    catalog.add('duplicate', MsgOrigin('/path/to/file', 1))\n+    catalog.add('duplicate', MsgOrigin('/path/to/file', 1))\n+    catalog.add('duplicate', MsgOrigin('/path/to/file', 1))\n+\n+    # Adding the same message with different locations\n+    catalog.add('another', MsgOrigin('/path/to/file', 1))\n+    catalog.add('another', MsgOrigin('/path/to/file', 2))\n+    catalog.add('another', MsgOrigin('/path/elsewhere', 1))\n+    \n+    # Assert that duplicate locations for the same message are handled\n+    assert len(list(catalog)) == 2\n+\n+    # Extract messages from catalog\n+    msg1, msg2 = list(catalog)\n+    \n+    assert msg1.text == 'duplicate'\n+    # 'duplicate' locations should be deduplicated\n+    assert msg1.locations == [('/path/to/file', 1)]\n+\n+    assert msg2.text == 'another'\n+    # 'another' should have multiple locations without duplicates\n+    assert sorted(msg2.locations) == sorted([('/path/to/file', 1), ('/path/to/file', 2), ('/path/elsewhere', 1)])\n+\n+def test_Catalog_preserve_all_unique_locations():\n+    catalog = Catalog()\n+    # Adding unique messages with unique locations\n+    catalog.add('msg1', MsgOrigin('/unique/path/file1', 5))\n+    catalog.add('msg1', MsgOrigin('/unique/path/file1', 10))\n+    catalog.add('msg2', MsgOrigin('/unique/path/file2', 7))\n+\n+    assert len(list(catalog)) == 2\n+\n+    msg1, msg2 = list(catalog)\n+    \n+    assert msg1.text == 'msg1'\n+    # Both locations should appear for 'msg1'\n+    assert msg1.locations == [('/unique/path/file1', 5), ('/unique/path/file1', 10)]\n+\n+    assert msg2.text == 'msg2'\n+    # Single location for 'msg2'\n+    assert msg2.locations == [('/unique/path/file2', 7)]\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..548eb13 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -148,7 +148,30 @@ def test_glossary(app):\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n \n-def test_glossary_warning(app, status, warning):\n+def test_glossary_case_sensitivity(app):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       description for MySQL\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       different description for mysql\\n\")\n+\n+    # Parse the doctree\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\",\n+                                                                     index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\",\n+                                                                     index)],\n+                                                             definition)])],\n+    ))\n+\n+    # Check that both terms are indexed separately\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n     # empty line between terms\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..27f81a1 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -332,6 +332,25 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].default == Parameter.empty\n \n \n+@pytest.mark.skipif(sys.version_info < (3, 8),\n+                    reason='python-3.8 or above is required')\n+def test_signature_from_str_positional_only_with_defaults():\n+    from sphinx.util.inspect import signature_from_str\n+    sig = signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n+    assert list(sig.parameters.keys()) == ['a', 'b']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n+    assert sig.parameters['b'].default == Parameter.empty\n+\n+\n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n def test_signature_from_str_positionaly_only_args():\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..037db2e 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -32,7 +33,21 @@ def test_MockModule():\n     assert repr(mock) == 'mocked_module'\n \n \n+from typing import TypeVar\n+\n def test_MockObject():\n+    T = TypeVar('T')\n+\n+    class ParametrizedSubClass(mock.SomeClass[T]):\n+        \"\"\"docstring of ParametrizedSubClass\"\"\"\n+\n+        def method(self):\n+            return \"string\"\n+\n+    obj = ParametrizedSubClass()\n+    assert ParametrizedSubClass.__doc__ == \"docstring of ParametrizedSubClass\"\n+    assert isinstance(obj, ParametrizedSubClass)\n+    assert obj.method() == \"string\"\n     mock = _MockObject()\n     assert isinstance(mock.some_attr, _MockObject)\n     assert isinstance(mock.some_method, _MockObject)\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..139666e 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -184,6 +185,21 @@ class SkipMemberTest(TestCase):\n         self.assertSkip('exception', '__special_doc__',\n                         SampleError.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n+    \n+    def test_decorated_init_doc(self):\n+        class DecoratedInit:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"This is a decorated __init__ method.\"\"\"\n+                pass\n+\n+        config = Config(napoleon_include_init_with_doc=True)\n+        app = mock.Mock()\n+        app.config = config\n+\n+        # Check if the decorated __init__ is documented\n+        documented = _skip_member(app, 'class', '__init__', DecoratedInit.__init__, False, 'napoleon_include_init_with_doc')\n+        self.assertFalse(documented, \"Decorated __init__ should be documented when napoleon_include_init_with_doc is True.\")\n \n     def test_exception_special_undoc(self):\n         self.assertSkip('exception', '__special_undoc__',\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..3edca06 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -8,6 +8,20 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    print(content)\n+    # Check the result for an invalid local link\n+    assert \"broken local     doesntexist: \" in content\n+    # This assumes that if the local link doesn't exist, it should be flagged as broken.\n+    # We expect this to be in the output if the linkcheck is functioning correctly.\n+    assert len(content.splitlines()) >= 1\n+\n import json\n import re\n from unittest import mock\n",
  "sphinx-doc__sphinx-8035": "",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..f509161 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1281,11 +1281,77 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n+from babel.messages import pofile\n+from sphinx import locale\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_override_translation(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # Clear translators cache\n+        locale.translators.clear()\n+\n+        # Prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locale' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # Construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text(encoding='utf-8')\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+\n+    finally:\n+        locale.translators.clear()\n+\n     assert isinstance(doctree[0][3], nodes.figure)\n     assert_node(doctree[0][3][0], nodes.image, uri='subdir/svgimg.*',\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n+from babel.messages import pofile\n+from sphinx import locale\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_override_translation(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # Clear translators cache\n+        locale.translators.clear()\n+\n+        # Prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locale' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # Construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text(encoding='utf-8')\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+\n+    finally:\n+        locale.translators.clear()\n+\n \n def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..76bdeee 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,25 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import sys\n+from sphinx.testing.util import SphinxTestApp\n+import pytest\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    srcdir='autodoc_typehints_description_and_type_aliases_complex',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_description_and_type_aliases_with_jsonobject(app: SphinxTestApp):\n+    \"\"\"Test autodoc with type hints in description mode using JSONObject alias\"\"\"\n+    (app.srcdir / 'types.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    app.build()\n+    content = (app.outdir / 'types.txt').read_text()\n+    assert 'types.sphinx_doc(data)' in content\n+    assert 'Parameters:' in content\n+    assert '* **data** (*types.JSONObject*) --' in content\n+    assert 'Return type:' in content\n+    assert 'types.JSONObject' in content\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 41632e7..886cbf1 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -381,4 +381,36 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n         \"lineno\": 1,\n         \"uri\": \"https://localhost:7777/\",\n         \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n-    }\n+    }\n+\n+import http.server\n+import pytest\n+import json\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_redirect_loop_on_HEAD(app: SphinxTestApp):\n+    class RedirectLoopHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302)\n+            self.send_header('Location', 'http://localhost:8888/')\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200)\n+            self.end_headers()\n+            self.wfile.write(b'ok\\n')\n+\n+    with http_server(RedirectLoopHandler, port=8888):\n+        app.builder.build_all()\n+\n+    with open(app.outdir / 'output.json') as fp:\n+        content = json.load(fp)\n+    assert content == {\n+        \"code\": 0,\n+        \"status\": \"working\",\n+        \"filename\": \"index.rst\",\n+        \"lineno\": 1,\n+        \"uri\": \"http://localhost:8888/\",\n+        \"info\": \"\",\n+    }\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "",
  "sphinx-doc__sphinx-9320": "",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 6ac780b..7a08cca 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -37,10 +37,13 @@ class Extension:\n         # is ``True``.  Sphinx writes parallelly documents even if\n         # the extension does not tell its status.\n         self.parallel_write_safe = kwargs.pop('parallel_write_safe', True)\n+from packaging import version  # Import for correct version handling\n \n \n def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n     \"\"\"Verify the required Sphinx extensions are loaded.\"\"\"\n+    # utility to parse and compare versions\n+    parse_version = version.parse\n     if config.needs_extensions is None:\n         return\n \n",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..99cf71b 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,44 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy import sqrt\n+from sympy.geometry import Point2D, Point3D, Point\n+\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_2d_distance():\n+    p1 = Point2D(1, 0)\n+    p2 = Point2D(4, 3)\n+    assert p1.distance(p2) == 5\n+\n+def test_3d_distance():\n+    p1 = Point3D(1, 2, 3)\n+    p2 = Point3D(4, 6, 8)\n+    assert p1.distance(p2) == sqrt(50)\n+\n+def test_mixed_dimension_distance():\n+    # Test where a 2D point is compared to a 3D point, as in the issue\n+    p1 = Point(2, 0)\n+    p2 = Point3D(1, 0, 2)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+    # Test where a 3D point is compared to a 2D point\n+    p3 = Point2D(2, 0)\n+    p4 = Point3D(1, 0, 2)\n+    assert p4.distance(p3) == sqrt(5)\n+\n+def test_0d_distance():\n+    # Test distance from a point to itself in 2D\n+    p = Point2D(2, 3)\n+    assert p.distance(p) == 0\n+\n+    # Test distance from a point to itself in 3D\n+    p3 = Point3D(1, 1, 1)\n+    assert p3.distance(p3) == 0\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..479e7e8 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,16 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+from sympy import Float\n+from sympy.utilities.lambdify import implemented_function\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    assert f(2).evalf() == Float(4)\n+    assert g(2).evalf() == Float(4)\n+    assert f(g(2)).evalf() == Float(16)\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..da872b8 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -330,6 +330,21 @@ def test_args():\n     assert p._array_form == [3, 2, 0, 1, 5, 4]\n     p = Permutation((0, 3, 1, 2))\n     assert p._cyclic_form is None\n+\n+    # Test for non-disjoint cycles - identity permutation\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+\n+    # Test for non-disjoint cycles - simple permutation\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])\n+\n+    # Test with overlapping cycles applied in sequence\n+    assert Permutation([[0, 1], [1, 2], [0, 1]]) == Permutation([0, 2, 1])\n+\n+    # Test with more complex overlapping cycles\n+    assert Permutation([[0, 1], [1, 2], [2, 0], [1, 2]]) == Permutation([0, 2, 1])\n+\n+    # Original test patch to confirm it works as expected\n+    assert Permutation([[0, 1], [0, 2]]) == Permutation(0, 1, 2)\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n",
  "sympy__sympy-13031": "",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..6c56227 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -230,8 +230,37 @@ def test_evalf_bugs():\n     #issue 11518\n     assert NS(2*x**2.5, 5) == '2.0000*x**2.5000'\n \n-\n-def test_evalf_integer_parts():\n+from sympy import Mul, Max, NS, symbols\n+\n+x, y = symbols('x y')\n+\n+def test_evalf_issue_13076():\n+    # Original test case provided in the patch\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    \n+    # Additional tests to thoroughly verify the fix\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    # Check different nested expressions\n+    expr1 = Mul(Max(0, y), Max(0, 1), x, evaluate=False)\n+    assert NS(expr1.evalf()) == 'x*Max(0, y)*Max(0, 1)'\n+    expr2 = Mul(Max(0, y), 2, x, evaluate=False)\n+    assert NS(expr2.evalf()) == '2*x*Max(0, y)'\n+    expr3 = Mul(2, Max(0, 1), x, evaluate=False)\n+    assert NS(expr3.evalf()) == '2*x*Max(0, 1)'\n+    \n+    # Check with y = 1, 0 and -1 to ensure different branches in Max\n+    expr4 = Mul(x, Max(0, 1), evaluate=False)\n+    expr5 = Mul(x, Max(0, 0), evaluate=False)\n+    expr6 = Mul(x, Max(0, -1), evaluate=False)\n+    assert NS(expr4.evalf()) == 'x*Max(0, 1)'\n+    assert NS(expr5.evalf()) == 'x*Max(0, 0)'\n+    assert NS(expr6.evalf()) == 'x*Max(0, 0)'\n+    \n+    # Test with substituting numerical values\n+    y_val = 3\n+    assert Mul(Max(0, y), x, evaluate=False).evalf(subs={y: y_val}) == x * Max(0, y_val)\n+    y_val = -3\n+    assert Mul(Max(0, y), x, evaluate=False).evalf(subs={y: y_val}) == x * Max(0, y_val)\n     a = floor(log(8)/log(2) - exp(-1000), evaluate=False)\n     b = floor(log(8)/log(2), evaluate=False)\n     assert a.evalf() == 3\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..77cac3c 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -203,8 +203,25 @@ def test_tanh():\n \n     assert tanh(k*pi*I/2) == tan(k*pi/2)*I\n \n-\n-def test_tanh_series():\n+from sympy import Symbol, coth, log, tan\n+\n+def test_issue_coth_log_tan_subs():\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    \n+    # We will check some of the problematic integer values mentioned in the issue:\n+    # Specifically, test for x = 2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18\n+    assert e.subs(x, 2)  # previously raised NameError, should not raise now\n+    assert e.subs(x, 3)  # test other problematic values\n+    assert e.subs(x, 5)\n+    assert e.subs(x, 6)\n+    assert e.subs(x, 8)\n+    assert e.subs(x, 9)\n+    assert e.subs(x, 11)\n+    assert e.subs(x, 12)\n+    assert e.subs(x, 13)\n+    assert e.subs(x, 15)\n+    assert e.subs(x, 18)\n     x = Symbol('x')\n     assert tanh(x).series(x, 0, 10) == \\\n         x - x**3/3 + 2*x**5/15 - 17*x**7/315 + 62*x**9/2835 + O(x**10)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..eb0b964 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -164,8 +164,20 @@ def test_difference():\n \n     assert -1 in S.Reals - S.Naturals\n \n+from sympy import symbols, FiniteSet, Interval, Complement\n+x, y = symbols('x y')\n \n def test_Complement():\n+    # Adding test cases for the specific issue where a FiniteSet contains both symbols and numbers\n+    # and is complemented against an interval\n+    # 1. Test with symbols and a positive number\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+    # 2. Test with symbols and a negative number not in the interval\n+    assert Complement(FiniteSet(x, y, -20), Interval(-10, 10)) == FiniteSet(x, y, -20)\n+    # 3. Test with symbols and zero\n+    assert Complement(FiniteSet(x, y, 0), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+    # 4. Test with only symbols\n+    assert Complement(FiniteSet(x, y), Interval(-10, 10)) == FiniteSet(x, y)\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n     assert Complement(Union(Interval(0, 2),\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..7823e93 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -200,8 +200,75 @@ def test_col_insert():\n         l = [0, 0, 0]\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n+def test_issue_13643():\n+    from sympy import Matrix, eye, ones\n+\n+    # Create a 6x6 identity matrix\n+    M = eye(6)\n+\n+    # Create a 6x2 matrix with all elements equal to 2\n+    V = 2 * ones(6, 2)\n+\n+    # Insert the V matrix into the M matrix at position 3\n+    result = M.col_insert(3, V)\n+\n+    # Expected result matrix after insertion\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+\n+    assert result == expected\n \n-def test_extract():\n+def test_col_insert_varied():\n+    from sympy import Matrix, eye, ones\n+\n+    # Test inserting at the beginning\n+    M = eye(4)\n+    V = ones(4, 1)\n+    result = M.col_insert(0, V)\n+    expected = Matrix([\n+        [1, 1, 0, 0, 0],\n+        [1, 0, 1, 0, 0],\n+        [1, 0, 0, 1, 0],\n+        [1, 0, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n+    # Test inserting at the end\n+    result = M.col_insert(4, V)\n+    expected = Matrix([\n+        [1, 0, 0, 0, 1],\n+        [0, 1, 0, 0, 1],\n+        [0, 0, 1, 0, 1],\n+        [0, 0, 0, 1, 1]\n+    ])\n+    assert result == expected\n+\n+    # Test inserting in the middle\n+    result = M.col_insert(2, V)\n+    expected = Matrix([\n+        [1, 0, 1, 0, 0],\n+        [0, 1, 1, 0, 0],\n+        [0, 0, 1, 1, 0],\n+        [0, 0, 1, 0, 1]\n+    ])\n+    assert result == expected\n+\n+    # Test inserting a larger set of columns\n+    V = ones(4, 2)\n+    result = M.col_insert(2, V)\n+    expected = Matrix([\n+        [1, 0, 1, 1, 0, 0],\n+        [0, 1, 1, 1, 0, 0],\n+        [0, 0, 1, 1, 1, 0],\n+        [0, 0, 1, 1, 0, 1]\n+    ])\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..f032cf2 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -677,8 +677,33 @@ def test_Poly_mul():\n     assert Poly(x, x) * 2 == Poly(2*x, x)\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n-\n-def test_Poly_sqr():\n+def test_issue_evaluation_of_multiplication_by_Poly():\n+    # Import necessary functions and classes\n+    from sympy import Poly, S, Symbol\n+\n+    x = Symbol('x')\n+\n+    # Test Poly multiplied by a symbol\n+    assert Poly(x) * x == Poly(x**2, x, domain='ZZ')\n+    \n+    # Test symbol multiplied by Poly\n+    assert x * Poly(x) == Poly(x**2, x, domain='ZZ') \n+    \n+    # Test negative integer multiplied by Poly\n+    assert -2 * Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    \n+    # Test negative SymPy number multiplied by Poly\n+    assert S(-2) * Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    \n+    # Test Poly multiplied by negative SymPy number\n+    assert Poly(x) * S(-2) == Poly(-2*x, x, domain='ZZ')\n+\n+    # Additional cases\n+    p = Poly(x + 1)\n+    assert p * x == Poly(x**2 + x, x, domain='ZZ')\n+    assert x * p == Poly(x**2 + x, x, domain='ZZ')\n+    assert 3 * Poly(x + 2, x) == Poly(3*x + 6, x, domain='ZZ')\n+    assert Poly(x + 2, x) * 3 == Poly(3*x + 6, x, domain='ZZ')\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..da8fe3b 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,8 +54,16 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_custom_mul_symbol():\n+    from sympy import symbols, latex\n \n-def test_latex_basic():\n+    x, y = symbols('x y')\n+\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5\\,3^{x}\"\n+    assert latex(1*x*y, mul_symbol='\\\\,') == r\"x\\,y\"\n+    assert latex(x*y**3, mul_symbol='\\\\,') == r\"x\\,y^{3}\"\n+    assert latex(x/2*y, mul_symbol='\\\\,') == r\"\\frac{x}{2}\\,y\"\n     assert latex(1 + x) == \"x + 1\"\n     assert latex(x**2) == \"x^{2}\"\n     assert latex(x**(1 + x)) == \"x^{x + 1}\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..260b651 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -313,8 +313,15 @@ def test_as_mutable():\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n \n+from sympy import Matrix, symbols\n \n def test_determinant():\n+    # issue 13835\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert (\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..6c69843 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -708,9 +708,29 @@ def test_issue_10003():\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n-\n def test_precomputed_cdf():\n     x = symbols(\"x\", real=True, finite=True)\n+    # Test new set of distributions mentioned in the issue for precomputed CDFs.\n+    distribs_examples = {\n+        Arcsin(\"A\", 0, 3): 1,\n+        Dagum(\"D\", S(1)/3, S(1)/5, 2): 3,\n+        Erlang(\"E\", 1, 1): 1,\n+        Frechet(\"F\", S(4)/3, 1, 2): 3,\n+        Gamma(\"G\", 0.1, 2): 3,\n+        GammaInverse(\"GI\", S(5)/7, 2): 3,\n+        Kumaraswamy(\"K\", S(1)/123, 5): S(1)/3,\n+        Laplace(\"LA\", 2, 3): 5,\n+        Logistic(\"L\", 1, 0.1): 2,\n+        Nakagami(\"N\", S(7)/3, 1): 2,\n+        StudentT(\"S\", 10): 2,\n+        UniformSum(\"US\", 5): 2,\n+    }\n+\n+    for dist, test_point in distribs_examples.items():\n+        cdf_expr = cdf(dist)(x)\n+        assert tn(diff(cdf_expr, x), density(dist)(x), x, a=0, b=0, c=1, d=0)\n+        assert cdf(dist)(test_point).is_number  # Check if evaluated to a numeric value.\n+    x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n     n = symbols(\"n\", integer=True, positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..50d7a8a 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -37,6 +37,38 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n+def test_tensor_product_powers():\n+    A, B, C, D = symbols('A B C D', commutative=False)\n+    x = symbols('x')\n+\n+    # Test cases to ensure correction of TensorProduct powers evaluation\n+\n+    # Simplicity test for power expressions\n+    assert tensor_product_simp(TP(A, B)**x) == TP(A**x, B**x)\n+    \n+    # Complex expressions with constants\n+    assert tensor_product_simp(x*TP(A, B)**2) == x*TP(A**2, B**2)\n+    \n+    # Nested tensor product with power\n+    assert tensor_product_simp(x*(TP(A, B)**2)*TP(C, D)) == x*TP(A**2*C, B**2*D)\n+    \n+    # Difference of tensor products with powers\n+    assert tensor_product_simp(TP(A, B) - TP(C, D)**x) == TP(A, B) - TP(C**x, D**x)\n+\n+    # Test expressions where elements are substituted with 1\n+    t1 = TP(1, 1)*TP(1, 1)\n+    assert tensor_product_simp(t1) == TP(1, 1**2)\n+    assert t1.expand(tensorproduct=True) == TP(1, 1**2)\n+\n+    a = Symbol('a', commutative=False)\n+    assert tensor_product_simp(TP(1, 1)*TP(1, a)).subs(a, 1) == TP(1, 1)\n+\n+    t2 = TP(1, Pauli(3))*TP(1, Pauli(3))\n+    assert tensor_product_simp(t2) == TP(1, Pauli(3)**2)\n+    assert t2.expand(tensorproduct=True) == TP(1, Pauli(3)**2)\n+\n+    assert tensor_product_simp(TP(1, Pauli(3))*TP(1, a)).subs(a, Pauli(3)) == TP(1, 1)\n+\n \n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 29c7fd2..908f4ed 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -440,6 +440,13 @@ def test_sqrt():\n     assert str(1/x**(1/2)) == \"x**(-0.5)\"\n \n \n+from sympy import Eq, Limit\n+\n+def test_sympy_integer_setting():\n+    x = Symbol(\"x\")\n+    assert sstr(Eq(x, Rational(1, 2)), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    assert sstr(Limit(x, x, Rational(1, 2)), sympy_integers=True) == \"Limit(x, x, S(1)/2)\"\n+\n def test_Rational():\n     n1 = Rational(1, 4)\n     n2 = Rational(1, 3)\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..b4de5e7 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -3,12 +3,14 @@ from sympy.physics.vector import ReferenceFrame, Vector, dynamicsymbols, dot\n from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n-\n-Vector.simp = True\n+from sympy.physics.vector import ReferenceFrame\n+N = ReferenceFrame('N')\n A = ReferenceFrame('A')\n \n \n-def test_Vector():\n+def test_vector_addition_with_zero():\n+    # Test case for the issue where adding Vector and zero causes TypeError\n+    assert sum([N.x, (0 * N.x)]) == N.x\n     assert A.x != A.y\n     assert A.y != A.z\n     assert A.z != A.x\n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..b86ecc6 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -7,7 +8,7 @@ import mpmath\n from sympy.utilities.pytest import XFAIL, raises\n from sympy import (\n     symbols, lambdify, sqrt, sin, cos, tan, pi, acos, acosh, Rational,\n-    Float, Matrix, Lambda, Piecewise, exp, Integral, oo, I, Abs, Function,\n+    Float, Matrix, Lambda, Piecewise, exp, Integral, oo, I, Abs, Function, Rational, rf,\n     true, false, And, Or, Not, ITE, Min, Max, floor, diff, IndexedBase, Sum,\n     DotProduct, Eq, Dummy, sinc)\n from sympy.printing.lambdarepr import LambdaPrinter\n@@ -126,6 +127,24 @@ def test_sympy_lambda():\n def test_math_lambda():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n+\n+@conserve_mpmath_dps\n+def test_mpmath_rational_handling():\n+    x = symbols('x')\n+    # Define equation\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    # Lambdify with mpmath\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    # Ensure the rational is handled as mpmath\n+    source_code = inspect.getsource(f)\n+    assert 'mpmath.mpf' in source_code\n+    assert 'Rational' not in source_code\n+\n+    # Solve using nsolve\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    val = rf(18, x0).evalf(64)\n+    # Check precision\n+    assert abs(val - (77 + Rational(1, 3)).evalf(64)) < 1e-50\n     f = lambdify(x, sin(x), \"math\")\n     prec = 1e-15\n     assert -prec < f(0.2) - sin02 < prec\n@@ -137,6 +156,24 @@ def test_math_lambda():\n def test_mpmath_lambda():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n+\n+@conserve_mpmath_dps\n+def test_mpmath_rational_handling():\n+    x = symbols('x')\n+    # Define equation\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    # Lambdify with mpmath\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    # Ensure the rational is handled as mpmath\n+    source_code = inspect.getsource(f)\n+    assert 'mpmath.mpf' in source_code\n+    assert 'Rational' not in source_code\n+\n+    # Solve using nsolve\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    val = rf(18, x0).evalf(64)\n+    # Check precision\n+    assert abs(val - (77 + Rational(1, 3)).evalf(64)) < 1e-50\n     f = lambdify(x, sin(x), \"mpmath\")\n     prec = 1e-49  # mpmath precision is around 50 decimal places\n     assert -prec < f(mpmath.mpf(\"0.2\")) - sin02 < prec\n@@ -148,6 +185,24 @@ def test_mpmath_lambda():\n def test_number_precision():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n+\n+@conserve_mpmath_dps\n+def test_mpmath_rational_handling():\n+    x = symbols('x')\n+    # Define equation\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    # Lambdify with mpmath\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    # Ensure the rational is handled as mpmath\n+    source_code = inspect.getsource(f)\n+    assert 'mpmath.mpf' in source_code\n+    assert 'Rational' not in source_code\n+\n+    # Solve using nsolve\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    val = rf(18, x0).evalf(64)\n+    # Check precision\n+    assert abs(val - (77 + Rational(1, 3)).evalf(64)) < 1e-50\n     f = lambdify(x, sin02, \"mpmath\")\n     prec = 1e-49  # mpmath precision is around 50 decimal places\n     assert -prec < f(0) - sin02 < prec\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..be25143 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -71,14 +72,36 @@ def test_ndim_array_initiation():\n     assert vector_with_long_shape.rank() == 1\n     raises(ValueError, lambda: vector_with_long_shape[long(5)])\n \n-    from sympy.abc import x\n+    from sympy.abc import x, y, z\n+    # Test for rank-0 array (scalar)\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    assert len(rank_zero_array) == 1  # Fix: Expect len to be 1, not 0\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n     raises(ValueError, lambda: rank_zero_array[0])\n \n+    # Additional rank-0 array tests\n+    another_rank_zero_array = ImmutableDenseNDimArray(42)\n+    assert len(another_rank_zero_array) == 1\n+    assert another_rank_zero_array.shape == ()\n+    assert another_rank_zero_array.rank() == 0\n+    assert another_rank_zero_array[()] == 42\n+\n+    # Test rank-1 array with one element\n+    one_element_array = ImmutableDenseNDimArray([y])\n+    assert len(one_element_array) == 1\n+    assert one_element_array.shape == (1,)\n+    assert one_element_array.rank() == 1\n+    assert one_element_array[0] == y\n+\n+    # Test rank-2 array with one element\n+    two_d_one_element_array = ImmutableDenseNDimArray([[z]])\n+    assert len(two_d_one_element_array) == 1\n+    assert two_d_one_element_array.shape == (1, 1)\n+    assert two_d_one_element_array.rank() == 2\n+    assert two_d_one_element_array[0, 0] == z\n+\n \n def test_reshape():\n     array = ImmutableDenseNDimArray(range(50), 50)\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..fbbb1c8 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,30 @@\n+\n+def test_Max_Min():\n+    # Original test for Max and Min\n+    assert mcode(Max(x,y,z)*Min(y,z)) == \"Max[x, y, z]*Min[y, z]\"\n+    \n+    # New test cases to check the specific issue\n+    # Single Max function call\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    \n+    # Nested Max function calls\n+    assert mcode(Max(x, Max(2, y))) == \"Max[x, Max[2, y]]\"\n+    assert mcode(Max(Max(x, y), 2)) == \"Max[Max[x, y], 2]\"\n+    \n+    # Edge cases\n+    assert mcode(Max(2, 2)) == \"Max[2, 2]\"\n+    assert mcode(Max(x, x)) == \"Max[x, x]\"\n+    \n+    # Combined with other functions\n+    assert mcode(Max(sin(x), 2)) == \"Max[Sin[x], 2]\"\n+    assert mcode(Max(2, exp(y))) == \"Max[2, Exp[y]]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..d777750 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,28 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(6*i, 2) == 0\n+    assert Mod(9*i, 3) == 0\n+    assert Mod(5*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+    # Symbolic ratio and arithmetic combinations\n+    k, l = symbols('k l', integer=True, positive=True)\n+    assert Mod(3*k + 2*l, 2) == Mod(k + l, 2)\n+    assert Mod(3*k - k, 2) == Mod(2*k, 2)\n+\n+    # Testing behavior with zero and negative coefficients\n+    m = Symbol('m', integer=True)\n+    assert Mod(0*m, 5) == 0\n+    assert Mod(-3*m, 2) == Mod(-m, 2)\n+\n+    # Different coefficients in the test cases\n+    assert Mod(12*i, 6) == 0\n+    assert Mod(15*i, 5) == 0\n+\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..917fff0 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -84,8 +84,11 @@ def test_Min():\n     assert Min(np, np_).func is Min\n     assert Min(p, p_).func is Min\n \n+    # Verify Min() and Max() with no arguments\n+    assert Min() == S.Infinity\n+    assert Max() == S.NegativeInfinity\n+\n     # lists\n-    raises(ValueError, lambda: Min())\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..a69de02 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,6 +1986,11 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n+def test_issue_15873():\n+    from sympy import I, simplify\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None  # Should not be False, but could be None\n+    assert simplify(e).is_zero is True  # Simplified result is indeed zero\n \n def test_issue_14392():\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n@@ -1993,4 +1998,4 @@ def test_issue_14392():\n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..89f9470 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -511,8 +511,39 @@ def test_posify():\n     assert str(Sum(posify(1/x**n)[0], (n,1,3)).expand()) == \\\n         'Sum(_x**(-n), (n, 1, 3))'\n \n-\n-def test_issue_4194():\n+def test_issue_16438_finite_assumption():\n+    # issue 16438\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['infinite'] == False\n+\n+def test_issue_16438_integer_assumption():\n+    k = Symbol('k', integer=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['integer'] == True\n+    assert eq.assumptions0['real'] == True\n+\n+def test_issue_16438_rational_assumption():\n+    k = Symbol('k', rational=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['rational'] == True\n+    assert eq.assumptions0['real'] == True\n+\n+def test_issue_16438_prime_assumption():\n+    k = Symbol('k', prime=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['prime'] == True\n+    assert eq.assumptions0['positive'] == True\n+\n+def test_issue_16438_even_odd_assumptions():\n+    k_even = Symbol('k_even', even=True)\n+    eq_even, rep_even = posify(k_even)\n+    assert eq_even.assumptions0['even'] == True\n+\n+    k_odd = Symbol('k_odd', odd=True)\n+    eq_odd, rep_odd = posify(k_odd)\n+    assert eq_odd.assumptions0['odd'] == True\n     # simplify should call cancel\n     from sympy.abc import x, y\n     f = Function('f')\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..d4e775a 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -35,8 +37,13 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n-\n-def test_MpmathPrinter():\n+def test_indexed_in_python_code_printer():\n+    prntr = PythonCodePrinter()\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    q = IndexedBase(\"q\")\n+    assert prntr.doprint(q[x, y, z]) == 'q[x, y, z]'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n     assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..399d142 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -22,6 +22,28 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n        auxiliary function is used by many tests below.\n \n        The header and the empty lines are not generator to facilitate the\n+\n+def test_autowrap_cython_with_unused_array_argument():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n+\n+def test_autowrap_cython_with_used_array_argument():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = x[0, 0]\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n        testing of the output.\n     \"\"\"\n     output = StringIO()\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..5904134 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -237,8 +237,17 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(3, (8, 3)) == 1\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n+from sympy.crypto.crypto import encode_morse\n \n def test_encode_morse():\n+    # Original test cases\n+    assert encode_morse('12345') == '.----|..---|...--|....-|.....'\n+    assert encode_morse('67890') == '-....|--...|---..|----.|-----'\n+\n+    # Additional detailed test cases\n+    assert encode_morse('1') == '.----'  # Test single character '1'\n+    assert encode_morse('10') == '.----|-----'  # Test combination of characters including '1'\n+    assert encode_morse('01') == '-----|.----'  # Reverse to check '1' placement\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n     assert encode_morse('SMS\\n') == '...|--|...||'\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..4ff9f0c 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n@@ -176,7 +179,21 @@ def test_subsets():\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n \n-def test_issue_5653():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    assert _sqrt_match(4 + I) == []\n+    e1 = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert sqrtdenest(e1) == e1\n+\n+    e2 = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e2) == e2\n+\n+    # Additional test cases to verify more expressions\n+    e3 = sqrtdenest((6 + sqrt(8)*sqrt(2 + 4*I)) / 3)\n+    assert unchanged(sqrtdenest, e3)\n+\n+    e4 = sqrtdenest(sqrt(1 + I) + sqrt(5 + 3*I))\n+    assert unchanged(sqrtdenest, e4)\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..5537ad1 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,12 +1,20 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n+from sympy import sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n+def test_point_issue_multiplication():\n+    p1 = Point(0, 0)\n+    p2 = Point(1, 1)\n+    number = sympify(2.0)\n \n-def test_point():\n+    # First check that both expressions work without exceptions, they should equal Point(2, 2)\n+    assert p1 + p2 * number == Point(2, 2)\n+    assert p1 + number * p2 == Point(2, 2)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..807af11 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,19 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+from sympy.abc import x, y\n+from sympy.solvers.diophantine import diophantine\n+\n+def test_issue_18186():\n+    # Verify the fix for issue 18186\n+    # Test both symbol orderings and check for identical complete sets with permute=True\n+    expected_solution = set([\n+        (-3, -2), (-3, 2), (-2, -3), (-2, 3),\n+        (2, -3), (2, 3), (3, -2), (3, 2)\n+    ])\n+    expr1 = y**4 + x**4 - 2**4 - 3**4\n+    assert diophantine(expr1, syms=(x, y), permute=True) == expected_solution\n+    assert diophantine(expr1, syms=(y, x), permute=True) == expected_solution\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..3ae9881 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -676,6 +676,12 @@ def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n+from sympy import Subs, latex\n+from sympy.abc import x, y\n+\n+def test_latex_subs_with_parentheses():\n+    # Test case for the parenthesizing of Subs\n+    assert latex(3*Subs(-x + y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n \n def test_latex_integrals():\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..3325ac6 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -512,9 +512,46 @@ def test_kernS():\n     assert kernS('(1-2.*(1-y)*x)') == 1 - 2.*x*(1 - y)\n     one = kernS('x - (x - 1)')\n     assert one != 1 and one.expand() == 1\n+from sympy.core.sympify import kernS\n+from sympy import Symbol, Interval, Add, Mul, exp, Rational\n+from sympy.abc import x, y\n+\n+def test_kernS_functionality():\n+    # Test handling of simple arithmetic expressions\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)  # Original issue test\n+\n+    # Test handling of complex expression with nested parentheses\n+    result = kernS(\"-(2*x + (3 - x)) / (7 - x)\")\n+    expected = -(2*x + (3 - x)) / (7 - x)\n+    assert result == expected\n+\n+    # Test handling with negative numbers and complex nested structures\n+    result = kernS(\"-(1+x)/(1-x) + 1/(2*x - 3)\")\n+    expected = -(1 + x)/(1 - x) + 1/(2*x - 3)\n+    assert result == expected\n \n+    # Test handling symbolic expressions with intervals\n+    result = kernS('Interval(0, -1 - 5*(-4))')\n+    expected = Interval(0, Add(-1, Mul(20, 1, evaluate=False), evaluate=False))\n+    assert result == expected\n \n-def test_issue_6540_6552():\n+    # Test special characters and ensure they are treated as symbols\n+    assert kernS('_kernSymbol') == Symbol('_kernSymbol')\n+\n+    # Handle exponentials and ensure simplification remains consistent\n+    assert kernS('E**-(x)') == exp(-x)\n+\n+    # More complex structure with both algebra and trigonometry\n+    assert kernS('-(2*sin(x)**2 + 2*sin(x)*cos(x))*y/2') == \\\n+        -y*(2*sin(x)**2 + 2*sin(x)*cos(x))/2\n+\n+    # Test lists of expressions parsed correctly\n+    e = 2*(x + y)*y\n+    assert kernS(['2*(x + y)*y', ('2*(x + y)*y',)]) == [e, (e,)]\n+\n+    # Test various combinations of constants and variables\n+    one = kernS('x - (x - 1)')\n+    assert one != 1 and one.expand() == 1\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..8a55499 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,5 +1,7 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n+from sympy.physics.quantum.operator import Operator, IdentityOperator\n from sympy.physics.quantum.qexpr import QExpr\n from sympy.physics.quantum.dagger import Dagger\n from sympy.physics.quantum.hilbert import HilbertSpace\n@@ -106,7 +108,14 @@ def test_identity():\n         assert represent(IdentityOperator(n)) == eye(n)\n \n \n-def test_outer_product():\n+def test_dagger_identity_operator():\n+    I = IdentityOperator()\n+    O = Operator('O')\n+    D = Dagger(O)\n+\n+    # The issue was about not simplifying Dagger * Identity\n+    assert D * I == D\n+    assert I * D == D\n     k = Ket('k')\n     b = Bra('b')\n     op = OuterProduct(k, b)\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..a201c19 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -877,7 +877,16 @@ def test_sylow_subgroup():\n     S = P.sylow_subgroup(5)\n     assert S.order() == 25\n \n-    # the length of the lower central series\n+    # Tests for specific cases mentioned in the issue\n+    G = DihedralGroup(18)\n+    S2 = G.sylow_subgroup(2)\n+    assert S2.order() == 4\n+\n+    G = DihedralGroup(2*25)\n+    S2 = G.sylow_subgroup(2)\n+    # Since these are dihedral groups of order 2n, and 2 is a factor,\n+    # the order of the Sylow 2-subgroup should be 2.\n+    assert S2.order() in (2, 4, 8, 16)  # Depend on the internal structure of the group.\n     # of a p-Sylow subgroup of Sym(n) grows with\n     # the highest exponent exp of p such\n     # that n >= p**exp\n",
  "sympy__sympy-20154": "",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..294bb5a 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,14 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # Verifying the issue described\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..ddae345 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,7 +1,8 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n-    Lambda, atan2, cse, cot, tan, S, Tuple, Basic, Dict,\n+    Lambda, atan2, cse, cot, tan, S, Tuple, Basic, Dict, Mod,\n     Piecewise, oo, Mul, factor, nsimplify, zoo, Subs, RootOf,\n     AccumBounds, Matrix, zeros, ZeroMatrix)\n from sympy.core.basic import _aresame\n@@ -19,6 +20,31 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+    # Test for the issue where subs() raises unexpected PolynomialError\n+    from sympy.functions.elementary.hyperbolic import sinh\n+    clear_cache()  # Clear cache to mimic behavior described in the issue\n+    x, y, z = symbols('x y z', real=True)\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    # Ensuring the subs does not raise PolynomialError\n+    assert expr.subs({1: 1.0}) is not None  # should not raise an error\n+    \n+    # Additional tests based on issue description findings\n+    expr_cosh = exp(cosh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr_cosh.subs({1: 1.0}) is not None  # should not raise an error\n+    \n+    expr_tanh = exp(tanh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr_tanh.subs({1: 1.0}) is not None  # should not raise an error\n+    \n+    expr_no_division = sinh(Piecewise((x, y > x), (y, True)))\n+    assert expr_no_division.subs({1: 1.0}) is not None  # should not raise an error\n+    \n+    expr_no_exp = sinh(Piecewise((x, y > x), (y, True)) / z)\n+    assert expr_no_exp.subs({1: 1.0}) is not None  # should not raise an error\n+    \n+    # Verifying with additional functions \n+    expr_log = log(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr_log.subs({1: 1.0}) is not None  # should not raise an error\n+\n \n def test_subs_Matrix():\n     z = zeros(2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..12d15af 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -77,6 +77,18 @@ def test_monomials():\n                             x * j**2, i * j**2, j**2 * i, j*i*j,\n                             x * i * j, x * j * i\n             }\n+    \n+    # New test case for issue with min_degrees and max_degrees argument\n+    x1, x2, x3 = symbols('x1, x2, x3')\n+    states = [x1, x2, x3]\n+    max_degrees, min_degrees = 3, 3\n+    \n+    # Expected monomials of degree exactly 3\n+    expected_monomials = {x1**3, x2**3, x3**3, x1*x2**2, x1*x3**2, x2*x3**2,\n+                          x2**2*x3, x1*x2*x3, x2*x1**2, x3*x1**2, x3*x2**2,\n+                          x1**2*x2, x1**2*x3, x3**2*x2}\n+    \n+    assert set(itermonomials(states, max_degrees, min_degrees=min_degrees)) == expected_monomials\n \n     # degree_list tests\n     assert set(itermonomials([], [])) == {S.One}\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..5a9def5 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..bb67844 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -10,6 +11,17 @@ from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n+from sympy.core.parameters import evaluate\n+\n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        Point2D(1, 2)\n+\n+def test_issue_with_point2d_evaluate_false():\n+    # Ensure that using evaluate(False) in a 'with' context does not cause a ValueError\n+    with evaluate(False):\n+        assert Point2D(Integer(1), Integer(2)) == Point2D(1, 2)\n \n \n def test_point():\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..1f16061 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -56,6 +57,27 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(KroneckerDelta(x,y)) == '(1 if x == y else 0)'\n \n     assert prntr.doprint((2,3)) == \"(2, 3)\"\n+\n+    # Test cases for verifying Min and Max handling in PythonCodePrinter\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+\n+    # Additional test cases to ensure robustness\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+\n+    # Test with symbolic expressions\n+    expr1 = x**2 + y**2\n+    expr2 = x**3 + y**3\n+    assert prntr.doprint(Min(expr1, expr2)) == f\"min({prntr.doprint(expr1)}, {prntr.doprint(expr2)})\"\n+    assert prntr.doprint(Max(expr1, expr2)) == f\"max({prntr.doprint(expr1)}, {prntr.doprint(expr2)})\"\n+\n+    # Test with nested Min/Max\n+    nested_min = Min(Min(x, y), z)\n+    assert prntr.doprint(nested_min) == \"min(min(x, y), z)\"\n+\n+    nested_max = Max(Max(x, y), z)\n+    assert prntr.doprint(nested_max) == \"max(max(x, y), z)\"\n     assert prntr.doprint([2,3]) == \"[2, 3]\"\n \n \n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..1514ff4 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,8 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..5d7c034 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,8 +1,32 @@\n+\n+def test_symbols_with_extra_parentheses():\n+    # This test case is based on the issue where an extra layer of parentheses\n+    # causes symbols to be created as Symbols instead of Functions.\n+    \n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    \n+    # We expect these to be of type UndefinedFunction due to the use of cls=Function\n+    assert type(q[0]) == UndefinedFunction\n+    assert type(q[1]) == UndefinedFunction\n+    assert type(u[0]) == UndefinedFunction\n+    assert type(u[1]) == UndefinedFunction\n+\n+    # Test tuple unpacking\n+    tuples = symbols(('a:3', 'b:3'), cls=Function)\n+    a, b = tuples\n+    assert len(a) == 3\n+    assert len(b) == 3\n+    assert all(isinstance(ai, UndefinedFunction) for ai in a)\n+    assert all(isinstance(bi, UndefinedFunction) for bi in b)\n+\n+    print(\"Test cases for symbols with extra parentheses passed.\")\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n-from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n+from sympy.core.symbol import uniquely_named_symbol, _symbol, Str, symbols\n+from sympy.core.function import Function, UndefinedFunction\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..7e42e5e 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -183,6 +183,10 @@ def execute_gamma_simplify_tests_for_function(tfunc, D):\n     assert _is_tensor_eq(st, t)\n \n \n+import sympy\n+from sympy.physics.hep.gamma_matrices import GammaMatrix as G, kahane_simplify\n+from sympy.tensor.tensor import tensor_indices\n+\n def test_kahane_algorithm():\n     # Wrap this function to convert to and from TIDS:\n \n@@ -253,7 +257,29 @@ def test_kahane_simplify1():\n     r = kahane_simplify(t)\n     assert r.equals((8*D - 12*D**2 + 6*D**3 - D**4)*eye(4))\n \n-    # Expressions with free indices:\n+def test_kahane_leading_order_preservation():\n+    # This test specifically checks the order-preserving behavior of kahane_simplify\n+    # mentioned in the bug description for leading terms of gamma matrices.\n+    \n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    # Test case as described in the issue, where leading gamma matrices should remain in the input order\n+    t1 = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r1 = kahane_simplify(t1)\n+    assert r1.equals(4*G(rho)*G(sigma)), f\"Failed: {r1} != {4*G(rho)*G(sigma)}\"\n+\n+    t2 = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r2 = kahane_simplify(t2)\n+    assert r2.equals(4*G(rho)*G(sigma)), f\"Failed: {r2} != {4*G(rho)*G(sigma)}\"\n+    \n+    # Additional test cases: Testing with combinations of free indices\n+    t3 = G(mu)*G(-mu)*G(sigma)\n+    r3 = kahane_simplify(t3)\n+    assert r3.equals(4*G(sigma)), f\"Failed: {r3} != {4*G(sigma)}\"\n+    \n+    t4 = G(sigma)*G(mu)*G(-mu)\n+    r4 = kahane_simplify(t4)\n+    assert r4.equals(4*G(sigma)), f\"Failed: {r4} != {4*G(sigma)}\"\n     t = (G(mu)*G(nu)*G(rho)*G(sigma)*G(-mu))\n     r = kahane_simplify(t)\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..020fbf6 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -29,8 +29,15 @@ def test_issue_10326():\n     assert Contains(oo, Interval(-oo, oo)) == False\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n+from sympy import Contains, Piecewise, S, Symbol, FiniteSet, Eq, Reals, Integers, raises\n \n-def test_binary_symbols():\n+def test_contains_as_set_not_implemented():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # These tests currently check that NotImplementedError is raised\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n     x = Symbol('x')\n     y = Symbol('y')\n     z = Symbol('z')\n@@ -48,4 +55,4 @@ def test_as_set():\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..16b4914 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,27 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+from sympy.core.numbers import E\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+\n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    \n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..b5166fb 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,67 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import Quantity, velocity, acceleration, time, meter, second\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+\n+def test_collect_factor_and_dimension_equivalence():\n+    # Testing scenario outlined in the specific issue description\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1 * t1 + v1\n+    # The following should not raise a ValueError\n+    factor, dimension = SI._collect_factor_and_dimension(expr1)\n+\n+    # Assert that the dimension is indeed velocity as expected\n+    assert dimension == SI.get_dimension_system().get_dimension(velocity)\n+\n+    # Assert that the factor is correctly calculated as a combination of scaled quantities\n+    assert factor == a1.scale_factor * t1.scale_factor + v1.scale_factor\n+\n+\n+def test_different_dimensional_operations_not_raised():\n+    # Attempting to add non-equivalent dimensions should still raise an error\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, meter / second)\n+\n+    l1 = Quantity('l1')\n+    SI.set_quantity_dimension(l1, units.length)\n+    SI.set_quantity_scale_factor(l1, meter)\n+    \n+    try:\n+        SI._collect_factor_and_dimension(v1 + l1)\n+        assert False, \"A ValueError should have been raised for non-equivalent dimensions in addition\"\n+    except ValueError as e:\n+        assert 'Dimension of' in str(e)\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..15d0a1f 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -57,7 +58,12 @@ def test_homomorphism():\n     assert T.codomain == D\n     assert T(a*b) == p\n \n-def test_isomorphisms():\n+def test_dihedral_group_homomorphism_issue():\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+    assert T.image().is_subgroup(D3)  # Check that the image is a subgroup of D3\n+    assert T.kernel().is_trivial  # Expect the kernel to be trivial for an isomorphism\n \n     F, a, b = free_group(\"a, b\")\n     E, c, d = free_group(\"c, d\")\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..9876793 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -269,6 +269,49 @@ def test_PolyElement_as_expr():\n \n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n+def test_PolyElement_as_expr():\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+\n+    X, Y, Z = R.symbols\n+    g = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n+\n+    assert f != g\n+    assert f.as_expr() == g\n+\n+    X, Y, Z = symbols(\"x,y,z\")\n+    g = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n+\n+    assert f != g\n+    assert f.as_expr(X, Y, Z) == g\n+\n+    raises(ValueError, lambda: f.as_expr(X))\n+\n+    R, = ring(\"\", ZZ)\n+    assert R(3).as_expr() == 3\n+\n+    # Additional test cases\n+    U, V, W = symbols(\"u,v,w\")\n+    expected_expr_with_custom_symbols = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == expected_expr_with_custom_symbols\n+\n+    # Test with fewer symbols than required, should raise ValueError\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test with more symbols than required, should raise ValueError\n+    X1, X2, X3, X4 = symbols(\"x1, x2, x3, x4\")\n+    raises(ValueError, lambda: f.as_expr(X1, X2, X3, X4))\n+\n+    # Test edge case with no symbols argument and a polynomial with no terms\n+    R, x = ring(\"x\", ZZ)\n+    zero_poly = R.zero\n+    assert zero_poly.as_expr() == 0\n+\n+    # Test with different ring and verify it uses the correct symbols\n+    R, a, b = ring(\"a,b\", ZZ)\n+    h = 2*a*b + 5\n+    A, B = symbols(\"A,B\")\n+    assert h.as_expr(A, B) == 2*A*B + 5\n \n def test_PolyElement_from_expr():\n     x, y, z = symbols(\"x,y,z\")\n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..2482533 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -273,6 +273,18 @@ def test_convert_equals_signs():\n     assert parse_expr(\"(2*y = x) = False\",\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n+def test_issue_24288():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False),\n+    }\n+    for text, result in inputs.items():\n+        parsed_result = parse_expr(text, evaluate=False)\n+        assert parsed_result == result, f\"Failed for '{text}': {parsed_result} != {result}\"\n \n def test_parse_function_issue_3539():\n     x = Symbol('x')\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..06cfff9 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -65,6 +65,8 @@ def test_unit_grammar_fail(string):\n         ([\"1.5\u00d710+11m\"], u.Unit(1.5e11 * u.m)),\n         ([\"m2\"], u.m**2),\n         ([\"10+21m\"], u.Unit(u.m * 1e21)),\n+        # Added test for issue with incorrect units read from MRT with ascii.cds format\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.s * u.kpc**2))),\n         ([\"2.54cm\"], u.Unit(u.cm * 2.54)),\n         ([\"20%\"], 0.20 * u.dimensionless_unscaled),\n         ([\"10+9\"], 1.0e9 * u.dimensionless_unscaled),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..8bea617 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -155,7 +155,25 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translate_url('/en/users/', 'nl'), '/nl/gebruikers/')\n             # Namespaced URL\n             self.assertEqual(translate_url('/en/account/register/', 'nl'), '/nl/profiel/registreren/')\n-            # path() URL pattern\n+            # Optional URL segment test cases\n+            # Pattern: r'with-arguments/(?P<argument>[\\w-]+)/(?:(?P<optional>[\\w-]+).html)?$'\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/test-arg/', 'nl'),\n+                '/nl/with-arguments/test-arg/'\n+            )\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/test-arg/optional.html', 'nl'),\n+                '/nl/with-arguments/test-arg/optional.html'\n+            )\n+            # Pattern: r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?'\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/', 'nl'),\n+                '/nl/regex_optional/1/'\n+            )\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/2/', 'nl'),\n+                '/nl/regex_optional/1/2/'\n+            )\n             self.assertEqual(translate_url('/en/account/register-as-path/', 'nl'), '/nl/profiel/registreren-als-pad/')\n             self.assertEqual(translation.get_language(), 'en')\n \n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..6597796 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,4 +1,24 @@\n+\n \"\"\"\n+class ResetPrimaryKeyTest(TestCase):\n+    def setUp(self):\n+        # Create an instance of Derived\n+        self.original_obj = Derived.objects.create(f=True)\n+    \n+    def test_reset_primary_key_of_derived(self):\n+        # Reset the primary key and save to create a new object\n+        obj = Item.objects.get(pk=self.original_obj.pk)\n+        derived_instance = obj.derived\n+        derived_instance.reset()\n+        derived_instance.save()\n+\n+        # The count should be 2 now, as a new instance should be created\n+        self.assertEqual(Derived.objects.count(), 2)\n+        \n+        # Check that the original instance remains intact\n+        original_obj = Derived.objects.get(pk=self.original_obj.pk)\n+        self.assertTrue(original_obj.f)\n+\n Regression tests for Model inheritance behavior.\n \"\"\"\n import datetime\n@@ -15,6 +35,7 @@ from .models import (\n     Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n     SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n )\n+from .models import Item, Derived\n \n \n class ModelInheritanceTest(TestCase):\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..6185877 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -605,6 +605,12 @@ class DeletionTests(TestCase):\n \n \n class FastDeleteTests(TestCase):\n+    def test_fast_delete_all_no_subquery(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Assert that the DELETE statement doesn't include a subquery.\n+        self.assertNotIn('SELECT', sql)\n \n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n@@ -702,4 +708,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..0ec985a 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,11 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_invalid_value_dict(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = \"\u201c%s\u201d value must be a decimal number.\"\n+        with self.assertRaisesMessage(ValidationError, msg % ({})):\n+            field.to_python({})\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..a7674cc 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,6 @@\n+\n+import pickle\n+\n import datetime\n import pickle\n \n@@ -9,6 +12,21 @@ from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n \n \n class PickleabilityTestCase(TestCase):\n+    def test_pickle_values_annotate_query(self):\n+        toys = []\n+        toys.append(Happening.objects.create(name='foo', number1=10))\n+        toys.append(Happening.objects.create(name='bar', number1=20))\n+        toys.append(Happening.objects.create(name='baz', number1=100))\n+        \n+        # Testing values() with annotate()\n+        qs = Happening.objects.values('name').annotate(total_price=models.Sum('number1'))\n+        reloaded_qs = Happening.objects.all()\n+        reloaded_qs.query = pickle.loads(pickle.dumps(qs.query))\n+        \n+        self.assertEqual(\n+            list(reloaded_qs),\n+            list(qs),\n+        )\n     @classmethod\n     def setUpTestData(cls):\n         Happening.objects.create()  # make sure the defaults are working (#20158)\n@@ -111,6 +129,7 @@ class PickleabilityTestCase(TestCase):\n         self.assertIs(reloaded.__class__, dynclass)\n \n     def test_specialized_queryset(self):\n+        self.assert_pickles(Happening.objects.values_list('name', flat=True))\n         self.assert_pickles(Happening.objects.values('name'))\n         self.assert_pickles(Happening.objects.values('name').dates('when', 'year'))\n         # With related field (#14515)\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..169dbe8 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,6 +30,15 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n+    def test_unicode_prepare_value(self):\n+        field = JSONField()\n+        # Test with Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4e2d\u56fd'}), '{\"a\": \"\u4e2d\u56fd\"}')\n+        # Test with emoji characters\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        # Test with a mix of Unicode and ASCII\n+        self.assertEqual(field.prepare_value({'a': 'hello', 'b': '\u4e16\u754c'}), '{\"a\": \"hello\", \"b\": \"\u4e16\u754c\"}')\n+\n     def test_widget(self):\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..681cf6c 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6602,6 +6602,24 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_redirect_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n@@ -6628,8 +6646,42 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertEqual(response.status_code, 404)\n \n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_redirect_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n-    def test_single_model_no_append_slash(self):\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=None)\n+    def test_redirect_without_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         superuser = User.objects.create_user(\n             username='staff',\n             password='secret',\n",
  "django__django-14580": "",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..be1bc72 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1637,9 +1637,21 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(len(qs), 6)\n \n+    def test_aggregation_default_after_annotation(self):\n+        result = Book.objects.annotate(\n+            idx=F('id'),\n+        ).aggregate(value=Sum('id', default=0))\n+        self.assertEqual(result['value'], Book.objects.aggregate(Sum('id'))['id__sum'])\n+\n+    def test_aggregation_default_with_annotation_and_filter(self):\n+        result = Book.objects.annotate(\n+            idx=F('id'),\n+        ).filter(rating__gt=3).aggregate(value=Sum('id', default=0))\n+        self.assertEqual(result['value'], Book.objects.filter(rating__gt=3).aggregate(Sum('id'))['id__sum'])\n+\n     def test_exists_extra_where_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..b901f6c 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2988,6 +2988,18 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        # Re-apply renaming to ensure it's a no-op when old and new names match.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        # Moving index forward and backward.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"old_pony_test_idx\")\n+        # Apply renaming again and check.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         # Deconstruction.\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n@@ -3000,7 +3012,6 @@ class OperationTests(OperationTestBase):\n                 \"old_fields\": (\"weight\", \"pink\"),\n             },\n         )\n-\n     def test_rename_index_unknown_unnamed_index(self):\n         app_label = \"test_rninuui\"\n         project_state = self.set_up_test_model(app_label)\n",
  "django__django-15732": "",
  "django__django-15916": "",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..4de8aed 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -5,7 +5,9 @@ import re\n \n from django.core import serializers\n from django.core.serializers.base import DeserializationError\n-from django.core.serializers.json import DjangoJSONEncoder\n+from django.core import serializers\n+from django.db import models\n+from django.core.exceptions import FieldError\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n@@ -67,7 +69,36 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             if field_name in obj_dict[\"fields\"]\n         ]\n \n-    def test_indentation_whitespace(self):\n+    def test_serialize_m2m_with_custom_manager(self):\n+        \"\"\"\n+        Serialization of m2m relation with custom manager using select_related should not raise FieldError.\n+        \"\"\"\n+        class TestTagManager(models.Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().select_related(\"master\")\n+                \n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+\n+        class TestTag(models.Model):\n+            objects = TestTagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+        \n+        tag_master = TestTagMaster.objects.create(name=\"Master\")\n+        tag = TestTag.objects.create(name=\"Tag\", master=tag_master)\n+        test_instance = Test.objects.create(name=\"Test Instance\")\n+        test_instance.tags.add(tag)\n+\n+        try:\n+            data = serializers.serialize(\"json\", [test_instance])\n+            self.assertTrue(data)  # Ensure data is serialized without exception\n+        except FieldError:\n+            self.fail(\"Serialization raised FieldError unexpectedly!\")\n         s = serializers.json.Serializer()\n         json_data = s.serialize([Score(score=5.0), Score(score=6.0)], indent=2)\n         for line in json_data.splitlines():\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..408359d 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -222,7 +222,19 @@ def test_mpl_toolkits():\n     assert type(pickle.loads(pickle.dumps(ax))) == parasite_axes.HostAxes\n \n \n-def test_standard_norm():\n+def test_dpi_after_unpickle_on_m1_mac():\n+    fig = mfigure.Figure(dpi=200)\n+    original_dpi = fig.dpi\n+\n+    if platform.system() == \"Darwin\" and \"arm\" in platform.platform():\n+        # Simulate the pickling and unpickling process\n+        out = BytesIO()\n+        pickle.dump(fig, out)\n+        out.seek(0)\n+        fig_unpickled = pickle.load(out)\n+\n+        # Assert that the DPI remains the same after unpickling\n+        assert fig_unpickled.dpi == original_dpi, \"DPI should remain unchanged after unpickling on M1 Mac.\"\n     assert type(pickle.loads(pickle.dumps(mpl.colors.LogNorm()))) \\\n         == mpl.colors.LogNorm\n \n",
  "pydata__xarray-3993": "",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..2d4a4fe 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -107,6 +107,33 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import pytest\n+import re\n+from pylint.lint import Run\n+from pylint.testutils.constants import EMPTY_MODULE\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3}), bar\", [\"(foo{1,3})\", \"bar\"]),\n+    (\"foo, (bar{1,3})\", [\"foo\", \"(bar{1,3})\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one or more commas within quantifier expressions.\"\"\"\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..f708007 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.outcomes import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..c6b0092 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -133,7 +133,10 @@ def test_syntax_errors(expr: str, column: int, message: str) -> None:\n         \"if\",\n         \"else\",\n         \"while\",\n-    ),\n+        \"None\",  # Ensure 'None' is handled properly.\n+        \"True\",  # Ensure 'True' is handled properly.\n+        \"False\", # Ensure 'False' is handled properly.\n+    )\n )\n def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..a5ae3d9 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -12,8 +12,31 @@ import pytest\n \n from sphinx import addnodes\n \n+from sphinx.testing.util import assert_node\n+from sphinx import addnodes\n+from sphinx.addnodes import pending_xref, desc_signature, desc_name, desc_returns\n+\n+@pytest.mark.sphinx('dummy', testroot='ext-autodoc_typehints')\n+def test_typehints_none_description(app):\n+    app.config.autodoc_typehints = 'description'\n+    app.builder.build_all()\n \n-@pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n+    content = app.env.get_doctree('index')\n+    # Check for a link to None's documentation when mode is 'description'\n+    assert_node(content[5][-1][1],\n+                [pending_xref, any,\n+                 (\"https://docs.python.org/3/library/constants.html#None\", \"None\")])\n+\n+@pytest.mark.sphinx('dummy', testroot='ext-autodoc_typehints')\n+def test_typehints_none_signature(app):\n+    app.config.autodoc_typehints = 'signature'\n+    app.builder.build_all()\n+\n+    content = app.env.get_doctree('index')\n+    # Ensure there's no link to None's documentation in the function signature\n+    assert_node(content[5][0],\n+                [desc_signature, ([desc_name, \"f1\"],\n+                                  [desc_returns, pending_xref, \"None\"])])\n def test_autodoc(app, status, warning):\n     app.builder.build_all()\n \n@@ -30,4 +53,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..f1a2ebe 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,7 +1317,57 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n-    def test_parameters_with_class_reference(self):\n+    def test_multiple_parameters_single_line(self):\n+        # Test rendering with non-optional parameters\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of x1, x2.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of x1, x2.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of x1, x2.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of x1, x2.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_optional(self):\n+        # Test rendering with optional parameters\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of x1, x2.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of x1, x2.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of x1, x2.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of x1, x2.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..434cea4 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -773,7 +773,62 @@ def test_pydecoratormethod_signature(app):\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n+import pytest\n+from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n+from sphinx.testing import restructuredtext\n+\n+@pytest.mark.sphinx(freshenv=True)\n+def test_class_type_xref(app):\n+    text = (\"\"\"\n+    .. py:class:: mod.A\n+    .. py:class:: mod.submod.A\n+\n+    .. py:function:: f()\n \n+        :param mod.A a:\n+        :param mod.submod.A b:\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod\n+\n+    .. py:function:: f()\n+\n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod.submod\n+\n+    .. py:function:: f()\n+\n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+    \"\"\")\n+    \n+    doctree = restructuredtext.parse(app, text)\n+    \n+    # Check for warnings\n+    assert 'more than one target found for cross-reference' in app._warning.getvalue()\n+    # Check that the references to `A` should resolve to the correct class\n+    param_field_lists = [\n+        doctree[2][1], doctree[4][1], doctree[6][1],\n+        doctree[10][1], doctree[12][1], doctree[14][1]\n+    ]\n+    for field_list in param_field_lists:\n+        fields = field_list.findall(addnodes.desc_parameterlist)\n+        for field in fields:\n+            referenced_class = field[0][2]\n+            assert_node(referenced_class, pending_xref, reftarget='A')\n+    \n @pytest.mark.sphinx(freshenv=True)\n def test_module_index(app):\n     text = (\".. py:module:: docutils\\n\"\n",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..e5c978e 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,11 +1,12 @@\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n-\n+_foo = None  #: :meta public:\n     :meta private:\n     \"\"\"\n-\n+_foo = None  #: :meta public:\n def _public_function(name):\n     \"\"\"public_function is a docstring().\n-\n+_foo = None  #: :meta public:\n     :meta public:\n-    \"\"\"\n+    \"\"\"\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..910ebe4 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -922,22 +922,28 @@ def test_info_field_list(app):\n             \"   :param age: blah blah\\n\"\n             \"   :type age: int\\n\"\n             \"   :param items: blah blah\\n\"\n-            \"   :type items: Tuple[str, ...]\\n\")\n+            \"   :type items: Tuple[str, ...]\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n     doctree = restructuredtext.parse(app, text)\n     print(doctree)\n \n-    assert_node(doctree, (nodes.target,\n-                          addnodes.index,\n-                          addnodes.index,\n-                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n-                                                    [desc_addname, \"example.\"],\n-                                                    [desc_name, \"Class\"])],\n-                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree, \n+                (nodes.target,\n+                 addnodes.index,\n+                 addnodes.index,\n+                 [desc, \n+                 ([desc_signature, \n+                   ([desc_annotation, \"class \"],\n+                    [desc_addname, \"example.\"],\n+                    [desc_name, \"Class\"])],\n+                 [desc_content, nodes.field_list, nodes.field])]))\n     assert_node(doctree[3][1][0][0],\n                 ([nodes.field_name, \"Parameters\"],\n-                 [nodes.field_body, nodes.bullet_list, ([nodes.list_item, nodes.paragraph],\n-                                                        [nodes.list_item, nodes.paragraph],\n-                                                        [nodes.list_item, nodes.paragraph])]))\n+                 [nodes.field_body, nodes.bullet_list, \n+                  ([nodes.list_item, nodes.paragraph],\n+                   [nodes.list_item, nodes.paragraph],\n+                   [nodes.list_item, nodes.paragraph],\n+                   [nodes.list_item, nodes.paragraph])]))\n \n     # :param str name:\n     assert_node(doctree[3][1][0][0][1][0][0][0],\n@@ -983,6 +989,29 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+    # :param dict(str, str) opc_meta: (optional)\n+    assert_node(doctree[3][1][0][0][1][0][3][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][3][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][3][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][3][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n \n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n",
  "sphinx-doc__sphinx-9258": "",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..8447195 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -848,9 +848,38 @@ def test_autodoc_typehints_description_no_undoc(app):\n         '\\n'\n         '   :param x: arg\\n'\n         '   :return: another tuple\\n'\n+        '\\n'\n+        '    Returns:\\n'\n+        '      arithmetical function step\\n'\n+        '\\n'\n+        '   Return type:\\n'\n+        '      int\\n'\n     )\n     app.build()\n     context = (app.outdir / 'index.txt').read_text()\n+    assert ('target.typehints.incr(a, b=1)\\n'\n+            '\\n'\n+            'target.typehints.tuple_args(x)\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      **x** (*Tuple**[**int**, **Union**[**int**, **str**]**]*) -- arg\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      another tuple\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      Tuple[int, Union[int, str]]\\n'\n+            '\\n'\n+            'target.typehints.decr(a, b=1)\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      decremented number\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n'\n+            in context)\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n     assert ('target.typehints.incr(a, b=1)\\n'\n             '\\n'\n             'target.typehints.tuple_args(x)\\n'\n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..c4e29ea 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1068,8 +1068,13 @@ def test_conditionset():\n         ConditionSet(x, Eq(y**x - z, 0), S.Reals)\n \n \n-@XFAIL\n-def test_conditionset_equality():\n+import pytest\n+from sympy import Eq, solveset, cos, sin, ConditionSet, Reals, Symbol\n+\n+def test_issue_18188():\n+    n = Symbol('n', real=True)\n+    result = solveset(Eq(n*cos(n) - 3*sin(n), 0), n, domain=Reals)\n+    assert result == ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), Reals)\n     ''' Checking equality of different representations of ConditionSet'''\n     assert solveset(Eq(tan(x), y), x) == ConditionSet(x, Eq(tan(x), y), S.Complexes)\n \n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..5843246 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3330,6 +3330,27 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n+def test_issue_8695():\n+    x = Symbol('x')\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected_result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == expected_result\n+\n+def test_sqf_list_additional_cases():\n+    x = Symbol('x')\n+    # Test case for verifying the correct factorization of a simple polynomial\n+    assert sqf_list(x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2) == (1, [(x - 2, 1), (x**2 - 1, 2)])\n+\n+    # Additional test case for polynomial with different power and multiplicities\n+    p1 = (x - 2)**4 * (x - 5)**2 * (x + 3)\n+    expected_result_1 = (1, [(x - 2, 4), (x - 5, 2), (x + 3, 1)])\n+    assert sqf_list(p1) == expected_result_1\n+\n+    # Polynomial which has factors with multiplicity of 1\n+    p2 = (x - 1)*(x - 2)*(x - 3)\n+    expected_result_2 = (1, [(x - 1, 1), (x - 2, 1), (x - 3, 1)])\n+    assert sqf_list(p2) == expected_result_2\n+    \n def test_issue_18205():\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..3e82494 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3254,8 +3254,20 @@ def test_issue_5786():\n     assert expand(factor(expand(\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n+def test_issue_factor_with_extension():\n+    # The following test is based on the reported issue that `factor` with extension=True was dropping a factor.\n \n-def test_noncommutative():\n+    # We define the polynomial using expand to avoid simplification issues\n+    z = expand((x-1)*(y-1))\n+\n+    # We expect that factor without extension should factorize correctly\n+    factored_plain = factor(z)\n+    assert factored_plain == (x - 1)*(y - 1), f\"Plain factor returned incorrect result: {factored_plain}\"\n+\n+    # We check the \"incorrect\" behavior as initially mentioned\n+    # But we expect the fix to correct this, let's assert the expected outcome:\n+    factored_with_extension = factor(z, extension=[I])\n+    assert factored_with_extension == (x - 1)*(y - 1), f\"Factor with extension dropped a factor: {factored_with_extension}\"\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..3e6eaab 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -11,7 +12,7 @@ from sympy.core.sympify import SympifyError\n from sympy.core.function import Function, Lambda\n from sympy.core.compatibility import default_sort_key\n \n-from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum\n+from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum, Symbol\n from sympy.functions.elementary.exponential import exp\n from sympy.testing.pytest import raises\n from sympy.core import I, pi\n@@ -33,8 +34,13 @@ def test_structure():\n     assert b21.func(*b21.args) == b21\n     assert bool(b1)\n \n-\n-def test_equality():\n+def test_symbol_no_dict_attribute():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    \n+    # Trying to set an arbitrary attribute should raise an AttributeError\n+    with raises(AttributeError):\n+        s.some_attribute = 1\n     instances = [b1, b2, b3, b21, Basic(b1, b1, b1), Basic]\n     for i, b_i in enumerate(instances):\n         for j, b_j in enumerate(instances):\n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..dffb5fd 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -370,6 +370,8 @@ def test_Rational_new():\n     assert n.p == -2\n \n \n+from sympy import Rational, S\n+\n def test_Number_new():\n     \"\"\"\"\n     Test for Number constructor\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..612ae4a 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,36 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_with_custom_ids(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the custom ID set in the widget's attributes.\n+        \"\"\"\n+        class CustomForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'Choice X'), ('y', 'Choice Y')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_%s'}),\n+            )\n+\n+        form = CustomForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        \n+        # Testing with the provided custom ID format\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_field_1')\n+        \n+        # Testing with another form where widget does not provide a custom ID\n+        class DefaultForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'Choice X'), ('y', 'Choice Y')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+        \n+        form_default = DefaultForm(auto_id='prefix_%s')\n+        subwidgets_default = form_default['field'].subwidgets\n+\n+        # Default IDs should be generated\n+        self.assertEqual(subwidgets_default[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets_default[1].id_for_label, 'prefix_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..edc8d2b 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -50,11 +50,55 @@ def test_dict_learning_shapes():\n     assert_equal(dico.components_.shape, (n_components, n_features))\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n-\n-def test_dict_learning_overcomplete():\n-    n_components = 12\n-    dico = DictionaryLearning(n_components, random_state=0).fit(X)\n-    assert dico.components_.shape == (n_components, n_features)\n+def test_max_iter_convergence_behavior():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                          n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # Check that the underlying model fails to converge with default max_iter\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm)\n+        model.fit_transform(X)\n+\n+    # Check convergence with sufficient max_iter\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm, transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n+    # Explicitly ensure non-convergence when max_iter is too small\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm, transform_max_iter=10)\n+        model.fit_transform(X)\n \n \n def test_dict_learning_lars_positive_parameter():\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..e2855b0 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -150,7 +150,13 @@ def test_multi_target_sample_weights():\n \n # Import the data\n iris = datasets.load_iris()\n-# create a multiple targets by randomized shuffling and concatenating y.\n+import pytest\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.ensemble import RandomForestClassifier\n+from numpy.testing import assert_array_equal\n X = iris.data\n y1 = iris.target\n y2 = shuffle(y1, random_state=1)\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..c320446 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -158,6 +158,30 @@ def test_restify_pep_585():\n                                                    \"[:py:class:`int`, ...]]\")\n \n \n+from sphinx.ext.autodoc import mock\n+\n+def test_restify_inherited_mock_class():\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        class MockModule:\n+            pass\n+\n+        class DeepKernel(MockModule):\n+            pass\n+\n+        assert restify(DeepKernel) == ':py:class:`torch.nn.MockModule`'\n+    \n+def test_stringify_inherited_mock_class():\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        class MockModule:\n+            pass\n+\n+        class DeepKernel(MockModule):\n+            pass\n+\n+        assert stringify(DeepKernel) == 'torch.nn.MockModule'\n+\n @pytest.mark.skipif(sys.version_info < (3, 10), reason='python 3.10+ is required.')\n def test_restify_type_union_operator():\n     assert restify(int | None) == \":py:class:`int` | :py:obj:`None`\"  # type: ignore\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..33bb092 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,8 +347,16 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n-\n-def test_issue_9983():\n+def test_issue_13546():\n+    from sympy import Product, S, Symbol\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    # Testing for n = 3\n+    assert p.subs(n, 3).doit() == S(35)/4\n+    # Testing for n = 4\n+    assert p.subs(n, 4).doit() == S(315)/8\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n     assert p.is_convergent() is S.false\n@@ -357,4 +365,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}