{
  "astropy__astropy-12907": "",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..04b97c9 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,11 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import (\n+    BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu, connect\n+)\n+from astropy.io.registry import identify_format\n+from astropy.table import Table\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..f9b6f91 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,6 +137,41 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        \n+        # Test with a small float value\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with an integer-like float value\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with a negative float value\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Additional tests for larger float values\n+        c = fits.Card(k, 1234567.89, com)\n+        expected_str = f\"{k} = 1.23456789E+06 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Additional tests for precision limits in formatting\n+        c = fits.Card(k, 0.000000123456, com)\n+        expected_str = f\"{k} = 1.23456E-07 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..fb4ca10 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -419,7 +419,16 @@ class TestDiff(FitsTestCase):\n         assert diff.diff_ratio == 0\n         assert diff.diff_total == 0\n \n-    def test_diff_empty_tables(self):\n+    def test_vla_identical_file_diff(self):\n+        \"\"\"Test that FITSDiff does not report differences when comparing a file to itself that uses VLAs.\"\"\"\n+\n+        col = fits.Column(name='VLA_Column', format='PJ()', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        with open(\"vla_identical_test.fits\", \"wb\") as f:\n+            hdu.writeto(f)\n+\n+        diff = fits.FITSDiff('vla_identical_test.fits', 'vla_identical_test.fits')\n+        assert diff.identical, \"FITSDiff reported differences for identical VLA files.\"\n         \"\"\"\n         Regression test for https://aeon.stsci.edu/ssb/trac/pyfits/ticket/178\n \n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..95903df 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -89,7 +89,20 @@ def test_inherit_docstrings():\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n \n-def test_set_locale():\n+def test_property_inherit_docstring():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"\"\"BAR\"\"\"\n+            return 0\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 42\n+\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "",
  "astropy__astropy-7671": "",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..6ec5720 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -92,8 +92,53 @@ class TestHeaderFunctions(FitsTestCase):\n         assert str(c) == _pad(\"ABC     = '<8 ch   '\")\n         c = fits.Card('nullstr', '')\n         assert str(c) == _pad(\"NULLSTR = ''\")\n+    def test_card_from_bytes(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object (assuming latin-1 encoding).\n+        \"\"\"\n+        c = fits.Card.fromstring(b\"ABC     = \\'abc\\'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+        \n+    def test_card_from_bytes_with_latin1(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object with Latin-1 characters.\n+        \"\"\"\n+        c = fits.Card.fromstring(b\"ABC     = '\\xe1\\xe9\\xed'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == '\\xe1\\xe9\\xed'\n+\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string.\n+\n+        See https://github.com/astropy/astropy/issues/8706\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n \n-    def test_boolean_value_card(self):\n+    def test_header_fromstring_bytes_with_separator(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string with a separator.\n+        \"\"\"\n+        header_bytes = b'SIMPLE  =                    T / file conforms to FITS standard\\nEND\\n'\n+        header = fits.Header.fromstring(header_bytes, sep='\\n')\n+        assert header['SIMPLE']\n+        assert header.tostring(sep='\\n').startswith('SIMPLE  =')\n+\n+    def test_header_fromstring_unicode(self):\n+        \"\"\"\n+        Test reading a Header from a unicode string.\n+        \"\"\"\n+        header_unicode = 'SIMPLE  =                    T / file conforms to FITS standard\\nEND\\n'\n+        header = fits.Header.fromstring(header_unicode, sep='\\n')\n+        assert header['SIMPLE']\n+        assert header.tostring(sep='\\n').startswith('SIMPLE  =')\n         \"\"\"Test Card constructor with boolean value\"\"\"\n \n         c = fits.Card(\"abc\", True)\n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..df9a9f2 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -138,7 +138,7 @@ class TestQuantityCreation:\n         assert q2.value == float(q1.value)\n         assert q2.unit == q1.unit\n \n-        # but we should preserve float32\n+        # but we should preserve any float32 or even float16\n         a3 = np.array([1., 2.], dtype=np.float32)\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n@@ -150,6 +150,22 @@ class TestQuantityCreation:\n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n \n+    def test_preserve_float16(self):\n+        \"\"\"Test that float16 is not automatically converted to float64\"\"\"\n+\n+        # Create a Quantity with float16 and check its dtype\n+        a3_16 = np.array([1.0, 2.0], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n+\n+        # Also check that converting to other units keeps the dtype\n+        q3_16_m = q3_16.to(u.m)\n+        assert q3_16_m.dtype == a3_16.dtype\n+\n+        # Summation with float16 should keep dtype as float16\n+        q3_16_sum = q3_16 + q3_16\n+        assert q3_16_sum.dtype == a3_16.dtype\n+\n     def test_copy(self):\n \n         # By default, a new quantity is constructed, but not if copy=False\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..fca4cc9 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -230,6 +230,23 @@ TEST_DATA = [\n \n     (RegexValidator(), '', None),\n     (RegexValidator(), 'x1x2', None),\n+\n+    # Test cases for URLValidator rejecting invalid characters in username and password\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n+    # Additional valid and invalid cases\n+    (URLValidator(), 'http://validuser:validpass@example.com', None),\n+    (URLValidator(), 'http://user%40email.com@example.com', None),\n+    (URLValidator(), 'http://user:pass@valid-domain.com', None),\n+    (URLValidator(), 'http://user:pass@valid-domain.com/path', None),\n+    (URLValidator(), 'http://user:pass@valid-domain.com?query=string', None),\n+    (URLValidator(), 'http://user:%invalid@domain.com', ValidationError),\n+    (URLValidator(), 'ftp://user@invalid_domain', ValidationError),\n     (RegexValidator('[0-9]+'), 'xxxxxx', ValidationError),\n     (RegexValidator('[0-9]+'), '1234', None),\n     (RegexValidator(re.compile('[0-9]+')), '1234', None),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..a4260af 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -12,6 +13,7 @@ from django.test import TestCase\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n+from django.db.models.expressions import Case, When\n from .models import Author, Book, Publisher, Store\n \n \n@@ -395,7 +397,26 @@ class AggregateTestCase(TestCase):\n         sql = ctx.captured_queries[0]['sql']\n         self.assertIn('SELECT COUNT(*) ', sql)\n \n-    def test_non_grouped_annotation_not_in_group_by(self):\n+    def test_count_distinct_expression_with_case(self):\n+        # Test for the original issue regarding COUNT DISTINCT with a Case condition.\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_different_condition(self):\n+        # Test to ensure distinct count works with a different condition.\n+        aggs = Book.objects.aggregate(\n+            distinct_low_pages_ratings=Count(Case(When(pages__lt=200, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_low_pages_ratings'], 2)\n+\n+    def test_count_distinct_expression_no_case(self):\n+        # Test to verify COUNT DISTINCT without Case works as expected.\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count('rating', distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n         excluded from the group by clause.\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..4174d62 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1089,7 +1089,30 @@ class OverrideSettingsTests(SimpleTestCase):\n         Overriding the MEDIA_URL setting should be reflected in the\n         base_url attribute of django.core.files.storage.default_storage.\n         \"\"\"\n-        self.assertEqual(default_storage.base_location, '')\n+import os\n+from django.test import TestCase, override_settings\n+from django.core.files.storage import default_storage\n+\n+class FileUploadPermissionTests(TestCase):\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Test that the default FILE_UPLOAD_PERMISSIONS are 0o644.\n+        \"\"\"\n+        self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n+    @override_settings(FILE_UPLOAD_PERMISSIONS=0o755)\n+    def test_override_file_upload_permissions_to_755(self):\n+        \"\"\"\n+        Verify FILE_UPLOAD_PERMISSIONS can be overridden to 0o755.\n+        \"\"\"\n+        self.assertEqual(default_storage.file_permissions_mode, 0o755)\n+\n+    @override_settings(FILE_UPLOAD_PERMISSIONS=None)\n+    def test_no_file_upload_permissions(self):\n+        \"\"\"\n+        Verify that no file permissions mode is set when FILE_UPLOAD_PERMISSIONS is None.\n+        \"\"\"\n+        self.assertIsNone(default_storage.file_permissions_mode)\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..2385e01 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,3 +1,4 @@\n+\n import os\n import signal\n from unittest import mock\n@@ -29,6 +30,51 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n+    def test_pgpassword_in_env(self):\n+        \"\"\"\n+        Test that PGPASSWORD is set in the environment when a password is provided.\n+        \"\"\"\n+        self.subprocess_args = None\n+        self.pgpassword = None\n+\n+        def _mock_subprocess_run(*args, **kwargs):\n+            env = kwargs.get('env', {})\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': 'somepassword',\n+                'host': 'somehost',\n+                'port': '444',\n+            })\n+\n+        self.assertEqual(self.pgpassword, 'somepassword')\n+\n+    def test_pgpassword_none_when_no_password(self):\n+        \"\"\"\n+        Test that PGPASSWORD is not set in the environment when no password is provided.\n+        \"\"\"\n+        self.subprocess_args = None\n+        self.pgpassword = None\n+\n+        def _mock_subprocess_run(*args, **kwargs):\n+            env = kwargs.get('env', {})\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+            })\n+\n+        self.assertIsNone(self.pgpassword)\n+\n     def test_basic(self):\n         self.assertEqual(\n             self._run_it({\n@@ -113,4 +159,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..bc50e0b 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -2,6 +2,8 @@ from django.apps.registry import apps\n from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n+from django.apps import apps\n+from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n@@ -47,7 +49,29 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_missing_content_type_rename_ignore(self):\n+    class TestRouter:\n+        def db_for_write(self, model, **hints):\n+            # Route all write operations on 'contenttypes' app to the 'other' database\n+            if model._meta.app_label == 'contenttypes':\n+                return 'other'\n+            return 'default'\n+\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        # Create ContentType entry in the 'other' database\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        # Fetch ContentType entries in the 'other' database\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+        # Perform migration on 'other' database\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        # Check if the rename is applied\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+        # Rollback migration in 'other' database\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        # Check if rollback is correct\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n@@ -63,4 +87,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..12f03bd 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -421,6 +421,42 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n             form = MediaForm\n             model = Media\n \n+        def test_get_inlines_various_conditions(self):\n+            # Test with different request attributes and expected inline classes\n+            class MediaInline(GenericTabularInline):\n+                model = Media\n+\n+            class AlternateInline(GenericTabularInline):\n+                model = Media\n+\n+            class EpisodeAdmin(admin.ModelAdmin):\n+                inlines = [AlternateInline, MediaInline]\n+\n+                def get_inlines(self, request, obj=None):\n+                    if hasattr(request, 'name'):\n+                        if request.name == 'alternate':\n+                            return self.inlines[:1]\n+                        elif request.name == 'media':\n+                            return self.inlines[1:2]\n+                    return []\n+\n+            ma = EpisodeAdmin(Episode, self.site)\n+            # Test with no 'name' in request\n+            request = type('Request', (object,), {})()\n+            self.assertEqual(ma.get_inlines(request), [])\n+            \n+            # Test with 'alternate' in the request\n+            request.name = 'alternate'\n+            self.assertEqual(ma.get_inlines(request), [AlternateInline])\n+            \n+            # Test with 'media' in the request\n+            request.name = 'media'\n+            self.assertEqual(ma.get_inlines(request), [MediaInline])\n+\n+            # Test with no matching 'name' in the request\n+            request.name = 'unknown'\n+            self.assertEqual(ma.get_inlines(request), [])\n+\n         class EpisodeAdmin(admin.ModelAdmin):\n             inlines = [\n                 AlternateInline, MediaInline\n@@ -428,4 +464,4 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..9a1fe72 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -248,7 +248,23 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_trailing_newline_unicode(self):\n+        \"\"\"Test that usernames with trailing newlines are invalid for Unicode validator.\"\"\"\n+        invalid_usernames = ['trailingnewline\\n', 'newline\\\\u000A']\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_trailing_newline_ascii(self):\n+        \"\"\"Test that usernames with trailing newlines are invalid for ASCII validator.\"\"\"\n+        invalid_usernames = ['trailingnewline\\n', 'newline\\\\u000A']\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +274,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..fc5d004 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -12,6 +12,27 @@ OTHER_DIR = os.path.join(ROOT, 'other_templates')\n \n class RenderToStringTest(SimpleTestCase):\n \n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+    \n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_autoescape_off_with_multiple_templates(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string(['test_context.html', 'non_existing.html'], {'obj': '<span>'}),\n+            'obj:<span>\\n',\n+        )\n+\n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..110e06e 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,6 +413,10 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_lazy_content(self):\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..92ad0a2 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -509,6 +509,61 @@ class LoaderTests(TestCase):\n         self.assertEqual(migrations, ['0001_initial'])\n \n \n+import os\n+import compileall\n+from django.test import override_settings\n+from django.db.migrations.loader import MigrationLoader\n+from django.db import connections\n+\n+# Assuming 'connection' is defined or an alias for a database connection is set.\n+connection = connections['default']\n+\n+def test_loading_namespace_package(self):\n+    \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+    migration_loader = MigrationLoader(connection)\n+    self.assertEqual(\n+        migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+        [('migrations', '0001_initial')],\n+    )\n+\n+class NamespacePackageMigrationTests(MigrationTestBase):\n+\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_namespace_package_migration_loading(self):\n+        \"\"\"\n+        Test that a migrations folder without an __init__.py (namespace package) is \n+        correctly identified and migrations are loaded as expected.\n+        \"\"\"\n+        loader = MigrationLoader(connection)\n+        # Ensure the test scenario where the '__file__' attribute is not available\n+        loader.load_disk()\n+        migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n+        self.assertEqual(migrations, ['0001_initial'])\n+\n+    def test_nonexistent_package(self):\n+        \"\"\"\n+        Test that attempting to load migrations from a nonexistent package\n+        behaves as expected (should not crash, just no migrations).\n+        \"\"\"\n+        with self.temporary_migration_module(module='nonexistent_package') as migration_dir:\n+            loader = MigrationLoader(connection)\n+            loader.load_disk()\n+            migrations = [name for app, name in loader.disk_migrations if app == 'nonexistent_package']\n+            self.assertEqual(migrations, [])\n+\n+    def test_with_init_py(self):\n+        \"\"\"\n+        Test that a migrations directory with an __init__.py is still correctly\n+        handled.\n+        \"\"\"\n+        with self.temporary_migration_module(module='migrations.test_migrations_with_init') as migration_dir:\n+            loader = MigrationLoader(connection)\n+            loader.load_disk()\n+            migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n+            self.assertEqual(migrations, ['0001_initial'])\n+\n class PycLoaderTests(MigrationTestBase):\n \n     def test_valid(self):\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..14641f2 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -635,8 +635,47 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, '<h2>Inner2s</h2>')\n         self.assertNotContains(response, 'Add another Inner2')\n         self.assertNotContains(response, 'id=\"id_inner2_set-TOTAL_FORMS\"')\n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only permissions for inline\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n \n-    def test_inline_add_m2m_add_perm(self):\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only permissions for inline\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        # The field in the inline is read-only.\n+        self.assertContains(response, '<p>%s</p>' % self.book)\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n         permission = Permission.objects.get(codename='add_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(reverse('admin:admin_inlines_author_add'))\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..25552f2 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2899,7 +2899,30 @@ class StrictAssignmentTests(SimpleTestCase):\n         })\n \n \n+from django.forms.models import model_to_dict\n+from django.test import TestCase\n+from .models import BetterWriter, Colour, ColourfulItem\n+\n class ModelToDictTests(TestCase):\n+    def test_model_to_dict_empty_fields(self):\n+        \"\"\"model_to_dict should return an empty dict when fields is an empty list.\"\"\"\n+        bw = BetterWriter.objects.create(name='Empty Fields Test', score=0)\n+        result = model_to_dict(bw, fields=[])\n+        self.assertEqual(result, {})\n+        \n+    def test_model_to_dict_specified_fields(self):\n+        \"\"\"model_to_dict should return only the specified fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Specific Fields Test', score=8)\n+        result = model_to_dict(bw, fields=['id', 'score'])\n+        self.assertEqual(result, {'id': bw.id, 'score': bw.score})\n+        \n+    def test_model_to_dict_exclude_fields(self):\n+        \"\"\"model_to_dict should exclude specified fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Exclude Fields Test', score=8)\n+        result = model_to_dict(bw, exclude=['name'])\n+        self.assertNotIn('name', result)\n+        self.assertIn('id', result)\n+        self.assertIn('score', result)\n     def test_many_to_many(self):\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..95d729c 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,8 +1,10 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from django.db.models.deletion import Collector\n \n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n@@ -471,7 +473,31 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n-    def test_fast_delete_joined_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        \"\"\"Test if deleting a User instance sets its PK to None when fast-deleted.\"\"\"\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_instance_with_manual_pk(self):\n+        \"\"\"Test if deleting a User instance with manual PK sets its PK to None.\"\"\"\n+        u = User.objects.create(pk=1)\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_instance_with_fk_does_not_set_pk_none(self):\n+        \"\"\"Test if deleting a model with a foreign key does not set PK to None.\"\"\"\n+        u = User.objects.create()\n+        u.avatar_set.create(desc='Test')\n+        u.delete()\n+        # After standard delete due dependency on related objects, pk remains.\n+        self.assertIsNotNone(u.pk)\n         a = Avatar.objects.create(desc='a')\n         User.objects.create(avatar=a)\n         u2 = User.objects.create()\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..62bfb9e 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,15 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # Test cases for the issue described\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-201', 3, '0.000'),\n+            ('5e-250', 5, '0.00000'),\n+            ('3e-300', 10, '0.0000000000'),\n+            # Edge case where number slightly bigger than exponential cutoff\n+            ('1e-199', None, '0.00000'),\n+            ('1e-201', None, '0.00000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..b531291 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,4 @@\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n@@ -184,7 +185,15 @@ class Bookmark(models.Model):\n         ordering = ['id']\n \n \n-class Comment(models.Model):\n+class Article(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n+    content_type_uuid = models.ForeignKey(ContentType, models.CASCADE, related_name='comments', null=True)\n+    object_pk_uuid = models.TextField()\n+    content_object_uuid = GenericForeignKey(ct_field='content_type_uuid', fk_field='object_pk_uuid')\n+    \n+    class Meta:\n+        ordering = ['id']\n     comment = models.TextField()\n \n     # Content-object field\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..6221458 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,6 @@\n import os\n+import os\n+\n import signal\n import subprocess\n from unittest import mock\n@@ -81,7 +83,44 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                'some:password',\n+            )\n+        )\n+\n+        pg_env_vars = {'PGSSLMODE': 'verify-ca',\n+                       'PGSSLROOTCERT': 'root.crt',\n+                       'PGSSLCERT': 'client.crt',\n+                       'PGSSLKEY': 'client.key'}\n+\n+        with mock.patch('os.environ.copy', return_value=pg_env_vars):\n+            self.assertEqual(\n+                self._run_it({\n+                    'database': 'dbname',\n+                    'user': 'someuser',\n+                    'host': 'somehost',\n+                    'port': '444',\n+                    'sslmode': 'verify-ca',\n+                    'sslrootcert': 'root.crt',\n+                    'sslcert': 'client.crt',\n+                    'sslkey': 'client.key',\n+                }), (\n+                    ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                    None,\n+                )\n+            )\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..15f5c8a 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -98,6 +98,14 @@ class FilteredRelationTests(TestCase):\n             [self.author1]\n         )\n \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],  # Assuming author2 should not have the book titled 'poem by alice'\n+        )\n+\n     def test_with_join_and_complex_condition(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..1d6000d 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -28,7 +28,15 @@ class TestUtilsHtml(SimpleTestCase):\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n             (\"'\", '&#39;'),\n+            (\"O'Reilly\", \"O&#x27;Reilly\"),\n+            (\"It's a test\", \"It&#x27;s a test\"),\n+            (\"'<tag>'\", \"&#x27;&lt;tag&gt;&#x27;\"),\n+            (\"<script>alert('xss')</script>\", \"&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;\"),\n         )\n+        # Check literal escape results\n+        for value, output in items:\n+            with self.subTest(value=value, output=output):\n+                self.check_output(escape, value, output)\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n         for value, output in items:\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..5174cd2 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,16 +243,31 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n-    def test_disallowed_abbreviated_options(self):\n-        \"\"\"\n-        To avoid conflicts with custom options, commands don't allow\n-        abbreviated forms of the --setting and --pythonpath options.\n-        \"\"\"\n-        self.write_settings('settings.py', apps=['user_commands'])\n-        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+    def test_skip_checks(self):\n+        self.write_settings('settings.py', apps=[\n+            'django.contrib.staticfiles', 'user_commands'],\n+            sdict={'STATICFILES_DIRS': '\"foo\"',})\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), 'Set foo')\n \n+    def test_skip_checks_without_flag(self):\n+        \"\"\"\n+        Test that checks are not skipped when --skip-checks is not provided.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=[\n+            'django.contrib.staticfiles', 'user_commands'],\n+            sdict={'STATICFILES_DIRS': '\"foo\"',})\n+        with self.assertRaises(CommandError):\n+            self.run_manage(['set_option', '--set', 'foo'])\n+\n+    def test_skip_checks_invalid_command(self):\n+        \"\"\"\n+        Test that using the --skip-checks flag with an invalid command raises an error.\n+        \"\"\"\n+        with self.assertRaises(CommandError):\n+            self.run_manage(['invalid_command', '--skip-checks'])\n+\n \n class UtilsTests(SimpleTestCase):\n \n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..a204dac 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,9 +1,42 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.test.utils import override_settings\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n from django.utils.translation import gettext_lazy as _\n \n \n-class RegexPatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default__root_urlconf(self):\n+        # Resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_before_and_after_set_urlconf(self):\n+        # Test calling get_resolver before and after setting ROOT_URLCONF.\n+        resolver_before = get_resolver()\n+        from django.urls.base import set_urlconf\n+        set_urlconf('urlpatterns.path_dynamic_urls')\n+        resolver_after = get_resolver()\n+        # Since set_urlconf changes the URLconf, the cached instances should differ.\n+        self.assertIsNot(resolver_before, resolver_after)\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_multiple_invocations_return_same_instance(self):\n+        # Test that repeated invocations with no change in URLconf return the same instance.\n+        resolver_first_call = get_resolver()\n+        resolver_second_call = get_resolver()\n+        self.assertIs(resolver_first_call, resolver_second_call)\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_with_different_urlconf_params(self):\n+        # Test resolvers with different URLconf parameters return different instances.\n+        resolver_default = get_resolver()\n+        resolver_specified = get_resolver('urlpatterns.some_other_urls')\n+        self.assertIsNot(resolver_default, resolver_specified)\n \n     def test_str(self):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n@@ -12,4 +45,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..23af323 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -241,8 +241,19 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n             email='test2@example.com',\n             password='test',\n         )\n-\n-    def test_authenticate_inactive(self):\n+    \n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_without_credentials(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        for credentials in (\n+            {},\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},\n+            {'password': 'test'},\n+        ):\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n         \"\"\"\n         An inactive user can't authenticate.\n         \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..814605f 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,6 +124,22 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    def test_union_with_column_change_in_values_list(self):\n+        ReservedName.objects.create(name='b', order=3)\n+        qs1 = ReservedName.objects.all()\n+        \n+        # First, check the original query with both fields\n+        reserved_name = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name, ('b', 3))\n+\n+        # Next, change the column to just 'order'\n+        reserved_name_order_only = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_name_order_only, (3,))\n+\n+        # Further, check changing to just 'name'\n+        reserved_name_name_only = qs1.union(qs1).values_list('name').get()\n+        self.assertEqual(reserved_name_name_only, ('b',))\n+\n     def test_union_with_two_annotated_values_list(self):\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n",
  "django__django-11532": "",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..2e34e5d 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,46 @@\n+\n+class ListDisplayCheckTests(CheckTestCase):\n+\n+    def test_valid_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_invalid_field_not_accessible_on_model(self):\n+        class TestModel(Model):\n+            field = Field()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel, (\n+                \"The value of 'list_display[0]' refers to 'non_existent_field', \"\n+                \"which is not a callable, an attribute of 'TestModelAdmin', \"\n+                \"or an attribute or method on 'TestModel'.\",\n+            ), 'admin.E108'\n+        )\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..45bd6ae 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -2,6 +2,7 @@ from datetime import datetime\n from operator import attrgetter\n \n from django.core.exceptions import FieldError\n+from datetime import datetime\n from django.db.models import (\n     CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n@@ -462,7 +463,51 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_with_expression_inheritance(self):\n+        ca1 = ChildArticle.objects.create(\n+            headline='Article 1', \n+            pub_date=datetime(2005, 7, 27), \n+            author=self.author_1\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='Article 2', \n+            pub_date=datetime(2005, 7, 27), \n+            author=self.author_2\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='Article 3', \n+            pub_date=datetime(2005, 7, 27), \n+            author=self.author_1\n+        )\n+        ca4 = ChildArticle.objects.create(\n+            headline='Article 4', \n+            pub_date=datetime(2005, 7, 28), \n+            author=None\n+        )\n+\n+        # This will check ordering by the 'article_ptr' field of the ChildArticle\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca1, ca2, ca3, ca4])\n+\n+    def test_ordered_by_expression_on_article_parent(self):\n+        # Create instances of OrderedByFArticle, a proxy with a Meta.ordering using expressions\n+        obfa1 = OrderedByFArticle.objects.create(\n+            headline='Obf Article 1', \n+            pub_date=datetime(2005, 7, 27), \n+            author=self.author_1\n+        )\n+        obfa2 = OrderedByFArticle.objects.create(\n+            headline='Obf Article 2', \n+            pub_date=datetime(2005, 7, 27), \n+            author=self.author_2\n+        )\n+        \n+        # Order by author.name; it should work now with the updated code fix.\n+        articles = OrderedByFArticle.objects.all()\n+        self.assertQuerysetEqual(\n+            articles, [obfa1, obfa2],\n+            transform=lambda x: x.headline\n+        )\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..9ecb8e6 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -391,6 +391,14 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n+    def test_distinct_avg(self):\n+        books = Book.objects.aggregate(avg_rating=Avg('rating', distinct=True))\n+        self.assertEqual(books['avg_rating'], 4.125)\n+\n+    def test_distinct_sum(self):\n+        books = Book.objects.aggregate(sum_rating=Sum('rating', distinct=True))\n+        self.assertEqual(books['sum_rating'], 16.5)\n+\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n",
  "django__django-11740": "",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..7f1491c 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -224,7 +224,20 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n-    def test_subparser_dest_required_args(self):\n+    def test_mutually_exclusive_group_required_options_kwarg(self):\n+        out = StringIO()\n+        # Test with `foo_id` specified in kwargs\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        # Test with `foo_name` specified in kwargs\n+        call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Test without any of the mutually exclusive group options passed\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command('mutually_exclusive_required', stdout=out)\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..237793c 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,21 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_maxlength_attribute(self):\n+        # Test case for default user model with max_length of 255\n+        data = {\n+            'username': 'u' * 255,\n+            'password': 'pwd',\n+        }\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), '255')\n+\n+        # Test case when max_length is set to 254\n+        with override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser'):\n+            user = IntegerUsernameUser(username='testuser', password='password')\n+            user.save()\n+            form = AuthenticationForm(None, {'username': 'testuser', 'password': 'password'})\n+            self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), '254')\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..6a4be85 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -312,7 +313,37 @@ class HttpDateProcessingTests(unittest.TestCase):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n \n-    def test_parsing_rfc1123(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_two_digit_year(self, mocked_datetime):\n+        \"\"\"\n+        Test 'parse_http_date' function with two-digit year dates and current dates\n+        that require interpretation by the \"50 years rule\".\n+        \"\"\"\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        \n+        # Set different current times to test against\n+        current_years = [\n+            datetime(2025, 1, 1),  # Midway through the century\n+            datetime(1975, 1, 1),  # Midway through last century\n+            datetime(2075, 1, 1),  # Midway through next century\n+        ]\n+        \n+        tests = [\n+            # Test cases: (current_date, input_rfc850_date, expected_full_date)\n+            (current_years[0], 'Friday, 01-Jan-50 00:00:00 GMT', datetime(2050, 1, 1, 0, 0, 0)),\n+            (current_years[0], 'Thursday, 31-Dec-49 23:59:59 GMT', datetime(1949, 12, 31, 23, 59, 59)),\n+            (current_years[1], 'Friday, 01-Jan-50 00:00:00 GMT', datetime(1950, 1, 1, 0, 0, 0)),\n+            (current_years[1], 'Monday, 01-Jan-101 00:00:00 GMT', datetime(2001, 1, 1, 0, 0, 0)),\n+            (current_years[2], 'Monday, 01-Jan-25 00:00:00 GMT', datetime(2025, 1, 1, 0, 0, 0)),\n+            (current_years[2], 'Friday, 31-Dec-74 00:00:00 GMT', datetime(2074, 12, 31, 0, 0, 0)),\n+        ]\n+        \n+        for current_year, rfc850_str, expected in tests:\n+            with self.subTest(rfc850_str=rfc850_str, current_year=current_year):\n+                mocked_datetime.utcnow.return_value = current_year\n+                parsed = parse_http_date(rfc850_str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected)\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..0101f9b 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3680,12 +3680,40 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertTrue(f.is_valid())\n         self.assertEqual(f.cleaned_data, {'data': 'xyzzy'})\n \n-    def test_empty_data_files_multi_value_dict(self):\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Form custom error message.')\n+\n+    def test_deep_copy_does_not_share_error_messages_dict(self):\n+        class DynamicErrorCharField(CharField):\n+            pass\n+\n+        field = DynamicErrorCharField(error_messages={'required': 'This field is required.'})\n+        field_copy = copy.deepcopy(field)\n+\n+        # Modify the error message in the original\n+        field.error_messages['required'] = 'New message.'\n+\n+        # The copied field should not reflect this change\n+        self.assertNotEqual(field_copy.error_messages['required'], field.error_messages['required'])\n+        self.assertEqual(field_copy.error_messages['required'], 'This field is required.')\n         p = Person()\n         self.assertIsInstance(p.data, MultiValueDict)\n         self.assertIsInstance(p.files, MultiValueDict)\n \n \n+import copy\n+from django.forms import Form, CharField\n+from django.test import SimpleTestCase\n+\n class CustomRenderer(DjangoTemplates):\n     pass\n \n",
  "django__django-11951": "",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..ddfa115 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,30 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.db import models\n+from django.test import TestCase\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", \"The first choice, it is\"\n+    SECOND_CHOICE = \"second\", \"The second choice, it is\"\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class EnumTest(TestCase):\n+    def setUp(self) -> None:\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n@@ -116,6 +140,15 @@ class ChoicesTests(SimpleTestCase):\n         self.assertEqual(Medal.values, ['GOLD', 'SILVER', 'BRONZE'])\n         self.assertEqual(Medal.names, ['GOLD', 'SILVER', 'BRONZE'])\n \n+    def test_textchoices_str_value(self):\n+        my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+        # Test that the saved value is a string and matches enum value\n+        self.assertEqual(my_object.my_str_value, \"first\")\n+\n+        # Retrieve to ensure database consistency\n+        my_object.refresh_from_db()\n+        self.assertEqual(my_object.my_str_value, \"first\")\n+\n     def test_textchoices_containment(self):\n         self.assertIn(YearInSchool.FRESHMAN, YearInSchool)\n         self.assertIn('FR', YearInSchool)\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..90dd253 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -139,6 +139,17 @@ class ChoicesTests(SimpleTestCase):\n     def test_formfield(self):\n         no_choices_formfield = self.no_choices.formfield()\n         self.assertIsInstance(no_choices_formfield, forms.IntegerField)\n+\n+    def test_overriding_FIELD_display(self):\n+        # Model definition for testing\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n         fields = (\n             self.empty_choices, self.with_choices, self.empty_choices_bool,\n             self.empty_choices_text,\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..2b9f75f 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,6 +9,8 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db import connection\n+from django.db.models import Index\n from django.test.utils import override_settings\n from django.utils import timezone\n \n@@ -22,7 +24,45 @@ class SchemaIndexesTests(TestCase):\n     Test index handling by the db.backends.schema infrastructure.\n     \"\"\"\n \n-    def test_index_name_hash(self):\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n         \"\"\"\n         Index names should be deterministic.\n         \"\"\"\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..f1ab17a 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -15,7 +16,26 @@ from .models import Author, Item, ObjectC, Ranking\n \n \n class TestQuery(SimpleTestCase):\n-    def test_simple_query(self):\n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])  # Expected list, not string representation.\n+\n+    def test_input_tuple(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))  # Ensure tuple input remains tuple.\n+\n+    def test_input_set(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name={'a', 'b'}))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, {'a', 'b'})  # Ensure set input remains set.\n         query = Query(Author)\n         where = query.build_where(Q(num__gt=2))\n         lookup = where.children[0]\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..f790219 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -721,8 +721,34 @@ class WriterTests(SimpleTestCase):\n         writer = MigrationWriter(migration)\n         output = writer.as_string()\n         self.assertIn(\"from django.db import migrations\\n\", output)\n-\n-    def test_deconstruct_class_arguments(self):\n+    def test_deconstruct_inner_class_field(self):\n+        # Test serialization of a field that is a subclass of models.Field defined as an inner class.\n+        class Outer:\n+            class InnerField(models.CharField):\n+                pass\n+\n+        # Test to ensure that the fully qualified path of the inner class is correctly serialized.\n+        field_instance = Outer.InnerField(max_length=20)\n+        serialized_field = MigrationWriter.serialize(field_instance)[0]\n+        expected_serialized_path = \"tests.migrations.test_writer.Outer.InnerField(max_length=20)\"\n+        self.assertEqual(serialized_field, expected_serialized_path)\n+\n+    def test_deconstruct_inner_enum(self):\n+        # Test serialization of an enum class defined as an inner class.\n+        import enum\n+        from enumfields import EnumField, Enum\n+\n+        class Thing(models.Model):\n+            @enum.unique\n+            class StateEnum(Enum):\n+                ACTIVE = 'active'\n+                INACTIVE = 'inactive'\n+\n+        # Test to ensure inner Enum class is correctly serialized with fully qualified path.\n+        state_enum_field = EnumField(enum=Thing.StateEnum)\n+        serialized_enum_field = MigrationWriter.serialize(state_enum_field)[0]\n+        expected_serialized_enum_path = \"enumfields.fields.EnumField(enum=tests.migrations.test_writer.Thing.StateEnum)\"\n+        self.assertEqual(serialized_enum_field, expected_serialized_enum_path)\n         # Yes, it doesn't make sense to use a class as a default for a\n         # CharField. It does make sense for custom fields though, for example\n         # an enumfield that takes the enum class as an argument.\n@@ -746,4 +772,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..7faca46 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -839,6 +839,19 @@ class ChangeListTests(TestCase):\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 1)\n         data['form-0-uuid'] = 'INVALD_PRIMARY_KEY'\n+        # Test with regex special character in prefix\n+        data_with_regex_chars = {\n+            'form$.#-TOTAL_FORMS': '2',\n+            'form$.#-INITIAL_FORMS': '2',\n+            'form$.#-MIN_NUM_FORMS': '0',\n+            'form$.#-MAX_NUM_FORMS': '1000',\n+            'form$.#-0-uuid': str(a.pk),\n+            'form$.#-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        request_regex = self.factory.post(changelist_url, data=data_with_regex_chars)\n+        queryset_with_regex_chars = m._get_list_editable_queryset(request_regex, prefix='form$.#')\n+        self.assertEqual(queryset_with_regex_chars.count(), 1)\n         # The unfiltered queryset is returned if there's invalid data.\n         request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..27037bf 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,6 +1103,44 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n+    def test_splitarrayfield_booleanfield_widgets_checked_properly(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=5)\n+        context = widget.get_context('name', [True, False, True, False, True])\n+\n+        # We expect the 'checked' attribute to only be in widgets corresponding to True values.\n+        expected_attrs = [\n+            {'checked': True},  # True\n+            {},                 # False\n+            {'checked': True},  # True\n+            {},                 # False\n+            {'checked': True}   # True\n+        ]\n+        \n+        actual_attrs = [subwidget['attrs'] for subwidget in context['widget']['subwidgets']]\n+        self.assertEqual(actual_attrs, expected_attrs)\n+\n+    def test_splitarrayfield_booleanfield_no_checked_for_all_false(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [False, False, False])\n+\n+        # With all False values, no checkbox should have the 'checked' attribute\n+        expected_attrs = [{}, {}, {}]\n+        actual_attrs = [subwidget['attrs'] for subwidget in context['widget']['subwidgets']]\n+        self.assertEqual(actual_attrs, expected_attrs)\n+\n+    def test_splitarrayfield_booleanfield_only_initial_true_checked(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('name', [True, True, False])\n+\n+        expected_attrs = [\n+            {'checked': True},  # True\n+            {'checked': True},  # True\n+            {}                  # False\n+        ]\n+\n+        actual_attrs = [subwidget['attrs'] for subwidget in context['widget']['subwidgets']]\n+        self.assertEqual(actual_attrs, expected_attrs)\n+\n     def test_render(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n",
  "django__django-12209": "",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..cba032f 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -77,12 +77,54 @@ class SimpleTagTests(TagTestCase):\n                 'simple_only_unlimited_args - Expected result: 37, 42, 56, 89'),\n             ('{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n+            (\n+                '{% load custom %}{% hello greeting=\"hi\" %}',\n+                'hello world - Expected result: hi world',\n+            ),\n+            (\n+                '{% load custom %}{% hi greeting=\"hello\" %}',\n+                'hi world - Expected result: hello world',\n+            ),\n         ]\n \n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n \n+    def test_custom_tag_keyword_only_args(self):\n+        # This test covers the issue with keyword-only arguments with defaults.\n+        templates = [\n+            (\n+                '{% load custom %}{% hello greeting=\"hi\" %}',\n+                'hello world - Expected result: hi world',\n+            ),\n+        ]\n+\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(Context()), entry[1])\n+\n+    def test_custom_tag_keyword_only_error_messages(self):\n+        # This test checks the correct error messages for repeated keyword arguments.\n+        errors = [\n+            (\n+                \"'hello' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hello greeting=\"hello\" greeting=\"hi\" %}',\n+            ),\n+            (\n+                \"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hello\" greeting=\"hi\" %}',\n+            ),\n+        ]\n+\n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1])\n+\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(\"%s as var %%}Result: {{ var }}\" % entry[0][0:-2])\n             self.assertEqual(t.render(c), \"Result: %s\" % entry[1])\n@@ -101,8 +143,50 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            (\n+                '{% load custom %}{% hello greeting=\"hi\" %}',\n+                'hello world - Expected result: hi world',\n+            ),\n+            (\n+                '{% load custom %}{% hi greeting=\"hello\" %}',\n+                'hi world - Expected result: hello world',\n+            ),\n         ]\n \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+    def test_custom_tag_keyword_only_args(self):\n+        # This test covers the issue with keyword-only arguments with defaults.\n+        templates = [\n+            (\n+                '{% load custom %}{% hello greeting=\"hi\" %}',\n+                'hello world - Expected result: hi world',\n+            ),\n+        ]\n+\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(Context()), entry[1])\n+\n+    def test_custom_tag_keyword_only_error_messages(self):\n+        # This test checks the correct error messages for repeated keyword arguments.\n+        errors = [\n+            (\n+                \"'hello' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hello greeting=\"hello\" greeting=\"hi\" %}',\n+            ),\n+            (\n+                \"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hello\" greeting=\"hi\" %}',\n+            ),\n+        ]\n+\n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1])\n+\n         for entry in errors:\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(entry[1])\n@@ -190,8 +274,50 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_only_unlimited_args - Expected result: 37, 42, 56, 89\\n'),\n             ('{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n+            (\n+                '{% load custom %}{% hello greeting=\"hi\" %}',\n+                'hello world - Expected result: hi world',\n+            ),\n+            (\n+                '{% load custom %}{% hi greeting=\"hello\" %}',\n+                'hi world - Expected result: hello world',\n+            ),\n+        ]\n+\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+    def test_custom_tag_keyword_only_args(self):\n+        # This test covers the issue with keyword-only arguments with defaults.\n+        templates = [\n+            (\n+                '{% load custom %}{% hello greeting=\"hi\" %}',\n+                'hello world - Expected result: hi world',\n+            ),\n+        ]\n+\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(Context()), entry[1])\n+\n+    def test_custom_tag_keyword_only_error_messages(self):\n+        # This test checks the correct error messages for repeated keyword arguments.\n+        errors = [\n+            (\n+                \"'hello' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hello greeting=\"hello\" greeting=\"hi\" %}',\n+            ),\n+            (\n+                \"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hello\" greeting=\"hi\" %}',\n+            ),\n         ]\n \n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..83b9ae7 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2486,7 +2487,30 @@ Password: <input type=\"password\" name=\"password\" required>\n         self.assertEqual(f.errors, {})\n         self.assertEqual(f.cleaned_data['file1'], 'resume.txt')\n \n-    def test_basic_processing_in_view(self):\n+    def test_filefield_with_fileinput_required(self):\n+        class FileForm(Form):\n+            file1 = forms.FileField(widget=FileInput)\n+\n+        # Test when no initial data is provided; should be required\n+        f1 = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f1.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+        # Test when initial data exists; should not be required\n+        f2 = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f2.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+        # Test the widget's use_required_attribute method with no initial data\n+        widget = f1.fields['file1'].widget\n+        self.assertIs(widget.use_required_attribute(None), True)\n+\n+        # Test the widget's use_required_attribute method with initial data\n+        self.assertIs(widget.use_required_attribute('resume.txt'), False)\n         class UserRegistration(Form):\n             username = CharField(max_length=10)\n             password1 = CharField(widget=PasswordInput)\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..0cfa464 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -138,6 +139,30 @@ class ChoicesTests(SimpleTestCase):\n                 ONE = 1, 'X', 'Invalid'\n \n         msg = \"duplicate values found in <enum 'Fruit'>: PINEAPPLE -> APPLE\"\n+\n+    def test_templates(self):\n+        from django.template import Context, Template\n+        template = Template('{{ Suit.DIAMOND.label }}|{{ Suit.DIAMOND.value }}')\n+        output = template.render(Context({'Suit': Suit}))\n+        self.assertEqual(output, 'Diamond|1')\n+\n+    def test_enum_usage_in_templates(self):\n+        from django.template import Context, Template\n+\n+        class YearInSchool(models.TextChoices):\n+            FRESHMAN = 'FR', 'Freshman'\n+            SOPHOMORE = 'SO', 'Sophomore'\n+            JUNIOR = 'JR', 'Junior'\n+            SENIOR = 'SR', 'Senior'\n+\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}True{% else %}False{% endif %}')\n+        context = Context({'student': {'year_in_school': YearInSchool.FRESHMAN}, 'YearInSchool': YearInSchool})\n+        output = template.render(context)\n+        self.assertEqual(output, 'True')\n+\n+        context = Context({'student': {'year_in_school': YearInSchool.SOPHOMORE}, 'YearInSchool': YearInSchool})\n+        output = template.render(context)\n+        self.assertEqual(output, 'False')\n         with self.assertRaisesMessage(ValueError, msg):\n             class Fruit(models.IntegerChoices):\n                 APPLE = 1, 'Apple'\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..1a5e553 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -175,8 +175,24 @@ class UtilsTests(SimpleTestCase):\n \n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n-\n-    def test_number_formats_display_for_field(self):\n+    def test_jsonfield_display_for_field(self):\n+        \"\"\"\n+        Test to verify that JSONField values are properly displayed in admin\n+        when they are read-only, i.e., serialized as valid JSON.\n+        \"\"\"\n+        tests = [\n+            ({'foo': 'bar'}, '{\"foo\": \"bar\"}'),\n+            ({\"numeric\": 123, \"boolean\": True}, '{\"numeric\": 123, \"boolean\": true}'),\n+            ([], '[]'),  # List should be serialized as JSON array\n+            (None, self.empty_value),  # None should respect the empty display value\n+            ({('invalid',): 'value'}, \"{('invalid',): 'value'}\"),  # Check invalid JSON\n+        ]\n+        \n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                field = JSONField()\n+                display_value = display_for_field(value, field, self.empty_value)\n+                self.assertEqual(display_value, expected_display)\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n \n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..9c33a35 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1015,7 +1015,35 @@ class OtherModelTests(SimpleTestCase):\n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n \n-    def test_m2m_table_name_clash(self):\n+    def test_multiple_onetoone_without_parent_link(self):\n+        msg = 'Add parent_link=True to invalid_models_tests.Picking.origin.'\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            class Document(models.Model):\n+                pass\n+\n+            class Picking(Document):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+    def test_multiple_onetoone_with_correct_parent_link(self):\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        self.assertEqual(Picking.check(), [])\n+\n+    def test_onetoone_field_order(self):\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        self.assertEqual(Picking.check(), [])\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n \n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..90fffe6 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -223,6 +223,13 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         ret = self.process_request(\"get\", \"/some/url\")\n         self.assertIsNone(ret)\n \n+    @override_settings(SECURE_REFERRER_POLICY='same-origin')\n+    def test_referrer_policy_default_setting(self):\n+        \"\"\"\n+        When SECURE_REFERRER_POLICY is not set, the default should be 'same-origin'.\n+        \"\"\"\n+        self.assertEqual(self.process_response()['Referrer-Policy'], 'same-origin')\n+\n     @override_settings(SECURE_REFERRER_POLICY=None)\n     def test_referrer_policy_off(self):\n         \"\"\"\n@@ -254,4 +261,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..4de6b5a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -13,10 +13,12 @@ from django.db.models import (\n     Func, IntegerField, Max, Min, Model, OrderBy, OuterRef, Q, StdDev,\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n+from django.utils.functional import SimpleLazyObject\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n )\n+from django.utils.functional import SimpleLazyObject\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n@@ -26,6 +28,7 @@ from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n     Result, SimulationRun, Time,\n )\n+from django.utils.functional import SimpleLazyObject\n \n \n class BasicExpressionsTests(TestCase):\n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..39b447e 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n@@ -138,7 +138,18 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         self.assertEqual(f2.widget.attrs['maxlength'], '20')\n         self.assertEqual(f2.widget.attrs['size'], '10')\n \n-    def test_formfield_overrides_for_datetime_field(self):\n+    def test_formfield_for_manytomany_widget_override(self):\n+        \"\"\"\n+        Test that a custom widget can be set for a ManyToManyField in the\n+        formfield_for_manytomany method.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n         \"\"\"\n         Overriding the widget for DateTimeField doesn't overrides the default\n         form_class for that field (#26449).\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..534ed9b 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,8 +172,12 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n+        # Original call to execute_sql_flush with the 'using' parameter\n         connection.ops.execute_sql_flush(connection.alias, sql_list)\n \n+        # New call to execute_sql_flush without the 'using' parameter, which should be inferred\n+        connection.ops.execute_sql_flush(sql_list)\n+\n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n             self.assertIs(Book.objects.exists(), False)\n@@ -181,4 +185,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..1938f52 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,6 +2444,31 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+    \n+    def test_inherited_field_order(self):\n+        \"\"\"\n+        Test that a field removed from a base model and added to a subclass\n+        is migrated in the correct order (RemoveField before CreateModel).\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n \n     def test_mti_inheritance_model_removal(self):\n         Animal = ModelState('app', 'Animal', [\n@@ -2453,4 +2478,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..5a7c22c 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -9,6 +9,8 @@ from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db import models\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -194,7 +196,46 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    def test_in_bulk_meta_constraint(self):\n+        # Test to verify in_bulk works with UniqueConstraint\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        season_2013 = Season.objects.create(year=2013)\n+        result = Season.objects.in_bulk(\n+            [season_2011.year, season_2012.year],\n+            field_name='year',\n+        )\n+        self.assertEqual(\n+            result,\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        # Test to ensure that non-unique fields raise an error as expected\n+        class MetaConstraintModel(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(ean__isnull=False)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    MetaConstraintModel.objects.in_bulk(field_name=field_name)\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..f45779e 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -883,7 +883,20 @@ class OtherModelTests(SimpleTestCase):\n             )\n         ])\n \n-    def test_ordering_allows_registered_lookups(self):\n+    def test_ordering_uses_nested_null_lookup(self):\n+        class Supply(models.Model):\n+            pass\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, on_delete=models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        self.assertEqual(Stock.check(), [])\n         class Model(models.Model):\n             test = models.CharField(max_length=100)\n \n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..6e236a9 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,32 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n-    def test_reversed_or(self):\n+    def test_constant_expression_in_group_by(self):\n+        # Test case specifically for the issue described\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        query = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n+        sql_query = str(query.query)\n+        # Ensure '3' is not in the GROUP BY clause\n+        self.assertNotIn('GROUP BY \"model\".\"column_a\", 3', sql_query)\n+      \n+    def test_non_constant_expression_in_group_by(self):\n+        # Test for a non-constant expression\n+        expr = ExpressionWrapper(Lower(Value('text')), output_field=IntegerField())\n+        query = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n+        sql_query = str(query.query)\n+        # Ensure expression is properly handled in GROUP BY as needed\n+        # Note: You would check for the actual expression representation in the GROUP BY clause\n+        self.assertIn('GROUP BY', sql_query)  # Simplified check\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..dbb1377 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1211,8 +1211,50 @@ class Queries1Tests(TestCase):\n         )\n \n \n+from django.db import models\n+from django.utils.translation import gettext_lazy as _\n+from django.db.utils import NotSupportedError\n+\n+class ProductMetaDataType(models.Model):\n+    label = models.CharField(max_length=255, unique=True, blank=False, null=False)\n+    filterable = models.BooleanField(default=False, verbose_name=_(\"filterable\"))\n+\n+    class Meta:\n+        app_label = \"adminpricing\"\n+        verbose_name = _(\"product meta data type\")\n+        verbose_name_plural = _(\"product meta data types\")\n+\n+    def __str__(self):\n+        return self.label\n+\n+\n+class ProductMetaData(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    value = models.TextField(null=False, blank=False)\n+    metadata_type = models.ForeignKey(\n+        ProductMetaDataType, null=False, blank=False, on_delete=models.CASCADE\n+    )\n+\n+    class Meta:\n+        app_label = \"adminpricing\"\n+        verbose_name = _(\"product meta data\")\n+        verbose_name_plural = _(\"product meta datas\")\n+\n+\n class Queries2Tests(TestCase):\n     @classmethod\n+    def setUpTestData(cls):\n+        cls.metadata_type_1 = ProductMetaDataType.objects.create(label=\"Type 1\")\n+        cls.brand_metadata = ProductMetaDataType.objects.create(label=\"Brand\", filterable=False)\n+        \n+        cls.metadata_1 = ProductMetaData.objects.create(value=\"Sample Value\", metadata_type=cls.metadata_type_1)\n+        cls.metadata_2 = ProductMetaData.objects.create(value=\"Dark Vador\", metadata_type=cls.brand_metadata)\n+    \n+    def test_non_filterable_field(self):\n+        # Attempt to filter using a non-filterable field should raise an error\n+        with self.assertRaises(NotSupportedError):\n+            ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=self.brand_metadata)\n+    @classmethod\n     def setUpTestData(cls):\n         Number.objects.create(num=4)\n         Number.objects.create(num=8)\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..9f09278 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,60 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referencing_order_by_fk(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        author_3 = Author.objects.create(name=\"Author 3\", editor=author_1)\n+        author_4 = Author.objects.create(name=\"Author 4\", editor=author_2)\n+        \n+        # Creating articles\n+        article_1 = Article.objects.create(\n+            author=author_3, headline=\"Article 1\", pub_date=\"2023-01-01\"\n+        )\n+        article_2 = Article.objects.create(\n+            author=author_4, headline=\"Article 2\", pub_date=\"2023-01-02\"\n+        )\n+        \n+        # Check the order by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+        \n+    def test_self_referencing_order_by_fk_inverted(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        author_3 = Author.objects.create(name=\"Author 3\", editor=author_1)\n+        author_4 = Author.objects.create(name=\"Author 4\", editor=author_2)\n+\n+        # Creating articles\n+        article_1 = Article.objects.create(\n+            author=author_3, headline=\"Article 1\", pub_date=\"2023-01-01\"\n+        )\n+        article_2 = Article.objects.create(\n+            author=author_4, headline=\"Article 2\", pub_date=\"2023-01-02\"\n+        )\n+\n+        # Check the inverted order by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +407,60 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_self_referencing_order_by_fk(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        author_3 = Author.objects.create(name=\"Author 3\", editor=author_1)\n+        author_4 = Author.objects.create(name=\"Author 4\", editor=author_2)\n+        \n+        # Creating articles\n+        article_1 = Article.objects.create(\n+            author=author_3, headline=\"Article 1\", pub_date=\"2023-01-01\"\n+        )\n+        article_2 = Article.objects.create(\n+            author=author_4, headline=\"Article 2\", pub_date=\"2023-01-02\"\n+        )\n+        \n+        # Check the order by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+        \n+    def test_self_referencing_order_by_fk_inverted(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        author_3 = Author.objects.create(name=\"Author 3\", editor=author_1)\n+        author_4 = Author.objects.create(name=\"Author 4\", editor=author_2)\n+\n+        # Creating articles\n+        article_1 = Article.objects.create(\n+            author=author_3, headline=\"Article 1\", pub_date=\"2023-01-01\"\n+        )\n+        article_2 = Article.objects.create(\n+            author=author_4, headline=\"Article 2\", pub_date=\"2023-01-02\"\n+        )\n+\n+        # Check the inverted order by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..cfd2382 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -614,8 +614,33 @@ class BaseCacheTests:\n             if cull_cache.has_key('cull%d' % i):\n                 count += 1\n         self.assertEqual(count, final_count)\n+    def test_cull_none_response(self):\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+\n+        old_max_entries = cull_cache._max_entries\n+        old_cull_frequency = cull_cache._cull_frequency\n+\n+        # Setup to simulate None response on cursor.fetchone()\n+        cull_cache._max_entries = 1\n+        cull_cache._cull_frequency = 10\n \n-    def test_cull(self):\n+        try:\n+            # Add only one item and call _cull directly to simulate conditions\n+            cull_cache.set('key1', 'value1', timeout=1000)\n+\n+            # Force _cull method invocation scenarios manually here if possible,\n+            # Assure no exception is raised when fetchone returns None.\n+            with self.assertLogs(level='DEBUG') as log:\n+                cull_cache._cull(cull_cache._table, cull_cache._db, timezone.now())\n+\n+            # There should be entries in the log indicating culling attempts and safeties,\n+            # check the debug log if needed to confirm no uncaught issues.\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n+            cull_cache._cull_frequency = old_cull_frequency\n         self._perform_cull_test('cull', 50, 29)\n \n     def test_zero_cull(self):\n",
  "django__django-13109": "diff --git a/tests/model_forms/models.py b/tests/model_forms/models.py\nindex ff8ad74..b73524e 100644\n--- a/tests/model_forms/models.py\n+++ b/tests/model_forms/models.py\n@@ -28,8 +28,19 @@ class Category(models.Model):\n         return self.__str__()\n \n \n+class WriterManager(models.Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        return qs.filter(archived=False)\n+\n class Writer(models.Model):\n     name = models.CharField(max_length=50, help_text='Use both first and last names.')\n+    archived = models.BooleanField(default=False, editable=False)\n+    objects = WriterManager()\n+\n+    class Meta:\n+        ordering = ('name',)\n+    name = models.CharField(max_length=50, help_text='Use both first and last names.')\n \n     class Meta:\n         ordering = ('name',)\n",
  "django__django-13112": "",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..b5436e1 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1210,12 +1210,58 @@ class ExpressionOperatorTests(TestCase):\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 1764)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).float, Approximate(61.02, places=2))\n \n+    def test_duration_addition_with_timedelta(self):\n+        \"\"\" Test duration expressions with timedelta addition. \"\"\"\n+        delta = datetime.timedelta(days=1)\n+        experiment = Experiment.objects.create(estimated_time=datetime.timedelta(days=2))\n+        annotated_qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+        for obj in annotated_qs:\n+            self.assertEqual(obj.duration, obj.estimated_time + delta)\n+\n+    def test_duration_subtraction_with_timedelta(self):\n+        \"\"\" Test duration expressions with timedelta subtraction. \"\"\"\n+        delta = datetime.timedelta(days=1)\n+        experiment = Experiment.objects.create(estimated_time=datetime.timedelta(days=2))\n+        annotated_qs = Experiment.objects.annotate(duration=F('estimated_time') - delta)\n+        for obj in annotated_qs:\n+            self.assertEqual(obj.duration, obj.estimated_time - delta)\n+\n+    def test_duration_multiplication(self):\n+        \"\"\" Test duration expressions with multiplication. \"\"\"\n+        experiment = Experiment.objects.create(estimated_time=datetime.timedelta(days=2))\n+        annotated_qs = Experiment.objects.annotate(duration=F('estimated_time') * 2)\n+        for obj in annotated_qs:\n+            self.assertEqual(obj.duration, obj.estimated_time * 2)\n+\n     @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n     def test_lefthand_bitwise_xor(self):\n         Number.objects.update(integer=F('integer').bitxor(48))\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 26)\n         self.assertEqual(Number.objects.get(pk=self.n1.pk).integer, -26)\n \n+    def test_duration_addition_with_timedelta(self):\n+        \"\"\" Test duration expressions with timedelta addition. \"\"\"\n+        delta = datetime.timedelta(days=1)\n+        experiment = Experiment.objects.create(estimated_time=datetime.timedelta(days=2))\n+        annotated_qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+        for obj in annotated_qs:\n+            self.assertEqual(obj.duration, obj.estimated_time + delta)\n+\n+    def test_duration_subtraction_with_timedelta(self):\n+        \"\"\" Test duration expressions with timedelta subtraction. \"\"\"\n+        delta = datetime.timedelta(days=1)\n+        experiment = Experiment.objects.create(estimated_time=datetime.timedelta(days=2))\n+        annotated_qs = Experiment.objects.annotate(duration=F('estimated_time') - delta)\n+        for obj in annotated_qs:\n+            self.assertEqual(obj.duration, obj.estimated_time - delta)\n+\n+    def test_duration_multiplication(self):\n+        \"\"\" Test duration expressions with multiplication. \"\"\"\n+        experiment = Experiment.objects.create(estimated_time=datetime.timedelta(days=2))\n+        annotated_qs = Experiment.objects.annotate(duration=F('estimated_time') * 2)\n+        for obj in annotated_qs:\n+            self.assertEqual(obj.duration, obj.estimated_time * 2)\n+\n     @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n     def test_lefthand_bitwise_xor_null(self):\n         employee = Employee.objects.create(firstname='John', lastname='Doe')\n",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..88e94b3 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1617,6 +1617,14 @@ class FTimeDeltaTests(TestCase):\n         ).filter(difference=datetime.timedelta())\n         self.assertTrue(queryset.exists())\n \n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expressionwrapper(self):\n+        # Ensure subtraction of two DateTimeFields works without ExpressionWrapper\n+        queryset = Experiment.objects.annotate(delta=F('end') - F('start'))\n+        for experiment in queryset:\n+            expected_delta = experiment.end - experiment.start\n+            self.assertEqual(experiment.delta, expected_delta)\n+\n     @skipUnlessDBFeature('supports_temporal_subtraction')\n     def test_datetime_subtraction_microseconds(self):\n         delta = datetime.timedelta(microseconds=8999999999999999)\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..fa40bcd 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,7 @@\n import operator\n \n+import operator\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..5ccfa58 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -323,7 +323,19 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n-    def test_decode_failure_logged_to_security(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha256')\n+    def test_default_hashing_algorithm_sha256(self):\n+        data = {'another test key': 'another test value'}\n+        encoded = self.session.encode(data)\n+        self.assertEqual(self.session.decode(encoded), data)\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_legacy_decode_sha1_different_data(self):\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'different test key': 'different test value'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n             self.assertEqual({}, self.session.decode(bad_encode))\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..67c474d 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -2,6 +2,8 @@ import time\n \n from django.core.exceptions import ImproperlyConfigured\n from django.http import HttpResponse\n+from django.shortcuts import get_object_or_404\n+from .models import Artist, Account\n from django.test import (\n     RequestFactory, SimpleTestCase, ignore_warnings, override_settings,\n )\n@@ -590,7 +592,24 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    def test_simplelazyobject_in_kwargs(self):\n+        \"\"\"Test handling of SimpleLazyObject in kwargs with explicit string conversion.\"\"\"\n+        class OfferView(TemplateView):\n+            template_name = \"offers/offer.html\"\n+\n+            def get_context_data(self, **kwargs):\n+                # Simulate fix by explicitly converting SimpleLazyObject to string\n+                offer_slug = str(kwargs.get(\"offer_slug\", \"\"))\n+                offer = get_object_or_404(Account, slug=offer_slug)\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        account = Account.objects.create(slug='special-offer')\n+        # Simulate request with SimpleLazyObject-type slug\n+        lazy_slug = SimpleLazyObject(lambda: 'special-offer')\n+        response = OfferView.as_view()(self.rf.get('/'), offer_slug=lazy_slug)\n+        \n+        self.assertEqual(response.context_data['offer'].slug, 'special-offer')\n+        self.assertEqual(response.context_data['offer_slug'], 'special-offer')\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..cdf44dd 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,7 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2829,8 +2830,70 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n-\n-class FormFieldCallbackTests(SimpleTestCase):\n+class LimitChoicesToDuplicateOptionsTests(TestCase):\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-01-01')\n+        marley = Character.objects.create(username='Marley', last_action='2023-01-01')\n+\n+        # Creating StumpJokes\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        # Adding has_fooled_today\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+        \n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+        \n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+        \n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n \n     def test_baseform_with_widgets_in_meta(self):\n         \"\"\"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\"\"\"\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..462fd1f 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -82,13 +82,14 @@ class FileSystemStorageTests(unittest.TestCase):\n         path, args, kwargs = storage.deconstruct()\n         self.assertEqual(kwargs, kwargs_orig)\n \n-    def test_lazy_base_url_init(self):\n+    def test_callable_storage_deconstruction(self):\n         \"\"\"\n-        FileSystemStorage.__init__() shouldn't evaluate base_url.\n+        Test that FileField with callable storage deconstructs to the callable, not the result.\n         \"\"\"\n-        storage = FileSystemStorage(base_url=reverse_lazy('app:url'))\n-        with self.assertRaises(NoReverseMatch):\n-            storage.url(storage.base_url)\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        storage_callable = kwargs['storage']\n+        self.assertIs(storage_callable, callable_storage)\n \n \n class FileStorageTests(SimpleTestCase):\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..d58e7a9 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -623,6 +623,15 @@ class TestQuerying(TestCase):\n                     expected,\n                 )\n \n+    def test_key_in_issue_case(self):\n+        first_filter = {'our_field__key__in': [0]}\n+        first_items = NullableJSONModel.objects.filter(**first_filter)\n+        self.assertEqual(len(first_items), 0)\n+\n+        second_filter = {'our_field__key': 0}\n+        second_items = NullableJSONModel.objects.filter(**second_filter)\n+        self.assertEqual(len(second_items), 312)\n+\n     def test_key_iexact(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='\"BaR\"').exists(), False)\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..d68c54a 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -7,6 +7,41 @@ from django.db.models import (\n     DateField, DateTimeField, F, IntegerField, Max, OuterRef, Subquery,\n     TimeField,\n )\n+class TruncDateAndTimeTests(TestCase):\n+    def setUp(self):\n+        self.tz_utc = pytz.timezone(\"UTC\")\n+        self.tz_ny = pytz.timezone(\"America/New_York\")\n+        self.start_datetime = datetime(2023, 3, 26, 15, 30, 0)\n+        self.start_datetime = timezone.make_aware(self.start_datetime, timezone=self.tz_utc)\n+\n+    def test_truncdate_with_tzinfo(self):\n+        DTModel.objects.create(start_datetime=self.start_datetime)  # Create a model instance\n+        qs = DTModel.objects.annotate(\n+            date_utc=TruncDate('start_datetime', tzinfo=self.tz_utc),\n+            date_ny=TruncDate('start_datetime', tzinfo=self.tz_ny),\n+        ).values('date_utc', 'date_ny').annotate(count=Count('id'))\n+\n+        result = list(qs)[0]\n+        expected_date_utc = self.start_datetime.astimezone(self.tz_utc).date()\n+        expected_date_ny = self.start_datetime.astimezone(self.tz_ny).date()\n+\n+        self.assertEqual(result['date_utc'], expected_date_utc)\n+        self.assertEqual(result['date_ny'], expected_date_ny)\n+\n+    def test_trunctime_with_tzinfo(self):\n+        DTModel.objects.create(start_datetime=self.start_datetime)  # Create a model instance\n+        qs = DTModel.objects.annotate(\n+            time_utc=TruncTime('start_datetime', tzinfo=self.tz_utc),\n+            time_ny=TruncTime('start_datetime', tzinfo=self.tz_ny),\n+        ).values('time_utc', 'time_ny').annotate(count=Count('id'))\n+\n+        result = list(qs)[0]\n+        expected_time_utc = self.start_datetime.astimezone(self.tz_utc).time()\n+        expected_time_ny = self.start_datetime.astimezone(self.tz_ny).time()\n+\n+        self.assertEqual(result['time_utc'], expected_time_utc)\n+        self.assertEqual(result['time_ny'], expected_time_ny)\n+\n from django.db.models.functions import (\n     Extract, ExtractDay, ExtractHour, ExtractIsoWeekDay, ExtractIsoYear,\n     ExtractMinute, ExtractMonth, ExtractQuarter, ExtractSecond, ExtractWeek,\n@@ -17,7 +52,11 @@ from django.db.models.functions import (\n from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n+import pytz\n+from datetime import datetime\n from django.utils import timezone\n+from django.db.models import Count\n+from .models import DTModel\n \n from ..models import Author, DTModel, Fan\n \n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..1d890a7 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -103,6 +103,56 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n \n+class FieldComparisonTests(TestCase):\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+    def test_abstract_inherited_fields_ordering(self):\n+        \"\"\"Test ordering of field instances from abstract models.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Test ordering logic\n+        fields = [inherit2_model_field, abstract_model_field, inherit1_model_field]\n+        sorted_fields = sorted(fields)  # This uses __lt__\n+        self.assertEqual(sorted_fields, [abstract_model_field, inherit1_model_field, inherit2_model_field])\n+\n class ChoicesTests(SimpleTestCase):\n \n     @classmethod\n",
  "django__django-13410": "",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..2d12089 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2084,6 +2084,17 @@ class QuerysetOrderedTests(unittest.TestCase):\n         self.assertIs(qs.ordered, False)\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n+    def test_annotate_with_group_by_ordering(self):\n+        # Test cases related to the issue description\n+        qs = Foo.objects.annotate(Count('pk')).all()\n+        self.assertIs(qs.ordered, False)  # This should now correctly identify as False\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_annotate_values_with_group_by_ordering(self):\n+        qs = Foo.objects.values('name').annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)  # This should also be False now\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n \n @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n class SubqueryTests(TestCase):\n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..799a6e6 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,7 +1,9 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n+from .models.with_custom_email_field import CustomEmailField\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n from django.test.utils import ignore_warnings\n@@ -36,8 +38,29 @@ class TokenGeneratorTest(TestCase):\n         tk1 = p0.make_token(user)\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n-\n-    def test_timeout(self):\n+    \n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                # Change the user's email\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                # The old token should now be invalid\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..67b99e6 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,3 +1,5 @@\n+\n+from django.db.models import Q, UniqueConstraint\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n@@ -138,7 +140,48 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraintWithCondition')\n+    def test_username_unique_with_model_constraint_and_condition(self):\n+        class CustomUserUniqueConstraintWithCondition(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=['username'],\n+                        name='username_conditional_unique',\n+                        condition=Q(is_active=True),\n+                    ),\n+                ]\n+\n+        # The constraint is conditional, so auth.E003 error is expected for default backends\n+        expected_errors_default_backend = [\n+            checks.Error(\n+                \"'CustomUserUniqueConstraintWithCondition.username' must be unique because \"\n+                \"it is named as the 'USERNAME_FIELD'.\",\n+                obj=CustomUserUniqueConstraintWithCondition,\n+                id='auth.E003',\n+            )\n+        ]\n+\n+        # Default backend\n+        errors_default_backend = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors_default_backend, expected_errors_default_backend)\n+\n+        # Custom backend: requires handling for non-unique username\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            expected_warnings_custom_backend = [\n+                checks.Warning(\n+                    \"'CustomUserUniqueConstraintWithCondition.username' is named as the \"\n+                    \"'USERNAME_FIELD', but it is not unique.\",\n+                    hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n+                    obj=CustomUserUniqueConstraintWithCondition,\n+                    id='auth.W004',\n+                ),\n+            ]\n+            errors_custom_backend = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors_custom_backend, expected_warnings_custom_backend)\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..fc1c788 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -8,6 +9,7 @@ from unittest import mock\n \n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n+from collections import namedtuple\n from django.db.models import (\n     AutoField, Avg, BinaryField, BooleanField, Case, CharField, Count,\n     DateField, DateTimeField, DecimalField, DurationField, Exists, Expression,\n@@ -815,6 +817,31 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['min', 'max'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(min=51, max=100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+        # Test with another namedtuple structure\n+        CustomRange = namedtuple('CustomRange', ['start', 'end'])\n+        qs = Company.objects.filter(\n+            num_employees__range=CustomRange(start=10, end=50),\n+        )\n+        self.assertQuerysetEqual(\n+            qs, ['<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>', '<Company: 5060 Ltd>'], ordered=False\n+        )\n+\n+        # Test with a namedtuple that has more fields than required\n+        OverloadedRange = namedtuple('OverloadedRange', ['start', 'end', 'irrelevant'])\n+        qs = Company.objects.filter(\n+            num_employees__range=OverloadedRange(start=10, end=50, irrelevant='ignore'),\n+        )\n+        self.assertQuerysetEqual(\n+            qs, ['<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>', '<Company: 5060 Ltd>'], ordered=False\n+        )\n+\n     def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..a0a959f 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -23,6 +23,7 @@ from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n@@ -1867,7 +1868,39 @@ class ArgumentOrder(AdminScriptTestCase):\n         )\n \n \n-@override_settings(ROOT_URLCONF='admin_scripts.urls')\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_main_py(self):\n+        \"\"\"\n+        When the program name is '__main__.py', it's correctly set to 'python -m django'.\n+        \"\"\"\n+        args = ['help']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['python -m django'] + args)\n+        self.assertIn('usage: python -m django help', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_custom_argv(self):\n+        \"\"\"\n+        Custom argv is used for the program name, instead of default sys.argv.\n+        \"\"\"\n+        args = ['help', 'runserver']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            execute_from_command_line(['custom-admin'] + args)\n+        self.assertIn('usage: custom-admin runserver', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n \n     available_apps = [\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..4782cba 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -145,8 +146,22 @@ class DateFormatTests(SimpleTestCase):\n \n         # Ticket #16924 -- We don't need timezone support to test this\n         self.assertEqual(dateformat.format(aware_dt, 'O'), '-0330')\n-\n-    def test_invalid_time_format_specifiers(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (123, '23'),\n+            (999, '99'),\n+            (19, '19'),\n+            (0, '00'),  # Edge case: year 0 should be formatted as '00'\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         my_birthday = date(1984, 8, 7)\n \n         for specifier in ['a', 'A', 'f', 'g', 'G', 'h', 'H', 'i', 'P', 'r', 's', 'u']:\n@@ -164,4 +179,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..f89a99e 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1012,6 +1012,24 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             widget.render('name', value, {'id': 'id_password'}),\n             \"\"\"\n             <div id=\"id_password\">\n+\n+    def test_readonly_password_hash_field_is_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n+\n+    def test_readonly_password_hash_field_bound_data(self):\n+        field = ReadOnlyPasswordHashField()\n+        initial = 'initial'\n+        data = 'newdata'\n+        self.assertEqual(field.bound_data(data, initial), initial)\n+\n+    def test_readonly_password_hash_field_has_changed_no_change(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertFalse(field.has_changed('same', 'same'))\n+\n+    def test_readonly_password_hash_field_has_changed_with_change(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertFalse(field.has_changed('initial', 'new'))\n                 <strong>algorithm</strong>: pbkdf2_sha256\n                 <strong>iterations</strong>: 100000\n                 <strong>salt</strong>: a6Pucb******\n",
  "django__django-13786": "",
  "django__django-13794": "",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..4ea002c 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -11,7 +11,12 @@ from django.db import (\n )\n from django.db.backends.base.base import BaseDatabaseWrapper\n from django.db.backends.signals import connection_created\n+import sqlite3\n+from itertools import chain\n+\n+from django.db import IntegrityError, connection, transaction\n from django.db.backends.utils import CursorWrapper\n+from .models import SQLKeywordsModel, Reporter\n from django.db.models.sql.constants import CURSOR\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n@@ -25,7 +30,26 @@ from .models import (\n )\n \n \n-class DateQuotingTest(TestCase):\n+class SQLKeywordTableNameTest(TransactionTestCase):\n+    available_apps = ['backends']\n+\n+    def setUp(self):\n+        self.r = Reporter.objects.create(first_name='John', last_name='Doe', email='john@example.com')\n+\n+    def test_check_constraints_sql_keywords(self):\n+        \"\"\"\n+        Test that using a table name that is an SQL keyword does not\n+        cause an error when checking constraints.\n+        \"\"\"\n+        with transaction.atomic():\n+            obj = SQLKeywordsModel.objects.create(reporter=self.r)\n+            obj.refresh_from_db()\n+            obj.reporter_id = 30\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n \n     def test_django_date_trunc(self):\n         \"\"\"\n",
  "django__django-13809": "",
  "django__django-13810": "",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..caf7374 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -8,6 +9,7 @@ from django.db.migrations.exceptions import (\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import TestCase, modify_settings, override_settings\n+from importlib import import_module\n \n from .test_base import MigrationTestBase\n \n@@ -512,6 +514,35 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_loading_regular_package_without__file__(self):\n+        \"\"\"\n+        Test loading of regular packages without __file__ attribute in frozen environments.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations')\n+        loader = MigrationLoader(connection)\n+        # Store original states\n+        module_file = test_module.__file__\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+        \n+        try:\n+            del test_module.__file__\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            # Restore original states\n+            test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..85019fb 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -10,6 +10,9 @@ from unittest import mock\n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n+from unittest import mock\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db.backends.sqlite3.base import Database as dbapi2\n from django.db.utils import ConnectionHandler\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n@@ -36,7 +39,12 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_39_required(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..82501e5 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -283,7 +283,27 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n \n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n-    def test_modelchoicefield(self):\n+    def test_modelchoicefield_invalid_choice_value_display(self):\n+        # Ensure ModelChoiceField includes invalid value in error message.\n+        field = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            }\n+        )\n+        # Test with an invalid choice that should return the value in the error message\n+        self.assertFormErrors(['\"invalid\" is not one of the available choices.'], field.clean, 'invalid')\n+\n+    def test_modelmultiplechoicefield_invalid_choice_value_display(self):\n+        # Ensure ModelMultipleChoiceField includes invalid value in error message.\n+        field = ModelMultipleChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            }\n+        )\n+        # Test with a list containing an invalid choice\n+        self.assertFormErrors(['\"4\" is not one of the available choices.'], field.clean, ['4'])\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n         ChoiceModel.objects.create(pk=2, name='b')\n@@ -307,4 +327,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..4fc77a5 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,10 +1,11 @@\n+\n import datetime\n from copy import deepcopy\n \n from django.core.exceptions import FieldError, MultipleObjectsReturned\n from django.db import IntegrityError, models, transaction\n from django.test import TestCase\n-from django.utils.translation import gettext_lazy\n+from django.db import models, transaction\n \n from .models import (\n     Article, Category, Child, ChildNullableParent, City, Country, District,\n@@ -549,7 +550,38 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child(self):\n+        parent = ParentStringPrimaryKey()\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        child.parent.name = 'jeff'\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_parent_before_assigning_non_auto_pk_child(self):\n+        parent = ParentStringPrimaryKey()\n+        parent.save()\n+        # A new child is assigned after the parent has been saved\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        child.parent.name = 'lisa'\n+        parent.save()  # save the updated parent again\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_unsaved_instance_with_non_auto_pk(self):\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey(name='michael')\n+            child = ChildStringPrimaryKeyParent()\n+            child.parent = parent\n+            parent.save()\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, parent.name)\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..7adb4d9 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,25 @@\n+\n+class CustomAutoFieldTests(TestCase):\n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that custom auto field properly converts the ID on create.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that custom auto field properly converts the ID on bulk_create.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n",
  "django__django-14017": "",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..97a3c59 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,15 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yield_in_post_process(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+\n+        # Run collectstatic and get stats\n+        stats = collectstatic_cmd.collect()\n+\n+        # Check that no file is yielded more than once\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..85a6e0b 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,4 +1,7 @@\n+\n \"\"\"\n+import collections.abc\n+\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n \n@@ -17,8 +20,27 @@ class OrderedSetTests(SimpleTestCase):\n     def test_init_with_iterable(self):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n-\n-    def test_remove(self):\n+    def test_reversed(self):\n+        # Test reversing a non-empty OrderedSet\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+        # Test reversing an empty OrderedSet\n+        s = reversed(OrderedSet([]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+        # Test reversing an OrderedSet with one element\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n+        # Test that reversing doesn't modify the original OrderedSet\n+        original = OrderedSet([1, 2, 3])\n+        reversed_list = list(reversed(original))\n+        self.assertEqual(list(original), [1, 2, 3])\n+        self.assertEqual(reversed_list, [3, 2, 1])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..e679c07 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n@@ -230,7 +231,23 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n-    def test_reverse_meta_ordering_pure(self):\n+    def test_meta_ordering_exclusion_from_group_by(self):\n+        \"\"\"\n+        Ensure that fields specified in Meta.ordering are not erroneously\n+        included in GROUP BY clauses.\n+        \"\"\"\n+        # Arrange: set up authors for test data.\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+\n+        # Act: perform an aggregation query.\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+\n+        # Assert: Expect correct aggregation without Meta.ordering fields in GROUP BY\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n         Article.objects.create(\n             headline='Article 5',\n             pub_date=datetime(2005, 7, 30),\n@@ -483,4 +500,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..e0fb708 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -829,7 +829,7 @@ class BasicExpressionsTests(TestCase):\n         self.gmbh.point_of_contact = self.max\n         self.gmbh.save()\n         tests = [\n-            Exists(is_poc) & Q(),\n+            Exists(is_poc) & Q(),  # Test combining Exists with empty Q\n             Q() & Exists(is_poc),\n             Exists(is_poc) | Q(),\n             Q() | Exists(is_poc),\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..ca45149 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -66,7 +67,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+        \n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+        \n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +103,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+        \n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+        \n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..6a6f54d 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -167,6 +167,14 @@ class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main, '__spec__': mock.Mock(parent='utils_tests.test_module.main_module')})\n+    @mock.patch('sys.argv', ['-m', 'utils_tests.test_module.main_module', 'runserver'])\n+    def test_run_as_dotted_non_package_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver']\n+        )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -176,6 +184,14 @@ class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': test_main})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main, '__spec__': mock.Mock(parent='utils_tests.test_module.main_module')})\n+    @mock.patch('sys.argv', ['-m', 'utils_tests.test_module.main_module', 'runserver'])\n+    def test_run_as_dotted_non_package_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver']\n+        )\n     def test_run_as_non_django_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -191,6 +207,14 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main, '__spec__': mock.Mock(parent='utils_tests.test_module.main_module')})\n+    @mock.patch('sys.argv', ['-m', 'utils_tests.test_module.main_module', 'runserver'])\n+    def test_run_as_dotted_non_package_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver']\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n@@ -202,6 +226,14 @@ class TestChildArguments(SimpleTestCase):\n                 )\n \n     @mock.patch('sys.warnoptions', [])\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main, '__spec__': mock.Mock(parent='utils_tests.test_module.main_module')})\n+    @mock.patch('sys.argv', ['-m', 'utils_tests.test_module.main_module', 'runserver'])\n+    def test_run_as_dotted_non_package_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver']\n+        )\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             script_path = Path(tmpdir) / 'django-admin-script.py'\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..139ce2b 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,6 +226,13 @@ TEST_DATA = [\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n+    # Newlines, carriage returns, and tabs not accepted in URLs\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..033eb9b 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1527,7 +1527,26 @@ class AggregationTests(TestCase):\n \n \n class JoinPromotionTests(TestCase):\n-    def test_ticket_21150(self):\n+    def test_q_object_or_issue(self):\n+        # Setup: Create necessary test data\n+        author1 = Author.objects.create(name='Author 1')\n+        author2 = Author.objects.create(name='Author 2')\n+\n+        book1 = Book.objects.create(title='Book 1')\n+        book1.authors.add(author1)\n+        \n+        book2 = Book.objects.create(title='Book 2')  # No authors\n+\n+        # Annotate with the count of authors\n+        queryset = Book.objects.annotate(authors_count=Count('authors'))\n+\n+        # Perform the filtering using Q objects with OR\n+        books = queryset.filter(\n+            Q(authors__in=[author1, author2]) | Q(authors_count=0)\n+        ).distinct()\n+\n+        # Validate that the query returns the books correctly\n+        self.assertEqual(set(books), {book1, book2})\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n         qs = Charlie.objects.select_related('alfa').annotate(Count('bravo__charlie'))\n",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..d568514 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -89,6 +89,38 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_non_deprecated_keys_preferred(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_charset(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 17aecdd..e268d24 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -454,6 +454,21 @@ class TestCollectionManifestStorage(TestHashedFiles, CollectionTestCase):\n         )\n \n \n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+@override_settings(STATICFILES_STORAGE='staticfiles_tests.test_storage.NoPostProcessReplacedPathStorage')\n+class TestNoPostProcessReplacedPaths(CollectionTestCase):\n+    def test_no_post_process_replaced_paths(self):\n+        stdout = StringIO()\n+        call_command('collectstatic', verbosity=1, interactive=False, stdout=stdout)\n+        self.assertIn('post-processed', stdout.getvalue())\n+\n+from io import StringIO\n+from django.test import override_settings\n+from django.core.management import call_command\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+\n @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoneHashStorage')\n class TestCollectionNoneHashStorage(CollectionTestCase):\n     hashed_file_path = hashed_file_path\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..ce7913d 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -653,6 +653,43 @@ class ExecutorTests(MigrationTestBase):\n             recorder.applied_migrations(),\n         )\n \n+    def test_unapply_squashed_keeps_replaced_migrations(self):\n+        \"\"\"\n+        Test that unapplying a squashed migration does not mark\n+        the replaced migrations as unapplied if they still exist.\n+        \"\"\"\n+        self.recorder.record_applied(\"migrations\", \"0001_initial\")\n+        self.recorder.record_applied(\"migrations\", \"0002_second\")\n+        executor = MigrationExecutor(connection)\n+\n+        # Apply squashed migration\n+        executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n+        try:\n+            # Ensure the squashed migration is applied\n+            self.assertIn(\n+                (\"migrations\", \"0001_squashed_0002\"),\n+                self.recorder.applied_migrations(),\n+            )\n+            # Unapply the squashed migration\n+            executor.migrate([(\"migrations\", None)])\n+\n+            # Ensure the squashed migration is unapplied\n+            self.assertNotIn(\n+                (\"migrations\", \"0001_squashed_0002\"),\n+                self.recorder.applied_migrations(),\n+            )\n+            # Ensure replaced migrations are still marked as applied\n+            self.assertIn(\n+                (\"migrations\", \"0001_initial\"),\n+                self.recorder.applied_migrations(),\n+            )\n+            self.assertIn(\n+                (\"migrations\", \"0002_second\"),\n+                self.recorder.applied_migrations(),\n+            )\n+        finally:\n+            # Cleanup\n+            self.recorder.flush()\n     # When the feature is False, the operation and the record won't be\n     # performed in a transaction and the test will systematically pass.\n     @skipUnlessDBFeature('can_rollback_ddl')\n",
  "django__django-14539": "",
  "django__django-14559": "",
  "django__django-14608": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 0b8d2fa..dc159d0 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -3350,7 +3350,22 @@ class AdminViewListEditable(TestCase):\n         self.assertIsInstance(non_form_errors, ErrorList)\n         self.assertEqual(str(non_form_errors), str(ErrorList([\"Grace is not a Zombie\"])))\n \n-    def test_list_editable_ordering(self):\n+    def test_non_form_errors_class(self):\n+        # Ensure the 'nonform' CSS class is added for non-form errors\n+        data = {\n+            \"form-TOTAL_FORMS\": \"1\",\n+            \"form-INITIAL_FORMS\": \"1\",\n+            \"form-MAX_NUM_FORMS\": \"0\",\n+\n+            \"form-0-id\": str(self.per2.pk),\n+            \"form-0-alive\": \"1\",\n+            \"form-0-gender\": \"2\",\n+\n+            \"_save\": \"Save\",\n+        }\n+        response = self.client.post(reverse('admin:admin_views_person_changelist'), data)\n+        non_form_errors = response.context['cl'].formset.non_form_errors()\n+        self.assertIn('nonform', str(non_form_errors))  # Check if 'nonform' class is in error list\n         collector = Collector.objects.create(id=1, name=\"Frederick Clegg\")\n \n         Category.objects.create(id=1, order=1, collector=collector)\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..47122ac 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,6 +2129,40 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n+    def test_datetime_clean_initial_callable_enabled(self):\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=False)\n+\n+        form = DateTimeForm({})\n+        self.assertEqual(form.errors, {})\n+        self.assertEqual(form.cleaned_data, {'dt': now})\n+\n+    def test_datetime_clean_initial_callable_with_bound_field_check(self):\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        self.assertEqual(form.errors, {})\n+        cleaned = form.cleaned_data['dt']\n+        bf = form['dt']\n+        self.assertEqual(cleaned, bf.initial)\n+        self.assertEqual(form.cleaned_data, {'dt': bf.initial})\n+\n+    def test_datetime_no_change_callable_with_bound_field_check(self):\n+        future_date = datetime.datetime(2026, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: future_date, disabled=False)\n+\n+        form = DateTimeForm({'dt': '2026-10-25 14:30:45'})\n+        bf = form['dt']\n+        self.assertFalse(bf.form.has_changed())\n+        self.assertEqual(form.changed_data, [])\n+\n     def test_help_text(self):\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..059687b 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -3,14 +3,16 @@ from operator import attrgetter\n \n from django.db import IntegrityError\n from django.test import TestCase\n+from django.core.checks import Error\n+from django.db import models\n \n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n     Invitation, Membership, Person, PersonSelfRefM2M, Recipe, RecipeIngredient,\n     Relationship, SymmetricalFriendship,\n+    ManyToManyModel, ProxyParent, Parent, Child\n )\n \n-\n class M2mThroughTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..0d2b306 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -8,7 +9,9 @@ from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import PermissionDenied\n from django.http import Http404\n+import datetime\n from django.test import RequestFactory, override_settings\n+from .models import Question\n from django.urls import reverse, reverse_lazy\n \n from .admin import AnswerAdmin, QuestionAdmin\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..61dc1ee 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -923,8 +923,32 @@ class StateTests(SimpleTestCase):\n             len([x for x in rendered_state.get_models() if x._meta.app_label == \"migrations\"]),\n             1,\n         )\n+    def test_real_apps_set(self):\n+        \"\"\"\n+        Tests that ProjectState.__init__ accepts a set for real_apps without raising an AssertionError.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly with a set as real_apps.\")\n+\n+    def test_real_apps_empty(self):\n+        \"\"\"\n+        Tests that ProjectState.__init__ accepts None for real_apps and defaults to an empty set.\n+        \"\"\"\n+        project_state = ProjectState(real_apps=None)\n+        self.assertEqual(project_state.real_apps, set())\n+\n+    def test_real_apps_other_iterables(self):\n+        \"\"\"\n+        Tests that ProjectState.__init__ raises an AssertionError when other iterables,\n+        like a list or tuple, are passed as real_apps.\n+        \"\"\"\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n \n-    def test_ignore_order_wrt(self):\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=('contenttypes',))\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n         making from existing models.\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..db79b6f 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -195,6 +195,18 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_passed_to_child_arguments(self):\n+        \"\"\"\n+        Test if the -X options are correctly passed to the child process arguments.\n+        \"\"\"\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n@@ -235,6 +247,18 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_passed_to_child_arguments(self):\n+        \"\"\"\n+        Test if the -X options are correctly passed to the child process arguments.\n+        \"\"\"\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..c019642 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -199,7 +199,29 @@ class MethodDecoratorTests(SimpleTestCase):\n     \"\"\"\n     Tests for method_decorator\n     \"\"\"\n-    def test_preserve_signature(self):\n+    from functools import wraps\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n         class Test:\n             @simple_dec_m\n             def say(self, arg):\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..34275d4 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5131,6 +5131,41 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         )\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test that ForeignKey readonly fields link correctly in the default admin site.\n+        \"\"\"\n+        # Create the objects\n+        book = Book.objects.create(name='Default Admin Site Book')\n+        chapter = Chapter.objects.create(title='Default Chapter', content='Content', book=book)\n+        # Fetch the change form view\n+        response = self.client.get(reverse('admin:admin_views_chapter_change', args=(chapter.pk,)))\n+        # Expected URL\n+        book_url = reverse('admin:admin_views_book_change', args=(quote(book.pk),))\n+        # Verify if the ForeignKey link is correct\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">Default Admin Site Book</a></div>' % book_url,\n+            html=True\n+        )\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test that ForeignKey readonly fields link correctly in the custom admin site.\n+        \"\"\"\n+        # Create the objects\n+        book = Book.objects.create(name='Custom Admin Site Book')\n+        chapter = Chapter.objects.create(title='Custom Chapter', content='Content', book=book)\n+        # Fetch the change form view using the custom admin site\n+        response = self.client.get(reverse('namespaced_admin:admin_views_chapter_change', args=(chapter.pk,)))\n+        # Expected URL\n+        book_url = reverse('namespaced_admin:admin_views_book_change', args=(quote(book.pk),))\n+        # Verify if the ForeignKey link is correct\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">Custom Admin Site Book</a></div>' % book_url,\n+            html=True\n+        )\n \n     def test_readonly_manytomany_backwards_ref(self):\n         \"\"\"\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..f17ae4b 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,27 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        # Create ModelChoiceIteratorValue instances\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+\n+        # Test that objects can be hashed and compared correctly\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_choice_value_in_dict(self):\n+        # Test that ModelChoiceIteratorValue can be used as dict keys\n+        choice_dict = {ModelChoiceIteratorValue(self.c1.pk, self.c1): 'first',\n+                       ModelChoiceIteratorValue(self.c2.pk, self.c2): 'second'}\n+        self.assertEqual(choice_dict[ModelChoiceIteratorValue(self.c1.pk, None)], 'first')\n+        self.assertEqual(choice_dict[ModelChoiceIteratorValue(self.c2.pk, None)], 'second')\n+\n+    def test_choice_value_in_set(self):\n+        # Test that ModelChoiceIteratorValue can be used in sets\n+        choice_set = {ModelChoiceIteratorValue(self.c1.pk, self.c1), ModelChoiceIteratorValue(self.c2.pk, self.c2)}\n+        self.assertIn(ModelChoiceIteratorValue(self.c1.pk, None), choice_set)\n+        self.assertIn(ModelChoiceIteratorValue(self.c2.pk, None), choice_set)\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..dd36169 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,40 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop(self):\n+        # Define the app label for the test\n+        app_label = 'test_rmwdbtn'\n+        \n+        # Apply initial migrations to create the testing environment\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        \n+        # Clone the project state to represent post-operation state\n+        new_state = project_state.clone()\n+        \n+        # Create a RenameModel operation\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        \n+        # Move the state forward to apply the rename in a logical sense\n+        operation.state_forwards(app_label, new_state)\n+        \n+        # Verify there are no database queries executed during database_forwards\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+                \n+        # Verify there are no database queries executed during database_backwards\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "diff --git a/tests/admin_changelist/admin.py b/tests/admin_changelist/admin.py\nindex 580e58f..dbb4cfc 100644\n--- a/tests/admin_changelist/admin.py\n+++ b/tests/admin_changelist/admin.py\n@@ -1,4 +1,7 @@\n+\n from django.contrib import admin\n+from django.db import connection\n+from django.test.utils import CaptureQueriesContext\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.core.paginator import Paginator\n",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex b862331..09a3b16 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -173,7 +173,30 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, 'test_id'), expected)\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_without_id(self):\n+        # Test json_script when the element_id is omitted.\n+        data = {\"key\": \"value\"}\n+        expected_output = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+        self.assertEqual(json_script(data), expected_output)\n+\n+    def test_json_script_with_lazy_string(self):\n+        # Test json_script with a lazy string object.\n+        lazy_key = lazystr('lazy_key')\n+        data = {lazy_key: 'value'}\n+        expected_output = (\n+            '<script id=\"test_id\" type=\"application/json\">'\n+            '{\"lazy_key\":\"value\"}</script>'\n+        )\n+        self.assertEqual(json_script(data, 'test_id'), expected_output)\n+\n+    def test_json_script_escaping(self):\n+        # Test json_script ensuring proper escaping with no id.\n+        data = '<script>alert(\"test\")</script>'\n+        expected_output = (\n+            '<script type=\"application/json\">'\n+            '\"\\\\u003Cscript\\\\u003Ealert(\\\\\"test\\\\\")\\\\u003C/script\\\\u003E\"</script>'\n+        )\n+        self.assertEqual(json_script(data), expected_output)\n         items = (\n             ('http://\u00f6\u00e4\u00fc.com/', 'http://xn--4ca9at.com/'),\n             ('http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/', 'http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/'),\n@@ -276,4 +299,4 @@ class TestUtilsHtml(SimpleTestCase):\n         )\n         for value in tests:\n             with self.subTest(value=value):\n-                self.assertEqual(urlize(value), value)\n+                self.assertEqual(urlize(value), value)\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..a87c863 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2835,6 +2835,54 @@ class AutodetectorTests(TestCase):\n                 )\n \n \n+import unittest\n+from django.db import models\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.state import ModelState, ProjectState\n+from django.test import TestCase\n+\n+\n+class CustomForeignKeyTests(TestCase):\n+\n+    def test_custom_foreign_key_with_hardcoded_reference(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.HardcodedModel'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        before_state = ProjectState()\n+        before_state.add_model(ModelState('testapp', 'HardcodedModel', []))\n+\n+        after_state = ProjectState()\n+        after_state.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after_state.add_model(ModelState(\n+            'testapp', \n+            'TestModel', \n+            [('custom', HardcodedForeignKey(on_delete=models.CASCADE))]\n+        ))\n+\n+        autodetector = MigrationAutodetector(before=before_state, after=after_state)\n+        changes = autodetector._detect_changes()\n+\n+        # Assert that exactly one migration operation has been created\n+        self.assertEqual(len(changes['testapp']), 1)\n+\n+        # Check the type of operation to ensure it's correct\n+        operation = changes['testapp'][0].operations[0]\n+        self.assertEqual(operation.name, 'TestModel')\n+        self.assertEqual(operation.options['managed'], True)\n+        self.assertEqual(len(operation.fields), 1)\n+        self.assertEqual(operation.fields[0][0], 'custom')\n+        self.assertIsInstance(operation.fields[0][1], HardcodedForeignKey)\n+\n+        # Ensure migration does not cause KeyError with `to` argument \n+        self.assertNotIn('to', operation.fields[0][1].deconstruct()[3])\n+\n class MigrationSuggestNameTests(SimpleTestCase):\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n",
  "django__django-15127": "",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..f4248ef 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -30,7 +30,7 @@ from .models import (\n     SharedConnection, SimpleCategory, SingleObject, SpecialCategory, Staff,\n     StaffUser, Student, Tag, Task, Teacher, Ticket21203Child,\n     Ticket21203Parent, Ticket23605A, Ticket23605B, Ticket23605C, TvChef, Valid,\n-    X,\n+    BaseUser, Task, X,\n )\n \n \n@@ -2095,13 +2095,51 @@ class QuerySetBitwiseOperationTests(TestCase):\n         cls.room_3 = Classroom.objects.create(school=cls.school, has_blackboard=True, name='Room 3')\n         cls.room_4 = Classroom.objects.create(school=cls.school, has_blackboard=False, name='Room 4')\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    def test_conflicting_aliases_during_combine(self):\n+        # Creating objects\n+        base_user1 = BaseUser.objects.create()\n+        base_user2 = BaseUser.objects.create()\n+\n+        task = Task.objects.create(owner=base_user2, creator=base_user2)\n+\n+        # QuerySet qs1 gets all BaseUsers\n+        qs1 = base_user1._meta.default_manager.filter(task__owner__in=task._meta.default_manager.all())\n+        # QuerySet qs2 filters BaseUsers with specific conditions creating conflicting aliases\n+        qs2 = BaseUser.objects.filter(Q(owner__task__in=task._meta.default_manager.all()) | Q(creator__task__in=task._meta.default_manager.all()))\n+\n+        # Performing bitwise OR operation\n+        try:\n+            result1 = qs1 | qs2\n+            result2 = qs2 | qs1\n+            # The test case should ensure the operation does not raise an AssertionError.\n+            self.assertCountEqual(result1, result2, \"The OR operation on QuerySets should not raise AssertionError.\")\n+        except AssertionError as e:\n+            self.fail(f\"Test failed due to an AssertionError: {str(e)}\")\n     def test_or_with_rhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)\n         qs2 = Classroom.objects.filter(has_blackboard=False)[:1]\n         self.assertCountEqual(qs1 | qs2, [self.room_1, self.room_2, self.room_3])\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    def test_conflicting_aliases_during_combine(self):\n+        # Creating objects\n+        base_user1 = BaseUser.objects.create()\n+        base_user2 = BaseUser.objects.create()\n+\n+        task = Task.objects.create(owner=base_user2, creator=base_user2)\n+\n+        # QuerySet qs1 gets all BaseUsers\n+        qs1 = base_user1._meta.default_manager.filter(task__owner__in=task._meta.default_manager.all())\n+        # QuerySet qs2 filters BaseUsers with specific conditions creating conflicting aliases\n+        qs2 = BaseUser.objects.filter(Q(owner__task__in=task._meta.default_manager.all()) | Q(creator__task__in=task._meta.default_manager.all()))\n+\n+        # Performing bitwise OR operation\n+        try:\n+            result1 = qs1 | qs2\n+            result2 = qs2 | qs1\n+            # The test case should ensure the operation does not raise an AssertionError.\n+            self.assertCountEqual(result1, result2, \"The OR operation on QuerySets should not raise AssertionError.\")\n+        except AssertionError as e:\n+            self.fail(f\"Test failed due to an AssertionError: {str(e)}\")\n     def test_or_with_lhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)[:1]\n         qs2 = Classroom.objects.filter(has_blackboard=False)\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..a0913d1 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1775,6 +1775,20 @@ class ValueTests(TestCase):\n         self.assertEqual(len(kwargs), 1)\n         self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n \n+    def test_deconstruct_f_expression(self):\n+        f_expression = F('my_field')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('my_field',))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_value_expression(self):\n+        value = Value('name')\n+        path, args, kwargs = value.deconstruct()\n+        self.assertEqual(path, 'django.db.models.expressions.Value')\n+        self.assertEqual(args, (value.value,))\n+        self.assertEqual(kwargs, {})\n+\n     def test_repr(self):\n         tests = [\n             (None, 'Value(None)'),\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..be2911a 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1762,7 +1762,28 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'newfield2')},\n         )\n \n-    def test_proxy(self):\n+    def test_optimize_alter_foo_together(self):\n+        \"\"\"\n+        Tests that multiple AlterFooTogether operations are optimized into one.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together_5], [self.author_empty, self.book_foo_together_6]\n+        )\n+        # Ensure only one migration is produced.\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        # Check that changes in `index_together` and `unique_together` are optimized.\n+        self.assertOperationTypes(changes, \"otherapp\", 0, [\n+            \"AlterUniqueTogether\", \n+            \"AlterIndexTogether\"\n+        ])\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 0, name='book',\n+            unique_together={('title', 'author')},\n+        )\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 1, name='book',\n+            index_together={('title', 'author')},\n+        )\n         \"\"\"The autodetector correctly deals with proxy models.\"\"\"\n         # First, we test adding a proxy model\n         changes = self.get_changes([self.author_empty], [self.author_empty, self.author_proxy])\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..919c8d6 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1852,8 +1852,31 @@ class ValueTests(TestCase):\n         with self.assertRaisesMessage(FieldError, msg):\n             Value(object()).output_field\n \n-\n-class ExistsTests(TestCase):\n+    def test_resolve_output_field_no_max_length_validator_on_charfield(self):\n+        \"\"\"Ensure CharField does not have a MaxLengthValidator if max_length is None.\"\"\"\n+        test_values = [\n+            'example_string',  # Typical string value\n+            123,               # Integer\n+            None,              # NoneType\n+            3.14,              # Float\n+            b'binary',         # Binary data\n+            uuid.uuid4(),      # UUID\n+        ]\n+        for value in test_values:\n+            with self.subTest(value=value):\n+                field = Value(value)._resolve_output_field()\n+                if isinstance(field, fields.CharField):\n+                    # Ensure max_length is None to verify the condition\n+                    self.assertIsNone(field.max_length)\n+                    # Ensure that a MaxLengthValidator is not in the validators list\n+                    self.assertFalse(\n+                        any(isinstance(validator, validators.MaxLengthValidator) for validator in field.validators)\n+                    )\n+                # No exception should be raised during cleaning\n+                try:\n+                    field.clean(value, model_instance=None)\n+                except TypeError:\n+                    self.fail(f'Cleaning operation raised TypeError for value: {value}')\n     def test_optimizations(self):\n         with CaptureQueriesContext(connection) as context:\n             list(Experiment.objects.values(exists=Exists(\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..e52d468 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -624,6 +624,24 @@ class SchemaTests(TransactionTestCase):\n         # Make sure the values were transformed correctly\n         self.assertEqual(Author.objects.extra(where=[\"thing = 1\"]).count(), 2)\n \n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField doesn't crash on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        \n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        \n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])\n+\n     def test_add_field_binary(self):\n         \"\"\"\n         Tests binary fields get a sane default (#22851)\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..c6ae8d1 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -90,7 +90,39 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertIsNotNone(f1)\n         self.assertNotIn(f2, (None, 1, ''))\n \n-    def test_field_instance_is_picklable(self):\n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_hash_immutability_with_multiple_fields(self):\n+        field1 = models.CharField(max_length=255)\n+        field2 = models.IntegerField()\n+        initial_hash_field1 = hash(field1)\n+        initial_hash_field2 = hash(field2)\n+\n+        class AnotherModel(models.Model):\n+            name = field1\n+            count = field2\n+\n+        self.assertEqual(initial_hash_field1, hash(field1))\n+        self.assertEqual(initial_hash_field2, hash(field2))\n+\n+    def test_hash_with_same_field_used_multiple_times(self):\n+        field = models.BooleanField()\n+        initial_hash = hash(field)\n+\n+        class DuplicateFieldModel(models.Model):\n+            active = field\n+            verified = field\n+\n+        self.assertEqual(initial_hash, hash(field))\n+\n+    # Additional test cases can be added here if required.\n         \"\"\"Field instances can be pickled.\"\"\"\n         field = models.Field(max_length=100, default='a string')\n         # Must be picklable with this cached property populated (#28188).\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..c24bbbb 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,6 +204,18 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n+    def test_f_expression(self):\n+        notes = [\n+            Note.objects.create(note='test_note', misc='test_misc')\n+            for _ in range(10)\n+        ]\n+        # Assign F expressions to the misc field\n+        for note in notes:\n+            note.misc = F('note')\n+        Note.objects.bulk_update(notes, ['misc'])\n+        # Ensure all updated notes have the expected 'note' value in 'misc'\n+        self.assertCountEqual(Note.objects.filter(misc='test_note'), notes)\n+\n     def test_field_references(self):\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n",
  "django__django-15380": "",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..a223e1c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,7 +1906,45 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n-class FieldTransformTests(TestCase):\n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+from .models import Manager\n+\n+class ExistSubqueryTests(TestCase):\n+    \n+    def test_negated_empty_exists(self):\n+        # Original Test: Verifying that negating an Exists([]) doesn't vanish the WHERE clause.\n+        manager = Manager.objects.create(name='manager1')\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_non_negated_empty_exists(self):\n+        # New Test: Ensure even non-negated Exists([]) with a filter behaves correctly.\n+        manager = Manager.objects.create(name='manager2')\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [])\n+    \n+    def test_negated_exists_non_empty_queryset(self):\n+        # New Test: Exists with non-empty queryset should respect negation.\n+        manager = Manager.objects.create(name='manager3')\n+        other_manager = Manager.objects.create(name='other')\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.filter(name='other')) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_exists_with_filled_queryset(self):\n+        # New Test: Positive case for regular Exists with a non-empty queryset.\n+        manager = Manager.objects.create(name='manager4')\n+        other_manager = Manager.objects.create(name='other')\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.filter(name='other')) & Q(pk=other_manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [other_manager])\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..4ef3e2c 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -9,6 +9,23 @@ try:\n except ImportError:\n     from backports import zoneinfo\n \n+class TestEmptyLabel(TestCase):\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            formfield_overrides = {\n+                ForeignKey: {\"empty_label\": \"Custom empty label\"},\n+            }\n+\n+        ma = MyModelAdmin(Inventory, admin.site)  # Assuming Inventory model has a FK to 'parent'\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n+from django.contrib import admin\n+from django.test import TestCase\n+from .models import Inventory  # Assuming Inventory model\n+from django.db.models import ForeignKey\n+\n from django import forms\n from django.conf import settings\n from django.contrib import admin\n",
  "django__django-15499": "",
  "django__django-15525": "diff --git a/tests/fixtures_regress/models.py b/tests/fixtures_regress/models.py\nindex 6245d2f..5fe3d3b 100644\n--- a/tests/fixtures_regress/models.py\n+++ b/tests/fixtures_regress/models.py\n@@ -147,6 +147,39 @@ class Book(models.Model):\n         )\n \n \n+class PersonManager(models.Manager):\n+    def get_by_natural_key(self, name):\n+        return self.get(name=name)\n+\n+\n+class Person(models.Model):\n+    name = models.CharField(max_length=255, unique=True)\n+    objects = PersonManager()\n+\n+    def natural_key(self):\n+        return (self.name,)\n+\n+\n+class NaturalKeyWithFKDependencyManager(models.Manager):\n+    def get_by_natural_key(self, name, author):\n+        return self.get(name=name, author__name=author)\n+\n+\n+class NaturalKeyWithFKDependency(models.Model):\n+    name = models.CharField(max_length=255)\n+    author = models.ForeignKey(Person, models.CASCADE)\n+    \n+    objects = NaturalKeyWithFKDependencyManager()\n+\n+    class Meta:\n+        unique_together = [\"name\", \"author\"]\n+\n+    def natural_key(self):\n+        return (self.name,) + self.author.natural_key()\n+\n+    natural_key.dependencies = [\"fixtures_regress.Person\"]\n+\n+\n class NKManager(models.Manager):\n     def get_by_natural_key(self, data):\n         return self.get(data=data)\n",
  "django__django-15561": "",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..dd8f133 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -324,6 +324,26 @@ class LookupTests(TestCase):\n             # getting the lookups again should re-cache\n             self.assertIn(\"exactly\", field.get_lookups())\n \n+    def test_unregister_lookup_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n+        # Unregister the lookup and verify cache is cleared\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+        field = Article._meta.get_field(\"author\")\n+\n+        # clear and re-cache\n+        field.get_lookups.cache_clear()\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+\n+        # registration should bust the cache\n+        with register_lookup(models.ForeignObject, Exactly):\n+            # getting the lookups again should re-cache\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n \n class BilateralTransformTests(TestCase):\n     def test_bilateral_upper(self):\n",
  "django__django-15572": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 188dca4..46a26a8 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -76,7 +76,33 @@ class TemplateReloadTests(SimpleTestCase):\n             },\n         )\n \n-    @mock.patch(\"django.template.loaders.base.Loader.reset\")\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_empty_path(self):\n+        # Should return an empty set if there is only an empty string in DIRS.\n+        self.assertEqual(autoreload.get_template_directories(), set())\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\", str(ROOT) + \"/absolute_str\", \"template_tests/relative_str\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_handles_mixed_empty_and_valid_paths(self):\n+        # Should return paths excluding the empty string effectively.\n+        expected_dirs = {\n+            ROOT / \"absolute_str\",\n+            ROOT / \"template_tests/relative_str\",\n+        }\n+        self.assertSetEqual(autoreload.get_template_directories(), expected_dirs)\n     def test_reset_all_loaders(self, mock_reset):\n         autoreload.reset_loaders()\n         self.assertEqual(mock_reset.call_count, 2)\n",
  "django__django-15731": "",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..2378733 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,6 +1,8 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n+from django.utils.translation import gettext_lazy\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n \n@@ -74,6 +76,16 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n+    def test_get_format_lazy_format(self):\n+        # Ensure get_format can handle lazy strings for DATE_FORMAT\n+        self.assertEqual(get_format(gettext_lazy(\"DATE_FORMAT\")), \"N j, Y\")\n+\n+    @setup({\"datelazy\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy(self):\n+        # Ensure rendering with lazy date format works\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n+\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..100fa39 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -390,7 +390,17 @@ class ProxyModelTests(TestCase):\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n \n-    def test_proxy_load_from_fixture(self):\n+    def test_select_related_only_on_proxy_model(self):\n+        # Setup initial data\n+        proxy_user = ProxyCustomModel.objects.create(name=\"Test User\")\n+        another_instance = AnotherModel.objects.create(custom=proxy_user)\n+\n+        # Use select_related with only on proxy\n+        queryset = AnotherModel.objects.select_related('custom').only('custom__name')\n+\n+        # Fetch the object to ensure it doesn't crash\n+        result = queryset.get()\n+        self.assertEqual(result.custom.name, \"Test User\")\n         management.call_command(\"loaddata\", \"mypeople.json\", verbosity=0)\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..887ae95 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,7 +157,11 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n-    @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n+    def test_parameters_before_dbname(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n \n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..d320d92 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -30,6 +30,7 @@ class FloatformatTests(SimpleTestCase):\n         )\n         self.assertEqual(output, \"1.4 1.4\")\n \n+from decimal import Decimal\n \n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..b4ca83d 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -405,6 +405,16 @@ class CaseExpressionTests(TestCase):\n             [1, 4, 3, 3, 3, 2, 2],\n         )\n \n+    def test_annotate_with_negated_empty_q_object(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n     def test_annotate_with_empty_when(self):\n         objects = CaseTestModel.objects.annotate(\n             selected=Case(\n@@ -412,6 +422,16 @@ class CaseExpressionTests(TestCase):\n                 default=Value(\"not selected\"),\n             )\n         )\n+\n+    def test_annotate_with_negated_empty_q_object(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..d9d1f61 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,8 +1,10 @@\n+\n # Unittests for fixtures.\n import json\n import os\n import re\n-from io import StringIO\n+from django.utils._os import upath\n+from django.utils.functional import empty\n from pathlib import Path\n \n from django.core import management, serializers\n@@ -556,7 +558,21 @@ class TestFixtures(TestCase):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n     @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, \"fixtures\")])\n-    def test_fixture_dirs_with_default_fixture_path(self):\n+    def test_duplicate_fixture_dirs_with_path_instances(self):\n+        \"\"\"\n+        Duplicate entries in FIXTURE_DIRS should raise an ImproperlyConfigured\n+        error, even when the entries are of type pathlib.Path.\n+        \"\"\"\n+        fixture_path = Path(_cur_dir) / \"fixtures\"\n+        settings = {\n+            'FIXTURE_DIRS': [fixture_path, fixture_path]  # Intentional duplicate\n+        }\n+        msg = (\n+            \"'%s' appears multiple times in settings.FIXTURE_DIRS.\"\n+            % (upath(fixture_path),)\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n         \"\"\"\n         settings.FIXTURE_DIRS cannot contain a default fixtures directory\n         for application (app/fixtures) in order to avoid repeated fixture loading.\n",
  "django__django-16032": "",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..94746a5 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2406,6 +2406,10 @@ class CombinableTests(SimpleTestCase):\n             object() ^ Combinable()\n \n \n+from django.db.models import IntegerField, DecimalField, FloatField, AutoField, Expression\n+from django.db.models.expressions import CombinedExpression, Combinable\n+from django.test import SimpleTestCase\n+\n class CombinedExpressionTests(SimpleTestCase):\n     def test_resolve_output_field_number(self):\n         tests = [\n@@ -2416,7 +2420,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..5d6e7c4 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -23,7 +24,9 @@ from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n from django.test import TestCase, override_settings\n from django.test.client import RequestFactory\n+from unittest import mock\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n+from django.db import DatabaseError\n from django.urls import reverse\n from django.utils import formats\n \n@@ -400,6 +403,53 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n     def test_custom_paginator(self):\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..c78c442 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2388,6 +2388,24 @@ class MakeMigrationsTests(MigrationTestBase):\n \n     def test_makemigrations_check(self):\n         \"\"\"\n+        makemigrations --check should exit with a zero status when there are \n+        no changes requiring migrations, and exit with a non-zero status when \n+        there are pending changes.\n+        \"\"\"\n+        no_changes_output = io.StringIO()\n+        with self.temporary_migration_module():\n+            # Simulate no changes in the migrations\n+            call_command(\"makemigrations\", \"--check\", \"migrations\", stdout=no_changes_output, verbosity=0)\n+            self.assertIn(\"No changes detected\", no_changes_output.getvalue())\n+\n+        with self.temporary_migration_module():\n+            # Simulate changes in the migrations that would require a migration\n+            with open(os.path.join(self.migration_dir, '__init__.py'), 'a') as f:\n+                f.write('# Change to simulate pending migration\\n')\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            self.assertNotEqual(cm.exception.code, 0)\n+        \"\"\"\n         makemigrations --check should exit with a non-zero status when\n         there are changes to an app requiring migrations.\n         \"\"\"\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..2fb0e73 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,10 +1,14 @@\n+\n import asyncio\n import os\n from unittest import mock\n \n from asgiref.sync import async_to_sync\n \n+import asyncio\n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n+from django.http import HttpResponseNotAllowed\n+from django.test import RequestFactory\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n from django.http import HttpResponse\n from django.test import SimpleTestCase\n@@ -119,7 +123,24 @@ class ViewTests(SimpleTestCase):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n-    def test_base_view_class_is_sync(self):\n+    def test_http_method_not_allowed_responds_correctly(self):\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.get(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n         sync.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..2cda630 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,4 +1,5 @@\n-import datetime\n+\n+import urllib.parse\n import re\n from unittest import mock\n \n@@ -24,7 +25,7 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n-from django.utils.translation import gettext as _\n+from django.urls import reverse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -887,7 +888,38 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n     def test_bug_19349_bound_password_field(self):\n         user = User.objects.get(username=\"testclient\")\n         form = UserChangeForm(data={}, instance=user)\n-        # When rendering the bound password field,\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_password_reset_link_with_to_field(self):\n+        \"\"\"\n+        Test that the PasswordResetForm link works correctly when accessing\n+        UserAdmin via a 'to_field' reference.\n+        \"\"\"\n+        # Create a test user\n+        user = User.objects.create_user(username=\"testuser\", password=\"testpass\")\n+\n+        # Instantiate the UserChangeForm\n+        form = UserChangeForm(instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+\n+        # Extract the link from the help text\n+        link_match = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+        self.assertIsNotNone(link_match, \"No link found in password help text.\")\n+\n+        # Create the expected password change URL\n+        expected_pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+\n+        # Join the admin URL with the extracted link to form the complete URL\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=[user.uuid],  # Using the user UUID due to to_field\n+        )\n+        full_link_url = urllib.parse.urljoin(admin_user_change_url, link_match.group(1))\n+\n+        # Assert that the full link URL matches the expected password change URL\n+        self.assertEqual(full_link_url, expected_pw_change_url)\n         # ReadOnlyPasswordHashWidget needs the initial\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n",
  "django__django-16145": "",
  "django__django-16255": "",
  "django__django-16315": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex 3559126..0c6fa56 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -13,6 +13,7 @@ from django.db.models import FileField, Value\n from django.db.models.functions import Lower\n from django.test import (\n     TestCase,\n+    models,\n     override_settings,\n     skipIfDBFeature,\n     skipUnlessDBFeature,\n@@ -32,7 +33,8 @@ from .models import (\n     Restaurant,\n     SmallAutoFieldModel,\n     State,\n-    TwoFields,\n+    TwoFields, \n+    UpsertConflict,\n     UpsertConflict,\n )\n \n@@ -760,6 +762,74 @@ class BulkCreateTests(TestCase):\n                 {\"number\": 3, \"rank\": 1, \"name\": \"Hannah\"},\n                 {\"number\": 4, \"rank\": 4, \"name\": \"Mark\"},\n             ],\n+        FieldsWithDbColumns,\n+    )\n+\n+    class FieldsWithDbColumns(models.Model):\n+        rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+        name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n+    @skipUnlessDBFeature(\n+        \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n+    )\n+    def test_update_conflicts_unique_fields_update_fields_db_column(self):\n+        FieldsWithDbColumns.objects.bulk_create(\n+            [\n+                FieldsWithDbColumns(rank=1, name=\"a\"),\n+                FieldsWithDbColumns(rank=2, name=\"b\"),\n+            ]\n+        )\n+        self.assertEqual(FieldsWithDbColumns.objects.count(), 2)\n+\n+        conflicting_objects = [\n+            FieldsWithDbColumns(rank=1, name=\"c\"),\n+            FieldsWithDbColumns(rank=2, name=\"d\"),\n+        ]\n+        FieldsWithDbColumns.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"rank\"],\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(FieldsWithDbColumns.objects.count(), 2)\n+        self.assertCountEqual(\n+            FieldsWithDbColumns.objects.values(\"rank\", \"name\"),\n+            [\n+                {\"rank\": 1, \"name\": \"c\"},\n+                {\"rank\": 2, \"name\": \"d\"},\n+            ],\n+        )\n+\n+    @skipUnlessDBFeature(\n+        \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n+    )\n+    def test_update_conflicts_mixed_case_db_column(self):\n+        # Test with mixed case column names in db_column\n+        UpsertConflict.objects.bulk_create(\n+            [\n+                UpsertConflict(number=1, rank=5, name=\"upsert\"),\n+                UpsertConflict(number=2, rank=10, name=\"update\"),\n+            ]\n+        )\n+        self.assertEqual(UpsertConflict.objects.count(), 2)\n+\n+        conflicting_upserts = [\n+            UpsertConflict(number=1, rank=7, name=\"conflict\"),\n+            UpsertConflict(number=2, rank=15, name=\"resolved\"),\n+        ]\n+        UpsertConflict.objects.bulk_create(\n+            conflicting_upserts,\n+            update_conflicts=True,\n+            unique_fields=[\"number\"],\n+            update_fields=[\"rank\", \"name\"],\n+        )\n+        self.assertEqual(UpsertConflict.objects.count(), 2)\n+        self.assertCountEqual(\n+            UpsertConflict.objects.values(\"number\", \"name\", \"rank\"),\n+            [\n+                {\"number\": 1, \"name\": \"conflict\", \"rank\": 7},\n+                {\"number\": 2, \"name\": \"resolved\", \"rank\": 15},\n+            ],\n         )\n \n     @skipUnlessDBFeature(\n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..d204d54 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -252,7 +254,56 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n-    def test_password_whitespace_not_stripped(self):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_saves_many_to_many_field_empty(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient2@example.com\",\n+            \"password1\": \"testclient2\",\n+            \"password2\": \"testclient2\",\n+            \"orgs\": [],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [])\n+\n+    def test_custom_form_invalid_if_missing_org(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient3@example.com\",\n+            \"password1\": \"testclient3\",\n+            \"password2\": \"differentpassword\",\n+            # Missing \"orgs\"\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), False)\n         data = {\n             \"username\": \"testuser\",\n             \"password1\": \"   testpassword   \",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..b7a223e 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -7,6 +8,8 @@ from django.utils.timesince import timesince, timeuntil\n from django.utils.translation import npgettext_lazy\n \n \n+from django.test.utils import override_settings, requires_tz_support\n+\n class TimesinceTests(TestCase):\n     def setUp(self):\n         self.t = datetime.datetime(2007, 8, 14, 13, 46, 0)\n@@ -160,7 +163,34 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n-    def test_naive_datetime_with_tzinfo_attribute(self):\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        one_month_ago_tz_aware = now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(one_month_ago_tz_aware), \"1\\xa0month\")\n+        \n+        two_months_ago_tz_aware = now - datetime.timedelta(days=62)\n+        self.assertEqual(timesince(two_months_ago_tz_aware), \"2\\xa0months\")\n+        \n+        three_months_ago_tz_aware = now - datetime.timedelta(days=93)\n+        self.assertEqual(timesince(three_months_ago_tz_aware), \"3\\xa0months\")\n+\n+        # Testing against an aware datetime in the past\n+        aware_past_date = timezone.make_aware(datetime.datetime(2022, 1, 1, 0, 0, 0), timezone.utc)\n+        self.assertTrue(aware_past_date.tzinfo is not None)\n+        self.assertEqual(timesince(aware_past_date, now), \"more than a year\")\n+\n+        # Test when now is aware and target datetime is naive\n+        naive_past_date = datetime.datetime(2020, 1, 1, 0, 0, 0)\n+        with self.assertRaises(TypeError):\n+            timesince(naive_past_date, now)\n+\n+        # Test when past date is naive and now is aware\n+        now_utc = timezone.now()\n+        naive_now = datetime.datetime.now()\n+        with self.assertRaises(TypeError):\n+            timesince(now_utc, naive_now)\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n                 return None\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..e6af641 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -469,6 +469,43 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), \"Set foo\")\n \n \n+class SubparserErrorFormattingTests(SimpleTestCase):\n+    \"\"\"\n+    Test to verify that subparser error formatting properly shows user-friendly error messages\n+    rather than stack traces when incorrect arguments are provided.\n+    \"\"\"\n+\n+    def test_missing_subcommand_error(self):\n+        # When no subcommand is specified, should show an error for the missing subcommand\n+        # instead of a traceback.\n+        out, err = self.run_manage([\"cheeses\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertIn(\"error: the following arguments are required: {create}\", err_lines[1])\n+\n+    def test_missing_argument_error(self):\n+        # Test when a required argument for a subparser is missing.\n+        out, err = self.run_manage([\"cheeses\", \"create\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        # Check if error message for missing 'name' argument is properly formatted\n+        self.assertIn(\"error: the following arguments are required: name\", err_lines[1])\n+\n+    def test_invalid_argument_type_error(self):\n+        # Test when an argument of the wrong type is provided\n+        # This replicates the original test for different use-case with integers\n+        out, err = self.run_manage([\"subparser\", \"foo\", \"twelve\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser foo: error: argument bar: invalid int value: 'twelve'\"\n+        )\n+\n+\n class UtilsTests(SimpleTestCase):\n     def test_no_existent_external_program(self):\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..9f2ec04 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -104,6 +104,24 @@ class FunctionTests(SimpleTestCase):\n             # Invalid suffix.\n             self.assertEqual(floatformat(66666.666, \"u2\"), \"66666.666\")\n \n+    def test_issue_zero_string_and_decimal(self):\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+\n+    def test_additional_floatformat_cases(self):\n+        # Zero with positive precision\n+        self.assertEqual(floatformat(\"0.00\", 2), \"0.00\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 2), \"0.00\")\n+        # Non-zero decimal strings\n+        self.assertEqual(floatformat(\"0.01\", 1), \"0.0\")\n+        self.assertEqual(floatformat(Decimal(\"0.01\"), 1), \"0.0\")\n+        # Negative zero values\n+        self.assertEqual(floatformat(\"-0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"-0.00\"), 0), \"0\")\n+        # Extremely small numbers\n+        self.assertEqual(floatformat(Decimal('0.000000000000000000015'), 20), \"0.00000000000000000002\")\n+        self.assertEqual(floatformat(0.000000000000000000015, 20), \"0.00000000000000000002\")\n+\n     def test_zero_values(self):\n         self.assertEqual(floatformat(0, 6), \"0.000000\")\n         self.assertEqual(floatformat(0, 7), \"0.0000000\")\n",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..dc0f19d 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,6 +1018,26 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_callable_returning_default_storage(self):\n+        \"\"\"\n+        Test deconstruction of a FileField with a callable returning default_storage.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_default_storage)\n+\n+    def test_makemigrations_regression_for_callable(self):\n+        \"\"\"\n+        Test for regression that ensures makemigrations doesn't alternate \n+        storage parameter for callable returning default_storage.\n+        \"\"\"\n+        obj = Storage()\n+        for _ in range(10):\n+            *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+            storage = kwargs.get(\"storage\", None)\n+            self.assertIs(storage, callable_default_storage)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..e43b1c1 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n+from .tests import AdminViewBasicTestCase, get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n@@ -33,6 +36,59 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"Test 'show_save_as_new' respects add and change permissions.\"\"\"\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        # Assign change permission only.\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        # Assign add and change permissions.\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n+        # New test case: User with neither add nor change permission\n+        no_perm_user = User.objects.create_user(\n+            username=\"no_perm_user\", password=\"secret\", is_staff=True\n+        )\n+        request.user = no_perm_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # New test case: User with only add permission\n+        add_only_user = User.objects.create_user(\n+            username=\"add_only_user\", password=\"secret\", is_staff=True\n+        )\n+        add_only_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+        )\n+        request.user = add_only_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n     def test_override_show_save_and_add_another(self):\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..52d2e5a 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -67,7 +67,39 @@ class BaseConstraintTests(SimpleTestCase):\n         )\n         self.assertEqual(c.get_violation_error_message(), \"custom base_name message\")\n \n-    def test_custom_violation_error_message_clone(self):\n+    def test_custom_violation_code(self):\n+        constraint = BaseConstraint(\n+            name=\"base_name\",\n+            violation_error_message=\"custom message\",\n+            violation_error_code=\"custom_code\"\n+        )\n+        self.assertEqual(constraint.violation_error_code, \"custom_code\")\n+\n+    def test_check_constraint_violation_code(self):\n+        check = Q(price__gt=F(\"discounted_price\"))\n+        constraint = CheckConstraint(\n+            check=check,\n+            name=\"price_upper\",\n+            violation_error_code=\"price_violation\"\n+        )\n+        # Invalid product.\n+        invalid_product = Product(price=10, discounted_price=50)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+\n+        self.assertEqual(cm.exception.code, \"price_violation\")\n+        \n+    def test_unique_constraint_violation_code(self):\n+        constraint = UniqueConstraint(\n+            fields=[\"name\", \"color\"],\n+            name=\"unique_name_color\",\n+            violation_error_code=\"unique_violation\"\n+        )\n+        non_unique_product = Product(name=\"p1\", color=\"red\")\n+        with self.assertRaisesMessage(ValidationError, \"Unique constraint failed.\") as cm:\n+            constraint.validate(Product, non_unique_product)\n+            \n+        self.assertEqual(cm.exception.code, \"unique_violation\")\n         constraint = BaseConstraint(\n             name=\"base_name\",\n             violation_error_message=\"custom %(name)s message\",\n",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..1060813 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1476,6 +1476,20 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n \n         formset = ChoiceFormFormset(initial=[{\"choice\": \"Zero\", \"votes\": \"1\"}])\n+\n+    def test_add_fields_with_none_index(self):\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False\n+        )\n+        \n+        my_formset = MyFormSet(initial=None)\n+        empty_form = my_formset.empty_form\n+        self.assertNotIn(\"DELETE\", empty_form.fields)\n         self.assertEqual(len(formset), 3)\n         self.assertIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "",
  "django__django-16612": "",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..88938b1 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,15 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        test_tuples = [\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        ]\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..8fc2d32 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -153,8 +153,36 @@ class ModelAdminTests(TestCase):\n         self.assertIs(\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n-\n-    def test_field_arguments(self):\n+    def test_lookup_allowed_foreign_primary_extended(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+        \n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+        \n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+        \n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+        \n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                'restaurant__place__country',\n+                'restaurant__place__country__name',\n+            ]\n+        \n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed('restaurant__place__country', '1'), True)\n+        self.assertIs(\n+            ma.lookup_allowed('restaurant__place__country__id__exact', '1'), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed('restaurant__place__country__name', 'test_value'), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed('restaurant__place__country__name__startswith', 'test'), True\n+        )\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n         class BandAdmin(ModelAdmin):\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..9e70147 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -921,8 +921,31 @@ class WriterTests(SimpleTestCase):\n             \"import datetime\\nfrom django.db import migrations, models\\n\",\n             output,\n         )\n-\n-    def test_migration_file_header_comments(self):\n+    def test_datetime_and_time_import_order(self):\n+        \"\"\"\n+        Test correct order of imports when using both datetime and time modules.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(\n+                            default=time.time,\n+                        ),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..60c0fe1 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -319,6 +319,35 @@ class ImageFieldTwoDimensionsTests(ImageFieldTestMixin, TestCase):\n         # Dimensions were recalculated, and hence file should have opened.\n         self.assertIs(p.mugshot.was_opened, True)\n \n+from django.test import TestCase\n+from django.db import models\n+from django.db.models import signals\n+\n+class PersonWithDimensions(models.Model):\n+    mugshot = models.ImageField(upload_to='images/', width_field='width', height_field='height')\n+    width = models.IntegerField(null=True, blank=True)\n+    height = models.IntegerField(null=True, blank=True)\n+\n+class PersonWithoutDimensions(models.Model):\n+    mugshot = models.ImageField(upload_to='images/')\n+\n+class SignalConnectionTests(TestCase):\n+\n+    def test_post_init_not_connected_no_dimensions(self):\n+        # Ensure post_init is not connected for models without dimensions\n+        person_model_id = id(PersonWithoutDimensions)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_connected_with_dimensions(self):\n+        # Ensure post_init is connected for models with dimensions\n+        person_with_dims_id = id(PersonWithDimensions)\n+        self.assertIn(\n+            person_with_dims_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..247ee10 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1149,6 +1149,45 @@ class OptimizerTests(SimpleTestCase):\n             [migrations.RenameIndex(\"Pony\", new_name=\"new_name\", old_name=\"old_name\")],\n         )\n         self.assertDoesNotOptimize(\n+        )\n+\n+    def test_add_remove_index_with_different_indexes(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"name\"], name=\"idx_pony_name\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+            ],\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"name\"], name=\"idx_pony_name\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+            ],\n+        )\n+        \n+    def test_consecutive_add_remove_index_same_fields_different_names(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"speed\"], name=\"idx_pony_speed\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_speed_incorrect\"),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_speed\"),\n+            ],\n+            [\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_speed_incorrect\"),\n+            ],\n             [\n                 migrations.RenameIndex(\n                     \"Pony\", new_name=\"mid_name\", old_name=\"old_name\"\n@@ -1157,4 +1196,4 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..38e55a2 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -806,6 +806,37 @@ class SystemChecksTestCase(SimpleTestCase):\n         ]\n         self.assertEqual(errors, expected)\n \n+    def test_readonly_fields_error_message_includes_field_name(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"this_field_does_not_exist\",)\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'this_field_does_not_exist', which is not a callable, \"\n+                \"an attribute of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_readonly_fields_error_on_inline_includes_field_name(self):\n+        class CityInline(admin.TabularInline):\n+            model = City\n+            readonly_fields = (\"another_missing_field\",)\n+\n+        errors = CityInline(State, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'another_missing_field', which is not a callable, \"\n+                \"an attribute of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                obj=CityInline,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n     def test_nonexistent_field_on_inline(self):\n         class CityInline(admin.TabularInline):\n             model = City\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..f5065cb 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -19,7 +20,30 @@ class XorLookupsTests(TestCase):\n             self.numbers[:3] + self.numbers[8:],\n         )\n \n-    def test_filter_negated(self):\n+    def test_xor_odd_parity(self):\n+        # Testing the odd number of True conditions for parity\n+        self.assertCountEqual(\n+            Number.objects.filter(\n+                Q(num__gte=1) ^\n+                Q(num__gte=3) ^\n+                Q(num__gte=5)\n+            ),\n+            # The index 0 (value 0) and indices 1, 4 (values 1 and 4) \n+            # should remain as we expect (1>=1) and (4>=3).\n+            self.numbers[0:1] + self.numbers[1:2] + self.numbers[4:5]\n+        )\n+\n+        self.assertCountEqual(\n+            Number.objects.filter(\n+                Q(num__gte=2) ^\n+                Q(num__gte=4) ^\n+                Q(num__gte=6)\n+            ),\n+            # Based on the interpretation, numbers that have an odd \n+            # number of conditions true. Index 3 (value 3) and indices 5, 7 (values 5, 7) \n+            # should pass the conditions.\n+            self.numbers[2:3] + self.numbers[4:5] + self.numbers[6:7]\n+        )\n         self.assertCountEqual(\n             Number.objects.filter(Q(num__lte=7) ^ ~Q(num__lt=3)),\n             self.numbers[:3] + self.numbers[8:],\n@@ -64,4 +88,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..bcbbf44 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -456,7 +456,33 @@ class WriterTests(SimpleTestCase):\n             \"default=datetime.date(1969, 11, 19))\",\n         )\n \n-    def test_serialize_nested_class(self):\n+    def test_serialize_nested_class_method_as_default(self):\n+        class ExampleModel(models.Model):\n+            class NestedChoices(models.TextChoices):\n+                OPTION1 = 'OPTION1', 'Option 1'\n+                OPTION2 = 'OPTION2', 'Option 2'\n+\n+                @classmethod\n+                def default(cls):\n+                    return [cls.OPTION1]\n+\n+            choices_field = ArrayField(\n+                models.CharField(choices=NestedChoices.choices, max_length=30),\n+                default=NestedChoices.default,\n+                null=True,\n+            )\n+\n+        expected_default_path = (\n+            \"migrations.test_writer.WriterTests.test_serialize_nested_class_method_as_default.<locals>.ExampleModel.NestedChoices.default\"\n+        )\n+\n+        self.assertSerializedResultEqual(\n+            ExampleModel._meta.get_field('choices_field').default,\n+            (\n+                expected_default_path,\n+                {\"import migrations.test_writer\"},\n+            ),\n+        )\n         for nested_cls in [self.NestedEnum, self.NestedChoices]:\n             cls_name = nested_cls.__name__\n             with self.subTest(cls_name):\n@@ -1032,4 +1058,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..00e090d 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -638,7 +638,23 @@ class MakeMigrationsTests(MigrationTestBase):\n                 with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n                     with mock.patch.object(TestRouter, 'allow_migrate', return_value=False) as allow_migrate:\n                         call_command('makemigrations', 'migrations', verbosity=0)\n-                allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n+                # Check all models in 'migrations' app only for the 'other' connection.\n+                models_in_migrations_app = [model.__name__ for model in apps.get_app_config('migrations').get_models()]\n+                for model_name in models_in_migrations_app:\n+                    allow_migrate.assert_any_call('other', 'migrations', model_name=model_name)\n+\n+                # Should not be called with models from other apps for the 'migrations' app\n+                with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n+                    with mock.patch('migrations.routers.TestRouter.allow_migrate', return_value=True) as allow_migrate_check:\n+                        call_command('makemigrations', 'migrations2', verbosity=0)\n+                        model_names_in_migrations2_app = [model.__name__ for model in apps.get_app_config('migrations2').get_models()]\n+                        for model_name in model_names_in_migrations2_app:\n+                            allow_migrate_check.assert_any_call('other', 'migrations2', model_name=model_name)\n+                            \n+                # Ensure no new invalid app_name/model_name occurs for incorrect router call\n+                with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n+                    with self.assertRaises(LookupError):\n+                        call_command('makemigrations', 'non_existent_app', verbosity=0)\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n     def test_failing_migration(self):\n",
  "django__django-9296": "",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..c80fcd4 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,35 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0, f\"Expected first bin edge 0, got {bins[0]}\"\n+    assert bins[-1] == 1, f\"Expected last bin edge 1, got {bins[-1]}\"\n+\n+def test_hist_range_without_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0, f\"Expected first bin edge 0 for density=False, got {bins[0]}\"\n+    assert bins[-1] == 1, f\"Expected last bin edge 1 for density=False, got {bins[-1]}\"\n+\n+def test_hist_multiple_bins():\n+    num_bins = 5\n+    _, bins, _ = plt.hist(np.random.rand(100), num_bins, range=(0, 1), density=True)\n+    assert bins[0] == 0, f\"First bin edge should be 0, got {bins[0]}\"\n+    assert bins[-1] == 1, f\"Last bin edge should be 1, got {bins[-1]}\"\n+    assert len(bins) == num_bins + 1, f\"Expected {num_bins + 1} bin edges, got {len(bins)}\"\n+\n+def test_hist_with_cumulative_and_density():\n+    data = np.random.rand(100)\n+    _, bins, _ = plt.hist(data, \"auto\", range=(0, 1), density=True, cumulative=True)\n+    assert bins[0] == 0, f\"First bin edge should be 0 in cumulative, got {bins[0]}\"\n+    assert bins[-1] == 1, f\"Last bin edge should be 1 in cumulative, got {bins[-1]}\"\n+    \n+    # Check that the cumulative sum reaches near 1\n+    n, _, _ = plt.hist(data, bins=bins, density=True, cumulative=True)\n+    assert np.isclose(n[-1], 1, atol=1e-2), f\"Last cumulative bin should be close to 1, got {n[-1]}\"\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6395,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..9ba0df0 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -939,6 +939,16 @@ def test_inverted_limits():\n     plt.close()\n \n \n+def test_inverting_log_yscale():\n+    # Test inverting a log y-axis\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)  # Attempt to invert the axis by setting limits in reverse order\n+    inverted_ylims = ax.get_ylim()\n+    assert inverted_ylims == (10, 1), f\"Expected axis limits to be (10, 1), but got {inverted_ylims}\"\n+    plt.close()\n+\n+\n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n     x = np.arange(0., np.e, 0.01)\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..13cbdef 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,6 +6960,24 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    import numpy as np\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference plot without clear, expecting no extra tick labels\n+    axs = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    # Test plot with clear, expecting matched appearance with the reference\n+    axs = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n \n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..d7ce16d 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -294,6 +294,46 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n \n     ax_test = fig_test.subplots()\n     ax_ref = fig_ref.subplots()\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Test to check that no deprecation warning is emitted when plotting\n+    empty data with category units. See issue #22640.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+\n+    # Capture warnings\n+    with pytest.warns(None) as record:\n+        ax.plot([], [])\n+\n+    # Ensure no MatplotlibDeprecationWarning is in the warnings\n+    assert not any(isinstance(w.message, MatplotlibDeprecationWarning) for w in record)\n+\n+\n+def test_update_units_with_empty_category_list():\n+    \"\"\"\n+    Test to ensure that updating axis units with an empty list doesn't\n+    produce an error or unwanted warnings.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+\n+    with pytest.warns(None) as record:\n+        ax.xaxis.update_units([])  # Pass empty category list\n+        ax.plot([], [])\n+\n+    assert not any(isinstance(w.message, MatplotlibDeprecationWarning) for w in record)\n+\n+def test_conversion_error_handling_on_empty_data():\n+    \"\"\"\n+    Test that no ConversionError is raised when calling convert_xunits on\n+    an empty list, as discussed in issue #22640.\n+    \"\"\"\n+    fig, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    \n+    # Should not raise any error, specifically not a ConversionError\n+    ax.convert_xunits([])\n+\n     for ax, kwargs in zip([ax_test, ax_ref],\n                           ({}, dict(xunits=None, yunits=None))):\n         # First call works\n@@ -311,4 +351,4 @@ def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..d11132e 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -918,6 +918,37 @@ def test_proportional_colorbars():\n                                      extend=extends[i])\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n+@pytest.mark.parametrize(\"extend, coloroffset, res\", [\n+    ('both', 1, [np.array([[0., 0.], [0., 1.]]),\n+                np.array([[1., 0.], [1., 1.]]),\n+                np.array([[2., 0.], [2., 1.]])]),\n+    ('min', 0, [np.array([[0., 0.], [0., 1.]]),\n+               np.array([[1., 0.], [1., 1.]])]),\n+    ('max', 0, [np.array([[1., 0.], [1., 1.]]),\n+               np.array([[2., 0.], [2., 1.]])]),\n+    ('neither', -1, [np.array([[1., 0.], [1., 1.]])])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, res):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal',\n+                    drawedges=True)\n+    observed_segments = cbar.dividers.get_segments()\n+    assert np.all(np.equal(observed_segments, res)), f\"Failed on extend={extend}\"\n+\n+\n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pytest\n+from matplotlib.colors import from_levels_and_colors\n+from matplotlib.colorbar import Colorbar\n+import matplotlib.colors as mcolors\n \n def test_negative_boundarynorm():\n     fig, ax = plt.subplots(figsize=(1, 3))\n",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..59067af 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -11,7 +11,7 @@ from matplotlib import colors as mcolors\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n-from matplotlib.patches import Circle\n+from matplotlib.testing.decorators import check_figures_equal\n \n import matplotlib.pyplot as plt\n import numpy as np\n@@ -21,6 +21,17 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_axes_set_visible_false(fig_test, fig_ref):\n+    # Create a 3D subplot in fig_test and set it invisible\n+    ax = fig_test.add_subplot(projection='3d')\n+    ax.scatter([1, 2], [1, 2], [1, 2], c='b')\n+    ax.set_visible(False)\n+\n+    # Create a similar 3D subplot in fig_ref without setting it invisible for comparison\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    ax_ref.scatter([1, 2], [1, 2], [1, 2], c='b')\n+\n def test_aspect_equal_error():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..914103a 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -156,8 +156,52 @@ def test_negative_rect():\n     neg_vertices = Rectangle((0, 0), -3, -2).get_verts()[:-1]\n     assert_array_equal(np.roll(neg_vertices, 2, 0), pos_vertices)\n \n+from matplotlib.patches import Rectangle\n+from matplotlib.testing.decorators import check_figures_equal\n \n-@image_comparison(['clip_to_bbox'])\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch():\n+    fig, ax = plt.subplots()\n+\n+    # Define a rectangle with a specific dash offset\n+    rect = Rectangle((0.1, 0.1), 0.8, 0.8, linewidth=3, edgecolor='g',\n+                     linestyle=(5, (10, 5)))  # offset by 5\n+    ax.add_patch(rect)\n+\n+    ax.set_xlim(0, 1)\n+    ax.set_ylim(0, 1)\n+\n+    # Test by comparing with a line plot with the same offset\n+    @check_figures_equal(extensions=['png'])\n+    def reference_plot(fig1, fig2):\n+        ax_ref = fig1.add_subplot()\n+        x = np.linspace(0, 1, 100)\n+        y = np.full_like(x, 0.5)\n+        ax_ref.plot(x, y, linestyle=(5, (10, 5)), color='g', linewidth=3)\n+    \n+    reference_plot(fig, plt.figure())\n+\n+# Add more tests for other patch types\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_ellipse():\n+    fig, ax = plt.subplots()\n+\n+    # Test with Ellipse patch\n+    ellipse = plt.Circle((0.5, 0.5), 0.4, linewidth=2, edgecolor='purple', linestyle=(7, (4,2)))\n+    ax.add_patch(ellipse)\n+\n+    ax.set_xlim(0, 1)\n+    ax.set_ylim(0, 1)\n+\n+    # Reference line for comparison\n+    @check_figures_equal(extensions=['png'])\n+    def reference_plot(fig1, fig2):\n+        ax_ref = fig1.add_subplot()\n+        x = np.linspace(0, 1, 100)\n+        y = np.sin(2 * np.pi * x) * 0.4 + 0.5\n+        ax_ref.plot(x, y, linestyle=(7, (4,2)), color='purple', linewidth=2)\n+    \n+    reference_plot(fig, plt.figure())\n def test_clip_to_bbox():\n     fig, ax = plt.subplots()\n     ax.set_xlim([-18, 20])\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..8579248 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,34 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pytest\n+from matplotlib.patches import Rectangle\n+\n+@pytest.mark.parametrize(\"use_cycler_colors\", [True, False])\n+def test_stackplot_uses_cycler_without_modification(use_cycler_colors):\n+    # Test that stackplot can use CN notation correctly and does not modify the cycler\n+    x = np.array([1, 2, 3])\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+\n+    fig, ax = plt.subplots()\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+    original_colors = ax._get_lines.prop_cycler\n+\n+    # Use CN notation if use_cycler_colors is True\n+    stack_colors = ['C0', 'C1', 'C2'] if use_cycler_colors else ['r', 'g', 'b']\n+    \n+    if use_cycler_colors:\n+        ax.plot([1, 3], [1, 3], color='C0')\n+        ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+\n+    ax.stackplot(x, my_data, colors=stack_colors)\n+\n+    # Verify stackplot did not alter the original prop_cycler\n+    assert ax._get_lines.prop_cycler == original_colors\n+\n+    plt.close(fig)\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..96244be 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -13,7 +13,7 @@ from matplotlib.backend_bases import MouseButton, MouseEvent\n \n from matplotlib.offsetbox import (\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n-    OffsetImage, TextArea, _get_packed_offsets)\n+    OffsetImage, TextArea, _get_packed_offsets, HPacker, VPacker)\n \n \n @image_comparison(['offsetbox_clipping'], remove_text=True)\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..aa91b6f 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -576,6 +576,56 @@ def test_svg_font_string(font_str, include_generic):\n         rest = rest + [generic]\n     plt.rcParams[f\"font.{generic}\"] = rest\n     plt.rcParams[\"font.size\"] = size\n+def test_annotationbbox_gid_multiple():\n+    # Test that multiple AnnotationBbox objects with gids appear in the SVG.\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+    \n+    # Create two AnnotationBbox with different GIDs\n+    for i, gid in enumerate(['test_gid_1', 'test_gid_2']):\n+        xy = (0.3 + i*0.1, 0.55)\n+        imagebox = OffsetImage(arr_img, zoom=0.1)\n+        imagebox.image.axes = ax\n+        \n+        ab = AnnotationBbox(imagebox, xy, xybox=(120., -80.), xycoords='data',\n+                            boxcoords=\"offset points\", pad=0.5,\n+                            arrowprops=dict(\n+                                arrowstyle=\"->\",\n+                                connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                            )\n+        ab.set_gid(gid)\n+        ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    # Check both GIDs are present\n+    assert '<g id=\"test_gid_1\">' in buf\n+    assert '<g id=\"test_gid_2\">' in buf\n+\n+\n+def test_annotationbbox_gid_without_arrow():\n+    # Test that AnnotationBbox without arrow also carries the gid in the SVG.\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+    \n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy, xybox=(120., -80.), xycoords='data',\n+                        boxcoords=\"offset points\", pad=0.5)\n+    ab.set_gid('no_arrow_gid')\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"no_arrow_gid\">'\n+    assert expected in buf\n+\n     plt.rcParams[\"svg.fonttype\"] = \"none\"\n \n     fig, ax = plt.subplots()\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..6a95538 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,13 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import numpy as np\n+import pytest\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+import matplotlib as mpl\n+from matplotlib import colors as mcolors\n+\n+# Existing test\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..57c4a24 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,43 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])  # Plot data to invoke offset text\n+    fig = ax.figure\n+    fig.canvas.draw()  # Ensure any lazy rendering updates are applied\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    fig = ax.figure\n+    fig.canvas.draw()\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9]) \n+    fig = ax.figure\n+    fig.canvas.draw()\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    fig = ax.figure\n+    fig.canvas.draw()\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+import matplotlib as mpl\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..b5033b6 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,27 @@\n+\n+import pickletools\n+\n+def test_pickle_figure_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+    ax.plot(time, speed, label=\"speed\")\n+    \n+    # Adding a draggable legend\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+    \n+    # Attempting to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Check that 'FigureCanvasAgg' is not present in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    loaded_fig = pickle.loads(pkl)\n+    loaded_fig.canvas.draw()\n+    \n+    plt.close(loaded_fig)\n+\n from io import BytesIO\n import ast\n import pickle\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..11d6974 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -35,6 +35,28 @@ def test_simple():\n \n     plt.figure()\n     plt.bar(x=np.arange(10), height=np.arange(10))\n+\n+    # Test pickling a figure with aligned labels\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+    fig.align_labels()  # This line used to cause pickling issues\n+\n+    # Attempt to pickle the figure\n+    try:\n+        pickle_dumped_data = pickle.dumps(fig)\n+        # Load from pickle to verify \n+        fig_loaded = pickle.loads(pickle_dumped_data)\n+        assert fig_loaded is not None, \"Loaded figure from pickle is None\"\n+    except Exception as e:\n+        assert False, f\"Pickling failed where it should have succeeded: {e}\"\n     pickle.dump(plt.gca(), BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n     fig = plt.figure()\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..98f9839 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,6 +991,39 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_with_C_parameter_min_1(fig_test, fig_ref):\n+    # Test to ensure mincnt parameter behaves consistently when C is given\n+    datapoints = [(0, 0), (0, 0), (6, 0), (0, 6)]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # Reference hexbin without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast\n+\n+    # Test hexbin with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=np.sum,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_test.set_facecolor(\"green\")\n \n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..4c4d40f 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,43 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    z = np.array([[0, 1], [1, 2]])\n+\n+    cs_test = ax_test.contour(z)\n+    cs_ref = ax_ref.contour(z)\n+\n+    # Use set_paths to copy paths from cs_ref to cs_test\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+    # Verification will be by checking the plot visually. The test decorator\n+    # will ensure that the output images are compared.\n+    # If set_paths works correctly, both figures should look identical.\n+\n+@pytest.mark.parametrize(\"transform\", [np.identity(3), np.random.rand(3, 3)])\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_with_transform(fig_test, fig_ref, transform):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    z = np.array([[0, 1], [1, 2]])\n+\n+    cs_test = ax_test.contour(z)\n+    cs_ref = ax_ref.contour(z)\n+\n+    # Apply a random or identity transformation for testing.\n+    paths_transformed = [Path(p.vertices @ transform) for p in cs_ref.get_paths()]\n+    cs_test.set_paths(paths_transformed)\n+\n+    # Verification is visual. If paths are set correctly with a transform,\n+    # the figures may look different if transform != identity.\n+\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib import patches, Path\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..97a2e85 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,27 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+def test_whitespace_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"   \", __name__)\n+\n+def test_invalid_name_with_dot(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"invalid.name\", __name__)\n+\n+def test_valid_name_allowed(app, client):\n+    try:\n+        bp = flask.Blueprint(\"valid_name\", __name__)\n+    except ValueError:\n+        pytest.fail(\"Blueprint() raised ValueError unexpectedly!\")\n+\n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..0edd7e4 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,12 +81,27 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n             requests.get(url)\n \n-    def test_basic_building(self):\n+    @pytest.mark.parametrize(\n+        'exception, url', (\n+            (InvalidURL, 'http://..example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://example.com..'),\n+            (InvalidURL, 'http://-.example.com'),\n+            (InvalidURL, 'http://example.-com'),\n+            (InvalidURL, 'http://example.com-'),\n+            (InvalidURL, 'http://subdomain..example.com'),\n+            (InvalidURL, 'http://subdomain.example-.com'),\n+            (InvalidURL, 'http://.example.com'),\n+        ))\n+    def test_additional_invalid_urls(self, exception, url):\n+        with pytest.raises(exception):\n+            requests.get(url)\n         req = requests.Request()\n         req.url = 'http://kennethreitz.org/'\n         req.data = {'life': '42'}\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..a6f3120 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,23 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+def test_setitem_no_type_coercion_on_values_property():\n+    import xarray as xr\n+    import numpy as np\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    # Create DataArray with object dtype\n+    bad_indexed = xr.DataArray([None], dims='dim_0')\n+\n+    # Define a class with a values attribute\n+    class HasValues(object):\n+        values = 5\n+\n+    # Assign an instance of HasValues\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+\n+    # Check that the value has not been coerced\n+    assert isinstance(bad_indexed.values[0], HasValues)\n+    assert bad_indexed.values[0].values == 5\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..2e2578c 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2069,6 +2069,17 @@ class TestDataset:\n \n             assert data.attrs['Test'] is not copied.attrs['Test']\n \n+    @pytest.mark.parametrize('deep', [True, False])\n+    def test_unicode_copy(self, deep):\n+        ds = xr.Dataset(\n+            coords={'x': xr.IndexVariable('x', np.array(['foo'], dtype='<U3')),\n+                    'y': xr.IndexVariable('x', np.array(['bar'], dtype='<U3'))},\n+            data_vars={'z': xr.IndexVariable('x', np.array(['baz'], dtype='<U3'))})\n+        ds_copy = ds.copy(deep=deep)\n+        assert ds.x.dtype == ds_copy.x.dtype\n+        assert ds.y.dtype == ds_copy.y.dtype\n+        assert ds.z.dtype == ds_copy.z.dtype\n+\n     def test_copy_with_data(self):\n         orig = create_test_data()\n         new_data = {k: np.random.randn(*v.shape)\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..31a4719 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -611,6 +611,29 @@ class TestCombineAuto:\n         expected = Dataset({'x': 0, 'y': 1, 'z': 2})\n         assert_identical(expected, actual)\n \n+    def test_combine_non_monotonic_bystander(self):\n+        # Test that non-monotonic identical coordinates used as a bystander do not raise an error\n+        ycoord = ['z', 'x', 'y']  # Non-monotonic order\n+        xcoord = [1, 2, 3]\n+\n+        data1 = xr.Dataset(\n+            data_vars=dict(data=(['x', 'y'], np.random.rand(3, 3))),\n+            coords=dict(x=xcoord, y=ycoord)\n+        )\n+\n+        data2 = xr.Dataset(\n+            data_vars=dict(data=(['x', 'y'], np.random.rand(3, 3))),\n+            coords=dict(x=[4, 5, 6], y=ycoord)\n+        )\n+\n+        expected = xr.Dataset(\n+            data_vars=dict(data=(['x', 'y'], np.concatenate([data1.data, data2.data]))),\n+            coords=dict(x=[1, 2, 3, 4, 5, 6], y=ycoord)\n+        )\n+\n+        actual = combine_by_coords([data1, data2])\n+        assert_identical(expected, actual)\n+\n     def test_check_for_impossible_ordering(self):\n         ds0 = Dataset({'x': [0, 1, 5]})\n         ds1 = Dataset({'x': [2, 3]})\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..9bfb84d 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,8 +2309,15 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n-\n-    def test_reduce_keep_attrs(self):\n+    def test_quantile_keep_attrs(self):\n+        # Create a DataArray with attributes\n+        da = DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        \n+        # Compute quantile and keep attributes\n+        result = da.quantile(0.9, dim='x', keep_attrs=True)\n+        \n+        # Check if attributes are kept\n+        assert result.attrs == {'units': 'K'}\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..6373af9 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -158,8 +159,32 @@ class TestMergeMethod:\n             data.reset_coords().merge(data)\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n-\n-    def test_merge_broadcast_equals(self):\n+    \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+        \n+        # Verify that ds.merge(da) now works as expected and returns the same result as xr.merge([ds, da])\n+        expected = xr.merge([ds, da])\n+        actual = ds.merge(da)\n+        assert_identical(actual, expected)\n+\n+    def test_merge_dataarray_with_conflict(self):\n+        ds = xr.Dataset({\"a\": 0, \"b\": 1})\n+        da = xr.DataArray(data=2, name=\"b\")\n+        \n+        # Test that merging a DataArray with a conflicting variable name raises an error\n+        with pytest.raises(xr.MergeError):\n+            ds.merge(da)\n+\n+    def test_merge_empty_dataset_with_dataarray(self):\n+        ds = xr.Dataset()\n+        da = xr.DataArray(data=1, name=\"a\")\n+        \n+        # Test merging DataArray into an empty Dataset\n+        expected = xr.Dataset({\"a\": 1})\n+        actual = ds.merge(da)\n+        assert_identical(actual, expected)\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n         actual = ds1.merge(ds2)\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..ddf99aa 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -108,6 +108,24 @@ class TestMergeFunction:\n             expected = data[[\"var1\", \"var2\"]]\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0, \"common\": \"value1\"})\n+        ds2 = xr.Dataset(attrs={\"x\": 1, \"common\": \"value2\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        \n+        # Modify the attrs of the merged dataset\n+        ds3.attrs[\"x\"] = 2\n+        ds3.attrs[\"common\"] = \"modified_common_value\"\n+        \n+        # Ensure that ds1 and ds2 remain unchanged\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds1.attrs[\"common\"] == \"value1\"\n+        assert ds2.attrs[\"common\"] == \"value2\"\n+        \n+        # Ensure ds3 has the changed attrs\n+        assert ds3.attrs[\"x\"] == 2\n+        assert ds3.attrs[\"common\"] == \"modified_common_value\"\n \n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..0f44dfb 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1915,12 +1915,37 @@ def test_dot_align_coords(use_dask) -> None:\n         xr.testing.assert_allclose(expected, actual)\n \n \n+import pytest\n+import xarray as xr\n+import numpy as np\n+from xarray.testing import assert_identical\n+\n def test_where() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\")\n     actual = xr.where(cond, 1, 0)\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    # Test the original test case provided in the issue\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # Test with dtype preservation\n+    data = xr.DataArray(np.ones([10, 10], dtype=np.int8))\n+    data.attrs[\"attr_1\"] = \"test1\"\n+    data.attrs[\"attr_2\"] = \"test2\"\n+    data2 = xr.where(data == 1, 5, 0, keep_attrs=True)\n+    assert data2.attrs == data.attrs\n+    assert data2.dtype == data.dtype\n+\n+    # Test when keep_attrs=False to ensure attributes are not retained\n+    data3 = xr.where(data == 1, 5, 0, keep_attrs=False)\n+    assert data3.attrs == {}\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..7a3b1b4 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -14,6 +14,20 @@ with suppress(ImportError):\n     import dask.array as da\n \n \n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_signed_from_unsigned_with_hack(bits):\n+    # Test decoding unsigned integers as signed via the \"_Unsigned=False\" hack\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([-1, -128, 127, 0], dtype=signed_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == signed_dtype\n+    assert np.array_equal(decoded.values, original_values)  # Ensure values are equal\n+\n def test_CFMaskCoder_decode():\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..8068be7 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1919,6 +1919,29 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+    # Test where with scalars and keep_attrs=True\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"source\": \"cond\"})\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+    # Test where with scalars and integers as cond\n+    cond = xr.DataArray([1, 0], dims=\"x\", attrs={\"source\": \"cond\"})\n+    actual = xr.where(cond > 0, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+    # Test where with mixed types scalar and array with keep_attrs=True\n+    x = xr.DataArray([1, 2, 3], dims=\"x\", attrs={\"attr\": \"x\"})\n+    actual = xr.where([True, False, True], x, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 3], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # Test where with all scalars, keep_attrs=True, expecting empty attributes\n+    actual = xr.where(True, 1, 0, keep_attrs=True)\n+    expected = 1\n+    assert actual == expected\n+\n \n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n@@ -1928,6 +1951,29 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+    # Test where with scalars and keep_attrs=True\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"source\": \"cond\"})\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+    # Test where with scalars and integers as cond\n+    cond = xr.DataArray([1, 0], dims=\"x\", attrs={\"source\": \"cond\"})\n+    actual = xr.where(cond > 0, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+    # Test where with mixed types scalar and array with keep_attrs=True\n+    x = xr.DataArray([1, 2, 3], dims=\"x\", attrs={\"attr\": \"x\"})\n+    actual = xr.where([True, False, True], x, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 3], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # Test where with all scalars, keep_attrs=True, expecting empty attributes\n+    actual = xr.where(True, 1, 0, keep_attrs=True)\n+    expected = 1\n+    assert actual == expected\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..381ab8f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2010,6 +2010,14 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..fa5d946 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -219,6 +219,13 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n         return {k: lazy_inaccessible(k, v) for k, v in self._variables.items()}\n \n+from xarray import open_dataset\n+import pytest\n+from unittest.mock import MagicMock\n+from xarray.core.dataarray import DataArray\n+from xarray.tests.test_dask import InaccessibleVariableDataStore, UnexpectedDataAccess\n+from xarray.tests.test_backends import create_test_data\n+\n \n class TestDataset:\n     def test_repr(self) -> None:\n@@ -246,6 +253,21 @@ class TestDataset:\n         actual = \"\\n\".join(x.rstrip() for x in repr(data).split(\"\\n\"))\n         print(actual)\n         assert expected == actual\n+    \n+    def test_chunks_does_not_load_data_single(self) -> None:\n+        # regression test for the issue described where access to chunks loads entire data\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = open_dataset(url, engine='zarr', chunks={})\n+        \n+        def mock_values():\n+            raise UnexpectedDataAccess(\"Data should not be loaded just to access .chunks\")\n+        \n+        # Mock the `.values` of all DataArrays to simulate large data that is inaccessible\n+        for var in ds.variables.values():\n+            var.values = MagicMock(side_effect=mock_values)\n+\n+        # Should not trigger data load\n+        _ = ds.chunks\n \n         with set_options(display_width=100):\n             max_len = max(map(len, repr(data).split(\"\\n\")))\n@@ -261,6 +283,21 @@ class TestDataset:\n         actual = \"\\n\".join(x.rstrip() for x in repr(Dataset()).split(\"\\n\"))\n         print(actual)\n         assert expected == actual\n+    \n+    def test_chunks_does_not_load_data_single(self) -> None:\n+        # regression test for the issue described where access to chunks loads entire data\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = open_dataset(url, engine='zarr', chunks={})\n+        \n+        def mock_values():\n+            raise UnexpectedDataAccess(\"Data should not be loaded just to access .chunks\")\n+        \n+        # Mock the `.values` of all DataArrays to simulate large data that is inaccessible\n+        for var in ds.variables.values():\n+            var.values = MagicMock(side_effect=mock_values)\n+\n+        # Should not trigger data load\n+        _ = ds.chunks\n \n         # verify that ... doesn't appear for scalar coordinates\n         data = Dataset({\"foo\": (\"x\", np.ones(10))}).mean()\n@@ -274,6 +311,21 @@ class TestDataset:\n         actual = \"\\n\".join(x.rstrip() for x in repr(data).split(\"\\n\"))\n         print(actual)\n         assert expected == actual\n+    \n+    def test_chunks_does_not_load_data_single(self) -> None:\n+        # regression test for the issue described where access to chunks loads entire data\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = open_dataset(url, engine='zarr', chunks={})\n+        \n+        def mock_values():\n+            raise UnexpectedDataAccess(\"Data should not be loaded just to access .chunks\")\n+        \n+        # Mock the `.values` of all DataArrays to simulate large data that is inaccessible\n+        for var in ds.variables.values():\n+            var.values = MagicMock(side_effect=mock_values)\n+\n+        # Should not trigger data load\n+        _ = ds.chunks\n \n         # verify long attributes are truncated\n         data = Dataset(attrs={\"foo\": \"bar\" * 1000})\n@@ -295,6 +347,21 @@ class TestDataset:\n         actual = \"\\n\".join(x.rstrip() for x in repr(data).split(\"\\n\"))\n         print(actual)\n         assert expected == actual\n+    \n+    def test_chunks_does_not_load_data_single(self) -> None:\n+        # regression test for the issue described where access to chunks loads entire data\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = open_dataset(url, engine='zarr', chunks={})\n+        \n+        def mock_values():\n+            raise UnexpectedDataAccess(\"Data should not be loaded just to access .chunks\")\n+        \n+        # Mock the `.values` of all DataArrays to simulate large data that is inaccessible\n+        for var in ds.variables.values():\n+            var.values = MagicMock(side_effect=mock_values)\n+\n+        # Should not trigger data load\n+        _ = ds.chunks\n \n         # verify that long level names are not truncated\n         mindex = pd.MultiIndex.from_product(\n@@ -315,6 +382,21 @@ class TestDataset:\n         actual = \"\\n\".join(x.rstrip() for x in repr(data).split(\"\\n\"))\n         print(actual)\n         assert expected == actual\n+    \n+    def test_chunks_does_not_load_data_single(self) -> None:\n+        # regression test for the issue described where access to chunks loads entire data\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = open_dataset(url, engine='zarr', chunks={})\n+        \n+        def mock_values():\n+            raise UnexpectedDataAccess(\"Data should not be loaded just to access .chunks\")\n+        \n+        # Mock the `.values` of all DataArrays to simulate large data that is inaccessible\n+        for var in ds.variables.values():\n+            var.values = MagicMock(side_effect=mock_values)\n+\n+        # Should not trigger data load\n+        _ = ds.chunks\n \n     def test_repr_period_index(self) -> None:\n         data = create_test_data(seed=456)\n@@ -343,6 +425,21 @@ class TestDataset:\n         )\n         actual = str(data)\n         assert expected == actual\n+    \n+    def test_chunks_does_not_load_data_single(self) -> None:\n+        # regression test for the issue described where access to chunks loads entire data\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = open_dataset(url, engine='zarr', chunks={})\n+        \n+        def mock_values():\n+            raise UnexpectedDataAccess(\"Data should not be loaded just to access .chunks\")\n+        \n+        # Mock the `.values` of all DataArrays to simulate large data that is inaccessible\n+        for var in ds.variables.values():\n+            var.values = MagicMock(side_effect=mock_values)\n+\n+        # Should not trigger data load\n+        _ = ds.chunks\n \n     def test_repr_nep18(self) -> None:\n         class Array:\n@@ -403,6 +500,21 @@ class TestDataset:\n         )\n         actual = buf.getvalue()\n         assert expected == actual\n+    \n+    def test_chunks_does_not_load_data_single(self) -> None:\n+        # regression test for the issue described where access to chunks loads entire data\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = open_dataset(url, engine='zarr', chunks={})\n+        \n+        def mock_values():\n+            raise UnexpectedDataAccess(\"Data should not be loaded just to access .chunks\")\n+        \n+        # Mock the `.values` of all DataArrays to simulate large data that is inaccessible\n+        for var in ds.variables.values():\n+            var.values = MagicMock(side_effect=mock_values)\n+\n+        # Should not trigger data load\n+        _ = ds.chunks\n         buf.close()\n \n     def test_constructor(self) -> None:\n@@ -752,6 +864,21 @@ class TestDataset:\n         )\n         actual = repr(coords)\n         assert expected == actual\n+    \n+    def test_chunks_does_not_load_data_single(self) -> None:\n+        # regression test for the issue described where access to chunks loads entire data\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = open_dataset(url, engine='zarr', chunks={})\n+        \n+        def mock_values():\n+            raise UnexpectedDataAccess(\"Data should not be loaded just to access .chunks\")\n+        \n+        # Mock the `.values` of all DataArrays to simulate large data that is inaccessible\n+        for var in ds.variables.values():\n+            var.values = MagicMock(side_effect=mock_values)\n+\n+        # Should not trigger data load\n+        _ = ds.chunks\n \n         # dims\n         assert coords.dims == {\"x\": 2, \"y\": 3}\n@@ -945,6 +1072,21 @@ class TestDataset:\n         )\n         actual = repr(ds.data_vars)\n         assert expected == actual\n+    \n+    def test_chunks_does_not_load_data_single(self) -> None:\n+        # regression test for the issue described where access to chunks loads entire data\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = open_dataset(url, engine='zarr', chunks={})\n+        \n+        def mock_values():\n+            raise UnexpectedDataAccess(\"Data should not be loaded just to access .chunks\")\n+        \n+        # Mock the `.values` of all DataArrays to simulate large data that is inaccessible\n+        for var in ds.variables.values():\n+            var.values = MagicMock(side_effect=mock_values)\n+\n+        # Should not trigger data load\n+        _ = ds.chunks\n \n         # dtypes\n         assert ds.data_vars.dtypes == {\n@@ -4342,6 +4484,21 @@ class TestDataset:\n \n         # check that they are identical\n         assert expected == actual\n+    \n+    def test_chunks_does_not_load_data_single(self) -> None:\n+        # regression test for the issue described where access to chunks loads entire data\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = open_dataset(url, engine='zarr', chunks={})\n+        \n+        def mock_values():\n+            raise UnexpectedDataAccess(\"Data should not be loaded just to access .chunks\")\n+        \n+        # Mock the `.values` of all DataArrays to simulate large data that is inaccessible\n+        for var in ds.variables.values():\n+            var.values = MagicMock(side_effect=mock_values)\n+\n+        # Should not trigger data load\n+        _ = ds.chunks\n \n         # check roundtrip\n         assert_identical(ds, Dataset.from_dict(actual))\n",
  "pydata__xarray-6744": "",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..72197ae 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,25 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n+import pytest\n+import numpy as np\n+import xarray as xr\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\", \"bool\", \"int64\"])\n+def test_stack_preserves_dtype(dtype):\n+    # Creating a dataset with a coordinate with the specified dtype\n+    ds = xr.Dataset(coords={'a': np.array([0, 1], dtype=dtype)})\n+    \n+    # Stacking the dataset\n+    stacked_ds = ds.stack(b=('a',))\n+\n+    # Check that the data type of the coordinate remains unchanged\n+    assert str(stacked_ds['a'].values.dtype) == dtype\n+\n+# Existing test\n     dates = [datetime(1, 1, day) for day in range(1, 20)]\n \n     expected = pd.Index(dates)\n     actual = safe_cast_to_index(np.array(dates))\n     assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+    assert isinstance(actual, pd.Index)\n",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..03b37e0 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,27 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pytest import CaptureFixture\n+from pylint.lint import Run\n+from pathlib import Path\n+\n+EMPTY_MODULE = Path(__file__).parent / \"empty_module\"  # Assuming there's such a module\n+\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..ae9abde 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1326,11 +1326,24 @@ class TestRunTC:\n             with _test_cwd():\n                 os.chdir(join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"))\n                 self._runtest(\n-                    [\".\", \"--recursive=y\"],\n+                    [\".\", \"--recursive=y\", \"--ignore-paths=^ignored_subdirectory/.*\"],\n                     code=0,\n                 )\n \n-    def test_regression_recursive_current_dir(self):\n+    def test_ignore_path_recursive_specific_dir(self):\n+        \"\"\"Tests the ignore-paths functionality with --recursive flag for specific directory.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\", \"specific_directory\"))\n+                self._runtest(\n+                    [\".\", \"--recursive=y\", \"--ignore-paths=^some_other_directory/.*\"],\n+                    code=0,\n+                )\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n             # astroid to believe that directory is a package.\n",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..415cf51 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -765,8 +765,35 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n \n-            paths = [cwd, \"/custom_pythonpath\", *default_paths]\n+            paths = [\"\", *default_paths]\n             sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Failed when first item is empty string\"\n+\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Failed when first item is dot/current directory\"\n+\n+            paths = [\"custom/path/to/remove\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths, \"Failed when first item is custom path and shouldn't be removed\"\n+\n+            paths = [\"\", \"/another/custom_path\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Failed when first is empty and followed by another custom path\"\n+            \n+            paths = [\"/do_not_remove\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths, \"Failed when first item should not be removed\"\n             with _test_environ_pythonpath(\"/custom_pythonpath\"):\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..73f15c9 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -159,6 +159,19 @@ def logging_during_setup_and_teardown(caplog):\n     logger.info(\"a_teardown_log\")\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n+def test_consistency_between_caplog_methods(caplog):\n+    \"\"\"Verify that caplog.get_records and caplog.records remain consistent after clear.\"\"\"\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    verify_consistency()\n+    logging.warning(\"test\")\n+    verify_consistency()\n+    caplog.clear()\n+    verify_consistency()  # Should pass after issue fix (initially failed)\n+    \n+import pytest\n+import logging\n \n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..c52d4d1 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1274,6 +1274,38 @@ def test_pdb_teardown_skipped(\n     assert tracked == []\n \n \n+def test_pdb_teardown_skipped_for_classes_with_unittest_skip(\n+    pytester: Pytester, monkeypatch: MonkeyPatch\n+) -> None:\n+    \"\"\"With --pdb, setUp and tearDown should not be called for tests skipped\n+    via unittest.skip on the class level (#10060).\n+    \"\"\"\n+    tracked: List[str] = []\n+    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        @unittest.skip(\"skipped due to unittest skip\")\n+        class SkippedTestClass(unittest.TestCase):\n+\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_1(self):\n+                pass\n+    \"\"\"\n+    )\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+\n+\n def test_async_support(pytester: Pytester) -> None:\n     pytest.importorskip(\"unittest.async_case\")\n \n",
  "pytest-dev__pytest-5262": "",
  "pytest-dev__pytest-5631": "diff --git a/testing/python/integration.py b/testing/python/integration.py\nindex 044a31a..e668847 100644\n--- a/testing/python/integration.py\n+++ b/testing/python/integration.py\n@@ -178,6 +178,23 @@ class TestMockDecoration:\n         reprec = testdir.inline_run()\n         reprec.assertoutcome(passed=2)\n \n+    def test_patch_with_numpy_array(self, testdir):\n+        # Check if patching with a numpy array causes any issues\n+        pytest.importorskip(\"numpy\")\n+        testdir.makepyfile(\n+            \"\"\"\n+            from unittest.mock import patch\n+            import numpy as np\n+\n+            class TestArrayPatch:\n+                @patch('dummy.FOO', new=np.array([-5.5, 3.0]))\n+                def test_patch_with_array(self):\n+                    assert True  # If there's no ValueError, the test passes\n+            \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=1)\n+\n     def test_mock(self, testdir):\n         pytest.importorskip(\"mock\", \"1.0.1\")\n         testdir.makepyfile(\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..46cae70 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -118,6 +118,26 @@ class TestPaste(object):\n             import urllib.request\n \n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n+\n+    def test_create_new_paste_with_text_lexer(self, pastebin, mocked_urlopen):\n+        result = pastebin.create_new_paste(b\"full-paste-contents\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=full-paste-contents\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+        \n+    def test_create_new_paste_http_error(self, pastebin, monkeypatch):\n+        def mocked_urlopen_error(url, data=None):\n+            raise urllib.error.HTTPError(url, 400, \"Bad Request\", hdrs=None, fp=None)\n+\n+        monkeypatch.setattr(urllib.request, \"urlopen\", mocked_urlopen_error)\n+\n+        with pytest.raises(urllib.error.HTTPError):\n+            pastebin.create_new_paste(b\"faulty-contents\")\n         return calls\n \n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n@@ -130,4 +150,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "",
  "pytest-dev__pytest-7205": "",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..bae6318 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -239,6 +239,21 @@ class TestXFail:\n         item = testdir.getitem(\n             \"\"\"\n             import pytest\n+            @pytest.mark.skip\n+            def test_skip_with_runxfail():\n+                pass\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n+        \n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip(reason=\"testing reason\")\n+            def test_skip_with_reason_and_runxfail():\n+                pass\n+            import pytest\n             @pytest.mark.xfail('False')\n             def test_func():\n                 assert 0\n@@ -587,6 +602,21 @@ class TestSkip:\n         testdir.makepyfile(\n             \"\"\"\n             import pytest\n+            @pytest.mark.skip\n+            def test_skip_with_runxfail():\n+                pass\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n+        \n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip(reason=\"testing reason\")\n+            def test_skip_with_reason_and_runxfail():\n+                pass\n+            import pytest\n             @pytest.mark.skip('testing stuff')\n             def test_bar():\n                 pass\n@@ -600,6 +630,21 @@ class TestSkip:\n             \"\"\"\n             import pytest\n             @pytest.mark.skip\n+            def test_skip_with_runxfail():\n+                pass\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n+        \n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip(reason=\"testing reason\")\n+            def test_skip_with_reason_and_runxfail():\n+                pass\n+            import pytest\n+            @pytest.mark.skip\n             def test_foo():\n                 pass\n         \"\"\"\n@@ -611,6 +656,21 @@ class TestSkip:\n         testdir.makepyfile(\n             \"\"\"\n             import pytest\n+            @pytest.mark.skip\n+            def test_skip_with_runxfail():\n+                pass\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n+        \n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip(reason=\"testing reason\")\n+            def test_skip_with_reason_and_runxfail():\n+                pass\n+            import pytest\n             @pytest.mark.skip(reason=\"for lolz\")\n             def test_bar():\n                 pass\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..994c326 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,7 +1,9 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n+from _pytest.pytester import Testdir\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n from _pytest.skipping import pytest_runtest_setup\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..2654c5b 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,6 +513,13 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        # Verifies that different newline characters are preserved by capfd\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n+        assert err == ''\n \n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..0e9885a 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -27,6 +28,30 @@ def test_change_level(caplog):\n     assert \"CRITICAL\" in caplog.text\n \n \n+def test_change_level_undos_handler_level(testdir):\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\"\"\"\n+\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n def test_change_level_undo(testdir):\n     \"\"\"Ensure that 'set_level' is undone after the end of the test\"\"\"\n     testdir.makepyfile(\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..08a8735 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,9 +10,38 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n-\n-\n+from _pytest.pytester import Pytester, Testdir\n+\n+def test_collect_symlink_file(pytester: Pytester) -> None:\n+    \"\"\"A symlinked file is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    file = dir.joinpath(\"test_symlinkfile.py\")\n+    file.write_text(\"def test_symlinkfile(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_file.py\").symlink_to(file)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_collect_multiple_symlink_dirs(pytester: Pytester) -> None:\n+    \"\"\"Multiple symlinked directories are collected.\"\"\"\n+    dir1 = pytester.mkdir(\"dir1\")\n+    dir1.joinpath(\"test_it1.py\").write_text(\"def test_it1(): pass\", \"utf-8\")\n+    dir2 = pytester.mkdir(\"dir2\")\n+    dir2.joinpath(\"test_it2.py\").write_text(\"def test_it2(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir1\").symlink_to(dir1)\n+    pytester.path.joinpath(\"symlink_dir2\").symlink_to(dir2)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=4)\n+\n+def test_collect_nested_symlink_dirs(pytester: Pytester) -> None:\n+    \"\"\"Symlinked directories nested within other directories are collected.\"\"\"\n+    outer_dir = pytester.mkdir(\"outer_dir\")\n+    inner_dir = outer_dir.mkdir(\"inner_dir\")\n+    inner_dir.joinpath(\"test_inner.py\").write_text(\"def test_inner(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_outer_dir\").symlink_to(outer_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+# Existing test cases\n class TestCollector:\n     def test_collect_versus_item(self):\n         from pytest import Collector, Item\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..5d1d260 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,27 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_setUpClass_fixture_is_private(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class ExampleTest(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n \n-def test_setup_class(pytester: Pytester) -> None:\n+            def test_something(self):\n+                pass\n+        \"\"\"\n+    )\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_ExampleTest*\")\n+\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture_ExampleTest*\"])\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..93b4b46 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,6 +574,31 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n+def test_ridgeclassifiercv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    # Single target\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-0.8, -1.0], [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # Multiple targets\n+    y_multi = np.array([[1, 1, 1, -1, -1],\n+                        [1, -1, 1, -1, 1],\n+                        [-1, -1, 1, -1, -1]]).T\n+    n_targets = y_multi.shape[1]\n+    r.fit(x, y_multi)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+\n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..87bc062 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,16 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+def test_int_overflow_fowlkes_mallows_score():\n+    # Test conditions where the calculation of pk and qk might cause overflow\n+    # Create labels that will have a large contingency table leading to large pk, qk\n+    labels_true = np.array([1] * 100000 + [2] * 100000)\n+    labels_pred = np.array([1] * 50000 + [2] * 50000 + [1] * 50000 + [2] * 50000)\n+    \n+    # The calculation of pk and qk will be very large, ensure no overflow warning\n+    fmi_score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert_all_finite(fmi_score)\n+    assert fmi_score >= 0.0 and fmi_score <= 1.0\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..afe7a57 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,6 +558,35 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+def test_countvectorizer_with_custom_vocabulary():\n+    # Define a custom vocabulary\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    \n+    # Initialize CountVectorizer with the custom vocabulary\n+    cv = CountVectorizer(vocabulary=vocab)\n+    \n+    # Verify that get_feature_names works correctly without calling fit\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this'],\n+                       feature_names)\n+    \n+    # Ensure vocabulary_ attribute was set\n+    assert_true(cv.fixed_vocabulary_)\n+    \n+    # Verify transform works as expected\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    \n+    transformed = cv.transform(corpus)\n+    assert_equal(transformed.shape, (4, 9))\n+    assert_equal(transformed.nnz, 19)  # Non-zero elements count\n+\n+    # After transforming, vocabulary_ should be set\n+    assert_true(hasattr(cv, \"vocabulary_\"))\n \n def test_vectorizer_max_features():\n     vec_factories = (\n",
  "scikit-learn__scikit-learn-11310": "",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..97cd648 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -23,6 +23,11 @@ from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n \n from sklearn.exceptions import ConvergenceWarning\n+from sklearn.metrics import log_loss\n+from sklearn.datasets import make_classification\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.utils._testing import assert_array_almost_equal\n+from sklearn.utils._testing import assert_array_equal\n from sklearn.exceptions import ChangedBehaviorWarning\n from sklearn.linear_model.logistic import (\n     LogisticRegression,\n@@ -491,8 +496,33 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n-\n-def test_multinomial_logistic_regression_string_inputs():\n+@pytest.mark.parametrize('scoring', ['neg_log_loss'])\n+def test_logistic_regression_multinomial_predict_proba(scoring):\n+    # Test that LogisticRegression with multi_class='multinomial' calculates\n+    # probabilities using the softmax function correctly.\n+    X, y = make_classification(n_samples=200, n_features=5, n_classes=3,\n+                               n_informative=3, n_redundant=1, random_state=42)\n+    n_samples = X.shape[0]\n+    test_size = n_samples // 5\n+    train, test = np.arange(n_samples - test_size), np.arange(n_samples - test_size, n_samples)\n+\n+    # Initialize logistic regression models with OvR and multinomial\n+    log_reg_ovr = LogisticRegression(fit_intercept=True, multi_class='ovr', solver='lbfgs').fit(X[train], y[train])\n+    log_reg_multi = LogisticRegression(fit_intercept=True, multi_class='multinomial', solver='lbfgs').fit(X[train], y[train])\n+\n+    # Calculate probabilities using both methods\n+    probs_ovr = log_reg_ovr.predict_proba(X[test])\n+    probs_multi = log_reg_multi.predict_proba(X[test])\n+\n+    # Ensure that probabilities calculated by predict_proba for multinomial\n+    # approach match expected probabilities from the softmax using neg_log_loss\n+    scorer = get_scorer(scoring)\n+    score_multi = scorer(log_reg_multi, X[test], y[test])\n+    \n+    # Calculate log loss manually using the probabilities from multinomial\n+    expected_loss_multi = log_loss(y[test], probs_multi, normalize=True)\n+\n+    assert_array_almost_equal(score_multi, -expected_loss_multi)\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..f0bf648 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,7 +154,17 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n-def test_clone_sparse_matrices():\n+from sklearn.base import clone\n+from sklearn.preprocessing import StandardScaler\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    # This specifically tests the issue mentoned, where types are used instead\n+    # of instances.\n+    clf = StandardScaler(with_mean=StandardScaler)\n+    clf2 = clone(clf, safe=False)\n+    \n+    assert clf.with_mean is clf2.with_mean\n     sparse_matrix_classes = [\n         getattr(sp, name)\n         for name in dir(sp) if name.endswith('_matrix')]\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..74661fe 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -5,7 +5,34 @@ from distutils.version import LooseVersion\n import numpy as np\n from scipy import linalg\n \n+@pytest.mark.parametrize('init_copy_X, fit_copy_X, expected_copy_behavior', [\n+    (True, None, True),  # default behavior, copy should be True\n+    (False, None, False),  # respect initialization parameter when fit param is None\n+    (True, False, False),  # fit param overrides initialization\n+    (False, True, True),   # fit param overrides initialization\n+])\n+def test_lasso_lars_copyX_with_fit_default(init_copy_X, fit_copy_X, expected_copy_behavior):\n+    \"\"\"\n+    Test the behavior of LassoLarsIC with regard to the copy_X parameter\n+    when it is explicitly set to None in the fit method.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=init_copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+\n+    # fit the model and check if the copy_X behavior is as expected\n+    if fit_copy_X is None:\n+        lasso_lars.fit(X, y)\n+    else:\n+        lasso_lars.fit(X, y, copy_X=fit_copy_X)\n+\n+    assert expected_copy_behavior == np.array_equal(X, X_copy)\n+\n import pytest\n+import numpy as np\n+from sklearn.linear_model.least_angle import LassoLarsIC\n \n from sklearn.model_selection import train_test_split\n from sklearn.utils.testing import assert_equal\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..95f3d9e 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -494,7 +494,32 @@ def test_shuffle_stratifiedkfold():\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n \n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n+def test_different_batches_with_different_random_states():\n+    # Test that different random states lead to different splits\n+    X = np.array(range(20))\n+    y = np.array([0] * 10 + [1] * 10)\n+\n+    kf1 = StratifiedKFold(n_splits=10, shuffle=True, random_state=42)\n+    kf2 = StratifiedKFold(n_splits=10, shuffle=True, random_state=43)\n+\n+    test_indices_1 = [test for _, test in kf1.split(X, y)]\n+    test_indices_2 = [test for _, test in kf2.split(X, y)]\n+\n+    assert any(set(test1) != set(test2) for test1, test2 in zip(test_indices_1, test_indices_2))\n+\n+def test_stratified_kfold_shuffling_performance():\n+    # Check shuffling leads to a proper distribution of classes in folds\n+    X = np.array(range(100))\n+    y = np.array([0] * 50 + [1] * 50)  # 50 samples of each class\n+\n+    skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+\n+    for train_index, test_index in skf.split(X, y):\n+        y_train, y_test = y[train_index], y[test_index]\n+        assert len(y_train) == 80\n+        assert len(y_test) == 20\n+        assert np.isclose(np.mean(y_train), 0.5, atol=0.1)  # Within 10% tolerance\n+        assert np.isclose(np.mean(y_test), 0.5, atol=0.1)  # Same for test\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n     # for this data. We can highlight this fact by computing k-fold cross-\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..b28cf44 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -189,7 +189,7 @@ def test_invalid_strategy_option():\n     [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n      ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n      ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..4e7c043 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,16 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Test consistency of fit_predict and predict with n_init > 1\n+    rng = np.random.RandomState(0)\n+    X = rng.randn(1000, 5)\n+    \n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred_fit_predict = gm.fit_predict(X)\n+    y_pred_predict = gm.predict(X)\n+    \n+    assert_array_equal(y_pred_fit_predict, y_pred_predict)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 4594f40..8fbe75e 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -233,7 +233,9 @@ class Pipeline(_BaseComposition):\n         estimator = self.steps[-1][1]\n         return 'passthrough' if estimator is None else estimator\n \n-    # Estimator interface\n+    def __len__(self):\n+        \"\"\"Return the number of steps in the Pipeline.\"\"\"\n+        return len(self.steps)\n \n     def _fit(self, X, y=None, **fit_params):\n         # shallow copy of steps - this should really be steps_\n",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..7ddf7c9 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -506,4 +506,59 @@ def test_transform():\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )  \n+ \n+def test_voting_classifier_with_none_estimator_handling():\n+    from sklearn.ensemble import VotingClassifier\n+    from sklearn.linear_model import LogisticRegression\n+    from sklearn.ensemble import RandomForestClassifier\n+    from sklearn.datasets import load_iris\n+    import numpy as np\n+\n+    X, y = load_iris(return_X_y=True)\n+\n+    # Create a VotingClassifier\n+    voter = VotingClassifier(\n+        estimators=[('lr', LogisticRegression()),\n+                    ('rf', RandomForestClassifier(n_estimators=5))]\n+    )\n+ \n+    # Normal fit with weights \n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    \n+    # Set one estimator to None\n+    voter.set_params(lr=None)\n+    \n+    # Expectation: Should handle None estimator without failing\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    \n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n+\n+def test_voting_regressor_with_none_estimator_handling():\n+    from sklearn.ensemble import VotingRegressor\n+    from sklearn.linear_model import LinearRegression\n+    from sklearn.ensemble import RandomForestRegressor\n+    import numpy as np\n+\n+    # Create some mock data\n+    X_r = np.random.rand(100, 3)\n+    y_r = np.random.rand(100)\n+\n+    # Create a VotingRegressor\n+    voter = VotingRegressor(\n+        estimators=[('lr', LinearRegression()),\n+                    ('rf', RandomForestRegressor(n_estimators=5))]\n+    )\n+\n+    # Normal fit with weights\n+    voter.fit(X_r, y_r, sample_weight=np.ones(y_r.shape))\n+\n+    # Set one estimator to None\n+    voter.set_params(lr=None)\n+\n+    # Expectation: Should handle None estimator without failing\n+    voter.fit(X_r, y_r, sample_weight=np.ones(y_r.shape))\n+\n+    y_pred = voter.predict(X_r)\n+    assert y_pred.shape == y_r.shape\n",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..c548b04 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,8 +396,32 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+def test_single_feature_export_text():\n+    X_single = [[-2], [-1], [-1], [1], [1], [2]]\n+    y_single = [-1, -1, -1, 1, 1, 1]\n \n-def test_plot_tree_entropy(pyplot):\n+    clf = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf.fit(X_single, y_single)\n+\n+    expected_report = dedent(\"\"\"\n+    |--- feature_0 <= 0.00\n+    |   |--- class: -1\n+    |--- feature_0 >  0.00\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    # Test with no feature names provided\n+    assert export_text(clf) == expected_report\n+\n+    # Test with single feature name provided\n+    expected_report_named = dedent(\"\"\"\n+    |--- sepal_length <= 0.00\n+    |   |--- class: -1\n+    |--- sepal_length >  0.00\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+    \n+    assert export_text(clf, feature_names=['sepal_length']) == expected_report_named\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..915e336 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1553,8 +1553,34 @@ def test_LogisticRegressionCV_no_refit(multi_class):\n     assert lrcv.l1_ratio_.shape == (n_classes,)\n     assert lrcv.coef_.shape == (n_classes, n_features)\n \n+import pytest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn.datasets import make_classification\n+\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_issue(penalty, multi_class):\n+    # Testing LogisticRegressionCV with refit=False to ensure no IndexError\n+\n+    X, y = make_classification(n_samples=1000, n_features=3, n_informative=3, n_classes=2, random_state=29)\n \n-def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    lrcv = LogisticRegressionCV(\n+        penalty=penalty, \n+        solver='saga', \n+        cv=5, \n+        tol=1e-2, \n+        refit=False, \n+        multi_class=multi_class,\n+        l1_ratios=l1_ratios\n+    )\n+\n+    lrcv.fit(X, y)\n     # Make sure the shapes of scores_ and coefs_paths_ attributes are correct\n     # when using elasticnet (added one dimension for l1_ratios)\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..6acf782 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -23,6 +23,17 @@ def test_get_deps_info():\n     assert 'Cython' in deps_info\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n+    assert 'joblib' in deps_info  # Added test for joblib\n+    deps_info = _get_deps_info()\n+\n+    assert 'pip' in deps_info\n+    assert 'setuptools' in deps_info\n+    assert 'sklearn' in deps_info\n+    assert 'numpy' in deps_info\n+    assert 'scipy' in deps_info\n+    assert 'Cython' in deps_info\n+    assert 'pandas' in deps_info\n+    assert 'matplotlib' in deps_info\n \n \n def test_show_versions_with_blas(capsys):\n@@ -30,4 +41,4 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "",
  "scikit-learn__scikit-learn-14710": "diff --git a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\nindex 7e8bccd..45fd7e0 100644\n--- a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n@@ -414,4 +414,37 @@ def test_infinite_values_missing_values():\n                                                learning_rate=1, max_depth=2)\n \n     assert stump_clf.fit(X, y_isinf).score(X, y_isinf) == 1\n-    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+\n+import pytest\n+import numpy as np\n+from sklearn.experimental import enable_hist_gradient_boosting\n+from sklearn.ensemble import HistGradientBoostingClassifier\n+\n+@pytest.mark.parametrize(\"scoring\", [None, 'loss'])\n+def test_string_target_early_stopping(scoring):\n+    # Regression tests for #14709 where the targets need to be encoded before\n+    # computing the score\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    # Use string targets\n+    y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10, scoring=scoring)\n+    gbrt.fit(X, y)\n+\n+@pytest.mark.parametrize(\"scoring\", ['accuracy', 'precision'])\n+def test_string_target_various_scorers(scoring):\n+    # Test HistGradientBoostingClassifier with different scorers\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['cat'] * 50 + ['dog'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10, scoring=scoring)\n+    gbrt.fit(X, y)\n+\n+def test_no_early_stopping_with_string_targets():\n+    # Test behavior when early stopping is disabled, should work normally\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['apple'] * 50 + ['orange'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=None)\n+    gbrt.fit(X, y)\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..a1e7018 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -690,7 +690,24 @@ def test_sparse_precomputed():\n         assert \"Sparse precomputed\" in str(e)\n \n \n-def test_linearsvc_parameters():\n+from sklearn import svm\n+from scipy import sparse\n+import numpy as np\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for zero division error in sparse fit\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear', C=316.227766017, epsilon=0.1, max_iter=15000)\n+    model.fit(X_train, y_train)\n+    \n+    # Ensure no support vectors remain when issue occurs\n+    assert not model.support_vectors_.data.size\n+    # Ensure dual_coef_ attribute is correctly initialized as empty\n+    assert not model.dual_coef_.data.size\n     # Test possible parameter combinations in LinearSVC\n     # Generate list of possible parameter combinations\n     losses = ['hinge', 'squared_hinge', 'logistic_regression', 'foo']\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..8f53330 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -92,7 +92,20 @@ def test_strip_accents():\n     expected = '\\u0627'  # simple alef: \u0627\n     assert strip_accents_unicode(a) == expected\n \n-    # mix letters accentuated and not\n+    # strings already in NFKD form should have accents removed\n+    a = 'n\\u0303'  # n followed by combining tilde\n+    expected = 'n'\n+    assert strip_accents_unicode(a) == expected\n+\n+    # multiple combining marks should be removed\n+    a = 'o\\u0308\\u0304'  # o with diaeresis and macron\n+    expected = 'o'\n+    assert strip_accents_unicode(a) == expected\n+\n+    # standalone combining marks should be removed\n+    a = '\\u0300\\u0301\\u0302\\u0303'  # combining grave accent, acute accent, circumflex accent, tilde\n+    expected = ''\n+    assert strip_accents_unicode(a) == expected\n     a = \"this is \u00e0 test\"\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..5d30b6a 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1524,6 +1524,38 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     assert_allclose(X_imputed[:, 1], 0)\n \n \n+def test_iterative_imputer_constant_fill_value():\n+    \"\"\"Check that we propagate properly the parameter `fill_value`.\"\"\"\n+    X = np.array([[-1, 2, 3, -1], [4, -1, 5, -1], [6, 7, -1, -1], [8, 9, 0, -1]])\n+\n+    fill_value = 100\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_trans = imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, np.full(4, fill_value))\n+    assert np.all(X_trans == 100)  # Expecting all -1 replaced by fill_value\n+\n+\n+def test_iterative_imputer_fill_value_nan():\n+    \"\"\"Testing `fill_value` with np.nan for compatibility.\"\"\"\n+    X = np.array([[-1, np.nan, 3, -1], [np.nan, -1, 5, -1], [6, 7, -1, -1], [-1, 9, 0, -1]])\n+\n+    fill_value = np.nan\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_trans = imputer.fit_transform(X)\n+    assert np.allclose(np.nan_to_num(X_trans, nan=0.0), np.nan_to_num(X, nan=0.0))  # -1's replaced by nan\n+    assert_array_equal(imputer.initial_imputer_.statistics_, np.array([np.nan, np.nan, 3, np.nan]))\n+\n+\n @pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n def test_knn_imputer_keep_empty_features(keep_empty_features):\n     \"\"\"Check the behaviour of `keep_empty_features` for `KNNImputer`.\"\"\"\n",
  "scikit-learn__scikit-learn-25931": "",
  "scikit-learn__scikit-learn-25973": "diff --git a/sklearn/feature_selection/tests/test_sequential.py b/sklearn/feature_selection/tests/test_sequential.py\nindex 42e1fbb..b8ae1d8 100644\n--- a/sklearn/feature_selection/tests/test_sequential.py\n+++ b/sklearn/feature_selection/tests/test_sequential.py\n@@ -313,4 +313,24 @@ def test_backward_neg_tol():\n     new_score = lr.fit(Xr, y).score(Xr, y)\n \n     assert 0 < sfs.get_support().sum() < X.shape[1]\n-    assert new_score < initial_score\n+    assert new_score < initial_score\n+\n+def test_sequential_feature_selector_with_splits():\n+    \"\"\"Test that SequentialFeatureSelector works with explicit cv splits.\"\"\"\n+    X, y = make_classification(random_state=0)\n+\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2:] = 1\n+\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+\n+    knc = KNeighborsClassifier(n_neighbors=5)\n+\n+    sfs = SequentialFeatureSelector(knc, n_features_to_select=5, cv=splits)\n+    \n+    try:\n+        sfs.fit(X, y)\n+        print(\"Test passed: SequentialFeatureSelector works with cv splits\")\n+    except Exception as e:\n+        print(f\"Test failed: An exception occurred - {e}\")\n",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..0d28ee7 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -23,6 +23,10 @@ from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n \n+from sklearn.feature_selection import VarianceThreshold\n+import pandas as pd\n+import pytest\n+import numpy as np\n \n class Trans(TransformerMixin, BaseEstimator):\n     def fit(self, X, y=None):\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..9e71c55 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,8 +945,30 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+    \n+    # Test labels consistency\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n+    \n+    # Test inertia consistency\n+    inertia_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).inertia_\n+    assert_almost_equal(inertia_1, inertia_2)\n+\n+def test_kmeans_inertia_and_labels_for_various_n_jobs():\n+    rnd = np.random.RandomState(42)\n+    X = rnd.normal(size=(100, 5))\n \n-def test_minibatch_kmeans_partial_fit_int_data():\n+    inertia_1 = KMeans(n_clusters=4, random_state=42, n_jobs=1).fit(X).inertia_\n+    for n_jobs in range(2, 5):\n+        kmeans = KMeans(n_clusters=4, random_state=42, n_jobs=n_jobs).fit(X)\n+        assert_almost_equal(inertia_1, kmeans.inertia_)\n+        assert_array_equal(KMeans(n_clusters=4, random_state=42, n_jobs=1).fit(X).labels_, kmeans.labels_)\n     # Issue GH #14314\n     X = np.array([[-1], [1]], dtype=np.int)\n     km = MiniBatchKMeans(n_clusters=2)\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..39d4e7d 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -251,6 +252,24 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"\\n\")\n \n \n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_dedent_prepend(literal_inc_path):\n+    # Test case for issue with prepending not retaining correct indentation\n+    options = {\n+        'lines': '17-23',  # Only include specific lines of interest\n+        'dedent': 4,\n+        'prepend': '      <plugin>'\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"      <plugin>\\n\"\n+                       \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                       \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                       \"        <version>2.15.0</version>\\n\"\n+                       \"        <configuration>\\n\"\n+                       \"          <verifyFailOn>strict</verifyFailOn>\\n\"\n+                       \"        </configuration>\\n\")\n+\n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n     # tab-width: 4\n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..8f412ed 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1022,7 +1022,8 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '\\n'\n             '   Return type:\\n'\n             '      None\\n' == context)\n-\n+import pytest\n+from sphinx.testing.fixtures import app\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n@@ -1053,7 +1054,8 @@ def test_autodoc_typehints_description_with_documented_init(app):\n             '\\n'\n             '      Return type:\\n'\n             '         None\\n' == context)\n-\n+import pytest\n+from sphinx.testing.fixtures import app\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..c6340ad 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -5,6 +6,7 @@ import os\n import re\n import subprocess\n from subprocess import PIPE, CalledProcessError\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n import pytest\n \n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..9595725 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -148,6 +148,41 @@ def test_glossary(app):\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n \n+def test_glossary_case_sensitivity(app):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       lowercase description\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       capitalized description\\n\")\n+\n+    # Parse the doctree\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [glossary, definition_list, \n+         ([definition_list_item, ([term, (\"mysql\", index)],\n+                                  definition)],\n+          [definition_list_item, ([term, (\"MySQL\", index)],\n+                                  definition)])]))\n+\n+    # Verify entries for lowercase 'mysql' term\n+    assert_node(doctree[0][0][0][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+    assert_node(doctree[0][0][0][1],\n+                [nodes.definition, nodes.paragraph, \"lowercase description\"])\n+\n+    # Verify entries for capitalized 'MySQL' term\n+    assert_node(doctree[0][0][1][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree[0][0][1][1],\n+                [nodes.definition, nodes.paragraph, \"capitalized description\"])\n+\n+    # Check index for term accuracy\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n+\n def test_glossary_warning(app, status, warning):\n     # empty line between terms\n     text = (\".. glossary::\\n\"\n",
  "sphinx-doc__sphinx-7757": "",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..465bf96 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -11,6 +12,7 @@\n import abc\n import sys\n from importlib import import_module\n+from typing import TypeVar, Generic\n \n import pytest\n \n@@ -52,8 +54,28 @@ def test_MockObject():\n     assert isinstance(obj.other_method(), SubClass)\n \n \n+def test_mock_generics():\n+    T = TypeVar('T')\n+\n+    class GenericClass(Generic[T]):\n+        \"\"\"A generic class for testing.\"\"\"\n+        def __init__(self, value: T) -> None:\n+            self.value = value\n+\n+        def get_value(self) -> T:\n+            return self.value\n+    \n+    # Create an instance of GenericClass with an int type\n+    instance_int = GenericClass[int](10)\n+    assert instance_int.get_value() == 10\n+\n+    # Create an instance of GenericClass with a str type\n+    instance_str = GenericClass[str](\"test\")\n+    assert instance_str.get_value() == \"test\"\n+\n+    # Checking documentation is preserved\n+    assert GenericClass.__doc__ == \"A generic class for testing.\"\n def test_mock():\n-    modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n     assert modname not in sys.modules\n     with pytest.raises(ImportError):\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..f1f5899 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -165,11 +166,57 @@ class SkipMemberTest(TestCase):\n                         SampleClass.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_in_docs(self):\n+        class DecoratedInit:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"This is a decorated __init__ method.\"\"\"\n+                pass\n+\n+        # Checking that decorated init is included\n+        self.assertSkip('class', '__init__',\n+                        DecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n+    def test_undecorated_init_in_docs(self):\n+        class NonDecoratedInit:\n+            def __init__(self):\n+                \"\"\"This is a non-decorated __init__ method.\"\"\"\n+                pass\n+\n+        # Checking that non-decorated init is included\n+        self.assertSkip('class', '__init__',\n+                        NonDecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_class_special_undoc(self):\n         self.assertSkip('class', '__special_undoc__',\n                         SampleClass.__special_undoc__, True,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_in_docs(self):\n+        class DecoratedInit:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"This is a decorated __init__ method.\"\"\"\n+                pass\n+\n+        # Checking that decorated init is included\n+        self.assertSkip('class', '__init__',\n+                        DecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n+    def test_undecorated_init_in_docs(self):\n+        class NonDecoratedInit:\n+            def __init__(self):\n+                \"\"\"This is a non-decorated __init__ method.\"\"\"\n+                pass\n+\n+        # Checking that non-decorated init is included\n+        self.assertSkip('class', '__init__',\n+                        NonDecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_private_doc(self):\n         self.assertSkip('exception', '_private_doc',\n                         SampleError._private_doc, False,\n@@ -185,6 +232,29 @@ class SkipMemberTest(TestCase):\n                         SampleError.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_decorated_init_in_docs(self):\n+        class DecoratedInit:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"This is a decorated __init__ method.\"\"\"\n+                pass\n+\n+        # Checking that decorated init is included\n+        self.assertSkip('class', '__init__',\n+                        DecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n+    def test_undecorated_init_in_docs(self):\n+        class NonDecoratedInit:\n+            def __init__(self):\n+                \"\"\"This is a non-decorated __init__ method.\"\"\"\n+                pass\n+\n+        # Checking that non-decorated init is included\n+        self.assertSkip('class', '__init__',\n+                        NonDecoratedInit.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_special_undoc(self):\n         self.assertSkip('exception', '__special_undoc__',\n                         SampleError.__special_undoc__, True,\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..acb3482 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -8,6 +8,8 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import os\n+\n import json\n import re\n from unittest import mock\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..42c0af3 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -10,8 +11,32 @@\n \n import pytest\n \n+import pytest\n from test_ext_autodoc import do_autodoc\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_specific_private_method,_another_private_method\"}\n+    actual = do_autodoc(app, 'module', 'target.private_specific', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private_specific',\n+        '',\n+        '',\n+        '',\n+        '   :module: target.private_specific',\n+        '',\n+        '   _specific_private_method does something specific.',\n+        '',\n+        '.. py:function:: _another_private_method()',\n+        '   :module: target.private_specific',\n+        '',\n+        '   _another_private_method handles another case.',\n+        '',\n+    ]\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_private_field(app):\n",
  "sphinx-doc__sphinx-8120": "",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..1de68e3 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,10 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+from sphinx.testing.path import path\n+import pytest\n+import sys\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..3879e57 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -20,6 +20,8 @@ from sphinx import addnodes\n from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n+from sphinx.ext.autodoc import ModuleDocumenter\n+\n from sphinx.util.docutils import LoggingReporter\n \n try:\n",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..4c8b3cd 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,22 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_enum_render_as_expected():\n+    import enum\n+    from sphinx.util import inspect\n+    \n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:\n+        pass\n \n-def test_getslots():\n+    # Assume inspect.object_description would be used to produce function signatures\n+    description = inspect.object_description(ugly_enum_func)\n+    # We expect the default value to be shown without <...>\n+    expected_snippet = 'ugly_enum_func(e: MyEnum = MyEnum.ValueA)'\n+    assert expected_snippet in description\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..d6f3eab 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -240,8 +240,24 @@ def test_default_filename(tempdir):\n     ns = {}\n     exec(conffile.read_text(), ns)\n \n+def test_exits_when_existing_confpy(monkeypatch):\n+    # Mock the path.isfile function to simulate the presence of conf.py\n+    def mock_isfile(path):\n+        return True\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n \n-def test_extensions(tempdir):\n+    # Define mock user input: pressing Enter\n+    qs.term_input = lambda prompt: ''\n+\n+    # Prepare a dictionary to capture the quickstart configuration\n+    d = {}\n+\n+    # Verify that sphinx-quickstart exits when Enter is pressed\n+    with pytest.raises(SystemExit):\n+        qs.ask_user(d)\n+\n+\n+# Original test case for extensions remains unchanged\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..518e99e 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,9 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n+    (\"(1)\", \"1\"),                                 # Not a tuple, just a parenthesized number\n+    (\"(1, 2)\", \"(1, 2)\"),                         # Tuple (two elements)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..b1193d3 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,6 +847,33 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n+def test_pyproperty_with_type_annotations(app):\n+    text = (\".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    # Check if start property type (Point) is correctly recognized as a pending_xref\n+    assert_node(doctree[1][1][2], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"start\"],\n+                                                     [desc_annotation, (\": \",\n+                                                                        [pending_xref, \"Point\"])])],\n+                                   [desc_content, ()]))\n+    # Check if end property type (Point) is correctly recognized as a pending_xref\n+    assert_node(doctree[1][1][4], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [desc_annotation, (\": \",\n+                                                                        [pending_xref, \"Point\"])])],\n+                                   [desc_content, ()]))\n+    assert 'Square.start' in domain.objects\n+    assert domain.objects['Square.start'] == ('index', 'Square.start', 'property', False)\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n+\n def test_pydecorator_signature(app):\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..91ab879 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])  # No parens\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 6ac780b..eb3825d 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -51,7 +51,7 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n                               'but it is not loaded.'), extname)\n             continue\n \n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        if extension.version == 'unknown version' or version.parse(reqversion) > version.parse(extension.version):\n             raise VersionRequirementError(__('This project needs the extension %s at least in '\n                                              'version %s and therefore cannot be built with '\n                                              'the loaded version (%s).') %\n",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..aa452d4 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,7 +236,34 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n-def test_issue_9214():\n+from sympy import sqrt\n+from sympy.geometry import Point2D, Point3D\n+\n+def test_issue_11617():\n+    p1 = Point3D(1,0,2)\n+    p2 = Point2D(2,0)\n+    assert p1.distance(p2) == sqrt(5)\n+    assert p2.distance(p1) == sqrt(5)  # Check the reverse direction as well\n+\n+def test_point2D_3D_distance():\n+    # Further tests for different dimensionality\n+    p2d = Point2D(1, 1)\n+    p3d = Point3D(1, 1, 1)\n+    assert p2d.distance(p3d) == 1\n+    assert p3d.distance(p2d) == 1\n+\n+    # Edge case: zero distance for identical projections\n+    p2d_same_projection = Point2D(1, 1)\n+    assert p3d.distance(p2d_same_projection) == 1\n+\n+    # Different coordinates, no zeros\n+    p3d_diff = Point3D(2, 2, 2)\n+    p2d_diff = Point2D(1, 1)\n+    assert p3d_diff.distance(p2d_diff) == sqrt(6)\n+\n+    # Test with another 3D point versus 2D\n+    p3d_another = Point3D(3, 0, -1)\n+    assert p2d.distance(p3d_another) == sqrt(11)\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n     p3 = Point3D(7, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..e2546f9 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,18 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    assert f(f(2)).evalf() == Float(16)\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+    assert g(g(2)).evalf() == Float(8)\n+    # Nested further with compositions\n+    assert f(g(f(g(2)))).evalf() == Float(256)\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..d628851 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -71,8 +71,18 @@ def test_ZeroMatrix_doit():\n     assert Znn.doit() == ZeroMatrix(2*n, n)\n     assert isinstance(Znn.doit().rows, Mul)\n \n+from sympy import Identity, Sum, symbols\n \n def test_Identity():\n+    i, j = symbols('i j', integer=True)\n+    # Define the identity matrix\n+    n_val = 3\n+    In = Identity(n_val)\n+\n+    # Verify that the sum of all elements of the identity matrix is equal to n\n+    assert Sum(Sum(In[i, j], (i, 0, n_val-1)), (j, 0, n_val-1)).doit() == n_val\n+\n+    # Existing Identity tests\n     A = MatrixSymbol('A', n, m)\n     In = Identity(n)\n     Im = Identity(m)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..4f8fbc6 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -350,6 +350,14 @@ def test_args():\n            # enclosing brackets needed on 0\n     raises(ValueError, lambda: Permutation([1, 1, 0]))\n     raises(ValueError, lambda: Permutation([[1], [1, 2]]))\n+    \n+    # Test handling of non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # identity permutation\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])  # (0, 1) -> (1, 2)\n+    assert Permutation([[0, 1], [0, 2]]) == Permutation([0, 2, 1])  # non-disjoint cycles\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])  # double swaps should cancel out\n+    assert Permutation([[0, 2], [1, 0], [0, 2]]) == Permutation([0, 1, 2])  # multiple cycles\n+    assert Permutation([[0, 2], [2, 1]]) == Permutation([2, 0, 1])  # simple cycle override\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex fa86bc3..97ebc82 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -1273,8 +1273,25 @@ def test_zeros_ones_fill():\n     assert zeros(2, 3) == Matrix(2, 3, [0]*6)\n     assert ones(2, 3) == Matrix(2, 3, [1]*6)\n \n-\n-def test_empty_zeros():\n+def test_matrix_hstack_vstack_issue():\n+    from sympy import Matrix\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(0, 1)\n+    M3 = Matrix.zeros(0, 2)\n+    M4 = Matrix.zeros(0, 3)\n+    assert Matrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+\n+    M1 = Matrix.zeros(1, 0)\n+    M2 = Matrix.zeros(1, 1)\n+    M3 = Matrix.zeros(1, 2)\n+    M4 = Matrix.zeros(1, 3)\n+    assert Matrix.hstack(M1, M2, M3, M4).shape == (1, 6)\n+\n+    N1 = Matrix.zeros(0, 0)\n+    N2 = Matrix.zeros(1, 0)\n+    N3 = Matrix.zeros(2, 0)\n+    N4 = Matrix.zeros(3, 0)\n+    assert Matrix.vstack(N1, N2, N3, N4).shape == (6, 0)\n     a = zeros(0)\n     assert a == Matrix()\n     a = zeros(0, 2)\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..45d70ef 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -230,8 +230,21 @@ def test_evalf_bugs():\n     #issue 11518\n     assert NS(2*x**2.5, 5) == '2.0000*x**2.5000'\n \n-\n-def test_evalf_integer_parts():\n+from sympy import Symbol, Mul, Max, S\n+\n+def test_issue_13076_evalf_unboundlocalerror():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    \n+    # Original test case\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    \n+    # Additional test cases to ensure robustness\n+    assert NS(Mul(x, Max(0, y), y, evaluate=False).evalf()) == 'x*Max(0, y)*y'\n+    assert NS(Mul(Max(0, x), y, evaluate=False).evalf()) == 'Max(0, x)*y'\n+    assert NS(Mul(Max(0, y), 2, x, evaluate=False).evalf()) == '2*x*Max(0, y)'\n+    assert NS(Mul(Max(0, Max(1, y)), x, evaluate=False).evalf()) == 'x*Max(0, Max(1, y))'\n+    assert NS(Mul(Max(-1, y), x + y, evaluate=False).evalf()) == 'Max(-1, y)*(x + y)'\n     a = floor(log(8)/log(2) - exp(-1000), evaluate=False)\n     b = floor(log(8)/log(2), evaluate=False)\n     assert a.evalf() == 3\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..8f4de85 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -273,7 +273,19 @@ def test_coth():\n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n \n-def test_coth_series():\n+def test_coth_subs_issue():\n+    x = Symbol('x')\n+    # We need to check that specific integral value substitutions do not raise errors.\n+    e = coth(log(tan(x)))\n+    test_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for value in test_values:\n+        try:\n+            e.subs(x, value)\n+        except NameError as e:\n+            assert False, f\"NameError was raised for x = {value}: {e}\"\n+        except Exception as e:\n+            # This catches any unexpected exceptions\n+            pass  # We do not expect any specific result, just no NameError\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..f29356b 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -165,6 +165,8 @@ def test_difference():\n     assert -1 in S.Reals - S.Naturals\n \n \n+from sympy import Symbol, FiniteSet, Interval, Complement, S, Union, pi\n+\n def test_Complement():\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n@@ -187,8 +189,15 @@ def test_Complement():\n \n     assert S.Reals - Union(S.Naturals, FiniteSet(pi)) == \\\n             Intersection(S.Reals - S.Naturals, S.Reals - FiniteSet(pi))\n-\n-def test_complement():\n+    # Issue test: Complement doesn't work when input is a mixture of Symbols and numbers\n+    x, y = Symbol('x'), Symbol('y')\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+    assert Complement(FiniteSet(x, 3, y), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+    assert Complement(FiniteSet(3, x, y), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+\n+    # Additional edge cases\n+    assert Complement(FiniteSet(15, x, y), Interval(-10, 10)) == FiniteSet(15, x, y)  # Number outside interval\n+    assert Complement(FiniteSet(x, y, -15), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))  # Negative number outside interval\n     assert Interval(0, 1).complement(S.Reals) == \\\n         Union(Interval(-oo, 0, True, True), Interval(1, oo, True, True))\n     assert Interval(0, 1, True, False).complement(S.Reals) == \\\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..1c72375 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -195,6 +195,19 @@ def test_row_insert():\n         assert flatten(eye_Shaping(3).row_insert(i, r4).col(0).tolist()) == l\n \n def test_col_insert():\n+    # Test case based on the issue 13643:\n+    M = Matrix.eye(6)\n+    V = Matrix.ones(6, 2) * 2\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n     c4 = Matrix([4, 4, 4])\n     for i in range(-4, 5):\n         l = [0, 0, 0]\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..6056742 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -678,6 +678,29 @@ def test_Poly_mul():\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n \n+from sympy import symbols, Poly, S\n+\n+def test_issue_13079():\n+    x = symbols('x')\n+    # Test cases based on the described issue\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+\n+    # Additional test cases to ensure robustness\n+    assert Poly(x + 1)*x == Poly(x**2 + x, x, domain='ZZ')\n+    assert x*Poly(x + 1) == Poly(x**2 + x, x, domain='ZZ')\n+    assert S(3)*Poly(x) == Poly(3*x, x, domain='ZZ')\n+    assert S(-3)*Poly(x + 1) == Poly(-3*x - 3, x, domain='ZZ')\n+    assert Poly(x - 1)*S(5) == Poly(5*x - 5, x, domain='ZZ')\n+\n+    # Test with different variables\n+    y = symbols('y')\n+    assert Poly(x)*y == y*Poly(x, x, domain='ZZ')\n+    assert y*Poly(x) == y*Poly(x, x, domain='ZZ')\n+\n def test_Poly_sqr():\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..6c4d4a5 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -55,6 +55,28 @@ def test_printmethod():\n     assert latex(R(x)) == \"foo\"\n \n \n+def test_latex_mul_symbol_customization():\n+    # Test the capability of using custom multiplication symbols.\n+    assert latex(3*x**2*y, mul_symbol=r\"\\,\") == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol=r\"\\,\") == r\"1.5\\,3^{x}\"\n+\n+    # Ensure the default behavior remains unchanged for None, 'ldot', 'dot', and 'times'\n+    assert latex(3*x**2*y) == \"3 x^{2} y\"\n+    assert latex(3*x**2*y, mul_symbol='ldot') == r\"3 \\,.\\, x^{2} \\,.\\, y\"\n+    assert latex(3*x**2*y, mul_symbol='dot') == r\"3 \\cdot x^{2} \\cdot y\"\n+    assert latex(3*x**2*y, mul_symbol='times') == r\"3 \\times x^{2} \\times y\"\n+\n+    # Test various valid LaTeX symbols or combinations as `mul_symbol`\n+    assert latex(3*x**2*y, mul_symbol=r\"\\times\") == r\"3\\times x^{2}\\times y\"\n+    assert latex(3*x**2*y, mul_symbol=r\"\\,\\cdot\\,\") == r\"3\\,\\cdot\\,x^{2}\\,\\cdot\\,y\"\n+    assert latex(3*x**2*y, mul_symbol='') == r\"3x^{2}y\"\n+\n+    # Invalid mul_symbol usage should raise an error - assuming future implementations \n+    # might raise errors for invalid symbols\n+    # This depends on whether error handling is implemented in the function.\n+    # assert raises(ValueError, lambda: latex(3*x**2*y, mul_symbol='invalid_symbol'))\n+\n+\n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n     assert latex(x**2) == \"x^{2}\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..da646bb 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -307,8 +307,29 @@ def test_tolist():\n     m = Matrix(lst)\n     assert m.tolist() == lst\n \n-\n-def test_as_mutable():\n+from sympy import symbols, Matrix\n+from sympy.abc import a\n+\n+def test_issue_13835():\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    # Existing tests from original patch\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n+    # Additional tests to verify fix\n+    # Determinant for smaller matrices as described in the issue\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a\n+    expected_det_3 = 2 * a * (a + 2) + 2 * a * (2 * a + 1) - 3 * a * (2 * a + 2)\n+    assert M(3).det() == expected_det_3\n+    assert M(4).det() == 0\n+\n+    # Test for issue 5 with expected result 0\n+    assert M(5).det() == 0\n+\n+    # Attempting slightly larger matrices that were problematic\n+    # Check if they handle properly without error or nan\n+    assert isinstance(M(8).det(), int)\n     assert zeros(0, 3).as_mutable() == zeros(0, 3)\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..705ee8b 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -708,8 +708,34 @@ def test_issue_10003():\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n-\n-def test_precomputed_cdf():\n+def test_precomputed_cdf_validation():\n+    x = symbols(\"x\", real=True, finite=True)\n+    a, b = S(1)/3, S(1)/5\n+    assert simplify(cdf(Arcsin(\"A\", 0, 3))(1) - 2*asin(sqrt((-0 + 1)/(0 - 3)))/pi).is_zero\n+    assert simplify(cdf(Dagum(\"D\", a, b, 2))(3) - (1 + (3/b)**(-a))**(-2)).is_zero\n+    assert simplify(cdf(Erlang(\"E\", 1, 1))(1) - (1 - exp(-1))).is_zero\n+    assert simplify(cdf(Frechet(\"F\", S(4)/3, 1, 2))(3) - exp(-((3 - 2)/1)**(-S(4)/3))).is_zero\n+    assert simplify(cdf(Gamma(\"G\", 0.1, 2))(3) -\n+                    (symmetric(lowergamma(0.1, 3/2)/gamma(0.1)))).is_zero\n+    assert simplify(cdf(GammaInverse(\"GI\", S(5)/7, 2))(3) -\n+                    (uppergamma(S(5)/7, 2/3)/gamma(S(5)/7))).is_zero\n+    assert simplify(cdf(Kumaraswamy(\"K\", S(1)/123, 5))(S(1)/3) -\n+                    (-(-S(1)/3**S(1)/123 + 1)**5 + 1)).is_zero\n+    assert simplify(cdf(Laplace(\"LAp\", 2, 3))(5) -\n+                    (Rational(1, 2) + S(1)/2 * exp((2 - 5)/3))).is_zero\n+    assert simplify(cdf(Logistic(\"Log\", 1, 0.1))(2) -\n+                    (1/(exp((1 - 2)/0.1) + 1))).is_zero\n+    assert simplify(cdf(Nakagami(\"Naka\", S(7)/3, 1))(2) -\n+                    (lowergamma(7/3, S(7)*2**2/3)/gamma(7/3))).is_zero\n+    assert simplify(cdf(StudentT(\"T\", 10))(2) -\n+                    (Rational(1, 2) + S(2)*gamma(S(10)/2 + S(1)/2)*hyper((S(1)/2, S(11)/2),\n+                    (S(3)/2,), -S(2)**2/10) /\n+                    (sqrt(pi)*sqrt(10)*gamma(5)))).is_zero\n+    # UniformSum distribution test\n+    US = UniformSum(\"US\", 5)\n+    pdf_01 = density(US)(x).subs(floor(x), 0).doit()\n+    cdf_01 = cdf(US, evaluate=False)(x).subs(floor(x), 0).doit()\n+    assert tn(diff(cdf_01, x), pdf_01, x, a=0, b=1)\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..e43da38 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -38,6 +38,26 @@ def test_tensor_product_expand():\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n \n+def test_tensor_product_powers():\n+    from sympy import symbols\n+    x = Symbol('x', commutative=True)\n+    A, B, C, D = symbols('A,B,C,D', commutative=False)\n+    # Test tensor product powers and simplifications\n+    assert tensor_product_simp(TP(A, B)**x) == TP(A**x, B**x)\n+    assert tensor_product_simp(x*TP(A, B)**2) == x*TP(A**2, B**2)\n+    assert tensor_product_simp(x*(TP(A, B)**2)*TP(C, D)) == x*TP(A**2*C, B**2*D)\n+    assert tensor_product_simp(TP(A, B) - TP(C, D)**x) == TP(A, B) - TP(C**x, D**x)\n+\n+    # Additional test case from the issue description\n+    t1 = TP(1, 1) * TP(1, 1)\n+    t2 = TP(1, Pauli(3)) * TP(1, Pauli(3))\n+    assert tensor_product_simp(t1) == TP(1, 1)**2\n+    assert tensor_product_simp(t2) == TP(1, Pauli(3))**2\n+    a = Symbol('a', commutative=False)\n+    assert tensor_product_simp(TP(1, 1) * TP(1, a)).subs(a, 1) == TP(1, 1)\n+    assert tensor_product_simp(TP(1, Pauli(3)) * TP(1, a)).subs(a, Pauli(3)) == TP(1, Pauli(3)) * TP(1, Pauli(3))\n+\n+\n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..5b48b83 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -87,8 +87,11 @@ def test_python_relational():\n     assert python(Lt(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x < y\"\n     assert python(Ne(x/(y + 1), y**2)) in [\"e = Ne(x/(1 + y), y**2)\", \"e = Ne(x/(y + 1), y**2)\"]\n \n-\n-def test_python_functions():\n+def test_python_respects_sympy_integers_setting():\n+    x = Symbol(\"x\")\n+    y = Symbol(\"y\")\n+    assert sstr(Eq(x, Rational(1, 2)), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    assert sstr(Limit(x, x, Rational(1, 2)), sympy_integers=True) == \"Limit(x, x, S(1)/2)\"\n     # Simple\n     assert python((2*x + exp(x))) in \"x = Symbol('x')\\ne = 2*x + exp(x)\"\n     assert python(sqrt(2)) == 'e = sqrt(2)'\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..50c5186 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,6 +4,8 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n@@ -19,6 +21,13 @@ def test_Vector():\n     v4 = v1 - v2\n \n     assert isinstance(v1, Vector)\n+\n+    # Additional test cases to verify the fix for vector addition with zero.\n+    N = ReferenceFrame('N')\n+    assert sum([N.x, (0 * N.x)]) == N.x\n+    assert sum([0 * N.x, N.x]) == N.x\n+    assert sum([(0 * N.x), (0 * N.y), (0 * N.z)]) == Vector(0)  # Should be zero vector\n+    assert N.x + 0 == N.x  # Existing test case serves as a basic compatibility check\n     assert dot(v1, A.x) == x\n     assert dot(v1, A.y) == y\n     assert dot(v1, A.z) == z\n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..22e6d76 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -134,6 +135,27 @@ def test_math_lambda():\n \n \n @conserve_mpmath_dps\n+def test_rational_wrapping_in_mpmath():\n+    from sympy import rf\n+\n+    x = symbols('x')\n+    mpmath.mp.dps = 64\n+\n+    # Original case from the issue\n+    eqn = Eq(rf(18, x), 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+\n+    # Get the generated source code to see if Rational(1, 3) is correctly represented\n+    source_code = inspect.getsource(f)\n+    assert \"mpmath.mpf(232)/mpmath.mpf(3)\" in source_code\n+\n+    # Solve with nsolve to check precision\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = rf(18, x0).evalf(64)\n+    expected_result = \"77.33333333333333333333333333333333333333333333333333333333333333\"\n+    assert str(result) == expected_result\n+    mpmath.mp.dps = 50  # Restore the default precision after test\n+\n def test_mpmath_lambda():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..fb5a056 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,12 +74,25 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    assert len(rank_zero_array) == 1\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n     raises(ValueError, lambda: rank_zero_array[0])\n \n+    # Additional tests for verification\n+    scalar_array = ImmutableDenseNDimArray(5)\n+    assert len(scalar_array) == 1\n+    assert scalar_array.shape == ()\n+    assert scalar_array.rank() == 0\n+    assert scalar_array[()] == 5\n+    raises(ValueError, lambda: scalar_array[0])\n+\n+    # Ensure compatibility and comparison with numpy behaviour\n+    import numpy as np\n+    numpy_scalar = np.asarray(1)\n+    assert numpy_scalar.size == 1\n+\n \n def test_reshape():\n     array = ImmutableDenseNDimArray(range(50), 50)\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..60ec9bc 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -27,6 +28,11 @@ def test_Rational():\n def test_Function():\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n     assert mcode(sin(x) ** cos(x)) == \"Sin[x]^Cos[x]\"\n+    # Issue reproduction test for Max to ensure the correct order\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, y, 2)) == \"Max[x, y, 2]\"\n+    assert mcode(Min(3, y, z, 1)) == \"Min[1, 3, y, z]\"\n     assert mcode(conjugate(x)) == \"Conjugate[x]\"\n \n \n",
  "sympy__sympy-15349": "",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..5b667ce 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1508,7 +1508,31 @@ def test_issue_5919():\n     assert (x/(y*(1 + y))).expand() == x/(y**2 + y)\n \n \n+from sympy import Symbol, Mod, symbols, factorial, nan, comp, sqrt, S, Float, pi, Pow\n+\n def test_Mod():\n+    i, j = symbols('i j', integer=True, positive=True)\n+\n+    # Tests for issue #15493\n+    # Ensure that Mod(3*i, 2) simplifies correctly to Mod(i, 2)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+\n+    # Additional tests to verify the fix with different scenarios\n+    assert Mod(3*j, 2) == Mod(j, 2)\n+    assert Mod(6*i, 3) == 0\n+    assert Mod(6*i, 2) == 0  # since 6*i is always even when i is integer\n+    assert Mod(9*i, 3) == 0  # perfect multiples of modulus\n+    assert Mod(7*i, 3) == Mod(i, 3)  # verify if generalization holds\n+\n+    # Additional tests using negative multipliers\n+    assert Mod(-3*i, 2) == Mod(i, 2)\n+    assert Mod(-4*i, 3) == Mod(i, 3)\n+\n+    # Additional tests using symbolic divisions\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+\n+    # Ensure correctness with zero multipliers\n+    assert Mod(0*i, 2) == 0\n     assert Mod(x, 1).func is Mod\n     assert pi % pi == S.Zero\n     assert Mod(5, 3) == 2\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..7abfa68 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,7 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity  # Expected behavior after the fix\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +156,7 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity  # Expected behavior after the fix\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..2e98daa 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1982,7 +1982,31 @@ def test_issue_8247_8354():\n     assert z.is_positive is False  # it's 0 (and a single _mexpand isn't enough)\n \n \n+from sympy import I, simplify, symbols, sqrt, Add, S\n+\n def test_Add_is_zero():\n+    # Issue 15873\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+    assert simplify(e).is_zero is True\n+    \n+    # Additional test cases for complex expression with known zero result\n+    f = I + (1 - I)**2 - 2*I\n+    assert f.is_zero is None\n+    assert simplify(f).is_zero is True\n+\n+    # A scenario where the result is not zero\n+    g = I + (1 - I)**2\n+    assert g.is_zero is False\n+\n+    # An expression composed entirely of imaginary numbers\n+    h = I + 2*I - 3*I  # equals zero\n+    assert h.is_zero is None\n+    assert simplify(h).is_zero is True\n+\n+    i = -(5**0.5)*(7**0.5) + sqrt(35)\n+    assert i.is_zero is None\n+    assert simplify(i).is_zero is True\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n@@ -1993,4 +2017,4 @@ def test_issue_14392():\n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..f210e60 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -477,8 +477,34 @@ def test_logcombine_complex_coeff():\n     assert logcombine(i + 2*log(x), force=True) == \\\n         i + log(x**2)\n \n-\n-def test_issue_5950():\n+def test_posify_preserves_finite():\n+    from sympy import Symbol\n+    from sympy.simplify.simplify import posify\n+\n+    # Initial symbol with finite=True\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    # Verify the assumption finite=True is preserved\n+    assert eq.assumptions0.get('finite', False) == True\n+    assert eq.assumptions0.get('infinite', True) == False\n+\n+def test_posify_preserves_other_assumptions():\n+    from sympy import Symbol\n+    from sympy.simplify.simplify import posify\n+\n+    assumptions = {\n+        'integer': True,\n+        'rational': True,\n+        'prime': True,\n+        'even': True,\n+        'odd': False,\n+    }\n+    k = Symbol('k', **assumptions)\n+    eq, rep = posify(k)\n+\n+    # Verify all assumptions are preserved\n+    for key, value in assumptions.items():\n+        assert eq.assumptions0.get(key, not value) == value\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n     assert logcombine(log(x) - log(y)) == log(x/y)\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..6569ff6 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -35,6 +37,12 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n+    # Test for Issue: PythonCodePrinter doesn't support Indexed\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[x, y]) == 'p[x, y]'\n+    assert prntr.doprint(p[x, 0, y]) == 'p[x, 0, y]'\n+\n \n def test_MpmathPrinter():\n     p = MpmathPrinter()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..22dc4dc 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -30,8 +30,15 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n     output.close()\n     return source\n \n-\n-def test_cython_wrapper_scalar_function():\n+def test_cython_autowrap_with_unused_array_arg():\n+    x = MatrixSymbol('x', 2, 1)\n+    \n+    # Expression does not depend on x\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    \n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n     x, y, z = symbols('x,y,z')\n     expr = (x + y)*z\n     routine = make_routine(\"test\", expr)\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..e3deab4 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,6 +248,19 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n+def test_encode_morse_issue():\n+    # This is to specifically test the issue with encoding '1'\n+    assert encode_morse('1') == '.----'\n+    # Adding extended checks for other numbers to ensure no regression\n+    assert encode_morse('0') == '-----'\n+    assert encode_morse('2') == '..---'\n+    assert encode_morse('3') == '...--'\n+    assert encode_morse('4') == '....-'\n+    assert encode_morse('5') == '.....'\n+    assert encode_morse('6') == '-....'\n+    assert encode_morse('7') == '--...'\n+    assert encode_morse('8') == '---..'\n+    assert encode_morse('9') == '----.'\n \n def test_decode_morse():\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..b55c77b 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,7 +1,11 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n+\n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n                                           15, 29]]\n \n@@ -176,7 +180,16 @@ def test_subsets():\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n \n-def test_issue_5653():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    # Confirm that _sqrt_match identifies no match for 4 + I, returning an empty list.\n+    assert _sqrt_match(4 + I) == []\n+    # Ensure sqrtdenest returns the expression unchanged when it cannot denest it.\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert sqrtdenest(expr) == expr\n+    # Test another expression to confirm it remains unchanged\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..926ef7a 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -91,6 +92,11 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+    assert 5 * p4 == Point(5, 5)\n+    assert sympy.sympify(2.0) * p4 == Point(2, 2)\n+    assert p4 * sympy.sympify(2.0) == Point(2, 2)\n+    assert p3 + p4 * sympy.sympify(2.0) == Point(2, 2)\n+    assert p3 + sympy.sympify(2.0) * p4 == Point(2, 2)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..b6ea9ef 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -501,6 +501,12 @@ def test_diophantine():\n     assert diophantine(eq, permute=True) == complete_soln\n \n     assert diophantine(x**2 + x*Rational(15, 14) - 3) == set()\n+    # test issue 18186\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+\n     # test issue 11049\n     eq = 92*x**2 - 99*y**2 - z**2\n     coeff = eq.as_coefficients_dict()\n",
  "sympy__sympy-18763": "",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..60d2317 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,7 +1,8 @@\n-from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n-    EmptySet, Union, Contains)\n+\n+from sympy.sets import (ConditionSet, Intersection, FiniteSet, ImageSet,\n+    EmptySet, Union, Contains, imageset)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n-    And, Mod, oo, Function)\n+    And, Mod, oo, Function, Rational)\n from sympy.testing.pytest import raises, XFAIL, warns_deprecated_sympy\n \n \n@@ -77,8 +78,22 @@ def test_simplified_FiniteSet_in_CondSet():\n     assert (ConditionSet(x, Eq(Mod(x, 3), 1), FiniteSet(1, 4, 2, y)) ==\n         Union(FiniteSet(1, 4), ConditionSet(x, Eq(Mod(x, 3), 1), FiniteSet(y))))\n \n-\n-def test_free_symbols():\n+def test_issue_subs_with_conditionset_and_imageset():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    n = Symbol('n')\n+    k = Symbol('k')\n+\n+    # Test case resembling Out[74] and Out[75] indicating the odd subs behavior\n+    img1 = imageset(Lambda(n, 2*n*pi + asin(y)), S.Integers)\n+    condset = ConditionSet(x, Contains(y, Interval(-1, 1)), img1)\n+    img2 = imageset(Lambda(n, 2*n*pi + asin(Rational(1, 3))), S.Integers)\n+    result = condset.subs(y, Rational(1, 3))\n+    expected_result = img2\n+    assert result == expected_result, f\"Expected {expected_result}, but got {result}\"\n+\n+    # Ensure basic `subs` operations on ImageSet work correctly.\n+    assert imageset(Lambda(n, 2*n*pi + asin(y)), S.Integers).subs(y, Rational(1, 3)) == img2\n     assert ConditionSet(x, Eq(y, 0), FiniteSet(z)\n         ).free_symbols == {y, z}\n     assert ConditionSet(x, Eq(x, 0), FiniteSet(z)\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..927ee4f 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -482,8 +482,24 @@ def test_geometry():\n     L = sympify(Line(p, (1, 0)))\n     assert L == Line((0, 1), (1, 0)) and isinstance(L, Line)\n \n+from sympy import symbols, Interval, Rational, Matrix, Add, Mul, exp, sin, cos\n+from sympy.abc import x, y\n \n def test_kernS():\n+    assert kernS(\"(2*x)/(x-1)\") == (2*x)/(x-1)\n+\n+    # Test additional cases for kernels that involve more complex arithmetic\n+    test_cases = [\n+        (\"2*x + 3*x + 4\", 5*x + 4),  # Simple add\n+        (\"(2*x + 1)/(x + 1)\", (2*x + 1)/(x + 1)),  # Check fraction preservation\n+        (\"(1 - 0.5*x)/0.5\", 2 - x),  # Mixed numeric and symbolic simplification\n+        (\"-(x + 1)\", -(x + 1)),  # Negation\n+        (\"2*sin(x + y)\", 2*sin(x + y)),  # Trigonometric expression\n+        (\"x + y - x\", y)  # Simplification with cancelation\n+    ]\n+    \n+    for text_input, expected_output in test_cases:\n+        assert kernS(text_input) == expected_output, f\"Failed on: {text_input}\"\n     s =   '-1 - 2*(-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))'\n     # when 1497 is fixed, this no longer should pass: the expression\n     # should be unchanged\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_dagger.py b/sympy/physics/quantum/tests/test_dagger.py\nindex ad97a01..dc155ba 100644\n--- a/sympy/physics/quantum/tests/test_dagger.py\n+++ b/sympy/physics/quantum/tests/test_dagger.py\n@@ -1,8 +1,9 @@\n+\n from sympy import I, Matrix, symbols, conjugate, Expr, Integer\n \n from sympy.physics.quantum.dagger import adjoint, Dagger\n-from sympy.external import import_module\n from sympy.testing.pytest import skip\n+from sympy import Mul\n \n \n def test_scalars():\n@@ -22,8 +23,16 @@ def test_scalars():\n     A = symbols('A', commutative=False)\n     assert Dagger(A).is_commutative is False\n \n+def test_dagger_with_identity():\n+    # Test if the product of a dagger operator and an identity operator is simplified.\n+    A = Operator('A')\n+    Id = IdentityOperator()\n+    \n+    # Dagger(A) * IdentityOperator should simplify to Dagger(A)\n+    assert Dagger(A) * Id == Dagger(A)\n \n-def test_matrix():\n+    # Additional check to ensure commutativity holds as expected\n+    assert Id * Dagger(A) == Dagger(A)\n     x = symbols('x')\n     m = Matrix([[I, x*I], [2, 4]])\n     assert Dagger(m) == m.H\n",
  "sympy__sympy-19954": "",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..31273c4 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,6 +470,24 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n+from sympy import S\n+from sympy.utilities.iterables import partitions, uniq\n+\n+def test_partitions_reuse():\n+    # Ensure partitions does not reuse dictionary objects\n+    results = list(partitions(6, k=2))\n+    # Modify the first partition to check if others are affected\n+    results[0][1] = 99  # This should not affect others if they are independent copies\n+\n+    # Another call to partitions should generate fresh, unaffected dictionaries\n+    expected = [\n+        {2: 3},\n+        {1: 2, 2: 2},\n+        {1: 4, 2: 1},\n+        {1: 6}\n+    ]\n+    assert results != expected  # the first entry should be different\n+    assert [p.copy() for p in partitions(6, k=2)] == expected\n \n def test_partitions():\n     ans = [[{}], [(0, {})]]\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..69af9a3 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,12 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..b8869d3 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,9 +1,10 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n-    Lambda, atan2, cse, cot, tan, S, Tuple, Basic, Dict,\n+    Lambda, atan2, cse, cot, tan, S, Tuple, Basic, Dict, sinh,\n     Piecewise, oo, Mul, factor, nsimplify, zoo, Subs, RootOf,\n-    AccumBounds, Matrix, zeros, ZeroMatrix)\n+    AccumBounds, Matrix, zeros, ZeroMatrix, Piecewise, clear_cache)\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n@@ -19,8 +20,54 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+def test_issue_21373():\n+    # Try to reproduce the described issue with the given expression\n+    x_r, y_r = symbols('x_r y_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+\n+    # Test before clearing the cache\n+    clear_cache()\n+    try:\n+        expr.subs({1: 1.0})\n+    except PolynomialError:\n+        assert False, \"PolynomialError was raised unexpectedly\"\n \n-def test_subs_Matrix():\n+    # Test after clearing the cache\n+    clear_cache()\n+    try:\n+        expr.subs({1: 1.0})\n+    except PolynomialError:\n+        assert False, \"PolynomialError was raised unexpectedly\"\n+\n+    # Additional tests to cover scenarios mentioned in the issue\n+    # Test removing the division by z\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    try:\n+        expr_no_div.subs({1: 1.0})\n+    except PolynomialError:\n+        assert False, \"PolynomialError was raised unexpectedly\"\n+\n+    # Test removing the exp\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z)\n+    try:\n+        expr_no_exp.subs({1: 1.0})\n+    except PolynomialError:\n+        assert False, \"PolynomialError was raised unexpectedly\"\n+\n+    # Additional operations with similar expressions\n+    # Use tanh instead of sinh\n+    expr_tanh = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    try:\n+        expr_tanh.subs({1: 1.0})\n+    except PolynomialError:\n+        assert False, \"PolynomialError was raised unexpectedly\"\n+\n+    # Use cosh instead of sinh\n+    expr_cosh = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    try:\n+        expr_cosh.subs({1: 1.0})\n+    except PolynomialError:\n+        assert False, \"PolynomialError was raised unexpectedly\"\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n     assert (x*y).subs({x:z, y:0}) in [z, z1]\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..9b7d31f 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -121,6 +121,18 @@ def test_monomials():\n     assert set(itermonomials([x, y], [0, 2], [0, 2])) == {y**2}\n \n     assert set(itermonomials([x, y], [1, 0])) == {S.One, x}\n+\n+    # Test cases for issue with min_degrees support\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n+    \n+    i, j, k = symbols('i, j, k')\n+    assert set(itermonomials([i, j, k], 2, 2)) == {k*i, i**2, i*j, j*k, j*i, k**2, j**2, k*j, i*k}\n+    assert set(itermonomials([i, j, k], 3, 2)) == {j*k**2, i*k**2, k*i*j, k*i**2, k**2, j*k*j, k*j**2, i*k*i, i*j,\n+                                                       j**2*k, i**2*j, j*i*k, j**3, i**3, k*j*i, j*k*i, j*i,\n+                                                       k**2*j, j*i**2, k*j, k*j*k, i*j*i, j*i*j, i*j**2, j**2,\n+                                                       k*i*k, i**2, j*k, i*k, i*k*j, k**3, i**2*k, j**2*i, k**2*i,\n+                                                       i*j*k, k*i}\n     assert set(itermonomials([x, y], [1, 1])) == {S.One, x, y, x*y}\n     assert set(itermonomials([x, y], [1, 2])) == {S.One, x, y, x*y, y**2, x*y**2}\n     assert set(itermonomials([x, y], [1, 2], [1, 1])) == {x*y, x*y**2}\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..03f335e 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,11 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st\n+\n+    # Testing the same invariance for the subclass Signifier\n+    si = Signifier('foobar')\n+    assert si.func(*si.args) == si\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..fc1f2ad 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,9 +1,11 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.core.sympify import sympify\n from sympy.functions.elementary.miscellaneous import sqrt\n+from sympy.core.parameters import evaluate  # Import evaluate for testing\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n@@ -11,8 +13,18 @@ from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n \n+def test_issue_evaluate_false_with_Point2D():\n+    # Test to ensure no error is raised when using Point2D with evaluate(False)\n+\n+    with evaluate(False):\n+        p = Point2D(1, 2)\n+        assert p == Point2D(1, 2)  # Check that the creation was successful\n+        assert isinstance(p, Point2D)  # Check that the type is correct\n \n-def test_point():\n+    with evaluate(False):\n+        p = Point2D(Integer(1), Integer(2))\n+        assert p == Point2D(Integer(1), Integer(2))  # Check the creation was successful with Integer\n+        assert isinstance(p, Point2D)  # Check the type is correct\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..92b83e7 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -56,6 +57,22 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(KroneckerDelta(x,y)) == '(1 if x == y else 0)'\n \n     assert prntr.doprint((2,3)) == \"(2, 3)\"\n+    \n+    # Test for Min and Max functions\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    \n+    # Test Min and Max with more than two arguments\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    \n+    # Test Min/Max with nested expressions\n+    assert prntr.doprint(Min(x + y, y - z)) == \"min(x + y, y - z)\"\n+    assert prntr.doprint(Max(x * y, z / y)) == \"max(x * y, z / y)\"\n+    \n+    # Ensure the functions are printed when appearing as part of other expressions\n+    assert prntr.doprint(x + Min(y, z)) == \"x + min(y, z)\"\n+    assert prntr.doprint(x * Max(y, z)) == \"x * max(y, z)\"\n     assert prntr.doprint([2,3]) == \"[2, 3]\"\n \n \n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..edf1cef 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,29 @@ def test_scipy_polys():\n \n \n \n+def test_lambdify_single_element_tuple():\n+    # Test lambdify with a single element tuple\n+    f = lambdify([], (1,))\n+    assert f() == (1,)\n+    source_code = inspect.getsource(f)\n+    assert 'return (1,)' in source_code\n+\n+def test_lambdify_multi_element_tuple():\n+    # Test lambdify with a multi-element tuple\n+    f = lambdify([], (1, 2))\n+    assert f() == (1, 2)\n+    source_code = inspect.getsource(f)\n+    assert 'return (1, 2)' in source_code\n+\n+def test_lambdify_non_tuple_expression():\n+    # Test lambdify with a non-tuple expression to ensure no issues arise\n+    f = lambdify([], 1)\n+    assert f() == 1\n+    source_code = inspect.getsource(f)\n+    assert 'return 1' in source_code\n+\n+import inspect\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..8491d58 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,7 +1,9 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n from sympy.testing.pytest import raises\n@@ -295,6 +297,11 @@ def test_symbols():\n     assert symbols(('aa:d','x:z')) == ((aa, ab, ac, ad), (x, y, z))\n \n \n+    # issue 23532\n+    def test_symbols_with_extra_parentheses_for_functions():\n+        q, u = symbols(('q:2', 'u:2'), cls=Function)\n+        assert type(q[0]) == UndefinedFunction  # Check if q[0] is an instance of UndefinedFunction\n+\n     # issue 6675\n     def sym(s):\n         return str(symbols(s))\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..2dd13bf 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -182,8 +182,42 @@ def execute_gamma_simplify_tests_for_function(tfunc, D):\n     st = tfunc(t)\n     assert _is_tensor_eq(st, t)\n \n+from sympy.physics.hep.gamma_matrices import GammaMatrix as G, kahane_simplify, LorentzIndex\n+from sympy.tensor.tensor import tensor_indices\n \n-def test_kahane_algorithm():\n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+\n+    # Initial test cases to check the fix for the bug described in the issue\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # Additional cases to thoroughly test the kahane_simplify function\n+    # with different permutations of free and contracted indices\n+    t = G(mu)*G(rho)*G(sigma)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(-2*G(rho)*G(sigma))\n+\n+    t = G(mu)*G(rho)*G(-mu)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(-2*G(sigma)*G(rho))\n+\n+    t = G(rho)*G(mu)*G(-mu)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(sigma)*G(mu)*G(-mu)*G(rho)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(sigma)*G(rho))\n+\n+    t = G(sigma)*G(rho)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(sigma)*G(rho))\n     # Wrap this function to convert to and from TIDS:\n \n     def tfunc(e):\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..a690f45 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,6 +30,9 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n+from sympy import Contains, Symbol, S, FiniteSet, Eq, Reals, Integers, Piecewise\n+from sympy.core.compatibility import raises\n+\n def test_binary_symbols():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -45,7 +48,20 @@ def test_as_set():\n     # containment in a Set -- rewriting as a Set is not yet implemented\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n+def test_contains_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    \n+    # Original test patch assertions\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    assert Contains(x, S.Integers).as_set() == S.Integers\n+    assert Contains(x, S.Reals).as_set() == S.Reals\n \n-def test_type_error():\n+    # Additional checks to ensure the fix resolves the expected behavior\n+    assert Piecewise((6, Contains(x, Reals)), (7, True)).subs(x, 0) == 6\n+    assert Piecewise((6, Contains(x, Reals)), (7, True)).subs(x, 1) == 6\n+    assert Piecewise((6, Contains(x, Reals)), (7, True)).subs(x, 0.0) == 6\n+    assert Piecewise((6, Contains(x, FiniteSet(1, 2, 3))), (7, True)).subs(x, 2) == 6\n+    assert Piecewise((6, Contains(x, FiniteSet(1, 2, 3))), (7, True)).subs(x, 4) == 7\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..8192b37 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,7 +528,28 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n-def test_issue_20288():\n+from sympy.core.numbers import E\n+from sympy import exp\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second, Quantity\n+from sympy.physics.units.systems.si import SI\n+from sympy.physics.units.dimensions import Dimension\n+\n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n     u = Quantity('u')\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..8632ce1 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,43 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    try:\n+        factor, dimension = SI._collect_factor_and_dimension(expr)\n+    except ValueError:\n+        assert False, \"Collect factor and dimension raised a ValueError unexpectedly\"\n+    assert dimension == SI.get_quantity_dimension(V1), \"Dimension mismatch in test_issue_24211\"\n+\n+def test_additional_case():\n+    v1_new = Quantity('v1_new')\n+    SI.set_quantity_dimension(v1_new, velocity)\n+    SI.set_quantity_scale_factor(v1_new, 3 * meter / second)\n+\n+    expr = A1*T1 + v1_new\n+    # should not raise ValueError for equivalent dimension\n+    try:\n+        factor, dimension = SI._collect_factor_and_dimension(expr)\n+    except ValueError:\n+        assert False, \"Collect factor and dimension raised a ValueError unexpectedly in test_additional_case\"\n+    assert dimension == SI.get_quantity_dimension(V1), \"Dimension mismatch in test_additional_case\"\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..637bb09 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -57,7 +58,10 @@ def test_homomorphism():\n     assert T.codomain == D\n     assert T(a*b) == p\n \n-def test_isomorphisms():\n+def test_dihedral_group_homomorphism_issue():\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n \n     F, a, b = free_group(\"a, b\")\n     E, c, d = free_group(\"c, d\")\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..423fc2e 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -250,6 +250,20 @@ def test_PolyElement_copy():\n     assert f != g\n \n def test_PolyElement_as_expr():\n+    # Existing test cases\n+    ...\n+\n+    # Adding additional test case for different symbol sets and order\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+\n+    # Test with different symbols U, V, W\n+    U, V, W = symbols(\"u,v,w\")\n+    expected_expr_uvq = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == expected_expr_uvq\n+\n+    # Test with fewer symbols to raise ValueError\n+    raises(ValueError, lambda: f.as_expr(U, V))\n     R, x, y, z = ring(\"x,y,z\", ZZ)\n     f = 3*x**2*y - x*y*z + 7*z**3 + 1\n \n",
  "sympy__sympy-24661": "",
  "astropy__astropy-14369": "",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..d10ecfc 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1908,6 +1908,29 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(\n             gt_operation.describe(), \"Remove constraint test_remove_constraint_pony_pink_gt_2 from model Pony\"\n         )\n+\n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_check_constraint_or_sqlite_oracle(self):\n+        app_label = 'test_check_constraint_or'\n+        constraint_name = 'constraint_or_issue_test'\n+        from_state = self.set_up_test_model(app_label)\n+        check = models.Q(field_1__isnull=False, flag=True) | models.Q(flag=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraintModel', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        TestConstraintModel = to_state.apps.get_model(app_label, 'TestConstraintModel')\n+        \n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraintModel.objects.create(field_1=None, flag=True)\n+        \n+        obj1 = TestConstraintModel.objects.create(field_1=5, flag=True)\n+        obj2 = TestConstraintModel.objects.create(field_1=None, flag=False)\n+        self.assertEqual(len(TestConstraintModel.objects.all()), 2)\n+        self.assertEqual(obj1.field_1, 5)\n+        self.assertFalse(obj2.flag)\n         # Test state alteration\n         new_state = project_state.clone()\n         gt_operation.state_forwards(\"test_removeconstraint\", new_state)\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..c8a72ce 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -164,6 +164,42 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translation.get_language(), 'nl')\n \n \n+import django\n+from django.test import SimpleTestCase\n+from django.urls import resolve, reverse, re_path\n+from django.utils.translation import gettext_lazy as _\n+\n+from .views import empty_view\n+\n+class URLTranslationTests(SimpleTestCase):\n+    \n+    def test_translate_url_with_optional_argument(self):\n+        # Testing translation with optional argument present\n+        self.assertEqual(translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+                         '/nl/with-arguments/regular-argument/optional.html')\n+        \n+        # Testing translation with optional argument missing\n+        self.assertEqual(translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+                         '/nl/with-arguments/regular-argument/')\n+        \n+        # Testing translation using regex for optional arguments\n+        self.assertEqual(translate_url('/en/regex_optional/1/2/', 'nl'), '/nl/regex_optional/1/2/')\n+        self.assertEqual(translate_url('/en/regex_optional/1/', 'nl'), '/nl/regex_optional/1/')\n+\n+    def test_re_path_with_optional_parameter(self):\n+        for url, kwargs in (\n+                ('/regex_optional/1/2/', {'arg1': '1', 'arg2': '2'}),\n+                ('/regex_optional/1/', {'arg1': '1'}),\n+        ):\n+            with self.subTest(url=url):\n+                match = resolve(url)\n+                self.assertEqual(match.url_name, 'regex_optional')\n+                self.assertEqual(match.kwargs, kwargs)\n+                self.assertEqual(\n+                    match.route,\n+                    r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?',\n+                )\n+\n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n     Tests if the translations are still working within namespaces.\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..2cd4dbe 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -6,7 +7,8 @@ from operator import attrgetter\n from unittest import expectedFailure\n \n from django import forms\n-from django.test import TestCase\n+from django.db import models\n+from .models import Item, Derived\n \n from .models import (\n     ArticleWithAuthor, BachelorParty, BirthdayParty, BusStation, Child,\n",
  "django__django-12965": "",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..1afb192 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -24,8 +25,24 @@ class DecimalFieldTests(TestCase):\n         msg = '\u201cabc\u201d value must be a decimal number.'\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n-\n-    def test_default(self):\n+    \n+    def test_decimalfield_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        invalid_values = [\n+            (),  # tuple\n+            [],  # list\n+            {},  # dict\n+            set(),  # set\n+            object(),  # generic object\n+            complex(1, 1),  # complex number\n+            'non-numeric string',  # non-numeric string\n+            b'non-numeric byte-string',  # byte string\n+        ]\n+        for value in invalid_values:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.clean(value, None)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..d78170e 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,9 +1,12 @@\n+\n import datetime\n import pickle\n \n import django\n from django.db import models\n from django.test import TestCase\n+from .models import Toy\n+from django.db.models import Sum\n \n from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n \n@@ -259,8 +262,26 @@ class PickleabilityTestCase(TestCase):\n         event.edition_set.create()\n         self.assert_pickles(event.edition_set.order_by('event'))\n \n-\n-class InLookupTests(TestCase):\n+class QuerysetPickleValuesTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+\n+    def test_values_queryset_pickle(self):\n+        # Test that a queryset with 'values()' can be pickled and unpickled correctly.\n+        qs = Toy.objects.values('material').annotate(total_price=Sum('price'))\n+        unpickled_qs = Toy.objects.all()\n+        unpickled_qs.query = pickle.loads(pickle.dumps(qs.query))\n+        self.assertEqual(list(qs), list(unpickled_qs))\n+\n+    def test_values_list_queryset_pickle(self):\n+        # Test that a queryset with 'values_list()' can be pickled and unpickled correctly.\n+        qs = Toy.objects.values_list('name', 'material').annotate(total_price=Sum('price'))\n+        unpickled_qs = Toy.objects.all()\n+        unpickled_qs.query = pickle.loads(pickle.dumps(qs.query))\n+        self.assertEqual(list(qs), list(unpickled_qs))\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..b0dba17 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -5,10 +5,13 @@ class Classification(models.Model):\n     code = models.CharField(max_length=10)\n \n \n+from decimal import Decimal\n+\n class Employee(models.Model):\n     name = models.CharField(max_length=40, blank=False, null=False)\n     salary = models.PositiveIntegerField()\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..e9b06f9 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -24,7 +24,19 @@ class JSONFieldTest(SimpleTestCase):\n         with self.assertRaisesMessage(ValidationError, 'Enter a valid JSON.'):\n             field.clean('{some badly formed: json}')\n \n-    def test_prepare_value(self):\n+    def test_unicode_characters_display(self):\n+        field = JSONField()\n+        # Test serialization of Chinese characters.\n+        self.assertEqual(field.prepare_value({'a': '\u4e2d\u56fd'}), '{\"a\": \"\u4e2d\u56fd\"}')\n+        \n+        # Test serialization of emojis.\n+        self.assertEqual(field.prepare_value({'emoji': '\ud83d\ude00\ud83d\udc31'}), '{\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        \n+        # Test serialization of mixed unicode and regular characters.\n+        self.assertEqual(field.prepare_value({'greeting': '\u4f60\u597d, world!'}), '{\"greeting\": \"\u4f60\u597d, world!\"}')\n+        \n+        # Test serialization of extended Latin characters.\n+        self.assertEqual(field.prepare_value({'a': '\u0105\u0107\u0119\u0142\u0144\u00f3\u015b\u017a\u017c'}), '{\"a\": \"\u0105\u0107\u0119\u0142\u0144\u00f3\u015b\u017a\u017c\"}')\n         field = JSONField()\n         self.assertEqual(field.prepare_value({'a': 'b'}), '{\"a\": \"b\"}')\n         self.assertEqual(field.prepare_value(None), 'null')\n",
  "django__django-14404": "",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..73d3ac9 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,6 +691,39 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n+    def test_missing_import_in_migration_file(self):\n+        \"\"\"\n+        Test that migrations with custom models and mixins include the necessary import statements.\n+        \"\"\"\n+        fields = {\n+            'name': models.TextField(primary_key=True),\n+        }\n+\n+        class MyMixin:\n+            pass\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"MyModel\",\n+                    fields=list(fields.items()),\n+                    options={'abstract': False},\n+                    bases=(MyMixin, models.Model),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+\n+        # Ensure 'from django.db import models' is in the generated migration\n+        self.assertIn(\"from django.db import models\", output)\n+\n+        # Execute the output to ensure no NameError\n+        result = self.safe_exec(output)\n+        self.assertIn(\"Migration\", result)\n+\n     def test_migration_path(self):\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..bd097ac 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1624,6 +1624,19 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal.from_float(math.pi), places=6)\n \n+    def test_annotate_then_aggregate_with_default(self):\n+        # Verify that using 'default' with aggregate after annotate works as expected\n+        result = Book.objects.annotate(idx=F(\"id\")).aggregate(Sum(\"id\", default=0))\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_annotate_then_aggregate_with_default_complex(self):\n+        # Verify that using a complex default value works\n+        result = Book.objects.annotate(idx=F(\"id\")).aggregate(\n+            value=Sum(\"rating\", default=Avg(\"id\"))\n+        )\n+        # Assuming a rating of 0 with default Avg id\n+        self.assertEqual(result['value'], 4560 / 95)  # Example expected value\n+\n     def test_aggregation_default_passed_another_aggregate(self):\n         result = Book.objects.aggregate(\n             value=Sum('price', filter=Q(rating__lt=3.0), default=Avg('pages') / 10.0),\n@@ -1642,4 +1655,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..a10903a 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2985,6 +2985,23 @@ class OperationTests(OperationTestBase):\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         # Reverse is a no-op.\n+        # Additional test: Ensure RenameIndex can handle unnamed indexes moving backward and forward.\n+\n+        # Simulate moving an unnamed index backward and verify it reverts to old name.\n+        old_index_name = index.get_default_name(table_name)\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, old_index_name)\n+\n+        # Reapply RenameIndex to simulate moving forward, should not crash.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+        # Try moving backward again to see if old name restoration works.\n+        with connection.schema_editor() as editor:\n+           operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, old_index_name)\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..040ae42 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3487,7 +3487,45 @@ class FormFieldCallbackTests(SimpleTestCase):\n \n         NewForm = modelform_factory(Person, form=BaseForm, formfield_callback=callback)\n \n-        class InheritedForm(NewForm):\n+from django.test import TestCase\n+from django import forms\n+from django.forms import modelform_factory\n+from .models import Person, Triple\n+\n+class CustomFormfieldCallbackTest(TestCase):\n+    def test_formfield_callback_in_metaclass(self):\n+        def all_required_formfield_callback(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            formfield.required = True\n+            return formfield\n+\n+        class MyModelForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = [\"id\", \"name\"]\n+                formfield_callback = all_required_formfield_callback\n+\n+        FactoryForm = modelform_factory(Person, form=MyModelForm)\n+        \n+        for field in FactoryForm.base_fields.values():\n+            self.assertTrue(field.required)\n+\n+    def test_no_partial_overwriting_metaclass_callback(self):\n+        def overridden_formfield_callback(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            formfield.required = False\n+            return formfield\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = [\"id\", \"name\"]\n+                formfield_callback = overridden_formfield_callback\n+\n+        NewForm = modelform_factory(Person, form=BaseForm)\n+        \n+        for field in NewForm.base_fields.values():\n+            self.assertFalse(field.required)\n             pass\n \n         for name in NewForm.base_fields:\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..03b243b 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,7 +9,9 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.db import models\n+from django.db.models import Manager\n+from django.core import serializers\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n@@ -258,7 +260,35 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             for obj in serializers.deserialize(\"json\", test_string, ignore=False):\n                 obj.save()\n \n-    def test_helpful_error_message_for_many2many_not_iterable(self):\n+    def test_m2m_serialization_with_custom_manager_fails(self):\n+        class TestTagManager(Manager):\n+            def get_queryset(self):\n+                qs = super().get_queryset()\n+                qs = qs.select_related(\"master\")\n+                return qs\n+\n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+\n+        class TestTag(models.Model):\n+            objects = TestTagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+\n+        # Create the objects to trigger the serialization\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test_instance = Test.objects.create(name=\"test\")\n+        test_instance.tags.add(tag)\n+        test_instance.save()\n+\n+        # Custom manager with select_related should fail during serialization due to the issue\n+        with self.assertRaisesMessage(FieldError, \"Field TestTag.master cannot be both deferred and traversed using select_related at the same time.\"):\n+            serializers.serialize(\"json\", [test_instance])\n         \"\"\"\n         Not iterable many-to-many field value throws a helpful error message.\n         \"\"\"\n",
  "matplotlib__matplotlib-23476": "",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..c26f613 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6603,6 +6603,15 @@ def test_integrate(dask):\n     with pytest.raises(ValueError):\n         da.integrate(\"x2d\")\n \n+    # New test case to check the updated API for consistency\n+    da = xr.DataArray(np.random.rand(3, 4), dims=(\"x\", \"y\"), coords={\"x\": [0.1, 0.2, 0.3]})\n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"x\")  # Old API should warn about deprecation\n+\n+    # Check that the new coordinate API works \n+    da_res = da.integrate(coord=\"x\")\n+    assert da_res.dims == ('y',)  # Result should be over 'y' after integrating over 'x'\n+\n \n @pytest.mark.parametrize(\"dask\", [True, False])\n @pytest.mark.parametrize(\"which_datetime\", [\"np\", \"cftime\"])\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..53a7be3 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3045,7 +3045,13 @@ class TestDataset:\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n \n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_unstacked_single_dim_variable(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..4bf10d3 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -107,6 +107,49 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"foo\\\\,bar\", [\"foo,bar\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n+\n+\n+def test_malformed_regex_error(capsys: pytest.CaptureFixture) -> None:\n+    \"\"\"Check that passing a truly malformed regex like '(foo{1,}, foo{1,3}})'\n+    raises the appropriate error.\n+    \"\"\"\n+    with pytest.raises(SystemExit):\n+        Run(\n+            [str(EMPTY_MODULE), r\"--bad-names-rgx=(foo{1,}, foo{1,3}})\"],\n+            exit=False,\n+        )\n+    output = capsys.readouterr()\n+    assert r\"Error in provided regular expression: (foo{1,} beginning at index 0: missing ), unterminated subpattern\" in output.err\n+\n+import pytest\n+import re\n+from pylint.lint import Run\n+from typing import Any\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..37da0e8 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,7 +1156,30 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n-def test_importorskip():\n+def test_does_not_eagerly_collect_packages(testdir):\n+    # Test to ensure that `__init__.py` in a package which is not a test is not collected eagerly\n+    testdir.makepyfile(\"def test(): pass\")\n+    pydir = testdir.mkpydir(\"foopkg\")\n+    pydir.join(\"__init__.py\").write(\"assert False\")  # This should not be collected as it's not a test file\n+\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n+\n+def test_does_not_put_src_on_path(testdir):\n+    # Test to ensure that `src` directory is not put on sys.path unexpectedly\n+    # If 'src' is not on sys.path, importing 'nope' should raise ImportError\n+    testdir.tmpdir.join(\"src/nope/__init__.py\").ensure()\n+    testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+        def test():\n+            with pytest.raises(ImportError):\n+                import nope\n+        \"\"\"\n+    )\n+\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n     with pytest.raises(\n         pytest.skip.Exception,\n         match=\"^could not import 'doesnotexist': No module named .*\",\n@@ -1184,4 +1207,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..916a09d 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,18 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"ident\",\n+    (\n+        \"None\",\n+        \"True\",\n+        \"False\",\n+    ),\n+)\n+def test_invalid_builtins_in_compile(ident: str) -> None:\n+    with pytest.raises(AssertionError):\n+        Expression.compile(ident)\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..22bd3d9 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -251,12 +251,111 @@ def test_set_output_mro():\n \n     class A(Base):\n         pass\n+import pandas as pd\n+import pytest\n+from sklearn.pipeline import FeatureUnion\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn import set_config\n+\n+class MyTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X, y=None):\n+        return self\n+\n+    def transform(self, X):\n+        # Return grouped data based on \"date\" while summing \"value\"\n+        return X.groupby(\"date\")[\"value\"].sum().reset_index(drop=True)\n+\n+def test_feature_union_with_pandas_output():\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10]*len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n \n+    # Test with \"default\" output\n+    set_config(transform_output=\"default\")\n+    output_default = union.fit_transform(data)\n+    assert output_default.shape == (4, )  # should contain 4 values since it was grouped by date\n+\n+    # Test with \"pandas\" output\n+    set_config(transform_output=\"pandas\")\n+\n+    try:\n+        output_pandas = union.fit_transform(data)\n+        assert len(output_pandas) == 4  # should contain 4 values, grouped by date\n+    except ValueError as e:\n+        pytest.fail(f\"Unexpected ValueError: {e}\")\n     class B(Base):\n         def transform(self, X):\n             return \"B\"\n+import pandas as pd\n+import pytest\n+from sklearn.pipeline import FeatureUnion\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn import set_config\n+\n+class MyTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X, y=None):\n+        return self\n+\n+    def transform(self, X):\n+        # Return grouped data based on \"date\" while summing \"value\"\n+        return X.groupby(\"date\")[\"value\"].sum().reset_index(drop=True)\n \n+def test_feature_union_with_pandas_output():\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10]*len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+\n+    # Test with \"default\" output\n+    set_config(transform_output=\"default\")\n+    output_default = union.fit_transform(data)\n+    assert output_default.shape == (4, )  # should contain 4 values since it was grouped by date\n+\n+    # Test with \"pandas\" output\n+    set_config(transform_output=\"pandas\")\n+\n+    try:\n+        output_pandas = union.fit_transform(data)\n+        assert len(output_pandas) == 4  # should contain 4 values, grouped by date\n+    except ValueError as e:\n+        pytest.fail(f\"Unexpected ValueError: {e}\")\n     class C(A, B):\n         pass\n+import pandas as pd\n+import pytest\n+from sklearn.pipeline import FeatureUnion\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn import set_config\n+\n+class MyTransformer(BaseEstimator, TransformerMixin):\n+    def fit(self, X, y=None):\n+        return self\n+\n+    def transform(self, X):\n+        # Return grouped data based on \"date\" while summing \"value\"\n+        return X.groupby(\"date\")[\"value\"].sum().reset_index(drop=True)\n+\n+def test_feature_union_with_pandas_output():\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10]*len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+\n+    # Test with \"default\" output\n+    set_config(transform_output=\"default\")\n+    output_default = union.fit_transform(data)\n+    assert output_default.shape == (4, )  # should contain 4 values since it was grouped by date\n+\n+    # Test with \"pandas\" output\n+    set_config(transform_output=\"pandas\")\n \n-    assert C().transform(None) == \"B\"\n+    try:\n+        output_pandas = union.fit_transform(data)\n+        assert len(output_pandas) == 4  # should contain 4 values, grouped by date\n+    except ValueError as e:\n+        pytest.fail(f\"Unexpected ValueError: {e}\")\n+    assert C().transform(None) == \"B\"\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..931b54c 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -236,7 +236,22 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'module1.Class.func'\n \n \n-def test_parse_annotation():\n+from sphinx import addnodes\n+from sphinx.util.docutils import SphinxDirective\n+from sphinx.addnodes import pending_xref, desc_sig_punctuation\n+\n+...\n+\n+def test_handle_none_annotation():\n+    # Test for 'autodoc_typehints=\"signature\"'\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert doctree[0]['reftarget'] == \"None\"\n+\n+    # Test for 'autodoc_typehints=\"description\"'\n+    doctree = _parse_annotation(\"int\")\n+    assert_node(doctree, ([pending_xref, \"int\"],))\n+    assert doctree[0]['reftarget'] == \"int\"\n     doctree = _parse_annotation(\"int\")\n     assert_node(doctree, ([pending_xref, \"int\"],))\n \n@@ -742,4 +757,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..9ad1419 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,6 +1317,44 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_inline(self):\n+        # Test for parameters defined on the same line, given the issue specification\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+        \n+        y1, y2 : int, optional\n+            Optional integer inputs, description of `y1`, `y2`.\n+        \"\"\"\n+\n+        # Expected rendered output with napoleon_use_param=False\n+        expected = \"\"\"\\\n+        :Parameters: * **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+                     * **y1, y2** (:class:`int`, *optional*) -- Optional integer inputs, description of `y1`, `y2`.\n+        \"\"\"\n+        \n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        self.assertEqual(expected, actual)\n+\n+        # Expected rendered output with napoleon_use_param=True\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        :param y1: Optional integer inputs, description of `y1`, `y2`.\n+        :type y1: :class:`int`, *optional*\n+        :param y2: Optional integer inputs, description of `y1`, `y2`.\n+        :type y2: :class:`int`, *optional*\n+        \"\"\"\n+        \n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        self.assertEqual(expected, actual)\n+\n     def test_parameters_with_class_reference(self):\n         docstring = \"\"\"\\\n Parameters\n",
  "sphinx-doc__sphinx-8551": "",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..c86c142 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -984,7 +984,47 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n-def test_info_field_list_var(app):\n+def test_info_field_list_dict_param(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    \n+    doctree = restructuredtext.parse(app, text)\n+    \n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, [nodes.list_item, nodes.paragraph]]))\n+    \n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9258": "",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..703efe1 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1048,7 +1048,18 @@ def test__solveset_multi():\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n \n+from sympy import Eq, solveset, symbols, cos, sin\n+from sympy.sets.conditionset import ConditionSet\n+from sympy.sets import Reals\n+\n+x, n = symbols('x n')\n+\n def test_conditionset():\n+    # Test case for the issue described where NotImplementedError is expected to be handled\n+    result1 = Eq(n*cos(n) - 3*sin(n), 0)\n+    assert solveset(result1, n, domain=Reals) == ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), Reals)\n+\n+    # Original test case\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n \n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..e0c2de0 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3265,6 +3265,9 @@ def test_noncommutative():\n     assert cancel(e*foo(c)) == c*foo(c)\n \n \n+from sympy import symbols, sqf_list\n+x, y = symbols('x y')\n+\n def test_to_rational_coeffs():\n     assert to_rational_coeffs(\n         Poly(x**3 + y*x**2 + sqrt(y), x, domain='EX')) is None\n@@ -3330,6 +3333,16 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n-def test_issue_18205():\n+def test_issue_sqf_list_consistency():\n+    # Test for the issue described with an inconsistency in sqf_list function\n+    # Correct behavior would provide one factor of higher multiplicity rather than duplicates.\n+    p1 = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected1 = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p1) == expected1\n+\n+    # Check the previous correct behavior is not broken\n+    p2 = x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2\n+    expected2 = (1, [(x - 2, 1), (x**2 - 1, 2)])\n+    assert sqf_list(p2) == expected2\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..483a0b7 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3241,8 +3241,13 @@ def test_keep_coeff():\n     assert _keep_coeff(x, 1/x) == 1\n     assert _keep_coeff(x + 1, S(2)) == u\n \n+from sympy import expand, factor, I\n+from sympy.abc import x, y\n \n-def test_poly_matching_consistency():\n+def test_factor_with_extension_true_issue():\n+    z = expand((x-1)*(y-1))\n+    factored_z = factor(z, extension=[I])\n+    assert factored_z == (x - 1)*(y - 1), f\"Expected (x - 1)*(y - 1), but got {factored_z}\"\n     # Test for this issue:\n     # https://github.com/sympy/sympy/issues/5514\n     assert I * Poly(x, x) == Poly(I*x, x)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..829987c 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -11,7 +12,7 @@ from sympy.core.sympify import SympifyError\n from sympy.core.function import Function, Lambda\n from sympy.core.compatibility import default_sort_key\n \n-from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum\n+from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum, Symbol\n from sympy.functions.elementary.exponential import exp\n from sympy.testing.pytest import raises\n from sympy.core import I, pi\n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..7e20a8f 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -369,8 +369,35 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n-\n-def test_Number_new():\n+from sympy import Rational\n+\n+def test_issue_24543():\n+    for p in ('1.5', 1.5, 2):\n+        for q in ('1.5', 1.5, 2):\n+            assert Rational(p, q).as_numer_denom() == Rational('%s/%s'%(p,q)).as_numer_denom()\n+            \n+    assert Rational('0.5', '100') == Rational(1, 200)\n+\n+def test_rational_string_inputs():\n+    # Verify that string inputs are parsed correctly as fractions\n+    assert Rational('1.0', '2') == Rational(1, 2)\n+    assert Rational('0.5', '10') == Rational(1, 20)\n+    assert Rational('10.0', '4') == Rational(5, 2)\n+    assert Rational('0.25', '8') == Rational(1, 32)\n+    # Test for invalid input check, should raise error\n+    try:\n+        Rational('1.0.0', '2')\n+    except TypeError:\n+        pass\n+    else:\n+        assert False, \"Expected TypeError\"\n+        \n+    try:\n+        Rational('abcd', 'efgh')\n+    except TypeError:\n+        pass\n+    else:\n+        assert False, \"Expected TypeError\"\n     \"\"\"\"\n     Test for Number constructor\n     \"\"\"\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..9a1e358 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,53 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_with_auto_id(self):\n+        \"\"\"\n+        Test BoundWidget.id_for_label with auto_id supplied.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='custom_id_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_field_1')\n+\n+    def test_boundwidget_id_for_label_without_auto_id(self):\n+        \"\"\"\n+        Test BoundWidget.id_for_label without auto_id supplied.\n+        Check that the fallback is used correctly.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id=False)\n+        subwidgets = form['field'].subwidgets\n+        # Ensure it falls back to the original default behavior in the absence of auto_id\n+        self.assertEqual(subwidgets[0].id_for_label, 'id_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'id_field_1')\n+\n+    def test_boundwidget_id_for_label_with_custom_widget_attrs(self):\n+        \"\"\"\n+        Test BoundWidget.id_for_label using custom widget attributes.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'my-special-id'}),\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        # Check that the custom attribute ID is used instead of the auto_id\n+        self.assertEqual(subwidgets[0].id_for_label, 'my-special-id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'my-special-id_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..f26b88a 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -300,9 +300,46 @@ def test_tool_line_handle():\n         assert artist.get_visible()\n \n     assert tool_line_handle.positions == positions\n+import pytest\n+import numpy as np\n+from matplotlib import pyplot as plt\n+from matplotlib import widgets\n \n-\n-def check_lasso_selector(**kwargs):\n+def _mock_event(ax, xdata, ydata, name='mouse_click', button=1):\n+    \"\"\"\n+    Create a mocked mouse event in the Axes `ax`, at coordinates\n+    data coordinates xdata, ydata.\n+    \"\"\"\n+    x, y = ax.transData.transform((xdata, ydata))\n+    event = type('test', (), {})()  # Create a simple empty object.\n+    event.x = x\n+    event.y = y\n+    event.xdata = xdata\n+    event.ydata = ydata\n+    event.inaxes = ax\n+    event.name = name\n+    event.button = button\n+    event.key = None\n+    return event\n+\n+@pytest.mark.parametrize('direction', ['horizontal', 'vertical'])\n+def test_span_selector_no_forced_zero_limit(direction):\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [10, 30])\n+    ss = widgets.SpanSelector(ax, lambda vmin, vmax: None, direction, interactive=True)\n+    assert ax.get_xlim() == (10, 20) if direction == 'horizontal' else (10, 20)\n+    assert ax.get_ylim() == (10, 30) if direction == 'vertical' else (10, 30)\n+\n+    # Simulate a mouse event within the axes limits\n+    press_event = _mock_event(ax, 15, 15, button=1)\n+    ss._press(press_event)\n+    move_event = _mock_event(ax, 18, 18, button=1)\n+    ss._onmove(move_event)\n+    release_event = _mock_event(ax, 18, 18, button=1)\n+    ss._release(release_event)\n+\n+    assert ax.get_xlim() == (10, 20) if direction == 'horizontal' else (10, 20)\n+    assert ax.get_ylim() == (10, 30) if direction == 'vertical' else (10, 30)\n     ax = get_ax()\n \n     def onselect(verts):\n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..5ebb25a 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,11 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+from sklearn.exceptions import ConvergenceWarning\n+import pytest\n+import numpy as np\n+from sklearn.decomposition import SparseCoder\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..ae5a5eb 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -147,8 +147,28 @@ def test_multi_target_sample_weights():\n     X_test = [[1.5, 2.5, 3.5], [3.5, 4.5, 5.5]]\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n-\n-# Import the data\n+import pytest\n+import numpy as np\n+from sklearn.utils import shuffle\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.ensemble import RandomForestClassifier\n+from numpy.testing import assert_array_equal\n+\n+def test_cross_val_predict_multioutput_predict_proba():\n+    # Test that cross_val_predict works with MultiOutputClassifier and `method='predict_proba'`\n+    X, Y = make_multilabel_classification()\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    \n+    pred = cross_val_predict(mo_lda, X, Y, cv=5)  # Check it works without error\n+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')  # This should now work without raising AttributeError\n+    \n+    assert len(pred_proba) == Y.shape[0]  # Ensure the number of predictions matches the number of samples\n+    for p in pred_proba:\n+        assert isinstance(p, list)  # Ensure that each output is a list\n+        assert len(p) == Y.shape[1]  # And each list corresponds to the number of outputs\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n X = iris.data\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..d03492f 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -159,6 +159,24 @@ def test_restify_pep_585():\n \n \n @pytest.mark.skipif(sys.version_info < (3, 10), reason='python 3.10+ is required.')\n+\n+def test_restify_mock_inherited_class():\n+    # Test that a mocked inherited class is documented correctly\n+    with mock(['unknown']):\n+        import unknown\n+        # Simulate an inheritance\n+        unknown.secret.Class.__bases__ = (unknown.secret.BaseClass,)\n+        # Check restification includes the correct base class\n+        assert restify(unknown.secret.Class) == ':py:class:`unknown.secret.Class`'\n+\n+def test_stringify_mock_inherited_class():\n+    # Test stringification of mocked inherited class\n+    with mock(['unknown']):\n+        import unknown\n+        # Simulate an inheritance\n+        unknown.secret.Class.__bases__ = (unknown.secret.BaseClass,)\n+        # Check if the stringification correctly identifies the full class path\n+        assert stringify(unknown.secret.Class) == 'unknown.secret.Class'\n def test_restify_type_union_operator():\n     assert restify(int | None) == \":py:class:`int` | :py:obj:`None`\"  # type: ignore\n     assert restify(int | str) == \":py:class:`int` | :py:class:`str`\"  # type: ignore\n",
  "sympy__sympy-13551": ""
}