{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..1835ec2 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,8 +55,32 @@ compound_models = {\n             )\n }\n \n-\n-def test_coord_matrix():\n+from astropy.modeling import models as m\n+from astropy.modeling.separable import separability_matrix\n+\n+@pytest.mark.parametrize(('compound_model', 'expected_output', 'expected_matrix'), [\n+    (m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5),\n+     np.array([False, False, True, True]),\n+     np.array([[True, True, False, False], \n+               [True, True, False, False], \n+               [False, False, True, False], \n+               [False, False, False, True]])),\n+    ((m.Pix2Sky_TAN() & m.Linear1D(10)) & m.Linear1D(5),\n+     np.array([False, False, True, True]),\n+     np.array([[True, True, False, False], \n+               [True, True, False, False], \n+               [False, False, True, True], \n+               [False, False, True, True]])),\n+    (m.Pix2Sky_TAN() & (m.Linear1D(10) & m.Linear1D(5)),\n+     np.array([False, False, True, True]),\n+     np.array([[True, True, False, False], \n+               [True, True, False, False], \n+               [False, False, True, True], \n+               [False, False, True, True]]))\n+])\n+def test_nested_compound_models_separable(compound_model, expected_output, expected_matrix):\n+    assert_allclose(is_separable(compound_model), expected_output)\n+    assert_allclose(separability_matrix(compound_model), expected_matrix)\n     c = _coord_matrix(p2, 'left', 2)\n     assert_allclose(np.array([[1, 1], [0, 0]]), c)\n     c = _coord_matrix(p2, 'right', 2)\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..ec1d18b 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -410,6 +410,14 @@ class TestDiff(FitsTestCase):\n         columns = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10]\n \n         ta = BinTableHDU.from_columns(columns)\n+        # Test case for issue with VLAs in FITSDiff reporting differences in identical files\n+        vla_col = Column('a', format='QD', array=[[0], [0, 0]])\n+        vla_hdu = BinTableHDU.from_columns([vla_col])\n+        \n+        # Write to file and verify no differences when comparing the file to itself\n+        vla_hdu.writeto('vla_test.fits', overwrite=True)\n+        vla_diff = FITSDiff('vla_test.fits', 'vla_test.fits')\n+        assert vla_diff.identical, \"FITSDiff should not report differences for identical files with a VLA column\"\n         tb = BinTableHDU.from_columns([c.copy() for c in columns])\n \n         diff = TableDataDiff(ta.data, tb.data)\n@@ -601,7 +609,17 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_identical_vla_files(self):\n+        \"\"\"Test that identical files containing VLAs are reported as identical.\"\"\"\n+\n+        col = Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = BinTableHDU.from_columns([col])\n+        \n+        with fits.open('vla_test.fits', mode='update') as hdul:\n+            hdul[0].data = hdu.data\n+            hdul.flush()\n+        \n+        assert FITSDiff('vla_test.fits', 'vla_test.fits').identical, \"VLAs cause false difference report\"\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..34a732a 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,31 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        def __call__(self, *args):\n+            \"FOO\"\n+            pass\n+\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return 42\n+\n+    class Subclass(Base):\n+        def __call__(self, *args):\n+            pass\n+\n+        @property\n+        def bar(self):\n+            return 42\n+\n+    if Base.__call__.__doc__ is not None:\n+        # TODO: Maybe if __doc__ is None this test should be skipped instead?\n+        assert Subclass.__call__.__doc__ == \"FOO\"\n \n-def test_set_locale():\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..e74fedc 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -188,6 +188,10 @@ def test_unknown_unit3():\n     with pytest.raises(ValueError):\n         unit._get_converter(unit3)\n \n+    # Test that comparison with None does not raise a TypeError and returns False\n+    assert unit != None  # noqa: E711\n+    assert not unit == None  # This should also be False\n+\n     x = unit.to_string('latex')\n     y = unit2.to_string('cgs')\n \n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..23b4a62 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -62,8 +62,11 @@ def test_find_mod_objs():\n     assert 'collections.namedtuple' not in fqns\n     assert namedtuple not in objs\n \n+from astropy.utils import minversion\n+from types import ModuleType\n \n def test_minversion():\n+    # Existing test\n     from types import ModuleType\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n@@ -72,4 +75,4 @@ def test_minversion():\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..1ceac94 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -79,6 +79,58 @@ class TestHeaderFunctions(FitsTestCase):\n         assert header['B'] == 'B'\n         assert header.comments['B'] == 'C'\n \n+    def test_card_from_bytes(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object (assuming latin-1 encoding).\n+        \"\"\"\n+\n+        c = fits.Card.fromstring(b\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_card_from_str(self):\n+        \"\"\"\n+        Test loading a Card from a unicode `str` object.\n+        \"\"\"\n+\n+        c = fits.Card.fromstring(\"DEF     = 'def'\")\n+        assert c.keyword == 'DEF'\n+        assert c.value == 'def'\n+\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string.\n+\n+        See https://github.com/astropy/astropy/issues/8706\n+        \"\"\"\n+\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n+\n+    def test_header_fromstring_str(self):\n+        \"\"\"\n+        Test reading a Header from a unicode `str`.\n+        \"\"\"\n+\n+        header_str = (\n+            \"SIMPLE  = T                    / conforms to FITS standard\\n\"\n+            \"BITPIX  = 8                    / array data type\\n\"\n+            \"NAXIS   = 0                    / number of array dimensions\\n\"\n+            \"EXTEND  = T\\n\"\n+            \"END     \"\n+        )\n+        header = fits.Header.fromstring(header_str)\n+\n+        assert header['SIMPLE'] is True\n+        assert header['BITPIX'] == 8\n+        assert header['NAXIS'] == 0\n+        assert header['EXTEND'] is True\n+\n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n \n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..b041aba 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -149,8 +149,31 @@ class TestQuantityCreation:\n \n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n-\n-    def test_copy(self):\n+    \n+    def test_preserve_float16_dtype(self):\n+        # This test case ensures that float16 dtype is preserved when creating a Quantity.\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n+\n+    def test_preserve_float32_dtype(self):\n+        # This test case complements the original float32 preservation test.\n+        a3_32 = np.array([1., 2.], dtype=np.float32)\n+        q3_32 = u.Quantity(a3_32, u.kg)\n+        assert q3_32.dtype == a3_32.dtype\n+\n+    def test_float64_dtype(self):\n+        # This test case ensures that float64 dtype is correctly handled.\n+        a3_64 = np.array([1., 2.], dtype=np.float64)\n+        q3_64 = u.Quantity(a3_64, u.s)\n+        assert q3_64.dtype == a3_64.dtype\n+\n+    def test_float128_dtype(self):\n+        # This test case ensures that float128 dtype is correctly handled if available.\n+        if hasattr(np, 'float128'):  # Check for platform availability\n+            a3_128 = np.array([1., 2.], dtype=np.float128)\n+            q3_128 = u.Quantity(a3_128, u.A)\n+            assert q3_128.dtype == a3_128.dtype\n \n         # By default, a new quantity is constructed, but not if copy=False\n \n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..e941004 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,6 +218,19 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n+\n+    # Test cases for invalid characters in URL authentication fields\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n+    # Edge cases with properly encoded and valid URLs\n+    (URLValidator(), 'http://valid%20user:valid%20pass@example.com', None),\n+    (URLValidator(), 'http://user:pass@example.com', None),  # ':' is allowed if properly part of user and pass\n+    (URLValidator(), 'http://user@example.com', None),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..cabf507 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -8,6 +9,7 @@ from django.db.models import (\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n     Max, Min, Sum, Value,\n )\n+from django.db.models.expressions import Case, When\n from django.test import TestCase\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n@@ -395,6 +397,35 @@ class AggregateTestCase(TestCase):\n         sql = ctx.captured_queries[0]['sql']\n         self.assertIn('SELECT COUNT(*) ', sql)\n \n+    def test_count_distinct_expression(self):\n+        \"\"\"\n+        Test Count with Case and distinct=True.\n+        \"\"\"\n+        # Assuming Book model has a 'pages' and 'rating' field.\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_no_case(self):\n+        \"\"\"\n+        Test Count with distinct=True without a Case expression.\n+        \"\"\"\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count('rating', distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_case_without_distinct(self):\n+        \"\"\"\n+        Test Count with Case without distinct=True.\n+        \"\"\"\n+        aggs = Book.objects.aggregate(\n+            ratings_with_case=Count(Case(When(pages__gt=300, then='rating'))),\n+        )\n+        # Assuming 5 entries have pages > 300 and thus qualify for the count\n+        self.assertEqual(aggs['ratings_with_case'], 5)\n+\n     def test_non_grouped_annotation_not_in_group_by(self):\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..d65576b 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1093,6 +1093,12 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The default FILE_UPLOAD_PERMISSIONS should be set to 0o644.\n+        \"\"\"\n+        self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n     def test_override_file_upload_permissions(self):\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..8ab114a 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -29,7 +31,41 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n-    def test_basic(self):\n+    def test_subprocess_run_with_pgpassword(self):\n+        \"\"\"\n+        Test that subprocess.run is called with the correct environment,\n+        especially checking the PGPASSWORD.\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            pgpassword = env.get('PGPASSWORD', None)\n+            self.assertEqual(pgpassword, 'somepassword')\n+            return subprocess.CompletedProcess(args, 0)\n+        \n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': 'somepassword',\n+                'host': 'somehost',\n+                'port': '444',\n+            })\n+\n+    def test_subprocess_run_without_pgpassword(self):\n+        \"\"\"\n+        Test subprocess.run when no PGPASSWORD is set (no password provided).\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            pgpassword = env.get('PGPASSWORD', None)\n+            self.assertIsNone(pgpassword)\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+            })\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +149,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..40fac19 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -3,6 +3,7 @@ from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n+from django.contrib.contenttypes.models import ContentType\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n \n@@ -47,7 +48,24 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_missing_content_type_rename_ignore(self):\n+    class TestDynamicRouter:\n+        # A dynamic router to route writes to a specific database\n+        def db_for_write(self, model, **hints):\n+            return 'other'\n+\n+    @override_settings(DATABASE_ROUTERS=[TestDynamicRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        # Create initial content type on 'other' database\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        # Run migration that should rename the content type\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        # Assertions to verify the rename was successful\n+        self.assertFalse(ContentType.objects.using('other').filter(app_label='contenttypes_tests', model='foo').exists())\n+        self.assertTrue(ContentType.objects.using('other').filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        # Revert the migration\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        self.assertTrue(ContentType.objects.using('other').filter(app_label='contenttypes_tests', model='foo').exists())\n+        self.assertFalse(ContentType.objects.using('other').filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n@@ -63,4 +81,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..28adb18 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -426,6 +426,45 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n                 AlternateInline, MediaInline\n             ]\n         ma = EpisodeAdmin(Episode, self.site)\n+\n+    def test_get_inlines_based_on_request(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+        request = type('Request', (object,), {})()  # Mock request object\n+        # Test without any request name attribute\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+        # Test with 'alternate' request name\n+        request.name = 'alternate'\n+        self.assertEqual(ma.get_inlines(request, None), (AlternateInline,))\n+        self.assertEqual(type(ma.get_inline_instances(request)[0]), AlternateInline)\n+\n+        # Test with 'media' request name\n+        request.name = 'media'\n+        self.assertEqual(ma.get_inlines(request, None), (MediaInline,))\n+        self.assertEqual(type(ma.get_inline_instances(request)[0]), MediaInline)\n+\n+        # Test with an unknown request name\n+        request.name = 'unknown'\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..adae196 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -248,7 +248,25 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_usernames_with_trailing_newline(self):\n+        # Test with trailing newlines\n+        invalid_usernames_with_newline = ['username\\n', 'validname\\n', 'anothervalid\\n']\n+        valid_usernames_without_newline = ['username', 'validname', 'anothervalid']\n+        \n+        ascii_validator = validators.ASCIIUsernameValidator()\n+        unicode_validator = validators.UnicodeUsernameValidator()\n+        \n+        for username in invalid_usernames_with_newline:\n+            with self.subTest(username=username):\n+                with self.assertRaises(ValidationError):\n+                    ascii_validator(username)\n+                with self.assertRaises(ValidationError):\n+                    unicode_validator(username)\n+        \n+        for username in valid_usernames_without_newline:\n+            with self.subTest(username=username):\n+                ascii_validator(username)\n+                unicode_validator(username)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +276,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..9004de4 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -10,12 +10,34 @@ from .utils import ROOT, TEMPLATE_DIR\n OTHER_DIR = os.path.join(ROOT, 'other_templates')\n \n \n+import os\n+\n class RenderToStringTest(SimpleTestCase):\n \n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n-    def test_basic_context(self):\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_autoescape_default(self):\n+        # This tests the default behavior of Engine where autoescape is True by default\n+        engine = Engine(dirs=[TEMPLATE_DIR])  # autoescape=True by default\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n         self.assertEqual(\n             self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n             'obj:test\\n',\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..c22922b 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -278,6 +278,24 @@ class QueryDictTests(SimpleTestCase):\n         expected['\u028e\u01dd\u029e'] = '\u01ddnl\u0250\u028c'\n         self.assertEqual(q, expected)\n \n+    def test_memoryview_content(self):\n+        # Test with memoryview of bytes\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+        # Test with memoryview of a string\n+        r = HttpResponse(memoryview(b'another memory content'))\n+        self.assertEqual(r.content, b'another memory content')\n+\n+        # Test with empty memoryview\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+        # Test updating content with memoryview after initial content set\n+        r = HttpResponse('initial')\n+        r.content = memoryview(b'updated memory content')\n+        self.assertEqual(r.content, b'updated memory content')\n+\n     def test_fromkeys_empty_iterable(self):\n         self.assertEqual(QueryDict.fromkeys([]), QueryDict(''))\n \n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..9cea365 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -501,7 +501,22 @@ class LoaderTests(TestCase):\n         self.assertEqual(plan, expected_plan)\n \n     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_private'})\n-    def test_ignore_files(self):\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n+    def test_migrations_directory_absent(self):\n+        \"\"\"Test that MigrationLoader throws an error when the migrations directory is absent.\"\"\"\n+        with self.assertRaises(ImportError):\n+            with self.temporary_migration_module(module='non_existent_migrations'):\n+                MigrationLoader(connection)\n         \"\"\"Files prefixed with underscore, tilde, or dot aren't loaded.\"\"\"\n         loader = MigrationLoader(connection)\n         loader.load_disk()\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..161c153 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -607,8 +607,48 @@ class TestInlinePermissions(TestCase):\n     def setUp(self):\n         self.holder_change_url = reverse('admin:admin_inlines_holder2_change', args=(self.holder.id,))\n         self.client.force_login(self.user)\n+    def test_inline_add_m2m_view_only_perm(self):\n+        # Add view permission for books but no add/change/delete\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # Inlines should be read-only with view permission only.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n \n-    def test_inline_add_m2m_noperm(self):\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # Inlines should be read-only with view permission only.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        # Check if fields in the inline are read-only\n+        self.assertContains(response, '<p>The inline Book</p>')\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n         response = self.client.get(reverse('admin:admin_inlines_author_add'))\n         # No change permission on books, so no inline\n         self.assertNotContains(response, '<h2>Author-book relationships</h2>')\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..4c0ad60 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1820,6 +1820,12 @@ class ModelOneToOneFieldTests(TestCase):\n         bw2 = form.save()\n         self.assertEqual(bw2.score, 12)\n \n+    def test_model_to_dict_empty_fields(self):\n+        \"\"\"model_to_dict should return an empty dict when fields is an empty list.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields={}), {})\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n     def test_onetoonefield(self):\n         class WriterProfileForm(forms.ModelForm):\n             class Meta:\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..2585a34 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,8 +1,10 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from django.db.models.deletion import Collector\n \n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..6fa584c 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,13 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-201', 2, '0.00'),\n+            ('1e-300', 5, '0.00000'),\n+            ('1e-200', 0, '0'),\n+            ('1e-200', 8, '0.00000000'),\n+            ('1e-199', 10, '0.0000000000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..d784c0e 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,7 @@\n import os\n+import os\n+import subprocess\n+\n import signal\n import subprocess\n from unittest import mock\n@@ -81,6 +84,29 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                {\n+                    'PGSSLCERT': 'client.crt',\n+                    'PGSSLKEY': 'client.key',\n+                    'PGSSLMODE': 'verify-ca',\n+                    'PGSSLROOTCERT': 'root.crt',\n+                },\n+                None\n+            )\n+        )\n+\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n",
  "django__django-11265": "",
  "django__django-11276": "",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..8c9ab0b 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -253,8 +253,28 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), 'Set foo')\n \n+    def test_skip_checks_flag(self):\n+        \"\"\"\n+        Test that the --skip-checks option bypasses system checks.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',  # This should trigger E001 if checks run\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n \n-class UtilsTests(SimpleTestCase):\n+    def test_checks_run_without_skip_checks_flag(self):\n+        \"\"\"\n+        Ensure system checks run when --skip-checks is not specified.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',  # This should trigger E001\n+        })\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        # Expect an error related to STATICFILES_DIRS setting\n+        self.assertIn('staticfiles.E001', err)\n+        self.assertNotEqual(out.strip(), 'Set foo')\n \n     def test_no_existent_external_program(self):\n         msg = 'Error executing a_42_command_that_doesnt_exist_42'\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..e113061 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,3 +1,4 @@\n+\n from django.test import SimpleTestCase\n from django.urls.resolvers import RegexPattern, RoutePattern\n from django.utils.translation import gettext_lazy as _\n@@ -8,8 +9,34 @@ class RegexPatternTests(SimpleTestCase):\n     def test_str(self):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n \n+from django.test.utils import override_settings\n+from django.urls.resolvers import get_resolver\n+\n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # Resolver for a default URL configuration (passing no argument) and for the\n+        # settings.ROOT_URLCONF returns the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_different_urlconf_after_request(self):\n+        # Simulate handling a request by setting urlconf, then check the resolver cache\n+        # handles a different URL configuration properly.\n+        get_resolver()  # Cache resolver for ROOT_URLCONF\n+        second_resolver = get_resolver('urlpatterns.path_dynamic_urls')\n+        self.assertIsNot(get_resolver(), second_resolver)\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_with_and_without_urlconf_specified(self):\n+        # Test that specifying urlconf None and ROOT_URLCONF results in the same resolver.\n+        resolver_none = get_resolver(None)\n+        resolver_default = get_resolver('urlpatterns.path_urls')\n+        self.assertIs(resolver_none, resolver_default)\n \n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..467d3e3 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -226,8 +226,38 @@ class BaseModelBackendTest:\n         authenticate(username='no_such_user', password='test')\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n+from django.test import TestCase, override_settings\n+from django.contrib.auth import get_user_model, authenticate\n+from django.contrib.auth.hashers import make_password\n+\n+User = get_user_model()\n \n class ModelBackendTest(BaseModelBackendTest, TestCase):\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_no_database_query_if_username_is_none(self):\n+        \"\"\"\n+        Test that no database query is made when username is None.\n+        \"\"\"\n+        from auth_tests.test_auth_backends import CountingMD5PasswordHasher\n+        CountingMD5PasswordHasher.calls = 0\n+\n+        with self.assertNumQueries(0):\n+            authenticate(username=None, password='test')\n+\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_no_database_query_if_password_is_none(self):\n+        \"\"\"\n+        Test that no database query is made when password is None.\n+        \"\"\"\n+        from auth_tests.test_auth_backends import CountingMD5PasswordHasher\n+        CountingMD5PasswordHasher.calls = 0\n+\n+        with self.assertNumQueries(0):\n+            authenticate(username='test', password=None)\n+\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n     \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..9e7b45f 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,6 +124,21 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    def test_union_with_changed_values_list(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+\n+        # Verify that the values_list can change columns in a union\n+        reserved_name_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_name_order, (2,))\n+\n+        # Additional tests to verify changing of column list works correctly\n+        reserved_name = qs1.union(qs1).values_list('name').get()\n+        self.assertEqual(reserved_name, ('a',))\n+\n+        reserved_combined = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_combined, ('a', 2))\n+        \n     def test_union_with_two_annotated_values_list(self):\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n",
  "django__django-11532": "",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..110da4d 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model, ManyToManyField, IntegerField\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n@@ -11,6 +12,57 @@ from django.test import SimpleTestCase\n from .models import (\n     Band, Song, User, ValidationTestInlineModel, ValidationTestModel,\n )\n+class CustomField(Field):\n+    \"\"\"Custom field accessible only via instance.\"\"\"\n+    def contribute_to_class(self, cls, name):\n+        super().contribute_to_class(cls, name)\n+        setattr(cls, self.name, self)\n+\n+    def __get__(self, instance, owner):\n+        if instance is None:\n+            raise AttributeError()\n+\n+\n+class PositionFieldTestTests(CheckTestCase):\n+\n+    def test_position_field_accessible_via_instance(self):\n+        class PositionFieldTestModel(Model):\n+            number = IntegerField(default=0)\n+            order = CustomField()\n+\n+        class PositionFieldTestModelAdmin(ModelAdmin):\n+            list_display = ('number', 'order')\n+\n+        self.assertIsValid(PositionFieldTestModelAdmin, PositionFieldTestModel)\n+\n+    def test_position_field_raises_attribute_error(self):\n+        class PositionFieldTestModel(Model):\n+            order = CustomField()\n+\n+        class PositionFieldTestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent',)\n+\n+        self.assertIsInvalid(\n+            PositionFieldTestModelAdmin, PositionFieldTestModel, (\n+                \"The value of 'list_display[0]' refers to 'non_existent', \"\n+                \"which is not a callable, an attribute of 'PositionFieldTestModelAdmin', \"\n+                \"or an attribute or method on ''.\"\n+            ), 'admin.E108'\n+        )\n+\n+    def test_m2m_field_in_list_display_raises_error(self):\n+        class ManyToManyFieldModel(Model):\n+            name = IntegerField(default=0)\n+            tags = ManyToManyField('self')\n+\n+        class ManyToManyFieldModelAdmin(ModelAdmin):\n+            list_display = ('name', 'tags')\n+\n+        self.assertIsInvalid(\n+            ManyToManyFieldModelAdmin, ManyToManyFieldModel, (\n+                \"The value of 'list_display[1]' must not be a ManyToManyField.\"\n+            ), 'admin.E109'\n+        )\n \n \n class CheckTestCase(SimpleTestCase):\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..55a0cc1 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,9 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n+from django.db import models\n+from datetime import datetime\n \n \n class OrderingTests(TestCase):\n@@ -461,8 +463,46 @@ class OrderingTests(TestCase):\n             articles, ['Article 1', 'Article 4', 'Article 3', 'Article 2'],\n             attrgetter('headline')\n         )\n+    \n+    def test_order_by_ptr_field_with_default_ordering_by_expression(self):\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n+    def test_ordering_with_f_expression(self):\n+        a1 = OrderedByFArticle.objects.create(\n+            headline='h4',\n+            pub_date=datetime(2005, 7, 29),\n+            author=self.author_1\n+        )\n+        a2 = OrderedByFArticle.objects.create(\n+            headline='h5',\n+            pub_date=datetime(2005, 7, 30),\n+            author=self.author_2\n+        )\n+        articles = OrderedByFArticle.objects.all()\n+        self.assertQuerysetEqual(articles, [a2, a1], attrgetter('headline'))\n \n-    def test_deprecated_values_annotate(self):\n+    def test_ordering_on_reference_with_expression(self):\n+        ref1 = Reference.objects.create(article=self.a1)\n+        ref2 = Reference.objects.create(article=self.a2)\n+        references = Reference.objects.all().order_by('article__headline')\n+        self.assertQuerysetEqual(references, [ref1, ref2], attrgetter('article.headline'))\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..b38986f 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -390,8 +390,27 @@ class AggregateTestCase(TestCase):\n \n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n+    def test_distinct_on_aggregate_min_and_max(self):\n+        \"\"\"\n+        Test DISTINCT support for Min and Max aggregates although it might be redundant.\n+        \"\"\"\n+        for aggregate in (Min, Max):\n+            with self.subTest(aggregate=aggregate.__name__):\n+                books = Book.objects.aggregate(ratings=aggregate('rating', distinct=True))\n+                # Min and Max with DISTINCT should return the min and max without duplicates\n+                self.assertEqual(books['ratings'], books['ratings'])\n \n-    def test_count_star(self):\n+    def test_distinct_avg_sum(self):\n+        \"\"\"\n+        Test DISTINCT support for Avg and Sum aggregates.\n+        \"\"\"\n+        for aggregate, expected_result in (\n+            (Avg, 4.125),  # Assuming the input data such that average of distinct 'rating' is 4.125\n+            (Sum, 16.5),   # Assuming the input data such that sum of distinct 'rating' is 16.5\n+        ):\n+            with self.subTest(aggregate=aggregate.__name__):\n+                books = Book.objects.aggregate(result=aggregate('rating', distinct=True))\n+                self.assertEqual(books['result'], expected_result)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..d8d38e8 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -709,6 +709,30 @@ class AutodetectorTests(TestCase):\n         self.assertOperationFieldAttributes(changes, \"testapp\", 0, 1, auto_now_add=True)\n         self.assertOperationFieldAttributes(changes, \"testapp\", 0, 2, auto_now_add=True)\n         self.assertEqual(mocked_ask_method.call_count, 3)\n+    def test_uuid_to_fk_dependency(self):\n+        \"\"\"\n+        Tests conversion of a UUIDField to ForeignKey and ensures\n+        dependencies are correctly set.\n+        \"\"\"\n+        # Initial state with UUIDField\n+        app1_model = ModelState(\"app1\", \"Model1\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name='another app')),\n+        ])\n+        app2_model = ModelState(\"app2\", \"Model2\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+        ])\n+\n+        # Changed state with ForeignKey\n+        app1_model_fk = ModelState(\"app1\", \"Model1\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+            (\"another_app\", models.ForeignKey(\"app2.Model2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name='another app')),\n+        ])\n+\n+        changes = self.get_changes([app1_model, app2_model], [app1_model_fk, app2_model])\n+        self.assertNumberMigrations(changes, 'app1', 1)\n+        self.assertOperationTypes(changes, 'app1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'app1', 0, [('app2', '__first__')])\n \n     def test_remove_field(self):\n         \"\"\"Tests autodetection of removed fields.\"\"\"\n@@ -2399,4 +2423,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..01223e7 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -224,6 +224,23 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_kwargs(self):\n+        \"\"\"Test mutually exclusive group handling with keyword arguments.\"\"\"\n+        out = StringIO()\n+        # Test using foo_id keyword argument\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        # Test using foo_name keyword argument\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Ensure that providing neither raises an error\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_required_args(self):\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..d15f583 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,14 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_maxlength_attribute(self):\n+        # Check that the maximum length is set on the username field widget as an attribute.\n+        data = {\n+            'username': 'u' * 255,\n+            'password': 'pwd',\n+        }\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..d66a0e3 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -305,6 +305,38 @@ class WriterTests(SimpleTestCase):\n             \"(2, migrations.test_writer.IntEnum(2))], \"\n             \"default=migrations.test_writer.IntEnum(1))\"\n         )\n+    def test_serialize_translated_enum(self):\n+        from django.utils.translation import gettext_lazy as _\n+\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('apple')\n+            B = _('banana')\n+\n+        # Verify that default uses the Enum name, rather than the translated value\n+        field = models.CharField(default=TextTranslatedEnum.A, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('apple', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('banana', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n+\n+        # Test the BinaryEnum as well to ensure it's also consistent\n+        class BinaryTranslatedEnum(enum.Enum):\n+            A = b'carrot'\n+            B = b'date'\n+\n+        field = models.CharField(default=BinaryTranslatedEnum.A, choices=[(m.value, m) for m in BinaryTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"(b'carrot', migrations.test_writer.BinaryTranslatedEnum['A']), \"\n+            \"(b'date', migrations.test_writer.BinaryTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.BinaryTranslatedEnum['A'])\"\n+        )\n \n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..789d251 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from datetime import datetime\n \n@@ -316,7 +317,26 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        test_cases = [\n+            # Simulate current year for test scenarios\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (datetime(2020, 11, 6, 8, 49, 37), 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (datetime(2020, 11, 6, 8, 49, 37), 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (datetime(2048, 11, 6, 8, 49, 37), 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (datetime(2048, 11, 6, 8, 49, 37), 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        ]\n+\n+        for utcnow, rfc850str, expected_date in test_cases:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..1f2a389 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,49 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+import copy\n+from django.forms import CharField, Form\n+from django.test import SimpleTestCase\n+\n+class DeepCopyTests(SimpleTestCase):\n+\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_deep_copy_modification(self):\n+        # Set up initial field with custom error messages\n+        field = CharField(error_messages={'required': 'Original required message.'})\n+        field_copy = copy.deepcopy(field)\n+\n+        # Modify the original field's error messages\n+        field.error_messages['required'] = 'Modified required message.'\n+\n+        # Check if the deep copied field's error message remains unchanged\n+        self.assertEqual(field_copy.error_messages['required'], 'Original required message.')\n+        self.assertEqual(field.error_messages['required'], 'Modified required message.')\n+\n+    def test_deep_copy_multiple_fields(self):\n+        # Check deep copy behavior with multiple different fields\n+        field1 = CharField(error_messages={'invalid': 'Error in field1'})\n+        field2 = CharField(error_messages={'invalid': 'Error in field2'})\n+        \n+        field1_copy = copy.deepcopy(field1)\n+        field2_copy = copy.deepcopy(field2)\n+\n+        # Verify that each field's error messages are independent\n+        field1.error_messages['invalid'] = 'Changed error in field1'\n+        field2.error_messages['invalid'] = 'Changed error in field2'\n+\n+        self.assertEqual(field1_copy.error_messages['invalid'], 'Error in field1')\n+        self.assertEqual(field2_copy.error_messages['invalid'], 'Error in field2')\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..c1a42b7 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n@@ -205,6 +207,24 @@ class BulkCreateTests(TestCase):\n         NoFields.objects.bulk_create([NoFields() for i in range(2)])\n         self.assertEqual(NoFields.objects.count(), 2)\n \n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        objs = [Country(name='Country %d' % i) for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            # Explicit batch_size > max_batch_size, should use max_batch_size\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 100)\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_no_batch_size_uses_max_batch_size(self):\n+        objs = [Country(name='Country %d' % i) for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            # No batch_size specified, should use max_batch_size\n+            Country.objects.bulk_create(objs)\n+\n     @skipUnlessDBFeature('has_bulk_insert')\n     def test_explicit_batch_size_efficiency(self):\n         objs = [TwoFields(f1=i, f2=i) for i in range(0, 100)]\n",
  "django__django-11964": "diff --git a/tests/model_fields/test_charfield.py b/tests/model_fields/test_charfield.py\nindex c6162e5..63b5604 100644\n--- a/tests/model_fields/test_charfield.py\n+++ b/tests/model_fields/test_charfield.py\n@@ -1,3 +1,4 @@\n+\n from unittest import skipIf\n \n from django.core.exceptions import ValidationError\n@@ -6,8 +7,32 @@ from django.test import SimpleTestCase, TestCase\n \n from .models import Post\n \n+from django.utils.translation import gettext_lazy as _\n+from .models import IntegerModel\n \n class TestCharField(TestCase):\n+    class SampleTextChoices(models.TextChoices):\n+        OPTION_A = \"A\", _(\"Option A\")\n+        OPTION_B = \"B\", _(\"Option B\")\n+\n+    def test_textchoices_value_type(self):\n+        \"\"\"\n+        Ensures that using TextChoices does not change the expected original type\n+        of the value when creating and retrieving from the database.\n+        \"\"\"\n+        # Create an instance of Post using SampleTextChoices for the `title` field\n+        instance = Post.objects.create(title=self.SampleTextChoices.OPTION_A, body=\"Test body\")\n+        \n+        # Check the value type after creation\n+        self.assertIsInstance(instance.title, str)\n+        self.assertEqual(instance.title, self.SampleTextChoices.OPTION_A)\n+        \n+        # Reload the instance from the database\n+        instance.refresh_from_db()\n+        \n+        # Check the value type after retrieval\n+        self.assertIsInstance(instance.title, str)\n+        self.assertEqual(instance.title, self.SampleTextChoices.OPTION_A)\n \n     def test_max_length_passed_to_formfield(self):\n         \"\"\"\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..cddf0bd 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -168,7 +168,19 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertIsInstance(val, str)\n         self.assertEqual(val, 'translated')\n \n-    def test_iterator_choices(self):\n+    def test_override_get_FIELD_display(self):\n+        \"\"\"\n+        Test that the get_FOO_display() method can be overridden in Django 2.2+.\n+        \"\"\"\n+        \n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return \"something\"\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n         \"\"\"\n         get_choices() works with Iterators.\n         \"\"\"\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..b153de0 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,6 +9,8 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db import connection\n+from django.db.models import Index\n from django.test.utils import override_settings\n from django.utils import timezone\n \n@@ -34,7 +36,45 @@ class SchemaIndexesTests(TestCase):\n         )\n         self.assertEqual(index_name, \"indexes_article_c1_a52bd80b123\")\n \n-    def test_index_name(self):\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_list_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n         \"\"\"\n         Index names on the built-in database backends::\n             * Are truncated as needed.\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..48298d1 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -7,6 +8,7 @@ from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n+from django.db.models import LookUp\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n@@ -107,7 +109,12 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_preserve_list_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['x', 'y', 'z']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['x', 'y', 'z'])\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..736cb03 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -844,6 +844,27 @@ class ChangeListTests(TestCase):\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 2)\n \n+    def test_get_list_editable_queryset_with_multiple_special_chars_in_prefix(self):\n+        \"\"\"Test list editable queryset retrieval with a prefix having multiple special regex characters.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form*-TOTAL_FORMS': '2',\n+            'form*-INITIAL_FORMS': '2',\n+            'form*-MIN_NUM_FORMS': '0',\n+            'form*-MAX_NUM_FORMS': '1000',\n+            'form*-0-uuid': str(a.pk),\n+            'form*-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form*')\n+        self.assertEqual(queryset.count(), 1)\n+\n     def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..a1075cd 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,6 +1103,28 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n+    def test_split_array_field_checkbox_handling(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        # Pre-existing data with True followed by False\n+        context = widget.get_context('name', [True, False, True, False])\n+        subwidgets = context['widget']['subwidgets']\n+        # Check that only the appropriate checkboxes are marked as checked\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in subwidgets],\n+            [{'checked': True}, {}, {'checked': True}, {}]\n+        )\n+\n+    def test_split_array_field_no_persistent_checked_state(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        # Initial context with all False\n+        context = widget.get_context('name', [False, False, False])\n+        subwidgets = context['widget']['subwidgets']\n+        # Expect no checkbox to be checked\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in subwidgets],\n+            [{}, {}, {}]\n+        )\n+\n     def test_render(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..cfb5195 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -252,6 +252,11 @@ class SmallPKData(models.Model):\n # class TimePKData(models.Model):\n #    data = models.TimeField(primary_key=True)\n \n+import uuid\n+\n+class UUIDDefaultData(models.Model):\n+    data = models.UUIDField(primary_key=True, default=uuid.uuid4)\n+\n \n class UUIDData(models.Model):\n     data = models.UUIDField(primary_key=True)\n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..8278557 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -87,7 +87,34 @@ class SimpleTagTests(TagTestCase):\n             t = self.engine.from_string(\"%s as var %%}Result: {{ var }}\" % entry[0][0:-2])\n             self.assertEqual(t.render(c), \"Result: %s\" % entry[1])\n \n-    def test_simple_tag_errors(self):\n+    def test_simple_tag_with_keyword_only_arguments(self):\n+        c = Context()\n+\n+        templates = [\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}', \n+             'simple_keyword_only_default - Expected result: 37'),\n+            ('{% load custom %}{% simple_keyword_only_default %}', \n+             'simple_keyword_only_default - Expected result: 42'),\n+        ]\n+\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        error_templates = [\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+             '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n+            (\"'simple_keyword_only_param' received multiple values for keyword argument 'kwarg'\",\n+             '{% load custom %}{% simple_keyword_only_param kwarg=42 kwarg=37 %}'),\n+        ]\n+\n+        for entry in error_templates:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1])\n+\n+        for entry in error_templates:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(\"%s as var %%}\" % entry[1][0:-2])\n         errors = [\n             (\"'simple_one_default' received unexpected keyword argument 'three'\",\n                 '{% load custom %}{% simple_one_default 99 two=\"hello\" three=\"foo\" %}'),\n",
  "django__django-12276": "diff --git a/tests/forms_tests/widget_tests/test_fileinput.py b/tests/forms_tests/widget_tests/test_fileinput.py\nindex c3ea9d6..cdd9fc4 100644\n--- a/tests/forms_tests/widget_tests/test_fileinput.py\n+++ b/tests/forms_tests/widget_tests/test_fileinput.py\n@@ -14,7 +14,20 @@ class FileInputTest(WidgetTest):\n         self.check_html(self.widget, 'email', 'test@example.com', html='<input type=\"file\" name=\"email\">')\n         self.check_html(self.widget, 'email', '', html='<input type=\"file\" name=\"email\">')\n         self.check_html(self.widget, 'email', None, html='<input type=\"file\" name=\"email\">')\n+    def test_fileinput_required_attribute(self):\n+        \"\"\"\n+        Test that FileInput does not include 'required' when initial data exists.\n+        \"\"\"\n+        widget = FileInput()\n+        \n+        # Case with no initial value\n+        html = widget.render(name='file1', value=None)\n+        self.assertHTMLEqual(html, '<input type=\"file\" name=\"file1\" required>')\n+\n+        # Case with initial value\n+        html_with_initial = widget.render(name='file1', value='resume.txt')\n+        self.assertHTMLEqual(html_with_initial, '<input type=\"file\" name=\"file1\">')\n \n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), True)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {'field': 'value'}, 'field'), False)\n+        self.assertIs(self.widget.value_omitted_from_data({}, {'field': 'value'}, 'field'), False)\n",
  "django__django-12304": "diff --git a/tests/template_tests/test_callables.py b/tests/template_tests/test_callables.py\nindex d71266b..cb26c56 100644\n--- a/tests/template_tests/test_callables.py\n+++ b/tests/template_tests/test_callables.py\n@@ -1,6 +1,9 @@\n+\n from unittest import TestCase\n \n-from django.template import Context, Engine\n+from django.template import Context, Engine, Template\n+from django.test import SimpleTestCase\n+from .models import Suit\n \n \n class CallableVariablesTests(TestCase):\n@@ -95,7 +98,18 @@ class CallableVariablesTests(TestCase):\n         # template rendering.\n         self.assertEqual(my_doodad.num_calls, 0)\n \n-    def test_do_not_call_and_alters_data(self):\n+    def test_enum_in_template(self):\n+        c = Context({'Suit': Suit})\n+        template = Template('{{ Suit.DIAMOND.label }}|{{ Suit.DIAMOND.value }}')\n+        self.assertEqual(template.render(c), 'Diamond|1')\n+\n+    def test_enum_comparison_in_template(self):\n+        class Student:\n+            year_in_school = Suit.DIAMOND\n+\n+        c = Context({'student': Student()})\n+        template = Template('{% if student.year_in_school == Suit.DIAMOND %}Matched{% else %}Not Matched{% endif %}')\n+        self.assertEqual(template.render(c), 'Matched')\n         # If we combine ``alters_data`` and ``do_not_call_in_templates``, the\n         # ``alters_data`` attribute will not make any difference in the\n         # template system's behavior.\n@@ -122,4 +136,4 @@ class CallableVariablesTests(TestCase):\n \n         # Double-check that the object was really never called during the\n         # template rendering.\n-        self.assertEqual(my_doodad.num_calls, 0)\n+        self.assertEqual(my_doodad.num_calls, 0)\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..9414b73 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -129,15 +129,26 @@ class UtilsTests(SimpleTestCase):\n             ('test_from_model', article.test_from_model()),\n             ('non_field', INSTANCE_ATTRIBUTE)\n         )\n-\n-        mock_admin = MockModelAdmin()\n-        for name, value in verifications:\n-            field, attr, resolved_value = lookup_field(name, article, mock_admin)\n-\n-            if field is not None:\n-                resolved_value = display_for_field(resolved_value, field, self.empty_value)\n-\n-            self.assertEqual(value, resolved_value)\n+from django.contrib.admin.utils import display_for_field\n+from django.db import models\n+import json\n+\n+class AdminUtilsTests(TestCase):\n+    empty_value = '-'\n+    \n+    def test_json_display_for_field(self):\n+        tests = [\n+            ({\"foo\": \"bar\"}, '{\"foo\": \"bar\"}'),\n+            ({\"a\": {\"b\": \"c\"}}, '{\"a\": {\"b\": \"c\"}}'),\n+            ([\"a\", \"b\"], '[\"a\", \"b\"]'),\n+            ('a', '\"a\"'),\n+            ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),  # Invalid JSON.\n+            (None, self.empty_value),  # Testing None with JSONField\n+        ]\n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                actual_display = display_for_field(value, models.JSONField(), self.empty_value)\n+                self.assertEqual(actual_display, expected_display)\n \n     def test_null_display_for_field(self):\n         \"\"\"\n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..cb4a280 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1015,7 +1015,26 @@ class OtherModelTests(SimpleTestCase):\n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n \n-    def test_m2m_table_name_clash(self):\n+    @isolate_apps('invalid_models_tests')\n+    def test_order_of_onetoonefields_mti(self):\n+        class Document(models.Model):\n+            pass\n+\n+        class PickingCorrectOrder(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking_origin', on_delete=models.PROTECT)\n+\n+        class PickingIncorrectOrder(Document):\n+            origin = models.OneToOneField(Document, related_name='picking_origin', on_delete=models.PROTECT)\n+            # This should throw an ImproperlyConfigured error as per the original issue.\n+            with self.assertRaisesMessage(\n+                ImproperlyConfigured,\n+                \"Add parent_link=True to invalid_models_tests.PickingIncorrectOrder.origin.\"\n+            ):\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        # Test that the correct order does not result in errors.\n+        self.assertEqual(PickingCorrectOrder.check(), [])\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n \n",
  "django__django-12419": "",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..c00f572 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -14,6 +14,7 @@ from django.db.models import (\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n+from django.utils.functional import SimpleLazyObject\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n )\n@@ -29,6 +30,23 @@ from .models import (\n \n \n class BasicExpressionsTests(TestCase):\n+    def test_subquery_with_SimpleLazyObject(self):\n+        manager = Manager.objects.create(name='LazyManager')\n+        company = Company.objects.create(\n+            name='LazyCompany',\n+            ceo=Employee.objects.create(firstname='John', lastname='Doe'),\n+        )\n+        lazy_manager = SimpleLazyObject(lambda: Manager.objects.get(pk=manager.pk))\n+        \n+        subquery = Employee.objects.filter(\n+            lastname=OuterRef('ceo__lastname')\n+        ).values('manager')\n+        \n+        queryset = Company.objects.annotate(\n+            ceo_manager=Subquery(subquery),\n+        ).filter(ceo_manager=lazy_manager)\n+        \n+        self.assertEqual(queryset.get(), company)\n     @classmethod\n     def setUpTestData(cls):\n         cls.example_inc = Company.objects.create(\n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..961ff5f 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -18,7 +18,7 @@ from django.db.models import CharField, DateField, DateTimeField, UUIDField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n-\n+from django.db.models import ManyToManyField\n from .models import (\n     Advisor, Album, Band, Bee, Car, Company, Event, Honeycomb, Individual,\n     Inventory, Member, MyFileField, Profile, School, Student,\n@@ -138,7 +138,65 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         self.assertEqual(f2.widget.attrs['maxlength'], '20')\n         self.assertEqual(f2.widget.attrs['size'], '10')\n \n-    def test_formfield_overrides_for_datetime_field(self):\n+    def test_formfield_overrides_m2m_filter_widget(self):\n+        \"\"\"\n+        The autocomplete_fields, raw_id_fields, filter_vertical, and\n+        filter_horizontal widgets for ManyToManyFields may be overridden by\n+        specifying a widget in formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_vertical = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n+\n+    def test_formfield_for_manytomany_autocomplete_widget(self):\n+        \"\"\"\n+        Test that specific ManyToManyField is using the AutocompleteSelectMultiple widget\n+        when specified in autocomplete_fields.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            autocomplete_fields = ['members']\n+\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, admin.widgets.AutocompleteSelectMultiple)\n+\n+    def test_formfield_for_manytomany_raw_id_widget(self):\n+        \"\"\"\n+        Test that ManyToManyField is using the ManyToManyRawIdWidget when specified in raw_id_fields.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            raw_id_fields = ['members']\n+\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, admin.widgets.ManyToManyRawIdWidget)\n+\n+    def test_formfield_for_manytomany_filter_vertical_widget(self):\n+        \"\"\"\n+        Test that ManyToManyField is using the FilteredSelectMultiple widget with vertical filter.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_vertical = ['members']\n+\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, admin.widgets.FilteredSelectMultiple)\n+\n+    def test_formfield_for_manytomany_filter_horizontal_widget(self):\n+        \"\"\"\n+        Test that ManyToManyField is using the FilteredSelectMultiple widget with horizontal filter.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_horizontal = ['members']\n+\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, admin.widgets.FilteredSelectMultiple)\n         \"\"\"\n         Overriding the widget for DateTimeField doesn't overrides the default\n         form_class for that field (#26449).\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..10af725 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2453,4 +2453,29 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..2ede56d 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -6,6 +6,8 @@ from operator import attrgetter\n from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models import Exists, Max, OuterRef\n+from django.db import models\n+from django.test.utils import isolate_apps\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -179,7 +181,43 @@ class LookupTests(TestCase):\n         with self.assertNumQueries(expected_num_queries):\n             self.assertEqual(Author.objects.in_bulk(authors), authors)\n \n-    def test_in_bulk_with_field(self):\n+    def test_in_bulk_meta_constraint(self):\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n         self.assertEqual(\n             Article.objects.in_bulk([self.a1.slug, self.a2.slug, self.a3.slug], field_name='slug'),\n             {\n",
  "django__django-12858": "",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..29c0726 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,37 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_constant_expression_group_by(self):\n+        # This test case is based on the issue where a constant expression in ExpressionWrapper\n+        # erroneously results in SQL with an invalid GROUP BY clause.\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        annotated_query = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n+        \n+        # Check that the GROUP BY clause does not contain the constant\n+        sql, params = annotated_query.query.sql_with_params()\n+        self.assertNotIn('GROUP BY \"model\".\"column_a\", 3', sql)\n+        self.assertIn('GROUP BY \"model\".\"column_a\"', sql)\n+\n+    def test_non_constant_expression_group_by(self):\n+        # Ensure non-constant expressions are handled correctly in GROUP BY\n+        expr = ExpressionWrapper(F('column_c') * 2, output_field=IntegerField())\n+        annotated_query = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n+        \n+        # Check the SQL query is formed correctly\n+        sql, params = annotated_query.query.sql_with_params()\n+        self.assertIn('GROUP BY \"model\".\"column_a\", \"model\".\"column_c\" * 2', sql)\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a43cfb4..e0f1191 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -66,6 +66,7 @@ class DateTimePK(models.Model):\n class ExtraInfo(models.Model):\n     info = models.CharField(max_length=100)\n     note = models.ForeignKey(Note, models.CASCADE, null=True)\n+    filterable = models.BooleanField(default=True)\n     value = models.IntegerField(null=True)\n     date = models.ForeignKey(DateTimePK, models.SET_NULL, null=True)\n \n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..5f1b2bd 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,39 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_fk(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        article_1 = Article.objects.create(author=author_1, headline=\"Article 1\", pub_date=\"2023-01-01\")\n+        article_2 = Article.objects.create(author=author_2, headline=\"Article 2\", pub_date=\"2023-01-02\")\n+        \n+        # Test ordering by author__editor (simulating self-referential FK)\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__name'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+        \n+        # Test ordering by author__editor_id\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+    def test_order_by_self_referential_descending(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        article_1 = Article.objects.create(author=author_1, headline=\"Article 1\", pub_date=\"2023-01-01\")\n+        article_2 = Article.objects.create(author=author_2, headline=\"Article 2\", pub_date=\"2023-01-02\")\n+        \n+        # Test descending order by author__id\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +386,39 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_order_by_self_referential_fk(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        article_1 = Article.objects.create(author=author_1, headline=\"Article 1\", pub_date=\"2023-01-01\")\n+        article_2 = Article.objects.create(author=author_2, headline=\"Article 2\", pub_date=\"2023-01-02\")\n+        \n+        # Test ordering by author__editor (simulating self-referential FK)\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__name'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+        \n+        # Test ordering by author__editor_id\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline'),\n+        )\n+\n+    def test_order_by_self_referential_descending(self):\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        article_1 = Article.objects.create(author=author_1, headline=\"Article 1\", pub_date=\"2023-01-01\")\n+        article_2 = Article.objects.create(author=author_2, headline=\"Article 2\", pub_date=\"2023-01-02\")\n+        \n+        # Test descending order by author__id\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline'),\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "",
  "django__django-13109": "diff --git a/tests/model_forms/models.py b/tests/model_forms/models.py\nindex ff8ad74..81dde14 100644\n--- a/tests/model_forms/models.py\n+++ b/tests/model_forms/models.py\n@@ -27,6 +27,19 @@ class Category(models.Model):\n     def __repr__(self):\n         return self.__str__()\n \n+class ArticleManager(models.Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        return qs.filter(archived=False)\n+\n+class Article(models.Model):\n+    title = models.CharField(max_length=100)\n+    archived = models.BooleanField(default=False)\n+    # Don't include archived articles by default.\n+    objects = ArticleManager()\n+    \n+class FavoriteArticle(models.Model):\n+    article = models.ForeignKey(Article, on_delete=models.CASCADE)\n \n class Writer(models.Model):\n     name = models.CharField(max_length=50, help_text='Use both first and last names.')\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..1628e38 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,7 +867,26 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n-    def test_real_apps(self):\n+    def test_reference_mixed_case_app_label(self):\n+        new_apps = Apps()\n+        \n+        class Category(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCase_App'\n+                apps = new_apps\n+\n+        class Content(models.Model):\n+            category = models.ForeignKey(Category, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_App'\n+                apps = new_apps\n+        \n+        # Verify that the models can be added and the correct number of models exist\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n         This test relies on the fact that contenttypes is always loaded.\n",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..c7d073e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1484,7 +1484,25 @@ class FTimeDeltaTests(TestCase):\n         ))\n         self.assertIsNone(queryset.first().shifted)\n \n-    def test_duration_expressions(self):\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        \"\"\"Test temporal subtraction without the need for ExpressionWrapper.\"\"\"\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for e in queryset:\n+            expected_delta = e.end - e.start\n+            self.assertEqual(e.delta, expected_delta)\n+\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_timedelta_addition_after_subtraction(self):\n+        \"\"\"Test adding a timedelta to the result of a subtraction.\"\"\"\n+        extra_duration = datetime.timedelta(days=1, hours=5)\n+        queryset = Experiment.objects.annotate(\n+            total_duration=F('end') - F('start') + extra_duration\n+        )\n+        for e in queryset:\n+            expected_total_duration = (e.end - e.start) + extra_duration\n+            self.assertEqual(e.total_duration, expected_total_duration)\n         for delta in self.deltas:\n             qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n             for obj in qs:\n",
  "django__django-13158": "",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..0ae7934 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -31,9 +31,11 @@ from django.core.cache.backends.base import InvalidCacheBackendError\n from django.core.exceptions import ImproperlyConfigured, SuspiciousOperation\n from django.http import HttpResponse\n from django.test import (\n-    RequestFactory, TestCase, ignore_warnings, override_settings,\n+    RequestFactory, TestCase, ignore_warnings, override_settings, SimpleTestCase\n )\n from django.utils import timezone\n+from django.contrib.sessions.backends.base import SessionBase\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -323,7 +325,20 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n-    def test_decode_failure_logged_to_security(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_legacy_decode_with_sha1(self):\n+        with override_settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'another test key': 'another test value'}\n+            self.session = self.backend()  # ensure this initializes the session with overridden settings\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_malformed_legacy_session_data(self):\n+        malformed_data = 'incorrectlyformatteddata'\n+        with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n+            self.assertEqual(self.session.decode(malformed_data), {})\n+        self.assertIn('corrupted', cm.output[0])\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n             self.assertEqual({}, self.session.decode(bad_encode))\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..cc16745 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -11,6 +11,7 @@ from django.utils.deprecation import RemovedInDjango40Warning\n from django.views.generic import RedirectView, TemplateView, View\n \n from . import views\n+from .models import Artist\n \n \n class SimpleView(View):\n@@ -590,7 +591,22 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering(self):\n+        \"\"\"Test filtering with URL kwargs passed to context.\"\"\"\n+        class ArtistView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, *, artist_name, **kwargs):\n+                # Converting SimpleLazyObject to a string to avoid issues\n+                artist_slug = str(kwargs.get('artist_name'))\n+                context = super().get_context_data(**kwargs)\n+                artist = Artist.objects.get(name=artist_slug)\n+                return {**context, 'artist': artist}\n+\n+        artist = Artist.objects.create(name='Rene Magritte')\n+        response = ArtistView.as_view()(self.rf.get('/'), artist_name=artist.name)\n+        self.assertEqual(response.context_data['artist'], artist)\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..ee5874f 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -14,6 +14,7 @@ from django.forms.models import (\n     ModelFormMetaclass, construct_instance, fields_for_model, model_to_dict,\n     modelform_factory,\n )\n+from django.db.models import Q\n from django.template import Context, Template\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n@@ -2819,7 +2820,66 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n-    def test_callable_called_each_time_form_is_instantiated(self):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_q_object_no_duplicates(self):\n+        # Set up the data needed for the test\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-10T00:00:00Z')\n+        marley = Character.objects.create(username='Marley', last_action='2023-10-11T00:00:00Z')\n+        \n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        \n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n             StumpJokeForm()\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..bd73b69 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -82,7 +82,14 @@ class FileSystemStorageTests(unittest.TestCase):\n         path, args, kwargs = storage.deconstruct()\n         self.assertEqual(kwargs, kwargs_orig)\n \n-    def test_lazy_base_url_init(self):\n+    def test_callable_storage_deconstruction(self):\n+        \"\"\"\n+        Verifying that a FileField with a callable storage deconstructs to the callable and not to the evaluated instance.\n+        \"\"\"\n+        obj = Storage()\n+        _, _, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, callable_storage)\n         \"\"\"\n         FileSystemStorage.__init__() shouldn't evaluate base_url.\n         \"\"\"\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..54890f9 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -632,9 +632,48 @@ class TestQuerying(TestCase):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)\n \n+    def test_in_lookup_on_key_transform(self):\n+        # Create test objects that demonstrate the issue with `__in` on JSONField\n+        objs = [\n+            NullableJSONModel.objects.create(value={'key': 0}),\n+            NullableJSONModel.objects.create(value={'key': 1}),\n+            NullableJSONModel.objects.create(value={'key': 0}),\n+            NullableJSONModel.objects.create(value={'other_key': 0}),\n+        ]\n+\n+        # Test __in lookup with key transform\n+        filter_0 = {'value__key__in': [0]}\n+        expected_0 = [objs[0], objs[2]]  # Expecting only the objects with key 0\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(**filter_0),\n+            expected_0,\n+        )\n+\n+        # Ensure compatibility with direct equality for consistency\n+        filter_direct_0 = {'value__key': 0}\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(**filter_direct_0),\n+            expected_0,\n+        )\n+\n+        # Test with multiple values\n+        filter_0_1 = {'value__key__in': [0, 1]}\n+        expected_0_1 = [objs[0], objs[1], objs[2]]  # Expect key 0 and key 1 matches\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(**filter_0_1),\n+            expected_0_1,\n+        )\n+\n+        # Ensure filter on other key does not match 'key'\n+        filter_other_key = {'value__other_key__in': [0]}\n+        expected_other_key = [objs[3]]  # Only the object with 'other_key': 0\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(**filter_other_key),\n+            expected_other_key,\n+        )\n+\n     def test_key_icontains(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n-\n     def test_key_startswith(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__startswith='b').exists(), True)\n \n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..0b3158c 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -18,6 +18,8 @@ from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n from django.utils import timezone\n+from datetime import datetime\n+import pytz\n \n from ..models import Author, DTModel, Fan\n \n@@ -1101,7 +1103,33 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         start_datetime = timezone.make_aware(start_datetime, is_dst=False)\n         end_datetime = timezone.make_aware(end_datetime, is_dst=False)\n         self.create_model(start_datetime, end_datetime)\n+    def test_truncdate_trunctime_with_tzinfo(self):\n+        # Set up initial test data\n         melb = pytz.timezone('Australia/Melbourne')\n+        pacific = pytz.timezone('US/Pacific')\n+        start_datetime = datetime(2022, 5, 15, 23, 45)\n+        start_datetime_aware = timezone.make_aware(start_datetime, timezone.utc)\n+        \n+        # Create and save model instance\n+        self.create_model(start_datetime_aware)\n+\n+        # Perform the annotations with TruncDate and TruncTime with tzinfo\n+        model = DTModel.objects.annotate(\n+            melb_date=TruncDate('start_datetime', tzinfo=melb),\n+            pacific_date=TruncDate('start_datetime', tzinfo=pacific),\n+            melb_time=TruncTime('start_datetime', tzinfo=melb),\n+            pacific_time=TruncTime('start_datetime', tzinfo=pacific),\n+        ).get()\n+\n+        # Manually convert times for comparison\n+        melb_start_datetime = start_datetime_aware.astimezone(melb)\n+        pacific_start_datetime = start_datetime_aware.astimezone(pacific)\n+\n+        # Assert that the dates and times match the manually converted values\n+        self.assertEqual(model.melb_date, melb_start_datetime.date())\n+        self.assertEqual(model.pacific_date, pacific_start_datetime.date())\n+        self.assertEqual(model.melb_time, melb_start_datetime.time())\n+        self.assertEqual(model.pacific_time, pacific_start_datetime.time())\n \n         with timezone.override(melb):\n             model = DTModel.objects.annotate(\n@@ -1118,8 +1146,34 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         end_datetime = timezone.make_aware(end_datetime, is_dst=False)\n         self.create_model(start_datetime, end_datetime)\n \n+    def test_truncdate_trunctime_with_tzinfo(self):\n+        # Set up initial test data\n         melb = pytz.timezone('Australia/Melbourne')\n         pacific = pytz.timezone('US/Pacific')\n+        start_datetime = datetime(2022, 5, 15, 23, 45)\n+        start_datetime_aware = timezone.make_aware(start_datetime, timezone.utc)\n+        \n+        # Create and save model instance\n+        self.create_model(start_datetime_aware)\n+\n+        # Perform the annotations with TruncDate and TruncTime with tzinfo\n+        model = DTModel.objects.annotate(\n+            melb_date=TruncDate('start_datetime', tzinfo=melb),\n+            pacific_date=TruncDate('start_datetime', tzinfo=pacific),\n+            melb_time=TruncTime('start_datetime', tzinfo=melb),\n+            pacific_time=TruncTime('start_datetime', tzinfo=pacific),\n+        ).get()\n+\n+        # Manually convert times for comparison\n+        melb_start_datetime = start_datetime_aware.astimezone(melb)\n+        pacific_start_datetime = start_datetime_aware.astimezone(pacific)\n+\n+        # Assert that the dates and times match the manually converted values\n+        self.assertEqual(model.melb_date, melb_start_datetime.date())\n+        self.assertEqual(model.pacific_date, pacific_start_datetime.date())\n+        self.assertEqual(model.melb_time, melb_start_datetime.time())\n+        self.assertEqual(model.pacific_time, pacific_start_datetime.time())\n+        pacific = pytz.timezone('US/Pacific')\n \n         model = DTModel.objects.annotate(\n             melb_year=TruncYear('start_datetime', tzinfo=melb),\n",
  "django__django-13401": "",
  "django__django-13410": "",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..adc37f9 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2084,6 +2084,28 @@ class QuerysetOrderedTests(unittest.TestCase):\n         self.assertIs(qs.ordered, False)\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('notes').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Annotation.objects.values('notes').annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('notes').ordered, True)\n+        \n+    def test_annotated_group_by_with_default_ordering(self):\n+        qs = NamedCategory.objects.annotate(num_items=Count('id')).all()\n+        self.assertIs(qs.ordered, False)\n+        qs_with_order_by = qs.order_by('name')\n+        self.assertIs(qs_with_order_by.ordered, True)\n+        \n+    def test_combined_annotations_and_values(self):\n+        qs = NamedCategory.objects.annotate(num_items=Count('id')).values('name')\n+        self.assertIs(qs.ordered, False)\n+        qs_with_order_by = qs.order_by('name')\n+        self.assertIs(qs_with_order_by.ordered, True)\n+\n \n @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n class SubqueryTests(TestCase):\n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..5e0a440 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,8 +1,10 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from .models.with_custom_email_field import CustomEmailField\n from django.test import TestCase\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -36,8 +38,27 @@ class TokenGeneratorTest(TestCase):\n         tk1 = p0.make_token(user)\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n-\n-    def test_timeout(self):\n+    \n+    def test_token_with_updated_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..164fcdf 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,9 +1,11 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n from django.core import checks\n from django.db import models\n+from django.db.models import UniqueConstraint, Q\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n )\n@@ -138,7 +140,54 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithConstraint')\n+    def test_username_field_with_total_unique_constraint(self):\n+        \"\"\"\n+        Test that auth.E003 is not triggered when the USERNAME_FIELD\n+        has a total unique constraint through Model.Meta.constraints.\n+        \"\"\"\n+        class UserWithConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_uniqueconstraint')\n+                ]\n+\n+        # Run checks and expect no errors\n+        errors = checks.run_checks(self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithPartialUniqueConstraint')\n+    def test_username_field_with_partial_unique_constraint(self):\n+        \"\"\"\n+        Test that auth.W004 is triggered when the USERNAME_FIELD has a partial unique constraint.\n+        \"\"\"\n+        class UserWithPartialUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=['username'],\n+                        name='username_partial_unique_constraint',\n+                        condition=Q(password__isnull=False),\n+                    )\n+                ]\n+\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(self.apps.get_app_configs())\n+            self.assertEqual(errors, [\n+                checks.Warning(\n+                    \"'UserWithPartialUniqueConstraint.username' is named as \"\n+                    \"the 'USERNAME_FIELD', but it is not unique.\",\n+                    hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n+                    obj=UserWithPartialUniqueConstraint,\n+                    id='auth.W004',\n+                ),\n+            ])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..b264d25 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -801,6 +802,7 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n+from collections import namedtuple\n \n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n@@ -815,7 +817,42 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_with_edge_values(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=1, maximum=99),\n+        )\n+        expected_companies = [\n+            Company.objects.get(name='5020 Ltd'),\n+            Company.objects.get(name='5040 Ltd'),\n+            Company.objects.get(name='5050 Ltd'),\n+            Company.objects.get(name='5060 Ltd'),\n+            Company.objects.get(name='99300 Ltd'),\n+        ]\n+        self.assertSequenceEqual(qs, expected_companies)\n+\n+    def test_range_lookup_namedtuple_no_match(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=100, maximum=150),\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_range_lookup_ordered_namedtuple(self):\n+        from collections import OrderedDict\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        ordered_named_tuple = EmployeeRange(minimum=51, maximum=100).__reduce__()[1][0]\n+        qs = Company.objects.filter(\n+            num_employees__range=ordered_named_tuple,\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..e66bd2c 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -15,6 +15,7 @@ from io import StringIO\n from unittest import mock\n \n from django import conf, get_version\n+from django.test.utils import captured_stderr, captured_stdout\n from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n@@ -34,6 +35,41 @@ from django.test import (\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n+class ExecuteFromCommandLineTest(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_custom_prog_name(self):\n+        \"\"\"\n+        Ensure that custom program name is used in CommandParser instead of sys.argv[0].\n+        \"\"\"\n+        args = ['customprog', 'startapp', 'myapp']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None, 'django-admin']):\n+                execute_from_command_line(args)\n+        self.assertIn('usage: customprog startapp', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_invalid_argv_handling(self):\n+        \"\"\"\n+        Handle cases where argv[0] is None or invalid, ensuring fallback to a default program name.\n+        \"\"\"\n+        args = ['shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None]):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n \n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..dbf6acd 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -112,7 +113,20 @@ class DateFormatTests(SimpleTestCase):\n \n         self.assertEqual(dateformat.format(my_birthday, r'jS \\o\\f F'), '8th of July')\n \n-    def test_futuredates(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'), # previously failing case for additional assurance\n+            (123, '23'), # based on the issue report\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         the_future = datetime(2100, 10, 25, 0, 00)\n         self.assertEqual(dateformat.format(the_future, r'Y'), '2100')\n \n@@ -164,4 +178,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..3de056c 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,16 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonlypasswordhashfield_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n+\n+    def test_readonlypasswordhashfield_ignores_submitted_value(self):\n+        field = ReadOnlyPasswordHashField()\n+        initial = 'initial_password_hash'\n+        submitted = 'tampered_password_hash'\n+        self.assertEqual(field.clean(submitted, initial), initial)\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..b2a5722 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,6 +119,60 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n+    def test_create_model_and_remove_model_options_with_permissions(self):\n+        \"\"\"\n+        Test that options not included in the AlterModelOptions are removed \n+        from the resultant CreateModel after a squash operation.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={'permissions': [('can_view', 'Can view')]},\n+                ),\n+                migrations.AlterModelOptions(\n+                    'TestModel', \n+                    options={}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                ),\n+            ],\n+        )\n+        \n+    def test_create_model_options_reduction(self):\n+        \"\"\"\n+        Test the CreateModel and AlterModelOptions squashing to verify\n+        that redundant options are discarded from the resultant CreateModel.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={\n+                        'ordering': ['name'],\n+                        'verbose_name': 'Test Model',\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'TestModel',\n+                    options={'verbose_name': 'Test Model'},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Test Model'},\n+                ),\n+            ],\n+        )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n@@ -134,6 +188,60 @@ class OptimizerTests(SimpleTestCase):\n             [],\n         )\n \n+    def test_create_model_and_remove_model_options_with_permissions(self):\n+        \"\"\"\n+        Test that options not included in the AlterModelOptions are removed \n+        from the resultant CreateModel after a squash operation.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={'permissions': [('can_view', 'Can view')]},\n+                ),\n+                migrations.AlterModelOptions(\n+                    'TestModel', \n+                    options={}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                ),\n+            ],\n+        )\n+        \n+    def test_create_model_options_reduction(self):\n+        \"\"\"\n+        Test the CreateModel and AlterModelOptions squashing to verify\n+        that redundant options are discarded from the resultant CreateModel.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={\n+                        'ordering': ['name'],\n+                        'verbose_name': 'Test Model',\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'TestModel',\n+                    options={'verbose_name': 'Test Model'},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Test Model'},\n+                ),\n+            ],\n+        )\n+\n     def test_create_alter_unique_delete_model(self):\n         self._test_create_alter_foo_delete_model(migrations.AlterUniqueTogether(\"Foo\", [[\"a\", \"b\"]]))\n \n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..e792c01 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,6 +1,9 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n+from django.utils.functional import lazy\n+from django.utils.translation import gettext_lazy\n from django.test import SimpleTestCase\n \n from ..utils import setup\n@@ -36,6 +39,43 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add05', {'l1': [1, 2], 'l2': [3, 4]})\n         self.assertEqual(output, '[1, 2, 3, 4]')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n+    @setup({'add10': '{{ lazy_s1|add:s2 }}'})\n+    def test_add10(self):\n+        output = self.engine.render_to_string(\n+            'add10',\n+            {'lazy_s1': gettext_lazy('string'), 's2': 'addition'},\n+        )\n+        self.assertEqual(output, 'stringaddition')\n+\n+    @setup({'add11': '{{ s1|add:lazy_s2|add:s3 }}'})\n+    def test_add11(self):\n+        output = self.engine.render_to_string(\n+            'add11',\n+            {'s1': 'start', 'lazy_s2': gettext_lazy('middle'), 's3': 'end'},\n+        )\n+        self.assertEqual(output, 'startmiddleend')\n+\n     @setup({'add06': '{{ t1|add:t2 }}'})\n     def test_add06(self):\n         output = self.engine.render_to_string('add06', {'t1': (3, 4), 't2': (1, 2)})\n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..0872051 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -13,6 +13,7 @@ from django.db.backends.base.base import BaseDatabaseWrapper\n from django.db.backends.signals import connection_created\n from django.db.backends.utils import CursorWrapper\n from django.db.models.sql.constants import CURSOR\n+from django.db import connection, IntegrityError, transaction\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n     skipUnlessDBFeature,\n@@ -20,7 +21,7 @@ from django.test import (\n \n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n-    ReporterProxy, SchoolClass, Square,\n+    ReporterProxy, SchoolClass, Square, SQLKeywordsModel,\n     VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n )\n \n",
  "django__django-13809": "",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..88bd4fe 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -139,6 +140,7 @@ class MyMiddlewareWithExceptionMessage:\n     def process_request(self, request):\n         pass\n \n+import os\n \n @override_settings(\n     DEBUG=True,\n@@ -181,12 +183,35 @@ class MiddlewareNotUsedTests(SimpleTestCase):\n             with self.assertLogs('django.request', 'DEBUG'):\n                 self.client.get('/middleware_exceptions/view/')\n \n+import os\n \n @override_settings(\n     DEBUG=True,\n     ROOT_URLCONF='middleware_exceptions.urls',\n )\n-class MiddlewareSyncAsyncTests(SimpleTestCase):\n+class EnhancedMiddlewareSyncAsyncTests(SimpleTestCase):\n+    \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_dummy_middleware_skipped_async_call(self):\n+        \"\"\"\n+        Test that DummyMiddleware, which raises MiddlewareNotUsed, is correctly skipped\n+        without altering the handler chain when called asynchronously.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        \n+        # Expecting that DummyMiddleware is skipped, and normal response is returned.\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        \n+        # Verify that appropriate debug logs are recorded\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\",\n+            [record.getMessage() for record in cm.records]\n+        )\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.PaymentMiddleware',\n     ])\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..d4b4b67 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -7,6 +8,7 @@ from django.db.migrations.exceptions import (\n )\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n+from importlib import import_module\n from django.test import TestCase, modify_settings, override_settings\n \n from .test_base import MigrationTestBase\n@@ -512,6 +514,30 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n+    def test_loading_package_with_missing_file_but_path_is_list(self):\n+        \"\"\"\n+        To support frozen environments, MigrationLoader should load migrations\n+        from packages where __file__ is missing but __path__ is a list.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations')\n+        loader = MigrationLoader(connection)\n+        module_file = test_module.__file__\n+        module_path = test_module.__path__\n+        \n+        try:\n+            del test_module.__file__\n+            self.assertIsInstance(module_path, list)\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            test_module.__file__ = module_file\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..8ea8f6d 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -9,7 +9,9 @@ from unittest import mock\n \n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n+from unittest import mock\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n+from django.core.exceptions import ImproperlyConfigured\n from django.db.utils import ConnectionHandler\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..53a3040 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -158,7 +158,14 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n class TestChildArguments(SimpleTestCase):\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        with mock.patch.dict(sys.modules, {'__main__': test_main}):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+            )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -173,7 +180,14 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        with mock.patch.dict(sys.modules, {'__main__': test_main}):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+            )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..1ec6300 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,8 +281,29 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n+from .utils import AssertFormErrorsMixin\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Test that invalid choice error message includes the invalid value\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+        ChoiceModel.objects.create(pk=3, name='c')\n+\n+        # Testing ModelChoiceField\n+        field = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            field.clean, 'invalid'\n+        )\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +328,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..ad3d378 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -549,7 +550,30 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child_empty_instance(self):\n+        # Create an order and product instance, assigning product without an sku first\n+        with transaction.atomic():\n+            order = Order()\n+            product = Product()  # Not setting sku here\n+            order.product = product\n+            order.product.sku = \"foo\"\n+            order.product.save()\n+            \n+            order.save()\n+            self.assertFalse(Order.objects.filter(product_id=\"\").exists(), \n+                             \"Order object should not have an empty product_id\")\n+            self.assertTrue(Order.objects.filter(product=order.product).exists(),\n+                            \"Order object should be linked to the saved product\")\n+\n+    def test_save_fk_with_pre_defined_non_numeric_pk(self):\n+        with transaction.atomic():\n+            # Create order and product with pre-defined primary key\n+            order = Order()\n+            order.product = Product(sku=\"bar\")\n+            order.product.save()\n+            order.save()\n+            self.assertTrue(Order.objects.filter(product=order.product).exists(),\n+                            \"Order object should be successfully linked to the product with predefined SKU\")\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..1513411 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,7 +1,10 @@\n+\n from django.db import IntegrityError, transaction\n from django.test import TestCase, skipIfDBFeature\n \n-from .models import Bar, Business, Employee, Foo\n+from .models import Bar, Business, Employee, Foo, CustomAutoFieldModel\n+from .fields import MyWrapper\n+from django.test import skipUnlessDBFeature\n \n \n class BasicCustomPKTests(TestCase):\n@@ -220,6 +223,23 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n+\n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that the from_db_value converter is called on the id field during creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that the from_db_value converter is called on the id field during bulk creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n     # SQLite lets objects be saved with an empty primary key, even though an\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..ba9e4b8 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -817,7 +817,53 @@ class BasicExpressionsTests(TestCase):\n         )\n \n \n+from django.db.models import Q, Exists, OuterRef, BooleanField, Case, When\n+from django.test import TestCase\n+from myapp.models import Employee, Company\n+\n class IterableLookupInnerExpressionsTests(TestCase):\n+\n+    def test_q_exists_combination_commutativity(self):\n+        # Setup\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        \n+        # Test combinations\n+        conditions = [\n+            (Q() & Exists(is_ceo), Exists(is_ceo) & Q()),\n+            (Q() | Exists(is_poc), Exists(is_poc) | Q()),\n+        ]\n+        \n+        for condition_a, condition_b in conditions:\n+            with self.subTest(condition_a=condition_a, condition_b=condition_b):\n+                # Ensure both combinations work and return the same result\n+                result_a = Employee.objects.filter(condition_a)\n+                result_b = Employee.objects.filter(condition_b)\n+                self.assertCountEqual(result_a, result_b)\n+        \n+    def test_boolean_expression_combined_with_empty_Q_variations(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        \n+        # Existing tests are unchanged, further variations with empty Q are added\n+        tests = [\n+            Exists(is_ceo) & Q(),\n+            Q() & Exists(is_ceo),\n+            Exists(is_ceo) | Q(),\n+            Q() | Exists(is_ceo),\n+            Exists(is_poc) & Q(),\n+            Q() & Exists(is_poc),\n+            Exists(is_poc) | Q(),\n+            Q() | Exists(is_poc),\n+        ]\n+        \n+        for conditions in tests:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), [self.max])\n     @classmethod\n     def setUpTestData(cls):\n         ceo = Employee.objects.create(firstname='Just', lastname='Doit', salary=30)\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..23b736f 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -204,6 +204,29 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('cached', 'css', 'img', 'window.png'), stats['unmodified'])\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n+    \n+    def test_no_duplicate_yields_in_post_process(self):\n+        \"\"\"\n+        Verify that post_process() does not yield any file multiple times.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(\n+            clear=False,\n+            dry_run=False,\n+            post_process=True,\n+            use_default_ignore_patterns=True,\n+            ignore_patterns=['*.ignoreme']\n+        )\n+\n+        stats = collectstatic_cmd.collect()\n+        # Extract the filenames from the records to verify uniqueness.\n+        processed_filenames = [entry[0] for entry in stats['post_processed']]\n+        # Ensure all filenames yielded are unique.\n+        self.assertCountEqual(processed_filenames, set(processed_filenames))\n+\n+        # Additional check for specific file not being duplicated\n+        occurrences = processed_filenames.count('admin/css/base.css')\n+        self.assertEqual(occurrences, 1)\n \n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n@@ -213,6 +236,29 @@ class TestHashedFiles:\n             self.assertNotIn(b\"cached/other.css\", content)\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n+    \n+    def test_no_duplicate_yields_in_post_process(self):\n+        \"\"\"\n+        Verify that post_process() does not yield any file multiple times.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(\n+            clear=False,\n+            dry_run=False,\n+            post_process=True,\n+            use_default_ignore_patterns=True,\n+            ignore_patterns=['*.ignoreme']\n+        )\n+\n+        stats = collectstatic_cmd.collect()\n+        # Extract the filenames from the records to verify uniqueness.\n+        processed_filenames = [entry[0] for entry in stats['post_processed']]\n+        # Ensure all filenames yielded are unique.\n+        self.assertCountEqual(processed_filenames, set(processed_filenames))\n+\n+        # Additional check for specific file not being duplicated\n+        occurrences = processed_filenames.count('admin/css/base.css')\n+        self.assertEqual(occurrences, 1)\n \n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..d3f67f4 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -5,6 +6,7 @@ Tests for stuff in django.utils.datastructures.\n import copy\n import pickle\n \n+import collections.abc\n from django.test import SimpleTestCase\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n@@ -18,7 +20,27 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        s = reversed(OrderedSet([]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n+    def test_reversed_iterate_twice(self):\n+        s = OrderedSet([4, 5, 6])\n+        reversed_list_first_pass = list(reversed(s))\n+        reversed_list_second_pass = list(reversed(s))\n+        self.assertEqual(reversed_list_first_pass, [6, 5, 4])\n+        self.assertEqual(reversed_list_second_pass, [6, 5, 4])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..a06f625 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n@@ -7,6 +8,7 @@ from django.db.models import (\n from django.db.models.functions import Upper\n from django.test import TestCase\n \n+from django.db.models import Count  # This import is necessary for the test cases\n from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n \n \n@@ -311,7 +313,22 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n-    def test_order_by_pk(self):\n+    def test_default_ordering_does_not_affect_group_by(self):\n+        \"\"\"\n+        Test that default ordering specified in Meta does not add fields to the GROUP BY clause.\n+        \"\"\"\n+        # Set up authors and articles\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+\n+        # Annotate counts of authors in articles\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+\n+        # Assert that the count is correctly grouped by 'author' without additional grouping by default ordering fields\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n         \"\"\"\n         'pk' works as an ordering option in Meta.\n         \"\"\"\n@@ -483,4 +500,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex 7e095fe..044a409 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,4 +1,6 @@\n-from django.db.models import F, Q\n+\n+from django.db.models import Exists, F, OuterRef\n+from django.contrib.auth import get_user_model\n from django.test import SimpleTestCase\n \n \n@@ -51,7 +53,15 @@ class QTests(SimpleTestCase):\n             '_negated': True,\n         })\n \n-    def test_deconstruct_or(self):\n+    def test_deconstruct_single_exists_expression(self):\n+        \"\"\"Test deconstruction of Q with a single Exists expression.\"\"\"\n+        user_model = get_user_model()\n+        exists_expression = Exists(user_model.objects.filter(username=OuterRef('pk')))\n+        q = Q(exists_expression)\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (exists_expression,))\n+        self.assertEqual(kwargs, {})\n         q1 = Q(price__gt=F('discounted_price'))\n         q2 = Q(price=F('discounted_price'))\n         q = q1 | q2\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..03a1e9c 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -66,7 +67,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+            \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +103,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+            \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..6e22169 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -167,6 +167,22 @@ class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module(self):\n+        with mock.patch.dict(sys.modules, {'__main__': test_main}):\n+            with mock.patch('sys.argv', [test_main_module.__file__, 'runserver']):\n+                self.assertEqual(\n+                    autoreload.get_child_arguments(),\n+                    [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+                )\n+\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_submodule(self):\n+        with mock.patch.dict(sys.modules, {'__main__': test_main_module}):\n+            with mock.patch('sys.argv', [test_main.__file__, 'runserver']):\n+                self.assertEqual(\n+                    autoreload.get_child_arguments(),\n+                    [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+                )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -176,6 +192,22 @@ class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': test_main})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module(self):\n+        with mock.patch.dict(sys.modules, {'__main__': test_main}):\n+            with mock.patch('sys.argv', [test_main_module.__file__, 'runserver']):\n+                self.assertEqual(\n+                    autoreload.get_child_arguments(),\n+                    [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+                )\n+\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_submodule(self):\n+        with mock.patch.dict(sys.modules, {'__main__': test_main_module}):\n+            with mock.patch('sys.argv', [test_main.__file__, 'runserver']):\n+                self.assertEqual(\n+                    autoreload.get_child_arguments(),\n+                    [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+                )\n     def test_run_as_non_django_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -191,6 +223,22 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module(self):\n+        with mock.patch.dict(sys.modules, {'__main__': test_main}):\n+            with mock.patch('sys.argv', [test_main_module.__file__, 'runserver']):\n+                self.assertEqual(\n+                    autoreload.get_child_arguments(),\n+                    [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+                )\n+\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_submodule(self):\n+        with mock.patch.dict(sys.modules, {'__main__': test_main_module}):\n+            with mock.patch('sys.argv', [test_main.__file__, 'runserver']):\n+                self.assertEqual(\n+                    autoreload.get_child_arguments(),\n+                    [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+                )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n@@ -202,6 +250,22 @@ class TestChildArguments(SimpleTestCase):\n                 )\n \n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module(self):\n+        with mock.patch.dict(sys.modules, {'__main__': test_main}):\n+            with mock.patch('sys.argv', [test_main_module.__file__, 'runserver']):\n+                self.assertEqual(\n+                    autoreload.get_child_arguments(),\n+                    [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+                )\n+\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_submodule(self):\n+        with mock.patch.dict(sys.modules, {'__main__': test_main_module}):\n+            with mock.patch('sys.argv', [test_main.__file__, 'runserver']):\n+                self.assertEqual(\n+                    autoreload.get_child_arguments(),\n+                    [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+                )\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             script_path = Path(tmpdir) / 'django-admin-script.py'\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..048fee6 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -316,7 +316,26 @@ with open(create_path('invalid_urls.txt'), encoding='utf8') as f:\n \n class TestValidators(SimpleTestCase):\n \n-    def test_validators(self):\n+\n+    def test_strip_forbidden_characters(self):\n+        validator = URLValidator()\n+        # URLs with newlines, tabs, and carriage returns should raise ValidationErrors\n+        invalid_urls = [\n+            'http://www.djangoproject.com/\\n',\n+            'http://www.djangoproject.com/\\t',\n+            'http://www.djangoproject.com/\\r',\n+            'http://[::ffff:192.9.5.5]\\n',\n+            'http://[::ffff:192.9.5.5]\\t',\n+            'http://[::ffff:192.9.5.5]\\r',\n+            'http://www.django\\rproject.com/',\n+            'http://[::\\rffff:192.9.5.5]',\n+            'http://\\twww.djangoproject.com/',\n+            'http://\\t[::ffff:192.9.5.5]'\n+        ]\n+        for url in invalid_urls:\n+            with self.subTest(url=url):\n+                with self.assertRaises(ValidationError):\n+                    validator(url)\n         for validator, value, expected in TEST_DATA:\n             name = validator.__name__ if isinstance(validator, types.FunctionType) else validator.__class__.__name__\n             exception_expected = expected is not None and issubclass(expected, Exception)\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..117f9f7 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,7 +1526,42 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n-class JoinPromotionTests(TestCase):\n+class SubqueryQObjectsTests(TestCase):\n+    @skipUnlessDBFeature('supports_subqueries_in_group_by')\n+    def test_having_subquery_select(self):\n+        # Original test patch logic (for compatibility)\n+        authors = Author.objects.filter(pk=self.a1.pk)\n+        books = Book.objects.annotate(Count('authors')).filter(\n+            Q(authors__in=authors) | Q(authors__count__gt=2)\n+        )\n+        self.assertEqual(set(books), {self.b1, self.b4})\n+\n+    def test_filter_with_subquery_in(self):\n+        # Test case for the issue described\n+        property_groups = PropertyGroup.objects.agent_groups(self.management_agent)\n+        queryset = ThingManagerTicketRatingCumulativeMovingAverage.objects.annotate(\n+            agent_property_groups_count=Count(\"agent__property_groups\")\n+        )\n+        result = queryset.filter(\n+            Q(agent__property_groups__in=property_groups) | Q(agent_property_groups_count=0)\n+        ).distinct()\n+\n+        # Expect no ProgrammingError\n+        self.assertIsNotNone(result)\n+\n+    def test_filter_with_subquery_id_in(self):\n+        # The working scenario from the issue description\n+        property_groups_ids = PropertyGroup.objects.agent_groups(self.management_agent).values_list(\"id\", flat=True)\n+        queryset = ThingManagerTicketRatingCumulativeMovingAverage.objects.annotate(\n+            agent_property_groups_count=Count(\"agent__property_groups\")\n+        )\n+        result = queryset.filter(\n+            Q(agent__property_groups__id__in=property_groups_ids) | Q(agent_property_groups_count=0)\n+        ).distinct()\n+\n+        # Ensure correctness of results, assuming self.b1 and self.b4 are the expected outputs\n+        expected_results = {some_expected_result_1, some_expected_result_2}\n+        self.assertEqual(set(result), expected_results)\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..9996bb4 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -157,7 +157,16 @@ class DateFormatTests(SimpleTestCase):\n             with self.assertRaisesMessage(TypeError, msg):\n                 dateformat.format(my_birthday, specifier)\n \n-    def test_r_format_with_non_en_locale(self):\n+from datetime import datetime\n+\n+class DateFormatTests(TestCase):\n+\n+    def test_y_format_year_before_1000(self):\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n+        self.assertEqual(dateformat.format(datetime(42, 1, 1), 'Y'), '0042')\n+        self.assertEqual(dateformat.format(datetime(100, 1, 1), 'Y'), '0100')\n+        self.assertEqual(dateformat.format(datetime(999, 12, 31), 'Y'), '0999')\n         # Changing the locale doesn't change the \"r\" format.\n         dt = datetime(1979, 7, 8, 22, 00)\n         with translation.override('fr'):\n",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..0465e50 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,6 +38,66 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_preferred_keys_over_deprecated(self):\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=555',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+\n+        # Test using non-deprecated keys ('database' and 'password')\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': 555,\n+                    'db': 'deprecatedoptiondbname',  # Deprecated key\n+                    'passwd': 'deprecatedoptionpassword',  # Deprecated key\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_deprecated_keys_still_supported(self):\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=555',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+\n+        # Test using deprecated keys ('db' and 'passwd')\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'db': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': 555,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_override_settings_proper_values(self):\n         settings_port = 444\n         options_port = 555\n@@ -68,6 +128,66 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_preferred_keys_over_deprecated(self):\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=555',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+\n+        # Test using non-deprecated keys ('database' and 'password')\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': 555,\n+                    'db': 'deprecatedoptiondbname',  # Deprecated key\n+                    'passwd': 'deprecatedoptionpassword',  # Deprecated key\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_deprecated_keys_still_supported(self):\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=555',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+\n+        # Test using deprecated keys ('db' and 'passwd')\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'db': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': 555,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_password(self):\n         expected_args = [\n             'mysql',\n@@ -89,6 +209,66 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_preferred_keys_over_deprecated(self):\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=555',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+\n+        # Test using non-deprecated keys ('database' and 'password')\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': 555,\n+                    'db': 'deprecatedoptiondbname',  # Deprecated key\n+                    'passwd': 'deprecatedoptionpassword',  # Deprecated key\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_deprecated_keys_still_supported(self):\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=555',\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+\n+        # Test using deprecated keys ('db' and 'passwd')\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': 444,\n+                'OPTIONS': {\n+                    'db': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': 555,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_charset(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 17aecdd..c5aab48 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -453,9 +453,24 @@ class TestCollectionManifestStorage(TestHashedFiles, CollectionTestCase):\n             2,\n         )\n \n+from io import StringIO\n+from django.test import override_settings\n+from django.core.management import call_command\n+\n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoPostProcessReplacedPathStorage')\n+class TestCollectionNoPostProcessReplacedPaths(CollectionTestCase):\n+    run_collectstatic_in_setUp = False\n \n-@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoneHashStorage')\n-class TestCollectionNoneHashStorage(CollectionTestCase):\n+    def test_no_post_process(self):\n+        stdout = StringIO()\n+        try:\n+            self.run_collectstatic(verbosity=1, stdout=stdout)\n+        except UnboundLocalError:\n+            self.fail('collectstatic raised UnboundLocalError unexpectedly!')\n+        self.assertIn('post-processed', stdout.getvalue())\n     hashed_file_path = hashed_file_path\n \n     def test_hashed_name(self):\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..ebdcdd3 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -653,7 +653,52 @@ class ExecutorTests(MigrationTestBase):\n             recorder.applied_migrations(),\n         )\n \n-    # When the feature is False, the operation and the record won't be\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_migrate_marks_replacement_unapplied(self):\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        try:\n+            self.assertIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+        finally:\n+            executor.loader.build_graph()\n+            executor.migrate([('migrations', None)])\n+            self.assertNotIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_unapply_squash_then_apply_individual(self):\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        self.assertIn(('migrations', '0001_squashed_0002'), executor.recorder.applied_migrations())\n+        executor.migrate([('migrations', None)])\n+        self.assertNotIn(('migrations', '0001_squashed_0002'), executor.recorder.applied_migrations())\n+        \n+        # Now apply individual migrations\n+        executor.migrate([('migrations', '0001_initial')])\n+        executor.migrate([('migrations', '0002_second')])\n+        self.assertIn(('migrations', '0001_initial'), executor.recorder.applied_migrations())\n+        self.assertIn(('migrations', '0002_second'), executor.recorder.applied_migrations())\n+        self.assertNotIn(('migrations', '0001_squashed_0002'), executor.recorder.applied_migrations())\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_unapply_individual_then_apply_squash(self):\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', '0001_initial')])\n+        executor.migrate([('migrations', '0002_second')])\n+        \n+        # Now unapply individual migrations\n+        executor.migrate([('migrations', None)])\n+        self.assertNotIn(('migrations', '0001_initial'), executor.recorder.applied_migrations())\n+        self.assertNotIn(('migrations', '0002_second'), executor.recorder.applied_migrations())\n+        \n+        # Apply squashed migration\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        self.assertIn(('migrations', '0001_squashed_0002'), executor.recorder.applied_migrations())\n     # performed in a transaction and the test will systematically pass.\n     @skipUnlessDBFeature('can_rollback_ddl')\n     def test_migrations_applied_and_recorded_atomically(self):\n",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..d35969f 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -260,7 +260,37 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(value=value):\n                 self.assertEqual(urlize(value), output)\n \n-    def test_urlize_unchanged_inputs(self):\n+    def test_urlize(self):\n+        # Adding the test case from the original patch\n+        tests = (\n+            (\n+                'Search for google.com/?q=! and see.',\n+                'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>! and see.'\n+            ),\n+            (\n+                lazystr('Search for google.com/?q=!'),\n+                'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n+            ),\n+            ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n+            # New test case: Handling HTML-escaped strings with trailing punctuation\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            # Test case: HTML-escaped ampersand\n+            (\n+                'Check this link google.com/test&amp;more',\n+                'Check this link <a href=\"http://google.com/test&more\">google.com/test&amp;more</a>'\n+            ),\n+            # Test case: Multiple punctuations\n+            (\n+                'Visit google.com/test/me!??',\n+                'Visit <a href=\"http://google.com/test/me\">google.com/test/me</a>!??'\n+            ),\n+        )\n+        for value, output in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(urlize(value), output)\n         tests = (\n             ('a' + '@a' * 50000) + 'a',  # simple_email_re catastrophic test\n             ('a' + '.' * 1000000) + 'a',  # trailing_punctuation catastrophic test\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..8119e0e 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,6 +115,33 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n+from django.test import TestCase\n+from .models import Note, CustomPk, Valid, Detail, Paragraph, Member\n+\n+class BulkUpdateTests(TestCase):\n+    def setUp(self):\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(0, 2000)\n+        ])\n+\n+    def test_bulk_update_empty_list(self):\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_bulk_update_non_empty_list(self):\n+        notes = list(Note.objects.all())\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_bulk_update_with_duplicates(self):\n+        note = Note.objects.create(note='test-note', misc='test')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+        # Duplicates in different batches\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n+\n     def test_update_primary_key(self):\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..92e1ff7 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -971,10 +971,10 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FavoriteDrinksFormSet(initial={})\n         self.assertEqual(formset.management_form.prefix, 'form')\n \n-    def test_non_form_errors(self):\n+    def test_non_form_errors_with_css_class(self):\n         data = {\n-            'drinks-TOTAL_FORMS': '2',  # the number of forms rendered\n-            'drinks-INITIAL_FORMS': '0',  # the number of forms with initial data\n+            'drinks-TOTAL_FORMS': '2',  # number of forms rendered\n+            'drinks-INITIAL_FORMS': '0',  # number of forms with initial data\n             'drinks-MIN_NUM_FORMS': '0',  # min number of forms\n             'drinks-MAX_NUM_FORMS': '0',  # max number of forms\n             'drinks-0-name': 'Gin and Tonic',\n@@ -982,7 +982,29 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(non_form_errors, ['You may only specify a drink once.'])\n+        self.assertIn('nonform', str(non_form_errors))\n+\n+    def test_formset_valid_max_num_form_with_css_class(self):\n+        data = {\n+            'choices-TOTAL_FORMS': '3',  # rendered forms\n+            'choices-INITIAL_FORMS': '0',  # initial data forms\n+            'choices-MIN_NUM_FORMS': '0',  # min number of forms\n+            'choices-MAX_NUM_FORMS': '0',  # max number of forms\n+            'choices-0-choice': 'Coffee',\n+            'choices-0-votes': '100',\n+            'choices-1-choice': 'Tea',\n+            'choices-1-votes': '90',\n+            'choices-2-choice': 'Juice',\n+            'choices-2-votes': '80',\n+        }\n+        FavoriteDrinksFormSet = formset_factory(Choice, extra=1, max_num=2, validate_max=True)\n+        formset = FavoriteDrinksFormSet(data, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        non_form_errors = formset.non_form_errors()\n+        self.assertEqual(non_form_errors, ['Please submit at most 2 forms.'])\n+        self.assertIn('nonform', str(non_form_errors))\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..8902c84 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,8 +2129,22 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n-        # You can specify descriptive text for a field by using the 'help_text' argument)\n+    def test_datetime_clean_fields_access_via_boundfield(self):\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45), disabled=True)\n+\n+        form = DateTimeForm({})\n+        bf = form['dt']\n+        self.assertEqual(form.cleaned_data['dt'], bf.initial)\n+        self.assertEqual(form.cleaned_data['dt'], datetime.datetime(2006, 10, 25, 14, 30, 45))\n+\n+    def test_changed_data_method_moved_to_boundfield(self):\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45), disabled=False)\n+\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:46'})\n+        self.assertTrue(any(form.changed_data))  # Check that something has changed\n+        self.assertIn('dt', form.changed_data)  # Specifically, 'dt' should show as changed\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n             password = CharField(widget=PasswordInput, help_text='W\u00e4hlen Sie mit Bedacht.')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..c75482b 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -1,7 +1,66 @@\n from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n+class M2mThroughTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.bob = Person.objects.create(name='Bob')\n+        cls.jim = Person.objects.create(name='Jim')\n+        cls.jane = Person.objects.create(name='Jane')\n+        cls.rock = Group.objects.create(name='Rock')\n+        cls.roll = Group.objects.create(name='Roll')\n+\n+    def test_retrieve_intermediate_items(self):\n+        Membership.objects.create(person=self.jim, group=self.rock)\n+        Membership.objects.create(person=self.jane, group=self.rock)\n+\n+        expected = ['Jane', 'Jim']\n+        self.assertQuerysetEqual(\n+            self.rock.members.all(),\n+            expected,\n+            attrgetter(\"name\")\n+        )\n+\n+    def test_reverse_inherited_m2m_with_through_fields_list_hashable(self):\n+        # Make sure the through fields list is hashable.\n+        reverse_m2m = Person._meta.get_field('events_invited')\n+        self.assertEqual(reverse_m2m.through_fields, ['event', 'invitee'])\n+        inherited_reverse_m2m = PersonChild._meta.get_field('events_invited')\n+        self.assertEqual(inherited_reverse_m2m.through_fields, ['event', 'invitee'])\n+        self.assertEqual(hash(reverse_m2m), hash(inherited_reverse_m2m))\n+\n+    def test_model_with_proxy_with_m2m_through_fields_list(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        # Attempt to retrieve and hash `ManyToManyRel` field to trigger issue.\n+        m2m_field = Child._meta.get_field('many_to_many_field').rel\n+        try:\n+            hash(m2m_field)\n+        except TypeError as e:\n+            self.fail(f\"Hashing failed with error: {e}\")\n+\n from django.db import IntegrityError\n+from django.core.checks import Error\n+from django.db import models\n from django.test import TestCase\n \n from .models import (\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..545144a 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -9,7 +10,10 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import PermissionDenied\n from django.http import Http404\n from django.test import RequestFactory, override_settings\n+import datetime\n from django.urls import reverse, reverse_lazy\n+from django.http import JsonResponse\n+from .models import Question\n \n from .admin import AnswerAdmin, QuestionAdmin\n from .models import (\n",
  "django__django-14765": "",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..00ddaa4 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -195,7 +195,13 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n+    def test_xoptions_passed_to_reload(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n         self.assertEqual(\n@@ -235,7 +241,13 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n+    def test_xoptions_passed_to_reload(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n     @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n         module = types.ModuleType('test_module')\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..9fd4a59 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -271,6 +271,30 @@ class MethodDecoratorTests(SimpleTestCase):\n                 self.assertEqual(Test.method.__doc__, 'A method')\n                 self.assertEqual(Test.method.__name__, 'method')\n \n+    def test_partial_function_wrapper_assignments(self):\n+        \"\"\"method_decorator correctly assigns wrapper attributes to partial functions.\"\"\"\n+        from functools import partial\n+        import types\n+\n+        def sample_decorator(func):\n+            @wraps(func)\n+            def wrapper(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return wrapper\n+\n+        class Test:\n+            @method_decorator(sample_decorator)\n+            def method(self, x):\n+                return x\n+            \n+            # Applying a partial to the method\n+            partial_method = partial(method, 42)\n+\n+        # Check if partial object's __name__ and __module__ attributes are preserved\n+        self.assertEqual(Test.partial_method.__name__, 'method')\n+        self.assertIsInstance(Test.partial_method, partial)\n+        self.assertTrue(hasattr(Test.partial_method, '__module__'))\n+\n     def test_new_attribute(self):\n         \"\"\"A decorator that sets a new attribute on the method.\"\"\"\n         def decorate(func):\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..363d371 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5132,6 +5132,42 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n \n+    def _test_custom_admin_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Test that ForeignKey readonly fields render proper links for a custom admin site.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+\n+        # Register Language model to custom admin.\n+        site2.register(Language)\n+\n+        # Access the change view using custom admin namespace.\n+        change_url = reverse(f'{admin_site}:admin_views_chapter_change', args=(chapter.pk,))\n+        response = self.client.get(change_url)\n+        self.assertEqual(response.status_code, 200)\n+\n+        # Ensure the readonly ForeignKey field to Language has the correct custom admin link.\n+        language_url = reverse(f'{admin_site}:admin_views_language_change', args=(quote(language.pk),))\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_40</a></div>' % language_url,\n+            html=True,\n+        )\n+\n+        # Clean up by unregistering.\n+        site2.unregister(Language)\n+    \n+    def test_readonly_foreignkey_links_site2(self):\n+        \"\"\"\n+        Test with the site2 custom admin to verify custom admin URL generation.\n+        \"\"\"\n+        self._test_custom_admin_readonly_foreignkey_links('site2')\n+\n     def test_readonly_manytomany_backwards_ref(self):\n         \"\"\"\n         Regression test for #16433 - backwards references for related objects\n",
  "django__django-14915": "",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..7f2d237 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,52 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_noop_postgres(self):\n+        app_label = 'test_rmwdbtn_pg'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Driver', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'pg_driver'}),\n+            migrations.CreateModel('Car', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('driver', models.ForeignKey('%s.Driver' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Driver', 'Racer')\n+        operation.state_forwards(app_label, new_state)\n+        \n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..8284508 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n \n+from django.utils.html import json_script\n from ..utils import setup\n \n \n@@ -16,4 +18,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..f3054d4 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2835,6 +2835,36 @@ class AutodetectorTests(TestCase):\n                 )\n \n \n+from django.db import models\n+from django.db.migrations.state import ModelState\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.test import TestCase\n+\n+class TestMigrationAutodetectorWithCustomFK(TestCase):\n+    def test_custom_fk_field_handling(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.HardcodedModel'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('custom', HardcodedForeignKey(on_delete=models.CASCADE))]))\n+        \n+        changes = MigrationAutodetector(before, after)._detect_changes()\n+        \n+        # Ensure a migration is detected\n+        self.assertEqual(len(changes['testapp']), 1)\n+        # Ensure the migration is a CreateModel operation\n+        self.assertEqual(changes['testapp'][0].operations[0].name, 'TestModel')\n+\n class MigrationSuggestNameTests(SimpleTestCase):\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..95bd668 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -379,5 +380,25 @@ class BaseTests:\n         storage = self.get_storage()\n         storage.level = 0\n         add_level_messages(storage)\n+\n+    def test_level_tag_update_with_override_settings(self):\n+        custom_tags = {\n+            constants.INFO: 'information',\n+            constants.DEBUG: 'debugging',\n+            constants.ERROR: 'critical',\n+            13: 'extra_custom',\n+        }\n+        with override_settings(MESSAGE_TAGS=custom_tags):\n+            self.assertEqual(base.LEVEL_TAGS, custom_tags)\n+\n+    def test_revert_level_tag_after_override_settings(self):\n+        original_tags = base.LEVEL_TAGS.copy()\n+        custom_tags = {\n+            constants.WARNING: 'alert',\n+            14: 'another_custom',\n+        }\n+        with override_settings(MESSAGE_TAGS=custom_tags):\n+            pass\n+        self.assertEqual(base.LEVEL_TAGS, original_tags)\n         tags = [msg.tags for msg in storage]\n         self.assertEqual(tags, ['info', 'custom', 'extra-tag', '', 'bad', 'success'])\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..21d96f1 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -30,9 +30,37 @@ from .models import (\n     SharedConnection, SimpleCategory, SingleObject, SpecialCategory, Staff,\n     StaffUser, Student, Tag, Task, Teacher, Ticket21203Child,\n     Ticket21203Parent, Ticket23605A, Ticket23605B, Ticket23605C, TvChef, Valid,\n-    X,\n+    X, BaseUser, Task, Annotation, Tag, Q\n )\n \n+class QueryAliasConflictTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Set up for aliasing conflict test based on the original issue.\n+        tag = Tag.objects.create()\n+        cls.annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = cls.annotation_1.notes.create(tag=tag)\n+        cls.base_user_1 = BaseUser.objects.create(annotation=cls.annotation_1)\n+        cls.base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        cls.task = Task.objects.create(\n+            owner=cls.base_user_2, creator=cls.base_user_2, note=note,\n+        )\n+\n+    def test_conflicting_aliases_during_combine(self):\n+        # Test combining two querysets that might have alias conflicts.\n+        qs1 = self.annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=self.annotation_1.notes.all()) |\n+            Q(creator__note__in=self.annotation_1.notes.all())\n+        )\n+        # Test assertions\n+        self.assertSequenceEqual(qs1, [self.base_user_1], \"Expected base_user_1 in qs1\")\n+        self.assertSequenceEqual(qs2, [self.base_user_2], \"Expected base_user_2 in qs2\")\n+        # Test OR operation yields the same result regardless of order\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2, \"Expected same count and elements in combined querysets\")\n+        self.assertCountEqual(qs2 | qs1, [self.base_user_1, self.base_user_2], \"Expected both users in combined querysets\")\n+\n \n class Queries1Tests(TestCase):\n     @classmethod\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..ca29987 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1775,6 +1775,15 @@ class ValueTests(TestCase):\n         self.assertEqual(len(kwargs), 1)\n         self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n \n+    def test_deconstruct_F_expression(self):\n+        # Test that the deconstructed path of F() works as intended.\n+        # This specifically checks the F() is properly simplified to 'django.db.models.F'\n+        f_expr = F('some_field')\n+        path, args, kwargs = f_expr.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('some_field',))\n+        self.assertEqual(kwargs, {})\n+\n     def test_repr(self):\n         tests = [\n             (None, 'Value(None)'),\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..9fc46fc 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1661,7 +1661,35 @@ class AutodetectorTests(TestCase):\n             changes, 'otherapp', 0, 4, model_name='book', name='newfield',\n         )\n \n-    def test_alter_field_and_foo_together(self):\n+    def test_optimization_of_consecutive_foo_together_operations(self):\n+        \"\"\"\n+        Test that consecutive 'AlterUniqueTogether' and 'AlterIndexTogether'\n+        operations are optimized from separate set-and-reset actions into single actions.\n+        \"\"\"\n+        initial_state = [self.author_empty, ModelState('testapp', 'Book', [], {\n+            'unique_together': {('old_col',)},\n+            'index_together': {('old_col',)},\n+        })]\n+        final_state = [self.author_empty, ModelState('testapp', 'Book', [], {\n+            'unique_together': {('new_col',)},\n+            'index_together': {('new_col',)},\n+        })]\n+\n+        # Simulate a series of operations that split and should be optimized\n+        changes = self.get_changes(initial_state, final_state)\n+\n+        # Ensure we get only one AlterUniqueTogether and one AlterIndexTogether\n+        self.assertNumberMigrations(changes, \"testapp\", 1)\n+        self.assertEqual(len(changes[\"testapp\"][0].operations), 2)\n+\n+        self.assertOperationTypes(changes, 'testapp', 0, [\n+            'AlterUniqueTogether', 'AlterIndexTogether',\n+        ])\n+\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='book',\n+                                       unique_together={('new_col',)})\n+        self.assertOperationAttributes(changes, 'testapp', 0, 1, name='book',\n+                                       index_together={('new_col',)})\n         \"\"\"Fields are altered after deleting some index/unique_together.\"\"\"\n         initial_author = ModelState('testapp', 'Author', [\n             ('id', models.AutoField(primary_key=True)),\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..c10d5e8 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1846,11 +1846,40 @@ class ValueTests(TestCase):\n             with self.subTest(type=type(value)):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n-\n-    def test_resolve_output_field_failure(self):\n-        msg = 'Cannot resolve expression type, unknown output_field'\n-        with self.assertRaisesMessage(FieldError, msg):\n-            Value(object()).output_field\n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        value_types = [\n+            'test', # String input\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                self.assertIsInstance(field, fields.Field)\n+                # Check if validators are not broken\n+                self.assertTrue(all(\n+                    isinstance(validator, validators.Validator)\n+                    for validator in field.validators\n+                ))\n+                # Ensure that cleaning the value does not raise an exception\n+                # for custom validator cases, esp. CharField\n+                try:\n+                    field.clean(value, model_instance=None)\n+                except Exception as e:\n+                    self.fail(f\"clean() method raised an exception for value {value}: {e}\")\n \n \n class ExistsTests(TestCase):\n",
  "django__django-15278": "",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..53aab25 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -19,7 +19,54 @@ class Nested:\n \n class BasicFieldTests(SimpleTestCase):\n \n-    def test_show_hidden_initial(self):\n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_multiple_field_hash_immutability(self):\n+        field1 = models.CharField(max_length=100)\n+        field2 = models.IntegerField()\n+        field3 = models.DateField()\n+\n+        field1_hash = hash(field1)\n+        field2_hash = hash(field2)\n+        field3_hash = hash(field3)\n+\n+        class TestModel(models.Model):\n+            name = field1\n+            age = field2\n+            birthdate = field3\n+\n+        self.assertEqual(field1_hash, hash(field1))\n+        self.assertEqual(field2_hash, hash(field2))\n+        self.assertEqual(field3_hash, hash(field3))\n+\n+    def test_field_hash_consistency_in_dict(self):\n+        field = models.FloatField()\n+\n+        my_dict = {field: 'value'}\n+        field_hash_before = hash(field)\n+\n+        class SampleModel(models.Model):\n+            rate = field\n+\n+        # Ensure the field can still be found in the dictionary\n+        self.assertIn(field, my_dict)\n+        self.assertEqual(field_hash_before, hash(field))\n+\n+    def test_repr_hash_value_same(self):\n+        field = models.TextField()\n+        representation = repr(field)\n+        \n+        class MyModel(models.Model):\n+            description = field\n+        \n+        self.assertEqual(representation, repr(field))\n         \"\"\"\n         Fields with choices respect show_hidden_initial as a kwarg to\n         formfield().\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..1e30cd9 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -211,6 +211,17 @@ class BulkUpdateTests(TestCase):\n         Number.objects.bulk_update(numbers, ['num'])\n         self.assertCountEqual(Number.objects.filter(num=1), numbers)\n \n+    def test_f_expression_with_bulk_update(self):\n+        # Create test data\n+        selfrefs = [SelfRef.objects.create(name='test_name') for _ in range(10)]\n+        for selfref in selfrefs:\n+            # Assign F expression\n+            selfref.c8 = F('name')\n+        # Perform bulk update\n+        SelfRef.objects.bulk_update(selfrefs, ['c8'])\n+        # Verify that the F expression was correctly applied\n+        self.assertCountEqual(SelfRef.objects.filter(c8='test_name'), selfrefs)\n+\n     def test_booleanfield(self):\n         individuals = [Individual.objects.create(alive=False) for _ in range(10)]\n         for individual in individuals:\n",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..6a3d16e 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1038,6 +1038,48 @@ class AutodetectorTests(TestCase):\n         self.assertOperationAttributes(\n             changes, 'app', 0, 0, model_name='bar', name='foo',\n         )\n+    \n+    def test_rename_multiple_models_and_fields(self):\n+        \"\"\"Tests autodetection of multiple renamed models and fields.\"\"\"\n+        initial_state = [\n+            ModelState('testapp', 'Author', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('first_name', models.CharField(max_length=200)),\n+                ('last_name', models.CharField(max_length=200)),\n+            ]),\n+            ModelState('testapp', 'Book', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+                ('author', models.ForeignKey('testapp.Author', on_delete=models.CASCADE)),\n+            ]),\n+        ]\n+\n+        new_state = [\n+            ModelState('testapp', 'Writer', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('given_name', models.CharField(max_length=200)),\n+                ('surname', models.CharField(max_length=200)),\n+            ]),\n+            ModelState('testapp', 'Novel', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('name', models.CharField(max_length=200)),\n+                ('writer', models.ForeignKey('testapp.Writer', on_delete=models.CASCADE)),\n+            ]),\n+        ]\n+\n+        changes = self.get_changes(\n+            initial_state,\n+            new_state,\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        \n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField', 'RenameModel', 'RenameField', 'RenameField'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, old_name='Author', new_name='Writer')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 1, old_name='Book', new_name='Novel')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 2, old_name='first_name', new_name='given_name')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 3, old_name='last_name', new_name='surname')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 4, old_name='title', new_name='name')\n         self.assertEqual(changes['app'][0].operations[0].field.deconstruct(), (\n             'foo',\n             'django.db.models.ForeignKey',\n@@ -1048,6 +1090,48 @@ class AutodetectorTests(TestCase):\n             changes, 'app', 0, 1, model_name='bar', old_name='foo',\n             new_name='renamed_foo',\n         )\n+    \n+    def test_rename_multiple_models_and_fields(self):\n+        \"\"\"Tests autodetection of multiple renamed models and fields.\"\"\"\n+        initial_state = [\n+            ModelState('testapp', 'Author', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('first_name', models.CharField(max_length=200)),\n+                ('last_name', models.CharField(max_length=200)),\n+            ]),\n+            ModelState('testapp', 'Book', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+                ('author', models.ForeignKey('testapp.Author', on_delete=models.CASCADE)),\n+            ]),\n+        ]\n+\n+        new_state = [\n+            ModelState('testapp', 'Writer', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('given_name', models.CharField(max_length=200)),\n+                ('surname', models.CharField(max_length=200)),\n+            ]),\n+            ModelState('testapp', 'Novel', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('name', models.CharField(max_length=200)),\n+                ('writer', models.ForeignKey('testapp.Writer', on_delete=models.CASCADE)),\n+            ]),\n+        ]\n+\n+        changes = self.get_changes(\n+            initial_state,\n+            new_state,\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        \n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField', 'RenameModel', 'RenameField', 'RenameField'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, old_name='Author', new_name='Writer')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 1, old_name='Book', new_name='Novel')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 2, old_name='first_name', new_name='given_name')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 3, old_name='last_name', new_name='surname')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 4, old_name='title', new_name='name')\n \n     def test_rename_model(self):\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n@@ -1056,6 +1140,48 @@ class AutodetectorTests(TestCase):\n             [self.author_renamed_with_book, self.book_with_author_renamed],\n             MigrationQuestioner({\"ask_rename_model\": True}),\n         )\n+    \n+    def test_rename_multiple_models_and_fields(self):\n+        \"\"\"Tests autodetection of multiple renamed models and fields.\"\"\"\n+        initial_state = [\n+            ModelState('testapp', 'Author', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('first_name', models.CharField(max_length=200)),\n+                ('last_name', models.CharField(max_length=200)),\n+            ]),\n+            ModelState('testapp', 'Book', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+                ('author', models.ForeignKey('testapp.Author', on_delete=models.CASCADE)),\n+            ]),\n+        ]\n+\n+        new_state = [\n+            ModelState('testapp', 'Writer', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('given_name', models.CharField(max_length=200)),\n+                ('surname', models.CharField(max_length=200)),\n+            ]),\n+            ModelState('testapp', 'Novel', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('name', models.CharField(max_length=200)),\n+                ('writer', models.ForeignKey('testapp.Writer', on_delete=models.CASCADE)),\n+            ]),\n+        ]\n+\n+        changes = self.get_changes(\n+            initial_state,\n+            new_state,\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        \n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField', 'RenameModel', 'RenameField', 'RenameField'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, old_name='Author', new_name='Writer')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 1, old_name='Book', new_name='Novel')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 2, old_name='first_name', new_name='given_name')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 3, old_name='last_name', new_name='surname')\n+        self.assertOperationAttributes(changes, 'testapp', 0, 4, old_name='title', new_name='name')\n         # Right number/type of migrations?\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"RenameModel\"])\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..67d6117 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,7 +1906,30 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n-class FieldTransformTests(TestCase):\n+from django.db.models import Exists, Q\n+from django.test import TestCase\n+from .models import Manager\n+\n+class ExistsSubqueryTests(TestCase):\n+    \n+    def test_negated_empty_exists_combined_with_other_filter(self):\n+        manager1 = Manager.objects.create(name='test1')\n+        manager2 = Manager.objects.create(name='test2')\n+        qs = Manager.objects.filter(~Exists(Manager.objects.none()), name='test1')\n+        self.assertSequenceEqual(qs, [manager1])\n+        \n+    def test_negated_exists_with_non_empty_queryset(self):\n+        manager1 = Manager.objects.create(name='test1')\n+        manager2 = Manager.objects.create(name='test2')\n+        subquery = Manager.objects.filter(name='test2')\n+        qs = Manager.objects.filter(~Exists(subquery), name='test1')\n+        self.assertSequenceEqual(qs, [manager1])\n+\n+    def test_negated_empty_exists_without_other_conditions(self):\n+        manager1 = Manager.objects.create(name='test1')\n+        Manager.objects.create(name='test2')\n+        qs = Manager.objects.filter(~Exists(Manager.objects.none())).values_list('id', flat=True)\n+        self.assertTrue(manager1.pk in qs)\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..6091afb 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -9,6 +9,41 @@ try:\n except ImportError:\n     from backports import zoneinfo\n \n+class Inventory(models.Model):\n+    parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True, blank=True)\n+\n+class TestModelAdmin(TestCase):\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            formfield_overrides = {\n+                ForeignKey: {\"empty_label\": \"Custom empty label\"},\n+            }\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n+    def test_radio_fields_custom_empty_label_with_blank_false(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            def formfield_for_foreignkey(self, db_field, *args, **kwargs):\n+                if db_field.name == 'parent':\n+                    kwargs['empty_label'] = \"Specific empty label\"\n+                return super().formfield_for_foreignkey(db_field, *args, **kwargs)\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        field = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(field.empty_label, \"Specific empty label\")\n+\n+    def test_radio_fields_default_empty_label_with_blank_true(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+\n+        ma = MyModelAdmin(Inventory, admin.site)\n+        field = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(field.empty_label, \"None\")\n+\n from django import forms\n from django.conf import settings\n from django.contrib import admin\n@@ -25,6 +60,10 @@ from django.db.models import (\n     UUIDField,\n )\n from django.test import SimpleTestCase, TestCase, override_settings\n+from django.contrib import admin\n+from django.db.models import ForeignKey\n+from .models import Inventory\n+from django.contrib.auth.models import User\n from django.urls import reverse\n from django.utils import translation\n \n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..9855d09 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -122,11 +122,27 @@ class OptimizerTests(SimpleTestCase):\n                     name=\"Foo\", options={\"verbose_name_plural\": \"Foozes\"}\n                 ),\n             ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ]\n+                ),\n+            ],\n             [\n                 migrations.CreateModel(\n                     \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n                 ),\n             ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ]\n+                ),\n+            ],\n         )\n \n     def test_create_model_and_remove_model_options(self):\n@@ -137,6 +153,14 @@ class OptimizerTests(SimpleTestCase):\n                     fields=[],\n                     options={\"verbose_name\": \"My Model\"},\n                 ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\", fields=[], managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ]\n+                ),\n                 migrations.AlterModelOptions(\"MyModel\", options={}),\n             ],\n             [migrations.CreateModel(\"MyModel\", fields=[])],\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..20d681d 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,73 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+import os\n+from django.db import models\n+from django.test import TestCase\n+from django.core import management\n+from django.core import serializers\n+from django.conf import settings\n+\n+class Author(models.Model):\n+    name = models.CharField(max_length=255, unique=True)\n+\n+    def natural_key(self):\n+        return (self.name,)\n+\n+class Book(models.Model):\n+    title = models.CharField(max_length=255)\n+    author = models.ForeignKey(Author, models.DO_NOTHING)\n+\n+    def natural_key(self):\n+        return (self.title,) + self.author.natural_key()\n+\n+    natural_key.dependencies = [\"fixtures_regress.Author\"]\n+\n+class AuthorManager(models.Manager):\n+    def get_by_natural_key(self, name):\n+        return self.get(name=name)\n+\n+class BookManager(models.Manager):\n+    def get_by_natural_key(self, title, author):\n+        return self.get(title=title, author__name=author)\n+\n+class NaturalKeyLoadDataOnOtherDatabaseTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def setUp(self):\n+        # Set up the data in the default database\n+        self.author = Author.objects.create(name=\"J.R.R. Tolkien\")\n+        self.book = Book.objects.create(title=\"The Hobbit\", author=self.author)\n+\n+        # Serialize data using natural keys\n+        self.data = serializers.serialize(\"json\", [self.author, self.book],\n+                                          use_natural_foreign_keys=True,\n+                                          use_natural_primary_keys=True)\n+        self.data_path = os.path.join(settings.BASE_DIR, 'test_fixture.json')\n+        \n+        with open(self.data_path, 'w') as f:\n+            f.write(self.data)\n+    \n+    def tearDown(self):\n+        # Remove the fixture file\n+        os.remove(self.data_path)\n+\n+    def test_loaddata_with_natural_keys_on_non_default_db(self):\n+        # Clear the other database\n+        Book.objects.using('other').all().delete()\n+        Author.objects.using('other').all().delete()\n+        \n+        # Load data into the 'other' database\n+        management.call_command('loaddata', self.data_path, database='other', verbosity=0)\n+        \n+        # Verify that data is loaded correctly\n+        author_in_other_db = Author.objects.using('other').get(name=\"J.R.R. Tolkien\")\n+        book_in_other_db = Book.objects.using('other').get(title=\"The Hobbit\", author=author_in_other_db)\n+        \n+        self.assertEqual(author_in_other_db.name, \"J.R.R. Tolkien\")\n+        self.assertEqual(book_in_other_db.title, \"The Hobbit\")\n+        self.assertEqual(book_in_other_db.author, author_in_other_db)\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..7aeb02f 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,6 +3961,45 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n+    def test_alter_field_choices_noop(self):\n+        # Create the initial model state\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        # Retrieve the current field definition\n+        old_field = Author._meta.get_field(\"name\")\n+        # Define the new field with choices\n+        new_field = CharField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+            max_length=255,\n+        )\n+        # Mimic setting attributes from the old field\n+        new_field.set_attributes_from_name(\"name\")\n+        # Test that altering the field adds no queries\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        # Test altering back also adds no queries\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_type_noop_on_choices(self):\n+        # Create the initial model state\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        # Add initial field with choices\n+        old_field = CharField(max_length=255, choices=((\"Alice\", \"Alice\"), (\"Bob\", \"Bob\")))\n+        old_field.set_attributes_from_name(\"name\")\n+        # Add field to the database\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, old_field)\n+        \n+        # Define identical new field to simulate \"change\"\n+        new_field = CharField(max_length=255, choices=((\"Alice\", \"Alice\"), (\"Bob\", \"Bob\"), (\"Charlie\", \"Charlie\")))\n+        new_field.set_attributes_from_name(\"name\")\n+        \n+        # Verify no queries for altering new field with additional choices\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+\n     def test_add_textfield_unhashable_default(self):\n         # Create the table\n         with connection.schema_editor() as editor:\n",
  "django__django-15569": "",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..042c861 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -6,6 +7,7 @@ from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n from django.db.models.manager import BaseManager\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n+import inspect\n from django.test import (\n     SimpleTestCase,\n     TestCase,\n@@ -742,6 +744,28 @@ class SelectOnSaveTests(TestCase):\n         a1 = Article.objects.create(pub_date=datetime.now())\n         with self.assertNumQueries(1):\n             a1.save()\n+\n+    def test_manager_method_signature(self):\n+        # Test for the correct signature of the bulk_create method\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.bulk_create)),\n+            \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\",\n+        )\n+\n+        # Ensure other methods also have correct signatures, if applicable\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.get)),\n+            \"()\"\n+        )\n+\n+        # Another example method, assuming 'filter' method should be available\n+        # but making sure its signature is fetched correctly\n+        filter_signature = str(inspect.signature(Article.objects.filter))\n+        # This will vary based on how Django exposes this, a general check could\n+        # verify it's not the default (*args, **kwargs) placeholder\n+        self.assertNotEqual(filter_signature, \"(*args, **kwargs)\")\n+        \n+        # You could repeat similarly for other methods expected to have a specific signature\n         asos = ArticleSelectOnSave.objects.create(pub_date=datetime.now())\n         with self.assertNumQueries(2):\n             asos.save()\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..9d8ae51 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,8 +1,11 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n+from django.utils.translation import gettext_lazy as _\n+from django.utils.formats import get_format\n \n from ..utils import setup\n from .timezone_utils import TimezoneTestCase\n@@ -74,7 +77,9 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n-    def test_date(self):\n+    def test_get_format_lazy_string(self):\n+        # This test checks if get_format can handle a lazy string without raising a TypeError.\n+        self.assertEqual(get_format(_(\"DATE_FORMAT\")), \"N j, Y\")\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n     def test_no_args(self):\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..ebc22c5 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -390,12 +390,29 @@ class ProxyModelTests(TestCase):\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n \n-    def test_proxy_load_from_fixture(self):\n+    def test_select_related_only_on_proxy(self):\n+        user = ProxyCustomModel.objects.create(name=\"Jane Doe\")\n+        another_model_instance = AnotherModel.objects.create(custom=user)\n+        \n+        # Using select_related with only on a proxy model\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        \n+        instance = qs.get(id=another_model_instance.id)\n+        self.assertEqual(instance.custom.name, \"Jane Doe\")\n+        self.assertEqual(instance.custom_id, user.id)\n         management.call_command(\"loaddata\", \"mypeople.json\", verbosity=0)\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n \n-    def test_eq(self):\n+    def test_select_related_only_on_proxy_with_non_existent_field(self):\n+        user = ProxyCustomModel.objects.create(name=\"John Smith\")\n+        \n+        AnotherModel.objects.create(custom=user)\n+\n+        # This should not raise an error as the fix should prevent the original issue.\n+        # We expect a ValueError here to confirm the original case since no fix is applied in this test case yet\n+        with self.assertRaises(ValueError):\n+            list(AnotherModel.objects.select_related(\"custom\").only(\"custom__non_existent_field\"))\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..8d5435a 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,36 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_parameters_correct_order(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n+\n+    def test_parameters_with_multiple_args(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT * FROM table;\", \"-f\", \"somefile.sql\"]),\n+            ([\"psql\", \"-c\", \"SELECT * FROM table;\", \"-f\", \"somefile.sql\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_correct_order(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n+\n+    def test_parameters_with_multiple_args(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT * FROM table;\", \"-f\", \"somefile.sql\"]),\n+            ([\"psql\", \"-c\", \"SELECT * FROM table;\", \"-f\", \"somefile.sql\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..c9b9414 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -73,8 +73,26 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, 20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n+    from decimal import Decimal\n \n-    def test_force_grouping(self):\n+    def test_floatformat_with_large_decimal_precisions(self):\n+        # Test for large decimal precision values\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.123456789012345678901234567890\"), 30),\n+            \"0.123456789012345678901234567890\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.00000000000000000001\"), 20),\n+            \"0.00000000000000000001\"\n+        )\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n             self.assertEqual(floatformat(66666.666, \"1g\"), \"66,666.7\")\n",
  "django__django-15930": "",
  "django__django-15987": "",
  "django__django-16032": "",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c6202be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..1399490 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,5 +1,10 @@\n+\n import datetime\n \n+from unittest import mock\n+from django.db import DatabaseError\n+from django.test import skipUnlessDBFeature\n+\n from django.contrib import admin\n from django.contrib.admin.models import LogEntry\n from django.contrib.admin.options import IncorrectLookupParameters\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..2888351 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,25 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_no_dry_run_needed(self):\n+        \"\"\"\n+        Ensure makemigrations --check exits with a non-zero status\n+        when there are unapplied migrations without needing --dry-run.\n+        \"\"\"\n+        with self.temporary_migration_module():\n+            # Calling makemigrations with just --check should trigger SystemExit\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+\n+    def test_makemigrations_check_with_existing_migrations(self):\n+        \"\"\"\n+        Ensure makemigrations --check exits cleanly when there are\n+        no changes and migrations are up-to-date.\n+        \"\"\"\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ):\n+            call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..b900e10 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,7 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory, SimpleTestCase\n+import asyncio\n from django.test import SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..48d5baa 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,4 +1,5 @@\n-import datetime\n+\n+import urllib.parse\n import re\n from unittest import mock\n \n@@ -24,7 +25,7 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n-from django.utils.translation import gettext as _\n+from django.urls import reverse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -892,6 +893,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16145": "",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..1d9b72e 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -508,7 +508,10 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n-# RemovedInDjango50Warning\n+class TestCallableLastmodNoItems(DjangoTestCase):\n+    def test_callable_lastmod_no_items_latest_lastmod(self):\n+        sitemap = CallableLastmodNoItemsSitemap()\n+        self.assertIsNone(sitemap.get_latest_lastmod(), \"Expected get_latest_lastmod to return None when there are no items and lastmod is callable\")\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n         TEMPLATES=[\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..85e3d67 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -79,6 +79,11 @@ class NoFields(models.Model):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n+\n class SmallAutoFieldModel(models.Model):\n     id = models.SmallAutoField(primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..31fc853 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -36,6 +37,7 @@ from .models.custom_user import (\n from .models.with_custom_email_field import CustomEmailField\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n \n \n class TestDataMixin:\n@@ -252,7 +254,61 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n-    def test_password_whitespace_not_stripped(self):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_not_saving_on_invalid_data(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        # Passwords do not match\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"anotherpassword\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), False)\n+        with self.assertRaises(ValueError):\n+            form.save(commit=True)\n+\n+    def test_custom_form_saves_with_no_m2m_data(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            # No orgs provided\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [])\n         data = {\n             \"username\": \"testuser\",\n             \"password1\": \"   testpassword   \",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..9e488fe 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,6 +161,22 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        # This test verifies the fix for the issue where timesince() would raise\n+        # a TypeError for timezone-aware datetime objects with an interval >1 month.\n+        now = timezone.now()\n+        past = now - datetime.timedelta(days=31)\n+        # Make both now and past timezone aware\n+        now_aware = timezone.make_aware(now, timezone.get_default_timezone())\n+        past_aware = timezone.make_aware(past, timezone.get_default_timezone())\n+        self.assertEqual(timesince(past_aware, now_aware), \"1\\xa0month\")\n+        \n+        # Testing with more than one month gap\n+        past_aware_2 = now - datetime.timedelta(days=62)\n+        self.assertEqual(timesince(past_aware_2, now_aware), \"2\\xa0months\")\n+\n     def test_naive_datetime_with_tzinfo_attribute(self):\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..1c5b2e8 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -470,7 +470,42 @@ class CommandRunTests(AdminScriptTestCase):\n \n \n class UtilsTests(SimpleTestCase):\n-    def test_no_existent_external_program(self):\n+    def test_subparser_missing_argument(self):\n+        \"\"\"\n+        Test handling of missing required argument for a subparser command.\n+        \"\"\"\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser\", \"foo\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 1)\n+        self.assertIn(\"manage.py subparser foo: error:\", err_lines[0])\n+        self.assertIn(\"the following arguments are required: bar\", err_lines[0])\n+\n+    def test_subparser_invalid_argument(self):\n+        \"\"\"\n+        Test handling of invalid argument type for a subparser command.\n+        \"\"\"\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser\", \"foo\", \"twelve\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser foo: error: argument bar: invalid int value: 'twelve'\",\n+        )\n+\n+    def test_subparser_non_django_error_formatting(self):\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser_vanilla\", \"foo\", \"seven\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser_vanilla foo: error: argument bar: invalid int value: 'seven'\",\n+        )\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n         with self.assertRaisesMessage(CommandError, msg):\n             popen_wrapper([\"a_42_command_that_doesnt_exist_42\"])\n",
  "django__django-16485": "",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..c2b792e 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,6 +1018,15 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..17c920e 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -6,6 +7,8 @@ from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n",
  "django__django-16560": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 8b23275..80f2111 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -17,12 +17,14 @@ __all__ = [\"BaseConstraint\", \"CheckConstraint\", \"Deferrable\", \"UniqueConstraint\"\n \n \n class BaseConstraint:\n+    violation_error_code = None\n     default_violation_error_message = _(\"Constraint \u201c%(name)s\u201d is violated.\")\n     violation_error_message = None\n \n     # RemovedInDjango60Warning: When the deprecation ends, replace with:\n     # def __init__(self, *, name, violation_error_message=None):\n-    def __init__(self, *args, name=None, violation_error_message=None):\n+    def __init__(self, *args, name=None, violation_error_message=None, violation_error_code=None):\n+        self.violation_error_code = violation_error_code\n         # RemovedInDjango60Warning.\n         if name is None and not args:\n             raise TypeError(\n@@ -60,6 +62,8 @@ class BaseConstraint:\n         raise NotImplementedError(\"This method must be implemented by a subclass.\")\n \n     def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n+        validation_error_code = self.violation_error_code or 'default_error_code'\n+        raise ValidationError(self.get_violation_error_message(), code=validation_error_code)\n         raise NotImplementedError(\"This method must be implemented by a subclass.\")\n \n     def get_violation_error_message(self):\n",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..9fed0e0 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1476,6 +1476,19 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n \n         formset = ChoiceFormFormset(initial=[{\"choice\": \"Zero\", \"votes\": \"1\"}])\n+\n+    def test_formset_add_fields_with_none_index(self):\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+\n+        my_formset = MyFormSet(initial=None)\n+        self.assertNotIn(\"DELETE\", my_formset.empty_form.fields)\n         self.assertEqual(len(formset), 3)\n         self.assertIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..a76d7f8 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,6 +43,42 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n+    def test_alter_alter_field(self):\n+        \"\"\"\n+        Test that consecutive AlterField operations on the same field\n+        are reduced to the last one.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=256, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+        expected = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+        self.assertOptimizesTo(operations, expected)\n+\n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..4f2cd79 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8629,6 +8629,24 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_complex_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?param1=value1&param2=value2\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?param1=value1&param2=value2\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+        \n     @override_settings(APPEND_SLASH=False)\n     def test_missing_slash_append_slash_false_without_final_catch_all_view(self):\n         superuser = User.objects.create_user(\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..194ab78 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -255,6 +255,10 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".br\", \"application/x-brotli\"),\n+            (\".Z\", \"application/x-compress\"),\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n@@ -262,6 +266,12 @@ class FileResponseTests(SimpleTestCase):\n                     response = FileResponse(tmp)\n                 self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n                 self.assertFalse(response.has_header(\"Content-Encoding\"))\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n \n     def test_unicode_attachment(self):\n         response = FileResponse(\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..bc0283e 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,35 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..51ca815 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,32 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_import_style_compliance(self):\n+        \"\"\"\n+        Test the order of import statements follows Django coding style and isort defaults.\n+        \"\"\"\n+        # Creating a Migration instance with operations\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            }\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        \n+        # Expected output from MigrationWriter based on the correct import order\n+        expected_imports = \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\"\n+        \n+        # Assert that the output contains the imports in the correct order\n+        self.assertIn(expected_imports, output)\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..85f567a 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -329,6 +329,25 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n     PersonModel = Person\n \n \n+@skipIf(Image is None, \"Pillow is required to test ImageField\")\n+class ImageFieldNoDimensionSignalTests(ImageFieldTwoDimensionsTests):\n+    \"\"\"\n+    Tests that post_init signal handler is not connected for the ImageField\n+    when no dimension fields are set.\n+    \"\"\"\n+\n+    def test_post_init_not_connected(self):\n+        \"\"\"\n+        Ensure the ImageField does not connect a post_init signal if no\n+        width_field or height_field is specified.\n+        \"\"\"\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers],\n+        )\n+\n+\n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n     \"\"\"\n",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..49ebed5 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1148,7 +1148,46 @@ class OptimizerTests(SimpleTestCase):\n             ],\n             [migrations.RenameIndex(\"Pony\", new_name=\"new_name\", old_name=\"old_name\")],\n         )\n-        self.assertDoesNotOptimize(\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"speed\"], name=\"idx_pony_speed\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_speed\"),\n+            ],\n+            [],\n+        )\n+\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"height\"], name=\"idx_pony_height\"\n+                    ),\n+                ),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"age\"], name=\"idx_pony_age\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_height\"),\n+            ],\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"age\"], name=\"idx_pony_age\"\n+                    ),\n+                ),\n+            ],\n+        )\n+\n+        self.assertOptimizesTo(\n             [\n                 migrations.RenameIndex(\n                     \"Pony\", new_name=\"mid_name\", old_name=\"old_name\"\n@@ -1157,4 +1196,4 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..0a76fc7 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -784,7 +784,38 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         self.assertEqual(errors, [])\n \n-    def test_readonly_method_on_model(self):\n+    def test_readonly_fields_includes_field_name(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"non_existent_field\",)\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'non_existent_field', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an attribute of \"\n+                \"'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_readonly_fields_on_inlines_includes_field_name(self):\n+        class CityInline(admin.TabularInline):\n+            model = City\n+            readonly_fields = [\"non_existent_field_inline\"]  # Missing attribute\n+\n+        errors = CityInline(State, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'non_existent_field_inline', \"\n+                \"which is not a callable, an attribute of 'CityInline', or an attribute of \"\n+                \"'admin_checks.City'.\",\n+                obj=CityInline,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = (\"readonly_method_on_model\",)\n \n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..2073b3e 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -60,8 +61,44 @@ class XorLookupsTests(TestCase):\n             self.numbers[:2],\n         )\n \n-    def test_empty_in(self):\n+\n+    def test_multi_xor_parity(self):\n+        # Test the correct behavior of XOR across multiple conditions\n+        # When using multiple XORs, the result should reflect parity (odd or even truths)\n+        qs = Number.objects.filter(\n+            Q(num__gte=1)\n+            ^ Q(num__gte=3)\n+            ^ Q(num__gte=5)\n+            ^ Q(num__gte=7)\n+            ^ Q(num__gte=9)\n+        )\n+        expected_numbers = [self.numbers[i] for i in range(10) if (i >= 1) ^ (i >= 3) ^ (i >= 5) ^ (i >= 7) ^ (i >= 9)]\n+        self.assertCountEqual(qs, expected_numbers)\n+        \n+    def test_exactly_one_behavior(self):\n+        # Even though it's assumed that only one of these would be true, verify the XOR interpretation\n+        qs = Number.objects.filter(\n+            Q(num__gte=8)\n+            ^ Q(num__gte=2)\n+            ^ Q(num__gte=2)\n+            ^ Q(num__gte=8)\n+        )\n+        # Expecting all numbers that match an odd count of conditions.\n+        self.assertCountEqual(\n+            qs,\n+            [n for n in self.numbers if (n.num >= 8) ^ (n.num >= 2) ^ (n.num >= 2) ^ (n.num >= 8)]\n+        )\n+        \n+    def test_negative_numbers_parity(self):\n+        qs = Number.objects.filter(\n+            Q(num__lt=-1)\n+            ^ Q(num__lt=-3)\n+            ^ Q(num__lt=-5)\n+            ^ Q(num__lt=0)\n+        )\n+        expected_numbers = [self.numbers[i] for i in range(10) if (i < -1) ^ (i < -3) ^ (i < -5) ^ (i < 0)]\n+        self.assertCountEqual(qs, expected_numbers)\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..edac89b 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -24,6 +24,10 @@ SOME_INSTALLED_APPS = [\n     \"django.contrib.staticfiles\",\n ]\n \n+import functools\n+from django.test import override_settings\n+from django.apps import apps, AppConfig\n+\n SOME_INSTALLED_APPS_NAMES = [\n     \"django.contrib.admin\",\n     \"django.contrib.auth\",\n@@ -138,6 +142,41 @@ class AppsTests(SimpleTestCase):\n             config = apps.get_app_config(\"two_configs_one_default_app\")\n         self.assertIsInstance(config, TwoConfig)\n \n+    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache(self):\n+        # Set cache for get_swappable_settings_name\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        apps.get_models()\n+        \n+        # Call clear_cache to clear all caches\n+        apps.clear_cache()\n+        \n+        # Verify that the cache for get_swappable_settings_name is cleared\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        \n+        # Verify that the cache for get_models is cleared\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n+\n+    def test_clear_cache_different_swappable_setting(self):\n+        # Set cache with a different swappable setting\n+        self.assertIsNone(apps.get_swappable_settings_name(\"auth.User\"))\n+        apps.get_models()\n+\n+        # Clear the caches\n+        apps.clear_cache()\n+        \n+        # Ensure the swappable cache is cleared\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+    \n+    def test_clear_cache_after_altering_app_registry(self):\n+        # Simulate altering the app registry\n+        apps.ready = False\n+        apps.clear_cache()\n+        \n+        # Test cache clearance after altering the registry\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n+\n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n     def test_get_app_configs(self):\n         \"\"\"\n",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..85c0616 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -650,6 +650,25 @@ class MakeMigrationsTests(MigrationTestBase):\n                 call_command(\"makemigrations\", \"migrations\", verbosity=0)\n \n             initial_file = os.path.join(migration_dir, \"0001_initial.py\")\n+            self.assertTrue(os.path.exists(initial_file))\n+\n+    def test_makemigrations_correct_allow_migrate_calls(self):\n+        \"\"\"\n+        Test that makemigrations calls allow_migrate() with the correct\n+        (app_label, model_name) parameters, ensuring no incorrect combinations\n+        are passed.\n+        \"\"\"\n+        class MockRouter:\n+            def allow_migrate(self, db, app_label, model_name=None, **hints):\n+                if model_name:\n+                    # Check that the model belongs to the given app_label\n+                    model = apps.get_model(app_label, model_name)\n+                    self.assertIsNotNone(model)\n+\n+        with self.settings(DATABASE_ROUTERS=[MockRouter()]):\n+            with mock.patch('django.core.management.commands.makemigrations.Command.handle') as mock_handle:\n+                call_command('makemigrations', 'migrations', verbosity=0)\n+                mock_handle.assert_called_once()\n             self.assertFalse(os.path.exists(initial_file))\n \n     def test_makemigrations_conflict_exit(self):\n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..0aca5cc 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -297,6 +297,31 @@ class PaginationTests(SimpleTestCase):\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_empty_paginator_iteration(self):\n+        \"\"\" Test iterating over an empty Paginator. \"\"\"\n+        paginator = Paginator([], 2)\n+        pages = list(paginator)\n+        self.assertEqual(pages, [])\n+\n+    def test_single_page_paginator_iteration(self):\n+        \"\"\" Test iterating over a Paginator with just one page. \"\"\"\n+        paginator = Paginator([1], 10)\n+        pages = list(paginator)\n+        self.assertEqual(pages, [[1]])\n+\n+    def test_multiple_full_pages_iteration(self):\n+        \"\"\" Test iterating over a Paginator with multiple fully filled pages. \"\"\"\n+        paginator = Paginator([1, 2, 3, 4, 5, 6, 7, 8], 2)\n+        pages = list(paginator)\n+        self.assertEqual(pages, [[1, 2], [3, 4], [5, 6], [7, 8]])\n+\n \n class ModelPaginationTests(TestCase):\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..9ed62b7 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,30 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import pytest\n+import matplotlib.pyplot as plt\n+import numpy as np\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    # Original test case from the patch\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0, \"Expected the first bin edge to be 0\"\n+    assert bins[-1] == 1, \"Expected the last bin edge to be 1\"\n+\n+    # Additional test case with different input data\n+    _, bins, _ = plt.hist(np.linspace(0, 1, 100), bins=5, range=(0, 1), density=True)\n+    assert bins[0] == 0, \"Expected the first bin edge to be 0 for linspace input\"\n+    assert bins[-1] == 1, \"Expected the last bin edge to be 1 for linspace input\"\n+\n+    # Check with different ranges\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0.2, 0.8), density=True)\n+    assert bins[0] == 0.2, \"Expected the first bin edge to match the specified range\"\n+    assert bins[-1] == 0.8, \"Expected the last bin edge to match the specified range\"\n+\n+    # Edge case: empty input\n+    _, bins, _ = plt.hist([], bins=5, range=(0, 1), density=True)\n+    assert len(bins) == 6, \"Expected bins to be created based on given range even for empty input\"\n+    assert bins[0] == 0 and bins[-1] == 1, \"Expected bin edges for given range\"\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6390,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..f80f298 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -930,6 +930,15 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (-3, 5)\n     plt.close()\n \n+def test_invert_log_axis():\n+    # Test inverting a log-scaled y-axis\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.plot([1, 2, 3, 4], [1000, 100, 10, 1])\n+    ax.set_ylim(1000, 1)  # attempting to invert\n+    assert ax.get_ylim() == (1000, 1), \"Failed to invert log axis using limits\"\n+    plt.close()\n+\n     fig, ax = plt.subplots()\n     ax.invert_yaxis()\n     ax.plot([-5, -3, 2, 4], [1, 2, -3, 5])\n@@ -938,6 +947,15 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+def test_invert_log_axis():\n+    # Test inverting a log-scaled y-axis\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.plot([1, 2, 3, 4], [1000, 100, 10, 1])\n+    ax.set_ylim(1000, 1)  # attempting to invert\n+    assert ax.get_ylim() == (1000, 1), \"Failed to invert log axis using limits\"\n+    plt.close()\n+\n \n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..b4677d7 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6961,6 +6961,24 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear_with_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..a47c064 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -311,4 +311,20 @@ def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+\n+def test_no_deprecation_on_empty_data():\n+    \"\"\" \n+    Smoke test to check that no deprecation warning is emitted when \n+    empty lists are passed to plot with category units.\n+    \"\"\"\n+    import warnings\n+    import matplotlib.pyplot as plt\n+\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        ax.plot([], [])\n+        # Check that no warnings were issued\n+        assert len(w) == 0\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..b916135 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -918,8 +918,34 @@ def test_proportional_colorbars():\n                                      extend=extends[i])\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n+import matplotlib as mpl\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.colors import from_levels_and_colors\n+from matplotlib.colorbar import Colorbar\n \n-def test_negative_boundarynorm():\n+import pytest\n+\n+@pytest.mark.parametrize(\"extend, coloroffset, expected_segments\", [\n+    ('both', 1, [np.array([[0., 0.], [0., 1.]]),\n+                 np.array([[1., 0.], [1., 1.]]),\n+                 np.array([[2., 0.], [2., 1.]])]),\n+    ('min', 0, [np.array([[0., 0.], [0., 1.]]),\n+                np.array([[1., 0.], [1., 1.]])]),\n+    ('max', 0, [np.array([[1., 0.], [1., 1.]]),\n+                np.array([[2., 0.], [2., 1.]])]),\n+    ('neither', -1, [np.array([[1., 0.], [1., 1.]])])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, expected_segments):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    fig, ax = plt.subplots(figsize=(5, 1))\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal', drawedges=True)\n+    assert np.all(np.equal(cbar.dividers.get_segments(), expected_segments))\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n \n",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..a925024 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,6 +21,15 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_set_visible(fig_test, fig_ref):\n+    # Create a 3D subplot and make it invisible\n+    ax = fig_test.add_subplot(projection='3d')\n+    ax.set_visible(False)\n+\n+    # Create a reference 3D plot and ensure it's visible (default behavior)\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+\n def test_aspect_equal_error():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..5c2891b 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -148,8 +148,58 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_test.set_angle(angle)\n     assert rect_test.get_angle() == angle\n \n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_rectangle_patch(fig_test, fig_ref):\n+    # Test Rectangle with dashes and offset for linestyle.\n+\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.2, 0.2)\n+    width, height = (0.6, 0.6)\n+\n+    # Reference plot using Line2D for correct behavior\n+    x = [loc[0], loc[0] + width]\n+    y = [loc[1], loc[1] + height]\n+\n+    ax_ref.plot(x, [loc[1], loc[1]], color='b', linestyle=(0, (10, 10)), linewidth=4)\n+    ax_ref.plot([loc[0], loc[0]], y, color='b', linestyle=(0, (10, 10)), linewidth=4)\n+\n+    ax_ref.plot(x, [loc[1], loc[1]], color='r', linestyle=(10, (10, 10)), linewidth=4)\n+    ax_ref.plot([loc[0], loc[0]], y, color='r', linestyle=(10, (10, 10)), linewidth=4)\n+\n+    # Test rectangle patches\n+    rect_test_1 = Rectangle(loc, width, height, linewidth=4, edgecolor='b', linestyle=(0, (10, 10)))\n+    rect_test_2 = Rectangle(loc, width, height, linewidth=4, edgecolor='r', linestyle=(10, (10, 10)))\n+\n+    ax_test.add_patch(rect_test_1)\n+    ax_test.add_patch(rect_test_2)\n+\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_ellipse_patch(fig_test, fig_ref):\n+    # Test Ellipse with dashes and offset for linestyle.\n+\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    center = (0.5, 0.5)\n+    width, height = (0.6, 0.4)\n+\n+    # Reference plot using Line2D for correct behavior\n+    theta = np.linspace(0, 2 * np.pi, 100)\n+    x = center[0] + (width / 2) * np.cos(theta)\n+    y = center[1] + (height / 2) * np.sin(theta)\n+\n+    ax_ref.plot(x, y, color='b', linestyle=(0, (10, 10)), linewidth=4)\n+    ax_ref.plot(x, y, color='r', linestyle=(10, (10, 10)), linewidth=4)\n+\n+    # Test ellipse patches\n+    ellipse_test_1 = Ellipse(center, width, height, linewidth=4, edgecolor='b', linestyle=(0, (10, 10)))\n+    ellipse_test_2 = Ellipse(center, width, height, linewidth=4, edgecolor='r', linestyle=(10, (10, 10)))\n \n-def test_negative_rect():\n+    ax_test.add_patch(ellipse_test_1)\n+    ax_test.add_patch(ellipse_test_2)\n     # These two rectangles have the same vertices, but starting from a\n     # different point.  (We also drop the last vertex, which is a duplicate.)\n     pos_vertices = Rectangle((-3, -2), 3, 2).get_verts()[:-1]\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..40513e8 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,32 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n-\n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+import pytest\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.patches import Rectangle\n+\n+def test_stackplot_does_not_affect_cycler():\n+    fig, ax = plt.subplots()\n+    # Start with an initial plot to set the cycler\n+    ax.plot([1, 2], [1, 2], color='C0')\n+    # Add a rectangle to follow the same color cycle\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    # Use stackplot with color aliases\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+    # Draw another plot to verify the cycler is not altered\n+    ax.plot([2, 3], [2, 3], color='C0')  # Should repeat the cycle to C0 again\n+\n+@pytest.mark.parametrize(\"colors\", [['C0', 'C1', 'C2'], ['#ff0000', '#00ff00', '#0000ff']])\n+def test_stackplot_various_colors(colors):\n+    fig, ax = plt.subplots()\n+    # Data for stackplot\n+    data = np.random.rand(3, 10)\n+    # Should not raise an error irrespective of color format\n+    ax.stackplot(np.arange(10), data, colors=colors)\n+    # Ensure the plot does not throw an error\n+    ax.set_title('Testing various color formats')\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..98e493a 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -622,8 +622,33 @@ class TestSpectral:\n         # these should not be almost equal\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n-\n-    def test_psd_window_hanning_detrend_linear(self):\n+    def test_psd_flattop_window_spectral_helper(self):\n+        if self.NFFT_density is None:\n+            return\n+        from matplotlib import mlab\n+        import numpy as np\n+        from scipy import signal\n+        \n+        # Create a flattop window\n+        window = signal.windows.flattop(self.NFFT_density)\n+\n+        # Calculate PSD using mlab.psd with the flattop window\n+        spec, _ = mlab.psd(x=self.y,\n+                           NFFT=self.NFFT_density,\n+                           Fs=self.Fs,\n+                           noverlap=0,\n+                           sides=self.sides,\n+                           window=window,\n+                           scale_by_freq=True)\n+        \n+        # Verify if the spectral correction is correct\n+        # The expected result should have correctly compensated window sum\n+        adjusted_sum_square = window.sum()**2\n+        window_abs_sum_square = (np.abs(window)**2).sum()\n+\n+        # With the fix, `adjusted_sum_square` should equal `window_abs_sum_square`\n+        # If they are not equal, it indicates an error in the windowing correction\n+        assert_allclose(adjusted_sum_square, window_abs_sum_square, atol=1e-08)\n         if self.NFFT_density is None:\n             return\n         ydata = np.arange(self.NFFT_density)\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..2cee66a 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,34 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])  # To ensure offset text is generated\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])  # To ensure offset text is generated\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..9137ae2 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,7 +1,8 @@\n+\n from io import BytesIO\n import ast\n import pickle\n-\n+import pickletools\n import numpy as np\n import pytest\n \n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..bd86737 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -43,8 +43,35 @@ def test_simple():\n     ax.set_yscale('log')\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n+def test_pickle_figure_with_aligned_labels():\n+    import matplotlib.pyplot as plt\n+    import pickle\n+    from io import BytesIO\n+\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Call align_labels() which previously caused pickling issues\n+    fig.align_labels()\n \n-def _generate_complete_test_figure(fig_ref):\n+    try:\n+        # Attempt to pickle the figure\n+        pickle_data = pickle.dumps(fig, protocol=pickle.HIGHEST_PROTOCOL)\n+        # Attempt to unpickle the figure to ensure it's valid\n+        loaded_fig = pickle.loads(pickle_data)\n+        loaded_fig.canvas.draw()\n+    except Exception as e:\n+        raise AssertionError(f\"Pickling/unpickling failed: {e}\")\n+\n+    plt.close(fig)\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n \n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..fcb4942 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,6 +991,77 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    \"\"\"Test mincnt parameter behavior with and without C parameter in hexbin.\"\"\"\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_zero_C_parameter(fig_test, fig_ref):\n+    \"\"\"Test hexbin with mincnt=0 and C parameter ensuring all points plotted.\"\"\"\n+    X = [0, 0, 6]\n+    Y = [0, 0, 0]\n+    C = [1, 1, 1]\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # Test condition should show all bins as C=1 should allow mincnt=0 to plot hexagons containing data\n+    ax_ref.hexbin(\n+        X, Y,\n+        C=C,\n+        mincnt=0,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+\n+    # Reference condition is identical\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        mincnt=0,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n \n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..19fb7e2 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,46 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    # Original test case: Checking if the paths are set correctly\n+    cs_test = fig_test.subplots().contour([[0, 1], [1, 2]])\n+    cs_ref = fig_ref.subplots().contour([[1, 0], [2, 1]])\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+@check_figures_equal(extensions=['png'])\n+def test_set_paths_empty(fig_test, fig_ref):\n+    # Test setting paths to an empty list\n+    cs_test = fig_test.subplots().contour([[0, 1], [1, 2]])\n+    cs_test.set_paths([])\n+    assert len(cs_test.get_paths()) == 0\n+\n+@check_figures_equal(extensions=['png'])\n+def test_set_paths_identity(fig_test, fig_ref):\n+    # Test setting paths to themselves should not alter the contour\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    Z = [[0, 1], [1, 2]]\n+    cs_test = ax_test.contour(Z)\n+    cs_ref = ax_ref.contour(Z)\n+    cs_test.set_paths(cs_test.get_paths())\n+\n+@check_figures_equal(extensions=['png'])\n+def test_set_paths_transform(fig_test, fig_ref):\n+    # Test setting paths of a transformed contour\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    Z = [[0, 1], [1, 2]]\n+    cs_test = ax_test.contour(Z)\n+    cs_ref = ax_ref.contour(Z, alpha=0.5)  # Different alpha to check visibility\n+    transformed_paths = [path.transformed(ax_test.transData.inverted()) for path in cs_ref.get_paths()]\n+    cs_test.set_paths(transformed_paths)\n+    ax_ref.contour(Z, alpha=0.5)  # To visually match the resultant paths\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..8394727 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,24 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+def test_valid_name_allowed(app, client):\n+    # This test should pass as the name is not empty\n+    try:\n+        bp = flask.Blueprint(\"valid_name\", __name__)\n+    except ValueError:\n+        pytest.fail(\"Blueprint raised ValueError with a valid name\")\n+\n+def test_name_with_only_whitespace_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"   \", __name__)\n+\n+def test_name_with_special_characters_allowed(app, client):\n+    # Assuming special characters except dots are allowed\n+    try:\n+        bp = flask.Blueprint(\"valid$name_123\", __name__)\n+    except ValueError:\n+        pytest.fail(\"Blueprint raised ValueError with valid special character name\")\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..aa9f30d 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,13 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n+            (InvalidURL, 'http://..example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://example.com..'),\n+            (InvalidURL, 'http://example.com/..path'),\n+            (InvalidURL, 'http://.'),\n+            (InvalidURL, 'http://..'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..70fe0b6 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,22 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+def test_no_coercion_for_values_property():\n+    import numpy as np\n+    import xarray as xr\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    class HasValues:\n+        def __init__(self):\n+            self.values = 5\n+\n+    # Check proper behaviour for non-broadcast assignments\n+    good_indexed, bad_indexed = xr.DataArray([None]), xr.DataArray([None])\n+\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    assert isinstance(good_indexed.values[0], set)\n+\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+    assert isinstance(bad_indexed.values[0], HasValues)\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..016726a 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2107,7 +2107,21 @@ class TestDataset:\n \n         assert_identical(ds.coords['a'], expected_orig)\n \n-    def test_copy_with_data_errors(self):\n+    def test_copy_unicode_index(self):\n+        # Create a dataset with unicode index\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])}\n+        )\n+        \n+        # Perform a deep copy\n+        ds_copy = ds.copy(deep=True)\n+        \n+        # Check the dtype of the copied index variables\n+        assert ds.variables['x'].dtype.kind == 'U'\n+        assert ds_copy.variables['x'].dtype.kind == 'U'\n+        assert ds.variables['y'].dtype.kind == 'U'\n+        assert ds_copy.variables['y'].dtype.kind == 'U'\n         orig = create_test_data()\n         new_var1 = np.arange(orig['var1'].size).reshape(orig['var1'].shape)\n         with raises_regex(ValueError, 'Data must be dict-like'):\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..ae9469d 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -571,7 +571,31 @@ class TestCombineAuto:\n         with raises_regex(ValueError, 'Every dimension needs a coordinate'):\n             combine_by_coords(objs)\n \n-        def test_empty_input(self):\n+    def test_combine_by_coords_non_monotonic_identical_coordinates(self):\n+        # Test with non-monotonic identical coordinates (based on the issue)\n+        ycoord = ['a', 'c', 'b']\n+\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+            coords=dict(x=[1, 2, 3], y=ycoord)\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+            coords=dict(x=[4, 5, 6, 7], y=ycoord)\n+        )\n+\n+        expected = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data)),\n+            coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord)\n+        )\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n+    def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n     def test_infer_order_from_coords(self):\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..a1174d8 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,8 +2309,22 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n-\n-    def test_reduce_keep_attrs(self):\n+    def test_quantile_keep_attrs(self):\n+        da = xr.DataArray([0, 1, 2], dims=\"x\", attrs={\"units\": \"K\", \"description\": \"temperature\"})\n+        \n+        # Test when keep_attrs=False (default behavior)\n+        output = da.quantile(0.5, dim=\"x\")\n+        assert output.attrs == OrderedDict(), \"Attributes should not be kept when keep_attrs is False\"\n+\n+        # Test when keep_attrs=True (attributes should be kept)\n+        output = da.quantile(0.5, dim=\"x\", keep_attrs=True)\n+        assert output.attrs[\"units\"] == \"K\"\n+        assert output.attrs[\"description\"] == \"temperature\"\n+        \n+        # Test with multiple quantiles and keep_attrs=True\n+        output = da.quantile([0.25, 0.75], dim=\"x\", keep_attrs=True)\n+        assert output.attrs[\"units\"] == \"K\"\n+        assert output.attrs[\"description\"] == \"temperature\"\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..71bbcec 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -5,7 +6,7 @@ import xarray as xr\n from xarray.core import dtypes, merge\n \n from . import raises_regex\n-from .test_dataset import create_test_data\n+from xarray.testing import assert_identical\n \n \n class TestMergeInternals:\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..2bebac7 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,25 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds3.attrs[\"x\"] == 2\n+\n+    def test_merge_attrs_override_does_not_mutate_source(self):\n+        # This test ensures that the source attributes are not mutated\n+        ds1 = xr.Dataset(attrs={\"a\": \"b\"})\n+        ds2 = xr.Dataset(attrs={\"a\": \"c\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        assert ds1.attrs[\"a\"] == \"b\"\n+        assert ds2.attrs[\"a\"] == \"c\"\n+        assert ds3.attrs[\"a\"] == \"b\"\n+        ds3.attrs[\"a\"] = \"d\"\n+        assert ds1.attrs[\"a\"] == \"b\"  # Ensure ds1 is not affected\n+        assert ds3.attrs[\"a\"] == \"d\"  # Ensure ds3 is updated\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..84a7d02 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,8 +1921,27 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n-\n-@pytest.mark.parametrize(\"use_dask\", [True, False])\n+def test_where_attrs_preserved() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"source\": \"condition\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"unit\": \"meters\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"unit\": \"meters\"})\n+    \n+    # Test with keep_attrs=True\n+    result_with_attrs = xr.where(cond, x, y, keep_attrs=True)\n+    expected_with_attrs = xr.DataArray([1, 0], dims=\"x\", attrs={\"unit\": \"meters\"})\n+    assert_identical(result_with_attrs, expected_with_attrs)\n+\n+    # Test with keep_attrs=False\n+    result_without_attrs = xr.where(cond, x, y, keep_attrs=False)\n+    expected_without_attrs = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(result_without_attrs, expected_without_attrs)\n+\n+def test_where_dtypes_preserved() -> None:\n+    data = xr.DataArray(np.ones([10,10], dtype=np.int8), attrs={\"description\": \"original data\"})\n+    data2 = xr.where(data == 1, 5, 0, keep_attrs=True)\n+    \n+    assert data2.dtype == np.int8\n+    assert data2.attrs == {\"description\": \"original data\"}\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n     if use_dask and not has_dask:\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..06418ec 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -13,8 +13,19 @@ from . import assert_allclose, assert_equal, assert_identical, requires_dask\n with suppress(ImportError):\n     import dask.array as da\n \n+import numpy as np\n \n-def test_CFMaskCoder_decode():\n+@pytest.mark.parametrize(\"engine\", [\"netcdf4\", \"pydap\"])\n+def test_signed_byte_handling_with_opendap(engine):\n+    url = \"https://observations.ipsl.fr/thredds/dodsC/EUREC4A/PRODUCTS/testdata/netcdf_testfiles/test_NC_BYTE_neg.nc\"\n+    dataset = xr.open_dataset(url, engine=engine)\n+    expected_values = np.array([-128.0, -1.0, 0.0, 1.0, 2.0, np.nan, 127.0])\n+    \n+    # Check whether the data is decoded to signed bytes correctly\n+    assert np.allclose(dataset['test'].values[:-1], expected_values[:-1], equal_nan=True), f\"Unexpected values for engine {engine}\"\n+\n+    # Assert the dtype is float32 after decoding\n+    assert dataset['test'].dtype == np.float32, f\"Unexpected dtype for engine {engine}\"\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n     coder = variables.CFMaskCoder()\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..63e83a2 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1919,6 +1919,28 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+    # ensure keep_attrs can handle scalar values\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    assert actual.attrs == {}\n+\n+    # test with scalar `x` argument\n+    actual = xr.where(cond, 42, xr.DataArray([0, 0], dims=\"x\"), keep_attrs=True)\n+    expected = xr.DataArray([42, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+    # test with scalar `y` argument\n+    actual = xr.where(cond, xr.DataArray([1, 1], dims=\"x\"), -1, keep_attrs=True)\n+    expected = xr.DataArray([1, -1], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+    # test with both `x` and `y` as scalars\n+    actual = xr.where(cond, 3.14, -3.14, keep_attrs=True)\n+    expected = xr.DataArray([3.14, -3.14], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+    # ensure no attrs when both x and y are scalars\n+    assert actual.attrs == {}\n+\n \n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n@@ -1928,6 +1950,28 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+    # ensure keep_attrs can handle scalar values\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    assert actual.attrs == {}\n+\n+    # test with scalar `x` argument\n+    actual = xr.where(cond, 42, xr.DataArray([0, 0], dims=\"x\"), keep_attrs=True)\n+    expected = xr.DataArray([42, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+    # test with scalar `y` argument\n+    actual = xr.where(cond, xr.DataArray([1, 1], dims=\"x\"), -1, keep_attrs=True)\n+    expected = xr.DataArray([1, -1], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+    # test with both `x` and `y` as scalars\n+    actual = xr.where(cond, 3.14, -3.14, keep_attrs=True)\n+    expected = xr.DataArray([3.14, -3.14], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+    # ensure no attrs when both x and y are scalars\n+    assert actual.attrs == {}\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-6599": "",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..6b14a5f 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -219,6 +219,26 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n         return {k: lazy_inaccessible(k, v) for k, v in self._variables.items()}\n \n+    def test_chunks_without_loading_data(self) -> None:\n+        # Regression test for GH6538: Verify that accessing the chunks attribute \n+        # does not load the entire dataset array data into memory.\n+\n+        # Case: Dataset does not use Dask\n+        ds = create_test_data()\n+\n+        # Pretend the dataset is not chunked. It uses lazy loading, i.e., data is not explicitly stored in memory.\n+        assert ds.chunks == {}\n+        \n+        # Create a variable that should reside in memory when loaded\n+        temp_var = ds[\"var1\"]\n+        org_var1_dtype = temp_var.dtype\n+        \n+        # Replace the variable with an InaccessibleArray, simulating that it's not in memory\n+        ds[\"var1\"] = (temp_var.dims, InaccessibleArray(temp_var.values))\n+\n+        # Assert that accessing the chunks attribute doesn't trigger data loading (i.e., by not changing the dtype)\n+        assert ds[\"var1\"].dtype == org_var1_dtype\n+\n \n class TestDataset:\n     def test_repr(self) -> None:\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..5754ac4 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -27,6 +27,17 @@ pytestmark = [\n \n class TestDataArrayRolling:\n     @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    def test_rolling_manual_iteration_with_center(self, da, center) -> None:\n+        size = 3\n+        rolling_obj = da.rolling(time=size, center=center)\n+\n+        # Ensure that manually iterating gives the same result\n+        # as directly computing the mean on the rolling object.\n+        result_manual = [window.mean().values.item() for _, window in rolling_obj]\n+        result_direct = rolling_obj.mean().values\n+\n+        np.testing.assert_array_equal(result_manual, result_direct)\n     def test_rolling_iter(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         rolling_obj_mean = rolling_obj.mean()\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..4a9e670 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -493,12 +493,46 @@ def test_get_map_data() -> None:\n             sim.append_stream(source_fname, stream)\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n-\n-    assert len(expected_linelists) == len(data)\n+import pytest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.checkers.similar import Similar\n+def test_set_duplicate_lines_to_zero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Similar(min_lines=0).run()\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n+import pytest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.checkers.similar import Similar\n+def test_lines_above_threshold() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output):\n+        similar_checker = Similar(min_lines=2)\n+        # Assume these test files have at least two similar lines\n+        similar_checker.append_stream(\"test_file_1.py\", open(\"test_file_1.py\"))\n+        similar_checker.append_stream(\"test_file_2.py\", open(\"test_file_2.py\"))\n+        similar_checker.run()\n+    assert \"Duplicated code\" in output.getvalue()\n+import pytest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.checkers.similar import Similar\n+def test_lines_below_threshold() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output):\n+        similar_checker = Similar(min_lines=10)\n+        # These files should not trigger any duplicated code errors given the high threshold\n+        similar_checker.append_stream(\"test_file_1.py\", open(\"test_file_1.py\"))\n+        similar_checker.append_stream(\"test_file_2.py\", open(\"test_file_2.py\"))\n+        similar_checker.run()\n+    assert \"Duplicated code\" not in output.getvalue()\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n     ):\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..8b0d8d7 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -93,10 +93,19 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     output = capsys.readouterr()\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n \n-def test_unknown_py_version(capsys: CaptureFixture) -> None:\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we don't expect an argument for --verbose.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..267e803 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,43 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive_option(self) -> None:\n+        \"\"\"Test that files in paths specified by ignore-paths are ignored\n+        when the --recursive=y option is used.\"\"\"\n+        with _test_sys_path():\n+            # pytest is including directory HERE/regrtest_data to sys.path which causes\n+            # astroid to believe that directory is a package.\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                # Create a temporary pyproject.toml with ignore-paths configuration\n+                pyproject_toml_content = \"\"\"\n+                [tool.pylint.MASTER]\n+                ignore-paths = [\n+                    \"^ignored_subdirectory/.*$\",\n+                ]\n+                \"\"\"\n+                with open(\"pyproject.toml\", \"w\") as pyproject_file:\n+                    pyproject_file.write(pyproject_toml_content)\n+\n+                try:\n+                    # Verify that linting ignores files in the ignored_subdirectory\n+                    self._runtest(\n+                        [\n+                            \".\",\n+                            \"--recursive=y\",\n+                            \"--rcfile=pyproject.toml\",\n+                        ],\n+                        code=0,\n+                    )\n+                finally:\n+                    # Clean up the temporary pyproject.toml\n+                    os.remove(\"pyproject.toml\")\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..9158265 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1273,6 +1273,29 @@ def test_pdb_teardown_skipped(\n     result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n     assert tracked == []\n \n+    # Additional Test Case for unittest.skipIf\n+    tracked.clear()\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        @unittest.skipIf(True, \"Condition is True\")\n+        class AnotherTestCase(unittest.TestCase):\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_2(self):\n+                pass\n+        \"\"\"\n+    )\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+\n \n def test_async_support(pytester: Pytester) -> None:\n     pytest.importorskip(\"unittest.async_case\")\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..0442065 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,8 +1051,30 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n+from _pytest import capture\n+from io import StringIO\n+import sys\n \n-@contextlib.contextmanager\n+def test_encodedfile_mode_does_not_include_b():\n+    \"\"\" \n+    Test that _pytest.capture.EncodedFile mode doesn't have 'b' and supports str only.\n+    \"\"\"\n+    buffer = StringIO()\n+    encoded_file = capture.EncodedFile(buffer, encoding=\"utf-8\")\n+    assert \"b\" not in getattr(encoded_file.buffer, \"mode\", \"\")\n+    try:\n+        encoded_file.write(\"This is a test string.\\n\")\n+    except TypeError:\n+        pytest.fail(\"write() raised TypeError unexpectedly!\")\n+\n+def test_encodedfile_raises_error_on_bytes():\n+    \"\"\" \n+    Test that _pytest.capture.EncodedFile raises a TypeError when writing bytes.\n+    \"\"\"\n+    buffer = StringIO()\n+    encoded_file = capture.EncodedFile(buffer, encoding=\"utf-8\")\n+    with pytest.raises(TypeError, match=r\"write\\(\\) argument must be str, not bytes\"):\n+        encoded_file.write(b\"This is a test bytes.\")\n def saved_fd(fd):\n     new_fd = os.dup(fd)\n     try:\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 8c1c2d7..1379db3 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1,3 +1,4 @@\n+\n import gc\n \n import pytest\n@@ -20,7 +21,22 @@ def test_simple_unittest(testdir):\n     assert reprec.matchreport(\"test_failing\").failed\n \n \n-def test_runTest_method(testdir):\n+def test_issue_with_patch_numpy_array(testdir):\n+    \"\"\"Test to verify the fix for patching with numpy arrays that could cause ValueError.\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        from unittest.mock import patch\n+        import numpy as np\n+        class TestArrayPatch:\n+            @patch(target='test_module.FOO', new=np.array([-5.5, 3.0]))\n+            def test_array_patch(self):\n+                # This is a dummy test to verify that no ValueError is raised during collection.\n+                assert True\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    # We expect that the test collects and runs without errors related to patching with numpy arrays.\n+    result.assert_outcomes(passed=1)\n     testdir.makepyfile(\n         \"\"\"\n         import unittest\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..d797e14 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -119,8 +119,16 @@ class TestPaste(object):\n \n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n-\n-    def test_create_new_paste(self, pastebin, mocked_urlopen):\n+    def test_create_new_paste_with_text_lexer(self, pastebin, mocked_urlopen):\n+        result = pastebin.create_new_paste(b\"full-paste-contents\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=full-paste-contents\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n         assert len(mocked_urlopen) == 1\n@@ -130,4 +138,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..e5a789a 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,8 +201,21 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n \n-def test_dynamic_fixture_request(testdir):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..9a4650b 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -397,7 +398,31 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*XPASS*test_that*\"])\n \n-    def test_dynamic_xfail_no_run(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir):\n+        # This test checks if a dynamically added xfail marker during runtest results in the test being xfailed.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0  # this should be xfailed\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+        \n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir):\n+        # This test checks if a dynamically added strict xfail marker during runtest results in the test being failed if it passes.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+                pass  # this should fail as xpass because strict=True\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..77db953 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -512,6 +512,12 @@ class TestCaptureFixture:\n                 capfd.close()\n             \"\"\"\n         )\n+        \n+    @pytest.mark.parametrize(\"newline\", [\"\\n\", \"\\r\\n\", \"\\r\"])\n+    def test_capfd_preserves_newlines(self, capfd, newline):\n+        print(\"Test line ending\", end=newline)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(newline), f\"Output does not end with {newline!r}\"\n         reprec.assertoutcome(passed=1)\n \n     def test_capfdbinary(self, testdir):\n@@ -526,6 +532,12 @@ class TestCaptureFixture:\n                 assert err == b''\n             \"\"\"\n         )\n+        \n+    @pytest.mark.parametrize(\"newline\", [\"\\n\", \"\\r\\n\", \"\\r\"])\n+    def test_capfd_preserves_newlines(self, capfd, newline):\n+        print(\"Test line ending\", end=newline)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(newline), f\"Output does not end with {newline!r}\"\n         reprec.assertoutcome(passed=1)\n \n     def test_capsysbinary(self, testdir):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..5dbe005 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,7 +51,13 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n-def test_with_statement(caplog):\n+def test_restore_log_level_after_test_case(caplog):\n+    caplog.set_level(logging.WARNING)\n+    # Here we have set the level to WARNING, let's assume the fixture works and restores after the test.\n+\n+def test_restore_handler_level_after_test_case(caplog):\n+    # Verify the level is restored to 0 which is NOTSET for the handler.\n+    assert caplog.handler.level == 0\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n         logger.info(\"handler INFO level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..b502134 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -8,10 +9,43 @@ import pytest\n from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n+from pathlib import Path\n+from _pytest.pytester import Pytester\n from _pytest.pathlib import symlink_or_skip\n from _pytest.pytester import Testdir\n \n-\n+def test_collect_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n+def test_collect_nested_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A nested symlinked directory is collected.\"\"\"\n+    parent_dir = pytester.mkdir(\"parent_dir\", parents=True)\n+    nested_dir = parent_dir.mkdir(\"nested_dir\")\n+    nested_dir.joinpath(\"test_nested.py\").write_text(\"def test_nested(): pass\", \"utf-8\")\n+    \n+    pytester.path.joinpath(\"nested_symlink\").symlink_to(nested_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n+def test_symlink_directory_with_non_py_files(pytester: Pytester) -> None:\n+    \"\"\"Symlinked directory with non-Python files should still collect pytest tests.\"\"\"\n+    dir = pytester.mkdir(\"dir_with_non_py\")\n+    dir.joinpath(\"test_file.py\").write_text(\"def test_file(): pass\", \"utf-8\")\n+    dir.joinpath(\"non_py_file.txt\").write_text(\"This is not a Python file\", \"utf-8\")\n+    \n+    pytester.path.joinpath(\"symlink_non_py\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n+# Existing tests and classes continue from here\n class TestCollector:\n     def test_collect_versus_item(self):\n         from pytest import Collector, Item\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..e8707e4 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -302,7 +302,36 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec.assertoutcome(passed=3)\n \n \n-def test_setup_class(pytester: Pytester) -> None:\n+import pytest\n+from _pytest.pytester import Pytester\n+\n+def test_unittest_setupclass_fixture_naming(pytester: Pytester) -> None:\n+    \"\"\"Test to ensure unittest setUpClass and tearDownClass fixtures have private names.\"\"\"\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+            def test_something(self):\n+                pass\n+            @classmethod\n+            def tearDownClass(cls):\n+                pass\n+        \"\"\"\n+    )\n+    # Run pytest --fixtures without -v to check the fixture name is private\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_MyTestCase*\")\n+    result.stdout.no_fnmatch_line(\"*unittest_tearDownClass_fixture_MyTestCase*\")\n+\n+    # Run pytest --fixtures with -v to check the fixture name is shown\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines(\"*unittest_setUpClass_fixture_MyTestCase*\")\n+    result.stdout.fnmatch_lines(\"*unittest_tearDownClass_fixture_MyTestCase*\")\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..c004d63 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -598,6 +598,32 @@ def test_ridgecv_store_cv_values():\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n \n+def test_ridge_classifier_cv_store_cv_values():\n+    from sklearn.linear_model import RidgeClassifierCV\n+    import numpy as np\n+    from numpy.testing import assert_equal\n+    \n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],[1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    # Initialize RidgeClassifierCV with store_cv_values=True\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    \n+    # Fit the classifier and check cv_values_ with single target\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, n_targets, n_alphas))\n+    \n+    # Multi-target y\n+    y = np.array([[1, 1, 1, -1, -1], [1, -1, 1, -1, 1], [-1, -1, 1, -1, -1]]).T\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, n_targets, n_alphas))\n+\n def test_ridgecv_sample_weight():\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..8d02a5d 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,17 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+def test_int_overflow_fowlkes_mallows_score():\n+    # Test overflow in fowlkes_mallows_score\n+    # Use very large input to ensure no overflow and correct handling\n+    x = np.array([1] * (52632 + 2529) + [2] * (14660 + 793) + [3] * (3271 +\n+                 204) + [4] * (814 + 39) + [5] * (316 + 20))\n+    y = np.array([0] * 52632 + [1] * 2529 + [0] * 14660 + [1] * 793 +\n+                 [0] * 3271 + [1] * 204 + [0] * 814 + [1] * 39 + [0] * 316 +\n+                 [1] * 20)\n+\n+    score = fowlkes_mallows_score(x, y)\n+    assert score <= 1.0  # Fowlkes-Mallows score should not exceed 1\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..1f890d1 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,26 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n-\n-def test_vectorizer_max_features():\n+def test_countvectorizer_get_feature_names_with_custom_vocabulary():\n+    # Define a predefined vocabulary\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    \n+    # Initialize a CountVectorizer with the provided vocabulary\n+    vectorizer = CountVectorizer(vocabulary=vocab)\n+    \n+    # Expect the feature names to match the given vocabulary\n+    feature_names = vectorizer.get_feature_names()\n+    assert_array_equal(feature_names, vocab)\n+    \n+    # Transform a sample corpus to ensure the vectorizer works\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?'\n+    ]\n+    X = vectorizer.transform(corpus)\n+    assert_equal(X.shape[1], len(vocab))\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..f5f3095 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1161,6 +1161,11 @@ def test_search_cv_timing():\n \n     for search in (gs, rs):\n         search.fit(X, y)\n+        # Check the refit_time_ attribute\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n+\n         for key in ['mean_fit_time', 'std_fit_time']:\n             # NOTE The precision of time.time in windows is not high\n             # enough for the fit/score times to be non-zero for trivial X and y\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..ec37224 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,8 +21,8 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n-\n-from sklearn.exceptions import ConvergenceWarning\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.metrics import log_loss\n from sklearn.exceptions import ChangedBehaviorWarning\n from sklearn.linear_model.logistic import (\n     LogisticRegression,\n@@ -491,8 +491,36 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n-\n-def test_multinomial_logistic_regression_string_inputs():\n+def test_logistic_cv_multinomial_proba():\n+    # This test verifies that the LogisticRegressionCV with multi_class='multinomial'\n+    # uses the softmax function correctly for predicting probabilities.\n+    \n+    X, y = make_classification(n_samples=200, n_features=5, n_informative=3,\n+                               n_classes=3, random_state=42)\n+    \n+    # Initialize and fit LogisticRegressionCV with multinomial option\n+    lr_multinomial = LogisticRegressionCV(cv=3, multi_class=\"multinomial\", \n+                                          solver=\"lbfgs\", scoring=\"neg_log_loss\", \n+                                          random_state=42)\n+    lr_multinomial.fit(X, y)\n+    \n+    # Get predicted probabilities with LogisticRegressionCV\n+    proba_cv = lr_multinomial.predict_proba(X)\n+\n+    # Initialize and fit LogisticRegression with a fixed C value\n+    lr_standard = LogisticRegression(multi_class=\"multinomial\", solver=\"lbfgs\", C=lr_multinomial.C_[0], random_state=42)\n+    lr_standard.fit(X, y)\n+    \n+    # Get predicted probabilities with the standard LogisticRegression\n+    proba_standard = lr_standard.predict_proba(X)\n+    \n+    # Check that both probabilistic predictions are almost similar\n+    assert_array_almost_equal(proba_cv, proba_standard, decimal=6)\n+\n+    # Check that the log loss calculated directly matches the score_ from CV\n+    score_direct = -log_loss(y, proba_cv)\n+    score_cv = lr_multinomial.scores_[1].mean()\n+    assert_almost_equal(score_cv, score_direct, decimal=1)\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..1051375 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,7 +154,17 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n-def test_clone_sparse_matrices():\n+from sklearn.base import BaseEstimator, clone\n+class MyEstimator(BaseEstimator):\n+    def __init__(self, empty=None):\n+        self.empty = empty\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    clf = MyEstimator(empty=MyEstimator)\n+    clf2 = clone(clf)\n+\n+    assert clf.empty is clf2.empty\n     sparse_matrix_classes = [\n         getattr(sp, name)\n         for name in dir(sp) if name.endswith('_matrix')]\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..b506a00 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -18,7 +18,8 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..3d73491 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,15 +493,26 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n-\n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n-    # The digits samples are dependent: they are apparently grouped by authors\n-    # although we don't have any information on the groups segment locations\n-    # for this data. We can highlight this fact by computing k-fold cross-\n-    # validation with and without shuffling: we observe that the shuffling case\n-    # wrongly makes the IID assumption and is therefore too optimistic: it\n-    # estimates a much higher accuracy (around 0.93) than that the non\n-    # shuffling variant (around 0.81).\n+def test_stratifiedkfold_shuffle_with_different_random_states():\n+    # Test to ensure shuffling results in different splits with different random states\n+    X = np.arange(40)  # 40 samples\n+    y = [0] * 20 + [1] * 20  # Balance binary target\n+\n+    # Instantiate StratifiedKFold with shuffle=True and different random states\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\n+\n+    # Collect the test indices for each random state\n+    test_indices_1 = [test_idx for _, test_idx in kf1.split(X, y)]\n+    test_indices_2 = [test_idx for _, test_idx in kf2.split(X, y)]\n+\n+    # Assert that the test splits do not match, ensuring that the shuffling is happening\n+    # within each class's samples for different random states\n+    assert test_indices_1 != test_indices_2, \"Shuffled splits should differ with different random states\"\n+\n+    # Verify that the stratification is maintained by checking class balance in splits\n+    for test_idx in test_indices_1 + test_indices_2:\n+        assert sum(y[idx] for idx in test_idx) == len(test_idx) // 2, \"Each test split should maintain class balance\"\n \n     X, y = digits.data[:600], digits.target[:600]\n     model = SVC(C=10, gamma=0.005)\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..e2ff7b8 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -202,8 +202,20 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     Xt = est.fit_transform(X)\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n-\n-@pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n+@pytest.mark.parametrize(\n+    'strategy, expected_5bins_unordered',\n+    [('kmeans', [0, 0, 1, 2, 3, 4])]\n+)\n+def test_kmeans_unsorted_bin_edges(strategy, expected_5bins_unordered):\n+    # Test case to check unsorted bin edges are handled properly for kmeans strategy\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+    \n+    # with 5 bins to recreate the original issue scenario\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    \n+    # Check the output which should not raise any error and bins should be ordered\n+    assert_array_equal(expected_5bins_unordered, Xt.ravel())\n @pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n def test_inverse_transform(strategy, encode):\n     X = np.random.RandomState(0).randn(100, 3)\n",
  "scikit-learn__scikit-learn-13142": "",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..a7ceba8 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -11,6 +12,8 @@ import pytest\n import numpy as np\n \n from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils import check_random_state\n+from sklearn.ensemble import IsolationForest\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..39e838c 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1554,7 +1554,30 @@ def test_LogisticRegressionCV_no_refit(multi_class):\n     assert lrcv.coef_.shape == (n_classes, n_features)\n \n \n-def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_additional_cases(penalty, multi_class):\n+    # Additional test cases for LogisticRegressionCV with refit=False to prevent IndexError\n+    n_classes = 3\n+    n_features = 20\n+    X, y = make_classification(n_samples=300, n_classes=n_classes,\n+                               n_informative=n_classes, n_features=n_features,\n+                               random_state=1)\n+\n+    Cs = np.logspace(-4, 4, 3)\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver='saga',\n+                                l1_ratios=l1_ratios, random_state=0,\n+                                multi_class=multi_class, refit=False)\n+    lrcv.fit(X, y)\n+    assert lrcv.C_.shape == (n_classes,)\n+    if penalty == 'elasticnet':\n+        assert lrcv.l1_ratio_.shape == (n_classes,)\n+    assert lrcv.coef_.shape == (n_classes, n_features)\n     # Make sure the shapes of scores_ and coefs_paths_ attributes are correct\n     # when using elasticnet (added one dimension for l1_ratios)\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..e200171 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -25,9 +25,14 @@ def test_get_deps_info():\n     assert 'matplotlib' in deps_info\n \n \n+def test_joblib_in_show_versions():\n+    deps_info = _get_deps_info()\n+    assert 'joblib' in deps_info\n+\n+\n def test_show_versions_with_blas(capsys):\n     show_versions()\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..b1a05b2 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -78,7 +78,23 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n     assert_array_equal(labels, expected)\n \n \n-def test_extract_xi():\n+def test_float_min_samples_conversion():\n+    # Test to ensure min_samples float conversion works\n+    rng = np.random.RandomState(0)\n+    n_samples_per_cluster = 5\n+    C1 = [0, 0] + rng.randn(n_samples_per_cluster, 2)\n+    C2 = [5, 5] + rng.randn(n_samples_per_cluster, 2)\n+    X = np.vstack((C1, C2))\n+\n+    # Apply float value for min_samples\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08,\n+                   max_eps=10, cluster_method='xi', xi=0.1).fit(X)\n+    \n+    # Simply check labels of found clusters\n+    # Specific labels are less important than confirming logic completes\n+    labels = clust.labels_\n+    print(\"Labels:\", labels)\n+    assert len(labels) == len(X)\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..04f0fcb 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,21 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for the issue related to ZeroDivisionError\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..76a3bd4 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -77,7 +77,33 @@ def lazy_analyze(s):\n     return ['the_ultimate_feature']\n \n \n+from sklearn.feature_extraction.text import strip_accents_unicode\n+\n def test_strip_accents():\n+    # Test strings that might already be in NFKD form\n+    # Test case 1: NFKD forms with combining characters\n+    s1 = chr(241)  # COMBINING N WITH TILDE (\u00f1)\n+    s2 = chr(110) + chr(771)  # N followed by COMBINING TILDE\n+\n+    # Ensure that both forms reduce to 'n'\n+    expected_n = 'n'\n+    assert strip_accents_unicode(s1) == expected_n\n+    assert strip_accents_unicode(s2) == expected_n\n+\n+    # Test other decomposed characters\n+    a = \"o\\u0308\"  # o with diaeresis (two separate code points)\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test standalone combining marks are removed\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # combining grave, acute, circumflex, tilde\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test multiple combining marks on a single character\n+    a = \"o\\u0308\\u0304\"  # o with diaeresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..3c1d03f 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -21,6 +21,10 @@ from sklearn.compose import (\n )\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n+from sklearn.feature_selection import VarianceThreshold\n+import pandas as pd\n+import numpy as np\n+import pytest\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n \n \n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..15f54c2 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,6 +945,32 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n+\n+def test_kmeans_same_inertia_with_different_n_jobs():\n+    # Test with a larger dataset and check inertias\n+    rnd = np.random.RandomState(1)\n+    X = rnd.normal(size=(1000, 50))\n+\n+    inertia_1 = KMeans(n_clusters=5, random_state=0, n_jobs=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=5, random_state=0, n_jobs=4).fit(X).inertia_\n+    assert_almost_equal(inertia_1, inertia_2, decimal=5)\n+\n+def test_kmeans_deterministic_with_fixed_data():\n+    # Tests if changing n_jobs impacts result consistency on a fixed small dataset\n+    X = np.array([[1, 2], [1, 4], [1, 0],\n+                  [10, 2], [10, 4], [10, 0]])\n+    \n+    result_1 = KMeans(n_clusters=2, random_state=42, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=2, random_state=42, n_jobs=3).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n \n def test_minibatch_kmeans_partial_fit_int_data():\n     # Issue GH #14314\n",
  "sphinx-doc__sphinx-10323": "",
  "sphinx-doc__sphinx-10449": "",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..3964c03 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,34 @@\n+\n+def test_Catalog_duplicated_message():\n+    catalog = Catalog()\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 2))\n+    catalog.add('hello', MsgOrigin('/path/to/yetanother', 1))\n+    catalog.add('world', MsgOrigin('/path/to/filename', 1))\n+\n+    assert len(list(catalog)) == 2\n+\n+    msg1, msg2 = list(catalog)\n+    assert msg1.text == 'hello'\n+    assert set(msg1.locations) == {('/path/to/filename', 1),\n+                                   ('/path/to/filename', 2),\n+                                   ('/path/to/yetanother', 1)}\n+    assert msg2.text == 'world'\n+    assert msg2.locations == [('/path/to/filename', 1)]\n+\n+def test_Catalog_duplicated_locations():\n+    catalog = Catalog()\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/file', 0))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/file', 0))\n+    catalog.add('duplicate_test', MsgOrigin('/other/path', 1))\n+\n+    assert len(list(catalog)) == 1\n+\n+    msg = list(catalog)[0]\n+    assert msg.text == 'duplicate_test'\n+    assert set(msg.locations) == {('/path/to/file', 0), ('/other/path', 1)}\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -8,6 +39,7 @@ from subprocess import PIPE, CalledProcessError\n \n import pytest\n \n+from sphinx.builders.gettext import Catalog, MsgOrigin\n from sphinx.util.osutil import cd\n \n \n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..fff09e9 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -85,7 +85,35 @@ def test_get_full_qualified_name():\n     node = nodes.reference()\n     assert domain.get_full_qualified_name(node) is None\n \n-    # simple reference to options\n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util.docutils import new_document\n+from docutils import nodes\n+\n+def test_case_insensitivity_in_glossary(app):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       MySQL description\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       mysql description\\n\")\n+\n+    # make doc environment\n+    env = app.env\n+    env.temp_data['docname'] = 'index'\n+\n+    # Set app.env.docname\n+    doctree = restructuredtext.parse(app, text)\n+    std_domain = env.get_domain('std')\n+    \n+    # Check whether the terms are stored case insensitively\n+    assert ('mysql', 'mysql', 'term', 'index', 'term-mysql', -1) in std_domain.get_objects()\n+    assert ('mysql', 'mysql', 'term', 'index', 'term-MySQL', -1) not in std_domain.get_objects()\n+\n+    # Check for warnings\n+    warnings = warning.getvalue().strip()\n+    assert \"duplicate term description of mysql\" in warnings\n     node = nodes.reference(reftype='option', reftarget='-l')\n     assert domain.get_full_qualified_name(node) is None\n \n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..ed43cb9 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -331,6 +331,8 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n     assert sig.parameters['b'].default == Parameter.empty\n \n+from sphinx.util.inspect import signature_from_str\n+from inspect import Parameter\n \n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n@@ -340,8 +342,15 @@ def test_signature_from_str_positionaly_only_args():\n     assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n     assert sig.parameters['b'].kind == Parameter.POSITIONAL_OR_KEYWORD\n \n-\n-def test_signature_from_str_invalid():\n+def test_signature_from_str_positional_only_with_defaults():\n+    sig = signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n     with pytest.raises(SyntaxError):\n         inspect.signature_from_str('')\n \n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..a6b71e5 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -52,7 +53,25 @@ def test_MockObject():\n     assert isinstance(obj.other_method(), SubClass)\n \n \n-def test_mock():\n+def test_generic_mock():\n+    from typing import TypeVar\n+\n+    T = TypeVar('T')\n+\n+    class GenericClass(mock.SomeClass[T]):\n+        \"\"\"docstring of GenericClass\"\"\"\n+        \n+        def method(self) -> T:\n+            return self.value\n+\n+    instance = GenericClass()\n+    instance.value = 42  # test with an integer\n+    assert GenericClass.__doc__ == \"docstring of GenericClass\"\n+    assert isinstance(instance, GenericClass)\n+    assert instance.method() == 42\n+\n+    instance.value = \"test string\"  # test with a string\n+    assert instance.method() == \"test string\"\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n     assert modname not in sys.modules\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex 464108d..a11c020 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -1261,6 +1261,22 @@ def test_automethod_for_builtin(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_decorated_init_shows_in_docs(app):\n+    # Define the SampleClass to test the decorated __init__\n+    class SampleClass:\n+        @simple_decorator\n+        def __init__(self, param1, param2):\n+            \"\"\"Initialize the SampleClass.\"\"\"\n+            self.param1 = param1\n+            self.param2 = param2\n+\n+    # Simulating the documentation generation process for the decorated __init__\n+    options = {\"members\": None}\n+    actual = do_autodoc(app, 'class', 'tests.test_ext_autodoc.SampleClass', options)\n+    assert any(\".. py:method:: SampleClass.__init__\" in line for line in actual), \\\n+        \"Decorated __init__ should appear in the document output with its docstring.\"\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_automethod_for_decorated(app):\n@@ -1272,6 +1288,22 @@ def test_automethod_for_decorated(app):\n         '',\n     ]\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_decorated_init_shows_in_docs(app):\n+    # Define the SampleClass to test the decorated __init__\n+    class SampleClass:\n+        @simple_decorator\n+        def __init__(self, param1, param2):\n+            \"\"\"Initialize the SampleClass.\"\"\"\n+            self.param1 = param1\n+            self.param2 = param2\n+\n+    # Simulating the documentation generation process for the decorated __init__\n+    options = {\"members\": None}\n+    actual = do_autodoc(app, 'class', 'tests.test_ext_autodoc.SampleClass', options)\n+    assert any(\".. py:method:: SampleClass.__init__\" in line for line in actual), \\\n+        \"Decorated __init__ should appear in the document output with its docstring.\"\n+\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_abstractmethods(app):\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..acb3482 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -8,6 +8,8 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import os\n+\n import json\n import re\n from unittest import mock\n",
  "sphinx-doc__sphinx-8035": "",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..7ccc926 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1286,6 +1286,39 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n-\n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+from babel.messages import pofile\n+from babel.messages.catalog import Catalog\n+from sphinx import locale\n+\n+...\n+\n+def test_custom_locale_translation(make_app, app_params, sphinx_test_tempdir):\n+    \"\"\"Test custom translations via locale/<language>/LC_MESSAGES/sphinx.po are used.\"\"\"\n+    try:\n+        # Clear translators cache\n+        locale.translators.clear()\n+\n+        # Prepare custom message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locale' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')  # Custom translation\n+            catalog.add('Listing %s', 'Whatever %s')  # Custom translation\n+            pofile.write_po(f, catalog)\n+\n+        # Build the app to convert .po to .mo and use translations\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists(), \"MO file was not created\"\n+\n+        # Check that custom translations are used\n+        app.build()\n+        \n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar' in content, \"Custom translation for 'Fig. %s' not found\"\n+        assert 'Whatever' in content, \"Custom translation for 'Listing %s' not found\"\n+\n+    finally:\n+        locale.translators.clear()\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 7842f56..4edee48 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -107,6 +107,10 @@ def test_anchors_ignored(app, status, warning):\n     assert not content\n \n \n+import http.server\n+import threading\n+import pytest\n+\n @pytest.mark.sphinx(\n     'linkcheck', testroot='linkcheck', freshenv=True,\n     confoverrides={'linkcheck_auth': [\n@@ -114,6 +118,54 @@ def test_anchors_ignored(app, status, warning):\n                         (r'.+google\\.com.+', 'authinfo2'),\n                    ]\n                   })\n+def test_raises_for_http_errors(app, status, warning):\n+    # Start a local server that returns a 404 error\n+    server_thread_404 = HttpServerThread(NotFoundHandler, daemon=True)\n+    server_thread_404.start()\n+    try:\n+        app.builder.build_all()\n+    finally:\n+        server_thread_404.terminate()\n+\n+    content_404 = (app.outdir / 'output.txt').read_text()\n+    assert \"404 Client Error: Not Found for url: http://localhost:7777/\" in content_404\n+\n+    # Start a local server that returns a 500 error\n+    server_thread_500 = HttpServerThread(InternalServerErrorHandler, daemon=True)\n+    server_thread_500.start()\n+    try:\n+        app.builder.build_all()\n+    finally:\n+        server_thread_500.terminate()\n+\n+    content_500 = (app.outdir / 'output.txt').read_text()\n+    assert \"500 Server Error: Internal Server Error for url: http://localhost:7777/\" in content_500\n+\n+\n+class HttpServerThread(threading.Thread):\n+    def __init__(self, handler, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.server = http.server.HTTPServer((\"localhost\", 7777), handler)\n+\n+    def run(self):\n+        self.server.serve_forever(poll_interval=0.01)\n+\n+    def terminate(self):\n+        self.server.shutdown()\n+        self.server.server_close()\n+        self.join()\n+\n+\n+class NotFoundHandler(http.server.BaseHTTPRequestHandler):\n+    def do_GET(self):\n+        self.send_error(404, \"Not Found\")\n+\n+\n+class InternalServerErrorHandler(http.server.BaseHTTPRequestHandler):\n+    def do_GET(self):\n+        self.send_error(500, \"Internal Server Error\")\n+\n+\n def test_auth(app, status, warning):\n     mock_req = mock.MagicMock()\n     mock_req.return_value = 'fake-response'\n@@ -159,4 +211,11 @@ def test_linkcheck_request_headers(app, status, warning):\n                 assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n                 assert headers[\"X-Secret\"] == \"open sesami\"\n             else:\n-                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..0316ede 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,40 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import os\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc', \n+                    srcdir='autodoc_typehints_description_and_type_aliases_additional',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_description_and_type_aliases(app):\n+    (app.srcdir / 'types.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    (app.srcdir / 'types.py').write_text('''\n+from __future__ import annotations\n+from typing import Any, Dict\n+\n+JSONObject = Dict[str, Any]\n+\n+def sphinx_doc(data: JSONObject) -> JSONObject:\n+    \"\"\"Does it work.\n+\n+    Args:\n+        data: Does it args.\n+\n+    Returns:\n+        Does it work in return.\n+    \"\"\"\n+    return {}\n+''')\n+    app.build()\n+    context = (app.outdir / 'types.txt').read_text()\n+    assert 'types.sphinx_doc(data)' in context\n+    assert 'Parameters:' in context\n+    assert '* **data** (*types.JSONObject*) --' in context\n+    assert 'Return type:' in context\n+    assert 'types.JSONObject' in context\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..462f4d3 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,24 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum_default_value():\n+    import enum\n \n-def test_getslots():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    # Simulate function signature rendering\n+    def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:\n+        pass\n+\n+    signature = inspect.signature(ugly_enum_func)\n+    param = signature.parameters['e']\n+    default_value_description = inspect.object_description(param.default)\n+\n+    assert default_value_description == \"MyEnum.ValueA\", (\n+        f\"Expected 'MyEnum.ValueA' but got '{default_value_description}'\"\n+    )\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..63f1c58 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -9,7 +9,9 @@\n \"\"\"\n \n import time\n+import sys\n from io import StringIO\n+from unittest import mock\n \n import pytest\n \n@@ -241,7 +243,50 @@ def test_default_filename(tempdir):\n     exec(conffile.read_text(), ns)\n \n \n-def test_extensions(tempdir):\n+def test_exiting_on_existing_confpy(monkeypatch):\n+    \"\"\"Test that pressing Enter when conf.py exists exits the script.\"\"\"\n+\n+    # Mocking to simulate existing conf.py file\n+    def mock_isfile(path):\n+        return True\n+\n+    # Mock input to simulate user press Enter\n+    inputs = iter([''])\n+\n+    def mock_input(prompt):\n+        return next(inputs)\n+\n+    # Patch isfile to always return True and input to simulate user input\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+    monkeypatch.setattr('builtins.input', mock_input)\n+\n+    with mock.patch('sys.exit') as mock_exit:\n+        d = {}\n+        qs.ask_user(d)\n+        mock_exit.assert_called_once_with(1)\n+\n+def test_existing_confpy_path_entered(monkeypatch):\n+    \"\"\"Test that when an invalid path is entered, it prompts again.\"\"\"\n+\n+    # Mocking the existence of conf.py file detection\n+    def mock_isfile(path):\n+        # First time False, second time True\n+        return path.endswith('conf.py')\n+\n+    # Mock input to simulate user providing an existing path then valid path\n+    inputs = iter(['testpath', ''])\n+\n+    def mock_input(prompt):\n+        return next(inputs)\n+\n+    # Patch isfile to redefine behavior\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+    monkeypatch.setattr('builtins.input', mock_input)\n+\n+    with mock.patch('sys.exit') as mock_exit:\n+        d = {}\n+        qs.ask_user(d)\n+        mock_exit.assert_called_once_with(1)\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..39071f6 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single item)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..f0aacab 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,30 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_property_type_cross_reference(app):\n+    text = (\".. py:class:: Point\\n\"\n+            \"\\n\"\n+            \"   .. attribute:: x\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. attribute:: y\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree[1][1][2][0][3], pending_xref, **{\"py:class\": \"Point\"})\n+    assert_node(doctree[1][1][4][0][3], pending_xref, **{\"py:class\": \"Point\"})\n+    assert 'Square.start' in domain.objects\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.start'] == ('index', 'Square.start', 'attribute', False)\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..b6646cb 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,10 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+# Import necessary functions and classes for testing\n+from sympy import sqrt\n+from sympy.geometry import Point, Point2D, Point3D\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n@@ -244,7 +248,30 @@ def test_issue_9214():\n     assert Point3D.are_collinear(p1, p2, p3) is False\n \n \n-def test_transform():\n+def test_issue_11617():\n+    p1 = Point3D(1,0,2)\n+    p2 = Point2D(2,0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_issue_11617_extra():\n+    # This test verifies calculating the distance between two 3D points\n+    p1 = Point3D(1, 2, 3)\n+    p2 = Point3D(4, 5, 6)\n+    assert p1.distance(p2) == sqrt((4-1)**2 + (5-2)**2 + (6-3)**2)\n+\n+    # Test calculating distance between a 2D and a 3D point\n+    p3 = Point2D(1, 2)\n+    p4 = Point3D(4, 6, 8)\n+    assert p3.distance(p4) == sqrt((4-1)**2 + (6-2)**2 + 8**2)\n+\n+    # Test calculating distance between the same 3D point\n+    p5 = Point3D(1, 1, 1)\n+    assert p5.distance(p5) == 0\n+\n+    # Test calculating distance between different dimension points with zeros\n+    p6 = Point2D(0, 0)\n+    p7 = Point3D(0, 0, 10)\n+    assert p6.distance(p7) == sqrt(10**2)\n     p = Point(1, 1)\n     assert p.transform(rotate(pi/2)) == Point(-1, 1)\n     assert p.transform(scale(3, 2)) == Point(3, 2)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..664c903 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,32 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    \n+    # Test the recursive evaluation of the composition\n+    assert f(f(2)).evalf() == Float(16)\n+    assert g(g(2)).evalf() == Float(8)\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+\n+    # Testing nested compositions and more complex cases\n+    assert f(g(f(2))).evalf() == Float(64)\n+    assert g(f(g(2))).evalf() == Float(32)\n+\n+    # Edge case: f & g as identity\n+    identity = implemented_function('identity', lambda x: x)\n+    assert identity(f(g(2))).evalf() == Float(16)\n+    assert f(identity(g(2))).evalf() == Float(16)\n+    assert identity(identity(2)).evalf() == Float(2)\n+\n+    # Ensure that exception handling is still intact for invalid cases\n+    try:\n+        result = implemented_function('bad', lambda x: x / 0)(2).evalf()\n+    except ZeroDivisionError:\n+        result = 'ZeroDivisionError'\n+    assert result == 'ZeroDivisionError'\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..83002ac 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,15 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n-\n-def test_Identity_doit():\n+def test_sum_of_elements_in_identity_matrix():\n+    from sympy import Sum, Identity, symbols\n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+    \n+    # Test that the sum of all elements in the identity matrix is 'n'\n+    # Note: SymPy Identity matrix is 'n x n' with 'n' ones on the diagonal and zeroes elsewhere\n+    total_sum = Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+    assert total_sum == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..3277ee6 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -335,6 +335,17 @@ def test_args():\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n         Permutation(((0, ), [1]))\n     assert Permutation([[1, 2]]) == Permutation([0, 2, 1])\n+    \n+    # Test for non-disjoint cycles - issue verification\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([])  # Should construct the identity (no swaps)\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])  # Correct order application of cycles\n+    assert Permutation([[1, 2], [0, 1]]) == Permutation([1, 0, 2])  # Cycle order matters\n+    assert Permutation([[0, 1, 2], [0, 1]]) == Permutation([1, 0, 2])  # Overlapping cycles\n+\n+    # Additional test cases for more complex scenarios\n+    assert Permutation([[0, 1, 2], [2, 3], [1, 0]]) == Permutation([1, 0, 3, 2])  # Mix of cycles\n+    assert Permutation([[0, 1], [1, 0], [1, 2]]) == Permutation([0, 2, 1])  # Includes an identity transformation\n+    assert Permutation([[0, 1], [2, 3], [1, 2], [0, 3]]) == Permutation([3, 2, 1, 0])  # Full cycle usage\n     assert Permutation([[1], [4, 2]]) == Permutation([0, 1, 4, 3, 2])\n     assert Permutation([[1], [4, 2]], size=1) == Permutation([0, 1, 4, 3, 2])\n     assert Permutation(\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..03a327d 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -489,8 +489,26 @@ def test_errors():\n     raises(ShapeError,\n         lambda: SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))\n \n-\n-def test_len():\n+def test_matrix_hstack_vstack():\n+    # Test hstack on 0 x n sparse matrices\n+    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices) == Matrix(0, 6, [])\n+    \n+    # Test vstack on n x 0 sparse matrices\n+    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices) == Matrix(6, 0, [])\n+\n+    # Additional test cases for hstack\n+    m1 = SparseMatrix.zeros(1, 0)\n+    m2 = SparseMatrix.zeros(1, 1)\n+    m3 = SparseMatrix.zeros(1, 2)\n+    m4 = SparseMatrix.zeros(1, 3)\n+    assert SparseMatrix.hstack(m1, m2, m3, m4).shape == (1, 6)\n+\n+    # Additional test cases for vstack\n+    m1 = SparseMatrix.zeros(0, 3)\n+    m2 = SparseMatrix.zeros(0, 3)\n+    assert SparseMatrix.vstack(m1, m2).shape == (0, 3)\n     assert not SparseMatrix()\n     assert SparseMatrix() == SparseMatrix([])\n     assert SparseMatrix() == SparseMatrix([[]])\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..2018255 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -162,6 +162,15 @@ def test_evalf_near_integers():\n \n def test_evalf_ramanujan():\n     assert NS(exp(pi*sqrt(163)) - 640320**3 - 744, 10) == '-7.499274028e-13'\n+    # Test for issue 13076\n+    # Ensure different orderings of Max in Mul work without error in evalf\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    # Additional test cases for various orders and combinations\n+    assert NS(Mul(x, Max(y, 0), Max(0, 1), evaluate=False).evalf()) == 'x*Max(y, 0)*Max(0, 1)'\n+    assert NS(Mul(Max(x, 0), Max(y, 1), evaluate=False).evalf()) == 'Max(x, 0)*Max(y, 1)'\n+    assert NS(Mul(x, y, Max(x, y), evaluate=False).evalf()) == 'x*y*Max(x, y)'\n+    assert NS(Mul(Max(x, y), x, y, evaluate=False).evalf()) == 'Max(x, y)*x*y'\n     # A related identity\n     A = 262537412640768744*exp(-pi*sqrt(163))\n     B = 196884*exp(-2*pi*sqrt(163))\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..7b7d6ff 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,8 +272,14 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n-\n-def test_coth_series():\n+def test_coth_subs():\n+    x = Symbol('x')\n+    # Testing the substitutions that previously caused an error\n+    test_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for val in test_values:\n+        result = coth(log(tan(x))).subs(x, val)\n+        assert result is not None  # Ensure it returns a value without error\n+        print(f\"coth(log(tan({val}))) substitution result: {result}\")\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..4d7fb7d 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -165,7 +165,20 @@ def test_difference():\n     assert -1 in S.Reals - S.Naturals\n \n \n+from sympy import Symbol, Complement, FiniteSet, Interval, Union, S\n+\n+x, y = Symbol('x'), Symbol('y')\n+\n def test_Complement():\n+    # issue 12712 test case\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == \\\n+        Complement(FiniteSet(x, y), Interval(-10, 10))\n+    \n+    # Additional cases for mixed input\n+    assert Complement(FiniteSet(x, y, 2, 3.5), Interval(-10, 10)) == \\\n+        Complement(FiniteSet(x, y), Interval(-10, 10))\n+    assert Complement(FiniteSet(x, -2, 10), Interval(-10, 10)) == \\\n+        FiniteSet(x)\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n     assert Complement(Union(Interval(0, 2),\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..93240a9 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -187,7 +187,54 @@ def test_col_join():\n                    [0, 0, 1],\n                    [7, 7, 7]])\n \n-def test_row_insert():\n+def test_issue_13643():\n+    from sympy import Matrix, eye, ones\n+\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n+def test_additional_col_insert_cases():\n+    from sympy import Matrix, eye, ones, zeros\n+\n+    # Test inserting at the start\n+    M = eye(3)\n+    V = ones(3, 1)\n+    result = M.col_insert(0, V)\n+    expected = Matrix([\n+        [1, 1, 0, 0],\n+        [1, 0, 1, 0],\n+        [1, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n+    # Test inserting at the end\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 1],\n+        [0, 1, 0, 1],\n+        [0, 0, 1, 1]\n+    ])\n+    assert result == expected\n+\n+    # Test inserting multiple columns of zeros\n+    V = zeros(3, 2)\n+    result = M.col_insert(2, V)\n+    expected = Matrix([\n+        [1, 0, 0, 0, 0, 0],\n+        [0, 1, 0, 0, 0, 0],\n+        [0, 0, 1, 0, 0, 0]\n+    ])\n+    assert result == expected\n     r4 = Matrix([[4, 4, 4]])\n     for i in range(-4, 5):\n         l = [1, 0, 0]\n",
  "sympy__sympy-13757": "",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..aa28d05 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,7 +54,28 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n-\n+def test_latex_arbitrary_mul_symbol():\n+    from sympy.abc import x, y\n+    from sympy import S, Integral, latex\n+\n+    # Original test patch cases\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+\n+    # Additional tests for arbitrary mul_symbol usage\n+    assert latex(3*x**2*y, mul_symbol=None) == \"3 x^{2} y\"\n+    assert latex(3*x**2*y, mul_symbol='ldot') == r\"3 \\,. \\,x^{2} \\,. \\,y\"\n+    assert latex(3*x**2*y, mul_symbol='times') == r\"3 \\times x^{2} \\times y\"\n+\n+    # Test for empty string as mul_symbol\n+    assert latex(3*x**2*y, mul_symbol='') == \"3x^{2}y\"\n+  \n+    # Test for custom string as mul_symbol\n+    assert latex(3*x**2*y, mul_symbol='*') == \"3 * x^{2} * y\"\n+\n+    # Test with a different expression\n+    assert latex(Integral(2*x**2*y, x), mul_symbol='\\\\,') == r\"\\int 2 x^{2} y\\, dx\"\n+    \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n     assert latex(x**2) == \"x^{2}\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..7232e4e 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -313,8 +313,20 @@ def test_as_mutable():\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n \n+from sympy import symbols, Matrix\n+from sympy.abc import a\n \n def test_determinant():\n+    # Issue #13835 test cases\n+    f = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)]).det()\n+    \n+    # Testing matrix determinant with symbolic entries\n+    assert f(1) == 0\n+    assert f(2) == -a\n+    assert f(3).simplify() == 0  # Based on manual simplification of the expression.\n+    assert f(4) == 0\n+    assert f(5) == 0\n+    assert f(6) == 0\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert (\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..3d1979f 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -175,8 +175,37 @@ def test_ContinuousRV():\n     assert variance(X) == variance(Y)\n     assert P(X > 0) == P(Y > 0)\n \n+from sympy import Piecewise, exp, sqrt, gamma, hyper, S, Rational, lowergamma, uppergamma, pi, erf, erfc\n+from sympy.stats import Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse, Kumaraswamy, Laplace, Logistic, Nakagami, StudentT, UniformSum\n+from sympy.stats import density, cdf\n \n-def test_arcsin():\n+def test_long_precomputed_cdf():\n+    x = symbols(\"x\", real=True, finite=True)\n+    a, b, m, s = symbols('a b m s', real=True, finite=True, positive=True)\n+    mu, k, l, p = symbols('mu k l p', real=True, positive=True)\n+    nu, omega = symbols('nu omega', positive=True)\n+\n+    dist_list = [\n+        (Arcsin(\"x\", a, b), Piecewise((0, a > x), (2*asin(sqrt((-a + x)/(-a + b)))/pi, b >= x), (1, True))),\n+        (Dagum(\"x\", p, a, b), Piecewise(((1 + (x/b)**(-a))**(-p), x >= 0), (0, True))),\n+        (Erlang(\"x\", k, l), Piecewise((lowergamma(k, l*x)/gamma(k), x > 0), (0, True))),\n+        (Frechet(\"x\", a, s, m), Piecewise((exp(-((-m + x)/s)**(-a)), m <= x), (0, True))),\n+        (GammaInverse(\"x\", a, b), Piecewise((uppergamma(a, b/x)/gamma(a), x > 0), (0, True))),\n+        (Kumaraswamy(\"x\", a, b), Piecewise((0, x < 0), (-(-x**a + 1)**b + 1, x <= 1), (1, True))),\n+        (Laplace(\"x\", mu, b), Piecewise((exp((-mu + x)/b)/2, mu > x), (-exp((mu - x)/b)/2 + 1, True))),\n+        (Logistic(\"x\", mu, s), 1/(exp((mu - x)/s) + 1)),\n+        (Nakagami(\"x\", mu, omega), Piecewise((lowergamma(mu, mu*x**2/omega)/gamma(mu), x > 0), (0, True))),\n+        (StudentT(\"x\", nu), 1/2 + x*gamma(nu/2 + 1/2)*hyper((1/2, nu/2 + 1/2), (3/2,), -x**2/nu)/(sqrt(pi)*sqrt(nu)*gamma(nu/2))),\n+    ]\n+    \n+    for dist, cdf_expr in dist_list:\n+        assert cdf(dist)(x) == cdf_expr\n+\n+    assert cdf(UniformSum(\"x\", n))(x) == Piecewise(\n+        (0, x < 0),\n+        (n*x - x**2/2, And(0 <= x, x < 1)),\n+        (1, True),\n+    )\n     a = Symbol(\"a\", real=True)\n     b = Symbol(\"b\", real=True)\n \n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..61e48db 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -48,6 +48,11 @@ def test_tensor_product_commutator():\n def test_tensor_product_simp():\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n+def test_tensor_product_powers():\n+    assert tensor_product_simp(TP(1, 1)*TP(1, 1)) == TP(1, 1)\n+    assert tensor_product_simp(TP(1, Pauli(3))*TP(1, Pauli(3))) == TP(1, 1)\n+    assert (TP(1, 1)*TP(1, 1)).expand(tensorproduct=True) == TP(1, 1)\n+    assert (TP(1, Pauli(3))*TP(1, Pauli(3))).expand(tensorproduct=True) == TP(1, 1)\n \n def test_issue_5923():\n     # most of the issue regarding sympification of args has been handled\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 29c7fd2..e506874 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -440,7 +440,13 @@ def test_sqrt():\n     assert str(1/x**(1/2)) == \"x**(-0.5)\"\n \n \n-def test_Rational():\n+from sympy import Eq, Symbol, S, Rational, Limit\n+\n+def test_issue_examples():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    assert sstr(Eq(x, S(1)/2), sympy_integers=True) == 'Eq(x, S(1)/2)', 'Eq should respect sympy_integers'\n+    assert sstr(Limit(x, x, S(1)/2), sympy_integers=True) == 'Limit(x, x, S(1)/2)', 'Limit should respect sympy_integers'\n     n1 = Rational(1, 4)\n     n2 = Rational(1, 3)\n     n3 = Rational(2, 4)\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..a70826c 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,6 +4,16 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+from sympy import symbols\n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n+def test_vector_addition_with_zero():\n+    N = ReferenceFrame('N')\n+    assert sum([N.x, (0 * N.x)]) == N.x\n+    assert sum([(0 * N.x), N.y]) == N.y\n+    assert sum([(0 * N.x), (0 * N.y), N.z]) == N.z\n+    assert sum([N.x, N.y, (0 * N.z)]) == N.x + N.y\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..14adb49 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -152,6 +153,21 @@ def test_number_precision():\n     prec = 1e-49  # mpmath precision is around 50 decimal places\n     assert -prec < f(0) - sin02 < prec\n \n+    # Test case for issue: lambdify(modules='mpmath') doesn't wrap rationals\n+    eqn = Eq(rf(18, x), 77 + S(1)/3)\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source_code = inspect.getsource(f)\n+    \n+    # Ensure the rational is converted to mpmath.mpf\n+    assert 'mpmath.mpf(232)/mpmath.mpf(3)' in source_code, \"Rational not wrapped correctly\"\n+    \n+    # Further test nsolve with the wrapped rational\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    rf_val = rf(18, x0).evalf(64)\n+    expected_val = 77 + S(1)/3\n+    # Verify if the solution gives the correct high precision evaluation\n+    assert abs(rf_val - expected_val.evalf(64)) < 1e-60, \"nsolve produced reduced precision due to rational\"\n+\n @conserve_mpmath_dps\n def test_mpmath_precision():\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..e8cd3c4 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -72,6 +73,12 @@ def test_ndim_array_initiation():\n     raises(ValueError, lambda: vector_with_long_shape[long(5)])\n \n     from sympy.abc import x\n+    \n+    from sympy import Array\n+    scalar_array = Array(3)\n+    assert len(scalar_array) == 1\n+    assert list(scalar_array) == [3]\n+\n     rank_zero_array = ImmutableDenseNDimArray(x)\n     assert len(rank_zero_array) == 0\n     assert rank_zero_array.shape == ()\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..71ec429 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -22,6 +23,20 @@ def test_Rational():\n     assert mcode(Rational(-3, -7)) == \"3/7\"\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n+    \n+def test_Max():\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"  # SymPy Max should preserve order\n+    assert mcode(Max(x, y)) == \"Max[x, y]\"\n+    assert mcode(Max(Max(x, 2), y)) == \"Max[Max[x, 2], y]\"\n+    assert mcode(Max(x, y, z)) == \"Max[x, y, z]\"\n+    \n+def test_Min():\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(2, x)) == \"Min[2, x]\"\n+    assert mcode(Min(x, y)) == \"Min[x, y]\"\n+    assert mcode(Min(Min(x, 2), y)) == \"Min[Min[x, 2], y]\"\n+    assert mcode(Min(x, y, z)) == \"Min[x, y, z]\"\n \n \n def test_Function():\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..0ddcc14 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,51 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_rotation_iss1593():\n+    \"\"\"\n+    There was a sign mistake in the definition\n+    of the rotation matrix. This tests that particular sign mistake.\n+    See issue 1593 for reference.\n+    See Wikipedia\n+    https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Quaternion-derived_rotation_matrix\n+    for the correct definition.\n+    \"\"\"\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected_matrix = Matrix([\n+        [1,      0,      0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix\n+\n+def test_quaternion_additional_rotation_cases():\n+    \"\"\"\n+    Tests additional cases for Quaternion rotation matrices \n+    to ensure correct implementation.\n+    \"\"\"\n+    q = Quaternion(1, 0, 0, 0)\n+    assert q.to_rotation_matrix() == Matrix([\n+        [1, 0, 0],\n+        [0, 1, 0],\n+        [0, 0, 1]\n+    ])\n+\n+    q = Quaternion(0, 1, 0, 0)\n+    expected_matrix = Matrix([\n+        [1, 0,  0],\n+        [0, -1, 0],\n+        [0, 0, -1]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix\n+\n+    q = Quaternion(cos(pi/4), sin(pi/4), 0, 0)\n+    expected_matrix = Matrix([\n+        [1,  0,     0],\n+        [0,  0,    -1],\n+        [0,  1,     0]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +164,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..188a26a 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1508,6 +1508,8 @@ def test_issue_5919():\n     assert (x/(y*(1 + y))).expand() == x/(y**2 + y)\n \n \n+from sympy import symbols, Symbol, Mod, S, Float, comp, sqrt, factorial, Pow\n+\n def test_Mod():\n     assert Mod(x, 1).func is Mod\n     assert pi % pi == S.Zero\n@@ -1621,7 +1623,20 @@ def test_Mod():\n     assert (2*x + 2) % (x + 1) == 0\n     assert (x*(x + 1)) % (x + 1) == (x + 1)*Mod(x, 1)\n     assert Mod(5.0*x, 0.1*y) == 0.1*Mod(50*x, y)\n-    i = Symbol('i', integer=True)\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # Additional tests\n+    assert Mod(9*i, 3) == 0  # 9*i is divisible by 3\n+    assert Mod(6*i + 10, 5) == Mod(i, 5)  # expression with added constant\n+    assert Mod(3*i*j, 2) == Mod(i*j, 2)  # for two variables\n+    assert Mod(3*i + 2*j, 6) == Mod(i + 2*j, 6)  # when modulus divides one coefficient\n+\n+    # Verify against negative numbers\n+    assert Mod(-3*i, 2) == Mod(-i, 2)\n+    assert Mod(3*(-i), 2) == Mod(i, 2)\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..be01298 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,9 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    # lists\n+    # Testing with no arguments\n+    assert Min() == S.Infinity\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -146,6 +148,9 @@ def test_Max():\n     n_ = Symbol('n_', negative=True)\n     nn = Symbol('nn', nonnegative=True)\n     nn_ = Symbol('nn_', nonnegative=True)\n+    assert Min() == S.Infinity\n+    assert Max() == S.NegativeInfinity\n+    \n     p = Symbol('p', positive=True)\n     p_ = Symbol('p_', positive=True)\n     np = Symbol('np', nonpositive=True)\n@@ -156,11 +161,14 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    # Testing with no arguments\n+    assert Max() == S.NegativeInfinity\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n     assert Max(x, Min(y, oo)) == Max(x, y)\n+    assert Max(x, oo) == oo\n+    assert Max(oo, x) == oo\n     assert Max(n, -oo, n_, p, 2) == Max(p, 2)\n     assert Max(n, -oo, n_, p) == p\n     assert Max(2, x, p, n, -oo, S.NegativeInfinity, n_, p, 2) == Max(2, x, p)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..0e1593c 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1982,7 +1982,34 @@ def test_issue_8247_8354():\n     assert z.is_positive is False  # it's 0 (and a single _mexpand isn't enough)\n \n \n+from sympy import I, simplify\n+\n def test_Add_is_zero():\n+    # Issue 15873 - Test case\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None  # The expression's zero status is indeterminate without simplification.\n+\n+    # Additional related test cases to cover more scenarios\n+    # 1. Simple complex addition which should be zero\n+    e1 = I - 1 - I + 1\n+    assert e1.is_zero is True\n+\n+    # 2. Expression with real part only\n+    e2 = 2 - 2\n+    assert e2.is_zero is True\n+\n+    # 3. Expression simplifiable to zero\n+    e3 = simplify(-2*I + (1 + I)**2)\n+    assert e3.is_zero is True\n+\n+    # 4. Indeterminate expression due to symbolic terms\n+    x, y = symbols('x y')\n+    e4 = x**2 - x**2 + I*y - I*y\n+    assert e4.is_zero is True  # This should be zero.\n+\n+    # Check with Add (in case is_zero involves a function with Add)\n+    e5 = Add(e3, e1, -e1)\n+    assert e5.is_zero is True\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n@@ -1993,4 +2020,4 @@ def test_issue_14392():\n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..26ae8f3 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.printing.pycode import PythonCodePrinter\n \n x, y, z = symbols('x y z')\n \n@@ -36,7 +38,14 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n \n-def test_MpmathPrinter():\n+def test_indexed_support_in_PythonCodePrinter():\n+    from sympy.tensor import IndexedBase\n+    prntr = PythonCodePrinter()\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    q = IndexedBase(\"q\")\n+    assert prntr.doprint(q[x, y, z]) == 'q[x, y, z]'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n     assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n",
  "sympy__sympy-16792": "",
  "sympy__sympy-16886": "",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..b79d3e0 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -798,7 +798,20 @@ def test_nc_simplify():\n     _check(a*b*(c*d)**2, a*b*(c*d)**2)\n     expr = b**-1*(a**-1*b**-1 - a**-1*c*b**-1)**-1*a**-1\n     assert nc_simplify(expr) == (1-c)**-1\n-    # commutative expressions should be returned without an error\n+from sympy import Symbol, I, cos, simplify\n+\n+def test_issue_17137():\n+    assert simplify(cos(Symbol('x'))**I) == cos(Symbol('x'))**I\n+    assert simplify(cos(Symbol('x'))**(2 + 3*I)) == cos(Symbol('x'))**(2 + 3*I)\n+\n+def test_cos_I_without_error():\n+    x = Symbol('x')\n+    # Testing with complex exponentials\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(1 + I)) == cos(x)**(1 + I)\n+    # Additional cases with zero imaginary part\n+    assert simplify(cos(x)**(1 + 0*I)) == cos(x)**1\n+    assert simplify(cos(x)**0) == 1\n     assert nc_simplify(2*x**2) == 2*x**2\n \n def test_issue_15965():\n@@ -814,4 +827,4 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..ca5ee68 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n@@ -175,8 +178,21 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n-\n-def test_issue_5653():\n+def test_issue_12420():\n+    # Test case from the issue to ensure no IndexError and expression returns unchanged\n+    issue_expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert sqrtdenest(issue_expr) == issue_expr\n+    \n+    # Ensure _sqrt_match behaves as expected for specific inputs\n+    assert _sqrt_match(4 + I) == [], \"Expected an empty list from _sqrt_match\"\n+\n+    # Check for related expression that should return unchanged\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e, f\"Expression should return unchanged: {e}\"\n+\n+    # Verify unchanged behavior for real-only expression\n+    real_expr = sqrt(5 + sqrt(3)) + sqrt(2)\n+    assert unchanged(sqrtdenest, real_expr), \"Expected the real expression to remain unchanged\"\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..1fb2b4e 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -95,6 +96,13 @@ def test_point():\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n+    # Test point multiplication with sympified number in various orders\n+    p0 = Point(0, 0)\n+    p1 = Point(1, 1)\n+\n+    assert p0 + p1 * sympify(2.0) == Point(2, 2), \"Multiplying point by sympified number (right-multiplication) failed\"\n+    assert p0 + sympify(2.0) * p1 == Point(2, 2), \"Multiplying sympified number by point (left-multiplication) failed\"\n+\n     # Point differences should be simplified\n     assert Point(x*(x - 1), y) - Point(x**2 - x, y + 1) == Point(0, -1)\n \n",
  "sympy__sympy-18189": "",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..a12c3b5 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -672,6 +672,19 @@ def test_latex_derivatives():\n         r'\\frac{d^{\\max\\left(n_{1}, n_{2}\\right)}}{d x^{\\max\\left(n_{1}, n_{2}\\right)}} f{\\left(x \\right)}'\n \n \n+def test_latex_subs_parenthesis():\n+    from sympy import Subs\n+    from sympy.abc import x, y\n+    # Test case from the issue statement\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # Additional test with multiplication in subs\n+    assert latex(3*Subs(2*x+y, (x,), (1,))) == r'3 \\left. \\left(2 x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # Test with nested substitutions\n+    assert latex(3*Subs(Subs(-x+y, (x,), (2,)), (y,), (1,))) == r'3 \\left. \\left(- 2 + y\\right) \\right|_{\\substack{ y=1 }} \\left|_{\\substack{ x=2 }}\\right.'\n+\n+\n def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..4c05fc0 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,6 +1,7 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n-    EmptySet, Union, Contains)\n-from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n+    EmptySet, Union, Contains, imageset)\n+from sympy import (Symbol, Eq, S, Abs, sin, asin, pi, Interval,\n     And, Mod, oo, Function)\n from sympy.testing.pytest import raises, XFAIL, warns_deprecated_sympy\n \n@@ -129,8 +130,24 @@ def test_subs_CondSet():\n     assert ConditionSet(f(x), f(x) < 1, {w, z}\n         ).subs(f(x), y) == ConditionSet(y, y < 1, {w, z})\n \n+def test_condition_set_with_imageset_subs():\n+    # Test case derived from the issue\n+    x, y = symbols('x y')\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+\n+    assert ConditionSet(x, Contains(y, Interval(-1,1)), img1).subs(y, S.One/3).dummy_eq(img2)\n+\n+    # Additional Test for verification\n+    assert ConditionSet(x, Contains(y, Interval(-1, 1)), img1).subs(y, S.One/2) == \\\n+           ConditionSet(x, Contains(S.One/2, Interval(-1, 1)), img1.subs(y, S.One/2))\n+\n+    # Test when the base set is transformed correctly using xreplace\n+    assert ConditionSet(x, Contains(y, Interval(-1, 1)), img1).xreplace({y: S.One/3}) == img2\n \n-def test_subs_CondSet_tebr():\n+    # Ensure subs with simultaneous=True works as intended\n+    assert ConditionSet(x, Contains(y, Interval(-1, 1)), img1).subs({y: S.One/3}, simultaneous=True) == img2\n     with warns_deprecated_sympy():\n         assert ConditionSet((x, y), {x + 1, x + y}, S.Reals) == \\\n             ConditionSet((x, y), Eq(x + 1, 0) & Eq(x + y, 0), S.Reals)\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..c34cf4f 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -514,7 +514,51 @@ def test_kernS():\n     assert one != 1 and one.expand() == 1\n \n \n-def test_issue_6540_6552():\n+def test_issue_kerning_unboundlocalerror():\n+    from sympy.abc import x, y  # Import necessary symbols\n+    from sympy import sympify, Interval, Add, Mul, Symbol, exp, sin\n+\n+    # Check if the 'kern' issue is resolved (referenced before assignment)\n+    try:\n+        expr = kernS(\"(2*x)/(x-1)\")\n+        assert expr == sympify(\"2*x/(x-1)\")\n+    except NameError as e:\n+        assert False, f\"Expected no error, but got {str(e)}\"\n+\n+    # Additional cases to ensure comprehensive coverage:\n+    # Test balanced parentheses\n+    assert kernS('(x + 2)*(x - 3)') == (x + 2)*(x - 3)\n+\n+    # Test nested parentheses\n+    assert kernS('((x + y)*2)') == (x + y)*2\n+\n+    # Test an expression with a minus sign\n+    assert kernS('-(x - 1)') == -(x - 1)\n+\n+    # Test an expression with power\n+    assert kernS('(x**2 + 2)*(y**2 - 3)') == (x**2 + 2)*(y**2 - 3)\n+\n+    # Test with a multiplication in the string\n+    assert kernS('2*(x + y)') == 2*(x + y)\n+\n+    # Test an expression with intervals\n+    assert (kernS('Interval(-1,-2 - 4*(-3))')\n+            == Interval(-1, Add(-2, Mul(12, 1, evaluate=False), evaluate=False)))\n+\n+    # Test with different symbols\n+    assert kernS('E**-(x)') == exp(-x)\n+\n+    # Test with nested lists and tuples\n+    e = 2*(x + y)*y\n+    assert kernS(['2*(x + y)*y', ('2*(x + y)*y',)]) == [e, (e,)]\n+\n+    # Validate the handling of symbols that replace spacing\n+    assert kernS('_kern') == Symbol('_kern')\n+\n+    # Test complex trigonometric expression\n+    assert kernS('-(2*sin(x)**2 + 2*sin(x)*cos(x))*y/2') == -y*(2*sin(x)**2 + 2*sin(x)*cos(x))/2\n+  \n+    print(\"All test cases for kernS verified successfully.\")\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..682fa01 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,5 +1,7 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n+from sympy.physics.quantum.operator import IdentityOperator\n from sympy.physics.quantum.qexpr import QExpr\n from sympy.physics.quantum.dagger import Dagger\n from sympy.physics.quantum.hilbert import HilbertSpace\n@@ -84,7 +86,16 @@ def test_unitary():\n     assert Dagger(U).is_commutative is False\n \n \n-def test_identity():\n+def test_daggered_operator_mul_identity():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    D = Dagger(O)\n+\n+    # Ensure that multiplying dagger of operator with identity returns the dagger\n+    assert D * I == D\n+\n+    # Also ensure that the identity times the dagger returns the dagger\n+    assert I * D == D\n     I = IdentityOperator()\n     O = Operator('O')\n     x = Symbol(\"x\")\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..50a2066 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -853,8 +853,18 @@ def test_generator_product():\n         w = g*w\n     assert w == p\n \n+from sympy.combinatorics import DihedralGroup\n \n def test_sylow_subgroup():\n+    # Test from the reported issue with DihedralGroup(18)\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 18 // 3, \"Expected order of Sylow(2) subgroup for DihedralGroup(18) is 6\"\n+\n+    # Test from the reported issue with DihedralGroup(50)\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 50 // 25, \"Expected order of Sylow(2) subgroup for DihedralGroup(50) is 2\"\n     P = PermutationGroup(Permutation(1, 5)(2, 4), Permutation(0, 1, 2, 3, 4, 5))\n     S = P.sylow_subgroup(2)\n     assert S.order() == 4\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..21215a7 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,16 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n+from sympy.utilities.iterables import partitions\n+from sympy.core.singleton import S\n \n def test_partitions():\n+    # Test to ensure partitions are independent objects\n+    results = list(partitions(6, k=2))\n+    for res in results:\n+        res[2] = 99  # Modifying one should not affect others\n+    assert [p.copy() for p in partitions(6, k=2)] == [\n+        {2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..695fce2 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,14 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..9ffd615 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -6,7 +7,8 @@ from sympy import (\n     AccumBounds, Matrix, zeros, ZeroMatrix)\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n-from sympy.abc import a, x, y, z, t\n+from sympy.functions.elementary.trigonometric import sinh\n+from sympy.functions.elementary.piecewise import Piecewise\n \n def test_subs():\n     n3 = Rational(3)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..1aa83ab 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -15,8 +15,25 @@ from sympy.abc import a, b, c, x, y, z\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n \n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n \n def test_monomials():\n+    # Test for issue with min_degrees argument in itermonomials\n+    x1, x2, x3 = symbols('x1, x2, x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3, x1*x2**2, x1*x3**2, x2*x1**2,\n+        x2**2*x3, x3**2*x1, x3*x1**2, x3*x2**2, x3**2*x2,\n+        x1*x2*x3, x2*x3**2, x1*x3*x2, x1*x2*x3\n+    }\n+    assert set(itermonomials([x1, x2, x3], 3, 2)) == {\n+        x1**3, x2**3, x3**3, x1**2, x1**2*x2, x1**2*x3,\n+        x1*x2, x1*x2**2, x1*x2*x3, x1*x3**2, x2**2, x2*x3,\n+        x2**2*x1, x2**2*x3, x2*x3**2, x2*x1, x2*x1**2, \n+        x3**2, x3*x1, x3*x1**2, x3*x2, x3*x2**2, x3*x1*x2\n+    }\n+\n+    # Original test cases\n \n     # total_degree tests\n     assert set(itermonomials([], 0)) == {S.One}\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..e75f101 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # Test argument invariance\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..fec10af 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -10,6 +11,9 @@ from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n+from sympy.core.parameters import evaluate\n+from sympy.core.numbers import Integer\n+from sympy import S\n \n \n def test_point():\n@@ -440,7 +444,29 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_imaginary_coordinates_with_evaluate_false():\n+    # This tests the issue where using evaluate(False) raised an error\n+    with evaluate(False):\n+        try:\n+            p = Point2D(Integer(1), Integer(2))\n+        except ValueError as e:\n+            assert False, f\"Unexpected exception raised: {e}\"\n+\n+def test_point_creation_without_evaluate():\n+    # Test to ensure Point2D can be created without evaluate=False\n+    p = Point2D(1, 2)\n+    assert p == Point2D(1, 2)\n+\n+def test_point_creation_with_evaluate():\n+    # Ensure Point2D creation with evaluate=True does not change behavior\n+    with evaluate(True):\n+        p = Point2D(1, 2)\n+    assert p == Point2D(1, 2)\n+\n+def test_point_creation_imaginary_coordinates():\n+    # Test raises error with imaginary coordinates\n+    with raises(ValueError, match='Imaginary coordinates are not permitted.'):\n+        Point2D(1, 2 * S.ImaginaryUnit)\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22914": "",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..8ae75ff 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,27 @@ def test_scipy_polys():\n \n \n \n+def test_tuple_one_element():\n+    # This test checks that lambdify outputs code that correctly represents a single-element tuple as a tuple.\n+    f_single = lambdify([], (1,))\n+    src = inspect.getsource(f_single)\n+    assert src == 'def _lambdifygenerated():\\n    return (1,)\\n'\n+    \n+    # and verifies execution correctness\n+    assert f_single() == (1,)\n+\n+def test_tuple_multiple_elements():\n+    # This test confirms that tuples with multiple elements are handled correctly.\n+    f_multi = lambdify([], (1, 2))\n+    src = inspect.getsource(f_multi)\n+    assert src == 'def _lambdifygenerated():\\n    return (1, 2)\\n'\n+    \n+    # and verifies execution correctness\n+    assert f_multi() == (1, 2)\n+\n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..241f6ca 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,13 +1,38 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n-from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n+from sympy.core.symbol import uniquely_named_symbol, _symbol, Str, symbols\n+from sympy.core.function import Function, UndefinedFunction\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n-\n-def test_Str():\n+def test_symbols_with_extra_parentheses_function_creation():\n+    # This test checks the issue where `symbols` with an extra layer of parentheses \n+    # creates objects of class `Symbol` instead of `Function`.\n+    \n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) == UndefinedFunction\n+    assert type(u[1]) == UndefinedFunction\n+\n+    # Additional test: Ensure correct symbol creation when no class is specified\n+    a, b = symbols(('a:2', 'b:2'))\n+    assert type(a[0]) == Symbol\n+    assert type(b[1]) == Symbol\n+    \n+    # Test with single group of symbols\n+    x, y = symbols(('x:2',), cls=Function)\n+    assert type(x[0]) == UndefinedFunction\n+    assert type(y[1]).__name__ == 'FunctionConstructor'\n+    \n+    # Test with mixed class types for symbols\n+    c, d = symbols(('c:2',), cls=Symbol)\n+    assert type(c[0]) == Symbol\n+    assert type(d[1]) == Symbol\n+    \n+    e = symbols('e', cls=Function)\n+    assert type(e) == UndefinedFunction\n     a1 = Str('a')\n     a2 = Str('a')\n     b = Str('b')\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..878cb6d 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -235,12 +235,66 @@ def test_kahane_simplify1():\n     r = kahane_simplify(t)\n     assert r.equals(16*eye(4))\n     t = (G(mu)*G(nu)*G(-nu)*G(-mu))\n+\n+    # Additional test cases for kahane_simplify issue of gamma matrices order\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # Additional tests with more gamma matrices\n+    t = G(mu)*G(nu)*G(-nu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+    \n+    t = G(rho)*G(sigma)*G(mu)*G(nu)*G(-nu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n     r = kahane_simplify(t)\n     assert r.equals(D**2*eye(4))\n     t = (G(mu)*G(nu)*G(-nu)*G(-mu))\n+\n+    # Additional test cases for kahane_simplify issue of gamma matrices order\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # Additional tests with more gamma matrices\n+    t = G(mu)*G(nu)*G(-nu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+    \n+    t = G(rho)*G(sigma)*G(mu)*G(nu)*G(-nu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n     r = kahane_simplify(t)\n     assert r.equals(D**2*eye(4))\n     t = (G(mu)*G(nu)*G(-nu)*G(-mu))\n+\n+    # Additional test cases for kahane_simplify issue of gamma matrices order\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # Additional tests with more gamma matrices\n+    t = G(mu)*G(nu)*G(-nu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+    \n+    t = G(rho)*G(sigma)*G(mu)*G(nu)*G(-nu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n     r = kahane_simplify(t)\n     assert r.equals(D**2*eye(4))\n     t = (G(mu)*G(nu)*G(-rho)*G(-nu)*G(-mu)*G(rho))\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..52d502f 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,6 +30,8 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n+from sympy import Symbol, Contains, FiniteSet, S, Integers, Reals, Piecewise, Eq, raises\n+\n def test_binary_symbols():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -48,4 +50,4 @@ def test_as_set():\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..ab435c7 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,30 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+from sympy.core.numbers import E\n+from sympy import exp\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+from sympy.physics.units.systems.si import SI\n+from sympy.physics.units import Quantity\n+from sympy.physics import units\n+\n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..c52ded1 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,29 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+\n+    expr1 = A1 * T1 + V1\n+    # This should not raise a ValueError if the issue is fixed\n+    factor, dimension = SI._collect_factor_and_dimension(expr1)\n+    assert dimension == SI.get_dimension_system().equivalent_dimensions(velocity, acceleration * time)\n+    assert factor == (-9.8 * 5 + 2)\n+\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..a55ffc1 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -106,4 +107,23 @@ def test_check_homomorphism():\n     a = Permutation(1,2,3,4)\n     b = Permutation(1,3)\n     G = PermutationGroup([a, b])\n-    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+\n+    # Test `_check_homomorphism` with permutations and their inverses\n+    # to check that the logic for handling inverses is correct.\n+    D3 = DihedralGroup(3)\n+    # Verify the homomorphism on the group itself\n+    try:\n+        T = homomorphism(D3, D3, D3.generators, D3.generators)\n+        assert T.is_isomorphism()\n+    except ValueError:\n+        assert False, \"The homomorphism could not be defined where it should have been possible\"\n+\n+    # Verify with a mapping that includes an inverted generator\n+    gen = D3.generators\n+    inverse_map = [gen[0]**-1, gen[1]]\n+    try:\n+        T_inv = homomorphism(D3, D3, gen, inverse_map)\n+        assert not T_inv.is_isomorphism(), \"Should not be an isomorphism with a generator inversion\"\n+    except ValueError:\n+        assert False, \"The homomorphism check erroneously rejected a lawful mapping\"\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..839c624 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -249,7 +249,36 @@ def test_PolyElement_copy():\n     g[(1, 1, 1)] = 7\n     assert f != g\n \n+from sympy import ring, ZZ, symbols\n+from sympy.testing.pytest import raises\n+\n def test_PolyElement_as_expr():\n+    # Additional test case for wrong number of symbols\n+    R, x, y = ring(\"x,y\", ZZ)\n+    f = x**2 + y\n+    U, V, W = symbols(\"u,v,w\")\n+    \n+    raises(ValueError, lambda: f.as_expr(U, V, W))  # More symbols than needed\n+    \n+    # Using single symbol, verifying fallback to ring's own symbols\n+    assert f.as_expr(x) == f.as_expr()  # This should fallback and perform correctly\n+    \n+    # Correct number of symbols\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = x*y**2 + y*z + z**2\n+\n+    U, V, W = symbols(\"u,v,w\")\n+    g = U*V**2 + V*W + W**2\n+\n+    assert f.as_expr(U, V, W) == g\n+    # Testing symbol renaming effect with different but correct symbols\n+    A, B, C = symbols(\"a,b,c\")\n+    g2 = A*B**2 + B*C + C**2\n+    assert f.as_expr(A, B, C) == g2\n+    \n+    # Minimal edge case with zero variables\n+    R, = ring(\"\", ZZ)\n+    assert R(0).as_expr() == 0\n     R, x, y, z = ring(\"x,y,z\", ZZ)\n     f = 3*x**2*y - x*y*z + 7*z**3 + 1\n \n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..6af5841 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -269,6 +269,30 @@ def test_convert_equals_signs():\n     x = Symbol('x')\n     y = Symbol('y')\n     assert parse_expr(\"1*2=x\", transformations=transformations) == Eq(2, x)\n+\n+def test_relational_evaluate_false():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    for text, expected in inputs.items():\n+        result = parse_expr(text, evaluate=False)\n+        assert result == expected, f\"For input '{text}', expected {expected} but got {result}\"\n+\n+def test_mixed_expressions_evaluate_false():\n+    inputs = {\n+        \"1 + 1 < 3\": Lt(Add(1, 1, evaluate=False), 3, evaluate=False),\n+        \"x + 1 >= y\": Ge(Add(Symbol('x'), 1, evaluate=False), Symbol('y'), evaluate=False),\n+        \"x**2 == x*x\": Eq(Pow(Symbol('x'), 2, evaluate=False), Mul(Symbol('x'), Symbol('x'), evaluate=False), evaluate=False),\n+        \"1 + 1 != 2\": Ne(Add(1, 1, evaluate=False), 2, evaluate=False)\n+    }\n+    for text, expected in inputs.items():\n+        result = parse_expr(text, evaluate=False)\n+        assert result == expected, f\"For input '{text}', expected {expected} but got {result}\"\n     assert parse_expr(\"y = x\", transformations=transformations) == Eq(y, x)\n     assert parse_expr(\"(2*y = x) = False\",\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..f2af36d 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -35,6 +35,8 @@ from astropy.units.utils import is_effectively_unity\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n         ([\"dex(cm s**-2)\", \"dex(cm/s2)\"], u.DexUnit(u.cm / u.s**2)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.Joule / (u.m * u.second * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.Joule / (u.second * u.kpc**2))),\n     ],\n )\n def test_unit_grammar(strings, unit):\n@@ -90,6 +92,8 @@ def test_unit_grammar_fail(string):\n         ([\"[cm/s2]\"], dex(u.cm / u.s**2)),\n         ([\"[K]\"], dex(u.K)),\n         ([\"[-]\"], dex(u.dimensionless_unscaled)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.Joule / (u.m * u.second * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.Joule / (u.second * u.kpc**2))),\n     ],\n )\n def test_cds_grammar(strings, unit):\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..0b6cf4d 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -162,6 +162,25 @@ class URLTranslationTests(URLTestCaseBase):\n         with translation.override('nl'):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n+            \n+        # Additional test cases for URL with optional params\n+        def test_translate_url_with_optional_params(self):\n+            # URL patterns where 'optional' is missing\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+                '/nl/with-arguments/regular-argument/'\n+            )\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+                '/nl/with-arguments/regular-argument/optional.html'\n+            )\n+\n+            # Testing the regex_optional patterns\n+            self.assertEqual(translate_url('/regex_optional/1/2/', 'nl'), '/regex_optional/1/2/')\n+            self.assertEqual(translate_url('/regex_optional/1/', 'nl'), '/regex_optional/1/')\n+\n+            # Ensure these preserve the original language for not-matched patterns\n+            self.assertEqual(translate_url('/not-matched/path/1/', 'nl'), '/not-matched/path/1/')\n \n \n class URLNamespaceTests(URLTestCaseBase):\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..ba0ca46 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -16,8 +17,43 @@ from .models import (\n     SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n )\n \n+from .models import Item, Derived\n \n class ModelInheritanceTest(TestCase):\n+    def test_reset_pk_creates_new_instance(self):\n+        # Create an initial Derived object\n+        derived_1 = Derived.objects.create(f=True)\n+        \n+        # Retrieve the item and reset its primary key\n+        derived_2 = Derived.objects.get(pk=derived_1.pk)\n+        derived_2.reset()\n+        derived_2.save()\n+        \n+        # Assert that a new instance is created instead of overwriting\n+        self.assertEqual(Derived.objects.count(), 2)\n+\n+        # Check that the first instance is still the same\n+        original_instance = Derived.objects.get(pk=derived_1.pk)\n+        self.assertTrue(original_instance.f)\n+        self.assertIsNotNone(original_instance.uid)\n+\n+    def test_reset_pk_does_not_affect_related_models(self):\n+        # Create an initial Derived object\n+        derived_1 = Derived.objects.create(f=True)\n+        \n+        # Create another Derived object which will be reset\n+        derived_2 = Derived.objects.create(f=False)\n+        \n+        # Reset the primary key and save to create a new object\n+        derived_2.reset()\n+        derived_2.save()\n+\n+        # Check that the count of Derived objects is now 3\n+        self.assertEqual(Derived.objects.count(), 3)\n+        \n+        # Ensure that the original Derived object hasn't been affected\n+        unchanged_instance = Derived.objects.get(pk=derived_1.pk)\n+        self.assertTrue(unchanged_instance.f)\n     def test_model_inheritance(self):\n         # Regression for #7350, #7202\n         # When you create a Parent object with a specific reference to an\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..8ec67cf 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -605,8 +605,13 @@ class DeletionTests(TestCase):\n \n \n class FastDeleteTests(TestCase):\n-\n-    def test_fast_delete_fk(self):\n+    def test_slow_delete_performance_regression(self):\n+        with self.assertNumQueries(1) as ctx:\n+            # Execute deletion on all objects\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Ensure no subquery is involved in the query\n+        self.assertNotIn('SELECT', sql)\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n         )\n@@ -702,4 +707,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..804307d 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -24,8 +25,12 @@ class DecimalFieldTests(TestCase):\n         msg = '\u201cabc\u201d value must be a decimal number.'\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n-\n-    def test_default(self):\n+    def test_invalid_dict_value(self):\n+        f = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        test_value = {'key': 'value'}\n+        with self.assertRaisesMessage(ValidationError, msg % test_value):\n+            f.to_python(test_value)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..aab03fb 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -110,7 +111,29 @@ class PickleabilityTestCase(TestCase):\n         self.assertEqual(original, reloaded)\n         self.assertIs(reloaded.__class__, dynclass)\n \n-    def test_specialized_queryset(self):\n+    def test_pickle_queryset_with_values(self):\n+        # Create test data\n+        group = Group.objects.create(name='group')\n+        Event.objects.create(title='event', group=group)\n+        # Original QuerySet with values()\n+        queryset = Group.objects.values('name').annotate(event_count=models.Count('event'))\n+        # Pickle and unpickle the QuerySet\n+        unpickled_queryset = pickle.loads(pickle.dumps(queryset))\n+        # Ensure types of entries and content in unpickled queryset are correct\n+        self.assertEqual(list(queryset), list(unpickled_queryset))\n+        self.assertIsInstance(unpickled_queryset[0], dict)\n+\n+    def test_pickle_queryset_with_values_list(self):\n+        # Create test data\n+        group = Group.objects.create(name='group')\n+        Event.objects.create(title='event', group=group)\n+        # Original QuerySet using values_list()\n+        queryset = Group.objects.values_list('name', flat=True)\n+        # Pickle and unpickle the QuerySet\n+        unpickled_queryset = pickle.loads(pickle.dumps(queryset))\n+        # Check the types and contents\n+        self.assertEqual(list(queryset), list(unpickled_queryset))\n+        self.assertIsInstance(unpickled_queryset[0], str)\n         self.assert_pickles(Happening.objects.values('name'))\n         self.assert_pickles(Happening.objects.values('name').dates('when', 'year'))\n         # With related field (#14515)\n",
  "django__django-13449": "diff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py\nindex fb67168..6e3d202 100644\n--- a/tests/expressions_window/tests.py\n+++ b/tests/expressions_window/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from unittest import mock, skipIf\n \n@@ -13,6 +14,7 @@ from django.db.models.functions import (\n )\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n+from decimal import Decimal\n from .models import Employee\n \n \n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..358ab54 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,7 +30,16 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n-    def test_widget(self):\n+    def test_unicode_characters(self):\n+        field = JSONField()\n+        # Test with Chinese characters\n+        self.assertEqual(field.prepare_value({'greeting': '\u4f60\u597d\uff0c\u4e16\u754c'}), '{\"greeting\": \"\u4f60\u597d\uff0c\u4e16\u754c\"}')\n+        # Test with emoji\n+        self.assertEqual(field.prepare_value({'emoji': '\ud83d\ude00\ud83d\udc31'}), '{\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        # Test with mixed unicode characters\n+        self.assertEqual(field.prepare_value(['\u4f60\u597d\uff0c\u4e16\u754c', 'ja\u017a\u0144']), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]')\n+        # Test with other unicode characters\n+        self.assertEqual(field.prepare_value({'currency': '\u20ac', 'music': '\u266a'}), '{\"currency\": \"\u20ac\", \"music\": \"\u266a\"}')\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n \n",
  "django__django-14404": "",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..e45196d 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -690,6 +690,34 @@ class WriterTests(SimpleTestCase):\n         # Just make sure it runs for now, and that things look alright.\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n+    def test_issue_missing_import_in_migration(self):\n+        \"\"\"\n+        Test to ensure that Django's migration writer includes the necessary\n+        import statements when generating a migration file.\n+        \"\"\"\n+        # Create a migration equivalent to the one in the issue\n+        fields = {\n+            'name': models.TextField(primary_key=True),\n+        }\n+        \n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"MyModel\",\n+                    fields=tuple(fields.items()),\n+                    options={'abstract': False},\n+                    bases=(\"app.models.MyMixin\", models.Model),\n+                ),\n+            ],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        \n+        # Ensure string contains necessary import of 'models'\n+        self.assertIn(\"from django.db import models\", output)\n+        \n+        # Ensure the migration's import statements are valid\n+        self.safe_exec(output)\n \n     def test_migration_path(self):\n         test_apps = [\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..65b4be0 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1629,8 +1629,21 @@ class AggregateTestCase(TestCase):\n             value=Sum('price', filter=Q(rating__lt=3.0), default=Avg('pages') / 10.0),\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n-\n-    def test_exists_none_with_aggregate(self):\n+    \n+    def test_aggregation_sum_with_default_after_annotation(self):\n+        # This test checks if the issue with Sum and default after annotate is resolved.\n+        result = Book.objects.annotate(idx=F('id')).aggregate(result=Sum('id', default=0))\n+        self.assertEqual(result['result'], 4560)\n+\n+    def test_aggregation_avg_with_default_after_annotation(self):\n+        # Another test with Avg to see if it handles the default correctly.\n+        result = Book.objects.annotate(rating_count=Count('rating')).aggregate(result=Avg('rating_count', default=2))\n+        self.assertTrue(result['result'] >= 0)\n+\n+    def test_aggregation_coalesce_with_default_after_annotation(self):\n+        # A test using Coalesce as a workaround to check against it.\n+        result = Book.objects.annotate(idx=F('id')).aggregate(x=Coalesce(Sum('id'), 0))\n+        self.assertEqual(result['x'], 4560)\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.none()),\n@@ -1642,4 +1655,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..859ddc0 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3496,6 +3496,45 @@ class FormFieldCallbackTests(SimpleTestCase):\n                 type(NewForm.base_fields[name].widget),\n             )\n \n+    def test_modelform_factory_uses_meta_formfield_callback(self):\n+        def meta_callback(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            formfield.widget = forms.Textarea\n+            return formfield\n+\n+        class MetaForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = '__all__'\n+                formfield_callback = meta_callback\n+\n+        FactoryForm = modelform_factory(Person, form=MetaForm)\n+\n+        for field in FactoryForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_base_form_field_callback_priority(self):\n+        def base_callback(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            formfield.widget = forms.TextInput\n+            return formfield\n+\n+        def custom_callback(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            formfield.widget = forms.PasswordInput\n+            return formfield\n+\n+        class BaseFormWithCallback(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = '__all__'\n+                formfield_callback = base_callback\n+\n+        FactoryForm = modelform_factory(Person, form=BaseFormWithCallback, formfield_callback=custom_callback)\n+\n+        for field in FactoryForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.PasswordInput)\n+\n \n class LocalizedModelFormTest(TestCase):\n     def test_model_form_applies_localize_to_some_fields(self):\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..1423eb0 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,7 +9,9 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.core.exceptions import FieldError\n+from django.core import serializers\n+from django.db import models\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n@@ -258,7 +260,33 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             for obj in serializers.deserialize(\"json\", test_string, ignore=False):\n                 obj.save()\n \n-    def test_helpful_error_message_for_many2many_not_iterable(self):\n+    def test_m2m_with_custom_manager_select_related(self):\n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+        \n+        class TestTagManager(models.Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().select_related(\"master\")\n+        \n+        class TestTag(models.Model):\n+            objects = TestTagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+        \n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+        \n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        test.save()\n+        \n+        try:\n+            serializers.serialize(\"json\", [test])\n+        except FieldError as e:\n+            self.fail(f\"Serialization raised FieldError unexpectedly: {str(e)}\")\n         \"\"\"\n         Not iterable many-to-many field value throws a helpful error message.\n         \"\"\"\n",
  "matplotlib__matplotlib-23476": "",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..3ff878f 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6586,7 +6586,8 @@ def test_integrate(dask):\n     assert isinstance(actual.data, type(da.data))\n \n     # along y\n-    actual = da.integrate(\"y\")\n+    # Test using the 'coord' argument\n+    actual = da.integrate(coord=\"y\")\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..06c3c45 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -107,6 +107,36 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pytest import CaptureFixture\n+from pylint.lint import Run\n+import pytest\n+import re\n+from typing import Pattern, Sequence\n+from pylint.testutils import EMPTY_MODULE\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3}, bar{1,2})\", [\"(foo{1,3}, bar{1,2})\"]),  # New test case\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..067d17b 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,28 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n+def test_does_not_eagerly_collect_packages(testdir):\n+    testdir.makepyfile(\"def test(): pass\")\n+    pydir = testdir.mkpydir(\"foopkg\")\n+    pydir.join(\"__init__.py\").write(\"assert False\")\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n+\n+def test_does_not_put_src_on_path(testdir):\n+    # `src` is not on sys.path so it should not be importable\n+    testdir.tmpdir.join(\"src/nope/__init__.py\").ensure()\n+    testdir.makepyfile(\n+        \"import pytest\\n\",\n+        \"def test():\\n\",\n+        \"    with pytest.raises(ImportError):\\n\",\n+        \"        import nope\\n\",\n+    )\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1206,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..8bff97e 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,32 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_pandas_transform_output():\n+    \"\"\"Test FeatureUnion with pandas transform output setting.\"\"\"\n+\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import make_union\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X.groupby(\"date\").sum()\n+\n+    # Try using the Transformer with pandas output setting\n+    from sklearn import set_config\n+    set_config(transform_output=\"pandas\")\n+    feature_union = make_union(MyTransformer())\n+    transformed_data = feature_union.fit_transform(data)\n+\n+    # Check if the output is a pandas DataFrame and has the expected structure\n+    assert isinstance(transformed_data, pd.DataFrame), \"Expected pandas DataFrame as output\"\n+    assert transformed_data.shape[0] == 4, \"Expected 4 rows in output DataFrame\"\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..0ef37d1 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -246,6 +246,11 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n+    doctree = _parse_annotation(\"None\")\n+    # None should create a reference to the None's entry documentation\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n     doctree = _parse_annotation(\"Tuple[int, int]\")\n     assert_node(doctree, ([pending_xref, \"Tuple\"],\n                           [desc_sig_punctuation, \"[\"],\n@@ -254,6 +259,11 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n+    doctree = _parse_annotation(\"None\")\n+    # None should create a reference to the None's entry documentation\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n     doctree = _parse_annotation(\"Callable[[int, int], int]\")\n     assert_node(doctree, ([pending_xref, \"Callable\"],\n                           [desc_sig_punctuation, \"[\"],\n@@ -266,6 +276,11 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n+    doctree = _parse_annotation(\"None\")\n+    # None should create a reference to the None's entry documentation\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n \n def test_pyfunction_signature(app):\n     text = \".. py:function:: hello(name: str) -> str\"\n@@ -742,4 +757,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..22ae1b5 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1093,6 +1093,33 @@ Do as you please\n \n :keyword gotham_is_yours: shall interfere.\n :kwtype gotham_is_yours: None\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_combined_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+\n+        # Test with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (*array_like, optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: array_like, optional\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: array_like, optional\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1329,6 +1356,33 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         actual = str(NumpyDocstring(docstring, config))\n         expected = \"\"\"\\\n :Parameters: **param1** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_combined_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+\n+        # Test with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (*array_like, optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: array_like, optional\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: array_like, optional\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1337,6 +1391,33 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_combined_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+\n+        # Test with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (*array_like, optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: array_like, optional\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: array_like, optional\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1352,6 +1433,33 @@ param1 : MyClass instance\n         actual = str(NumpyDocstring(docstring, config))\n         expected = \"\"\"\\\n :Parameters: **param1** (:class:`MyClass instance`)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_combined_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+\n+        # Test with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (*array_like, optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: array_like, optional\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: array_like, optional\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1360,6 +1468,33 @@ param1 : MyClass instance\n         expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass instance`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_combined_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+\n+        # Test with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (*array_like, optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: array_like, optional\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: array_like, optional\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1388,6 +1523,33 @@ numpy.multivariate_normal(mean, cov, shape=None, spam=None)\n \"\"\"\n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+\n+        # Test with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (*array_like, optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: array_like, optional\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: array_like, optional\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n         docstring = \"\"\"\\\n numpy.multivariate_normal(mean, cov, shape=None, spam=None)\n \n@@ -1411,6 +1573,33 @@ numpy.multivariate_normal(mean, cov, shape=None, spam=None)\n    \\n\\\n    :meth:`otherfunc`\n        relationship\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_combined_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+\n+        # Test with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (*array_like, optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: array_like, optional\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: array_like, optional\n \"\"\"\n         self.assertEqual(expected, actual)\n \n@@ -1437,6 +1626,33 @@ Summary\n \n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+\n+        # Test with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (*array_like, optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: array_like, optional\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: array_like, optional\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_underscore_in_attribute(self):\n         docstring = \"\"\"\n Attributes\n@@ -1457,6 +1673,33 @@ arg_ : type\n \n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+\n+        # Test with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (*array_like, optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: array_like, optional\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: array_like, optional\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_underscore_in_attribute_strip_signature_backslash(self):\n         docstring = \"\"\"\n Attributes\n@@ -1478,6 +1721,33 @@ arg_ : type\n \n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+\n+        # Test with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (*array_like, optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: array_like, optional\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: array_like, optional\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_raises_types(self):\n         docstrings = [(\"\"\"\n Example Function\n@@ -1681,6 +1951,33 @@ Example Function\n         actual = str(NumpyDocstring(docstring, config, app, \"method\"))\n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+\n+        # Test with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (*array_like, optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: array_like, optional\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: array_like, optional\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_section_header_underline_length(self):\n         docstrings = [(\"\"\"\n Summary line\n@@ -1927,6 +2224,33 @@ definition_after_normal_text : int\n         actual = str(NumpyDocstring(docstring, config))\n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+\n+        # Test with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (*array_like, optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: array_like, optional\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: array_like, optional\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n         expected = \"\"\"One line summary.\n \n :Parameters: * **no_list** (:class:`int`)\n@@ -2019,6 +2343,33 @@ definition_after_normal_text : int\n         actual = str(NumpyDocstring(docstring, config))\n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+\n+        # Test with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (*array_like, optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: array_like, optional\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: array_like, optional\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_token_type(self):\n         tokens = (\n             (\"1\", \"literal\"),\n@@ -2201,6 +2552,33 @@ definition_after_normal_text : int\n         actual = str(NumpyDocstring(docstring, config))\n         self.assertEqual(expected, actual)\n \n+    def test_combined_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+\n+        # Test with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (*array_like, optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: array_like, optional\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: array_like, optional\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n \n @contextmanager\n def warns(warning, match):\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..df8b2f2 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -775,7 +775,67 @@ def test_pydecoratormethod_signature(app):\n \n \n @pytest.mark.sphinx(freshenv=True)\n-def test_module_index(app):\n+def test_info_field_list_with_unqualified_names(app):\n+    text = (\"\"\"\n+.. py:class:: mod.A\n+.. py:class:: mod.submod.A\n+\n+.. py:function:: f()\n+\n+    - :py:class:`mod.A`\n+    - :py:class:`mod.submod.A`\n+\n+    :param mod.A a:\n+    :param mod.submod.A b:\n+    :rtype: mod.A\n+    :rtype: mod.submod.A\n+\n+.. py:currentmodule:: mod\n+\n+.. py:function:: f()\n+\n+    - :py:class:`A`\n+    - :py:class:`mod.A`\n+    - :py:class:`mod.submod.A`\n+\n+    :param A a:\n+    :param mod.A b:\n+    :param mod.submod.A c:\n+    :rtype: A\n+    :rtype: mod.A\n+    :rtype: mod.submod.A\n+\n+.. py:currentmodule:: mod.submod\n+\n+.. py:function:: f()\n+\n+    - :py:class:`A`\n+    - :py:class:`mod.A`\n+    - :py:class:`mod.submod.A`\n+\n+    :param A a:\n+    :param mod.A b:\n+    :param mod.submod.A c:\n+    :rtype: A\n+    :rtype: mod.A\n+    :rtype: mod.submod.A\n+\"\"\")\n+    doctree = restructuredtext.parse(app, text)\n+    print(doctree)\n+\n+    # Verify that there are no warnings about ambiguous class lookup\n+    assert 'WARNING: more than one target found for cross-reference' not in app._warning.getvalue()\n+\n+    # Verify that type and rtype resolve correctly within the context\n+    # Without warnings for unqualified names\n+    for param in doctree.traverse(addnodes.desc_parameter):\n+        xrefs = param.traverse(nodes.pending_xref)\n+        for xref in xrefs:\n+            if xref['reftarget'] == 'A':\n+                if 'py:module' in xref.attributes and xref['py:module'] == 'mod.submod':\n+                    assert xref['reftarget'] == 'mod.submod.A', \"Unqualified 'A' should match 'mod.submod.A'\"\n+                else:\n+                    assert xref['reftarget'] == 'mod.A', \"Unqualified 'A' should match 'mod.A' when in 'mod' module\"\n     text = (\".. py:module:: docutils\\n\"\n             \".. py:module:: sphinx\\n\"\n             \".. py:module:: sphinx.config\\n\"\n",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..37c1107 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,11 +1,20 @@\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n \n     :meta private:\n     \"\"\"\n \n+# Test cases for variables\n+PRIVATE_CONSTANT = None  #: :meta private:\n+_PUBLIC_CONSTANT = None  #: :meta public:\n+\n def _public_function(name):\n     \"\"\"public_function is a docstring().\n \n     :meta public:\n-    \"\"\"\n+    \"\"\"\n+\n+# Test cases for variables\n+PRIVATE_CONSTANT = None  #: :meta private:\n+_PUBLIC_CONSTANT = None  #: :meta public:\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..4beb6f5 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -904,6 +904,52 @@ def test_canonical_definition_skip(app, warning):\n     assert domain.objects['_io.StringIO'] == ('index', 'io.StringIO', 'class', False)\n \n \n+from sphinx import addnodes\n+from docutils import nodes\n+from sphinx.testing.util import assert_node\n+import sphinx\n+\n+def test_docstring_param_dict_with_string_keys_and_values(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:function:: func\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = sphinx.util.docutils.restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"function \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"func\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, ([nodes.list_item, nodes.paragraph])]))\n+\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"function\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"function\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"function\"})\n+\n def test_canonical_duplicated(app, warning):\n     text = (\".. py:class:: mypackage.StringIO\\n\"\n             \"   :canonical: _io.StringIO\\n\"\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..f00f767 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -998,6 +998,44 @@ def test_info_field_list(app):\n                  \")\",\n                  \" -- \",\n                  \"blah blah\"))\n+\n+def test_info_field_list_piped_type_with_float(app):\n+    text = (\".. py:module:: example\\\\n\"\n+            \".. py:class:: Class\\\\n\"\n+            \"\\\\n\"\n+            \"   :param value: can be an int, float, or str\\\\n\"\n+            \"   :type value: int | float | str\\\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, \n+                (nodes.target, \n+                 addnodes.index, \n+                 addnodes.index, \n+                 [desc, ([desc_signature, ([desc_annotation, \"class \"], \n+                                           [desc_addname, \"example.\"], \n+                                           [desc_name, \"Class\"])], \n+                         [desc_content, nodes.field_list, nodes.field, (nodes.field_name, \n+                                                                        nodes.field_body)])]))\n+    assert_node(doctree[3][1][0][0][1], \n+                ([nodes.paragraph, ([addnodes.literal_strong, \"value\"],\n+                                    \" (\",\n+                                    [pending_xref, addnodes.literal_emphasis, \"int\"],\n+                                    \" | \",\n+                                    [pending_xref, addnodes.literal_emphasis, \"float\"],\n+                                    \" | \",\n+                                    [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                                    \")\",\n+                                    \" -- \",\n+                                    \"can be an int, float, or str\")],))\n+    assert_node(doctree[3][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"int\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"float\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     assert_node(doctree[3][1][0][0][1][0][3][0][2], pending_xref,\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"Dict\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..40fa074 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -849,6 +849,26 @@ def test_autodoc_typehints_description_no_undoc(app):\n         '   :param x: arg\\n'\n         '   :return: another tuple\\n'\n     )\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_typehints_description_target': 'documented',\n+                                   'napoleon_numpy_docstring': False})\n+def test_autodoc_typehints_napoleon_return_types(app):\n+    # Ensure that return types are documented when using Napoleon with Google style\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autofunction:: target.typehints.decr\\n'\n+        '\\n'\n+        '   :returns: decremented number\\n'\n+    )\n+    # Test specific to \"target.typehints.decr\" with documented return type\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+    assert ('Returns:\\n'\n+            '      decremented number\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n' in context)\n     app.build()\n     context = (app.outdir / 'index.txt').read_text()\n     assert ('target.typehints.incr(a, b=1)\\n'\n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..d479ca5 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1048,6 +1048,15 @@ def test__solveset_multi():\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n \n+from sympy import Eq, cos, sin, ConditionSet, S, x, sqrt, Reals\n+\n+def test_issue_18188():\n+    result1 = Eq(x*cos(x) - 3*sin(x), 0)\n+    assert result1.as_set() == ConditionSet(x, Eq(x*cos(x) - 3*sin(x), 0), Reals)\n+\n+    result2 = Eq(x**2 + sqrt(x*2) + sin(x), 0)\n+    assert result2.as_set() == ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), Reals)\n+\n def test_conditionset():\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..f2e7ee7 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3265,6 +3265,8 @@ def test_noncommutative():\n     assert cancel(e*foo(c)) == c*foo(c)\n \n \n+from sympy import symbols, sqf_list, Mul\n+\n def test_to_rational_coeffs():\n     assert to_rational_coeffs(\n         Poly(x**3 + y*x**2 + sqrt(y), x, domain='EX')) is None\n@@ -3276,7 +3278,24 @@ def test_factor_terms():\n     assert sqf_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])\n \n \n-def test_as_list():\n+def test_issue_xxxx():\n+    x = symbols('x')\n+    \n+    # Test the original fix.\n+    p1 = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result1 = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p1) == result1\n+\n+    # Additional test ensuring correct behavior for multiplicity 2\n+    # Testing a polynomial with one quadratic and multiple distinct linear factors\n+    p2 = (x**2 - 1)*(x - 2)**2\n+    result2 = (1, [(x - 1, 1), (x + 1, 1), (x - 2, 2)])\n+    assert sqf_list(p2) == result2\n+\n+    # Additional test for more intricate polynomial with different multiplicities\n+    p3 = (x + 4)**3 * (x**3 - x)*(x - 1)**2\n+    result3 = (1, [(x + 4, 3), (x, 1), (x - 1, 3)])\n+    assert sqf_list(p3) == result3\n     # issue 14496\n     assert Poly(x**3 + 2, x, domain='ZZ').as_list() == [1, 0, 0, 2]\n     assert Poly(x**2 + y + 1, x, y, domain='ZZ').as_list() == [[1], [], [1, 1]]\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..71750a9 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3241,8 +3241,13 @@ def test_keep_coeff():\n     assert _keep_coeff(x, 1/x) == 1\n     assert _keep_coeff(x + 1, S(2)) == u\n \n+from sympy import symbols, expand, I\n+from sympy.polys.polytools import factor\n \n-def test_poly_matching_consistency():\n+def test_factor_with_extension():\n+    x, y = symbols('x y', complex=True)\n+    z = expand((x-1)*(y-1))\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     # Test for this issue:\n     # https://github.com/sympy/sympy/issues/5514\n     assert I * Poly(x, x) == Poly(I*x, x)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..e57b5f0 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,10 +1,24 @@\n+\n+def test_symbol_dict_presence():\n+    # In version 1.6.2 and before, trying to access __dict__ raises an AttributeError\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    with raises(AttributeError):\n+        _ = s.__dict__\n+\n+def test_symbol_slots():\n+    # Symbol instances should have __slots__\n+    s = Symbol('s')\n+    assert hasattr(s, '__slots__')\n+    assert s.__slots__ == ('name',)\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n import collections\n-\n from sympy.core.basic import (Basic, Atom, preorder_traversal, as_Basic,\n     _atomic, _aresame)\n+from sympy.core.symbol import Symbol\n from sympy.core.singleton import S\n from sympy.core.symbol import symbols, Symbol, Dummy\n from sympy.core.sympify import SympifyError\n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..3c7f542 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -369,8 +369,36 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n-\n-def test_Number_new():\n+def test_issue_24543():\n+    from sympy import Rational\n+\n+    # Existing test case\n+    for p in ('1.5', 1.5, 2):\n+        for q in ('1.5', 1.5, 2):\n+            assert Rational(p, q).as_numer_denom() == Rational('%s/%s' % (p, q)).as_numer_denom()\n+\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+    \n+    # New test cases to specifically address the issue\n+    assert Rational('0.5', '100').as_numer_denom() == (1, 200)\n+    assert Rational(0.5, 100).as_numer_denom() == (1, 200)\n+    assert Rational('0.5', 100).as_numer_denom() == (1, 200)\n+\n+    # Additional tests for numeric strings consistency\n+    assert Rational('25.0', '5').as_numer_denom() == (5, 1)\n+    assert Rational('1000', '250').as_numer_denom() == (4, 1)\n+\n+    # Edge cases\n+    assert Rational('0', '1000') == Rational(0)\n+    assert Rational('1', '1000') == Rational(1, 1000)\n+    assert Rational('0.333', '1.0').limit_denominator(1000).as_numer_denom() == (333, 1000)\n+\n+    # Verifying exceptions are raised properly\n+    import pytest\n+    with pytest.raises(TypeError):\n+        Rational('not a number')\n+    with pytest.raises(TypeError):\n+        Rational('1/1/1')\n     \"\"\"\"\n     Test for Number constructor\n     \"\"\"\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..cd101bc 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,38 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_uses_custom_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the 'id' provided by ChoiceWidget.options.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'X'), ('y', 'Y')],\n+                widget=CheckboxSelectMultiple\n+            )\n+\n+        form = SomeForm(auto_id='custom_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_field_1')\n+\n+    def test_boundwidget_id_for_label_fallback_without_custom_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label falls back to default ID\n+        if no 'id' is provided explicitly.\n+        \"\"\"\n+        class AnotherForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'X'), ('y', 'Y')],\n+                widget=CheckboxSelectMultiple\n+            )\n+\n+        form = AnotherForm()  # No auto_id custom format\n+        subwidgets = form['field'].subwidgets\n+        expected_id_0 = 'id_field_0'\n+        expected_id_1 = 'id_field_1'\n+        self.assertEqual(subwidgets[0].id_for_label, expected_id_0)\n+        self.assertEqual(subwidgets[1].id_for_label, expected_id_1)\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..164eee7 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -301,6 +301,34 @@ def test_tool_line_handle():\n \n     assert tool_line_handle.positions == positions\n \n+from matplotlib import pyplot as plt\n+from matplotlib import widgets\n+\n+import pytest\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound_stays(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    # Now interact with the tool\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+    do_event(tool, 'release', xdata=release_data[0], ydata=release_data[1], button=1)\n+\n+    # Bounds should still remain the same\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n \n def check_lasso_selector(**kwargs):\n     ax = get_ax()\n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..a32d665 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,11 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..a6b89f4 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -147,8 +147,25 @@ def test_multi_target_sample_weights():\n     X_test = [[1.5, 2.5, 3.5], [3.5, 4.5, 5.5]]\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n-\n-# Import the data\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+\n+def test_cross_val_predict_with_multioutput_classifier_predict_proba():\n+    # Reproduce and test the bug mentioned in the issue for MultiOutputClassifier\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=5, n_labels=2, random_state=42)\n+\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    try:\n+        pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')\n+        # Asserting type of pred_proba to check if predict_proba gives output in expected format\n+        assert isinstance(pred_proba, list), \"Output should be a list of arrays for each target\"\n+        assert all(isinstance(p, np.ndarray) for p in pred_proba), \"Each item in list should be a numpy array\"\n+        print(\"Test passed: cross_val_predict with predict_proba for MultiOutputClassifier works without error.\")\n+    except AttributeError as e:\n+        # Handling the case where the bug is still present\n+        raise AssertionError(\"An AttributeError occurred: \", e)\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n X = iris.data\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..1dd7821 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -170,7 +170,20 @@ def test_restify_broken_type_hints():\n     assert restify(BrokenType) == ':py:class:`tests.test_util_typing.BrokenType`'\n \n \n-def test_stringify():\n+def test_restify_mock_inherited_class():\n+    # Test the restification of a mocked inherited class\n+    with mock(['mocked_base']):\n+        import mocked_base\n+        class MockedDerived(mocked_base.BaseClass):\n+            pass\n+\n+        # We expect the restified string to correctly include mocked_base.BaseClass\n+        expected_reST = ':py:class:`mocked_base.BaseClass` | :py:class:`__main__.MockedDerived`'\n+        result_reST = restify(MockedDerived)\n+        assert 'mocked_base.BaseClass' in result_reST, f\"Expected '{expected_reST}' but got '{result_reST}'\"\n+\n+\n+def test_stringify_mock():\n     assert stringify(int) == \"int\"\n     assert stringify(str) == \"str\"\n     assert stringify(None) == \"None\"\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..abf5017 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,8 +347,12 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n-\n-def test_issue_9983():\n+def test_issue_13546():\n+    n = Symbol('n', integer=True)\n+    k = Symbol('k', integer=True)\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    assert p.subs(n, 3).doit() == S(49)/4\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n     assert p.is_convergent() is S.false\n@@ -357,4 +361,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}