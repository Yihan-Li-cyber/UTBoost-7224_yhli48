{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..ae1f9e0 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,6 +55,34 @@ compound_models = {\n             )\n }\n \n+def test_separability_matrix_nested_models():\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+\n+    # Original problem statement cases\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    expected_matrix = np.array([[True, False], [False, True]])\n+    assert_allclose(separability_matrix(cm), expected_matrix)\n+\n+    complex_model = m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)\n+    expected_matrix_complex = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True, False],\n+        [False, False, False, True]\n+    ])\n+    assert_allclose(separability_matrix(complex_model), expected_matrix_complex)\n+\n+    # Nested model where the issue was identified\n+    nested_model = m.Pix2Sky_TAN() & cm\n+    expected_nested_matrix = np.array([\n+        [True, True, False, False],\n+        [True, True, False, False],\n+        [False, False, True,  False],\n+        [False, False, False, True]\n+    ])\n+    assert_allclose(separability_matrix(nested_model), expected_nested_matrix)\n+\n \n def test_coord_matrix():\n     c = _coord_matrix(p2, 'left', 2)\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..a576bf3 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,10 +1,13 @@\n+\n import gc\n import warnings\n-\n+from astropy.io.registry import identify_format\n+from astropy.table import Table\n import numpy as np\n import pytest\n from numpy.testing import assert_allclose, assert_array_equal\n-\n+from astropy.io.registry import identify_format\n+from astropy.table import Table\n from astropy import units as u\n from astropy.io import fits\n from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..25237bb 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,7 +137,41 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n-    def test_complex_value_card(self):\n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for astropy issue.\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+    def test_extreme_float_precision_card(self):\n+        \"\"\"\n+        Test with values that may cause precision issues to\n+        ensure no unnecessary expansion/truncation occurs.\n+        \"\"\"\n+        k = \"HIERARCH LONG PRECISION FLOAT\"\n+        com = \"precision test\"\n+        values = [1e-10, -1e-10, 1.234567890123456, -1.234567890123456]\n+        expected_values = [\"1.0E-10\", \"-1.0E-10\", \"1.234567890123456\", \"-1.234567890123456\"]\n+\n+        for val, exp_val in zip(values, expected_values):\n+            c = fits.Card(k, val, com)\n+            expected_str = f\"{k} = {exp_val} / {com}\"\n+            assert str(c).strip() == expected_str.strip()\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n         c = fits.Card(\"abc\", (1.2345377437887837487e88 + 6324767364763746367e-33j))\n",
  "astropy__astropy-14539": "",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..896e9d0 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -89,7 +89,20 @@ def test_inherit_docstrings():\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n \n-def test_set_locale():\n+def test_inherit_property_docstrings():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return 0\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 42\n+\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..77fdd20 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -172,6 +172,17 @@ def test_multiple_solidus():\n         u.Unit(\"m/s/kg\", format=\"vounit\")\n \n \n+def test_unrecognized_unit_equality_with_none():\n+    # Test that an UnrecognizedUnit does not raise a TypeError when compared to None\n+    unit = u.Unit(\"asdf\", parse_strict='silent')\n+    # Comparison should not raise TypeError, and should return False\n+    assert unit != None\n+    assert None != unit\n+    assert unit not in (None, u.m)\n+    assert unit == \"asdf\"\n+    assert unit != \"another_unit\"\n+\n+\n def test_unknown_unit3():\n     unit = u.Unit(\"FOO\", parse_strict='silent')\n     assert isinstance(unit, u.UnrecognizedUnit)\n",
  "astropy__astropy-7671": "",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..9d6fe25 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -77,7 +77,37 @@ class TestHeaderFunctions(FitsTestCase):\n         assert 'B' in header\n         assert header[0] == 'B'\n         assert header['B'] == 'B'\n-        assert header.comments['B'] == 'C'\n+    def test_card_from_bytes(self):\n+        \"\"\"Test loading a Card from a `bytes` object (assuming latin-1 encoding).\"\"\"\n+        c = fits.Card.fromstring(b\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+        \n+    def test_card_from_unicode(self):\n+        \"\"\"Test loading a Card from a `str` object.\"\"\"\n+        c = fits.Card.fromstring(\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"Test reading a Header from a `bytes` string.\"\"\"\n+        with open('data/test0.fits', 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read())\n+        \n+        pri_hdr = fits.getheader('data/test0.fits')\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n+        \n+    def test_header_fromstring_unicode(self):\n+        \"\"\"Test reading a Header from a `str` string.\"\"\"\n+        with open('data/test0.fits', 'r') as fobj:\n+            pri_hdr_from_str = fits.Header.fromstring(fobj.read())\n+        \n+        pri_hdr = fits.getheader('data/test0.fits')\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_str['NAXIS']\n+        assert pri_hdr == pri_hdr_from_str\n+        assert pri_hdr.tostring() == pri_hdr_from_str.tostring()\n \n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n@@ -2330,6 +2360,9 @@ class TestHeaderFunctions(FitsTestCase):\n                 c.verify('exception')\n \n \n+import astropy.io.fits as fits\n+import pytest\n+\n class TestRecordValuedKeywordCards(FitsTestCase):\n     \"\"\"\n     Tests for handling of record-valued keyword cards as used by the\n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..559b311 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -143,6 +143,24 @@ class TestQuantityCreation:\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n         # items stored as objects by numpy should be converted to float\n+\n+        # Extend test to verify float16, float32, float64, float128 preservation\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n+        \n+        a3_64 = np.array([1., 2.], dtype=np.float64)\n+        q3_64 = u.Quantity(a3_64, u.yr)\n+        assert q3_64.dtype == a3_64.dtype\n+        \n+        if hasattr(np, 'float128'):  # Protect against systems without float128\n+            a3_128 = np.array([1., 2.], dtype=np.float128)\n+            q3_128 = u.Quantity(a3_128, u.yr)\n+            assert q3_128.dtype == a3_128.dtype\n+\n+        # Sanity check on isolated float16 operation\n+        q = u.Quantity(np.float16(1), u.km)\n+        assert q.dtype == np.float16\n         # by default\n         q4 = u.Quantity(decimal.Decimal('10.25'), u.m)\n         assert q4.dtype == float\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..24d075b 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -208,6 +208,15 @@ TEST_DATA = [\n \n     (MaxLengthValidator(10), 15 * 'x', ValidationError),\n \n+    # Invalid URLs with unencoded characters in userinfo\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n+\n     (MinLengthValidator(10), 15 * 'x', None),\n     (MinLengthValidator(10), 10 * 'x', None),\n \n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..45b6158 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -8,6 +9,7 @@ from django.db.models import (\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n     Max, Min, Sum, Value,\n )\n+from django.db.models.expressions import Case, When\n from django.test import TestCase\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n@@ -389,7 +391,30 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_count_distinct_expression(self):\n+        # This is the original test case that utilizes the issue combination\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_multiple_conditions(self):\n+        # Additional test case to check multiple Case conditions\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(\n+                When(pages__gte=300, then='rating'),\n+                When(pages__lte=200, then='id')), \n+                distinct=True),\n+        )\n+        # Assuming that distinct ratings when using these conditions should be known\n+        self.assertEqual(aggs['distinct_ratings'], expected_value)\n+\n+    def test_count_distinct_expression_no_case(self):\n+        # Test case without using Case to check normal distinct aggregation\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count('rating', distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..a464d7f 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1092,6 +1092,25 @@ class OverrideSettingsTests(SimpleTestCase):\n         self.assertEqual(default_storage.base_location, '')\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Check that by default the file permissions are set to 0o644.\n+        \"\"\"\n+        # Create a test file\n+        from django.core.files.storage import FileSystemStorage\n+        storage = FileSystemStorage()\n+        test_file_name = 'test_file.txt'\n+        content = ContentFile(b'Test content')\n+        storage.save(test_file_name, content)\n+\n+        # Get full path of the saved file\n+        full_path = storage.path(test_file_name)\n+\n+        # Check the file's permissions\n+        self.assertEqual(oct(os.stat(full_path).st_mode)[-3:], '644')\n+\n+        # Clean up the file afterwards\n+        storage.delete(test_file_name)\n \n     def test_override_file_upload_permissions(self):\n         \"\"\"\n",
  "django__django-10973": "",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..e100dce 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -3,6 +3,8 @@ from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n+from django.contrib.contenttypes.models import ContentType\n+from django.db import transaction, IntegrityError\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n \n@@ -47,7 +49,20 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_missing_content_type_rename_ignore(self):\n+    class TestRouter:\n+        def db_for_write(self, model, **hints):\n+            return 'default'\n+\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n@@ -63,4 +78,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..17038cc 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,58 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inlines_hook_behavior(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = [AlternateInline, MediaInline]\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+\n+        # Test when request name is not set\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+        # Test with different request names\n+        for name, inline_class in (('alternate', AlternateInline), ('media', MediaInline)):\n+            request.name = name\n+            self.assertEqual(ma.get_inlines(request, None), (inline_class,))\n+            self.assertEqual(type(ma.get_inline_instances(request)[0]), inline_class)\n+\n+    def test_get_inlines_with_nonexistent_request_name(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = [MediaInline]\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name') and request.name == 'nonexistent':\n+                    return []\n+                return self.inlines\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+\n+        # Test where request has a name that does not match any condition\n+        request.name = 'nonexistent'\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(len(ma.get_inline_instances(request)), 0)\n+\n+        # Reset request name and test default behavior\n+        del request.name\n+        self.assertEqual(ma.get_inlines(request, None), [MediaInline])\n+        self.assertEqual(len(ma.get_inline_instances(request)), 1)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..8a8c329 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -248,7 +248,25 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_trailing_newline_unicode(self):\n+        invalid_usernames = [\n+            'joe\\n', 'Ren\u00e9\\n', '\u1d2e\u1d35\u1d33\u1d2e\u1d35\u1d3f\u1d30\\n', '\u0623\u062d\u0645\u062f\\n',\n+            \"o'connell\\n\", \"\u0639\u0628\u062f \u0627\u0644\\n\",\n+            \"zerowidth\\u200Bspace\\n\", \"nonbreaking\\u00A0space\\n\",\n+        ]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_trailing_newline_ascii(self):\n+        invalid_usernames = ['glenn\\n', 'GLEnN\\n', 'jean-marc\\n']\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +276,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..6f37f07 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -22,7 +22,24 @@ class RenderToStringTest(SimpleTestCase):\n         )\n \n \n-class GetDefaultTests(SimpleTestCase):\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_no_autoescape_attribute(self):\n+        \"\"\"Test render_to_string without explicitly setting autoescape\"\"\"\n+        engine = Engine(dirs=[TEMPLATE_DIR])\n+        # Assuming default autoescape=True\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+\n+# Additional tests below ensure the base functionality and structure aren't affected.\n \n     @override_settings(TEMPLATES=[])\n     def test_no_engines_configured(self):\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..196c5b5 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,7 +413,10 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n-    def test_lazy_content(self):\n+    def test_memoryview_content(self):\n+        # Test that HttpResponse can correctly handle memoryview objects\n+        r = HttpResponse(memoryview(b'My Content'))\n+        self.assertEqual(r.content, b'My Content')\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n \n@@ -458,7 +461,10 @@ class HttpResponseTests(unittest.TestCase):\n                 HttpResponsePermanentRedirect(url)\n \n \n-class HttpResponseSubclassesTests(SimpleTestCase):\n+    def test_memoryview_content(self):\n+        # Test that HttpResponse can correctly handle memoryview objects\n+        r = HttpResponse(memoryview(b'My Content'))\n+        self.assertEqual(r.content, b'My Content')\n     def test_redirect(self):\n         response = HttpResponseRedirect('/redirected/')\n         self.assertEqual(response.status_code, 302)\n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..a49046f 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -508,8 +508,45 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, ['0001_initial'])\n \n+class NamespacePackageLoaderTests(MigrationTestBase):\n \n-class PycLoaderTests(MigrationTestBase):\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'}\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n+    def test_loading_namespace_package_with_subdirectory(self):\n+        \"\"\"Ensure subdirectories within namespace packages are also checked.\"\"\"\n+        with self.temporary_migration_module(module='migrations.test_migrations_namespace_subpackage') as migration_dir:\n+            os.makedirs(os.path.join(migration_dir, 'subpackage'))\n+            sample_migration = \"\"\"from django.db import migrations, models\n+\n+class Migration(migrations.Migration):\n+    initial = True\n+    dependencies = []\n+    operations = [\n+        migrations.CreateModel(\n+            \"Book\",\n+            [\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"title\", models.CharField(max_length=255)),\n+            ],\n+        ),\n+    ]\n+\"\"\"\n+            with open(os.path.join(migration_dir, 'subpackage', '0002_auto.py'), 'w') as f:\n+                f.write(sample_migration)\n+\n+            loader = MigrationLoader(connection)\n+            loader.load_disk()\n+            migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n+            self.assertIn('0002_auto', migrations)\n \n     def test_valid(self):\n         \"\"\"\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..5918b7b 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -636,7 +636,30 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, 'Add another Inner2')\n         self.assertNotContains(response, 'id=\"id_inner2_set-TOTAL_FORMS\"')\n \n-    def test_inline_add_m2m_add_perm(self):\n+    def test_inline_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # Ensure the titles appear \n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        \n+        # Check that we only have view permission inlines, not allowing add/change/delete\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+        self.assertNotContains(response, 'name=\"Author_books-0-DELETE\"', html=True)\n+\n+        # Inline form should be present, but read-only\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True\n+        )\n+        self.assertContains(response, '<p>The inline Book</p>')\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True\n+        )\n         permission = Permission.objects.get(codename='add_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(reverse('admin:admin_inlines_author_add'))\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..11e750d 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1820,7 +1820,12 @@ class ModelOneToOneFieldTests(TestCase):\n         bw2 = form.save()\n         self.assertEqual(bw2.score, 12)\n \n-    def test_onetoonefield(self):\n+    def test_empty_fields(self):\n+        # Test with an empty list of fields passed\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields={}), {})\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+        self.assertEqual(model_to_dict(bw, fields=None), {'id': bw.id, 'name': 'Joe Better', 'score': 10, 'writer_ptr': bw.writer_ptr_id})\n         class WriterProfileForm(forms.ModelForm):\n             class Meta:\n                 # WriterProfile has a OneToOneField to Writer\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..792bc05 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,8 +1,10 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from django.db.models.deletion import Collector\n \n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n@@ -464,7 +466,23 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_instance_with_dependencies_does_not_set_pk_none(self):\n+        # We'll use Avatar to create a dependency.\n+        avatar = Avatar.objects.create(desc='sample')\n+        user = User.objects.create(avatar=avatar)\n+        # Ensure user has dependencies, thus cannot be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertFalse(collector.can_fast_delete(user))\n+        user.delete()\n+        self.assertIsNone(user.pk) # Expected: None because primary key should be unset on non-fast delete\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..345a24a 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,11 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # Additional test cases to check the issue described.\n+            # Numbers smaller than the decimal_pos precision should be represented as 0.000...000\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-300', 8, '0.00000000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py\nindex 1dc206f..3410b91 100644\n--- a/tests/prefetch_related/tests.py\n+++ b/tests/prefetch_related/tests.py\n@@ -1,10 +1,14 @@\n+\n from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import ObjectDoesNotExist\n from django.db import connection\n from django.db.models import Prefetch, QuerySet\n from django.db.models.query import get_prefetcher, prefetch_related_objects\n from django.test import TestCase, override_settings\n+import uuid\n from django.test.utils import CaptureQueriesContext\n+from django.contrib.contenttypes.fields import GenericForeignKey\n+from .models import Foo, Bar\n \n from .models import (\n     Author, Author2, AuthorAddress, AuthorWithAge, Bio, Book, Bookmark,\n",
  "django__django-11239": "",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..fc7a7d1 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -90,7 +90,13 @@ class FilteredRelationTests(TestCase):\n             [self.author1, self.author2]\n         )\n \n-    def test_with_join(self):\n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n                 book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n",
  "django__django-11276": "",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..9bd6e4d 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -254,6 +254,32 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), 'Set foo')\n \n \n+    def test_run_with_checks(self):\n+        \"\"\"\n+        Test running a command that requires system checks without the --skip-checks option,\n+        to verify that checks are not skipped.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['user_commands'])\n+        # Simulating a situation with failed checks by using an incorrect directory\n+        self.modify_settings(\n+            STATICFILES_DIRS={\n+                'append': 'incorrect_dir',\n+            }\n+        )\n+        out, err = self.run_manage(['set_option', '--set', 'bar'])\n+        self.assertIn('staticfiles.E001', err)\n+\n+    def test_skip_checks_usage(self):\n+        \"\"\"\n+        Test using the --skip-checks option to ensure it skips system checks.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n class UtilsTests(SimpleTestCase):\n \n     def test_no_existent_external_program(self):\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..783b78f 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,9 +1,46 @@\n+\n from django.test import SimpleTestCase\n from django.urls.resolvers import RegexPattern, RoutePattern\n-from django.utils.translation import gettext_lazy as _\n+from django.test.utils import override_settings\n+from django.urls.resolvers import get_resolver\n+\n+\n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default__root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_pre_request(self):\n+        # Test calling get_resolver before any request is handled.\n+        resolver = get_resolver()\n+        self.assertIs(resolver, get_resolver('urlpatterns.path_urls'))\n+\n+    def test_resolver_cache_post_request(self):\n+        # Test calling get_resolver after fictive request handling.\n+        from django.urls import set_urlconf\n+        set_urlconf('urlpatterns.path_urls')\n+\n+        resolver = get_resolver()\n+        self.assertIs(resolver, get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(resolver, get_resolver('urlpatterns.path_dynamic_urls'))\n \n+    def test_multiple_resolvers_constructed_unintentionally(self):\n+        # Ensure unintentional multiple constructions do not occur.\n+        resolver_before = get_resolver()\n+        \n+        # Simulate request handling.\n+        from django.urls import set_urlconf\n+        set_urlconf('urlpatterns.different_urls')\n \n-class RegexPatternTests(SimpleTestCase):\n+        resolver_after = get_resolver('urlpatterns.different_urls')\n+        \n+        # Ensure different URLconfs are cached separately.\n+        self.assertIsNot(resolver_before, resolver_after)\n \n     def test_str(self):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n@@ -12,4 +49,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..f6e1551 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -227,6 +227,39 @@ class BaseModelBackendTest:\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n \n+from django.contrib.auth import authenticate\n+from django.test import TestCase, override_settings\n+from auth_tests.test_auth_backends import CountingMD5PasswordHasher\n+from django.contrib.auth.models import User\n+\n+class AdditionalModelBackendTests(TestCase):\n+    UserModel = User\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authenticate_with_none_username_password(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        # Test with both username and password as None\n+        with self.assertNumQueries(0):\n+            authenticate(username=None, password=None)\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authenticate_with_none_username(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        # Test with username None and valid password\n+        with self.assertNumQueries(0):\n+            authenticate(username=None, password='password')\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authenticate_with_none_password(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        # Test with valid username and password None\n+        username = getattr(self.user, self.UserModel.USERNAME_FIELD, 'some_user')\n+        with self.assertNumQueries(0):\n+            authenticate(username=username, password=None)\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n class ModelBackendTest(BaseModelBackendTest, TestCase):\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..27ea0d3 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -115,7 +115,18 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__gte=2, num__lte=3)\n         self.assertNumbersEqual(qs1.union(qs2).order_by(F('num').desc()), [3, 2, 1, 0])\n \n-    def test_union_with_values(self):\n+    def test_union_with_values_list_column_change(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        # Column list with ('name', 'order')\n+        reserved_name = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name, ('a', 2))\n+        # Change column list to ('order',)\n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n+        # Change column list to ('name',)\n+        reserved_name_only = qs1.union(qs1).values_list('name').get()\n+        self.assertEqual(reserved_name_only, ('a',))\n         ReservedName.objects.create(name='a', order=2)\n         qs1 = ReservedName.objects.all()\n         reserved_name = qs1.union(qs1).values('name', 'order', 'id').get()\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..8cffab3 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -2,6 +2,7 @@ import asyncore\n import base64\n import mimetypes\n import os\n+from unittest import mock\n import shutil\n import smtpd\n import sys\n@@ -364,8 +365,14 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n-\n-    def test_encoding(self):\n+    \n+    @mock.patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        # Clear cached DNS name\n+        delattr(DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        self.assertIn('@xn--p8s937b>', email.message()['Message-ID'])\n         \"\"\"\n         Regression for #12791 - Encode body correctly with other encodings\n         than utf-8\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..ebcd508 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,47 @@\n+\n+class PositionField(Field):\n+    \"\"\"Custom field accessible only via instance.\"\"\"\n+    def contribute_to_class(self, cls, name):\n+        super().contribute_to_class(cls, name)\n+        setattr(cls, self.name, self)\n+\n+    def __get__(self, instance, owner):\n+        if instance is None:\n+            raise AttributeError()\n+\n+class FieldAccessibleByInstanceCheckTests(CheckTestCase):\n+\n+    def test_valid_field_accessible_via_instance(self):\n+        class TestModel(Model):\n+            field = PositionField()\n+        \n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+        \n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_invalid_field_not_in_model(self):\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            (\n+                \"The value of 'list_display[0]' refers to 'non_existent_field', \"\n+                \"which is not a callable, an attribute of 'TestModelAdmin', or an attribute or method on ''.\"\n+            ),\n+            'admin.E108'\n+        )\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..4d64175 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -403,7 +403,20 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(aggs['distinct_ratings'], 4)\n \n-    def test_non_grouped_annotation_not_in_group_by(self):\n+    def test_distinct_on_avg(self):\n+        \"\"\"\n+        Test DISTINCT usage with Avg to ensure it calculates the average\n+        of distinct values.\n+        \"\"\"\n+        books = Book.objects.aggregate(average_rating=Avg('rating', distinct=True))\n+        self.assertEqual(books['average_rating'], 4.125)\n+\n+    def test_distinct_on_sum(self):\n+        \"\"\"\n+        Test DISTINCT usage with Sum to ensure it sums only distinct values.\n+        \"\"\"\n+        books = Book.objects.aggregate(total_rating=Sum('rating', distinct=True))\n+        self.assertEqual(books['total_rating'], 16.5)\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n         excluded from the group by clause.\n",
  "django__django-11740": "",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..3fc4b97 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -219,11 +219,45 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser', 'foo', 12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_kwarg(self):\n+        out = StringIO()\n+        # Test with --foo-id passed as kwarg\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        out = StringIO()\n+        # Test with --foo-name passed as kwarg\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        out = StringIO()\n+        # Test without fulfilling required mutually exclusive group\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_args(self):\n         out = StringIO()\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_kwarg(self):\n+        out = StringIO()\n+        # Test with --foo-id passed as kwarg\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        out = StringIO()\n+        # Test with --foo-name passed as kwarg\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        out = StringIO()\n+        # Test without fulfilling required mutually exclusive group\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_required_args(self):\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..d2ae4ed 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -424,6 +424,10 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         form = AuthenticationForm(None, data)\n         self.assertEqual(form.fields['username'].max_length, 255)\n         self.assertEqual(form.errors, {})\n+        # Check that the maxlength attribute is added to the widget attrs\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+        # Check that the maxlength attribute is added to the widget attrs\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n \n     @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n     def test_username_field_max_length_defaults_to_254(self):\n@@ -436,6 +440,10 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         form = AuthenticationForm(None, data)\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n+        # Check that the maxlength attribute is added to the widget attrs\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+        # Check that the maxlength attribute is added to the widget attrs\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n \n     def test_username_field_label(self):\n \n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..ff0e868 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -256,6 +256,20 @@ class WriterTests(SimpleTestCase):\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n+            \n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n+            \n+        field_translated = models.CharField(default=TextTranslatedEnum.A, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string_translated = MigrationWriter.serialize(field_translated)[0]\n+        self.assertEqual(\n+            string_translated,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n \n         class BinaryEnum(enum.Enum):\n             A = b'a-value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..320109b 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -324,7 +325,30 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_year_less_than_70(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_two_digit_year(self, mocked_datetime):\n+        # Current date in the mock to simulate behavior\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Set up current dates and expected outputs based on RFC 7231 logic:\n+        utcnow_1 = datetime(2023, 1, 1)\n+        utcnow_2 = datetime(2070, 1, 1)\n+        tests = (\n+            # These tests ensure that the logic for years 00-69 maps to 2000-2069\n+            (utcnow_1, 'Friday, 01-Jan-23 10:00:00 GMT', datetime(2023, 1, 1, 10, 0, 0)),\n+            (utcnow_1, 'Saturday, 01-Jan-22 10:00:00 GMT', datetime(2022, 1, 1, 10, 0, 0)),\n+            (utcnow_2, 'Friday, 01-Jan-68 10:00:00 GMT', datetime(2068, 1, 1, 10, 0, 0)),\n+            # These tests ensure that the logic for years 70-99 maps to 1970-1999\n+            (utcnow_1, 'Thursday, 01-Jan-70 10:00:00 GMT', datetime(1970, 1, 1, 10, 0, 0)),\n+            (utcnow_1, 'Wednesday, 01-Jan-80 10:00:00 GMT', datetime(1980, 1, 1, 10, 0, 0)),\n+            (utcnow_2, 'Friday, 01-Jan-99 10:00:00 GMT', datetime(1999, 1, 1, 10, 0, 0)),\n+        )\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun Nov  6 08:49:37 0037')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(2037, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..9fc843b 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,32 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+import copy\n+from django.forms import CharField, Form\n+from django.test import SimpleTestCase\n+\n+class FormFieldsDeepCopyTests(SimpleTestCase):\n+    \n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        \n+        # Ensure the field copy is not the same object as the field\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+        \n+        # Ensure changes to the error messages of the original do not affect the copy\n+        field.error_messages['invalid'] = 'Another error message.'\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Form custom error message.')\n+\n+        # Ensure changes to the error messages of the copy do not affect the original\n+        field_copy.error_messages['invalid'] = 'Changed error message for copy only.'\n+        self.assertEqual(field.error_messages['invalid'], 'Another error message.')\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..9098e51 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n@@ -206,6 +208,12 @@ class BulkCreateTests(TestCase):\n         self.assertEqual(NoFields.objects.count(), 2)\n \n     @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        objs = [Country() for _ in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n     def test_explicit_batch_size_efficiency(self):\n         objs = [TwoFields(f1=i, f2=i) for i in range(0, 100)]\n         with self.assertNumQueries(2):\n@@ -215,6 +223,12 @@ class BulkCreateTests(TestCase):\n             TwoFields.objects.bulk_create(objs, len(objs))\n \n     @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        objs = [Country() for _ in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n     def test_bulk_insert_expressions(self):\n         Restaurant.objects.bulk_create([\n             Restaurant(name=\"Sam's Shake Shack\"),\n",
  "django__django-11964": "diff --git a/tests/model_fields/test_charfield.py b/tests/model_fields/test_charfield.py\nindex c6162e5..3a9cb13 100644\n--- a/tests/model_fields/test_charfield.py\n+++ b/tests/model_fields/test_charfield.py\n@@ -1,3 +1,4 @@\n+\n from unittest import skipIf\n \n from django.core.exceptions import ValidationError\n@@ -28,7 +29,26 @@ class TestCharField(TestCase):\n         p.refresh_from_db()\n         self.assertEqual(p.title, 'Smile \ud83d\ude00')\n \n-    def test_assignment_from_choice_enum(self):\n+    def test_enum_field_type_integrity(self):\n+        class MyChoice(models.TextChoices):\n+            FIRST_CHOICE = \"first\", \"First\"\n+            SECOND_CHOICE = \"second\", \"Second\"\n+\n+        class MyModel(models.Model):\n+            choice_field = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+        # Test creation\n+        obj = MyModel.objects.create(choice_field=MyChoice.FIRST_CHOICE)\n+        self.assertIsInstance(obj.choice_field, str)\n+        self.assertEqual(obj.choice_field, \"first\")\n+\n+        # Test retrieval\n+        obj.refresh_from_db()\n+        self.assertIsInstance(obj.choice_field, str)\n+        self.assertEqual(obj.choice_field, \"first\")\n+\n+        # Check enum from field value\n+        self.assertEqual(MyChoice(obj.choice_field), MyChoice.FIRST_CHOICE)\n         class Event(models.TextChoices):\n             C = 'Carnival!'\n             F = 'Festival!'\n",
  "django__django-11999": "",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..fb46504 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -12,6 +12,8 @@ from django.test import (\n from django.test.utils import override_settings\n from django.utils import timezone\n \n+from django.db import connection\n+from django.db.models import Index\n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n@@ -70,7 +72,61 @@ class SchemaIndexesTests(TestCase):\n             index_sql[0]\n         )\n \n-    def test_index_together_single_list(self):\n+    def test_columns_list_sql(self):\n+        \"\"\"\n+        Test that CREATE INDEX statements are formatted correctly with\n+        proper whitespace for columns without descending order or opclasses.\n+        \"\"\"\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        \"\"\"\n+        Test that CREATE INDEX statements are formatted correctly with\n+        proper whitespace for columns with descending order.\n+        \"\"\"\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        \"\"\"\n+        Test that CREATE INDEX statements are formatted correctly with\n+        proper whitespace for columns with opclasses.\n+        \"\"\"\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        \"\"\"\n+        Test that CREATE INDEX statements are formatted correctly with\n+        proper whitespace for columns with descending order and opclasses.\n+        \"\"\"\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n         # Test for using index_together with a single list (#22172)\n         index_sql = connection.schema_editor()._model_indexes_sql(IndexTogetherSingleList)\n         self.assertEqual(len(index_sql), 1)\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..67732a6 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -7,6 +8,7 @@ from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n+from django.db.models.sql.where import WhereNode\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n@@ -102,7 +104,24 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(a_isnull, RelatedIsNull)\n         self.assertIsInstance(a_isnull.lhs, SimpleCol)\n         self.assertEqual(a_isnull.lhs.target, ObjectC._meta.get_field('objecta'))\n-        b_isnull = where.children[1]\n+\n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        # The right-hand side (rhs) should remain a list.\n+        self.assertIsInstance(name_exact.rhs, list)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+        \n+    def test_tuple_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('x', 'y')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        # The rhs should remain a tuple.\n+        self.assertIsInstance(name_exact.rhs, tuple)\n+        self.assertEqual(name_exact.rhs, ('x', 'y'))\n         self.assertIsInstance(b_isnull, RelatedIsNull)\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n",
  "django__django-12125": "",
  "django__django-12143": "",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..943a906 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,8 +1,10 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n     docutils_is_available, parse_docstring, parse_rst, trim_docstring,\n )\n+from django.test.utils import captured_stderr\n \n from .tests import AdminDocsSimpleTestCase\n \n@@ -90,7 +92,25 @@ class TestUtils(AdminDocsSimpleTestCase):\n         )\n         self.assertHTMLEqual(description_output, description_rendered)\n \n-    def test_initial_header_level(self):\n+    def test_parse_rst_with_docstring_no_leading_line_feed(self):\n+        \"\"\"\n+        Test parse_rst with a docstring that starts on the first line, verifying no errors are reported.\n+        \"\"\"\n+        title, body, _ = parse_docstring('firstline\\n\\n    second line')\n+        with captured_stderr() as stderr:\n+            self.assertEqual(parse_rst(title, ''), '<p>firstline</p>\\n')\n+            self.assertEqual(parse_rst(body, ''), '<p>second line</p>\\n')\n+        self.assertEqual(stderr.getvalue(), '')\n+\n+    def test_trim_docstring_no_leading_line_feed(self):\n+        \"\"\"\n+        Test trim_docstring with a docstring that starts on the first line, ensuring correct indentation handling.\n+        \"\"\"\n+        docstring = \"\"\"First line with text.\n+        \n+        Second paragraph starts here.\"\"\"\n+        expected_trimmed = \"First line with text.\\n\\nSecond paragraph starts here.\"\n+        self.assertEqual(trim_docstring(docstring), expected_trimmed)\n         header = 'should be h3...\\n\\nHeader\\n------\\n'\n         output = parse_rst(header, 'header')\n         self.assertIn('<h3>Header</h3>', output)\n",
  "django__django-12193": "diff --git a/tests/forms_tests/widget_tests/test_checkboxinput.py b/tests/forms_tests/widget_tests/test_checkboxinput.py\nindex 5c5e45d..2eeac32 100644\n--- a/tests/forms_tests/widget_tests/test_checkboxinput.py\n+++ b/tests/forms_tests/widget_tests/test_checkboxinput.py\n@@ -82,10 +82,17 @@ class CheckboxInputTest(WidgetTest):\n         \"\"\"\n         self.assertFalse(self.widget.value_from_datadict({}, {}, 'testing'))\n \n+    def test_get_context_no_mutation_after_true(self):\n+        widget = forms.SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('name', [False, True, False, True])\n+        expected_attrs = [{'checked': False}, {'checked': True}, {'checked': False}, {'checked': True}]\n+        generated_attrs = [subwidget['attrs'] for subwidget in context['widget']['subwidgets']]\n+        self.assertEqual(generated_attrs, expected_attrs)\n+\n     def test_value_from_datadict_string_int(self):\n         value = self.widget.value_from_datadict({'testing': '0'}, {}, 'testing')\n         self.assertIs(value, True)\n \n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({'field': 'value'}, {}, 'field'), False)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n+        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..2630143 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -252,6 +252,10 @@ class SmallPKData(models.Model):\n # class TimePKData(models.Model):\n #    data = models.TimeField(primary_key=True)\n \n+import uuid\n+\n+class UUIDDefaultData(models.Model):\n+    data = models.UUIDField(primary_key=True, default=uuid.uuid4)\n \n class UUIDData(models.Model):\n     data = models.UUIDField(primary_key=True)\n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..3270f9d 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -87,6 +87,23 @@ class SimpleTagTests(TagTestCase):\n             t = self.engine.from_string(\"%s as var %%}Result: {{ var }}\" % entry[0][0:-2])\n             self.assertEqual(t.render(c), \"Result: %s\" % entry[1])\n \n+    def test_keyword_only_args_with_defaults(self):\n+        # Template without providing the keyword, should use default\n+        t = self.engine.from_string('{% load custom %}{% simple_keyword_only_default %}')\n+        self.assertEqual(t.render(Context({})), 'simple_keyword_only_default - Expected result: 42')\n+        \n+        # Template providing the keyword argument with different value\n+        t = self.engine.from_string('{% load custom %}{% simple_keyword_only_default kwarg=99 %}')\n+        self.assertEqual(t.render(Context({})), 'simple_keyword_only_default - Expected result: 99')\n+        \n+        # Template with duplicate keyword arguments should raise error\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\"):\n+            self.engine.from_string('{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}').render(Context({}))\n+\n+        # Testing error message for non-existing unexpected keyword argument\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"'simple_keyword_only_default' received unexpected keyword argument 'nonexistent'\"):\n+            self.engine.from_string('{% load custom %}{% simple_keyword_only_default nonexistent=\"oops\" %}').render(Context({}))\n+\n     def test_simple_tag_errors(self):\n         errors = [\n             (\"'simple_one_default' received unexpected keyword argument 'three'\",\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..28ebefa 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2425,6 +2426,20 @@ Password: <input type=\"password\" name=\"password\" required>\n             file1 = FileField()\n \n         f = FileForm(auto_id=False)\n+        \n+        # Test case for ensuring 'required' attribute is not present when initial data exists\n+        f_with_initial = FileForm(initial={'file1': SimpleUploadedFile('test.txt', b'file_content')}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f_with_initial.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+        # Test case to ensure 'required' attribute is still present when data is provided but no initial data\n+        f_with_data = FileForm(data={'file1': SimpleUploadedFile('test.txt', b'new_file_content')}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f_with_data.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n         self.assertHTMLEqual(\n             f.as_table(),\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..20a598d 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,23 @@\n+\n+from django.template import Context, Template\n+\n+class EnumTemplatesTest(SimpleTestCase):\n+    def test_enum_usage_in_template(self):\n+        class YearInSchool(models.TextChoices):\n+            FRESHMAN = 'FR', _('Freshman')\n+            SOPHOMORE = 'SO', _('Sophomore')\n+            JUNIOR = 'JR', _('Junior')\n+            SENIOR = 'SR', _('Senior')\n+\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}Freshman{% else %}Not Freshman{% endif %}')\n+        context = Context({'YearInSchool': YearInSchool, 'student': {'year_in_school': YearInSchool.FRESHMAN}})\n+        output = template.render(context)\n+        self.assertEqual(output.strip(), 'Freshman')\n+\n+        context = Context({'YearInSchool': YearInSchool, 'student': {'year_in_school': YearInSchool.SENIOR}})\n+        output = template.render(context)\n+        self.assertEqual(output.strip(), 'Not Freshman')\n+\n import datetime\n import decimal\n import ipaddress\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..a428e3a 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -176,6 +176,25 @@ class UtilsTests(SimpleTestCase):\n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n \n+    def test_jsonfield_display_for_field(self):\n+        \"\"\"\n+        Test JSONField values are displayed correctly as JSON strings in readonly fields.\n+        \"\"\"\n+        tests = [\n+            ({\"a\": {\"b\": \"c\"}}, '{\"a\": {\"b\": \"c\"}}'),\n+            ([\"a\", \"b\"], '[\"a\", \"b\"]'),\n+            ('a', '\"a\"'),\n+            ({\"foo\": \"bar\"}, '{\"foo\": \"bar\"}'),\n+            # Consider edge cases or complex nested objects.\n+            ({\"a\": [1, {\"b\": 2}, \"c\"], \"d\": \"e\"}, '{\"a\": [1, {\"b\": 2}, \"c\"], \"d\": \"e\"}'),\n+            # Invalid JSON cases should be carefully considered in the implementation to prevent breaking.\n+        ]\n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                field = models.JSONField()\n+                display_value = display_for_field(value, field, self.empty_value)\n+                self.assertEqual(display_value, expected_display)\n+\n     def test_number_formats_display_for_field(self):\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..391139c 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1015,7 +1015,37 @@ class OtherModelTests(SimpleTestCase):\n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n \n-    def test_m2m_table_name_clash(self):\n+    def test_onetoone_parent_link_with_ordering(self):\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        class PickingReversed(Document):\n+            origin = models.OneToOneField(Document, related_name='picking_reversed', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        # Expecting no ImproperlyConfigured errors should be raised\n+        self.assertEqual(Picking.check(), [])\n+        self.assertEqual(PickingReversed.check(), [])\n+\n+    def test_duplicate_parent_link_error(self):\n+        class Base(models.Model):\n+            pass\n+\n+        class Derived1(Base):\n+            derived1_ptr = models.OneToOneField(Base, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        def create_derived2():\n+            class Derived2(Base):\n+                derived2_ptr = models.OneToOneField(Base, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        # Creating two MTI with parent_link=True should raise an ImproperlyConfigured error\n+        self.assertEqual(Derived1.check(), [])\n+        with self.assertRaises(ImproperlyConfigured):\n+            create_derived2()\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n \n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..7061827 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -223,6 +223,15 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         ret = self.process_request(\"get\", \"/some/url\")\n         self.assertIsNone(ret)\n \n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        With SECURE_REFERRER_POLICY not set, the middleware should add a\n+        \"Referrer-Policy: same-origin\" header to the response by default.\n+        \"\"\"\n+        with self.settings(SECURE_REFERRER_POLICY=None):\n+            response = self.process_response()\n+            self.assertEqual(response['Referrer-Policy'], 'same-origin')\n+\n     @override_settings(SECURE_REFERRER_POLICY=None)\n     def test_referrer_policy_off(self):\n         \"\"\"\n@@ -254,4 +263,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..22b578b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -18,6 +18,8 @@ from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n )\n from django.db.models.sql import constants\n+from django.utils.functional import SimpleLazyObject\n+from .models import Manager\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n@@ -28,7 +30,25 @@ from .models import (\n )\n \n \n-class BasicExpressionsTests(TestCase):\n+class LazyObjectSubqueryTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.manager = Manager.objects.create(name=\"Existing Manager\")\n+        cls.company = Company.objects.create(\n+            name=\"Test Corp\",\n+            ceo=Employee.objects.create(firstname=\"John\", lastname=\"Doe\", manager=cls.manager)\n+        )\n+\n+    def test_subquery_filter_by_lazy(self):\n+        max_manager = SimpleLazyObject(lambda: Manager.objects.get(pk=self.manager.pk))\n+        qs = Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    lastname=OuterRef('ceo__lastname'),\n+                ).values('manager'),\n+            ),\n+        ).filter(ceo_manager=max_manager)\n+        self.assertEqual(qs.get(), self.company)\n     @classmethod\n     def setUpTestData(cls):\n         cls.example_inc = Company.objects.create(\n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..f4e6ac3 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..521d1f0 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,14 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n+\n+        # Validate that execute_sql_flush no longer requires an alias argument\n+        with self.assertRaises(TypeError):\n+            connection.ops.execute_sql_flush(connection.alias, sql_list, sql_list)\n+\n+        # Test behavior without alias to ensure still functional\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +188,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..9c8fcd0 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,8 +2444,32 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n-\n-    def test_mti_inheritance_model_removal(self):\n+    def test_add_model_with_field_removed_from_base_model_reversed(self):\n+        \"\"\"\n+        This ensures that reversing the order of the operations in migrations\n+        does not raise any FieldError when a field is moved from a base model\n+        to a subclass.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        # Reverse the usual migration order to RemoveField first, then CreateModel\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n         Animal = ModelState('app', 'Animal', [\n             (\"id\", models.AutoField(primary_key=True)),\n         ])\n@@ -2453,4 +2477,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..80eda2e 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -5,7 +5,8 @@ from operator import attrgetter\n \n from django.core.exceptions import FieldError\n from django.db import connection\n-from django.db.models import Exists, Max, OuterRef\n+from django.db.models import Exists, Max, OuterRef, Q\n+from django.test.utils import isolate_apps\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -194,7 +195,28 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    @isolate_apps('lookup')\n+    def test_in_bulk_unique_constraint(self):\n+        class TestModel(models.Model):\n+            unique_slug = models.CharField(max_length=100)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['unique_slug'], name='unique_slug_constraint'),\n+                ]\n+\n+        # Create objects with unique slugs\n+        obj1 = TestModel.objects.create(unique_slug='slug1')\n+        obj2 = TestModel.objects.create(unique_slug='slug2')\n+\n+        # Test in_bulk with UniqueConstraint field\n+        self.assertEqual(\n+            TestModel.objects.in_bulk(['slug1', 'slug2'], field_name='unique_slug'),\n+            {\n+                'slug1': obj1,\n+                'slug2': obj2,\n+            }\n+        )\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "",
  "django__django-13012": "",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..98358f7 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1198,6 +1198,16 @@ class Queries1Tests(TestCase):\n             'mixed_case_field_category__CaTeGoRy',\n             'mixed_case_db_column_category__category',\n         )\n+\n+    def test_filter_with_non_filterable_field(self):\n+        # Setup the ExtraInfo object with filterable=False\n+        e2_non_filterable = ExtraInfo.objects.create(info='e2', note=self.n2, value=41)\n+        # Testing filtering with a field that is not supposed to be filterable\n+        try:\n+            authors = Author.objects.filter(extra=e2_non_filterable)\n+            self.assertSequenceEqual(authors, [self.a3, self.a4])\n+        except models.NotSupportedError:\n+            self.fail(\"Author.objects.filter() raised NotSupportedError unexpectedly!\")\n         self.assertTrue(qs.first())\n \n     def test_excluded_intermediary_m2m_table_joined(self):\n@@ -1205,11 +1215,34 @@ class Queries1Tests(TestCase):\n             Note.objects.filter(~Q(tag__annotation__name=F('note'))),\n             [self.n1, self.n2, self.n3],\n         )\n+\n+    def test_filter_with_non_filterable_field(self):\n+        # Setup the ExtraInfo object with filterable=False\n+        e2_non_filterable = ExtraInfo.objects.create(info='e2', note=self.n2, value=41)\n+        # Testing filtering with a field that is not supposed to be filterable\n+        try:\n+            authors = Author.objects.filter(extra=e2_non_filterable)\n+            self.assertSequenceEqual(authors, [self.a3, self.a4])\n+        except models.NotSupportedError:\n+            self.fail(\"Author.objects.filter() raised NotSupportedError unexpectedly!\")\n         self.assertSequenceEqual(\n             Note.objects.filter(tag__annotation__name='a1').filter(~Q(tag__annotation__name=F('note'))),\n             [],\n         )\n \n+    def test_filter_with_non_filterable_field(self):\n+        # Setup the ExtraInfo object with filterable=False\n+        e2_non_filterable = ExtraInfo.objects.create(info='e2', note=self.n2, value=41)\n+        # Testing filtering with a field that is not supposed to be filterable\n+        try:\n+            authors = Author.objects.filter(extra=e2_non_filterable)\n+            self.assertSequenceEqual(authors, [self.a3, self.a4])\n+        except models.NotSupportedError:\n+            self.fail(\"Author.objects.filter() raised NotSupportedError unexpectedly!\")\n+\n+from django.db import models\n+from django.test import TestCase\n+from .models import Author, ExtraInfo\n \n class Queries2Tests(TestCase):\n     @classmethod\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..689030c 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,41 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referential_fk_order_by_root_id(self):\n+        # Setup: Create a OneModel instance with self-referential foreign key\n+        root_instance = OneModel.objects.create(oneval=1)\n+        child_instance = OneModel.objects.create(root=root_instance, oneval=2)\n+        other_instance = OneModel.objects.create(oneval=3)\n+\n+        # Create TwoModel instances linking to OneModel instances\n+        TwoModel.objects.create(record=root_instance, twoval=10)\n+        TwoModel.objects.create(record=child_instance, twoval=20)\n+        TwoModel.objects.create(record=other_instance, twoval=30)\n+\n+        # Test ordering by 'record__root_id' should not be affected by OneModel Meta ordering\n+        expected_order = [10, 30, 20]  # IDs associated with TwoModel instances\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3])\n+        query_ids = list(qs.order_by('record__root_id').values_list('twoval', flat=True))\n+        \n+        self.assertEqual(query_ids, expected_order)\n+\n+    def test_self_referential_fk_desc_order_by_root_id(self):\n+        # Setup: Same setup as the previous test\n+        root_instance = OneModel.objects.create(oneval=1)\n+        child_instance = OneModel.objects.create(root=root_instance, oneval=2)\n+        other_instance = OneModel.objects.create(oneval=3)\n+\n+        TwoModel.objects.create(record=root_instance, twoval=10)\n+        TwoModel.objects.create(record=child_instance, twoval=20)\n+        TwoModel.objects.create(record=other_instance, twoval=30)\n+\n+        # Test ordering by '-record__root_id' should be in descending order\n+        expected_order_desc = [20, 30, 10]  # Descending order of IDs associated with TwoModel\n+        qs_desc = TwoModel.objects.filter(record__oneval__in=[1, 2, 3])\n+        query_ids_desc = list(qs_desc.order_by('-record__root_id').values_list('twoval', flat=True))\n+\n+        self.assertEqual(query_ids_desc, expected_order_desc)\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +388,41 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_self_referential_fk_order_by_root_id(self):\n+        # Setup: Create a OneModel instance with self-referential foreign key\n+        root_instance = OneModel.objects.create(oneval=1)\n+        child_instance = OneModel.objects.create(root=root_instance, oneval=2)\n+        other_instance = OneModel.objects.create(oneval=3)\n+\n+        # Create TwoModel instances linking to OneModel instances\n+        TwoModel.objects.create(record=root_instance, twoval=10)\n+        TwoModel.objects.create(record=child_instance, twoval=20)\n+        TwoModel.objects.create(record=other_instance, twoval=30)\n+\n+        # Test ordering by 'record__root_id' should not be affected by OneModel Meta ordering\n+        expected_order = [10, 30, 20]  # IDs associated with TwoModel instances\n+        qs = TwoModel.objects.filter(record__oneval__in=[1, 2, 3])\n+        query_ids = list(qs.order_by('record__root_id').values_list('twoval', flat=True))\n+        \n+        self.assertEqual(query_ids, expected_order)\n+\n+    def test_self_referential_fk_desc_order_by_root_id(self):\n+        # Setup: Same setup as the previous test\n+        root_instance = OneModel.objects.create(oneval=1)\n+        child_instance = OneModel.objects.create(root=root_instance, oneval=2)\n+        other_instance = OneModel.objects.create(oneval=3)\n+\n+        TwoModel.objects.create(record=root_instance, twoval=10)\n+        TwoModel.objects.create(record=child_instance, twoval=20)\n+        TwoModel.objects.create(record=other_instance, twoval=30)\n+\n+        # Test ordering by '-record__root_id' should be in descending order\n+        expected_order_desc = [20, 30, 10]  # Descending order of IDs associated with TwoModel\n+        qs_desc = TwoModel.objects.filter(record__oneval__in=[1, 2, 3])\n+        query_ids_desc = list(qs_desc.order_by('-record__root_id').values_list('twoval', flat=True))\n+\n+        self.assertEqual(query_ids_desc, expected_order_desc)\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..0f6e4c2 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -615,7 +615,36 @@ class BaseCacheTests:\n                 count += 1\n         self.assertEqual(count, final_count)\n \n-    def test_cull(self):\n+    def test_cull_db_backend_with_empty_return(self):\n+        \"\"\"\n+        Test _cull method in database cache backend when cursor.fetchone() returns None.\n+        This emulates a scenario where no data is returned from cache_key_culling_sql.\n+        \"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        \n+        # Mock or override the method to ensure fetchone returns None\n+        original_cache_key_culling_sql = connections['default'].ops.cache_key_culling_sql\n+\n+        try:\n+            def mock_cache_key_culling_sql():\n+                return \"SELECT cache_key FROM django_cache WHERE 1=0\"\n+            \n+            connections['default'].ops.cache_key_culling_sql = mock_cache_key_culling_sql\n+            cull_cache._max_entries = 1  # Force culling due to low max entries.\n+\n+            # Make sure it doesn't raise an error\n+            with connection.cursor() as cursor:\n+                self.assertIsNone(cursor.fetchone(), msg=\"Expected no rows to be returned\")\n+\n+            cull_cache.set('key', 'value')\n+            self.assertEqual(cull_cache.get('key'), 'value', \"Cache value should be retrievable after attempted culling.\")\n+\n+        finally:\n+            # Restore the original method\n+            connections['default'].ops.cache_key_culling_sql = original_cache_key_culling_sql\n         self._perform_cull_test('cull', 50, 29)\n \n     def test_zero_cull(self):\n",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..6334003 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1645,7 +1645,52 @@ class ModelFormBasicTests(TestCase):\n         obj.full_clean()\n \n \n-class ModelMultipleChoiceFieldTests(TestCase):\n+from django.test import TestCase\n+from django import forms\n+from .models import Article, Writer\n+\n+class ForeignKeyValidationTests(TestCase):\n+    def setUp(self):\n+        # Create an archived writer to be used in tests\n+        self.writer = Writer.objects.create(name='Archived Writer')\n+\n+    def test_foreign_key_validation_with_default_manager(self):\n+        class FavoriteArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+\n+        data = {\n+            'title': 'My Article',\n+            'writer': self.writer.pk,\n+        }\n+        form = FavoriteArticleForm(data)\n+        self.assertFalse(form.is_valid())\n+        self.assertIn(\n+            'writer',\n+            form.errors,\n+            \"Expected a validation error because the writer is not available in the default manager's queryset.\"\n+        )\n+\n+    def test_foreign_key_validation_with_base_manager(self):\n+        class FavoriteArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                # Allow using the base manager for writers\n+                self.fields['writer'].queryset = Writer._base_manager.all()\n+\n+        data = {\n+            'title': 'My Article',\n+            'writer': self.writer.pk,\n+        }\n+        form = FavoriteArticleForm(data)\n+        self.assertTrue(form.is_valid(), \"Form should be valid when using base manager for ForeignKey.\")\n+        article = form.save()\n+        self.assertEqual(article.writer, self.writer)\n     @classmethod\n     def setUpTestData(cls):\n         cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n",
  "django__django-13112": "",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..3677ec3 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1627,6 +1627,16 @@ class FTimeDeltaTests(TestCase):\n         for e in qs:\n             self.assertEqual(e.delta, delta)\n \n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_datetime_subtraction_without_expression_wrapper(self):\n+        # Test temporal subtraction directly without ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.end - experiment.start\n+            self.assertEqual(experiment.delta, expected_delta)\n+\n     def test_duration_with_datetime(self):\n         # Exclude e1 which has very high precision so we can test this on all\n         # backends regardless of whether or not it supports\n",
  "django__django-13158": "",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..ca89718 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -34,6 +34,7 @@ from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -323,6 +324,14 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'a test key': 'a test value'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n     def test_decode_failure_logged_to_security(self):\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..8ec160a 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -1,6 +1,9 @@\n import time\n \n from django.core.exceptions import ImproperlyConfigured\n+from django.shortcuts import get_object_or_404\n+from django.utils.functional import SimpleLazyObject\n+from .models import Artist, Account\n from django.http import HttpResponse\n from django.test import (\n     RequestFactory, SimpleTestCase, ignore_warnings, override_settings,\n@@ -590,7 +593,23 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering(self):\n+        class OfferView(TemplateView):\n+            template_name = 'offers/offer.html'\n+\n+            def get_context_data(self, *, offer_slug, **kwargs):\n+                context = super().get_context_data(**kwargs)\n+                # The offer_slug coming from kwargs should be of type str, but in issue it's SimpleLazyObject\n+                self.assertIsInstance(offer_slug, str, \"offer_slug is not properly resolved to string\")\n+                offer = get_object_or_404(Account, slug=str(offer_slug))\n+                return {**context, 'offer': offer}\n+\n+        account = Account.objects.create(slug='test-slug')\n+        # Simulate the SimpleLazyObject issue\n+        lazy_slug = SimpleLazyObject(lambda: account.slug)\n+        response = OfferView.as_view()(self.rf.get('/'), offer_slug=lazy_slug)\n+        self.assertEqual(response.context_data['offer'], account)\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..66db1ab 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,7 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2815,9 +2816,66 @@ class LimitChoicesToTests(TestCase):\n         f = StumpJokeWithCustomFieldForm()\n         self.assertEqual(f.fields['custom'].queryset, 42)\n \n-    def test_fields_for_model_applies_limit_choices_to(self):\n-        fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n-        self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        self.threepwood = Character.objects.create(username='Guybrush Threepwood', last_action='2023-01-01')\n+        self.marley = Character.objects.create(username='Elaine Marley', last_action='2023-01-02')\n+\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n \n     def test_callable_called_each_time_form_is_instantiated(self):\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..25051f6 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -66,6 +66,29 @@ class GetStorageClassTests(SimpleTestCase):\n             get_storage_class('django.core.files.nonexistent_storage.NonexistentStorage')\n \n \n+class FileFieldDeconstructionTests(TestCase):\n+    \n+    def test_callable_storage_deconstruction(self):\n+        \"\"\"\n+        Test that a FileField with a callable storage deconstructs correctly without\n+        evaluating the callable.\n+        \"\"\"\n+        model_instance = Storage()  # Assuming Storage model uses callable_storage\n+        field = model_instance._meta.get_field('storage_callable')\n+        *_, kwargs = field.deconstruct()\n+        \n+        self.assertIn('storage', kwargs)\n+        self.assertEqual(kwargs['storage'], callable_storage)\n+    \n+    def test_evaluated_storage_not_inlined(self):\n+        \"\"\"\n+        Ensure the deconstructed storage does not lead to evaluated storage being inlined.\n+        \"\"\"\n+        model_instance = Storage()\n+        field = model_instance._meta.get_field('storage_callable')\n+        *_, kwargs = field.deconstruct()\n+        self.assertNotEqual(kwargs['storage'], callable_storage())\n+    \n class FileSystemStorageTests(unittest.TestCase):\n \n     def test_deconstruction(self):\n",
  "django__django-13346": "",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..3b1c593 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -18,6 +18,8 @@ from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n from django.utils import timezone\n+import pytz\n+from datetime import datetime\n \n from ..models import Author, DTModel, Fan\n \n@@ -1121,6 +1123,23 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         melb = pytz.timezone('Australia/Melbourne')\n         pacific = pytz.timezone('US/Pacific')\n \n+        # Test cases specifically for TruncDate and TruncTime with tzinfo\n+        model = DTModel.objects.annotate(\n+            melb_date=TruncDate('start_datetime', tzinfo=melb),\n+            pacific_date=TruncDate('start_datetime', tzinfo=pacific),\n+            melb_time=TruncTime('start_datetime', tzinfo=melb),\n+            pacific_time=TruncTime('start_datetime', tzinfo=pacific),\n+        ).order_by('start_datetime').get()\n+\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        pacific_start_datetime = start_datetime.astimezone(pacific)\n+\n+        self.assertEqual(model.melb_date, melb_start_datetime.date())\n+        self.assertEqual(model.pacific_date, pacific_start_datetime.date())\n+        self.assertEqual(model.melb_time, melb_start_datetime.time())\n+        self.assertEqual(model.pacific_time, pacific_start_datetime.time())\n+\n+        # Existing tests for year truncation\n         model = DTModel.objects.annotate(\n             melb_year=TruncYear('start_datetime', tzinfo=melb),\n             pacific_year=TruncYear('start_datetime', tzinfo=pacific),\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..688f35e 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -103,6 +103,44 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n \n+from django.db import models\n+from django.test import TestCase\n+\n+class FieldEqualityTests(TestCase):\n+    def test_abstract_inherited_fields_unique(self):\n+        \"\"\"Field instances from different models inheriting the same abstract model should be distinguishable.\"\"\"\n+        class AbstractBase(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class ModelX(AbstractBase):\n+            pass\n+\n+        class ModelY(AbstractBase):\n+            pass\n+\n+        class ModelZ(AbstractBase):\n+            pass\n+\n+        field_x = ModelX._meta.get_field('field')\n+        field_y = ModelY._meta.get_field('field')\n+        field_z = ModelZ._meta.get_field('field')\n+\n+        # Ensure they are not equal.\n+        self.assertNotEqual(field_x, field_y)\n+        self.assertNotEqual(field_x, field_z)\n+        self.assertNotEqual(field_y, field_z)\n+\n+        # Ensure they have different hashes.\n+        self.assertNotEqual(hash(field_x), hash(field_y))\n+        self.assertNotEqual(hash(field_x), hash(field_z))\n+        self.assertNotEqual(hash(field_y), hash(field_z))\n+        \n+        # Ensure a set of these fields has the correct size.\n+        self.assertEqual(len({field_x, field_y, field_z}), 3)\n+\n class ChoicesTests(SimpleTestCase):\n \n     @classmethod\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..dd160ab 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -8,7 +9,7 @@ from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..8b3f64d 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2075,8 +2075,36 @@ class QuerysetOrderedTests(unittest.TestCase):\n \n     def test_empty_queryset(self):\n         self.assertIs(Annotation.objects.none().ordered, True)\n+    def test_annotated_default_ordering(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('num_notes').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Annotation.objects.values('notes').annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('notes').ordered, True)\n+\n+    def test_annotated_ordering_group_by(self):\n+        # Specifically test a case with GROUP BY and Meta ordering\n+        class MetaOrderedModel(models.Model):\n+            name = models.CharField(max_length=100)\n+            \n+            class Meta:\n+                ordering = ['name']\n+        \n+        # Create a simplified setup for the test\n+        MetaOrderedModel.objects.create(name=\"example1\")\n+        MetaOrderedModel.objects.create(name=\"example2\")\n+\n+        qs = MetaOrderedModel.objects.annotate(num_instances=Count('name'))\n+        \n+        # This query implicitly uses GROUP BY but should not be marked ordered\n+        self.assertIs(qs.ordered, False)\n \n-    def test_order_by_extra(self):\n+        # Forcing order_by should make it ordered\n+        qs_ordered = qs.order_by('name')\n+        self.assertIs(qs_ordered.ordered, True)\n         self.assertIs(Annotation.objects.all().extra(order_by=['id']).ordered, True)\n \n     def test_annotated_ordering(self):\n",
  "django__django-13516": "",
  "django__django-13551": "",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..139f4e0 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,3 +1,5 @@\n+\n+from django.db.models import Q, UniqueConstraint\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n@@ -138,7 +140,35 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithUniqueConstraint')\n+    def test_username_field_with_unique_constraint(self):\n+        class UserWithUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='user_username_unique_constraint'),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithoutUniqueConstraint')\n+    def test_username_field_without_unique_constraint(self):\n+        class UserWithoutUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Error(\n+                \"'UserWithoutUniqueConstraint.username' must be unique because \"\n+                \"it is named as the 'USERNAME_FIELD'.\",\n+                obj=UserWithoutUniqueConstraint,\n+                id='auth.E003',\n+            ),\n+        ])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..f46a4cc 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1310,8 +1310,18 @@ class AggregateTestCase(TestCase):\n             contact_publisher__isnull=False,\n         ).annotate(count=Count('authors'))\n         self.assertSequenceEqual(books_qs, [book])\n+\n+    def test_aggregation_random_ordering_with_related_model(self):\n+        \"\"\"Test random ordering does not affect aggregation results on related models.\"\"\"\n+        t = Thing.objects.create()\n+        Related.objects.create(thing=t)\n+        Related.objects.create(thing=t)\n+        things = Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc')\n+        expected_result = [{'id': t.id, 'rc': 2}]\n+        result_set = [{'id': thing['id'], 'rc': thing['rc']} for thing in things]\n+        self.assertCountEqual(result_set, expected_result)\n         # FIXME: GROUP BY doesn't need to include a subquery with\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..cca85e0 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -8,6 +9,7 @@ from unittest import mock\n \n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n+from collections import namedtuple\n from django.db.models import (\n     AutoField, Avg, BinaryField, BooleanField, Case, CharField, Count,\n     DateField, DateTimeField, DecimalField, DurationField, Exists, Expression,\n@@ -815,7 +817,49 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        # The original test case from the patch to verify the issue.\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+    def test_range_lookup_standard_tuple(self):\n+        # Verify that a standard tuple works correctly to prevent regressions.\n+        qs = Company.objects.filter(\n+            num_employees__range=(51, 100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+    def test_range_lookup_namedtuple_edge_cases(self):\n+        # Edge case test: bound of the range at the exact match.\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=99, maximum=99),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+        # Edge case with no results in the range.\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=100, maximum=200),\n+        )\n+        self.assertQuerysetEqual(qs, [], ordered=False)\n+\n+    def test_range_lookup_namedtuple_open_range(self):\n+        # Edge case where the range is wide open within dataset bounds.\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=1, maximum=1000),\n+        )\n+        self.assertQuerysetEqual(\n+            qs,\n+            [\n+                '<Company: 5020 Ltd>', '<Company: 5040 Ltd>',\n+                '<Company: 5050 Ltd>', '<Company: 5060 Ltd>', '<Company: 99300 Ltd>'\n+            ],\n+            ordered=False\n+        )\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..5d7f0de 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -15,6 +15,7 @@ from io import StringIO\n from unittest import mock\n \n from django import conf, get_version\n+from django.test.utils import captured_stderr, captured_stdout\n from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n@@ -1867,6 +1868,32 @@ class ArgumentOrder(AdminScriptTestCase):\n         )\n \n \n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_main_argument(self):\n+        \"\"\"\n+        Test that ManagementUtility uses the provided prog_name rather than sys.argv when\n+        it is '__main__.py', ensuring the customized prog_name is used.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        custom_prog_name = 'my-custom-admin'\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line([custom_prog_name] + args)\n+        self.assertIn(f'usage: {custom_prog_name} shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n @override_settings(ROOT_URLCONF='admin_scripts.urls')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n \n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..9307d8f 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -92,7 +93,22 @@ class DateFormatTests(SimpleTestCase):\n         self.assertEqual(dateformat.format(my_birthday, 'n'), '7')\n         self.assertEqual(dateformat.format(my_birthday, 'N'), 'July')\n \n-    def test_time_formats(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (0, '00'),\n+            (100, '00'),\n+            (2000, '00'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         my_birthday = datetime(1979, 7, 8, 22, 00)\n \n         self.assertEqual(dateformat.format(my_birthday, 'P'), '10 p.m.')\n@@ -164,4 +180,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..242fd31 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,13 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_field_is_disabled(self):\n+        \"\"\"\n+        Test that ReadOnlyPasswordHashField has the `disabled` attribute set to True.\n+        \"\"\"\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..60b683b 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -109,21 +109,90 @@ class OptimizerTests(SimpleTestCase):\n         )\n \n     def test_create_alter_model_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel('TestModel', fields=[], options={'verbose_name': 'Test Model'}),\n+                migrations.AlterModelOptions(name='TestModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('TestModel', fields=[]),\n+            ]\n+        )\n         self.assertOptimizesTo(\n             [\n                 migrations.CreateModel('Foo', fields=[]),\n                 migrations.AlterModelOptions(name='Foo', options={'verbose_name_plural': 'Foozes'}),\n             ],\n+            [\n+                migrations.CreateModel('TestModel', fields=[], options={'verbose_name': 'Test Model'}),\n+                migrations.AlterModelOptions(name='TestModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('TestModel', fields=[]),\n+            ]\n+        )\n+        self.assertOptimizesTo(\n             [\n                 migrations.CreateModel('Foo', fields=[], options={'verbose_name_plural': 'Foozes'}),\n             ]\n         )\n \n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel('TestModel', fields=[], options={'verbose_name': 'Test Model'}),\n+                migrations.AlterModelOptions(name='TestModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('TestModel', fields=[]),\n+            ]\n+        )\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'Test Model',\n+                        'verbose_name_plural': 'Test Models',\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'TestModel',\n+                    options={'verbose_name': 'Test Model'},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel('TestModel', fields=[], options={'verbose_name': 'Test Model'}),\n+                migrations.AlterModelOptions(name='TestModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('TestModel', fields=[]),\n+            ]\n+        )\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Test Model'},\n+                ),\n+            ],\n+        )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n         AlterOrderWithRespectTo, and DeleteModel should collapse into nothing.\n         \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel('TestModel', fields=[], options={'verbose_name': 'Test Model'}),\n+                migrations.AlterModelOptions(name='TestModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('TestModel', fields=[]),\n+            ]\n+        )\n         self.assertOptimizesTo(\n             [\n                 migrations.CreateModel(\"Foo\", [(\"name\", models.CharField(max_length=255))]),\n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..8caf755 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,7 +1,10 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy\n+from django.utils.functional import lazy\n \n from ..utils import setup\n \n@@ -46,8 +49,26 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n \n-class FunctionTests(SimpleTestCase):\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n \n     def test_add(self):\n         self.assertEqual(add('1', '2'), 3)\n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..893e779 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -18,14 +18,45 @@ from django.test import (\n     skipUnlessDBFeature,\n )\n \n+from django.db import IntegrityError, connection, transaction\n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n     VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n )\n \n+class SQLKeywordsModelTest(TransactionTestCase):\n \n-class DateQuotingTest(TestCase):\n+    available_apps = ['backends']\n+\n+    def test_check_constraints_sql_keywords(self):\n+        \"\"\"\n+        Test to verify that the check_constraints method can handle table\n+        names that are SQL reserved keywords.\n+        \"\"\"\n+        class SQLKeywordsModel(models.Model):\n+            id = models.AutoField(primary_key=True, db_column='select')\n+            reporter = models.ForeignKey(Reporter, models.CASCADE, db_column='where')\n+\n+            class Meta:\n+                db_table = 'order'\n+\n+        # Create an instance of the model\n+        with transaction.atomic():\n+            obj = SQLKeywordsModel.objects.create(reporter=self.r)\n+            obj.refresh_from_db()\n+            obj.reporter_id = 30\n+            \n+            # Disable constraint checks and try to save invalid foreign key\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n+                \n+                # Verify that the check_constraints method raises an IntegrityError\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+            \n+            # Rollback the transaction after test\n+            transaction.set_rollback(True)\n \n     def test_django_date_trunc(self):\n         \"\"\"\n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..b219c5b 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1342,6 +1342,11 @@ class ManageRunserverMigrationWarning(TestCase):\n             'app_waiting_migration.', output\n         )\n \n+from django.core.management import call_command\n+from django.core.management.base import BaseCommand\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from unittest import mock\n+from io import StringIO\n \n class ManageRunserverEmptyAllowedHosts(AdminScriptTestCase):\n     def setUp(self):\n@@ -1351,6 +1356,32 @@ class ManageRunserverEmptyAllowedHosts(AdminScriptTestCase):\n             'DEBUG': False,\n         })\n \n+    def test_skip_checks_option(self):\n+        \"\"\"\n+        Test runserver with and without the --skip-checks option.\n+        \"\"\"\n+        output = StringIO()\n+        \n+        with mock.patch.object(BaseCommand, 'check') as mock_check:\n+            # Test with `skip_checks=True`\n+            call_command('runserver', use_reloader=False, skip_checks=True, stdout=output)\n+            self.assertNotIn('Performing system checks...', output.getvalue())\n+            mock_check.assert_not_called()\n+\n+            output.truncate(0)\n+            output.seek(0)\n+\n+            # Test with `skip_checks=False`\n+            call_command('runserver', use_reloader=False, skip_checks=False, stdout=output)\n+            self.assertIn('Performing system checks...', output.getvalue())\n+            mock_check.assert_called()\n+    def setUp(self):\n+        super().setUp()\n+        self.write_settings('settings.py', sdict={\n+            'ALLOWED_HOSTS': [],\n+            'DEBUG': False,\n+        })\n+\n     def test_empty_allowed_hosts_error(self):\n         out, err = self.run_manage(['runserver'])\n         self.assertNoOutput(out)\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..7862954 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -140,6 +141,42 @@ class MyMiddlewareWithExceptionMessage:\n         pass\n \n \n+@override_settings(\n+    ROOT_URLCONF='middleware_exceptions.urls',\n+    MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+    ],\n+)\n+class MiddlewareIssueTests(SimpleTestCase):\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    async def test_middleware_chain_async_with_await_issue(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.tests.MyMiddleware adapted.\",\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',\n+        'middleware_exceptions.tests.MyMiddleware',\n+    ])\n+    def test_middleware_chain_sync_with_typeerror_issue(self):\n+        # This test ensures that no TypeError is raised.\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+\n+\n @override_settings(\n     DEBUG=True,\n     ROOT_URLCONF='middleware_exceptions.urls',\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..3c02646 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -6,7 +7,9 @@ from django.db.migrations.exceptions import (\n     AmbiguityError, InconsistentMigrationHistory, NodeNotFoundError,\n )\n from django.db.migrations.loader import MigrationLoader\n-from django.db.migrations.recorder import MigrationRecorder\n+from importlib import import_module\n+from importlib import reload\n+import pkgutil\n from django.test import TestCase, modify_settings, override_settings\n \n from .test_base import MigrationTestBase\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..ff59910 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -18,11 +18,11 @@ from django.test.utils import isolate_apps\n \n from ..models import Author, Item, Object, Square\n \n-try:\n-    from django.db.backends.sqlite3.base import check_sqlite_version\n-except ImproperlyConfigured:\n-    # Ignore \"SQLite is too old\" when running tests on another database.\n-    pass\n+import unittest\n+from unittest import mock\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db.backends.sqlite3.base import check_sqlite_version\n+from django.db import connection\n \n \n @unittest.skipUnless(connection.vendor == 'sqlite', 'SQLite tests')\n@@ -36,7 +36,12 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_new_requirement(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..411be24 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -173,6 +173,24 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        with mock.patch.dict(sys.modules, {'__main__': test_main}):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+            )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n+    @mock.patch('sys.argv', ['-m', 'utils_tests.test_module', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_other_pkg_with_m_option(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..4c3ddbc 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,6 +281,10 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n+from .utils import AssertFormErrorsMixin\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n     def test_modelchoicefield(self):\n@@ -288,8 +292,18 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         ChoiceModel.objects.create(pk=1, name='a')\n         ChoiceModel.objects.create(pk=2, name='b')\n         ChoiceModel.objects.create(pk=3, name='c')\n-\n-        # ModelChoiceField\n+    def test_modelchoicefield_value_placeholder(self):\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n         e = {\n             'required': 'REQUIRED',\n             'invalid_choice': 'INVALID CHOICE',\n@@ -307,4 +321,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..a524983 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,12 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+class Product(models.Model):\n+    sku = models.CharField(primary_key=True, max_length=50)\n+\n+class Order(models.Model):\n+    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..29302ad 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,7 +1,29 @@\n+\n+class CustomAutoFieldTests(TestCase):\n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Tests that the auto field subclass correctly applies the from_db_value\n+        on creation.\n+        \"\"\"\n+        instance = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(instance.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Tests that the auto field subclass correctly applies the from_db_value\n+        when using bulk_create.\n+        \"\"\"\n+        instance_bulk = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([instance_bulk])\n+        self.assertIsInstance(instance_bulk.id, MyWrapper)\n+\n from django.db import IntegrityError, transaction\n from django.test import TestCase, skipIfDBFeature\n \n-from .models import Bar, Business, Employee, Foo\n+from .models import Bar, Business, Employee, Foo, CustomAutoFieldModel\n+from .fields import MyWrapper\n+from django.test import skipUnlessDBFeature\n \n \n class BasicCustomPKTests(TestCase):\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..2d3b5aa 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -816,8 +816,25 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n+    def test_combined_q_exists_order(self):\n+        # These test cases are based on identified bug patterns where the order of Q and Exists causes issues\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        test_cases = [\n+            (Q() & Exists(is_ceo), [self.foo_bar.ceo, self.max]),\n+            (Exists(is_poc) & Q(salary__gte=30), [self.max]),\n+            (Q() | Exists(is_ceo), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+            (Exists(is_poc) | Q(salary__lt=15), [self.example_inc.ceo, self.max]),\n+        ]\n \n-class IterableLookupInnerExpressionsTests(TestCase):\n+        for conditions, expected in test_cases:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(conditions),\n+                    expected\n+                )\n     @classmethod\n     def setUpTestData(cls):\n         ceo = Employee.objects.create(firstname='Just', lastname='Doit', salary=30)\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..98f803e 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,18 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        \"\"\"\n+        Ensure that HashedFilesMixin's post_process() does not yield duplicate file names.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Check that no file is yielded more than once\n+        post_processed_files = stats['post_processed']\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +226,18 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        \"\"\"\n+        Ensure that HashedFilesMixin's post_process() does not yield duplicate file names.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Check that no file is yielded more than once\n+        post_processed_files = stats['post_processed']\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..729b2f5 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -34,7 +35,32 @@ class OrderedSetTests(SimpleTestCase):\n         s.discard(2)\n         self.assertEqual(len(s), 1)\n \n-    def test_contains(self):\n+    def test_reversed(self):\n+        # Test standard reversal of OrderedSet\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+        # Test reversal of an empty OrderedSet\n+        s = reversed(OrderedSet([]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+        # Test reversal when OrderedSet has one element\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n+        # Test reversal with duplicate initial elements\n+        s = reversed(OrderedSet([1, 2, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+        # Test nested OrderedSet for more complex structure\n+        nested_set = OrderedSet([1, OrderedSet([2, 3]), 4])\n+        s = reversed(nested_set)\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [4, OrderedSet([2, 3]), 1])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..84a360b 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n@@ -140,7 +141,16 @@ class OrderingTests(TestCase):\n             [self.a1, self.a2, self.a4, self.a3],\n         )\n \n-    def test_orders_nulls_first_on_filtered_subquery(self):\n+    def test_default_ordering_does_not_affect_group_by(self):\n+        \"\"\"Testing that default ordering is not included in the GROUP BY clause.\"\"\"\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+        # Perform the operation: values + annotate + look at group.\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n         Article.objects.filter(headline='Article 1').update(author=self.author_1)\n         Article.objects.filter(headline='Article 2').update(author=self.author_1)\n         Article.objects.filter(headline='Article 4').update(author=self.author_2)\n@@ -483,4 +493,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..5c5ce0b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -815,14 +815,32 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n             [self.example_inc.ceo, self.max],\n         )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(Exists(is_ceo))), [self.max]\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=30) & Q(Exists(is_ceo))), [self.max]\n+        )\n         self.assertCountEqual(\n             Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo)),\n             [self.max],\n         )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(Exists(is_ceo))), [self.max]\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=30) & Q(Exists(is_ceo))), [self.max]\n+        )\n         self.assertCountEqual(\n             Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n             [self.example_inc.ceo, self.max],\n         )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(Exists(is_ceo))), [self.max]\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Q(salary__gte=30) & Q(Exists(is_ceo))), [self.max]\n+        )\n \n     def test_boolean_expression_combined_with_empty_Q(self):\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..2e6edd8 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,4 +1,6 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n+from django.test.utils import override_settings\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n@@ -66,7 +68,25 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +102,25 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "",
  "django__django-14349": "",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..042e1c7 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1527,7 +1527,41 @@ class AggregationTests(TestCase):\n \n \n class JoinPromotionTests(TestCase):\n-    def test_ticket_21150(self):\n+    def test_q_object_with_subquery_in(self):\n+        agent = ManagementAgent.objects.create(name='Test Agent')\n+        property_group = PropertyGroup.objects.create(name='Test Group')\n+\n+        # Add the property group to the agent\n+        agent.property_groups.add(property_group)\n+\n+        queryset = ManagementAgent.objects.annotate(Count('property_groups'))\n+        \n+        # Using 'in' instead of converting to values list\n+        result = queryset.filter(\n+            Q(property_groups__in=PropertyGroup.objects.filter(id=property_group.id))\n+            | Q(property_groups__count=0)\n+        ).distinct()\n+\n+        # Assert no ProgrammingError is raised and result is correct\n+        self.assertEqual(list(result), [agent])\n+\n+    def test_q_object_with_subquery_values_list(self):\n+        agent = ManagementAgent.objects.create(name='Test Agent 2')\n+        property_group = PropertyGroup.objects.create(name='Test Group 2')\n+\n+        # Add the property group to the agent\n+        agent.property_groups.add(property_group)\n+\n+        queryset = ManagementAgent.objects.annotate(Count('property_groups'))\n+\n+        # Using 'values_list' to compare\n+        result = queryset.filter(\n+            Q(property_groups__id__in=PropertyGroup.objects.filter(id=property_group.id).values_list(\"id\", flat=True))\n+            | Q(property_groups__count=0)\n+        ).distinct()\n+\n+        # Assert that both methods return the same single agent\n+        self.assertEqual(list(result), [agent])\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n         qs = Charlie.objects.select_related('alfa').annotate(Count('bravo__charlie'))\n",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..9740bfa 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -68,6 +68,40 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_prefer_non_deprecated_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        \n+        # CASE 1: Non-deprecated keys in OPTIONS have priority over deprecated ones\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'user': 'optionuser',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+            msg=\"Non-deprecated keys should be preferred over deprecated ones.\"\n+        )\n+        \n     def test_options_password(self):\n         expected_args = [\n             'mysql',\n@@ -89,6 +123,38 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_deprecated_keys_still_functional(self):\n+        settings_port = 444\n+        options_port = 555\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        \n+        # CASE 2: Deprecated keys alone should still function\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'optiondbname',\n+                    'passwd': 'optionpassword',\n+                    'user': 'optionuser',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+            msg=\"Deprecated keys should still be functional.\"\n+        )\n+    \n     def test_options_charset(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..b697ecd 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2199,7 +2199,29 @@ class SchemaTests(TransactionTestCase):\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n \n     @skipUnlessDBFeature('supports_expression_indexes')\n-    def test_func_unique_constraint(self):\n+    def test_create_unique_constraint_with_table_instead_of_field(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        # Pass the model's Table instead of a string field name.\n+        table_obj = Author._meta.db_table\n+        constraint = UniqueConstraint(fields=[table_obj], name='table_uq')\n+\n+        # Attempting to add this constraint should raise an error or produce incorrect SQL,\n+        # we should expect an error or incorrect SQL behavior.\n+        with self.assertRaises(Exception):\n+            with connection.schema_editor() as editor:\n+                editor.add_constraint(Author, constraint)\n+\n+    def test_unique_constraint_with_non_existent_column(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        # Try to add a constraint on a non-existent column.\n+        constraint = UniqueConstraint(fields=['nonexistent_field'], name='nonexistent_field_uq')\n+\n+        # Adding this constraint should fail due to the missing column.\n+        with self.assertRaises(Exception):\n+            with connection.schema_editor() as editor:\n+                editor.add_constraint(Author, constraint)\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n         constraint = UniqueConstraint(Upper('name').desc(), name='func_upper_uq')\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 17aecdd..c1dfe3f 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -453,9 +453,28 @@ class TestCollectionManifestStorage(TestHashedFiles, CollectionTestCase):\n             2,\n         )\n \n-\n-@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoneHashStorage')\n-class TestCollectionNoneHashStorage(CollectionTestCase):\n+from django.test import override_settings\n+from django.core.management import call_command\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+from django.utils.six import StringIO\n+\n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoPostProcessReplacedPathStorage')\n+class TestCollectionNoPostProcessReplacedPaths(CollectionTestCase):\n+    run_collectstatic_in_setUp = False\n+\n+    def test_collectstatic_no_post_process_replaced_paths(self):\n+        \"\"\"Test to ensure no UnboundLocalError when max_post_process_passes is set to 0.\"\"\"\n+        stdout = StringIO()\n+        try:\n+            call_command('collectstatic', interactive=False, clear=True, verbosity=1, stdout=stdout)\n+            output = stdout.getvalue()\n+            # Check that the command runs without errors and processes files\n+            self.assertIn('post-processed', output)\n+        except UnboundLocalError as e:\n+            self.fail(f\"collectstatic raised UnboundLocalError: {e}\")\n     hashed_file_path = hashed_file_path\n \n     def test_hashed_name(self):\n",
  "django__django-14500": "",
  "django__django-14539": "",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..6efa91d 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -127,7 +127,31 @@ class BulkUpdateTests(TestCase):\n         with self.assertNumQueries(0):\n             Note.objects.bulk_update([], ['note'])\n \n-    def test_large_batch(self):\n+    def test_bulk_update_returns_rows_updated_empty(self):\n+        # Test with an empty list; should return 0 as no rows are updated.\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_bulk_update_returns_rows_updated(self):\n+        # Create 2000 Note instances\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(0, 2000)\n+        ])\n+        # Fetch all notes and perform bulk_update\n+        notes = list(Note.objects.all())\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_updated_rows_with_duplicates(self):\n+        # Create a single note\n+        note = Note.objects.create(note='test-note', misc='test')\n+        # Update the same note twice; should return 1 as it's one unique row\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+        # Test with duplicates in batches; batch_size=1 causes two distinct updates\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n         Note.objects.bulk_create([\n             Note(note=str(i), misc=str(i))\n             for i in range(0, 2000)\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..b9c8648 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -337,6 +337,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        # Check that the HTML of non-form errors includes the nonform CSS class\n+        self.assertHTMLEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -359,6 +364,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        # Check that the HTML of non-form errors includes the nonform CSS class\n+        self.assertHTMLEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -983,6 +993,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        # Check that the HTML of non-form errors includes the nonform CSS class\n+        self.assertHTMLEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..e7bd386 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,29 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_datetime_clean_initial_callable_disabled_bound_field(self):\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        cleaned = form.cleaned_data['dt']\n+        self.assertEqual(cleaned, now)\n+        bf = form['dt']\n+        self.assertEqual(cleaned, bf.initial)\n+\n+    def test_datetime_changed_data_callable_bound_field(self):\n+        initial_value = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: initial_value, disabled=False)\n+\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:46'})\n+        changed = form.changed_data\n+        bf = form['dt']\n+        self.assertTrue(bf._did_change())\n+        self.assertIn('dt', changed)\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..12efca3 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,4 +1,71 @@\n+\n+class AutocompleteJsonViewTest(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superuser = User.objects.create_superuser(\n+            username='admin', password='admin', email='admin@test.com'\n+        )\n+        cls.factory = RequestFactory()\n+        cls.url = '/autocomplete/'\n+        cls.opts = {'app_label': 'admin_views', 'model_name': 'question', 'field_name': 'question'}\n+\n+    def test_custom_serialize_result(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+\n+        request = self.factory.get(self.url, {'term': 'Question', **self.opts})\n+        request.user = self.superuser\n+\n+        response = AutocompleteJsonSerializeResultView.as_view(admin_site=admin.site)(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n+    def test_default_serialize_result(self):\n+        class DefaultAutocompleteJsonView(AutocompleteJsonView):\n+            pass\n+\n+        Question.objects.create(question='Question 1')\n+        Question.objects.create(question='Question 2')\n+\n+        request = self.factory.get(self.url, {'term': 'Question', **self.opts})\n+        request.user = self.superuser\n+\n+        response = DefaultAutocompleteJsonView.as_view(admin_site=admin.site)(request)\n+        self.assertEqual(response.status_code, 200)\n+\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question}\n+                for q in Question.objects.all()\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n import json\n+import datetime\n+from django.test import RequestFactory, TestCase\n+from django.urls import path\n+from django.http import JsonResponse\n+from .models import Question\n+from django.contrib.auth.models import User\n+from django.contrib.admin import ModelAdmin\n+from django.contrib import admin\n from contextlib import contextmanager\n \n from django.contrib import admin\n",
  "django__django-14765": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 6496bf2..896667d 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -91,8 +91,9 @@ class ProjectState:\n     def __init__(self, models=None, real_apps=None):\n         self.models = models or {}\n         # Apps to include from main registry, usually unmigrated ones\n-        if real_apps:\n-            self.real_apps = real_apps if isinstance(real_apps, set) else set(real_apps)\n+        if real_apps is not None:\n+            assert isinstance(real_apps, set), \"real_apps must be a set\"\n+            self.real_apps = real_apps\n         else:\n             self.real_apps = set()\n         self.is_delayed = False\n",
  "django__django-14771": "",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..450a89b 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5143,7 +5143,33 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin:admin_views_topping_add'))\n         self.assertEqual(response.status_code, 200)\n \n-    def test_readonly_manytomany_forwards_ref(self):\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        ForeignKey readonly fields should render with correct URL prefix\n+        in a custom admin site.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        site2.register(Book, BookAdmin)\n+        site2.register(Chapter, ChapterAdmin)\n+        site2.register(Language, LanguageAdmin)\n+\n+        response = self.client.get(\n+            reverse('custom-admin:admin_views_chapter_change', args=(quote(chapter.pk),))\n+        )\n+        language_url = reverse(\n+            'custom-admin:admin_views_language_change',\n+            args=(quote(language.pk),),\n+        )\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_40</a></div>' % language_url,\n+            html=True,\n+        )\n         topping = Topping.objects.create(name='Salami')\n         pizza = Pizza.objects.create(name='Americano')\n         pizza.toppings.add(topping)\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..8b457a2 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,25 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+        \n+    def test_modelchoiceiteratorvalue_in_dict(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        test_dict = {value_1: 'Category 1', value_2: 'Category 2'}\n+        self.assertEqual(test_dict[value_1], 'Category 1')\n+        self.assertEqual(test_dict[value_2], 'Category 2')\n+        \n+    def test_modelchoiceiteratorvalue_in_set(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        test_set = {value_1, value_2}\n+        self.assertIn(value_1, test_set)\n+        self.assertIn(value_2, test_set)\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..2fc3e7f 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -792,6 +792,66 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Pony.objects.count(), 2)\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n+    def test_rename_model_with_db_table_noop_sqlite(self):\n+        app_label = 'test_rmwdbtn_sqlite'\n+        if connection.vendor != 'sqlite':\n+            self.skipTest(\"This test is specific to sqlite.\")\n+\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Ensure the structure is unchanged\n+        Rider = new_state.apps.get_model(app_label, 'Rider')\n+        self.assertEqual(Rider._meta.db_table, 'rider')\n+\n+        Pony = new_state.apps.get_model(app_label, 'Pony')\n+        self.assertEqual(Pony.rider.field.rel.to, Rider)\n+\n+    def test_rename_model_with_db_table_noop_postgres(self):\n+        app_label = 'test_rmwdbtn_postgres'\n+        if connection.vendor != 'postgresql':\n+            self.skipTest(\"This test is specific to PostgreSQL.\")\n+\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Verify foreign key constraints are unchanged\n+        with connection.cursor() as cursor:\n+            cursor.execute(\"\"\"\n+                SELECT conname, conrelid::regclass\n+                FROM pg_constraint\n+                WHERE conname = '%s_rider_id_fk'\n+            \"\"\" % app_label)\n+            constraints = cursor.fetchall()\n+            self.assertTrue(constraints)  # Constraint should exist\n \n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n",
  "django__django-15022": "",
  "django__django-15037": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 19402bb..90cb7f4 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -204,7 +204,15 @@ class InspectDBTestCase(TestCase):\n             output,\n         )\n \n-    def test_digits_column_name_introspection(self):\n+    @skipUnlessDBFeature('can_introspect_foreign_keys')\n+    def test_foreign_key_to_specific_field(self):\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foreignkeytofield', stdout=out)\n+        output = out.getvalue()\n+        self.assertIn(\n+            \"to_field_fk = models.ForeignKey('InspectdbPeoplemoredata', models.CASCADE, to_field='people_unique')\",\n+            output,\n+        )\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n         out = StringIO()\n",
  "django__django-15103": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex b862331..8d71c23 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -173,6 +173,19 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, 'test_id'), expected)\n \n+    def test_json_script_without_id(self):\n+        # Test json_script when no ID is provided\n+        self.assertEqual(\n+            json_script({'key': 'value'}),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+        )\n+\n+        # Test json_script with special characters and without an ID\n+        self.assertEqual(\n+            json_script({\"<key>\": \"&value&\"}),\n+            '<script type=\"application/json\">{\"\\\\u003Ckey\\\\u003E\": \"\\\\u0026value\\\\u0026\"}</script>'\n+        )\n+\n     def test_smart_urlquote(self):\n         items = (\n             ('http://\u00f6\u00e4\u00fc.com/', 'http://xn--4ca9at.com/'),\n@@ -276,4 +289,4 @@ class TestUtilsHtml(SimpleTestCase):\n         )\n         for value in tests:\n             with self.subTest(value=value):\n-                self.assertEqual(urlize(value), value)\n+                self.assertEqual(urlize(value), value)\n",
  "django__django-15104": "",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..6292034 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -368,6 +369,20 @@ class BaseTests:\n         tags = [msg.level_tag for msg in storage]\n         self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n \n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'new_info',\n+        constants.DEBUG: 'new_debug',\n+        constants.WARNING: 'new_warning',\n+        constants.ERROR: 'new_bad',\n+        12: 'new_custom',\n+    })\n+    def test_updated_level_tags(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['new_info', 'new_custom', 'new_debug', 'new_warning', 'new_bad', 'success'])\n+\n     @override_settings_tags(MESSAGE_TAGS={\n         constants.INFO: 'info',\n         constants.DEBUG: '',\n",
  "django__django-15128": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a7bb7e8..15518b4 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -613,13 +613,13 @@ class OrderItem(models.Model):\n \n \n class BaseUser(models.Model):\n-    pass\n+    annotation = models.ForeignKey('Annotation', models.CASCADE, null=True, blank=True)\n \n \n class Task(models.Model):\n     title = models.CharField(max_length=10)\n     owner = models.ForeignKey(BaseUser, models.CASCADE, related_name='owner')\n-    creator = models.ForeignKey(BaseUser, models.CASCADE, related_name='creator')\n+    note = models.ForeignKey('Note', on_delete=models.CASCADE, null=True, blank=True)\n \n     def __str__(self):\n         return self.title\n",
  "django__django-15161": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex ca4c20d..d2ed49d 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -606,8 +606,32 @@ class WriterTests(SimpleTestCase):\n         validator = deconstructible(path=\"django.core.validators.EmailValidator2\")(EmailValidator)(message=\"hello\")\n         with self.assertRaisesMessage(ValueError, \"Could not find object EmailValidator2 in django.core.validators.\"):\n             MigrationWriter.serialize(validator)\n-\n-    def test_serialize_empty_nonempty_tuple(self):\n+    def test_serialize_expression_with_simple_path(self):\n+        index = models.Index(\n+            models.Func('rating', function='ABS'),\n+            models.Case(\n+                models.When(name='special', then=models.Value('X')),\n+                default=models.Value('other'),\n+            ),\n+            models.ExpressionWrapper(\n+                models.F('pages'),\n+                output_field=models.IntegerField(),\n+            ),\n+            models.OrderBy(models.F('name').desc()),\n+            name='complex_func_index',\n+        )\n+        string, imports = MigrationWriter.serialize(index)\n+        # Ensure using simplified path for expressions\n+        self.assertEqual(\n+            string,\n+            \"models.Index(models.Func('rating', function='ABS'), \"\n+            \"models.Case(models.When(name='special', then=models.Value('X')), \"\n+            \"default=models.Value('other')), \"\n+            \"models.ExpressionWrapper(models.F('pages'), output_field=models.IntegerField()), \"\n+            \"models.OrderBy(models.F('name').desc()), \"\n+            \"name='complex_func_index')\"\n+        )\n+        self.assertEqual(imports, {'from django.db import models'})\n         \"\"\"\n         Ticket #22679: makemigrations generates invalid code for (an empty\n         tuple) default_permissions = ()\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..d1e02b5 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1627,7 +1627,42 @@ class AutodetectorTests(TestCase):\n             ['CreateModel', 'AddField', 'AlterUniqueTogether', 'AlterIndexTogether']\n         )\n \n-    def test_remove_field_and_foo_together(self):\n+    def test_optimize_foo_together_operations(self):\n+        \"\"\"\n+        Test optimization that combines multiple AlterFooTogether\n+        operations into single operations.\n+        \"\"\"\n+\n+        # Define initial state with no constraints\n+        initial = ModelState('otherapp', 'mymodel', [\n+            ('id', models.AutoField(primary_key=True)),\n+            ('col', models.CharField(max_length=50)),\n+        ], {})\n+\n+        # Define future state with desired constraints\n+        future = ModelState('otherapp', 'mymodel', [\n+            ('id', models.AutoField(primary_key=True)),\n+            ('col', models.CharField(max_length=50)),\n+        ], {\n+            'unique_together': {('col',)},\n+            'index_together': {('col',)},\n+        })\n+\n+        # Calculate changes\n+        changes = self.get_changes([initial], [future])\n+\n+        # Our expectations\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='mymodel', unique_together={('col',)}\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='mymodel', index_together={('col',)}\n+        )\n         \"\"\"\n         Removed fields will be removed after updating index/unique_together.\n         \"\"\"\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..528e432 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,7 +1847,33 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n-    def test_resolve_output_field_failure(self):\n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        Ensure that the output field for a given Value doesn't instantiate\n+        validators that throw exceptions during 'clean()'. Specifically, \n+        no MaxLengthValidator should cause a TypeError due to None max_length.\n+        \"\"\"\n+        value_types = [\n+            'test string',\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                self.assertIsNotNone(field)\n+                try:\n+                    field.clean(value, model_instance=None)\n+                except TypeError:\n+                    self.fail(f\"cleaning failed for type: {type(value)} with error: {str(e)}\")\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n             Value(object()).output_field\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..27b2deb 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -618,7 +618,22 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n         # Ensure the field is there\n-        columns = self.column_classes(Author)\n+        # New test case for verifying issue fix: Adding nullable OneToOneField should not crash\n+        def test_add_nullable_o2o_field_correctly(self):\n+            with connection.schema_editor() as editor:\n+                editor.create_model(Author)\n+                editor.create_model(Note)\n+            # Define the new nullable OneToOneField\n+            new_field = OneToOneField(Note, CASCADE, null=True, blank=True, unique=True)\n+            new_field.set_attributes_from_name('note')\n+            # Attempt to add this field to the Author model\n+            with connection.schema_editor() as editor:\n+                editor.add_field(Author, new_field)\n+            columns = self.column_classes(Author)\n+            self.assertIn('note_id', columns, \"note_id column should exist in Author model\")\n+            # Check if the note_id column is marked as nullable\n+            self.assertTrue(columns['note_id'][1][6], \"note_id column should be nullable\")\n+            # Additional checks for unique constraints and relationships could be added here\n         field_type, field_info = columns['thing']\n         self.assertEqual(field_type, connection.features.introspected_field_types['IntegerField'])\n         # Make sure the values were transformed correctly\n@@ -636,7 +651,22 @@ class SchemaTests(TransactionTestCase):\n         new_field.set_attributes_from_name(\"bits\")\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n-        columns = self.column_classes(Author)\n+        # New test case for verifying issue fix: Adding nullable OneToOneField should not crash\n+        def test_add_nullable_o2o_field_correctly(self):\n+            with connection.schema_editor() as editor:\n+                editor.create_model(Author)\n+                editor.create_model(Note)\n+            # Define the new nullable OneToOneField\n+            new_field = OneToOneField(Note, CASCADE, null=True, blank=True, unique=True)\n+            new_field.set_attributes_from_name('note')\n+            # Attempt to add this field to the Author model\n+            with connection.schema_editor() as editor:\n+                editor.add_field(Author, new_field)\n+            columns = self.column_classes(Author)\n+            self.assertIn('note_id', columns, \"note_id column should exist in Author model\")\n+            # Check if the note_id column is marked as nullable\n+            self.assertTrue(columns['note_id'][1][6], \"note_id column should be nullable\")\n+            # Additional checks for unique constraints and relationships could be added here\n         # MySQL annoyingly uses the same backend, so it'll come back as one of\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..f2fb56d 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -60,6 +60,25 @@ class BasicFieldTests(SimpleTestCase):\n             self.assertEqual(m._meta.get_field('field%d' % i).verbose_name, 'verbose field%d' % i)\n \n         self.assertEqual(m._meta.get_field('id').verbose_name, 'verbose pk')\n+    \n+    def test_hash_immutability(self):\n+        \"\"\"\n+        Test that the hash of a Field object remains consistent before and after\n+        being assigned to a model class, confirming immutability.\n+        \"\"\"\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+        \n+        class MyModel(models.Model):\n+            rank = field\n+\n+        # Check that the hash is unchanged\n+        self.assertEqual(field_hash, hash(field))\n+\n+        # Check behavior with a dictionary\n+        field_dict = {field: 'value'}\n+        self.assertIn(field, field_dict)\n+        self.assertEqual(field_dict[field], 'value')\n \n     def test_choices_form_class(self):\n         \"\"\"Can supply a custom choices form class to Field.formfield()\"\"\"\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..e7765e1 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,7 +204,19 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n-    def test_field_references(self):\n+    def test_f_expression_on_char_field(self):\n+        # Create 10 Note objects to work with\n+        notes = [Note.objects.create(note='test_note', misc='initial_misc') for _ in range(10)]\n+        \n+        # Use F expression to update misc field with the value of note field\n+        for note in notes:\n+            note.misc = F('note')\n+        \n+        # Update using bulk_update\n+        Note.objects.bulk_update(notes, ['misc'])\n+        \n+        # Verify that misc has been updated correctly\n+        self.assertCountEqual(Note.objects.filter(misc='test_note'), notes)\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n             number.num = F('num') + 1\n",
  "django__django-15380": "",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..eed1b74 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1892,7 +1892,36 @@ class ExistsTests(TestCase):\n             list(Experiment.objects.values(exists=Exists(\n                 Experiment.objects.order_by('pk'),\n             )).order_by())\n-        captured_queries = context.captured_queries\n+from django.db.models import Exists, Q\n+from django.test import TestCase\n+from .models import Manager  # Make sure this import aligns with the actual file setup if located elsewhere.\n+\n+class ExistsSubqueryTests(TestCase):\n+    def test_negated_empty_exists(self):\n+        # Original test: ensuring behavior when filtering with a negated Exists on an empty queryset.\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(~Exists(Manager.objects.none()) & Q(pk=manager.pk))\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_exists_with_non_empty_queryset(self):\n+        # Test case when the inner query is not empty.\n+        manager = Manager.objects.create(name=\"test\")\n+        other_manager = Manager.objects.create(name=\"test2\")\n+        qs = Manager.objects.filter(Exists(Manager.objects.filter(pk=manager.pk)), name=\"test\")\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_negated_non_empty_exists(self):\n+        # Test case when the negated Exists' inner query is not empty.\n+        manager = Manager.objects.create(name=\"test\")\n+        other_manager = Manager.objects.create(name=\"test2\")\n+        qs = Manager.objects.filter(~Exists(Manager.objects.filter(pk=manager.pk)), name=\"test2\")\n+        self.assertSequenceEqual(qs, [other_manager])\n+\n+    def test_filter_without_exists(self):\n+        # Ensure normal filter behaves correctly without Exists.\n+        manager = Manager.objects.create(name=\"foo\")\n+        qs = Manager.objects.filter(name=\"foo\")\n+        self.assertSequenceEqual(qs, [manager])\n         self.assertEqual(len(captured_queries), 1)\n         captured_sql = captured_queries[0]['sql']\n         self.assertNotIn(\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..c8d3dd5 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -132,6 +132,27 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             raw_id_fields=[\"main_band\"],\n         )\n \n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            \n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == \"parent\":\n+                    kwargs[\"empty_label\"] = \"Custom empty label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        ma = MyModelAdmin(Advisor, admin.site)\n+        ff = ma.formfield_for_dbfield(Advisor._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n+\n+    def test_radio_fields_foreignkey_default_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+\n+        ma = MyModelAdmin(Advisor, admin.site)\n+        ff = ma.formfield_for_dbfield(Advisor._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"None\")\n+\n     def test_radio_fields_ForeignKey(self):\n         ff = self.assertFormfield(\n             Event,\n",
  "django__django-15499": "",
  "django__django-15525": "",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..2e3da50 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,6 +3961,35 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n+    def test_alter_field_choices_noop(self):\n+        # Ensure AlterField on adding choices generates no SQL for SQLite\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_max_length_noop(self):\n+        # Test altering CharField max_length on SQLite which should not generate SQL\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(\n+            max_length=300,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n     def test_add_textfield_unhashable_default(self):\n         # Create the table\n         with connection.schema_editor() as editor:\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..3489af8 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -326,7 +326,16 @@ class LookupTests(TestCase):\n \n \n class BilateralTransformTests(TestCase):\n-    def test_bilateral_upper(self):\n+    def test_lookup_cache_cleared_on_unregister(self):\n+        field = Article._meta.get_field(\"author\")\n+        \n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n+        # Unregister should clear the lookup cache\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        field.get_lookups.cache_clear()  # Ensure cache is clear before re-fetching lookups\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n         with register_lookup(models.CharField, UpperBilateralTransform):\n             author1 = Author.objects.create(name=\"Doe\")\n             author2 = Author.objects.create(name=\"doe\")\n",
  "django__django-15572": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 188dca4..3eba29e 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -76,6 +76,31 @@ class TemplateReloadTests(SimpleTestCase):\n             },\n         )\n \n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_empty_path(self):\n+        self.assertEqual(autoreload.get_template_directories(), set())\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"/absolute/path\", \"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_mixed_with_empty_path(self):\n+        self.assertSetEqual(\n+            autoreload.get_template_directories(),\n+            {Path(\"/absolute/path\")},\n+        )\n+\n     @mock.patch(\"django.template.loaders.base.Loader.reset\")\n     def test_reset_all_loaders(self, mock_reset):\n         autoreload.reset_loaders()\n",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..1d20c04 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -5,6 +6,7 @@ from unittest import mock\n from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n from django.db.models.manager import BaseManager\n+import inspect\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n from django.test import (\n     SimpleTestCase,\n@@ -736,6 +738,21 @@ class ManagerTest(SimpleTestCase):\n             sorted(self.QUERYSET_PROXY_METHODS),\n         )\n \n+    def test_manager_bulk_create_signature(self):\n+        # This test ensures that the inspect.signature returns the correct signature\n+        # for the bulk_create method on the manager.\n+        # The expected signature comes from the method definition in QuerySet.\n+        expected_signature = \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\"\n+        actual_signature = str(inspect.signature(Article.objects.bulk_create))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_manager_get_signature(self):\n+        # Adding another case to verify a different method on the manager\n+        # to ensure the fix is comprehensive.\n+        expected_signature = \"(self, *args, **kwargs)\"\n+        actual_signature = str(inspect.signature(Article.objects.get))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n \n class SelectOnSaveTests(TestCase):\n     def test_select_on_save(self):\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..5202454 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,6 +1,9 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n+from django.utils.translation import gettext_lazy as _\n+from django.utils.formats import get_format\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n \n@@ -77,6 +80,14 @@ class FunctionTests(SimpleTestCase):\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n+    def test_get_format_lazy_string(self):\n+        \"\"\"\n+        Test that `get_format` correctly handles lazy strings.\n+        \"\"\"\n+        lazy_date_format = gettext_lazy(\"DATE_FORMAT\")\n+        date_format = get_format(lazy_date_format)\n+        self.assertEqual(date_format, get_format(\"DATE_FORMAT\"))\n+\n     def test_no_args(self):\n         self.assertEqual(date(\"\"), \"\")\n         self.assertEqual(date(None), \"\")\n",
  "django__django-15814": "",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..f2453e9 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,26 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_params_after_dbname(self):\n+        # Test that additional parameters are passed after the database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"dbname\", \"-c\", \"select * from some_table;\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_params_after_dbname(self):\n+        # Test that additional parameters are passed after the database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"dbname\", \"-c\", \"select * from some_table;\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..45cbac3 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -31,6 +31,11 @@ class FloatformatTests(SimpleTestCase):\n         self.assertEqual(output, \"1.4 1.4\")\n \n \n+from django.test import SimpleTestCase\n+from decimal import Decimal\n+from django.template.defaultfilters import floatformat\n+from django.utils.safestring import mark_safe\n+\n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n         self.assertEqual(floatformat(7.7), \"7.7\")\n@@ -74,6 +79,58 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n+    def test_decimal_precision(self):\n+        # Original test patch to check high precision Decimal\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+        # Additional test cases for further verification\n+\n+        # Test with a regular Decimal number\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\",\n+        )\n+\n+        # Test with a small Decimal number\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.00000000000000012345678901234567890\"), 35),\n+            \"0.00000000000000012345678901234567890\",\n+        )\n+\n+        # Test with a large Decimal number\n+        self.assertEqual(\n+            floatformat(Decimal(\"12345678901234567890.12345678901234567890\"), 40),\n+            \"12345678901234567890.1234567890123456789000000000000000000000000000\",\n+        )\n+\n+        # Testing rounding with Decimal number\n+        self.assertEqual(\n+            floatformat(Decimal(\"12.34567\"), 3),\n+            \"12.346\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"12.34467\"), 3),\n+            \"12.345\",\n+        )\n+\n+        # Test with zero trailing in decimals\n+        self.assertEqual(\n+            floatformat(Decimal(\"12.100000\"), 6),\n+            \"12.100000\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"12.100000\"), 2),\n+            \"12.10\",\n+        )\n+\n+        # Edge case: Large number of precision specified\n+        self.assertEqual(\n+            floatformat(Decimal(\"1.23456789012345678901234567890123456789\"), 50),\n+            \"1.23456789012345678901234567890123456789000000000000\",\n+        )\n+\n     def test_force_grouping(self):\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..acfad85 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -415,7 +415,15 @@ class CaseExpressionTests(TestCase):\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n-    def test_combined_expression(self):\n+    def test_annotate_with_negated_q(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n         self.assertQuerysetEqual(\n             CaseTestModel.objects.annotate(\n                 test=Case(\n",
  "django__django-15987": "",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..558c70e 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -985,10 +985,64 @@ class NonAggregateAnnotationTestCase(TestCase):\n             )\n             .values(\"name\")\n         )\n+\n+    def test_alias_after_annotate_in_subquery(self):\n+        from django.db.models import Value\n+        from .models import Book, Publisher\n+\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {\"name\": \"Apress\"},\n+                {\"name\": \"Sams\"},\n+                {\"name\": \"Prentice Hall\"},\n+                {\"name\": \"Morgan Kaufmann\"},\n+            ],\n+        )\n         self.assertCountEqual(\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_alias_after_annotate_in_subquery(self):\n+        from django.db.models import Value\n+        from .models import Book, Publisher\n+\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {\"name\": \"Apress\"},\n+                {\"name\": \"Sams\"},\n+                {\"name\": \"Prentice Hall\"},\n+                {\"name\": \"Morgan Kaufmann\"},\n+            ],\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n@@ -1001,6 +1055,33 @@ class NonAggregateAnnotationTestCase(TestCase):\n             .values_list(\"max_pubdate\", flat=True)\n             .order_by(\"max_pubdate\")\n         )\n+\n+    def test_alias_after_annotate_in_subquery(self):\n+        from django.db.models import Value\n+        from .models import Book, Publisher\n+\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {\"name\": \"Apress\"},\n+                {\"name\": \"Sams\"},\n+                {\"name\": \"Prentice Hall\"},\n+                {\"name\": \"Morgan Kaufmann\"},\n+            ],\n+        )\n         self.assertCountEqual(\n             qs,\n             [\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..a762465 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2406,6 +2406,27 @@ class CombinableTests(SimpleTestCase):\n             object() ^ Combinable()\n \n \n+from django.test import SimpleTestCase\n+from django.db.models import IntegerField, DecimalField, FloatField, AutoField, Expression\n+from django.db.models.expressions import CombinedExpression\n+from django.db.models.lookups import Combinable\n+\n+class CombinedExpressionTests(SimpleTestCase):\n+    def test_resolve_output_field_mod(self):\n+        tests = [\n+            (IntegerField, DecimalField, DecimalField),\n+            (DecimalField, IntegerField, DecimalField),\n+        ]\n+        connector = Combinable.MOD\n+        for lhs, rhs, combined in tests:\n+            with self.subTest(lhs=lhs, connector=connector, rhs=rhs, combined=combined):\n+                expr = CombinedExpression(\n+                    Expression(lhs()),\n+                    connector,\n+                    Expression(rhs()),\n+                )\n+                self.assertIsInstance(expr.output_field, combined)\n+\n class CombinedExpressionTests(SimpleTestCase):\n     def test_resolve_output_field_number(self):\n         tests = [\n@@ -2416,7 +2437,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..1ead783 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,59 @@\n+\n+class TestListEditableTransactions(TestCase):\n+    @skipUnlessDBFeature('supports_transactions')\n+    def test_list_editable_atomicity(self):\n+        # Set up objects.\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        # Log in superuser.\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+\n+        # Data for updating\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+\n+        # First test: mock a DatabaseError on log_change\n+        with mock.patch(\"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        \n+        # Validate that data hasn't changed\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        # Second test: allow one change, then raise DatabaseError\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", \n+            side_effect=[None, DatabaseError]\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+\n+        # Validate that data hasn't changed again\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +77,10 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.urls import reverse\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..01dada7 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2379,6 +2379,18 @@ class MakeMigrationsTests(MigrationTestBase):\n             )\n             self.assertIn(\"operations=[]\" if HAS_BLACK else \"operations=[\\n]\", content)\n \n+    def test_makemigrations_check_exits_without_writing(self):\n+        \"\"\"\n+        makemigrations --check should exit without making migrations\n+        or writing any files when there are changes.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            apps.register_model(\"migrations\", UnicodeModel)\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            # Ensure that no migration files were created\n+            self.assertFalse(os.path.exists(tmpdir))\n+\n     def test_makemigrations_with_invalid_custom_name(self):\n         msg = \"The migration name must be a valid Python identifier.\"\n         with self.assertRaisesMessage(CommandError, msg):\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..50956a2 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,10 +1,14 @@\n+\n import asyncio\n import os\n from unittest import mock\n \n from asgiref.sync import async_to_sync\n \n+import asyncio\n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n+from django.http import HttpResponseNotAllowed\n+from django.test import RequestFactory\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n from django.http import HttpResponse\n from django.test import SimpleTestCase\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..26e836b 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,9 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n-from django.utils.translation import gettext as _\n+from urllib.parse import urljoin\n+from django.urls import reverse\n+...\n \n from .models.custom_user import (\n     CustomUser,\n@@ -892,6 +895,47 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field_uuid(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_accuracy(self):\n+        user = User.objects.create_user(username=\"uniqueuser\", password=\"securepass\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # Assuming user.pk is used in the URL, verify the password reset link's accuracy\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.pk,),\n+        )\n+        joined_url = urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertTrue(pw_change_url.endswith(f\"{user.pk}/password/\"))\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..976d063 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1588,6 +1588,20 @@ class ManageRunserver(SimpleTestCase):\n         self.assertServerSettings(\"127.0.0.1\", \"7000\")\n \n     @unittest.skipUnless(socket.has_ipv6, \"platform doesn't support IPv6\")\n+    def test_runner_zero_ip_with_port(self):\n+        output = StringIO()\n+        call_command(\n+            self.cmd,\n+            addrport=\"0:8000\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            output.getvalue(),\n+        )\n+\n     def test_runner_addrport_ipv6(self):\n         call_command(self.cmd, addrport=\"\", use_ipv6=True)\n         self.assertServerSettings(\"::1\", \"8000\", ipv6=True, raw_ipv6=True)\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..11481c3 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,9 +507,38 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+from django.test import TestCase\n+from django.contrib.sitemaps import Sitemap\n+from django.urls import path\n+from django.utils.decorators import method_decorator\n+from django.contrib.sitemaps.views import index\n+from datetime import datetime\n+\n+class SitemapTestsBase(TestCase):\n+    def assertXMLEqual(self, xml1, xml2):\n+        # Custom XML comparison logic (assuming it's defined elsewhere)\n+        ...\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n \n-# RemovedInDjango50Warning\n-class DeprecatedTests(SitemapTestsBase):\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class LatestLastmodTests(SitemapTestsBase):\n+    @method_decorator(override_settings(SITEMAPS={'callable-lastmod-no-items': CallableLastmodNoItemsSitemap}))\n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n     @override_settings(\n         TEMPLATES=[\n             {\n",
  "django__django-16315": "",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..8934e6a 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..e97c10c 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,6 +161,23 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_tz_aware(self):\n+        now = timezone.now()\n+        # Datetime 31 days ago, timezone-aware\n+        past = now - datetime.timedelta(days=31)\n+        past = timezone.make_aware(past, timezone.get_default_timezone())  # Ensure past is timezone-aware\n+        self.assertEqual(timesince(past, now), \"1\\xa0month\")\n+        \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_tz_aware_with_time_difference(self):\n+        now = timezone.now()\n+        past = now - datetime.timedelta(days=31, hours=5)  # 31 days and 5 hours ago\n+        past = timezone.make_aware(past, timezone.get_default_timezone())\n+        self.assertEqual(timesince(past, now), \"1\\xa0month\")\n+\n     def test_naive_datetime_with_tzinfo_attribute(self):\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..1afcf5c 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -469,7 +469,30 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), \"Set foo\")\n \n \n-class UtilsTests(SimpleTestCase):\n+from django.core.management.base import BaseCommand\n+from django.core.management import call_command\n+from django.core.management.base import CommandError\n+import io\n+\n+class TestSubparserErrorFormatting(SimpleTestCase):\n+\n+    def test_missing_subcommand_argument(self):\n+        \"\"\"Test missing argument to subparser results in a clear error message.\"\"\"\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(dest='subcommand')\n+                create = subparsers.add_parser(\"create\")\n+                create.add_argument(\"name\")\n+            \n+            def handle(self, *args, **options):\n+                pass\n+        \n+        out = io.StringIO()\n+        err = io.StringIO()\n+        with self.assertRaises(CommandError) as cm:\n+            call_command('cheeses', 'create', stdout=out, stderr=err)\n+        \n+        self.assertIn(\"manage.py cheeses create: error: the following arguments are required: name\", str(cm.exception))\n     def test_no_existent_external_program(self):\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n         with self.assertRaisesMessage(CommandError, msg):\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..a096358 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -104,7 +104,15 @@ class FunctionTests(SimpleTestCase):\n             # Invalid suffix.\n             self.assertEqual(floatformat(66666.666, \"u2\"), \"66666.666\")\n \n-    def test_zero_values(self):\n+    def test_issue_zero_decimal_string(self):\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(\"0.00\", 1), \"0.0\")\n+        self.assertEqual(floatformat(\"0.00\", -1), \"0\")\n+\n+    def test_issue_zero_decimal(self):\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 1), \"0.0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), -1), \"0\")\n         self.assertEqual(floatformat(0, 6), \"0.000000\")\n         self.assertEqual(floatformat(0, 7), \"0.0000000\")\n         self.assertEqual(floatformat(0, 10), \"0.0000000000\")\n",
  "django__django-16493": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..a9d5b5a 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n@@ -77,6 +80,44 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertContains(response, \"override-change_form_object_tools\")\n         self.assertContains(response, \"override-prepopulated_fields_js\")\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Ensure that 'show_save_as_new' only appears when user has both\n+        'add' and 'change' permissions and 'save_as' is True.\n+        \"\"\"\n+        # User with only change permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with both add and change permission\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_change_list_template_tags(self):\n         \"\"\"\n         admin_list template tags follow the standard search pattern\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..d2c2276 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -107,8 +107,35 @@ class BaseConstraintTests(SimpleTestCase):\n         c = BaseConstraint(\"name\", \"custom %(name)s message\")\n         self.assertEqual(c.get_violation_error_message(), \"custom name message\")\n \n+from django.core.exceptions import ValidationError\n \n class CheckConstraintTests(TestCase):\n+    def test_custom_violation_error_code(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price_gt_discounted_price\",\n+            violation_error_code=\"price_check_fail\",\n+        )\n+        # Invalid product should raise a ValidationError with the custom code.\n+        invalid_product = Product(price=10, discounted_price=20)\n+        msg = \"Constraint \u201cprice_gt_discounted_price\u201d is violated.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"price_check_fail\")\n+\n+    def test_custom_violation_error_code_representation(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price_gt_discounted_price\",\n+            violation_error_code=\"price_check_fail\",\n+        )\n+        self.assertEqual(\n+            repr(constraint),\n+            \"<CheckConstraint: check=(AND: ('price__gt', F(discounted_price))) \"\n+            \"name='price_gt_discounted_price' violation_error_code='price_check_fail'>\",\n+        )\n     def test_eq(self):\n         check1 = models.Q(price__gt=models.F(\"discounted_price\"))\n         check2 = models.Q(price__lt=models.F(\"discounted_price\"))\n",
  "django__django-16569": "",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..a35c300 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,6 +43,23 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n+    def test_alter_field_operations_optimization(self):\n+        \"\"\"\n+        Tests consecutive AlterField optimization without preceding AddField. \n+        Should reduce all to only the last AlterField when optimized.\n+        \"\"\"\n+        # Consecutive AlterField operations without AddField at start\n+        operations = [\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=256, null=True)),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True)),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+        ]\n+        expected = [\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+        ]\n+        self.assertOptimizesTo(operations, expected)\n+\n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n",
  "django__django-16612": "",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..50664b4 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,16 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        test_br_and_z_files = (\n+            (\".br\", \"application/x-brotli\"),\n+            (\".Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_br_and_z_files:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..691af1a 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,46 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps('modeladmin')\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                'restaurant__place__country',\n+                'restaurant__place__country__name',\n+            ]\n+        ma = WaiterAdmin(Waiter, self.site)\n+\n+        # Original test case\n+        self.assertIs(ma.lookup_allowed('restaurant__place__country', '1'), True)\n+        self.assertIs(\n+            ma.lookup_allowed('restaurant__place__country__id__exact', '1'), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed('restaurant__place__country__name', 'test_value'), True\n+        )\n+\n+        # Adding more test cases for thorough verification\n+        # Testing negative scenario - lookup not in list_filter\n+        self.assertIs(\n+            ma.lookup_allowed('restaurant__place', '1'), False\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed('restaurant__country', '1'), False\n+        )\n+\n+        # Testing compound lookup\n+        self.assertIs(\n+            ma.lookup_allowed('restaurant__place__country__name__iexact', 'test_value'), True\n+        )\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..0b89942 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -921,8 +921,45 @@ class WriterTests(SimpleTestCase):\n             \"import datetime\\nfrom django.db import migrations, models\\n\",\n             output,\n         )\n-\n-    def test_migration_file_header_comments(self):\n+    def test_issue_import_sorting(self):\n+        \"\"\"\n+        Test that migration imports are sorted according to Django style\n+        and isort defaults.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield1\",\n+                        models.CharField(max_length=255),\n+                    ),\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ],\n+                \"dependencies\": [\n+                    (\"other_app\", \"0001_initial\"),\n+                ],\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        \n+        # Check if imports are sorted properly: standard before third-party\n+        expected_imports = (\n+            \"import datetime\\n\"\n+            \"import time\\n\"\n+            \"from django.db import migrations, models\\n\"\n+        )\n+        self.assertIn(expected_imports, output)\n+        \n+        # Additional checks for the specific issue, such as multiple imports of same module\n+        self.assertNotIn(\"import datetime\\nfrom django.db import migrations, models\\nimport time\", output)\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..cab0c32 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -319,6 +319,41 @@ class ImageFieldTwoDimensionsTests(ImageFieldTestMixin, TestCase):\n         # Dimensions were recalculated, and hence file should have opened.\n         self.assertIs(p.mugshot.was_opened, True)\n \n+  \n+from django.db.models import signals\n+from django.test import TestCase\n+\n+class ImageFieldSignalTests(TestCase):\n+    def setUp(self):\n+        # Define sample models to test post_init signal connection\n+\n+        class PersonWithImageField(models.Model):\n+            mugshot = models.ImageField(upload_to='mugshots/')\n+\n+        self.PersonWithImageField = PersonWithImageField\n+\n+        class PersonWithDimensions(models.Model):\n+            mugshot = models.ImageField(upload_to='mugshots/', width_field='width', height_field='height')\n+            width = models.PositiveIntegerField()\n+            height = models.PositiveIntegerField()\n+\n+        self.PersonWithDimensions = PersonWithDimensions\n+\n+    def test_post_init_not_connected_for_no_dimensions(self):\n+        # Check that post_init signal is not connected for models without width_field and height_field\n+        person_model_id = id(self.PersonWithImageField)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers]\n+        )\n+\n+    def test_post_init_connected_for_dimensions(self):\n+        # Check that post_init signal is connected for models with width_field and height_field\n+        person_model_id = id(self.PersonWithDimensions)\n+        self.assertIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers]\n+        )\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..2397a7a 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1157,4 +1157,32 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n+        \n+    def test_add_remove_multiple_indexes(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"speed\"], name=\"idx_pony_speed\"\n+                    ),\n+                ),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"color\"], name=\"idx_pony_color\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_speed\"),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_color\"),\n+            ],\n+            [],\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "",
  "django__django-16901": "",
  "django__django-17029": "",
  "django__django-17084": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1e0d80c..42e6a49 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -30,6 +30,7 @@ from django.db.models import (\n     When,\n )\n from django.db.models.expressions import Func, RawSQL\n+from django.db.models import F, Avg, Count\n from django.db.models.functions import (\n     Cast,\n     Coalesce,\n@@ -2206,4 +2207,32 @@ class AggregateAnnotationPruningTests(TestCase):\n             )\n         sql = ctx.captured_queries[0][\"sql\"].lower()\n         self.assertEqual(sql.count(\"select\"), 3, \"Subquery wrapping required\")\n-        self.assertEqual(aggregate, {\"sum_total_books\": 3})\n+        self.assertEqual(aggregate, {\"sum_total_books\": 3})\n+\n+    @skipUnlessDBFeature(\"supports_over_clause\")\n+    def test_aggregate_over_window_function_should_fail(self):\n+        queryset = Book.objects.annotate(\n+            cumul_DJR=Coalesce(Window(Sum(\"pages\"), order_by=F(\"pub_date\").asc()), 0.0)\n+        )\n+        with self.assertRaises(GroupingError):\n+            queryset.aggregate(\n+                DJR_total=Sum(\"pages\"),\n+                cumul_DJR_total=Sum(\"cumul_DJR\"),\n+            )\n+\n+    @skipUnlessDBFeature(\"supports_over_clause\")\n+    def test_correct_aggregate_window_behavior(self):\n+        total_books_qs = Book.objects.annotate(\n+            avg_pages_per_publisher=Coalesce(\n+                Window(Avg(\"pages\"), partition_by=F(\"publisher\")),\n+                0.0,\n+            )\n+        )\n+        aggregate = total_books_qs.aggregate(\n+            sum_avg_pages=Sum(\"avg_pages_per_publisher\"),\n+            books_count=Count(\"id\"),\n+        )\n+        self.assertEqual(\n+            aggregate,\n+            {\"sum_avg_pages\": 1100.0, \"books_count\": 2},\n+        )\n",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..9bc73a5 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,7 +641,39 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n-    def test_failing_migration(self):\n+    def test_makemigrations_router_allows_correct_models(self):\n+        \"\"\"\n+        Ensure that the router's allow_migrate method is called with only the models\n+        associated with the current app_label and not with models from other apps.\n+        \"\"\"\n+        apps.register_model('migrations', UnicodeModel)\n+\n+        with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n+            with mock.patch('migrations.routers.TestRouter.allow_migrate', return_value=True) as allow_migrate:\n+                call_command('makemigrations', 'migrations', verbosity=0)\n+                \n+                # Check that the allow_migrate is called with UnicodeModel for the correct app\n+                allow_migrate.assert_any_call('default', 'migrations', model_name='UnicodeModel')\n+                # Ensure that it is not called incorrectly with models from other apps\n+                calls = [call[0][1:] for call in allow_migrate.mock_calls]\n+                self.assertTrue(all(app == 'migrations' for _, app, _ in calls))\n+\n+    @override_settings(INSTALLED_APPS=['migrations', 'migrations2'])\n+    def test_makemigrations_multiple_apps_respects_routers(self):\n+        \"\"\"\n+        Test makemigrations when multiple apps are installed to ensure the router\n+        only receives models from the correct app.\n+        \"\"\"\n+        def patched_allow_migrate(router, db, app_label, model_name=None, **hints):\n+            if app_label == 'migrations' and model_name == 'UnicodeModel':\n+                return True\n+            return False\n+\n+        with mock.patch('migrations.routers.TestRouter.allow_migrate', side_effect=patched_allow_migrate) as allow_migrate:\n+            call_command('makemigrations', verbosity=0)\n+            calls = [call[1] for call in allow_migrate.mock_calls if call[1][1] == 'migrations']\n+            self.assertTrue(any(model_name == 'UnicodeModel' for _, _, model_name in calls))\n+            self.assertFalse(any(app_label == 'migrations2' for _, app_label, _ in calls))\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n \n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..cc1ad62 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -298,7 +298,43 @@ class PaginationTests(SimpleTestCase):\n             paginator.get_page(1)\n \n \n-class ModelPaginationTests(TestCase):\n+from django.test import TestCase\n+from django.core.paginator import Paginator, EmptyPage\n+from datetime import datetime\n+from .models import Article\n+\n+class PaginatorIterationTests(TestCase):\n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_empty_paginator_iteration(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_single_item_paginator_iteration(self):\n+        paginator = Paginator([1], 1)\n+        page_iterator = iter(paginator)\n+        expected_page = [1]\n+        self.assertEqual(expected_page, list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_large_page_iteration(self):\n+        large_list = list(range(1, 101))\n+        paginator = Paginator(large_list, 10)\n+        page_iterator = iter(paginator)\n+        for page_num in range(1, 11):\n+            expected_page = list(range((page_num - 1) * 10 + 1, page_num * 10 + 1))\n+            with self.subTest(page_num=page_num):\n+                self.assertEqual(expected_page, list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n     \"\"\"\n     Test pagination with Django model instances\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..d53691a 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -917,6 +917,8 @@ def test_hexbin_log():\n     h = ax.hexbin(x, y, yscale='log', bins='log')\n     plt.colorbar(h)\n \n+import numpy as np\n+import matplotlib.pyplot as plt\n \n def test_inverted_limits():\n     # Test gh:1553\n@@ -939,7 +941,13 @@ def test_inverted_limits():\n     plt.close()\n \n \n-@image_comparison(baseline_images=['nonfinite_limits'])\n+def test_invert_log_yscale_with_ylim():\n+    # Test inverting a log-scaled y-axis using set_ylim\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)  # Attempt to invert the y-axis\n+    assert ax.get_ylim() == (10, 1), \"Log-scaled y-axis should be inverted with set_ylim()\"\n+    plt.close(fig)\n def test_nonfinite_limits():\n     x = np.arange(0., np.e, 0.01)\n     # silence divide by zero warning from log(0)\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..8346415 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6961,7 +6961,32 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n \n-def test_shared_axes_retick():\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_after_clear(fig_test, fig_ref):\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+\n+    x = np.linspace(0, 2 * np.pi, 100)\n+    y = np.sin(x)\n+\n+    # Reference plot without using ax.clear()\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+    \n+    # Test plot that uses ax.clear()\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()  # Clear the axes before plotting\n+        ax.plot(x, y)\n+\n+    # Verify that tick labels are consistent between reference and test after clearing\n+    # Shared axes should maintain correct hide/show status of tick labels\n+    for ax_ref, ax_test in zip(axs_ref.flat, axs_test.flat):\n+        assert ax_ref.get_xticklabels() == ax_test.get_xticklabels()\n+        assert ax_ref.get_yticklabels() == ax_test.get_yticklabels()\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..ec804ee 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -307,8 +307,30 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n         assert y_units is ax.yaxis.units\n \n \n-def test_hist():\n+import pytest\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Smoke test to check that no deprecation warning is emitted when passing empty\n+    data to plot with string unit converters.\n+    \"\"\"\n+    with pytest.warns(None) as record:\n+        f, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.plot([], [])\n+    # Ensure no warnings of the specific type were recorded\n+    assert not any(item.category == MatplotlibDeprecationWarning for item in record)\n+\n+def test_pass_unitless_data():\n+    \"\"\"\n+    Verify that passing empty unitless data does not raise ConversionError.\n+    \"\"\"\n+    f, ax = plt.subplots()\n+    result = ax.xaxis.convert_units([])\n+    assert result == []\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..484e6cb 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -14,6 +14,7 @@ from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n import numpy as np\n \n \n@@ -21,7 +22,16 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_axes_set_visible(fig_test, fig_ref):\n+    # Create a figure with 3D projection\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.scatter([0, 1], [0, 1], [0, 1])\n+    ax_test.set_visible(False)   # Set visibility to False for test\n+\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    ax_ref.scatter([0, 1], [0, 1], [0, 1])\n+    ax_ref.set_visible(True)  # Set visibility to True for reference\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..e336124 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -156,8 +156,46 @@ def test_negative_rect():\n     neg_vertices = Rectangle((0, 0), -3, -2).get_verts()[:-1]\n     assert_array_equal(np.roll(neg_vertices, 2, 0), pos_vertices)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import matplotlib.pyplot as plt\n+import matplotlib.patches as mpatches\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_in_patch():\n+    fig_test, fig_ref = plt.figure(figsize=(5, 5)), plt.figure(figsize=(5, 5))\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    # Adding patch in fig_test with dash offset and pattern\n+    ax_test.add_patch(mpatches.Rectangle((0.2, 0.2), 1, 1, linewidth=2,\n+                                         edgecolor='blue', linestyle=(5, (5, 10))))\n+    \n+    # Adding equivalent Line2D in fig_ref for comparison\n+    x = [0.2, 1.2, 1.2, 0.2, 0.2]\n+    y = [0.2, 0.2, 1.2, 1.2, 0.2]\n+    ax_ref.plot(x, y, linewidth=2, color='blue', linestyle=(5, (5, 10)))\n+\n+    plt.close('all')\n+\n+@check_figures_equal(extensions=['png'])\n+def test_multiple_patches_with_dash_offsets():\n+    fig_test, fig_ref = plt.figure(figsize=(5, 5)), plt.figure(figsize=(5, 5))\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n \n-@image_comparison(['clip_to_bbox'])\n+    # Adding two patches with different dash offset configurations\n+    ax_test.add_patch(mpatches.Rectangle((0.2, 0.2), 0.5, 0.5, linewidth=2,\n+                                         edgecolor='blue', linestyle=(5, (5, 10))))\n+    ax_test.add_patch(mpatches.Ellipse((1.0, 0.5), 0.5, 0.5, linewidth=2,\n+                                       edgecolor='red', linestyle=(10, (5, 5))))\n+    \n+    # Adding equivalent Line2D in fig_ref for comparison\n+    ax_ref.plot([0.2, 0.7, 0.7, 0.2, 0.2], [0.2, 0.2, 0.7, 0.7, 0.2],\n+                linewidth=2, color='blue', linestyle=(5, (5, 10)))\n+    x_ellipse, y_ellipse = [0.75, 1.25, 1.25, 0.75, 0.75], [0.25, 0.25, 0.75, 0.75, 0.25]\n+    ax_ref.plot(x_ellipse, y_ellipse, linewidth=2, color='red', linestyle=(10, (5, 5)))\n+\n+    plt.close('all')\n def test_clip_to_bbox():\n     fig, ax = plt.subplots()\n     ax.set_xlim([-18, 20])\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..baa0df9 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,10 +2866,33 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.patches import Rectangle\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n-def test_stackplot_baseline():\n-    np.random.seed(0)\n+def test_stackplot_does_not_change_axes_cycler():\n+    x = [1, 2, 3]\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+\n+    # Use a color cycle in consecutive plots\n+    ax.plot(x, [1, 3, 1], color='C0')\n+    \n+    # Add a Rectangle with a facecolor from the cycle\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    \n+    # Call stackplot with colors from the cycler\n+    ax.stackplot(x, my_data, colors=['C2', 'C3', 'C4'])\n+\n+    # This should not raise a ValueError and should keep colors in sync\n+\n+@pytest.mark.parametrize(\"colors\", [['C0', 'C1', 'C2'], ['C3', 'C4', 'C5']])\n+def test_stackplot_color_cycler_with_parametrize(colors):\n+    x = [1, 2, 3]\n+    data = np.array([[1, 2, 3], [3, 2, 1], [1, 1, 1]])\n+    fig, ax = plt.subplots()\n+    ax.stackplot(x, data, colors=colors)\n+    # Ensure no exception is raised and plot is generated\n \n     def layers(n, m):\n         a = np.zeros((m, n))\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..7c4b0c2 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -2,6 +2,27 @@ from collections import namedtuple\n import io\n \n import numpy as np\n+@pytest.mark.parametrize(\"h_align, expected_offsets\", [\n+    (\"top\", [(0, 0), (10, 0)]), \n+    (\"bottom\", [(0, 10), (10, 0)]),\n+    (\"center\", [(0, 5), (10, 0)]),\n+])\n+def test_hpacker_alignments(h_align, expected_offsets):\n+    fig = plt.figure(dpi=72)\n+    da1 = DrawingArea(10, 20)\n+    rect1 = Rectangle((0, 0), 10, 20)\n+    da1.add_artist(rect1)\n+\n+    da2 = DrawingArea(10, 30)\n+    rect2 = Rectangle((0, 0), 10, 30)\n+    da2.add_artist(rect2)\n+\n+    hpacker = HPacker(children=[da1, da2], pad=0, sep=0, align=h_align)\n+    renderer = fig.canvas.get_renderer()\n+\n+    _, _, _, _, offset_pairs = hpacker.get_extent_offsets(renderer)\n+    assert_allclose(offset_pairs, expected_offsets)\n+\n from numpy.testing import assert_allclose\n import pytest\n \n@@ -11,6 +32,7 @@ import matplotlib.patches as mpatches\n import matplotlib.lines as mlines\n from matplotlib.backend_bases import MouseButton, MouseEvent\n \n+from matplotlib.patches import Rectangle\n from matplotlib.offsetbox import (\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n     OffsetImage, TextArea, _get_packed_offsets)\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..db96e42 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -578,6 +578,41 @@ def test_svg_font_string(font_str, include_generic):\n     plt.rcParams[\"font.size\"] = size\n     plt.rcParams[\"svg.fonttype\"] = \"none\"\n \n+def test_annotationbbox_multiple_gids():\n+    # Test that multiple AnnotationBbox objects with different gids appear in the SVG\n+    fig, ax = plt.subplots()\n+    ax.set_xlim(0, 1)\n+    ax.set_ylim(0, 1)\n+\n+    arr_img = np.ones((10, 10))  # Dummy image data\n+    xy1 = (0.3, 0.55)\n+    xy2 = (0.7, 0.55)\n+\n+    imagebox1 = OffsetImage(arr_img, zoom=0.1)\n+    imagebox1.image.axes = ax\n+    ab1 = AnnotationBbox(imagebox1, xy1, xybox=(90., -50.),\n+                         xycoords='data', boxcoords=\"offset points\",\n+                         pad=0.5, arrowprops=dict(arrowstyle=\"->\"))\n+    ab1.set_gid(\"annotation_1\")\n+    ax.add_artist(ab1)\n+\n+    imagebox2 = OffsetImage(arr_img, zoom=0.1)\n+    imagebox2.image.axes = ax\n+    ab2 = AnnotationBbox(imagebox2, xy2, xybox=(90., -50.),\n+                         xycoords='data', boxcoords=\"offset points\",\n+                         pad=0.5, arrowprops=dict(arrowstyle=\"->\"))\n+    ab2.set_gid(\"annotation_2\")\n+    ax.add_artist(ab2)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format=\"svg\")\n+        buf = fd.getvalue().decode(\"utf-8\")\n+\n+    expected1 = '<g id=\"annotation_1\">'\n+    expected2 = '<g id=\"annotation_2\">'\n+    assert expected1 in buf\n+    assert expected2 in buf\n+\n     fig, ax = plt.subplots()\n     if generic == \"sans-serif\":\n         generic_options = [\"sans\", \"sans-serif\", \"sans serif\"]\n",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..3e51c0e 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -623,6 +623,24 @@ class TestSpectral:\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n+    def test_psd_window_flattop(self):\n+        # Create a flattop window and test the psd function\n+        flattop_window = signal.windows.flattop(self.NFFT_density_real)\n+        \n+        # Generate random data for testing\n+        x = np.random.randn(self.NFFT_density_real * 10)\n+        \n+        # Compute the PSD using the flattop window\n+        spec, freqs = mlab.psd(x, NFFT=self.NFFT_density_real,\n+                               Fs=self.Fs, noverlap=0,\n+                               window=flattop_window,\n+                               scale_by_freq=True)\n+        \n+        # Assert that the specification of the window normalization is correct\n+        window_correction = np.sum(flattop_window)**2 / np.sum(flattop_window**2)\n+        assert np.isclose(spec.sum() * window_correction, \n+                          (spec * flattop_window**2).sum(), atol=1e-08)\n+\n     def test_psd_window_hanning_detrend_linear(self):\n         if self.NFFT_density is None:\n             return\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..ec20143 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,38 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    plt.plot([1.01e9, 1.02e9, 1.03e9])\n+    ax.figure.canvas.draw()  # Force drawing to update offset text\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    plt.plot([1.01e9, 1.02e9, 1.03e9])\n+    ax.figure.canvas.draw()  # Force drawing to update offset text\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    plt.plot([1.01e8, 1.02e8, 1.03e8])\n+    ax.figure.canvas.draw()  # Force drawing to update offset text\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    plt.plot([1.01e8, 1.02e8, 1.03e8])\n+    ax.figure.canvas.draw()  # Force drawing to update offset text\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..a3e18a3 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,8 +1,9 @@\n+\n from io import BytesIO\n import ast\n import pickle\n-\n-import numpy as np\n+import pickletools\n+import matplotlib.pyplot as plt\n import pytest\n \n import matplotlib as mpl\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..a238914 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -35,6 +35,29 @@ def test_simple():\n \n     plt.figure()\n     plt.bar(x=np.arange(10), height=np.arange(10))\n+\n+    # Test pickling a figure after align_labels()\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Test the align_labels method's impact on pickling\n+    fig.align_labels()\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+    loaded = pickle.loads(pkl.getbuffer())\n+    loaded.canvas.draw()\n+\n+    # Ensure the loaded figure properties match the original\n+    assert loaded.get_axes()[0].get_ylabel() == 'speed'\n+    assert loaded.get_axes()[1].get_ylabel() == 'acc'\n     pickle.dump(plt.gca(), BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n     fig = plt.figure()\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..4ae3207 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,47 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+import pytest\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+# Additional test to verify the fix for the inconsistent behavior of hexbin's mincnt parameter.\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_with_and_without_C(fig_test, fig_ref):\n+    # Generate simple test data.\n+    np.random.seed(42)\n+    X, Y = np.random.standard_normal((2, 50))\n+    C = np.ones_like(X)\n+\n+    gridsize = 30\n+    extent = [-3, 3, -3, 3]\n+\n+    # Setup reference figure: without using the C parameter.\n+    ax_ref = fig_ref.subplots()\n+    ax_ref.hexbin(X, Y, gridsize=gridsize, extent=extent, mincnt=1, cmap='Blues')\n+    ax_ref.set_facecolor('green')  # For visualization contrast.\n+\n+    # Setup test figure: using the C parameter.\n+    ax_test = fig_test.subplots()\n+    ax_test.hexbin(X, Y, C=C, reduce_C_function=np.sum, gridsize=gridsize, extent=extent, mincnt=1, cmap='Blues')\n+    ax_test.set_facecolor('green')\n+\n+def test_hexbin_mincnt_edge_cases():\n+    # Generate edge case data.\n+    X, Y = [1, 1, 2, 2], [1, 2, 1, 2]\n+    C = [0.5, 0.5, 2, 2]\n+\n+    fig, ax = plt.subplots()\n+    hb = ax.hexbin(X, Y, C=C, reduce_C_function=np.sum, mincnt=2)\n+    offsets = hb.get_offsets()\n+    values = hb.get_array()\n \n-def test_hexbin_log_clim():\n+    # Assert that the hexbin is behaving correctly with mincnt=2\n+    # This means both hexagons must have at least two points (considering C values),\n+    # resulting in the len of values being equal to the number of bins populated.\n+    assert len(values) == 2  # Two bins should survive the mincnt filter.\n+    assert all(values >= 1.0), \"All hexbin values should be greater than or equal to the mincnt threshold.\"\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..b8ced81 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,64 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+import pytest\n+from matplotlib import pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    cs_test = fig_test.subplots().contour([[0, 1], [1, 2]])\n+    cs_ref = fig_ref.subplots().contour([[1, 0], [2, 1]])\n+\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+@check_figures_equal(extensions=['png'])\n+def test_set_paths_with_identity(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+    paths_before = cs_test.get_paths()\n+    cs_test.set_paths(paths_before)\n+    cs_ref.contour([[0, 1], [1, 2]])\n+\n+@check_figures_equal(extensions=['png'])\n+def test_set_paths_altered_paths(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    cs_test = ax_test.contour([[0, 1], [2, 3]])\n+    original_paths = cs_test.get_paths()\n+    # Modify the original paths in a way that is consistent in how paths could be changed\n+    # Here, just for demonstration purposes, we're reversing the paths order\n+    modified_paths = original_paths[::-1]\n+    cs_test.set_paths(modified_paths)\n+    cs_ref.contour([[0, 1], [2, 3]])\n+\n+@check_figures_equal(extensions=['png'])\n+def test_set_paths_empty_paths(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+    cs_test.set_paths([])\n+    cs_ref.contourf([])\n+\n+@check_figures_equal(extensions=['png'])\n+def test_set_paths_preserve_contour_styles(fig_test, fig_ref):\n+    z = np.array([[0, 1], [2, 3]])\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # Use different styles\n+    cs_test = ax_test.contour(z, levels=2, colors='red')\n+    cs_ref = ax_ref.contour(z, levels=2, colors='blue')\n+\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+    # The paths themselves are exchanged, but test ensures styles are preserved\n+    for p_test, p_ref in zip(cs_test.collections, cs_ref.collections):\n+        assert p_test.get_color() == 'red'\n+        assert p_ref.get_color() == 'blue'\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..459736d 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,9 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..d682d3d 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,14 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://*example.com'),\n+            (InvalidURL, 'http://.example.com'),\n+            (InvalidURL, 'http://..example.com'),\n+            (InvalidURL, 'http://-.example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://-.com'),\n+            (InvalidURL, 'http://a..com'),\n+            (InvalidURL, 'http://example.-com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..3756e30 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,6 +2308,27 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+def test_setitem_with_values_property():\n+    import numpy as np\n+    from xarray import Variable\n+\n+    # Type with data stored in the values attribute\n+    class CustomWithValuesAttr:\n+        def __init__(self):\n+            self.values = 5\n+\n+    good_indexed = Variable(dims=(\"dim_0\",), data=[None])\n+    bad_indexed = Variable(dims=(\"dim_0\",), data=[None])\n+\n+    # Assign a set object\n+    good_indexed[{\"dim_0\": 0}] = set()\n+\n+    # Assign an object with a 'values' attribute\n+    bad_indexed[{\"dim_0\": 0}] = CustomWithValuesAttr()\n+\n+    # Test the outcomes\n+    assert isinstance(good_indexed.values[0], set)\n+    assert isinstance(bad_indexed.values[0], CustomWithValuesAttr)\n \n def test_raise_no_warning_for_nan_in_binary_ops():\n     with pytest.warns(None) as record:\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..536ec78 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2069,6 +2069,20 @@ class TestDataset:\n \n             assert data.attrs['Test'] is not copied.attrs['Test']\n \n+    def test_unicode_index_copy(self):\n+        ds = xr.Dataset(\n+            coords={'x': ['foo'], 'y': ('x', ['bar'])},\n+            data_vars={'z': ('x', ['baz'])}\n+        )\n+        \n+        # Test shallow copy\n+        shallow_copy = ds.copy(deep=False)\n+        assert shallow_copy.coords['x'].dtype == '<U3'\n+        \n+        # Test deep copy\n+        deep_copy = ds.copy(deep=True)\n+        assert deep_copy.coords['x'].dtype == '<U3'\n+\n     def test_copy_with_data(self):\n         orig = create_test_data()\n         new_data = {k: np.random.randn(*v.shape)\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..9ada314 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -571,7 +571,24 @@ class TestCombineAuto:\n         with raises_regex(ValueError, 'Every dimension needs a coordinate'):\n             combine_by_coords(objs)\n \n-        def test_empty_input(self):\n+        def test_non_monotonic_identical_coords(self):\n+            # Test combining datasets with non-monotonic but identical coordinates\n+            ycoord = ['a', 'c', 'b']\n+            data1 = np.random.rand(3, 3)\n+            data2 = np.random.rand(4, 3)\n+            \n+            ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data1)),\n+                          coords=dict(x=[1, 2, 3], y=ycoord))\n+            \n+            ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data2)),\n+                          coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+            \n+            expected_data = np.vstack([data1, data2])\n+            expected = Dataset(data_vars=dict(data=(['x', 'y'], expected_data)),\n+                               coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+            \n+            actual = combine_by_coords((ds1, ds2))\n+            assert_identical(expected, actual)\n             assert_identical(Dataset(), combine_by_coords([]))\n \n     def test_infer_order_from_coords(self):\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..6f9d092 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,7 +2309,22 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n-\n+    \n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        out = da.quantile(.9, dim='x', keep_attrs=True)\n+        assert out.attrs == {'units': 'K'}\n+        \n+        # Test with multiple quantiles\n+        out_multiple = da.quantile([0.1, 0.9], dim='x', keep_attrs=True)\n+        expected_attrs = {'units': 'K'}\n+        assert out_multiple.attrs == expected_attrs\n+        \n+        # Test without keep_attrs\n+        out_no_attrs = da.quantile(0.9, dim='x', keep_attrs=False)\n+        assert out_no_attrs.attrs == {}\n+        \n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n         vm = self.va.mean()\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..d18baf1 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -5,7 +6,7 @@ import xarray as xr\n from xarray.core import dtypes, merge\n \n from . import raises_regex\n-from .test_dataset import create_test_data\n+from xarray.testing import assert_identical\n \n \n class TestMergeInternals:\n@@ -134,7 +135,41 @@ class TestMergeFunction:\n \n \n class TestMergeMethod:\n-    def test_merge(self):\n+    def test_merge_dataarray(self):\n+        # Basic test case from the issue with a Dataset and a DataArray\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+        expected = xr.merge([ds, da])\n+        assert_identical(ds.merge(da), expected)\n+\n+    def test_merge_dataarray_with_coords(self):\n+        # Test merging a DataArray with coordinates into a Dataset\n+        ds = xr.Dataset({\"a\": (\"x\", [0, 1])})\n+        da = xr.DataArray(data=(\"x\", [1, 2]), name=\"b\", coords={\"x\": [0, 1]})\n+        expected = xr.merge([ds, da])\n+        assert_identical(ds.merge(da), expected)\n+\n+    def test_merge_dataarray_with_different_dims(self):\n+        # Test merging a DataArray into a Dataset with different dimensions\n+        ds = xr.Dataset({\"a\": (\"x\", [0, 1])})\n+        da = xr.DataArray(data=(\"y\", [2, 3]), name=\"b\", coords={\"y\": [0, 1]})\n+        with pytest.raises(ValueError):\n+            ds.merge(da)\n+\n+    def test_merge_dataarrays_shared_dimension(self):\n+        # Merge two DataArrays into a Dataset sharing a dimension\n+        da1 = xr.DataArray(data=(\"x\", [1, 2]), name=\"a\")\n+        da2 = xr.DataArray(data=(\"x\", [3, 4]), name=\"b\")\n+        ds = xr.Dataset()\n+        expected = xr.Dataset({\"a\": (\"x\", [1, 2]), \"b\": (\"x\", [3, 4])})\n+        assert_identical(ds.merge(da1).merge(da2), expected)\n+\n+    def test_merge_overlapping_dataarray_names(self):\n+        # Merge DataArray with overlapping names, ensuring conflicts are handled\n+        ds = xr.Dataset({\"a\": (\"x\", [0, 1])})\n+        da = xr.DataArray(data=(\"x\", [2, 3]), name=\"a\")\n+        with pytest.raises(xr.MergeError):\n+            ds.merge(da)\n         data = create_test_data()\n         ds1 = data[[\"var1\"]]\n         ds2 = data[[\"var3\"]]\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..e9aab0b 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -595,13 +595,26 @@ def test_min_count(dim_num, dtype, dask, func, aggdim):\n     assert_dask_array(actual, dask)\n \n \n+@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+@pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n-def test_min_count_dataset(func):\n-    da = construct_dataarray(2, dtype=float, contains_nan=True, dask=False)\n-    ds = Dataset({\"var1\": da}, coords={\"scalar\": 0})\n-    actual = getattr(ds, func)(dim=\"x\", skipna=True, min_count=3)[\"var1\"]\n-    expected = getattr(ds[\"var1\"], func)(dim=\"x\", skipna=True, min_count=3)\n+def test_min_count_multiple_dimensions(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+\n+    da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n+    min_count = 2\n+\n+    # Test min_count with more than one dimension\n+    actual = getattr(da, func)(dim=(\"x\", \"y\", \"z\"), skipna=True, min_count=min_count)\n+\n+    # Construct expected result by reducing one dimension at a time\n+    intermediate = getattr(da, func)(dim=\"x\", skipna=True, min_count=1)\n+    intermediate = getattr(intermediate, func)(dim=\"y\", skipna=True, min_count=1)\n+    expected = getattr(intermediate, func)(dim=\"z\", skipna=True, min_count=min_count)\n+\n     assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n \n \n @pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..5f44970 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -114,7 +114,24 @@ class TestMergeFunction:\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n \n-    def test_merge_dicts_dims(self):\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds3.attrs[\"x\"] == 2\n+        \n+    def test_merge_attrs_independent_change(self):\n+        ds1 = xr.Dataset(attrs={\"key\": \"value1\"})\n+        ds2 = xr.Dataset(attrs={\"key\": \"value2\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        \n+        # Modify an attribute in ds3 and verify ds1 and ds2 remain unchanged\n+        ds3.attrs[\"key\"] = \"modified_value\"\n+        assert ds1.attrs[\"key\"] == \"value1\"\n+        assert ds2.attrs[\"key\"] == \"value2\"\n+        assert ds3.attrs[\"key\"] == \"modified_value\"\n         actual = xr.merge([{\"y\": (\"x\", [13])}, {\"x\": [12]}])\n         expected = xr.Dataset({\"x\": [12], \"y\": (\"x\", [13])})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..f288445 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,8 +1921,29 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n \n-@pytest.mark.parametrize(\"use_dask\", [True, False])\n+    # Additional test cases for dtype checking\n+    data = xr.DataArray(np.ones([2, 2], dtype=np.int8), dims=[\"x\", \"y\"])\n+    data.attrs[\"test_attr\"] = \"test_value\"\n+    result = xr.where(data > 0, data, 0, keep_attrs=True)\n+    assert result.dtype == np.int8\n+    assert result.attrs[\"test_attr\"] == \"test_value\"\n+\n+    # Test without keep_attrs\n+    result_no_attrs = xr.where(data > 0, data, 0)\n+    assert result_no_attrs.attrs == {}\n+\n+    # Test with scalar input\n+    scalar_data = xr.DataArray(1, attrs={\"scalar_attr\": \"scalar\"})\n+    result_scalar = xr.where(scalar_data == 1, scalar_data, 0, keep_attrs=True)\n+    assert result_scalar.attrs[\"scalar_attr\"] == \"scalar\"\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n     if use_dask and not has_dask:\n",
  "pydata__xarray-4695": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 3a4b8ad..9d0be3c 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -1165,6 +1165,19 @@ class TestDataArray:\n         assert_identical(da[\"x\"], get_data()[\"x\"])\n         assert_identical(da[\"non-dim\"], get_data()[\"non-dim\"])\n \n+    def test_loc_dim_name_collision_with_sel_params(self):\n+        array = DataArray([[0, 0], [1, 1]], dims=[\"dim1\", \"method\"], coords={\"dim1\": [\"x\", \"y\"], \"method\": [\"a\", \"b\"]})\n+        expected = DataArray([[0], [1]], dims=[\"dim1\", \"method\"], coords={\"dim1\": [\"x\", \"y\"], \"method\": [\"a\"]})\n+        assert_identical(array.loc[dict(dim1=[\"x\", \"y\"], method=[\"a\"])], expected)\n+\n+        array = DataArray([[0, 0], [1, 1]], dims=[\"method\", \"dim2\"], coords={\"method\": [\"x\", \"y\"], \"dim2\": [\"a\", \"b\"]})\n+        expected = DataArray([[0]], dims=[\"method\", \"dim2\"], coords={\"method\": [\"x\"], \"dim2\": [\"a\"]})\n+        assert_identical(array.loc[dict(method=\"x\", dim2=\"a\")], expected)\n+\n+        array = DataArray([[0, 0], [1, 1]], dims=[\"dim1\", \"dim2\"], coords={\"dim1\": [\"x\", \"y\"], \"dim2\": [\"a\", \"b\"]})\n+        expected = DataArray([0], dims=[\"dim1\"], coords={\"dim1\": [\"x\"]})\n+        assert_identical(array.loc[dict(dim1=\"x\", dim2=\"a\")], expected)\n+\n     def test_loc_single_boolean(self):\n         data = DataArray([0, 1], coords=[[True, False]])\n         assert data.loc[True] == 0\n",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..b0f84e0 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -9,12 +9,35 @@ from xarray.coding import variables\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n \n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n+import numpy as np\n \n with suppress(ImportError):\n     import dask.array as da\n \n-\n-def test_CFMaskCoder_decode():\n+@pytest.mark.parametrize(\"signed\", [True, False])\n+def test_decode_opendap_signed_unsigned(signed):\n+    if signed:\n+        # OPeNDAP with signed bytes: _Unsigned=False\n+        # Create a test for signed decoding from unsigned bytes\n+        original_values = np.array([-1, 0, 1, 127, -128], dtype=np.int8)\n+        encoded = xr.Variable(\n+            (\"x\",), original_values.astype(np.uint8), attrs={\"_Unsigned\": \"false\"}\n+        )\n+        coder = variables.UnsignedIntegerCoder()\n+        decoded = coder.decode(encoded)\n+        assert decoded.dtype == np.int8\n+        assert np.array_equal(decoded.values, original_values)\n+    else:\n+        # OPeNDAP with unsigned bytes: _Unsigned=True\n+        # Create a test for unsigned decoding from signed bytes\n+        original_values = np.array([0, 1, 255, 254], dtype=np.uint8)\n+        encoded = xr.Variable(\n+            (\"x\",), original_values.astype(np.int8), attrs={\"_Unsigned\": \"true\"}\n+        )\n+        coder = variables.UnsignedIntegerCoder()\n+        decoded = coder.decode(encoded)\n+        assert decoded.dtype == np.uint8\n+        assert np.array_equal(decoded.values, original_values)\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n     coder = variables.CFMaskCoder()\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..7bae901 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1920,6 +1920,23 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n+def test_where_scalar_second_argument_keep_attrs() -> None:\n+    \"\"\"Test where with scalar as the second argument and keep_attrs=True.\"\"\"\n+    cond = xr.DataArray([True, False, True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([10, 10, 10, 10], dims=\"x\", attrs={\"attr\": \"x-attrs\"})\n+    y = 0  # Scalar value as the second argument\n+\n+    # Using keep_attrs=True; it should not fail and should keep x's attrs\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([10, 0, 10, 0], dims=\"x\", attrs={\"attr\": \"x-attrs\"})\n+    assert_identical(expected, actual)\n+\n+    # Additionally, test without keep_attrs to verify flexibility\n+    actual_no_attrs = xr.where(cond, x, y, keep_attrs=False)\n+    expected_no_attrs = xr.DataArray([10, 0, 10, 0], dims=\"x\")\n+    assert_identical(expected_no_attrs, actual_no_attrs)\n+\n+\n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n     x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n",
  "pydata__xarray-6599": "",
  "pydata__xarray-6721": "",
  "pydata__xarray-6744": "",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..6b55326 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -494,6 +494,32 @@ def test_get_map_data() -> None:\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n \n+import pytest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from similar import Run\n+\n+def test_set_duplicate_lines_to_zero_no_errors() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=0\", SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n+\n+def test_set_duplicate_lines_to_positive() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=3\", SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 1\n+    assert \"Duplicate code found\" in output.getvalue()\n+\n+def test_without_duplicates_option() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 1\n+    assert \"Duplicate code found\" in output.getvalue()\n+\n     assert len(expected_linelists) == len(data)\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n@@ -501,4 +527,4 @@ def test_get_map_data() -> None:\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..a3e6cc9 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,41 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pylint.lint import Run\n+from _pytest.capture import CaptureFixture\n+from pathlib import Path\n+\n+EMPTY_MODULE = Path(\"/path/to/empty/module\")\n+\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+\n+def test_unexpected_argument_with_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that an argument after -v/--verbose causes an error.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-v\", \"unexpected_argument\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"unrecognized arguments: unexpected_argument\" in output.err\n+\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"--verbose\", \"unexpected_arg\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"unrecognized arguments: unexpected_arg\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex d5ccd91..972e187 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -863,8 +863,33 @@ def test_by_module_statement_value(initialized_linter: PyLinter) -> None:\n         # computed for that module\n         assert module_stats[\"statement\"] == linter2.stats.statement\n \n-\n-def test_import_sibling_module_from_namespace(initialized_linter: PyLinter) -> None:\n+import os\n+from pylint.lint import Run\n+from os.path import join\n+\n+def test_ignore_with_recursive_mode():\n+    \"\"\"Test Pylint's behavior with `--ignore`, `--ignore-paths`, and `--ignore-patterns` in recursive mode.\"\"\"\n+    test_dir = \"test_project\"\n+    ignored_subdir = \".ignored\"\n+    os.makedirs(join(test_dir, ignored_subdir), exist_ok=True)\n+    \n+    # Create dummy Python files\n+    with open(join(test_dir, ignored_subdir, \"foo.py\"), 'w', encoding='utf-8') as f:\n+        f.write(\"# dummy file for testing\")\n+\n+    with open(join(test_dir, \"bar.py\"), 'w', encoding='utf-8') as f:\n+        f.write(\"# dummy file for testing\")\n+\n+    # Run Pylint with ignore options\n+    run_ignore = Run([test_dir, '--recursive=y', '--ignore=.ignored'], exit=False)\n+    run_ignore_paths = Run([test_dir, '--recursive=y', '--ignore-paths=.ignored'], exit=False)\n+    run_ignore_patterns = Run([test_dir, '--recursive=y', '--ignore-patterns=^\\\\.ignored'], exit=False)\n+\n+    # Path to the ignored file\n+    ignored_file_path = os.path.abspath(join(test_dir, ignored_subdir, \"foo.py\"))\n+\n+    # Validate the results\n+    assert all(ignored_file_path not in result.linter.stats['by_module'] for result in [run_ignore, run_ignore_paths, run_ignore_patterns])\n     \"\"\"If the parent directory above `namespace` is on sys.path, ensure that\n     modules under `namespace` can import each other without raising `import-error`.\"\"\"\n     linter = initialized_linter\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..a43a70b 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1329,8 +1329,27 @@ class TestRunTC:\n                     [\".\", \"--recursive=y\"],\n                     code=0,\n                 )\n-\n-    def test_regression_recursive_current_dir(self):\n+    def test_ignore_paths_with_recursive(self):\n+        \"\"\"Tests that the ignore-paths configuration is respected when using --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            # Remove directory HERE/regrtest_data from sys.path to avoid astroid interference.\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                # Change to the directory we want to run tests in.\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                # Run pylint with the recursive flag and ignore-paths set to a certain directory.\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n             # astroid to believe that directory is a package.\n",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..91f7213 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,27 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+def test_caplog_get_records_after_clear(caplog):\n+    def log_warning(message):\n+        logger = logging.getLogger()\n+        logger.warning(message)\n+\n+    # Initial logging\n+    log_warning(\"initial_log\")\n+    assert caplog.records\n+    assert [x.getMessage() for x in caplog.get_records(\"call\")] == [\"initial_log\"]\n+\n+    # Clear the capture logs\n+    caplog.clear()\n+    assert not caplog.records\n+    assert caplog.get_records(\"call\") == []\n+\n+    # Log again and verify\n+    log_warning(\"new_log_after_clear\")\n+    assert [x.getMessage() for x in caplog.get_records(\"call\")] == [\"new_log_after_clear\"]\n+\n+import logging\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..afeae4a 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1273,6 +1273,36 @@ def test_pdb_teardown_skipped(\n     result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n     assert tracked == []\n \n+def test_pdb_teardown_skip_decorator_with_pdb(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n+    \"\"\"\n+    With --pdb, ensure setUp and tearDown are not called for tests\n+    skipped using unittest.skip decorator at the class level.\n+    \"\"\"\n+    tracked: List[str] = []\n+    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        @unittest.skip(\"Skipping this class\")\n+        class SampleTest(unittest.TestCase):\n+\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_sample(self):\n+                pass\n+        \"\"\"\n+    )\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+\n \n def test_async_support(pytester: Pytester) -> None:\n     pytest.importorskip(\"unittest.async_case\")\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..cb8635d 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,9 +1051,16 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n-\n-@contextlib.contextmanager\n-def saved_fd(fd):\n+def test_encoded_file_mode():\n+    \"\"\"Test to verify that EncodedFile does not advertise a binary mode.\"\"\"\n+    import io\n+    from _pytest.capture import EncodedFile\n+    \n+    buffer = io.StringIO()\n+    ef = EncodedFile(buffer, 'utf-8')\n+    \n+    # We expect that 'b' should not be in modes described by EncodedFile\n+    assert 'b' not in getattr(ef, 'mode', ''), \"EncodedFile mode should not include 'b'\"\n     new_fd = os.dup(fd)\n     try:\n         yield\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 8c1c2d7..96e8190 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1,3 +1,4 @@\n+\n import gc\n \n import pytest\n@@ -20,7 +21,20 @@ def test_simple_unittest(testdir):\n     assert reprec.matchreport(\"test_failing\").failed\n \n \n-def test_runTest_method(testdir):\n+def test_mock_sentinel_check_against_numpy_array(self, testdir):\n+    \"\"\"Ensure that patching with numpy arrays does not cause ValueError\"\"\"\n+    pytest.importorskip(\"numpy\")\n+    numpy_array_code = \"\"\"\n+    from unittest.mock import patch\n+    import numpy as np\n+    class TestClass:\n+        @patch('module.UNUSED', new=np.array([1, 2, 3]))\n+        def test_function(self):\n+            assert True\n+    \"\"\"\n+    testdir.makepyfile(numpy_array_code)\n+    reprec = testdir.inline_run()\n+    reprec.assertoutcome(passed=1)\n     testdir.makepyfile(\n         \"\"\"\n         import unittest\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..30d54d8 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -121,13 +121,35 @@ class TestPaste(object):\n         return calls\n \n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n+        # Updated test for switching lexer to \"text\".\n+        result_lexer_text = pastebin.create_new_paste(b\"full-paste-contents\")\n+        assert result_lexer_text == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=full-paste-contents\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+\n+    def test_create_paste_invalid_data(self, pastebin, monkeypatch):\n+        # Test case where the data causes an HTTP error 400 due to invalid characters.\n+        def mocked_urlopen_400(url, data):\n+            raise urllib.error.HTTPError(\n+                url, 400, \"Bad Request\", hdrs=None, fp=None\n+            )\n+\n+        monkeypatch.setattr(urllib.request, \"urlopen\", mocked_urlopen_400)\n+        with pytest.raises(urllib.error.HTTPError) as excinfo:\n+            pastebin.create_new_paste(b\"invalid-contents-\\xff\")\n+        assert excinfo.value.code == 400\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n+        lexer = \"text\"\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..44e0de9 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -703,6 +703,28 @@ class Test_genitems:\n         assert items[2].name == \"testmethod_one\"\n \n         # let's also test getmodpath here\n+\n+    def test_parametrize_issue_resolution(self, testdir):\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            \n+            @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+            def testmethod_with_issue(arg0):\n+                pass\n+\n+            class TestExample:\n+                @pytest.mark.parametrize(\"arg0\", [\"..[\", \".[\", \".\"])\n+                def test_parametrized_method(self, arg0):\n+                    pass\n+            \"\"\"\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 4\n+        assert items[0].name == \"testmethod_with_issue[.[]\"\n+        assert items[1].getmodpath() == \"TestExample.test_parametrized_method[.[]\"\n+        assert items[2].name == \"TestExample.test_parametrized_method[..[]\"\n+        assert items[3].getmodpath() == \"TestExample.test_parametrized_method[.[]\"\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..406e3d3 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,7 +1,9 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n+from _pytest.pytester import Testdir\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n from _pytest.skipping import pytest_runtest_setup\n@@ -152,8 +154,31 @@ class TestEvaluation:\n         assert skipped\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n+class TestDynamicXFail:\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Verifies if dynamic xfail can be added during test execution and fail as xfail\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n \n-class TestXFail:\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Verifies if dynamic xfail with strict=True passes when test passes\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     @pytest.mark.parametrize(\"strict\", [True, False])\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..14e588a 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,8 +513,11 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n-\n-    def test_capfdbinary(self, testdir):\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n             def test_hello(capfdbinary):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..a888820 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,6 +1,9 @@\n+\n import logging\n \n import pytest\n+from _pytest.pytester import Testdir\n+\n from _pytest.logging import caplog_records_key\n \n logger = logging.getLogger(__name__)\n@@ -27,7 +30,28 @@ def test_change_level(caplog):\n     assert \"CRITICAL\" in caplog.text\n \n \n-def test_change_level_undo(testdir):\n+def test_change_level_undos_handler_level(testdir: Testdir) -> None:\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n     \"\"\"Ensure that 'set_level' is undone after the end of the test\"\"\"\n     testdir.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..945b709 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1165,7 +1166,33 @@ def test_collect_symlink_out_of_tree(testdir):\n     )\n \n     out_of_tree = testdir.tmpdir.join(\"out_of_tree\").ensure(dir=True)\n-    symlink_to_sub = out_of_tree.join(\"symlink_to_sub\")\n+class TestSymlinkCollection:\n+    def test_collect_symlinked_nested_dir(self, pytester: Pytester) -> None:\n+        \"\"\"A symlinked directory containing another symlinked directory is collected.\"\"\"\n+        dir = pytester.mkdir(\"dir\")\n+        nested_dir = dir.mkdir(\"nested\")\n+        nested_dir.joinpath(\"test_nested.py\").write_text(\"def test_nested(): pass\", \"utf-8\")\n+        pytester.path.joinpath(\"symlink_nested\").symlink_to(nested_dir)\n+        \n+        result = pytester.runpytest()\n+        result.assert_outcomes(passed=1)\n+    \n+    def test_collect_symlink_outside_root_dir(self, pytester: Pytester) -> None:\n+        \"\"\"A symlink pointing to a directory outside the root testing directory is collected.\"\"\"\n+        outside_dir = pytester.mktemp(\"outside\")\n+        outside_dir.joinpath(\"test_outside.py\").write_text(\"def test_outside(): pass\", \"utf-8\")\n+        pytester.path.joinpath(\"symlink_outside\").symlink_to(outside_dir)\n+        \n+        result = pytester.runpytest()\n+        result.assert_outcomes(passed=1)\n+    \n+    def test_symlink_to_empty_directory(self, pytester: Pytester) -> None:\n+        \"\"\"A symlink pointing to an empty directory results in no tests collected.\"\"\"\n+        empty_dir = pytester.mktemp(\"empty\")\n+        pytester.path.joinpath(\"symlink_empty\").symlink_to(empty_dir)\n+\n+        result = pytester.runpytest()\n+        result.assert_outcomes(passed=0, errors=0)\n     symlink_or_skip(sub, symlink_to_sub)\n     sub.chdir()\n     result = testdir.runpytest(\"-vs\", \"--rootdir=%s\" % sub, symlink_to_sub)\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..8446676 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,41 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_fixtures_unittest_setUpClass_visibility(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class TestExample(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+\n+            def test_something(self):\n+                pass\n+\n+        class AnotherTestExample(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+\n+            def test_another_thing(self):\n+                pass\n+        \"\"\"\n+    )\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_TestExample*\")\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_AnotherTestExample*\")\n \n-def test_setup_class(pytester: Pytester) -> None:\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines(\n+        [\n+            \"*unittest_setUpClass_fixture_TestExample*\",\n+            \"*unittest_setUpClass_fixture_AnotherTestExample*\",\n+        ]\n+    )\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..cc01dee 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -567,7 +567,30 @@ def test_class_weights_cv():\n     reg = RidgeClassifierCV(class_weight=None, alphas=[.01, .1, 1])\n     reg.fit(X, y)\n \n-    # we give a small weights to class 1\n+    # Test `RidgeClassifierCV` with `store_cv_values=True` argument.\n+    def test_ridge_classifier_cv_store_cv_values():\n+        x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                      [1.0, 1.0], [1.0, 0.0]])\n+        y = np.array([1, 1, 1, -1, -1])\n+\n+        n_samples = x.shape[0]\n+        alphas = [1e-1, 1e0, 1e1]\n+        n_alphas = len(alphas)\n+\n+        r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+        # with len(y.shape) == 1\n+        n_targets = 1\n+        r.fit(x, y)\n+        assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+        # with len(y.shape) == 2\n+        y = np.array([[1, 1, 1, -1, -1],\n+                      [1, -1, 1, -1, 1],\n+                      [-1, -1, 1, -1, -1]]).transpose()\n+        n_targets = y.shape[1]\n+        r.fit(x, y)\n+        assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n     reg = RidgeClassifierCV(class_weight={1: 0.001}, alphas=[.01, .1, 1, 10])\n     reg.fit(X, y)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..f2c10a4 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,26 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+def test_int_overflow_fowlkes_mallows_score():\n+    # Test for overflow in fowlkes_mallows_score\n+\n+    # These labels should create a contingency matrix where pk * qk overflows\n+    labels_true = np.array([0] * 65000 + [1] * 32000)\n+    labels_pred = np.array([1] * 65000 + [0] * 32000)\n+\n+    # Ensure no overflow occurs and the result is finite\n+    assert_all_finite(fowlkes_mallows_score(labels_true, labels_pred))\n+\n+    # Test valid scoring\n+    labels_true = np.array([1, 1, 0, 0])\n+    labels_pred = np.array([0, 0, 1, 1])\n+\n+    # Perfect match should give a score of 1.0\n+    assert_almost_equal(fowlkes_mallows_score(labels_true, labels_pred), 1.0)\n+\n+    # Completely random should give a score of 0.0\n+    labels_pred = np.array([0, 1, 0, 1])\n+    assert_almost_equal(fowlkes_mallows_score(labels_true, labels_pred), 0.0)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..fe2ca9a 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1173,7 +1173,19 @@ def test_search_cv_timing():\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n \n-def test_grid_search_correct_score_results():\n+def test_search_refit_time():\n+    svc = LinearSVC(random_state=0)\n+    X = [[1, ], [2, ], [3, ], [4, ]]\n+    y = [0, 1, 1, 0]\n+    \n+    gs = GridSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0)\n+    rs = RandomizedSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0, n_iter=2)\n+\n+    for search in (gs, rs):\n+        search.fit(X, y)\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n     # test that correct scores are used\n     n_splits = 3\n     clf = LinearSVC(random_state=0)\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..06ee9f5 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -492,7 +492,28 @@ def test_logistic_cv():\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n \n-def test_multinomial_logistic_regression_string_inputs():\n+from sklearn.datasets import make_classification\n+from sklearn.metrics import log_loss\n+import pytest\n+\n+def test_logistic_cv_multinomial_score():\n+    # Test LogisticRegressionCV to ensure it uses the correct scoring when multi_class='multinomial'.\n+    X, y = make_classification(n_samples=100, n_features=5, n_classes=3, n_informative=3, random_state=42)\n+    train, test = np.arange(80), np.arange(80, 100)\n+\n+    # Initialize LogisticRegression to compare manual scoring with built-in scorer\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    # Fit using training set\n+    lr.fit(X[train], y[train])\n+\n+    # Calculate log loss on the test set as the reference score\n+    scorer = get_scorer('neg_log_loss')\n+    manual_score = log_loss(y[test], lr.predict_proba(X[test]), normalize=True)\n+\n+    # Get score from _log_reg_scoring_path\n+    _, _, scores, _ = linear_model.logistic._log_reg_scoring_path(X, y, train, test, Cs=[1.], scoring=scorer, multi_class='multinomial')\n+\n+    assert np.allclose(scores[0], -manual_score), \"The scoring path should match manual log loss computation\"\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..7de7d82 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,6 +154,24 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n+from sklearn.base import BaseEstimator, clone\n+\n+class MyEstimator(BaseEstimator):\n+    def __init__(self, empty=None):\n+        self.empty = empty\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    from sklearn.preprocessing import StandardScaler\n+    \n+    # Create an instance with a class type as a parameter\n+    clf = MyEstimator(empty=StandardScaler)\n+    clf_cloned = clone(clf)\n+    \n+    # The cloned object should have the same class type in its parameter\n+    assert clf.empty is clf_cloned.empty\n+\n+...\n def test_clone_sparse_matrices():\n     sparse_matrix_classes = [\n         getattr(sp, name)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..3411afd 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -18,6 +18,8 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n+import numpy as np\n+from sklearn.linear_model import LassoLarsIC\n from sklearn.linear_model.least_angle import _lars_path_residues\n \n diabetes = datasets.load_diabetes()\n@@ -26,7 +28,30 @@ X, y = diabetes.data, diabetes.target\n # TODO: use another dataset that has multiple drops\n \n \n-def test_simple():\n+@pytest.mark.parametrize('init_copy_X', [True, False])\n+@pytest.mark.parametrize('fit_copy_X', [True, False, None])\n+def test_lasso_larsic_copy_X_param(init_copy_X, fit_copy_X):\n+    \"\"\"Test LassoLarsIC handling of the copy_X parameter in both init and fit\"\"\"\n+    # Initialize LassoLarsIC with a specific copy_X value\n+    lasso_lars = LassoLarsIC(copy_X=init_copy_X, precompute=False)\n+    rng = np.random.RandomState(42)\n+    X = rng.normal(0, 1, (50, 3))\n+    y = rng.normal(0, 1, 50)\n+    X_original_copy = X.copy()\n+\n+    # Fit the model with a potentially different copy_X value if provided\n+    if fit_copy_X is None:\n+        lasso_lars.fit(X, y)\n+    else:\n+        lasso_lars.fit(X, y, copy_X=fit_copy_X)\n+\n+    # Determine expected behavior\n+    expected_copy_behavior = fit_copy_X if fit_copy_X is not None else init_copy_X\n+\n+    # Check if changes are as expected\n+    assert np.array_equal(X, X_original_copy) == expected_copy_behavior, (\n+        f\"Test failed for init_copy_X={init_copy_X}, fit_copy_X={fit_copy_X}\"\n+    )\n     # Principle of Lars is to keep covariances tied and decreasing\n \n     # also test verbose output\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..277f7ae 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,6 +493,20 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n+    # Additional tests\n+    # Ensure that different random states in StratifiedKFold produce different folds\n+    X_10 = np.arange(10)\n+    y = [0] * 5 + [1] * 5\n+    kf2 = StratifiedKFold(5, shuffle=True, random_state=2)\n+    test_set0 = sorted([tuple(s[1]) for s in kf0.split(X_10, y)])\n+    test_set2 = sorted([tuple(s[1]) for s in kf2.split(X_10, y)])\n+    assert test_set0 != test_set2, \"Different random states should produce different splits when shuffle=True\"\n+\n+    # Ensure that the same random state produces the same shuffle\n+    kf3 = StratifiedKFold(5, shuffle=True, random_state=0)\n+    test_set3 = sorted([tuple(s[1]) for s in kf3.split(X_10, y)])\n+    assert test_set0 == test_set3, \"Same random state should produce the same splits when shuffle=True\"\n+\n \n def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n     # The digits samples are dependent: they are apparently grouped by authors\n",
  "scikit-learn__scikit-learn-13135": "",
  "scikit-learn__scikit-learn-13142": "",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..c153709 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1058,6 +1058,30 @@ def test_pipeline_memory():\n         shutil.rmtree(cachedir)\n \n \n+def test_pipeline_len():\n+    \"\"\"Test if the Pipeline implements __len__ correctly.\"\"\"\n+    X, y = make_classification(n_informative=5, n_redundant=0, random_state=42)\n+\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+\n+    # Test using the original patch\n+    assert len(pipe) == 2\n+\n+    # Additional checks\n+    pipe2 = Pipeline([('anova', anova_filter)])\n+    assert len(pipe2) == 1\n+\n+    pipe3 = Pipeline([('anova', anova_filter), ('svc', clf), ('extra', clf)])\n+    assert len(pipe3) == 3\n+\n+\n+from sklearn.datasets import make_classification\n+from sklearn.svm import SVC\n+from sklearn.feature_selection import SelectKBest, f_regression\n+from sklearn.pipeline import Pipeline\n+\n def test_make_pipeline_memory():\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n@@ -1070,4 +1094,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..68215e8 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,8 +396,21 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+def test_export_text_single_feature():\n+    X_single = [[-2], [-1], [-1], [1], [1], [2]]\n+    y_mo = [-1, -1, -1, 1, 1, 1]\n+    \n+    clf = DecisionTreeClassifier(max_depth=2, random_state=42)\n+    clf.fit(X_single, y_mo)\n \n-def test_plot_tree_entropy(pyplot):\n+    expected_report = dedent(\"\"\"\n+    |--- first <= 0.0\n+    |   |--- class: -1\n+    |--- first >  0.0\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    assert export_text(clf, feature_names=['first']) == expected_report\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..f48ee70 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1553,8 +1553,32 @@ def test_LogisticRegressionCV_no_refit(multi_class):\n     assert lrcv.l1_ratio_.shape == (n_classes,)\n     assert lrcv.coef_.shape == (n_classes, n_features)\n \n+import pytest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn.datasets import make_classification\n+\n+@pytest.mark.parametrize('solver', ('saga', 'liblinear'))\n+def test_LogisticRegressionCV_no_refit_with_solvers(solver):\n+    # Verify that LogisticRegressionCV does not throw an IndexError\n+    # with refit=False for different solvers\n \n-def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n+    n_samples = 1000\n+    n_features = 3\n+\n+    X, y = make_classification(n_samples=n_samples, n_features=n_features,\n+                               n_informative=n_features, n_redundant=0,\n+                               random_state=29, n_classes=2)\n+\n+    model = LogisticRegressionCV(\n+        cv=5,\n+        solver=solver,\n+        tol=1e-2,\n+        refit=False\n+    )\n+    \n+    # Ensuring that the fit process doesn't raise an IndexError\n+    model.fit(X, y)\n     # Make sure the shapes of scores_ and coefs_paths_ attributes are correct\n     # when using elasticnet (added one dimension for l1_ratios)\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..9e0c855 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -12,10 +12,13 @@ def test_get_sys_info():\n     assert 'machine' in sys_info\n \n \n+import pytest\n+\n def test_get_deps_info():\n     deps_info = _get_deps_info()\n \n     assert 'pip' in deps_info\n+    assert 'joblib' in deps_info\n     assert 'setuptools' in deps_info\n     assert 'sklearn' in deps_info\n     assert 'numpy' in deps_info\n@@ -25,9 +28,14 @@ def test_get_deps_info():\n     assert 'matplotlib' in deps_info\n \n \n+def test_show_versions_joblib(capsys):\n+    show_versions()\n+    out, err = capsys.readouterr()\n+    assert 'joblib' in out\n+\n def test_show_versions_with_blas(capsys):\n     show_versions()\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..fe1ec3f 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -101,6 +101,27 @@ def test_extract_xi():\n                    xi=0.4).fit(X)\n     assert_array_equal(clust.labels_, expected_labels)\n \n+\n+def test_optics_with_float_min_samples():\n+    # Test to verify that float min_samples is converted to an integer\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 100\n+\n+    # Create sample data\n+    C1 = [-5, -2] + 0.8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + 0.3 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + 0.2 * rng.randn(n_points_per_cluster, 2)\n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * n_points_per_cluster, [1] * n_points_per_cluster, [2] * n_points_per_cluster]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Instantiating OPTICS with float min_samples\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08, max_eps=20, cluster_method='xi', xi=0.4)\n+    clust.fit(X)\n+\n+    # Assert that the labels are as expected\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n     X = np.vstack((C1, C2, C3, C4, C5, np.array([[100, 100]] * 2), C6))\n     expected_labels = np.r_[[1] * 5, [3] * 5, [2] * 5, [0] * 5, [2] * 5,\n                             -1, -1, [4] * 5]\n@@ -112,6 +133,27 @@ def test_extract_xi():\n     # this may fail if the predecessor correction is not at work!\n     assert_array_equal(clust.labels_, expected_labels)\n \n+\n+def test_optics_with_float_min_samples():\n+    # Test to verify that float min_samples is converted to an integer\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 100\n+\n+    # Create sample data\n+    C1 = [-5, -2] + 0.8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + 0.3 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + 0.2 * rng.randn(n_points_per_cluster, 2)\n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * n_points_per_cluster, [1] * n_points_per_cluster, [2] * n_points_per_cluster]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Instantiating OPTICS with float min_samples\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08, max_eps=20, cluster_method='xi', xi=0.4)\n+    clust.fit(X)\n+\n+    # Assert that the labels are as expected\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n     C1 = [[0, 0], [0, 0.1], [0, -.1], [0.1, 0]]\n     C2 = [[10, 10], [10, 9], [10, 11], [9, 10]]\n     C3 = [[100, 100], [100, 90], [100, 110], [90, 100]]\n@@ -125,6 +167,27 @@ def test_extract_xi():\n     assert_array_equal(clust.labels_, expected_labels)\n \n \n+def test_optics_with_float_min_samples():\n+    # Test to verify that float min_samples is converted to an integer\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 100\n+\n+    # Create sample data\n+    C1 = [-5, -2] + 0.8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + 0.3 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + 0.2 * rng.randn(n_points_per_cluster, 2)\n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * n_points_per_cluster, [1] * n_points_per_cluster, [2] * n_points_per_cluster]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Instantiating OPTICS with float min_samples\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.08, max_eps=20, cluster_method='xi', xi=0.4)\n+    clust.fit(X)\n+\n+    # Assert that the labels are as expected\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+\n def test_cluster_hierarchy_():\n     rng = np.random.RandomState(0)\n     n_points_per_cluster = 100\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..c31d4e3 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,54 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+import numpy as np\n+from scipy import sparse\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_no_support_vectors():\n+    # Test with multiple instances of the same data to avoid support vectors\n+    X_train = sparse.csr_matrix(np.repeat([[0, 0, 0, 0]], repeats=4, axis=0))\n+    y_train = np.array([0, 0, 0, 0])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_full_support_vectors():\n+    # Ensure it works with full support vectors\n+    X_train = sparse.csr_matrix([[1, 0, 0, 0],\n+                                 [0, 1, 0, 0],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([1, 2, 3, 4])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert model.support_vectors_.data.size > 0\n+    assert model.dual_coef_.data.size > 0\n+\n+def test_sparse_fit_nonlinear_kernel():\n+    # Test with non-linear kernel to check sparse handling\n+    X_train = sparse.csr_matrix([[1, 0, 0, 0],\n+                                 [0, 1, 0, 0],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([1, 2, 1, 2])\n+    model = svm.SVR(kernel='rbf')\n+    model.fit(X_train, y_train)\n+    # Do not check specific attributes, ensure no errors\n+    assert model.support_vectors_.shape[0] >= 0\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..cb0b576 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,42 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+def test_strip_accents_already_nfkd():\n+    # Test strings that are in NFKD form already\n+    s1 = chr(241)  # \"LATIN SMALL LETTER N WITH TILDE\", \"\u00f1\"\n+    s2 = chr(110) + chr(771)  # \"LATIN SMALL LETTER N\" followed by \"COMBINING TILDE\", \"n\u0303\"\n+    assert strip_accents_unicode(s1) == 'n'\n+    assert strip_accents_unicode(s2) == 'n'\n+\n+    # Combining characters only\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # Just combining marks\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"  # o with diaeresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Characters with multiple accents\n+    a = \"a\\u0301\\u0323\"  # a with acute and dot below \u2192 should reduce to \"a\"\n+    expected = \"a\"\n+    assert strip_accents_unicode(a) == expected\n \n-def test_to_ascii():\n+    # Mixed characters and non-accentuated text\n+    a = \"caf\u00e9 au lait \\u00E1nd torte\"  # mix with accents and text\n+    expected = \"cafe au lait and torte\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Edge case with empty string\n+    a = \"\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Characters without accents should remain unchanged\n+    a = \"hello\"\n+    expected = \"hello\"\n+    assert strip_accents_unicode(a) == expected\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..9352beb 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -108,9 +108,33 @@ def test_inverse_transform_sparse():\n     with pytest.raises(ValueError):\n         sel.inverse_transform(np.array([[1], [2]]))\n \n+from sklearn.datasets import load_iris\n+import numpy as np\n+import pandas as pd\n+from sklearn.feature_selection import SelectKBest, chi2\n+from numpy.testing import assert_array_equal\n \n-def test_get_support():\n+def test_preserve_numerical_dtypes():\n+    \"\"\"Test that numerical dtypes like float32, float16 are preserved.\"\"\"\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    X = X.astype({\"petal width (cm)\": np.float16, \"petal length (cm)\": np.float32})\n+    \n+    selector = SelectKBest(chi2, k=2).set_output(transform=\"pandas\")\n+    output = selector.fit_transform(X, y)\n+    \n+    for col in [\"petal width (cm)\", \"petal length (cm)\"]:\n+        assert output[col].dtype == X[col].dtype, f\"Dtype mismatch for column: {col}\"\n+\n+def test_preserve_categorical_dtypes():\n+    \"\"\"Test that categorical dtypes are preserved.\"\"\"\n+    X, y = load_iris(return_X_y=True, as_frame=True)\n+    X[\"category\"] = pd.cut(X[\"petal width (cm)\"], bins=3).astype(\"category\")\n+    \n+    selector = SelectKBest(chi2, k=2).set_output(transform=\"pandas\")\n+    output = selector.fit_transform(X, y)\n+    \n+    assert output[\"category\"].dtype == X[\"category\"].dtype, \"Dtype mismatch for categorical column\"\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..6638866 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1512,6 +1512,12 @@ def test_most_frequent(expected, array, dtype, extra_value, n_repeat):\n def test_iterative_imputer_keep_empty_features(initial_strategy):\n     \"\"\"Check the behaviour of the iterative imputer with different initial strategy\n     and keeping empty features (i.e. features containing only missing values).\n+    \n+import numpy as np\n+import pytest\n+from sklearn.experimental import enable_iterative_imputer # noqa\n+from sklearn.impute import IterativeImputer\n+from sklearn.utils._testing import assert_array_equal, assert_allclose\n     \"\"\"\n     X = np.array([[1, np.nan, 2], [3, np.nan, np.nan]])\n \n@@ -1522,6 +1528,36 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     assert_allclose(X_imputed[:, 1], 0)\n     X_imputed = imputer.transform(X)\n     assert_allclose(X_imputed[:, 1], 0)\n+def test_iterative_imputer_constant_fill_value_with_nan():\n+    \"\"\"Test whether np.nan can be used as fill_value.\"\"\"\n+    X = np.array([[np.nan, 2, 3, np.nan], [4, np.nan, 5, np.nan], [6, 7, np.nan, np.nan], [8, 9, 0, np.nan]])\n+\n+    fill_value = np.nan\n+    imputer = IterativeImputer(\n+        missing_values=np.nan,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    # Check if the imputer statistics contain NaN as expected for each feature\n+    expected_statistics = np.array([np.nan, 2.0, 3.0, np.nan])\n+    assert_array_equal(imputer.initial_imputer_.statistics_, expected_statistics)\n+\n+def test_iterative_imputer_fill_value_variations():\n+    \"\"\"Test various fill_values for the initial strategy of 'constant'.\"\"\"\n+    X = np.array([[-1, 2, 3], [4, -1, 5], [6, 7, -1], [-1, 9, np.nan]])\n+\n+    for fill_value in [0, -1, 10, 100.5]:\n+        imputer = IterativeImputer(\n+            missing_values=-1,\n+            initial_strategy=\"constant\",\n+            fill_value=fill_value,\n+            max_iter=0,\n+        )\n+        X_imputed = imputer.fit_transform(X)\n+        expected_statistics = np.where(np.isnan(imputer.initial_imputer_.statistics_), fill_value, imputer.initial_imputer_.statistics_)\n+        assert_array_equal(imputer.initial_imputer_.statistics_, expected_statistics)\n \n \n @pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..5f5d247 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -332,10 +332,41 @@ def test_base_estimator_property_deprecated():\n     y = np.array([1, 0])\n     model = IsolationForest()\n     model.fit(X, y)\n+import numpy as np\n+import pytest\n+from sklearn.ensemble import IsolationForest\n+import warnings\n+import pandas as pd\n+\n+def test_iforest_preserve_feature_names():\n+    \"\"\"Check that feature names are preserved when contamination is not 'auto'.\n+\n+    Feature names are required for consistency checks during scoring.\n+\n+    Non-regression test for Issue #25844\n+    \"\"\"\n+    rng = np.random.RandomState(0)\n+\n+    # Create a DataFrame with one feature and fit an IsolationForest model\n+    X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+\n+def test_iforest_no_warning_with_feature_names():\n+    \"\"\"Ensure no warning is raised with valid feature names and contamination != 'auto'.\"\"\"\n+    X = pd.DataFrame({\"a\": [-1.1, 0.3, 0.5, 100]})\n+    model = IsolationForest(contamination=0.1, random_state=42)\n \n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        model.fit(X)\n+        assert len(w) == 0, \"There should be no warnings when contamination != 'auto' with feature names\"\n     warn_msg = (\n         \"Attribute `base_estimator_` was deprecated in version 1.2 and \"\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "diff --git a/sklearn/feature_selection/tests/test_sequential.py b/sklearn/feature_selection/tests/test_sequential.py\nindex 42e1fbb..09e634b 100644\n--- a/sklearn/feature_selection/tests/test_sequential.py\n+++ b/sklearn/feature_selection/tests/test_sequential.py\n@@ -313,4 +313,50 @@ def test_backward_neg_tol():\n     new_score = lr.fit(Xr, y).score(Xr, y)\n \n     assert 0 < sfs.get_support().sum() < X.shape[1]\n-    assert new_score < initial_score\n+    assert new_score < initial_score\n+\n+\n+def test_cv_generator_support():\n+    \"\"\"Check that no exception raised when cv is generator.\n+\n+    Non-regression test for issue when passing a split generator to\n+    SequentialFeatureSelector.\n+    \"\"\"\n+    from sklearn.datasets import make_classification\n+    from sklearn.model_selection import LeaveOneGroupOut\n+    from sklearn.neighbors import KNeighborsClassifier\n+    from sklearn.feature_selection import SequentialFeatureSelector\n+    import numpy as np\n+\n+    X, y = make_classification(random_state=0)\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2:] = 1\n+\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+\n+    knc = KNeighborsClassifier(n_neighbors=5)\n+\n+    sfs = SequentialFeatureSelector(knc, n_features_to_select=5, cv=splits)\n+    sfs.fit(X, y)\n+\n+\n+def test_sequential_feature_selector_with_different_cvs():\n+    \"\"\"Check SequentialFeatureSelector with various cv strategies for robustness.\"\"\"\n+    from sklearn.datasets import make_classification\n+    from sklearn.model_selection import KFold, StratifiedKFold\n+    from sklearn.neighbors import KNeighborsClassifier\n+    from sklearn.feature_selection import SequentialFeatureSelector\n+\n+    X, y = make_classification(random_state=42, n_samples=100, n_features=20)\n+    knn = KNeighborsClassifier(n_neighbors=3)\n+\n+    # Test with KFold\n+    kf = KFold(n_splits=5)\n+    sfs_kf = SequentialFeatureSelector(knn, n_features_to_select=5, cv=kf)\n+    sfs_kf.fit(X, y)\n+\n+    # Test with StratifiedKFold\n+    skf = StratifiedKFold(n_splits=5)\n+    sfs_skf = SequentialFeatureSelector(knn, n_features_to_select=5, cv=skf)\n+    sfs_skf.fit(X, y)\n",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..146b457 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,6 +22,10 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+from sklearn.feature_selection import VarianceThreshold\n+import numpy as np\n+import pandas as pd\n+import pytest\n \n \n class Trans(TransformerMixin, BaseEstimator):\n@@ -2184,4 +2188,44 @@ def test_raise_error_if_index_not_aligned():\n         \" Indexes that do not match.\"\n     )\n     with pytest.raises(ValueError, match=msg):\n-        ct.fit_transform(X)\n+        ct.fit_transform(X)\n+\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+    Non-regression test for #26306.\n+    \"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    # Check when the remainder is an estimator and set_output is \"pandas\"\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    # Verify if the set_output when transformed to default works correctly\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n+def test_remainder_set_output_with_different_transformer():\n+    \"\"\"Check that set_output works with different transformers on remainder.\"\"\"\n+    df = pd.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]})\n+\n+    # Use StandardScaler as the remainder\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=int)),\n+        remainder=StandardScaler(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    out = ct.fit_transform(df)\n+    expected = pd.DataFrame(\n+        {\"a\": [-1.224745, 0.0, 1.224745], \"b\": [-1.224745, 0.0, 1.224745]},\n+        columns=[\"a\", \"b\"],\n+    )\n+    pd.testing.assert_frame_equal(out.round(6), expected)\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..eed3c8d 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,6 +945,20 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288 - Ensuring KMeans results are consistent across different n_jobs.\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n+\n+    # Additional test for inertia consistency across different n_jobs\n+    inertia_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=3, random_state=0, n_jobs=4).fit(X).inertia_\n+    assert_almost_equal(inertia_1, inertia_2, decimal=5)\n+\n \n def test_minibatch_kmeans_partial_fit_int_data():\n     # Issue GH #14314\n",
  "sphinx-doc__sphinx-10323": "",
  "sphinx-doc__sphinx-10449": "",
  "sphinx-doc__sphinx-10466": "",
  "sphinx-doc__sphinx-10673": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\nindex d3bf6a2..d352051 100644\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -337,6 +337,24 @@ def test_get_toctree_for_includehidden(app):\n                  [list_item, compact_paragraph, reference, \"foo.1\"],\n                  [list_item, compact_paragraph, reference, \"foo.2\"]))\n \n+@pytest.mark.sphinx('xml', testroot='toctree-index')\n+def test_toctree_index_entries(app):\n+    app.build()\n+    toctree = app.env.tocs['index']\n+    \n+    # Check toctree includes genindex\n+    assert_node(toctree[1][0][0], reference, refuri='genindex')\n+    \n+    # Check toctree includes modindex\n+    assert_node(toctree[1][0][1], reference, refuri='modindex')\n+    \n+    # Check toctree includes search\n+    assert_node(toctree[1][0][2], reference, refuri='search')\n+\n+    # Verify no warnings for non-existing documents\n+    warning_types = {warning.get_message().split(':', 1)[0] for warning in app._warning.getvalue().splitlines() if warning}\n+    assert 'index.rst' not in warning_types  # Ensure we have no warnings of non-existing documents\n+\n     assert_node(toctree[1][0][0][0], reference, refuri=\"foo\", secnumber=[1])\n     assert_node(toctree[1][0][1][0][0][0], reference, refuri=\"quux\", secnumber=[1, 1])\n     assert_node(toctree[1][0][1][1][0][0], reference, refuri=\"foo#foo-1\", secnumber=[1, 2])\n@@ -345,4 +363,4 @@ def test_get_toctree_for_includehidden(app):\n     assert_node(toctree[1][2][0][0], reference, refuri=\"http://sphinx-doc.org/\")\n \n     assert_node(toctree[2],\n-                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..d85a7e9 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -146,6 +146,38 @@ def test_glossary(app):\n     assert (\"term2\", \"term2\", \"term\", \"index\", \"term-term2\", -1) in objects\n     assert (\"term3\", \"term3\", \"term\", \"index\", \"term-term3\", -1) in objects\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n+    # Test distinct case-sensitive terms\n+    text_case_sensitivity = (\".. glossary::\\n\"\n+                             \"\\n\"\n+                             \"   mysql\\n\"\n+                             \"       MySQL database system\\n\"\n+                             \"\\n\"\n+                             \"   MySQL\\n\"\n+                             \"       Brand name of MySQL database\\n\")\n+\n+    doctree_case_sensitivity = restructuredtext.parse(app, text_case_sensitivity)\n+    assert_node(doctree_case_sensitivity, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"mysql\",\n+                                                                      index)],\n+                                                              definition)],\n+                                     [definition_list_item, ([term, (\"MySQL\",\n+                                                                      index)],\n+                                                              definition)])],\n+    ))\n+    assert_node(doctree_case_sensitivity[0][0][0][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+    assert_node(doctree_case_sensitivity[0][0][0][1],\n+                [definition, nodes.paragraph, \"MySQL database system\"])\n+    \n+    assert_node(doctree_case_sensitivity[0][1][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree_case_sensitivity[0][1][0][1],\n+                [definition, nodes.paragraph, \"Brand name of MySQL database\"])\n+\n+    # index\n+    objects_case_sensitive = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects_case_sensitive\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects_case_sensitive\n \n \n def test_glossary_warning(app, status, warning):\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..880900a 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -332,6 +332,10 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].default == Parameter.empty\n \n \n+import pytest\n+from sphinx.util.inspect import signature_from_str\n+from inspect import Parameter\n+\n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n def test_signature_from_str_positionaly_only_args():\n@@ -341,7 +345,15 @@ def test_signature_from_str_positionaly_only_args():\n     assert sig.parameters['b'].kind == Parameter.POSITIONAL_OR_KEYWORD\n \n \n-def test_signature_from_str_invalid():\n+def test_signature_from_str_positional_only_with_defaults():\n+    sig = signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n     with pytest.raises(SyntaxError):\n         inspect.signature_from_str('')\n \n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..380c8b0 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from importlib import import_module\n import pytest\n \n from sphinx.ext.autodoc.mock import _MockModule, _MockObject, mock\n+from typing import TypeVar, Generic\n \n \n def test_MockModule():\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..c6673bc 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -12,8 +13,15 @@\n import sys\n from collections import namedtuple\n from unittest import TestCase, mock\n-\n+import functools\n from sphinx.application import Sphinx\n+\n+def simple_decorator(f):\n+    \"\"\"A simple decorator that does nothing, for tests to use.\"\"\"\n+    @functools.wraps(f)\n+    def wrapper(*args, **kwargs):\n+        return f(*args, **kwargs)\n+    return wrapper\n from sphinx.ext.napoleon import _process_docstring, _skip_member, Config, setup\n \n \n@@ -180,6 +188,17 @@ class SkipMemberTest(TestCase):\n                         SampleError._private_undoc, True,\n                         'napoleon_include_private_with_doc')\n \n+    def test_decorated_init_doc(self):\n+        class DecoratedInitClass:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"Init docstring.\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__',\n+                        DecoratedInitClass.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_special_doc(self):\n         self.assertSkip('exception', '__special_doc__',\n                         SampleError.__special_doc__, False,\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..67df498 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -14,6 +14,19 @@ from unittest import mock\n import pytest\n \n \n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    print(content)\n+    # looking for local file that exists should pass\n+    assert \"local.example.py\" in content\n+    # looking for local file that does not exist should fail\n+    assert \"doesntexist\" in content\n+\n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n def test_defaults(app, status, warning):\n     app.builder.build_all()\n@@ -33,6 +46,19 @@ def test_defaults(app, status, warning):\n     assert len(content.splitlines()) == 5\n \n \n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    print(content)\n+    # looking for local file that exists should pass\n+    assert \"local.example.py\" in content\n+    # looking for local file that does not exist should fail\n+    assert \"doesntexist\" in content\n+\n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n def test_defaults_json(app, status, warning):\n     app.builder.build_all()\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..9cef16d 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -16,6 +17,31 @@ from test_ext_autodoc import do_autodoc\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_selective_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\n+        \"members\": None,\n+        \"private-members\": \"_private_function,_another_private_function\"\n+    }\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _private_function()',\n+        '   :module: target.private',\n+        '',\n+        '   _private_function is a docstring().',\n+        '',\n+        '.. py:function:: _another_private_function()',\n+        '   :module: target.private',\n+        '',\n+        '   _another_private_function is also a docstring().',\n+        '',\n+    ]\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'module', 'target.private', options)\n     assert list(actual) == [\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..49bf890 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1286,6 +1286,42 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n+# New test case to validate custom translation loading\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_custom_translation_override_da(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # Clear translators cache beforehand\n+        locale.translators.clear()\n+\n+        # Set up Danish locale directory with test translations\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        \n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # Initialize Sphinx app and convert .po to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        \n+        # Validate that translations are applied\n+        assert app.translator.gettext('Fig. 1') == 'Foobar 1'\n+        assert app.translator.gettext('Listing 1') == 'Whatever 1'\n+        \n+        app.build()\n+\n+        # Verify results in built HTML files\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        # Ensure cleanup\n+        locale.translators.clear()\n+\n \n def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..5f99ff2 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,10 +9,40 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc', \n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_type_aliases_with_description(app: SphinxTestApp):\n+    # Prepare the test RST source\n+    (app.srcdir / 'annotations.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    \n+    # Build the documentation\n+    app.build()\n+    \n+    # Check the generated documentation content\n+    context = (app.outdir / 'annotations.txt').read_text()\n+    expected_content = (\"types.sphinx_doc(data)\\n\"\n+                        \"\\n\"\n+                        \"   Does it work.\\n\"\n+                        \"\\n\"\n+                        \"   Parameters:\\n\"\n+                        \"      * **data** (*types.JSONObject*) --\\n\"\n+                        \"         Does it args.\\n\"\n+                        \"\\n\"\n+                        \"   Returns:\\n\"\n+                        \"      Does it work in return.\\n\"\n+                        \"\\n\"\n+                        \"   Return type:\\n\"\n+                        \"      types.JSONObject\\n\")\n+\n+    assert expected_content == context\n+\n import platform\n import sys\n \n import pytest\n+import sys\n+from sphinx.testing.util import SphinxTestApp\n \n from sphinx.testing import restructuredtext\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..0aae450 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -48,8 +48,12 @@ def test_viewcode(app, status, warning):\n             '<span>    this is Class1</span>\\n'\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled(app, status, warning):\n+    app.builder.build_all()\n \n-@pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n+    # The module page should not exist when viewcode_enable_epub is False\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n \n",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex 577c367..c86aee9 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -299,6 +299,28 @@ def test_autodoc_process_signature_typing_generic(app):\n         '',\n     ]\n \n+def test_enum_as_default_value_in_signature(app):\n+    from enum import Enum\n+    from sphinx.ext.autodoc import ModuleLevelDocumenter\n+\n+    class MyEnum(Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    def func(e: MyEnum = MyEnum.ValueA) -> None:\n+        \"\"\"A function with an Enum default value.\"\"\"\n+        pass\n+\n+    directive = make_directive_bridge(app.env)\n+    inst = ModuleLevelDocumenter(directive, 'func')\n+    inst.fullname = 'func'\n+    inst.object = func\n+\n+    expected_signature = '(e: MyEnum = MyEnum.ValueA) -> None'\n+    actual_signature = inst.format_signature()\n+\n+    assert expected_signature in actual_signature\n+\n \n def test_autodoc_process_signature_typehints(app):\n     captured = []\n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..1bbdc71 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -13,7 +13,7 @@ from io import StringIO\n \n import pytest\n \n-from sphinx import application\n+from os import path\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n \n@@ -241,7 +241,20 @@ def test_default_filename(tempdir):\n     exec(conffile.read_text(), ns)\n \n \n-def test_extensions(tempdir):\n+def test_exits_when_existing_confpy(monkeypatch):\n+    # Mocking path.isfile to simulate the presence of an existing conf.py file\n+    def mock_isfile(path):\n+        return True\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    # Simulate user input where the user presses 'Enter' to exit\n+    qs.term_input = lambda prompt: ''\n+\n+    d = {}\n+    # Expect SystemExit when pressing 'Enter' as described in the issue\n+    with pytest.raises(SystemExit):\n+        qs.ask_user(d)\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 6ac780b..f7dd785 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -38,12 +38,34 @@ class Extension:\n         # the extension does not tell its status.\n         self.parallel_write_safe = kwargs.pop('parallel_write_safe', True)\n \n+from packaging.version import Version\n \n def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n     \"\"\"Verify the required Sphinx extensions are loaded.\"\"\"\n     if config.needs_extensions is None:\n         return\n \n+    for extname, reqversion in config.needs_extensions.items():\n+        extension = app.extensions.get(extname)\n+        if extension is None:\n+            logger.warning(__('The %s extension is required by needs_extensions settings, '\n+                              'but it is not loaded.'), extname)\n+            continue\n+\n+        # Compare using Version from packaging to handle numeric comparison properly\n+        try:\n+            if extension.version == 'unknown version' or Version(reqversion) > Version(extension.version):\n+                raise VersionRequirementError(__('This project needs the extension %s at least in '\n+                                                 'version %s and therefore cannot be built with '\n+                                                 'the loaded version (%s).') %\n+                                              (extname, reqversion, extension.version))\n+        except Exception as e:\n+            logger.error(__('Version comparison failed for extension %s: %s'), extname, str(e))\n+            raise VersionRequirementError(__('Failed to compare versions for %s') % extname)\n+    \"\"\"Verify the required Sphinx extensions are loaded.\"\"\"\n+    if config.needs_extensions is None:\n+        return\n+\n     for extname, reqversion in config.needs_extensions.items():\n         extension = app.extensions.get(extname)\n         if extension is None:\n",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..1d23886 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,7 +236,26 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n-def test_issue_9214():\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_mixed_dimension_distances():\n+    # Test with a 3D point and a 2D point\n+    p1 = Point3D(4, -2, 6)\n+    p2 = Point2D(4, -2)  # Should consider as (4, -2, 0)\n+    assert p1.distance(p2) == 6\n+\n+    # Test with a 3D point and a 2D point in a different configuration\n+    p3 = Point3D(0, 0, 0)\n+    p4 = Point2D(3, 4)  # Should consider as (3, 4, 0)\n+    assert p3.distance(p4) == 5\n+\n+    # Ensure no dimensions are lost when transforming\n+    p1_2d = Point2D(3, 4)\n+    p2_3d = Point3D(0, 0, 0)\n+    assert p1_2d.distance(p2_3d) == 5\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n     p3 = Point3D(7, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..0488589 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,18 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2*x)\n+    assert f(f(2)).evalf() == Float(16)\n+    assert g(g(2)).evalf() == Float(8)\n+    assert f(g(2)).evalf() == Float(16)\n+    # Ensure nested composition works\n+    assert f(g(g(2))).evalf() == Float(64)\n+    assert f(f(g(2))).evalf() == Float(256)\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..f5393c1 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -71,6 +71,19 @@ def test_ZeroMatrix_doit():\n     assert Znn.doit() == ZeroMatrix(2*n, n)\n     assert isinstance(Znn.doit().rows, Mul)\n \n+from sympy import MatrixSymbol, Identity, Symbol, Sum, symbols, assuming, refine, ask\n+from sympy import Q as Query\n+\n+def test_issue_identity_matrix_sum():\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    M = MatrixSymbol('M', n, n)\n+\n+    with assuming(Query.orthogonal(M)):\n+        e = refine((M.T * M).doit())\n+\n+    assert e.is_Identity\n+    assert Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n \n def test_Identity():\n     A = MatrixSymbol('A', n, m)\n@@ -79,7 +92,6 @@ def test_Identity():\n \n     assert A*Im == A\n     assert In*A == A\n-\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..11c2371 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -351,6 +351,20 @@ def test_args():\n     raises(ValueError, lambda: Permutation([1, 1, 0]))\n     raises(ValueError, lambda: Permutation([[1], [1, 2]]))\n     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?\n+\n+    # Additional test cases for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1]), \"Non-disjoint cycles should result in the identity permutation.\"\n+    assert Permutation([[1, 2], [2, 3]]) == Permutation([0, 2, 3, 1]), \"Non-disjoint cycles should be applied in left-to-right order.\"\n+    assert Permutation([[0, 1], [1, 2], [2, 0]]) == Permutation([1, 2, 0]), \"Overlapping cycles should work correctly.\"\n+\n+    # Edge case: Single element cycle should return identity\n+    assert Permutation([[0], [0]]) == Permutation([0]), \"Single element cycle should result in the identity permutation.\"\n+\n+    # Edge case: Repeated identical single element cycles should return identity\n+    assert Permutation([[1], [1], [1]]) == Permutation([0, 1]), \"Repeated identical single element cycles should return identity permutation for all elements.\"\n+\n+    # Test with different set sizes to validate correct identity permutations\n+    assert Permutation([[0, 1], [1, 0], [2, 2]]) == Permutation([1, 0, 2]), \"Mixed cycles with identity elements.\"\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n",
  "sympy__sympy-13031": "",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..b804861 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -228,6 +228,22 @@ def test_evalf_bugs():\n     assert ((oo+oo*I).n() == S.Infinity + S.Infinity*I)\n \n     #issue 11518\n+\n+    #issue 13076\n+    # Test that different orders in Mul with Max do not raise errors\n+    from sympy import Mul, Max, Symbol, NS\n+\n+    x = Symbol('x')\n+    y = Symbol('y')\n+\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+\n+    # Additional test cases to verify consistency and no errors in other operations\n+    assert NS(Mul(2, Max(x, y), evaluate=False).evalf(), 10) == '2*Max(x, y)'\n+    assert NS(Mul(Max(x, y), 2, evaluate=False).evalf(), 10) == '2*Max(x, y)'\n+    assert NS(Mul(x, y, Max(0, x), evaluate=False).evalf(), 10) == 'x*y*Max(0, x)'\n+    assert NS(Mul(Max(0, x), y, x, evaluate=False).evalf(), 10) == 'x*y*Max(0, x)'\n     assert NS(2*x**2.5, 5) == '2.0000*x**2.5000'\n \n \n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..1034e54 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -203,8 +203,26 @@ def test_tanh():\n \n     assert tanh(k*pi*I/2) == tan(k*pi/2)*I\n \n-\n-def test_tanh_series():\n+def test_coth_subs_issue():\n+    from sympy import Symbol, coth, log, tan\n+\n+    x = Symbol('x')\n+    expr = coth(log(tan(x)))\n+\n+    # These are the test cases derived from the issue statement.\n+    # The values should not raise errors after the fix.\n+    for test_value in [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]:\n+        try:\n+            result = expr.subs(x, test_value)\n+            assert result is not None  # Ensure expression does not error out by checking result is obtained\n+        except NameError as e:\n+            # In case of a NameError, print specific information for debugging.\n+            print(f\"NameError occurred when substituting x with {test_value}: {e}\")\n+            assert False  # Force test failure\n+\n+    # Original assertions which should still hold\n+    assert coth(log(tan(2))) == coth(log(-tan(2)))\n+    assert coth(1 + I*pi/2) == tanh(1)\n     x = Symbol('x')\n     assert tanh(x).series(x, 0, 10) == \\\n         x - x**3/3 + 2*x**5/15 - 17*x**7/315 + 62*x**9/2835 + O(x**10)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..4776ba0 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -167,6 +167,14 @@ def test_difference():\n \n def test_Complement():\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n+    # Issue 12712\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == \\\n+        Complement(FiniteSet(x, y), Interval(-10, 10))\n+    assert Complement(FiniteSet(x, y), Interval(-10, 10)).simplify() == \\\n+        FiniteSet(x, y)\n+    assert Complement(FiniteSet(2, 3, x), Interval(2, 5)) == \\\n+        Complement(FiniteSet(3, x), Interval(2, 5))\n+    assert Complement(Interval(-5, 5), FiniteSet(2, x)) == Interval(-5, 5)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n     assert Complement(Union(Interval(0, 2),\n                             FiniteSet(2, 3, 4)), Interval(1, 3)) == \\\n",
  "sympy__sympy-13647": "",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..c555a10 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -665,8 +665,16 @@ def test_Poly_sub():\n def test_Poly_mul():\n     assert Poly(0, x).mul(Poly(0, x)) == Poly(0, x)\n     assert Poly(0, x) * Poly(0, x) == Poly(0, x)\n-\n-    assert Poly(2, x).mul(Poly(4, x)) == Poly(8, x)\n+from sympy import Poly, symbols, S\n+\n+x = symbols('x')\n+# Test cases based on the issue description\n+def test_issue_13079():\n+    assert Poly(x) * x == Poly(x**2, x, domain='ZZ')\n+    assert x * Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2 * Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2) * Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x) * S(-2) == Poly(-2*x, x, domain='ZZ')\n     assert Poly(2, x, y) * Poly(4, x) == Poly(8, x, y)\n     assert Poly(4, x).mul(Poly(2, x, y)) == Poly(8, x, y)\n     assert Poly(4, x, y) * Poly(2, x, y) == Poly(8, x, y)\n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..26d8a30 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,8 +54,28 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+from sympy import symbols, latex, S, Integral\n+\n+x, y = symbols('x y')\n \n def test_latex_basic():\n+    # Original test patch\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+    \n+    # Additional test cases to thoroughly test arbitrary mul_symbol values\n+    assert latex(x*y, mul_symbol='*') == r\"x * y\"\n+    assert latex(x*y, mul_symbol='**') == r\"x ** y\"\n+    assert latex(x*y, mul_symbol=None) == r\"x y\"  # Default behavior if None\n+    assert latex(x*y, mul_symbol='times') == r\"x \\times y\"\n+    assert latex(x*y, mul_symbol='ldot') == r\"x \\,. y\"\n+    \n+    # Test in the context of integration with arbitrary mul_symbol\n+    assert latex(Integral(2*x**2*y, x), mul_symbol='!') == r\"\\int 2!x^{2}!y\\, dx\"\n+\n+    # Verify original behavior with no mul_symbol specified\n+    assert latex(2*x*y) == \"2 x y\"\n+    assert latex(3*x**2*y) == \"3 x^{2} y\"\n     assert latex(1 + x) == \"x + 1\"\n     assert latex(x**2) == \"x^{2}\"\n     assert latex(x**(1 + x)) == \"x^{x + 1}\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..af065e3 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -313,6 +313,23 @@ def test_as_mutable():\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n \n+def test_issue_13835():\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a\n+\n+    # Test that the determinant is calculated without TypeError\n+    # and equals to a symbolic expression for sizes 3 to 7.\n+    det3 = M(3).det()\n+    assert det3 == 2*a*(a + 2) + 2*a*(2*a + 1) - 3*a*(2*a + 2)\n+\n+    assert M(4).det() == 0\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n+\n \n def test_determinant():\n \n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..eaa9ef2 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -702,8 +702,77 @@ def test_difficult_univariate():\n     assert density(exp(x**2))\n     assert density(log(x))\n \n-\n-def test_issue_10003():\n+from sympy import Rational, diff, gamma, lowergamma, Piecewise, symbols, simplify\n+from sympy.stats import (Arcsin, Dagum, Erlang, Frechet, Gamma,\n+                         GammaInverse, Kumaraswamy, Laplace, Logistic,\n+                         Nakagami, StudentT, UniformSum, cdf, density)\n+\n+def test_arcsin_cdf():\n+    x = symbols(\"x\", real=True)\n+    a, b = 0, 3\n+    X = Arcsin(\"X\", a, b)\n+    assert cdf(X)(1) == Piecewise((0, x < a), (2*asin(sqrt((x - a)/(b - a)))/pi, x <= b), (1, True))\n+\n+def test_dagum_cdf():\n+    x = symbols(\"x\", real=True)\n+    p, b, a = Rational(1, 3), Rational(1, 5), 2\n+    X = Dagum(\"X\", p, a, b)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x, a=0, b=3, c=1, d=0)\n+\n+def test_erlang_cdf():\n+    x = symbols(\"x\", real=True)\n+    k, l = 1, 1\n+    X = Erlang(\"X\", k, l)\n+    # Expected CDF for Erlang(1,1) is 1 - exp(-x)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x, a=0, b=1, c=1, d=0)\n+\n+def test_frechet_cdf():\n+    x = symbols(\"x\", real=True)\n+    a, s, m = Rational(4, 3), 1, 2\n+    X = Frechet(\"X\", a, s, m)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x, a=2, b=3, c=1, d=0)\n+\n+def test_gamma_inverse_cdf():\n+    x = symbols(\"x\", real=True)\n+    a, b = Rational(5, 7), 2\n+    X = GammaInverse(\"X\", a, b)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x, a=0, b=3, c=1, d=0)\n+\n+def test_kumaraswamy_cdf():\n+    x = symbols(\"x\", real=True)\n+    a, b = Rational(1, 123), 5\n+    X = Kumaraswamy(\"X\", a, b)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x, a=0, b=Rational(1, 3), c=1, d=0)\n+\n+def test_laplace_cdf():\n+    x = symbols(\"x\", real=True)\n+    mu, b = 2, 3\n+    X = Laplace(\"X\", mu, b)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x, a=-5, b=5, c=1, d=0)\n+\n+def test_logistic_cdf():\n+    x = symbols(\"x\", real=True)\n+    mu, s = 1, 0.1\n+    X = Logistic(\"X\", mu, s)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x, a=1, b=2, c=1, d=0)\n+\n+def test_nakagami_cdf():\n+    x = symbols(\"x\", real=True)\n+    mu, omega = Rational(7, 3), 1\n+    X = Nakagami(\"X\", mu, omega)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x, a=0, b=2, c=1, d=0)\n+\n+def test_student_t_cdf():\n+    x = symbols(\"x\", real=True)\n+    nu = 10\n+    X = StudentT(\"X\", nu)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x, a=0, b=2, c=1, d=0)\n+\n+def test_uniform_sum_cdf():\n+    x = symbols(\"x\", real=True)\n+    N = 5\n+    X = UniformSum(\"X\", N)\n+    assert tn(diff(cdf(X)(x), x), density(X)(x), x, a=0, b=2, c=1, d=0)\n     X = Exponential('x', 3)\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..80063d3 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -46,6 +46,32 @@ def test_tensor_product_commutator():\n \n \n def test_tensor_product_simp():\n+    from sympy.physics.quantum import TensorProduct as TP\n+    from sympy.physics.quantum import tensor_product_simp as tps\n+    from sympy.physics.paulialgebra import Pauli\n+    from sympy import Symbol, symbols\n+\n+    A, B, C, D = symbols('A,B,C,D', commutative=False)\n+    \n+    # Original test case\n+    assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n+    \n+    # Additional test cases based on the issue description\n+    a = Symbol('a', commutative=False)\n+    \n+    # Test case similar to [2] from the issue\n+    t1 = TP(1, 1)*TP(1, 1)\n+    assert tensor_product_simp(t1) == TP(1, 1)  # Expected simplification\n+    \n+    # Test case similar to [5] from the issue\n+    assert tensor_product_simp(TP(1, 1)*TP(1, a)).subs(a, 1) == TP(1, 1)\n+    \n+    # Test case similar to [6] from the issue\n+    t2 = TP(1, Pauli(3))*TP(1, Pauli(3))\n+    assert tensor_product_simp(t2) == TP(1, Pauli(3)**2)\n+    \n+    # Test case similar to [9] from the issue\n+    assert tensor_product_simp(TP(1, Pauli(3))*TP(1, a)).subs(a, Pauli(3)) == TP(1, 1)\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n \n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..cb118a4 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -79,6 +79,13 @@ def test_python_keyword_function_name_escaping():\n         5*Function(\"for\")(8)) == \"for_ = Function('for')\\ne = 5*for_(8)\"\n \n \n+from sympy import Symbol, Eq, Ne, sstr, Rational, Limit\n+\n+def test_respected_strprinter_settings():\n+    x = Symbol(\"x\")\n+    assert sstr(Eq(x, Rational(1, 2)), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    assert sstr(Limit(x, x, Rational(1, 2)), sympy_integers=True) == \"Limit(x, x, S(1)/2)\"\n+\n def test_python_relational():\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..d61dfb8 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -3,8 +3,7 @@ from sympy.physics.vector import ReferenceFrame, Vector, dynamicsymbols, dot\n from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n-\n-Vector.simp = True\n+from sympy.physics.vector import ReferenceFrame\n A = ReferenceFrame('A')\n \n \n@@ -19,6 +18,11 @@ def test_Vector():\n     v4 = v1 - v2\n \n     assert isinstance(v1, Vector)\n+\n+    # Verify issue is fixed: adding zero-multiplied vector should not raise TypeError\n+    # Issue: vector add 0 error\n+    N = ReferenceFrame('N')\n+    assert sum([N.x, (0 * N.x)]) == N.x\n     assert dot(v1, A.x) == x\n     assert dot(v1, A.y) == y\n     assert dot(v1, A.z) == z\n",
  "sympy__sympy-14976": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex fbe0d75..51eb99b 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import (absolute_import, division, print_function)\n \n@@ -28,6 +29,7 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(pi) == 'math.pi'\n     assert prntr.module_imports == {'math': {'pi'}}\n     assert prntr.doprint(acos(x)) == 'math.acos(x)'\n+    assert prntr.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n     assert prntr.doprint(Assignment(x, 2)) == 'x = 2'\n     assert prntr.doprint(Piecewise((1, Eq(x, 0)),\n                         (2, x>6))) == '((1) if (x == 0) else (2) if (x > 6) else None)'\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..12d592f 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -79,8 +80,17 @@ def test_ndim_array_initiation():\n     assert rank_zero_array[()] == x\n     raises(ValueError, lambda: rank_zero_array[0])\n \n-\n-def test_reshape():\n+def test_rank_zero_array():\n+    from sympy.abc import x\n+    \n+    # Test case for rank-0 array\n+    # Expecting the length to be 1 as the correct behavior\n+    rank_zero_array = ImmutableDenseNDimArray(x)\n+    assert len(rank_zero_array) == 1, \"Length should be 1 for rank-0 arrays\"\n+    assert rank_zero_array.shape == ()\n+    assert rank_zero_array.rank() == 0\n+    assert rank_zero_array[()] == x\n+    raises(ValueError, lambda: rank_zero_array[0])\n     array = ImmutableDenseNDimArray(range(50), 50)\n     assert array.shape == (50,)\n     assert array.rank() == 1\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..5835864 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -24,7 +25,11 @@ def test_Rational():\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n \n-def test_Function():\n+def test_Max():\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(x, y)) == \"Max[x, y]\"\n+    assert mcode(Max(z, x, y, 2)) == \"Max[z, x, y, 2]\"\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n     assert mcode(sin(x) ** cos(x)) == \"Sin[x]^Cos[x]\"\n     assert mcode(conjugate(x)) == \"Conjugate[x]\"\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..ec5a2fc 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,44 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_to_rotation_matrix():\n+    \"\"\"Test cases for Quaternion.to_rotation_matrix() method\"\"\"\n+    from sympy import symbols, cos, sin, trigsimp, Matrix\n+    from sympy.algebras.quaternion import Quaternion\n+\n+    # The problematic quaternion from the issue\n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected_matrix = Matrix([\n+        [1,      0,      0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix\n+\n+    # Additional test cases to ensure correctness\n+    # Quaternion representing 90-degree rotation about the z-axis\n+    q1 = Quaternion(cos(pi/4), 0, 0, sin(pi/4))\n+    expected_matrix_q1 = Matrix([\n+        [0, -1, 0],\n+        [1,  0, 0],\n+        [0,  0, 1]\n+    ])\n+    assert trigsimp(q1.to_rotation_matrix()) == expected_matrix_q1\n+\n+    # Quaternion representing no rotation\n+    q_identity = Quaternion(1, 0, 0, 0)\n+    expected_matrix_identity = Matrix([\n+        [1, 0, 0],\n+        [0, 1, 0],\n+        [0, 0, 1]\n+    ])\n+    assert q_identity.to_rotation_matrix() == expected_matrix_identity\n+\n+    # Quaternion with non-zero x, y, z and custom axis rotation\n+    q2 = Quaternion(cos(theta/2), sin(theta/2)/sqrt(3), sin(theta/2)/sqrt(3), sin(theta/2)/sqrt(3))\n+    assert q2.to_rotation_matrix((1, 1, 1)) != expected_matrix_q1\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +157,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..1b6ae66 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,25 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+    \n+    # Additional test cases for the Mod behavior changes\n+    assert Mod(6*i, 2) == 0  # 6*i is always even, modulo 2 should be 0\n+    assert Mod(9*i, 3) == 0  # 9*i is always divisible by 3\n+    assert Mod(-3*i, 2) == Mod(-i, 2)  # Testing with negative coefficient\n+\n+    # Verify fix with different values of i\n+    # Checking for i = 0, 1, 2, 3\n+    for val in range(4):\n+        assert Mod(3*val, 2) == Mod(val, 2)\n+\n+    # Test with symbolic expressions\n+    k, m = symbols('k m', integer=True)\n+    assert Mod(3*k*m, 2*m) == Mod(k, 2) * m\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..5ba5504 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,8 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity\n+    raises(ValueError, lambda: Min(x, y, z) == x + y + z)  # Ensure previous functions work correctly\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +157,8 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n+    raises(ValueError, lambda: Max(x, y, z) == x * y * z)  # Ensure previous functions work correctly\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..9a17067 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1981,8 +1981,33 @@ def test_issue_8247_8354():\n         2) - 2*2**(1/3))**2''')\n     assert z.is_positive is False  # it's 0 (and a single _mexpand isn't enough)\n \n+from sympy import I, simplify, symbols\n \n def test_Add_is_zero():\n+    # Issue 15873: Testing `is_zero` attribute for complex integer expressions\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None  # We expect None because it's undecidable without further simplification\n+    assert simplify(e).is_zero is True  # Simplification confirms the expression is zero\n+\n+    # Additional test cases for similar patterns\n+    e2 = (1 + I)**2 - 2*I  # Should behave similarly\n+    assert e2.is_zero is None\n+    assert simplify(e2).is_zero is True\n+\n+    # Testing with real integers\n+    x, y, z = symbols('x y z', zero=True)\n+    assert (x + y).is_zero is True\n+    assert (x + y + z).is_zero is True\n+    assert (x + y - z).is_zero is True  # z is defined as Zero\n+\n+    a, b = symbols('a b', real=True)\n+    e3 = a*b + 1*I - 1*I\n+    assert e3.is_zero is None  # Because a*b is unknown\n+    assert simplify(e3).is_zero is None  # Simplification doesn't help if a*b remains unknown\n+\n+    # Test complex number involving rational coefficients\n+    e4 = simplify((1/2 + 1/2)*I - I)\n+    assert e4.is_zero is True  # Simplification results in zero\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n@@ -1993,4 +2018,4 @@ def test_issue_14392():\n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..5b7b5de 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -477,8 +477,36 @@ def test_logcombine_complex_coeff():\n     assert logcombine(i + 2*log(x), force=True) == \\\n         i + log(x**2)\n \n-\n-def test_issue_5950():\n+def test_issue_posify_finite_assumption():\n+    from sympy import symbols, posify\n+    k = symbols('k', finite=True)\n+    eq, rep = posify(k)\n+    assumptions = eq.assumptions0\n+    assert assumptions['finite'] == True\n+    assert assumptions['infinite'] == False\n+    assert assumptions['positive'] == True\n+    assert assumptions['zero'] == False\n+    assert assumptions['imaginary'] == False\n+    assert assumptions['nonpositive'] == False\n+    assert assumptions['commutative'] == True\n+    assert assumptions['hermitian'] == True\n+    assert assumptions['real'] == True\n+    assert assumptions['nonzero'] == True\n+    assert assumptions['nonnegative'] == True\n+    assert assumptions['negative'] == False\n+    assert assumptions['complex'] == True\n+\n+def test_issue_posify_various_assumptions():\n+    from sympy import symbols, posify\n+    a = symbols('a', integer=True)\n+    b = symbols('b', rational=True)\n+    c = symbols('c', prime=True)\n+    d = symbols('d', even=True)\n+    e = symbols('e', odd=True)\n+\n+    for sym in [a, b, c, d, e]:\n+        eq, rep = posify(sym)\n+        assert sym.assumptions0.items() <= eq.assumptions0.items()  # Original assumptions should be a subset\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n     assert logcombine(log(x) - log(y)) == log(x/y)\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..f766813 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -35,6 +37,12 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n+    # Test for Indexed support\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[1, 2]) == 'p[1, 2]'\n+    assert prntr.doprint(p[x, y, z]) == 'p[x, y, z]'\n+\n \n def test_MpmathPrinter():\n     p = MpmathPrinter()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..1f8a466 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -67,7 +67,16 @@ def test_cython_wrapper_outarg():\n     assert source == expected\n \n \n-def test_cython_wrapper_inoutarg():\n+def test_autowrap_cython_unused_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n     code_gen = CythonCodeWrapper(C99CodeGen())\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..5c7919e 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -249,6 +249,13 @@ def test_encode_morse():\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n \n+def test_encode_morse_numbers():\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('12') == '.----|..---'\n+    assert encode_morse('123') == '.----|..---|...--'\n+    assert encode_morse('0') == '-----'\n+    assert encode_morse('9876543210') == '----.|---..|--...|-....|.....|....-|...--|..---|.----|-----'\n+\n def test_decode_morse():\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..179f58e 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -814,4 +814,18 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n+\n+\n+def test_issue_17137():\n+    from sympy import simplify, Symbol, I, cos\n+    x = Symbol('x')\n+    # Test cases based on the issue\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    # Additional cases to ensure thorough testing\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(tan(x)**I) == tan(x)**I\n+    assert simplify(cos(x)**(-I)) == cos(x)**(-I)\n+    assert simplify(cos(x)**(I + 1)) == cos(x)**(I + 1)\n+    assert simplify(cos(x)**(I - 1)) == cos(x)**(I - 1)\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..34a6c24 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,6 +1,9 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n                                           15, 29]]\n@@ -175,8 +178,16 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n-\n-def test_issue_5653():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    # Test _sqrt_match function\n+    assert _sqrt_match(4 + I) == []\n+    # Test sqrtdenest function with complex nested surds expression\n+    e = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert sqrtdenest(e) == e\n+    # Verify unchanged behaviour for an expression that cannot be denested\n+    expr = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert unchanged(sqrtdenest, expr)\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..0ec3261 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,12 +1,20 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n+def test_multiplying_point_and_number():\n+    p1 = Point2D(0, 0)\n+    p2 = Point2D(1, 1)\n+    scalar = sympify(2.0)\n \n-def test_point():\n+    # Both should behave similarly and give equivalent results\n+    result1 = p1 + p2 * scalar\n+    result2 = p1 + scalar * p2\n+    assert result1 == result2\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..15e6103 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,6 +553,21 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n+def test_issue_18186():\n+    from sympy.solvers.diophantine import diophantine\n+    from sympy.abc import x, y\n+\n+    eq = y**4 + x**4 - 2**4 - 3**4\n+    expected_solutions = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), \n+                              (2, -3), (2, 3), (3, -2), (3, 2)])\n+    \n+    # Test the provided syms order issue - (x, y)\n+    sol1 = diophantine(eq, syms=(x, y), permute=True)\n+    assert sol1 == expected_solutions, f\"Failed for syms order (x, y): {sol1}\"\n+\n+    # Test the reverse syms order issue - (y, x)\n+    sol2 = diophantine(eq, syms=(y, x), permute=True)\n+    assert sol2 == expected_solutions, f\"Failed for syms order (y, x): {sol2}\"\n \n def test_general_pythagorean():\n     from sympy.abc import a, b, c, d, e\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..41550ca 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -677,7 +677,18 @@ def test_latex_subs():\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n \n-def test_latex_integrals():\n+def test_issue_latex_subs_parenthesizing():\n+    from sympy import Subs, symbols\n+    x, y, z = symbols('x y z')\n+    \n+    # Original test case verifying the fix\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # Additional cases to further validate the fix\n+    assert latex(2*Subs(x*y - z, (x,), (1,))) == r'2 \\left. \\left(x y - z\\right) \\right|_{\\substack{ x=1 }}'\n+    assert latex(Subs(-x**2 + y, (y,), (z,))) == r'\\left. \\left(- x^{2} + y\\right) \\right|_{\\substack{ y=z }}'\n+    assert latex(Subs(x - y*(z + 1), (x, y), (1, 2))) == r'\\left. \\left(x - 2 \\left( z + 1\\right)\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    assert latex(4*x*y*Subs(z - x, (z,), (y,))) == r'4 x y \\left. \\left(z - x\\right) \\right|_{\\substack{ z=y }}'\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n         r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..ad97e6c 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -483,7 +483,32 @@ def test_geometry():\n     assert L == Line((0, 1), (1, 0)) and isinstance(L, Line)\n \n \n+from sympy import Symbol, Interval, sin, cos, exp, Add, Mul, Rational, S\n+\n def test_kernS():\n+    # Test case to ensure the specific issue of 'kern' being referenced before assignment.\n+    # This directly relates to the originally reported error.\n+    text = \"(2*x)/(x-1)\"\n+    assert kernS(text) == 2*x/(x-1)  # original test case suggestion\n+\n+    # Testing kernS with empty input which should ideally return something like an empty or trivial expression\n+    assert kernS(\"\") == S('')  # An empty input case\n+\n+    # Testing complex expression that could potentially trick the kernS code\n+    complex_expr = \"(a + b)*(c + d) - (e + f)\"\n+    assert kernS(complex_expr) == (a + b)*(c + d) - (e + f)\n+\n+    # Testing nested expressions which could be susceptible to unresolved kernels.\n+    nested_expr = \"((a + b)*(c + d) + (e + f))/(g - h)\"\n+    assert kernS(nested_expr) == ((a + b)*(c + d) + (e + f))/(g - h)\n+\n+    # Ensure kernS correctly handles a single symbolic input\n+    single_symbol = \"a\"\n+    assert kernS(single_symbol) == Symbol(single_symbol)\n+\n+    # Special case: Ensure kernS handles numeric and sympy constants without modification\n+    assert kernS(\"1\") == 1\n+    assert kernS(\"pi\") == S('pi')  # Sympy's internal representation of pi\n     s =   '-1 - 2*(-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))'\n     # when 1497 is fixed, this no longer should pass: the expression\n     # should be unchanged\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..e8474d6 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -84,7 +85,14 @@ def test_unitary():\n     assert Dagger(U).is_commutative is False\n \n \n-def test_identity():\n+def test_dagger_identity_operator_multiplication():\n+    # This function will test the multiplication of Dagger and IdentityOperator\n+    I = IdentityOperator()\n+    O = Operator('O')\n+    D = Dagger(O)\n+\n+    assert D * I == D  # Dagger(Operator) * IdentityOperator should simplify to Dagger(Operator)\n+    assert I * D == D  # IdentityOperator * Dagger(Operator) should simplify to Dagger(Operator)\n     I = IdentityOperator()\n     O = Operator('O')\n     x = Symbol(\"x\")\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..a6e4c54 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -905,9 +905,18 @@ def test_sylow_subgroup():\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 2 > 0\n \n-\n-@slow\n-def test_presentation():\n+def test_issue_sylow_subgroup_indexerror():\n+    # Test case for DihedralGroup(18)\n+    G = DihedralGroup(18)\n+    S2 = G.sylow_subgroup(p=2)\n+    # The expected order of the Sylow 2-subgroup for DihedralGroup(18) should be 4\n+    assert S2.order() == 4\n+\n+    # Test case for DihedralGroup(50)\n+    G = DihedralGroup(50)\n+    S2 = G.sylow_subgroup(p=2)\n+    # The expected order of the Sylow 2-subgroup for DihedralGroup(50) should be 4\n+    assert S2.order() == 4\n     def _test(P):\n         G = P.presentation()\n         return G.order() == P.order()\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..7722d63 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -514,6 +514,34 @@ def test_partitions():\n         assert i == RGS_enum(n)\n \n \n+def test_partitions_reusability():\n+    # This test checks if partitions reuse dictionary objects.\n+    # We'll create a list from the iterator and modify the result to check reusability.\n+    \n+    # Test simple case\n+    partitions_list = list(partitions(6, k=2))\n+    assert partitions_list == [\n+        {2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+    \n+    # Modify one of the dictionaries\n+    partitions_list[0][2] = 0\n+\n+    # Generate the partitions again and ensure they are unaffected by the previous modification\n+    new_partitions_list = list(partitions(6, k=2))\n+    assert new_partitions_list == [\n+        {2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+\n+    # Check using a larger number\n+    large_partitions_list = list(partitions(8))\n+    # Loosely validate the first few partitions without worrying about the whole list\n+    expected_start = [{8: 1}, {1: 1, 7: 1}, {2: 1, 6: 1}]\n+    assert large_partitions_list[:3] == expected_start\n+\n+    # Change the large partitions list and ensure original partitions unaffected\n+    large_partitions_list[0][8] = 0\n+    assert list(partitions(8))[:3] == expected_start\n+\n+\n def test_binary_partitions():\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..d39a75a 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -582,7 +582,14 @@ def test_Float():\n     for i, a in zip(u, v):\n         assert Float(i) is a\n \n-\n+def test_float_comparison_with_false():\n+    from sympy import S\n+    # Test cases for comparison between S(0.0) and S.false\n+    assert (S(0.0) == S.false) is False, \"Failed on S(0.0) == S.false\"\n+    assert (S.false == S(0.0)) is False, \"Failed on S.false == S(0.0)\"\n+    # Control cases that should remain unaffected\n+    assert (S(0) == S.false) is False, \"The behavior of S(0) == S.false should remain False\"\n+    assert (S.false == S(0)) is False, \"The behavior of S.false == S(0) should remain False\"\n \n @conserve_mpmath_dps\n def test_float_mpf():\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..b1f67bc 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -20,7 +21,40 @@ def test_subs():\n     assert e == Rational(6)\n \n \n-def test_subs_Matrix():\n+def test_issue_21373():\n+    from sympy.functions.elementary.trigonometric import sinh\n+    from sympy.abc import x, y, z\n+\n+    # Check if the error occurs only for real symbols with sinh, exp, and division by z\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    try:\n+        result = expr.subs({1: 1.0})\n+        assert result == expr\n+    except Exception as e:\n+        assert False, f\"Unexpected error occurred: {e}\"\n+\n+    # Testing with cosh instead of sinh\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr_cosh.subs({1: 1.0}) == expr_cosh\n+\n+    # Removing the division by z\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    assert expr_no_div.subs({1: 1.0}) == expr_no_div\n+\n+    # Removing exp wrapper\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    assert expr_no_exp.subs({1: 1.0}) == expr_no_exp\n+\n+    # Non-real symbols should not raise error\n+    x_sym, y_sym, z_sym = symbols('x_sym y_sym z_sym')\n+    expr_non_real = exp(sinh(Piecewise((x_sym, y_sym > x_sym), (y_sym, True)) / z_sym))\n+    assert expr_non_real.subs({1: 1.0}) == expr_non_real\n+\n+    # Check the modified test case of the original use case\n+    expr_orig = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    result_orig = expr_orig.subs({1: 1.0})\n+    assert result_orig == expr_orig\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n     assert (x*y).subs({x:z, y:0}) in [z, z1]\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..23b5432 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -162,7 +162,36 @@ def test_monomials():\n                     x*j**2, x*k**2, x*j*k, x**2*j**2*k**2, x*j*k**2, x**2, x**2*j*k**2\n             }\n \n-def test_monomial_count():\n+def test_itermonomials_min_degrees():\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    states = [x1, x2, x3]\n+\n+    # Test case from the issue statement\n+    max_degrees = 3\n+    min_degrees = 3\n+    monomials = set(itermonomials(states, max_degrees, min_degrees=min_degrees))\n+    expected_monomials = {\n+        x1**3, x2**3, x3**3, x1**2*x2, x1*x2**2, x1**2*x3, x1*x3**2, x2**2*x3,\n+        x2*x3**2, x1*x2*x3\n+    }\n+    assert monomials == expected_monomials\n+\n+    # Additional test case where min_degrees = 2 and max_degrees = 3\n+    max_degrees = 3\n+    min_degrees = 2\n+    monomials = set(itermonomials(states, max_degrees, min_degrees=min_degrees))\n+    expected_monomials_min_2 = {\n+        x1**3, x2**3, x3**3, x1**2*x2, x1*x2**2, x1**2*x3, x1*x3**2, x2**2*x3,\n+        x2*x3**2, x1*x2*x3, x1**2, x2**2, x3**2, x1*x2, x1*x3, x2*x3\n+    }\n+    assert monomials == expected_monomials_min_2\n+\n+    # Test with single variable\n+    x = symbols('x')\n+    max_degrees = 3\n+    min_degrees = 2\n+    monomials = set(itermonomials([x], max_degrees, min_degrees))\n+    assert monomials == {x**2, x**3}\n     assert monomial_count(2, 2) == 6\n     assert monomial_count(2, 3) == 10\n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..c5feb0e 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -264,6 +264,17 @@ def test_none():\n def test_String():\n     st = String('foobar')\n     assert st.is_Atom\n+    assert st.func(*st.args) == st  # This was missing, it's important for the fix verification\n+\n+    qs = QuotedString('foobar')\n+    assert qs.func(*qs.args) == qs\n+    assert qs.text == 'foobar'\n+    assert str(qs) == 'foobar'\n+\n+    cm = Comment('foobar')\n+    assert cm.func(*cm.args) == cm\n+    assert cm.text == 'foobar'\n+    assert str(cm) == 'foobar'\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..a9abb16 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,8 @@\n+\n from sympy.core.basic import Basic\n+from sympy.core.parameters import evaluate\n+from sympy.geometry import Point2D\n+from sympy.core.numbers import Integer\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n@@ -440,7 +444,25 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Original test: Used to give an error\n+    with evaluate(False):\n+        p = Point2D(Integer(1), Integer(2))\n+    assert p == Point2D(1, 2)\n+\n+    # Extended tests: Verify no error arises and behavior is consistent\n+    # without using sp.S('Point2D(...)') to avoid parse_expr complexities.\n+    with evaluate(False):\n+        p1 = Point2D(1, 2)\n+        p2 = Point2D(3, 4)\n+        assert str(p1) == \"Point2D(1, 2)\"\n+        assert str(p2) == \"Point2D(3, 4)\"\n+        assert p1 + p2 == Point2D(4, 6)\n+\n+    # Ensure imaginary components trigger ValueError\n+    with raises(ValueError):\n+        with evaluate(False):\n+            Point2D(1 + 2*I, 3)\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..81ae919 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -58,8 +59,22 @@ def test_PythonCodePrinter():\n     assert prntr.doprint((2,3)) == \"(2, 3)\"\n     assert prntr.doprint([2,3]) == \"[2, 3]\"\n \n+    assert prntr.doprint(Min(x, y)) == 'min(x, y)'\n+    assert prntr.doprint(Max(x, y)) == 'max(x, y)'\n+\n+    # Testing with more than two arguments\n+    assert prntr.doprint(Min(x, y, z)) == 'min(x, y, z)'\n+    assert prntr.doprint(Max(x, y, z)) == 'max(x, y, z)'\n+\n+    # Testing with nested expressions\n+    nested_min = Min(Min(x, y), z)\n+    nested_max = Max(Max(x, y), z)\n+    assert prntr.doprint(nested_min) == 'min(min(x, y), z)'\n+    assert prntr.doprint(nested_max) == 'max(max(x, y), z)'\n \n-def test_PythonCodePrinter_standard():\n+    # Testing with numerical values for coverage\n+    assert prntr.doprint(Min(1, 2, 3)) == 'min(1, 2, 3)'\n+    assert prntr.doprint(Max(1, 2, 3)) == 'max(1, 2, 3)'\n     prntr = PythonCodePrinter()\n \n     assert prntr.standard == 'python3'\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..e004ed9 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,24 @@ def test_scipy_polys():\n \n \n \n+def test_lambdify_tuple_with_one_element():\n+    # Test the lambdify function to ensure it correctly returns a tuple with a single element\n+    f2b = lambdify([], (1,))\n+    assert f2b() == (1,)\n+\n+    # Inspect the function source to verify the tuple syntax in the generated code\n+    source_code = inspect.getsource(f2b)\n+    assert 'return (1,)' in source_code\n+\n+    # Test with a tuple of multiple elements to ensure the change does not affect other cases\n+    f_multi = lambdify([], (1, 2))\n+    assert f_multi() == (1, 2)\n+    source_code_multi = inspect.getsource(f_multi)\n+    assert 'return (1, 2)' in source_code_multi\n+\n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..f7c1008 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,11 +1,12 @@\n-from sympy.core.numbers import (I, Rational, pi)\n+\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n from sympy.testing.pytest import raises\n-from sympy.core.symbol import disambiguate\n+from sympy.core.symbol import disambiguate, symbols\n \n def test_Str():\n     a1 = Str('a')\n@@ -298,7 +299,12 @@ def test_symbols():\n     # issue 6675\n     def sym(s):\n         return str(symbols(s))\n-    assert sym('a0:4') == '(a0, a1, a2, a3)'\n+    # Test for issue: Using symbols with an extra layer of parentheses should create UndefinedFunction\n+    def test_symbols_with_parentheses_function_creation():\n+        q, u = symbols(('q:2', 'u:2'), cls=Function)\n+        assert isinstance(q, tuple) and isinstance(u, tuple), \"q and u should be tuples\"\n+        assert all(isinstance(f, UndefinedFunction) for f in q), \"Items in q should be UndefinedFunction\"\n+        assert all(isinstance(f, UndefinedFunction) for f in u), \"Items in u should be UndefinedFunction\"\n     assert sym('a2:4,b1:3') == '(a2, a3, b1, b2)'\n     assert sym('a1(2:4)') == '(a12, a13)'\n     assert sym('a0:2.0:2') == '(a0.0, a0.1, a1.0, a1.1)'\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..1dd0fc2 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -262,6 +262,57 @@ def test_kahane_simplify1():\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n \n+def test_kahane_leading_gamma_matrix():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+\n+    # Test from the issue description\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # Additional test cases to ensure proper ordering\n+    t = G(mu)*G(nu)*G(-nu)*G(rho)  # No contraction, should return as is\n+    r = kahane_simplify(t)\n+    assert r.equals(G(mu)*G(nu)*G(rho))\n+\n+    t = G(rho)*G(mu)*G(-mu)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(-nu)*G(mu)*G(sigma)*G(-mu)*G(nu)*G(rho)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(sigma)*G(rho))\n+\n+    t = G(mu)*G(nu)*G(rho)*G(sigma)*G(-nu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(-2*G(sigma)*G(rho))\n+\n+    t = G(mu)*G(nu)*G(-rho)*G(sigma)*G(rho)*G(-nu)*G(mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(8*G(sigma))\n+\n+    t = G(mu)*G(-mu)*G(-rho)*G(rho)*G(nu)*G(-nu)\n+    r = kahane_simplify(t)\n+    assert r.equals(16*eye(4))\n+\n+    # Mixed contracted and non-contracted\n+    t = G(mu)*G(-mu)*G(rho)*G(-rho)*G(sigma)*G(nu)*G(-nu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(sigma))\n+\n+    # Ensure free gamma matrices remain untouched\n+    t = G(mu)*G(nu)*G(rho)\n+    r = kahane_simplify(t)\n+    assert r.equals(G(mu)*G(nu)*G(rho))\n+\n+    t = G(mu)*G(nu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(G(mu)*G(nu)*G(rho)*G(sigma))\n+\n def test_gamma_matrix_class():\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..5711ef1 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -45,7 +45,15 @@ def test_as_set():\n     # containment in a Set -- rewriting as a Set is not yet implemented\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n+from sympy import Symbol, FiniteSet, S, Contains\n+from sympy.testing.pytest import raises\n \n-def test_type_error():\n+def test_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Test that Contains.as_set() raises a NotImplementedError\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..9df0e62 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,6 +541,32 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units.dimensions import Dimension\n+    \n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    # Additional case to verify the fix of issue\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..781856e 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,41 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import time, velocity, acceleration, second, meter, Quantity\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_collect_factor_and_dimension_with_differing_values():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 3 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 7 * second)\n+\n+    expr1 = a1*t1 + v1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr1)\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..6d9fbd3 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -101,8 +102,25 @@ def test_isomorphisms():\n     assert G.order() == H.order()\n     assert is_isomorphic(G, H)\n \n-\n def test_check_homomorphism():\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+    # Additional tests for inverted generators and edge cases\n+    a = Permutation(0, 1)\n+    b = Permutation(0, 1, 2)\n+    G = PermutationGroup([a, b])\n+    # Test that with inverses in generators list, it doesn't raise an error and works correctly\n+    hom = homomorphism(G, G, [a, b, a**-1, b**-1], [a, b, a**-1, b**-1])\n+    assert hom.is_trivial() is False\n+\n+    # Test with cyclic structure where mappings might involve inverse handling internally\n+    C3 = CyclicGroup(3)\n+    try:\n+        hom = homomorphism(C3, D3, C3.generators, D3.generators[:1])\n+    except ValueError:\n+        assert True  # Properly raises error as non-injective map\n     a = Permutation(1,2,3,4)\n     b = Permutation(1,3)\n     G = PermutationGroup([a, b])\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..9d294af 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -270,7 +270,33 @@ def test_PolyElement_as_expr():\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n-def test_PolyElement_from_expr():\n+def test_PolyElement_as_expr_custom_symbols():\n+    from sympy import Symbol, ring, ZZ, symbols\n+\n+    # Setup the rings and symbols\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+\n+    # Case 1: Testing with a different set of symbols u, v, w\n+    u, v, w = symbols(\"u,v,w\")\n+    expected = 3*u**2*v - u*v*w + 7*w**3 + 1\n+\n+    assert f.as_expr(u, v, w) == expected\n+\n+    # Case 2: Testing with only one symbol\n+    u_only = Symbol(\"u\")\n+    raises(ValueError, lambda: f.as_expr(u_only))\n+\n+    # Case 3: Testing with an incorrect number of new symbols\n+    u, v = symbols(\"u,v\")\n+    raises(ValueError, lambda: f.as_expr(u, v))\n+\n+    # Case 4: Testing with the correct expression as a single variable\n+    R_single, x_single = ring(\"x\", ZZ)\n+    f_single = x_single**3 + 2*x_single + 1\n+    new_sym = Symbol(\"s\")\n+    expected_single = new_sym**3 + 2*new_sym + 1\n+    assert f_single.as_expr(new_sym) == expected_single\n     x, y, z = symbols(\"x,y,z\")\n     R, X, Y, Z = ring((x, y, z), ZZ)\n \n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..52a3780 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -273,6 +273,23 @@ def test_convert_equals_signs():\n     assert parse_expr(\"(2*y = x) = False\",\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n+def test_relational_evaluate_false():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False),\n+        \"3 < 5 <= 7\": And(Lt(3, 5, evaluate=False), Le(5, 7, evaluate=False)),\n+        \"(2 + 3) > 4\": Gt(2 + 3, 4, evaluate=False),\n+        \"x < y < z\": And(Lt(Symbol('x'), Symbol('y'), evaluate=False),\n+                         Lt(Symbol('y'), Symbol('z'), evaluate=False))\n+    }\n+\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n \n def test_parse_function_issue_3539():\n     x = Symbol('x')\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..cf13ce3 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -35,6 +35,8 @@ from astropy.units.utils import is_effectively_unity\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n         ([\"dex(cm s**-2)\", \"dex(cm/s2)\"], u.DexUnit(u.cm / u.s**2)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n     ],\n )\n def test_unit_grammar(strings, unit):\n@@ -90,6 +92,8 @@ def test_unit_grammar_fail(string):\n         ([\"[cm/s2]\"], dex(u.cm / u.s**2)),\n         ([\"[K]\"], dex(u.K)),\n         ([\"[-]\"], dex(u.dimensionless_unscaled)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n     ],\n )\n def test_cds_grammar(strings, unit):\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..1bc46ef 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1898,6 +1898,25 @@ class OperationTests(OperationTestBase):\n         author = Author.objects.create(name='Albert', rebate='10%')\n         self.assertEqual(Author.objects.get(), author)\n \n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_add_or_and_constraint(self):\n+        app_label = 'test_or_and_constraint'\n+        constraint_name = 'constraint_or_and'\n+        from_state = self.set_up_test_model(app_label)\n+        # This checks that the constraint does not fully qualify field names inappropriately\n+        check = models.Q(number__gt=5, flag=True) | models.Q(flag=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('NewModel', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        NewModel = to_state.apps.get_model(app_label, 'NewModel')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            NewModel.objects.create(number=4, flag=True)\n+        NewModel.objects.create(number=6, flag=True)\n+        NewModel.objects.create(number=4, flag=False)\n+\n     @skipUnlessDBFeature('supports_table_check_constraints')\n     def test_remove_constraint(self):\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..dedda16 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -163,6 +163,21 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n \n+    def test_translate_url_with_optional_params(self):\n+        # Test translate_url with optional URL segments\n+        with translation.override('en'):\n+            # Optional parameter is absent\n+            self.assertEqual(translate_url('/en/regex_optional/1/', 'nl'), '/nl/regex_optional/1/')\n+            # Optional parameter is present\n+            self.assertEqual(translate_url('/en/regex_optional/1/2/', 'nl'), '/nl/regex_optional/1/2/')\n+            self.assertEqual(translation.get_language(), 'en')\n+\n+        with translation.override('nl'):\n+            # Test the reverse: optional parameter is absent\n+            self.assertEqual(translate_url('/nl/regex_optional/1/', 'en'), '/en/regex_optional/1/')\n+            # Optional parameter is present\n+            self.assertEqual(translate_url('/nl/regex_optional/1/2/', 'en'), '/en/regex_optional/1/2/')\n+            self.assertEqual(translation.get_language(), 'nl')\n \n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..55d59e0 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -14,8 +15,22 @@ from .models import (\n     MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n     Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n     SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n+    Item, Derived\n )\n \n+class ResetPrimaryKeyTest(TestCase):\n+    def setUp(self):\n+        self.existing_item = Derived.objects.create(f=True)\n+    \n+    def test_reset_primary_key_creates_new_instance(self):\n+        derived_instance = Derived.objects.get(pk=self.existing_item.pk)\n+        derived_instance.reset()\n+        derived_instance.save()\n+        \n+        # Check that resetting the primary key and saving creates a new instance\n+        self.assertEqual(Derived.objects.count(), 2)\n+        self.assertIsNotNone(Derived.objects.exclude(pk=self.existing_item.pk).first())\n+\n \n class ModelInheritanceTest(TestCase):\n     def test_model_inheritance(self):\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..3014f77 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -671,6 +671,12 @@ class FastDeleteTests(TestCase):\n         self.assertNumQueries(2, p.delete)\n         self.assertFalse(Parent.objects.exists())\n         self.assertFalse(Child.objects.exists())\n+    def test_fast_delete_all(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries is used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n \n     def test_fast_delete_large_batch(self):\n         User.objects.bulk_create(User() for i in range(0, 2000))\n@@ -702,4 +708,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..680a70a 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -24,8 +25,24 @@ class DecimalFieldTests(TestCase):\n         msg = '\u201cabc\u201d value must be a decimal number.'\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n-\n-    def test_default(self):\n+    \n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            (),\n+            [],\n+            {},\n+            set(),\n+            object(),\n+            complex(),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.clean(value, None)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..505deed 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -25,6 +25,15 @@ class JSONFieldTest(SimpleTestCase):\n             field.clean('{some badly formed: json}')\n \n     def test_prepare_value(self):\n+        field = JSONField()\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d \u4e16\u754c'}), '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        self.assertEqual(\n+            field.prepare_value([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]),\n+            '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]',\n+        )\n+        self.assertEqual(field.prepare_value({'key': ['\u4f60\u597d', '\u4e16\u754c']}), '{\"key\": [\"\u4f60\u597d\", \"\u4e16\u754c\"]}')\n         field = JSONField()\n         self.assertEqual(field.prepare_value({'a': 'b'}), '{\"a\": \"b\"}')\n         self.assertEqual(field.prepare_value(None), 'null')\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..5bef094 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6602,7 +6602,41 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n-    @override_settings(APPEND_SLASH=True)\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix')\n+    def test_missing_slash_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/prefix')\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix')\n+    def test_correct_redirect_with_script_name_only_setting(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username='user',\n@@ -6628,7 +6662,41 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertEqual(response.status_code, 404)\n \n-    @override_settings(APPEND_SLASH=True)\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix')\n+    def test_missing_slash_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/prefix')\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix')\n+    def test_correct_redirect_with_script_name_only_setting(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            '/prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..f581c19 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,7 +691,41 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n-    def test_migration_path(self):\n+    def test_serialize_custom_model_structure(self):\n+        \"\"\"\n+        Tests that a migration with a custom model structure includes the correct import statements.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"MyModel\",\n+                    fields=[\n+                        ('name', MyField(primary_key=True)),\n+                    ],\n+                    bases=(MyMixin, models.Model),  # Pay special attention to the bases\n+                )\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Execute the output and check that it properly includes models import\n+        result = self.safe_exec(output)\n+        self.assertIn(\"from django.db import models\", output, \"The import statement for models is missing.\")\n+        self.assertIn(\"MyModel\", result)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..d0a60fb 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1623,6 +1623,20 @@ class AggregateTestCase(TestCase):\n             value=Sum('price', default=Pi()),\n         )\n         self.assertAlmostEqual(result['value'], Decimal.from_float(math.pi), places=6)\n+    def test_aggregation_default_after_annotation_sum(self):\n+        # Testing Sum with default after annotation\n+        result = Book.objects.annotate(\n+            double_id=F('id') * 2\n+        ).aggregate(value=Sum('double_id', default=0))\n+        self.assertEqual(result['value'], 9120)\n+\n+    def test_aggregation_default_after_annotation_avg(self):\n+        # Testing Avg with default after annotation\n+        # Assuming there are ratings and they average to a certain value\n+        result = Book.objects.annotate(\n+            rating_times_ten=F('rating') * 10\n+        ).aggregate(value=Avg('rating_times_ten', default=50))\n+        self.assertTrue('value' in result)\n \n     def test_aggregation_default_passed_another_aggregate(self):\n         result = Book.objects.aggregate(\n@@ -1642,4 +1656,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..93bd115 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2985,6 +2985,23 @@ class OperationTests(OperationTestBase):\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         # Reverse is a no-op.\n+\n+        # Test renaming an unnamed index backward and forward\n+        with connection.schema_editor() as editor:\n+            # Initial forward rename to an unnamed index\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+        # Reverse rename should restore the auto-generated name\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameDoesNotExist(table_name, \"new_pony_test_idx\")\n+        self.assertIndexNameExists(table_name, \"pony_pink_weight_idx\")\n+\n+        # Re-apply renaming to ensure no crash\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..f193ac5 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3496,6 +3496,56 @@ class FormFieldCallbackTests(SimpleTestCase):\n                 type(NewForm.base_fields[name].widget),\n             )\n \n+    def test_modelform_factory_uses_meta_formfield_callback(self):\n+        # Setup\n+        from django.forms import ModelForm, CharField, Textarea, modelform_factory\n+        from myapp.models import Person\n+\n+        def callback(db_field, **kwargs):\n+            return CharField(widget=Textarea)\n+\n+        class MyModelForm(ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = [\"name\"]\n+                formfield_callback = callback\n+\n+        # Create a form using modelform_factory\n+        FactoryForm = modelform_factory(Person, form=MyModelForm)\n+\n+        # Assert\n+        for field_name, field in FactoryForm.base_fields.items():\n+            self.assertEqual(type(field.widget), Textarea)\n+\n+    def test_inherited_form_uses_meta_formfield_callback(self):\n+        # Setup\n+        from django.forms import ModelForm, CharField, Textarea, modelform_factory\n+        from myapp.models import Person\n+\n+        def callback(db_field, **kwargs):\n+            return CharField(widget=Textarea)\n+\n+        class BaseForm(ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = \"__all__\"\n+                formfield_callback = callback\n+\n+        # Create a form using modelform_factory\n+        FactoryForm = modelform_factory(Person, form=BaseForm)\n+\n+        # Inherit from the factory form\n+        class InheritedForm(FactoryForm):\n+            pass\n+\n+        # Assert for both FactoryForm and InheritedForm\n+        for field_name, field in FactoryForm.base_fields.items():\n+            self.assertEqual(type(field.widget), Textarea)\n+            self.assertEqual(\n+                type(field.widget),\n+                type(InheritedForm.base_fields[field_name].widget)\n+            )\n+\n \n class LocalizedModelFormTest(TestCase):\n     def test_model_form_applies_localize_to_some_fields(self):\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..8882496 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -11,7 +11,8 @@ from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n from django.utils.translation import gettext_lazy, override\n \n-from .models import Score\n+from .models import Score, TestTagMaster, TestTag, Test\n+from django.core import serializers\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n \n \n@@ -258,7 +259,18 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             for obj in serializers.deserialize(\"json\", test_string, ignore=False):\n                 obj.save()\n \n-    def test_helpful_error_message_for_many2many_not_iterable(self):\n+    def test_serialization_with_custom_m2m_manager(self):\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        test.save()\n+        \n+        try:\n+            json_data = serializers.serialize(\"json\", [test])\n+            self.assertIsInstance(json_data, str)\n+        except Exception as e:\n+            self.fail(f\"Serialization raised an exception: {e}\")\n         \"\"\"\n         Not iterable many-to-many field value throws a helpful error message.\n         \"\"\"\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..82dadea 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -207,7 +207,20 @@ def test_cmap(cmap):\n     pickle.dumps(cmap)\n \n \n-def test_unpickle_canvas():\n+import pytest\n+import matplotlib\n+import matplotlib.pyplot as plt\n+import platform\n+\n+@pytest.mark.skipif(platform.system() != 'Darwin', reason=\"This test is specific to macOS.\")\n+def test_dpi_after_unpickling():\n+    if platform.machine() == 'arm64' and matplotlib.get_backend() == 'MacOSX':\n+        fig = plt.figure(dpi=100)\n+        initial_dpi = fig.dpi\n+        dump = pickle.dumps(fig)\n+        fig_unpickled = pickle.loads(dump)\n+        assert fig_unpickled.dpi == initial_dpi, \\\n+            f\"Expected DPI to remain {initial_dpi}, but got {fig_unpickled.dpi}\"\n     fig = mfigure.Figure()\n     assert fig.canvas is not None\n     out = BytesIO()\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_units.py b/xarray/tests/test_units.py\nindex c680a89..2dcf571 100644\n--- a/xarray/tests/test_units.py\n+++ b/xarray/tests/test_units.py\n@@ -3681,7 +3681,11 @@ class TestDataArray:\n         (\n             method(\"diff\", dim=\"x\"),\n             method(\"differentiate\", coord=\"x\"),\n-            method(\"integrate\", dim=\"x\"),\n+            pytest.param(\n+                lambda x: pytest.warns(FutureWarning, match=\"dim argument is deprecated\")(x.integrate(dim=\"x\")),\n+                id=\"integrate_deprecated_dim\"\n+            ),\n+            method(\"integrate\", coord=\"x\"),\n             method(\"quantile\", q=[0.25, 0.75]),\n             method(\"reduce\", func=np.sum, dim=\"x\"),\n             pytest.param(lambda x: x.dot(x), id=\"method_dot\"),\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..1b04c66 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -106,6 +106,31 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     output = capsys.readouterr()\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n+from typing import Any\n+import re\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n \n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..9c40593 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1155,8 +1155,24 @@ def test_summary_list_after_errors(testdir):\n         ]\n     )\n \n+def test_does_not_eagerly_collect_packages(testdir):\n+    testdir.makepyfile(\"def test(): pass\")\n+    pydir = testdir.mkpydir(\"foopkg\")\n+    pydir.join(\"__init__.py\").write(\"assert False\")\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n \n-def test_importorskip():\n+def test_does_not_put_src_on_path(testdir):\n+    # `src` is not on sys.path so it should not be importable\n+    testdir.tmpdir.join(\"src/nope/__init__.py\").ensure()\n+    testdir.makepyfile(\n+        \"import pytest\\n\",\n+        \"def test():\\n\",\n+        \"    with pytest.raises(ImportError):\\n\",\n+        \"        import nope\\n\",\n+    )\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n     with pytest.raises(\n         pytest.skip.Exception,\n         match=\"^could not import 'doesnotexist': No module named .*\",\n@@ -1184,4 +1200,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..333ff5c 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,34 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_pandas_output_with_custom_transformer():\n+    \"\"\"Test FeatureUnion with a custom transformer and pandas output.\"\"\"\n+    import pandas as pd\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.utils._set_output import _SetOutputMixin\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    import pytest\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+    # Prepare data\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    transformer = FeatureUnion([(\"custom\", MyTransformer())]).set_output(transform=\"pandas\")\n+    \n+    # Test to verify that no error is raised\n+    output = transformer.fit_transform(data)\n+    expected_output = data.groupby(\"date\").sum()\n+    \n+    assert isinstance(output, pd.DataFrame)\n+    pd.testing.assert_frame_equal(output, expected_output)\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..a853e5b 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -11,6 +11,10 @@\n import pytest\n \n from sphinx import addnodes\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util.docutils import parse_rst\n+from sphinx.util.nodes import assert_node\n+from sphinx.ext.autodoc.typehints import merge_typehints\n \n \n @pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n@@ -30,4 +34,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..b103507 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,7 +1317,39 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n-    def test_parameters_with_class_reference(self):\n+    def test_multiple_parameters_issue(self):\n+        # Test case for verifying the issue of rendering errors with multiple input parameters\n+\n+        # Test with the napolean_use_param = False\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with the napolean_use_param = True\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8551": "",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex fb15c70..2973ad2 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -14,6 +14,21 @@ from .test_ext_autodoc import do_autodoc\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_meta_public_variable(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:data:: _PUBLIC_CONSTANT',\n+        '   :module: target.private',\n+        '   :value: None',\n+        '   :meta public:',\n+        '',\n+    ]\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None}\n@@ -34,6 +49,21 @@ def test_private_field(app):\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_meta_public_variable(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:data:: _PUBLIC_CONSTANT',\n+        '   :module: target.private',\n+        '   :value: None',\n+        '   :meta public:',\n+        '',\n+    ]\n def test_private_field_and_private_members(app):\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None,\n@@ -63,6 +93,21 @@ def test_private_field_and_private_members(app):\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_meta_public_variable(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:data:: _PUBLIC_CONSTANT',\n+        '   :module: target.private',\n+        '   :value: None',\n+        '   :meta public:',\n+        '',\n+    ]\n def test_private_members(app):\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None,\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..edd2fa7 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -984,7 +984,46 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n-def test_info_field_list_var(app):\n+def test_info_field_dict_str_str(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, ([nodes.list_item, nodes.paragraph])]))\n+\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..77ca984 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1008,8 +1008,43 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+def test_info_field_list_multiple_piped_types(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: ExampleClass\\n\"\n+            \"\\n\"\n+            \"   :param data: data parameter\\n\"\n+            \"   :type data: bytes | str | None\\n\")\n+    doctree = restructuredtext.parse(app, text)\n \n-def test_info_field_list_var(app):\n+    assert_node(doctree, \n+                (nodes.target,\n+                 addnodes.index,\n+                 addnodes.index,\n+                 [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                           [desc_addname, \"example.\"],\n+                                           [desc_name, \"ExampleClass\"])],\n+                         [desc_content, nodes.field_list, nodes.field, (nodes.field_name,\n+                                                                        nodes.field_body)])]))\n+    assert_node(doctree[3][1][0][0][1],\n+                ([nodes.paragraph, ([addnodes.literal_strong, \"data\"],\n+                                    \" (\",\n+                                    [pending_xref, addnodes.literal_emphasis, \"bytes\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"None\"],\n+                                    \")\",\n+                                    \" -- \",\n+                                    \"data parameter\")],))\n+    assert_node(doctree[3][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"bytes\",\n+                **{\"py:module\": \"example\", \"py:class\": \"ExampleClass\"})\n+    assert_node(doctree[3][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"ExampleClass\"})\n+    assert_node(doctree[3][1][0][0][1][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"None\",\n+                **{\"py:module\": \"example\", \"py:class\": \"ExampleClass\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..eca4742 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -862,6 +862,15 @@ def test_autodoc_typehints_description_no_undoc(app):\n             '      another tuple\\n'\n             '\\n'\n             '   Return type:\\n'\n+            '      int\\n'\n+            '\\n'\n+            'target.typehints.decr(a, b=1)\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      decremented number\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n'\n             '      Tuple[int, int]\\n'\n             in context)\n \n",
  "sympy__sympy-18211": "",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..a2e5460 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3330,6 +3330,32 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n-def test_issue_18205():\n+x = symbols('x')\n+y = symbols('y')\n+\n+def test_issue_8695():\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == result\n+\n+def test_sqf_list_variety():\n+    # Additional test case 1: Single variable polynomial\n+    p1 = x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2\n+    result1 = (1, [(x - 2, 1), (x**2 - 1, 2)])\n+    assert sqf_list(p1) == result1\n+\n+    # Additional test case 2: Polynomial with multiple factors and multiplicities\n+    p2 = (x**2 + 1)*(x + 1)**2*(x - 1)**3\n+    result2 = (1, [(x**2 + 1, 1), (x + 1, 2), (x - 1, 3)])\n+    assert sqf_list(p2) == result2\n+\n+    # Additional test case 3: Polynomial with higher powers and more complexity\n+    p3 = (x - 5)**4 * (x**3 + x**2 + x + 1)**2\n+    result3 = (1, [(x - 5, 4), (x**3 + x**2 + x + 1, 2)])\n+    assert sqf_list(p3) == result3\n+\n+    # Additional test case 4: Simple multiplication result\n+    p4 = x*(x + y)\n+    assert sqf_list(p4) == (1, [(x, 1), (x + y, 1)])\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..99009b8 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3255,7 +3255,11 @@ def test_issue_5786():\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n \n-def test_noncommutative():\n+def test_issue_18895():\n+    # This test verifies whether factor(z, extension=[I]) drops a factor.\n+    z = expand((x - 1)*(y - 1))\n+    assert factor(z) == (x - 1)*(y - 1)  # Standard behavior\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)  # Should also return the same factors with complex extension\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..7bba83f 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -369,8 +369,21 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n-\n-def test_Number_new():\n+def test_issue_rational_calc_value_error():\n+    # Test cases for the issue described:\n+    # 1. Check if Rational with string arguments gives the correct result\n+    assert Rational('0.5', '100').as_numer_denom() == (1, 200)  # This should give 1/200\n+    # 2. Double-check the direct float input version\n+    assert Rational(0.5, 100).as_numer_denom() == (1, 200)\n+\n+    # Additional test cases to verify similar scenarios\n+    assert Rational('1', '2').as_numer_denom() == (1, 2)        # Regular half\n+    assert Rational('3', '4').as_numer_denom() == (3, 4)        # Three-fourths\n+    assert Rational('2.5/5').as_numer_denom() == (1, 2)         # Half again\n+    assert Rational('6e-1/2e1').as_numer_denom() == (3, 10)     # Three tenths\n+\n+    # Compare expected numerical values\n+    assert Rational('0.5/100') == Rational(1, 200)\n     \"\"\"\"\n     Test for Number constructor\n     \"\"\"\n",
  "django__django-14534": "",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..87c82f3 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -302,6 +302,25 @@ def test_tool_line_handle():\n     assert tool_line_handle.positions == positions\n \n \n+@pytest.mark.parametrize('direction', [\"horizontal\", \"vertical\"])\n+def test_span_selector_no_expansion(direction):\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [10, 30])\n+    initial_xlim = ax.get_xlim()\n+    initial_ylim = ax.get_ylim()\n+\n+    selector = SpanSelector(ax, print, direction, interactive=True)\n+\n+    # Simulate a selection event\n+    do_event(selector, 'press', xdata=11, ydata=11, button=1)\n+    do_event(selector, 'onmove', xdata=18, ydata=18, button=1)\n+    do_event(selector, 'release', xdata=18, ydata=18, button=1)\n+\n+    # Assert that the xlim/ylim did not expand to include 0\n+    assert ax.get_xlim() == initial_xlim\n+    assert ax.get_ylim() == initial_ylim\n+\n+\n def check_lasso_selector(**kwargs):\n     ax = get_ax()\n \n",
  "scikit-learn__scikit-learn-12682": "",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..170a9bd 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -137,8 +137,31 @@ def test_multi_target_sample_weights():\n     w = [2., 1.]\n     rgr_w = MultiOutputRegressor(GradientBoostingRegressor(random_state=0))\n     rgr_w.fit(Xw, yw, w)\n+import numpy as np\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+import pytest\n \n-    # unweighted, but with repeated samples\n+@pytest.mark.parametrize('method', ['predict', 'predict_proba'])\n+def test_cross_val_predict_with_multioutput_classifier(method):\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20,\n+                                          n_classes=3, n_labels=2,\n+                                          random_state=0)\n+    \n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    \n+    # Check that cross_val_predict works for both predict and predict_proba\n+    if method == 'predict_proba':\n+        pred = cross_val_predict(mo_clf, X, Y, cv=5, method=method)\n+        for output in pred:\n+            assert len(output) == len(X)\n+            for probas in output:\n+                assert np.isclose(probas.sum(), 1.0)\n+    else:\n+        pred = cross_val_predict(mo_clf, X, Y, cv=5, method=method)\n+        assert pred.shape == Y.shape\n     X = [[1, 2, 3], [1, 2, 3], [4, 5, 6]]\n     y = [[3.141, 2.718], [3.141, 2.718], [2.718, 3.141]]\n     rgr = MultiOutputRegressor(GradientBoostingRegressor(random_state=0))\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..9026ab8 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -169,8 +169,30 @@ def test_restify_type_union_operator():\n def test_restify_broken_type_hints():\n     assert restify(BrokenType) == ':py:class:`tests.test_util_typing.BrokenType`'\n \n-\n-def test_stringify():\n+def test_restify_mock_class_bases():\n+    with mock(['mock_package']):\n+        import mock_package\n+        class MockedBaseClass:\n+            pass\n+        \n+        class InheritedClass(MockedBaseClass):\n+            pass\n+\n+        assert restify(MockedBaseClass) == ':py:class:`mock_package.MockedBaseClass`'\n+        assert restify(InheritedClass) == ':py:class:`mock_package.InheritedClass`'\n+\n+def test_stringify_mock_class_bases():\n+    with mock(['mock_package']):\n+        import mock_package\n+        class MockedBaseClass:\n+            pass\n+        \n+        class InheritedClass(MockedBaseClass):\n+            pass\n+\n+        # Ensure that the stringified representation includes the mocked package\n+        assert stringify(MockedBaseClass) == 'mock_package.MockedBaseClass'\n+        assert stringify(InheritedClass) == 'mock_package.InheritedClass'\n     assert stringify(int) == \"int\"\n     assert stringify(str) == \"str\"\n     assert stringify(None) == \"None\"\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..0d4f85f 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,22 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    n = Symbol('n', integer=True)\n+    k = Symbol('k', integer=True)\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+    # Additional test case to further verify using n=3\n+    assert p.subs(n, 3).doit() == S(37)/4\n+    \n+    # Additional test cases for symbolic checks\n+    from sympy import factorial, Q\n+    from sympy.series.q_series import q_pochhammer\n+    expected_expr = simplify((2**(n*(n-1)/2)) * q_pochhammer(-1 / 2, 1 / 2, n))\n+    assert simplify(Product(n + 1 / 2**k, (k, 0, n-1)).doit() - expected_expr) == 0\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +373,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}