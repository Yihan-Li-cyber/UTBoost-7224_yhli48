{
  "astropy__astropy-12907": "",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..f10d6c5 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -132,6 +132,45 @@ class TestHeaderFunctions(FitsTestCase):\n \n         c = fits.Card(\"floatnum\", -467374636747637647347374734737437.0)\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation.\n+\n+        Regression test for float string representation issue.\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        \n+        # Test 1: Original test case with critical float value\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c).strip() == expected_str\n+\n+        # Test 2: Additional float values with varying precision\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c).strip() == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c).strip() == expected_str\n+\n+        # Test 3: Adding a float value exactly at the boundary condition for string truncation\n+        c = fits.Card(k, 0.009124999999999999, com)\n+        expected_str = f\"{k} = 0.009124999999999999 / {com}\"\n+        assert str(c).strip() == expected_str\n+\n+        # Test 4: Float with no significant digits should not cause expansion\n+        c = fits.Card(k, 0.0, com)\n+        expected_str = f\"{k} = 0.0 / {com}\"\n+        assert str(c).strip() == expected_str\n+\n+        # Test 5: Large float value with a comment, ensuring proper formatting\n+        c = fits.Card(k, 1.23E40, com)\n+        expected_str = f\"{k} = 1.23E+40 / {com}\"\n+        assert str(c).strip() == expected_str\n+\n         if str(c) != _pad(\"FLOATNUM= -4.6737463674763E+32\") and str(c) != _pad(\n             \"FLOATNUM= -4.6737463674763E+032\"\n         ):\n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..382ce4b 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,7 +601,22 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_diff_vla_identical(self):\n+        \"\"\"\n+        Test that FITSDiff does not falsely report differences for files\n+        containing variable-length arrays (VLAs) when comparing a file to itself.\n+        \"\"\"\n+        # Creating a FITS file with a VLA\n+        col = Column(name=\"a\", format=\"QD\", array=[[0], [0, 0]])\n+        hdu = BinTableHDU.from_columns([col])\n+        \n+        # Write this to a temporary FITS file\n+        with open(\"diffbug_test_vla.fits\", \"wb\") as temp_fits_file:\n+            hdu.writeto(temp_fits_file, overwrite=True)\n+\n+        # Perform the FITSDiff comparison\n+        diff = FITSDiff(\"diffbug_test_vla.fits\", \"diffbug_test_vla.fits\")\n+        assert diff.identical, \"FITSDiff incorrectly reports differences for identical files with VLAs.\"\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..5b5b64a 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,26 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings_properties():\n+    # We first define a base class with a property that has a docstring\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return \"bar value from Base\"\n \n-def test_set_locale():\n+    # Subclass will inherit from Base\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return \"bar value from Subclass\"\n+\n+    # Check if Subclass's bar method has inherited the __doc__ from Base's bar\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n+    else:\n+        # If Base.bar.__doc__ is None, the test cannot be meaningfully executed\n+        pytest.skip(\"Base.bar.__doc__ is None, skipping inheritance test\")\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..b0660a6 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -171,8 +171,29 @@ def test_multiple_solidus():\n     with pytest.raises(ValueError):\n         u.Unit(\"m/s/kg\", format=\"vounit\")\n \n+import pytest\n+from astropy import units as u\n+\n+\n+def test_unit_comparison_with_none():\n+    unit = u.Unit('asdf', parse_strict='silent')\n+\n+    # Test if comparing an UnrecognizedUnit with None returns False\n+    assert (unit == None) is False  # noqa\n+\n+    # Test if comparing None with an UnrecognizedUnit returns False\n+    assert (None == unit) is False\n+\n+    # Test if comparing an UnrecognizedUnit with a recognized unit returns False\n+    assert unit != u.m\n+\n+    # Test if an UnrecognizedUnit is not in a collection containing None\n+    assert unit not in (None, u.m)\n \n-def test_unknown_unit3():\n+    # Additional tests to ensure the method works as expected\n+    assert not unit == u.m\n+    assert unit != None  # noqa\n+    assert unit == u.Unit('asdf', parse_strict='silent')\n     unit = u.Unit(\"FOO\", parse_strict='silent')\n     assert isinstance(unit, u.UnrecognizedUnit)\n     assert unit.name == \"FOO\"\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..92081d2 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -67,9 +67,18 @@ def test_minversion():\n     from types import ModuleType\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n-    good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n+    good_versions = ['0.12', '0.12.1', '0.12.0.dev', '0.12dev']\n     bad_versions = ['1', '1.2rc1']\n     for version in good_versions:\n         assert minversion(test_module, version)\n-    for version in bad_versions:\n-        assert not minversion(test_module, version)\n+    \n+    # Additional test cases for minversion function\n+    test_module_partial_version = ModuleType(str(\"test_module_partial_version\"))\n+    test_module_partial_version.__version__ = '1.14.3'\n+    partial_good_versions = ['1.14dev']\n+    partial_bad_versions = ['1.15dev', '1.15']\n+    \n+    for version in partial_good_versions:\n+        assert minversion(test_module_partial_version, version)\n+    for version in partial_bad_versions:\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..ea6d5c5 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -34,6 +34,9 @@ except ImportError:\n \n \"\"\" The Quantity class will represent a number + unit + uncertainty \"\"\"\n \n+import numpy as np\n+import pytest\n+from astropy import units as u\n \n class TestQuantityCreation:\n \n@@ -138,11 +141,13 @@ class TestQuantityCreation:\n         assert q2.value == float(q1.value)\n         assert q2.unit == q1.unit\n \n-        # but we should preserve float32\n+        # but we should preserve float32 or even float16\n         a3 = np.array([1., 2.], dtype=np.float32)\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n-        # items stored as objects by numpy should be converted to float\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n         # by default\n         q4 = u.Quantity(decimal.Decimal('10.25'), u.m)\n         assert q4.dtype == float\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..a4b8d78 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,6 +226,15 @@ TEST_DATA = [\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n \n     (BaseValidator(True), True, None),\n+\n+    # New test cases for URLValidator to ensure invalid characters in username and password are rejected\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),  # '@' in username\n+    (URLValidator(), 'http://foo:bar@example.com', ValidationError),  # '@' in password\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),  # both ':' and '@' in password\n+    (URLValidator(), 'http://foo:bar@example.com', ValidationError),  # ':' in password, '@' in username\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),  # '/' in password\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),  # '@' in query\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),  # many invalid encoded\n     (BaseValidator(True), False, ValidationError),\n \n     (RegexValidator(), '', None),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..f71f356 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -12,6 +13,7 @@ from django.test import TestCase\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n+from django.db.models.expressions import Case, When\n from .models import Author, Book, Publisher, Store\n \n \n@@ -395,7 +397,32 @@ class AggregateTestCase(TestCase):\n         sql = ctx.captured_queries[0]['sql']\n         self.assertIn('SELECT COUNT(*) ', sql)\n \n-    def test_non_grouped_annotation_not_in_group_by(self):\n+    def test_count_distinct_expression(self):\n+        # Test Count with distinct=True on a Case expression\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_with_multiple_conditions(self):\n+        # Additional test with multiple conditions in the Case\n+        aggs = Book.objects.aggregate(\n+            high_ratings=Count(Case(\n+                When(pages__gt=300, rating__gt=3, then='rating'),\n+            ), distinct=True),\n+        )\n+        # Assuming expected count based on test data\n+        self.assertEqual(aggs['high_ratings'], 2)\n+\n+    def test_count_distinct_expression_with_no_matches(self):\n+        # Case where no records match the condition\n+        aggs = Book.objects.aggregate(\n+            no_matches=Count(Case(\n+                When(pages__lt=0, then='rating'),\n+            ), distinct=True),\n+        )\n+        # Expecting zero as no books have less than 0 pages\n+        self.assertEqual(aggs['no_matches'], 0)\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n         excluded from the group by clause.\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..d94c68c 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1100,6 +1100,9 @@ class OverrideSettingsTests(SimpleTestCase):\n         django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertIsNone(default_storage.file_permissions_mode)\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=0o644):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..b1655b8 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,7 +1,9 @@\n+\n import os\n import signal\n from unittest import mock\n \n+import subprocess\n from django.db.backends.postgresql.client import DatabaseClient\n from django.test import SimpleTestCase\n \n@@ -101,7 +103,31 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_subprocess_run_with_pgpassword(self):\n+        \"\"\"Test subprocess.run is called with PGPASSWORD in environment.\"\"\"\n+        password = 'somepassword'\n+        env_var_name = 'PGPASSWORD'\n+\n+        def _mock_subprocess_run(args, env, *subprocess_kwargs):\n+            self.subprocess_args = args\n+            self.pgpassword = env.get(env_var_name)\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'password': password,\n+                'host': 'somehost',\n+                'port': '444',\n+            })\n+        \n+        self.assertEqual(self.pgpassword, password)\n+        self.assertIn('PGPASSFILE', os.environ)\n+        self.assertEqual(\n+            self.subprocess_args,\n+            ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname']\n+        )\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_call(*args):\n             handler = signal.getsignal(signal.SIGINT)\n@@ -113,4 +139,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..a315ac6 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -2,9 +2,13 @@ from django.apps.registry import apps\n from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n+from django.apps import apps\n+from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n+from django.db import migrations, models\n+from django.test import TransactionTestCase, override_settings\n \n \n @override_settings(\n@@ -55,7 +59,14 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_content_type_rename_conflict(self):\n+    def test_existing_content_type_rename_on_default_database(self):\n+        ContentType.objects.create(app_label='contenttypes_tests', model='bar')\n+        call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n+        self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='bar').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedbar').exists())\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='bar').exists())\n+        self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedbar').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         ContentType.objects.create(app_label='contenttypes_tests', model='renamedfoo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0)\n@@ -63,4 +74,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..0822ed8 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,41 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inlines_hook(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = [AlternateInline, MediaInline]\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return [self.inlines[0]]\n+                    elif request.name == 'media':\n+                        return [self.inlines[1]]\n+                return []\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+        \n+        # Test default behavior with no request name\n+        request = type('Request', (object,), {})()  # mock request object\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+        # Test with request name 'alternate'\n+        request.name = 'alternate'\n+        self.assertEqual(ma.get_inlines(request, None), [AlternateInline])\n+        self.assertEqual(len(ma.get_inline_instances(request)), 1)\n+        self.assertIsInstance(ma.get_inline_instances(request)[0], AlternateInline)\n+\n+        # Test with request name 'media'\n+        request.name = 'media'\n+        self.assertEqual(ma.get_inlines(request, None), [MediaInline])\n+        self.assertEqual(len(ma.get_inline_instances(request)), 1)\n+        self.assertIsInstance(ma.get_inline_instances(request)[0], MediaInline)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..bc58438 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,7 +238,32 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            \"en\\u2013dash\", \"trailingnewline\\n\",\n         ]\n+        \n+    def test_unicode_validator_trailing_newline(self):\n+        valid_usernames = ['simpleuser', 'validname123']\n+        invalid_usernames = ['username\\n', 'user\\nname', 'name\\n ']\n+        v = validators.UnicodeUsernameValidator()\n+        for valid in valid_usernames:\n+            with self.subTest(valid=valid):\n+                v(valid)\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator_trailing_newline(self):\n+        valid_usernames = ['glenn', 'no_newline']\n+        invalid_usernames = ['glenn\\n', 'new\\nline', 'no\\n']\n+        v = validators.ASCIIUsernameValidator()\n+        for valid in valid_usernames:\n+            with self.subTest(valid=valid):\n+                v(valid)\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +283,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..1466aa3 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -10,12 +10,35 @@ from .utils import ROOT, TEMPLATE_DIR\n OTHER_DIR = os.path.join(ROOT, 'other_templates')\n \n \n+import os\n+\n+from django.template import Context, Template\n+from django.template.engine import Engine\n+from django.test import SimpleTestCase, override_settings\n+\n+from .utils import ROOT, TEMPLATE_DIR\n+\n+OTHER_DIR = os.path.join(ROOT, 'other_templates')\n+\n+\n class RenderToStringTest(SimpleTestCase):\n \n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n-    def test_basic_context(self):\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n         self.assertEqual(\n             self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n             'obj:test\\n',\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..d345ac8 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -406,6 +406,32 @@ class HttpResponseTests(unittest.TestCase):\n         r.write('!')\n         self.assertEqual(r.content, b'helloworld!')\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_memoryview_with_text(self):\n+        # Test memoryview with text content\n+        r = HttpResponse(memoryview(b\"text content\"))\n+        self.assertEqual(r.content, b'text content')\n+\n+    def test_memoryview_with_long_bytes(self):\n+        # Test memoryview with a larger bytes object\n+        large_bytes = bytes(range(256)) * 4  # 1024 bytes of data\n+        r = HttpResponse(memoryview(large_bytes))\n+        self.assertEqual(r.content, large_bytes)\n+\n+    def test_empty_memoryview(self):\n+        # Test an empty memoryview\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_partial_memoryview(self):\n+        # Test a partial slice of memoryview\n+        mv = memoryview(b'some random bytes')\n+        r = HttpResponse(mv[5:11])  # 'random'\n+        self.assertEqual(r.content, b'random')\n+\n     def test_iterator_isnt_rewound(self):\n         # Regression test for #13222\n         r = HttpResponse('abc')\n",
  "django__django-11141": "",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..dbcd68c 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -681,8 +681,27 @@ class TestInlinePermissions(TestCase):\n             html=True\n         )\n         self.assertContains(response, 'id=\"id_Author_books-0-DELETE\"')\n+    def test_inline_add_m2m_view_only_perm(self):\n+        # Give the user view permission on books\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only inlines should not allow adding\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(response, '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" id=\"id_Author_books-TOTAL_FORMS\">', html=True)\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n \n-    def test_inline_change_fk_add_perm(self):\n+    def test_inline_change_m2m_view_only_perm(self):\n+        # Give the user view permission on books\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines should not allow changing\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(response, '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" id=\"id_Author_books-TOTAL_FORMS\">', html=True)\n+        self.assertContains(response, '<p>%s</p>' % 'The inline Book')\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+        self.assertNotContains(response, '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">', html=True)\n         permission = Permission.objects.get(codename='add_inner2', content_type=self.inner_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.holder_change_url)\n",
  "django__django-11163": "",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..39c2b0f 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,7 +1,9 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n+from django.db.models.deletion import Collector\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n from .models import (\n@@ -471,6 +473,17 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n+    def test_delete_instance_no_dependencies_clears_pk(self):\n+        # Create a User instance\n+        u = User.objects.create()\n+        # Setup the Collector to check if user can be fast-deleted\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        # Delete the user instance\n+        u.delete()\n+        # Assert that the user's PK is set to None after deletion\n+        self.assertIsNone(u.pk)\n+\n     def test_fast_delete_joined_qs(self):\n         a = Avatar.objects.create(desc='a')\n         User.objects.create(avatar=a)\n@@ -481,6 +494,17 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n+    def test_delete_instance_no_dependencies_clears_pk(self):\n+        # Create a User instance\n+        u = User.objects.create()\n+        # Setup the Collector to check if user can be fast-deleted\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        # Delete the user instance\n+        u.delete()\n+        # Assert that the user's PK is set to None after deletion\n+        self.assertIsNone(u.pk)\n+\n     def test_fast_delete_inheritance(self):\n         c = Child.objects.create()\n         p = Parent.objects.create()\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..e379a1c 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,12 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # Test for extremely small decimals with decimal_pos specified\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('0.{}01234'.format('0' * 297), 3, '0.000'),  # Additional case\n+            ('1e-20', 5, '0.00000'),\n+            ('1e-7', 1, '0.0'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..d4765ca 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,6 @@\n import os\n+import os\n+\n import signal\n import subprocess\n from unittest import mock\n@@ -81,7 +83,32 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+\n+    def test_ssl_certificate(self):\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'host': 'somehost',\n+            'port': '444',\n+            'sslmode': 'verify-ca',\n+            'sslrootcert': 'root.crt',\n+            'sslcert': 'client.crt',\n+            'sslkey': 'client.key',\n+        }\n+        expected_args = [\n+            'psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'\n+        ]\n+        expected_env = {\n+            'PGSSLMODE': 'verify-ca',\n+            'PGSSLROOTCERT': 'root.crt',\n+            'PGSSLCERT': 'client.crt',\n+            'PGSSLKEY': 'client.key',\n+        }\n+        with mock.patch.dict(os.environ, {}, clear=True):\n+            actual_args, _ = self._run_it(dbinfo)\n+            self.assertEqual(actual_args, expected_args)\n+            for key, value in expected_env.items():\n+                self.assertEqual(os.environ.get(key), value)\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..0422a91 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -82,6 +82,14 @@ class FilteredRelationTests(TestCase):\n                     (self.book4, self.author1),\n                 ], lambda x: (x, x.author_join))\n \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n     def test_without_join(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..ce2eaa1 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -29,6 +29,20 @@ class TestUtilsHtml(SimpleTestCase):\n             ('\"', '&quot;'),\n             (\"'\", '&#39;'),\n         )\n+        # Additional test to verify backward compatibility with html.escape()\n+        html_escape_items = (\n+            ('&', '&amp;'),\n+            ('<', '&lt;'),\n+            ('>', '&gt;'),\n+            ('\"', '&quot;'),\n+            (\"'\", '&#x27;'),  # Testing the previous behavior instead of 'html.escape' output\n+        )\n+        for value, output in html_escape_items:\n+            with self.subTest(value=value, output=output):\n+                for pattern in patterns:\n+                    with self.subTest(value=value, output=output, pattern=pattern):\n+                        self.check_output(escape, pattern % value, pattern % output)\n+                        self.check_output(escape, lazystr(pattern % value), pattern % output)\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n         for value, output in items:\n",
  "django__django-11292": "",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..47ae18a 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,45 @@\n+\n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default__root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.dynamic_urls')\n+    def test_resolver_cache_with_different_root_urlconf(self):\n+        # Ensure that when ROOT_URLCONF changes, get_resolver returns a new resolver\n+        first_resolver = get_resolver()\n+        self.assertIs(first_resolver, get_resolver('urlpatterns.dynamic_urls'))\n+\n+        # Override ROOT_URLCONF setting to enforce cache invalidation\n+        with override_settings(ROOT_URLCONF='urlpatterns.path_urls'):\n+            second_resolver = get_resolver()\n+            self.assertIs(second_resolver, get_resolver('urlpatterns.path_urls'))\n+            # Ensure the two resolvers are not the same\n+            self.assertIsNot(first_resolver, second_resolver)\n+            \n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_consistency_across_requests(self):\n+        # Simulate the scenario of the request handling process multiple times\n+        resolver_before_request = get_resolver()\n+        self.assertIs(resolver_before_request, get_resolver('urlpatterns.path_urls'))\n+\n+        # Change ROOT_URLCONF to simulate a process before handling a request\n+        with override_settings(ROOT_URLCONF='urlpatterns.dynamic_urls'):\n+            resolver_during_request = get_resolver()\n+            self.assertIs(resolver_during_request, get_resolver('urlpatterns.dynamic_urls'))\n+            self.assertIsNot(resolver_before_request, resolver_during_request)\n+\n+        # Ensure that going back to initial URLCONF gives the initial resolver\n+        resolver_after_request = get_resolver()\n+        self.assertIs(resolver_after_request, resolver_before_request)\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -12,4 +52,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..4593918 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -250,8 +250,27 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n         self.user.is_active = False\n         self.user.save()\n         self.assertIsNone(authenticate(**self.user_credentials))\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_with_none_username_and_password(self):\n+        CountingMD5PasswordHasher.calls = 0\n \n-    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithoutIsActiveField')\n+        # Test with both username and password as None\n+        with self.subTest(credentials={'username': None, 'password': None}):\n+            with self.assertNumQueries(0):\n+                authenticate(username=None, password=None)\n+            self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+        # Test with None username\n+        with self.subTest(credentials={'username': None, 'password': 'test'}):\n+            with self.assertNumQueries(0):\n+                authenticate(username=None, password='test')\n+            self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+        # Test with None password\n+        with self.subTest(credentials={'username': 'test', 'password': None}):\n+            with self.assertNumQueries(0):\n+                authenticate(username='test', password=None)\n+            self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n     def test_authenticate_user_without_is_active_field(self):\n         \"\"\"\n         A custom user without an `is_active` field is allowed to authenticate.\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..7980b0a 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,6 +124,19 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    def test_union_values_list_change_columns(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        # Create a base queryset\n+        qs1 = ReservedName.objects.all()\n+\n+        # Test for proper column extraction\n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n+\n+        # Now test with two columns\n+        reserved_name_order = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name_order, ('a', 2))\n+\n     def test_union_with_two_annotated_values_list(self):\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..522f6a2 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -10,7 +10,7 @@ import threading\n from email import charset, message_from_binary_file, message_from_bytes\n from email.header import Header\n from email.mime.text import MIMEText\n-from email.utils import parseaddr\n+from unittest.mock import patch\n from io import StringIO\n from smtplib import SMTP, SMTPAuthenticationError, SMTPException\n from ssl import SSLError\n@@ -365,7 +365,27 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n \n-    def test_encoding(self):\n+    @patch('django.core.mail.message.DNS_NAME', '\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self):\n+        \"\"\"\n+        Test that the email system handles non-ASCII DNS names and non-unicode \n+        email encodings correctly by converting the domain to punycode.\n+        \"\"\"\n+        # This test simulates a non-ASCII DNS name using patch and checks \n+        # that the Message-ID header is right.\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@xn--p8s937b>', message['Message-ID'])\n+    \n+    @patch('django.core.mail.message.DNS_NAME', '\u6b63\u5b97')\n+    def test_non_ascii_dns_default_encoding(self):\n+        \"\"\"\n+        Test handling of non-ASCII DNS names with default encoding.\n+        \"\"\"\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        message = email.message()\n+        self.assertIn('@xn--8ws00zhy>', message['Message-ID'])\n         \"\"\"\n         Regression for #12791 - Encode body correctly with other encodings\n         than utf-8\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..431814e 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n@@ -509,8 +510,39 @@ class ListDisplayTests(CheckTestCase):\n \n         self.assertIsValid(TestModelAdmin, ValidationTestModel)\n \n+    def test_field_accessible_only_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n \n-class ListDisplayLinksCheckTests(CheckTestCase):\n+    def test_inaccessible_field_not_in_list_display(self):\n+        class TestModel(Model):\n+            field = Field()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel, (\n+                \"The value of 'list_display[0]' refers to 'non_existent_field', \"\n+                \"which is not a callable, an attribute of 'TestModelAdmin', \"\n+                \"or an attribute or method on 'app_label.TestModel'.\"\n+            ), 'admin.E108'\n+        )\n \n     def test_not_iterable(self):\n         class TestModelAdmin(ModelAdmin):\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..9609563 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,8 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n+from datetime import datetime\n \n \n class OrderingTests(TestCase):\n@@ -462,6 +463,42 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n+    def test_order_by_parent_model_with_ordering_expression(self):\n+        \"\"\"\n+        Test that ordering by a parent model works correctly when using\n+        expressions in Meta.ordering.\n+        \"\"\"\n+        # Create instances of ChildArticle with varying data\n+        ca1 = ChildArticle.objects.create(\n+            headline='h1',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(\n+            headline='h1',\n+            pub_date=datetime(2005, 7, 28),\n+            author=self.author_2,\n+        )\n+        ca5 = ChildArticle.objects.create(\n+            headline='h4',\n+            pub_date=datetime(2005, 7, 29),\n+        )\n+        \n+        # Verify that ordering by parent model's primary key works as expected\n+        articles = ChildArticle.objects.order_by('article_ptr_id')\n+        self.assertSequenceEqual(articles, [ca1, ca2, ca3, ca4, ca5])\n+\n+    # Existing test follows\n     def test_deprecated_values_annotate(self):\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..e3baa15 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -391,7 +391,25 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_avg_distinct(self):\n+        # Assume we have a Book model with a field 'rating'\n+        books = Book.objects.create(title='Book 1', rating=4.5)\n+        books = Book.objects.create(title='Book 2', rating=4.0)\n+        books = Book.objects.create(title='Book 3', rating=4.5)\n+        books = Book.objects.create(title='Book 4', rating=3.5)\n+\n+        result = Book.objects.aggregate(avg_rating=Avg('rating', distinct=True))\n+        self.assertEqual(result['avg_rating'], 4.0)  # Distinct values: [4.5, 4.0, 3.5]\n+\n+    def test_sum_distinct(self):\n+        # Assume we have a Book model with a field 'price'\n+        books = Book.objects.create(title='Book 1', price=5.0)\n+        books = Book.objects.create(title='Book 2', price=10.0)\n+        books = Book.objects.create(title='Book 3', price=5.0)\n+        books = Book.objects.create(title='Book 4', price=1.0)\n+\n+        result = Book.objects.aggregate(total_price=Sum('price', distinct=True))\n+        self.assertEqual(result['total_price'], 16.0)  # Distinct values: [5.0, 10.0, 1.0]\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..af0c120 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -35,6 +35,9 @@ class DeconstructibleObject:\n         )\n \n \n+from django.db import models\n+import uuid\n+\n class AutodetectorTests(TestCase):\n     \"\"\"\n     Tests the migration autodetector.\n@@ -2399,4 +2402,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..f9465f5 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -224,7 +224,33 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n-    def test_subparser_dest_required_args(self):\n+    def test_mutually_exclusive_group_kwargs_case(self):\n+        out = StringIO()\n+        # Test with `foo_id` passed as a keyword argument\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        # Test with `foo_name` passed as a keyword argument\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Test without any required mutually exclusive options passed\n+        out = StringIO()\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command('mutually_exclusive_required', stdout=out)\n+\n+    def test_mutually_exclusive_group_args_case(self):\n+        out = StringIO()\n+        # Test with `--foo-id` passed as an argument\n+        call_command('mutually_exclusive_required', '--foo-id=1', stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        # Test with `--foo-name` passed as an argument\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', '--foo-name=foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..17e7b49 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,16 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_maxlength_attribute_default_user(self):\n+        form = AuthenticationForm()\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n+\n+    def test_username_field_maxlength_custom_max_length(self):\n+        class CustomMaxLengthAuthenticationForm(AuthenticationForm):\n+            username = CharField(max_length=100)\n+\n+        form = CustomMaxLengthAuthenticationForm()\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 100)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..b64ed16 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n from datetime import datetime\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -312,7 +314,32 @@ class HttpDateProcessingTests(unittest.TestCase):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n \n-    def test_parsing_rfc1123(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        # Current date times to use as \"now\"\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+        # Test cases\n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Monday, 01-Mar-49 08:49:37 GMT', datetime(2049, 3, 1, 8, 49, 37)),\n+            (utcnow_1, 'Monday, 01-Mar-50 08:49:37 GMT', datetime(1950, 3, 1, 8, 49, 37)),\n+            (utcnow_2, 'Saturday, 29-Feb-20 08:49:37 GMT', datetime(2020, 2, 29, 8, 49, 37)), # leap year in 2020\n+        )\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..e54c0ab 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,6 +3672,20 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n+    def test_field_deep_copy_error_messages(self):\n+        import copy\n+        from django.forms import CharField\n+\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n     def test_field_named_data(self):\n         class DataForm(Form):\n             data = CharField(max_length=10)\n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..1ef0ecf 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n@@ -204,8 +206,17 @@ class BulkCreateTests(TestCase):\n     def test_empty_model(self):\n         NoFields.objects.bulk_create([NoFields() for i in range(2)])\n         self.assertEqual(NoFields.objects.count(), 2)\n-\n+    \n     @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        # Calculate the maximum allowed batch size for the given fields and objects\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        # Ensure that the number of queries corresponds to the ceiling division of object count\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            # Attempt to exceed the max_batch_size by passing a larger batch_size\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n     def test_explicit_batch_size_efficiency(self):\n         objs = [TwoFields(f1=i, f2=i) for i in range(0, 100)]\n         with self.assertNumQueries(2):\n@@ -213,8 +224,17 @@ class BulkCreateTests(TestCase):\n         TwoFields.objects.all().delete()\n         with self.assertNumQueries(1):\n             TwoFields.objects.bulk_create(objs, len(objs))\n-\n+    \n     @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        # Calculate the maximum allowed batch size for the given fields and objects\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        # Ensure that the number of queries corresponds to the ceiling division of object count\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            # Attempt to exceed the max_batch_size by passing a larger batch_size\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n     def test_bulk_insert_expressions(self):\n         Restaurant.objects.bulk_create([\n             Restaurant(name=\"Sam's Shake Shack\"),\n",
  "django__django-11964": "diff --git a/tests/model_fields/test_charfield.py b/tests/model_fields/test_charfield.py\nindex c6162e5..1d944be 100644\n--- a/tests/model_fields/test_charfield.py\n+++ b/tests/model_fields/test_charfield.py\n@@ -1,3 +1,4 @@\n+\n from unittest import skipIf\n \n from django.core.exceptions import ValidationError\n@@ -5,6 +6,36 @@ from django.db import connection, models\n from django.test import SimpleTestCase, TestCase\n \n from .models import Post\n+from django.utils.translation import gettext_lazy as _\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class EnumTest(TestCase):\n+    \n+    def setUp(self) -> None:\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        \"\"\"Test if the created object returns the string value for the TextChoices.\"\"\"\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_retrieved_object_is_str(self):\n+        \"\"\"Test if the retrieved object returns the string value for the TextChoices.\"\"\"\n+        my_object = MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_str_representation(self):\n+        \"\"\"Verify that str on the choice returns the correct string value.\"\"\"\n+        choice_instance = MyChoice.FIRST_CHOICE\n+        self.assertEqual(str(choice_instance), \"first\")\n \n \n class TestCharField(TestCase):\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..e99edef 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,9 +148,20 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+from django.db import models\n+from django.test import SimpleTestCase\n+\n class GetFieldDisplayTests(SimpleTestCase):\n \n-    def test_choices_and_field_display(self):\n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n         values.\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..5866ff7 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,12 +9,18 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db import connection\n+from django.db.models import Index\n+from django.test import TestCase\n from django.test.utils import override_settings\n from django.utils import timezone\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n+from django.db import connection\n+from django.db.models import Index\n+from django.test import TestCase\n \n \n class SchemaIndexesTests(TestCase):\n@@ -32,6 +38,76 @@ class SchemaIndexesTests(TestCase):\n             column_names=(\"c1\",),\n             suffix=\"123\",\n         )\n+\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_column_with_empty_string_suffix(self):\n+        # Ensures that if col_suffixes contains an empty string, it does not\n+        # introduce additional whitespace issues in the output.\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_index_with_multiple_columns_and_opclasses(self):\n+        # Tests an index with multiple columns and opclasses to ensure proper whitespace.\n+        index = Index(\n+            fields=['headline', '-pub_date'],\n+            name='multi_col_idx',\n+            opclasses=['text_pattern_ops', 'int4_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops, %s int4_ops DESC)' % (\n+                    editor.quote_name('headline'), \n+                    editor.quote_name('pub_date')\n+                ),\n+                str(index.create_sql(Article, editor)),\n+            )\n         self.assertEqual(index_name, \"indexes_article_c1_a52bd80b123\")\n \n     def test_index_name(self):\n@@ -48,6 +124,76 @@ class SchemaIndexesTests(TestCase):\n             column_names=('c1', 'c2', long_name),\n             suffix='ix',\n         )\n+\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_column_with_empty_string_suffix(self):\n+        # Ensures that if col_suffixes contains an empty string, it does not\n+        # introduce additional whitespace issues in the output.\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_index_with_multiple_columns_and_opclasses(self):\n+        # Tests an index with multiple columns and opclasses to ensure proper whitespace.\n+        index = Index(\n+            fields=['headline', '-pub_date'],\n+            name='multi_col_idx',\n+            opclasses=['text_pattern_ops', 'int4_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops, %s int4_ops DESC)' % (\n+                    editor.quote_name('headline'), \n+                    editor.quote_name('pub_date')\n+                ),\n+                str(index.create_sql(Article, editor)),\n+            )\n         expected = {\n             'mysql': 'indexes_article_c1_c2_looooooooooooooooooo_255179b2ix',\n             'oracle': 'indexes_a_c1_c2_loo_255179b2ix',\n@@ -70,6 +216,76 @@ class SchemaIndexesTests(TestCase):\n             index_sql[0]\n         )\n \n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_column_with_empty_string_suffix(self):\n+        # Ensures that if col_suffixes contains an empty string, it does not\n+        # introduce additional whitespace issues in the output.\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_index_with_multiple_columns_and_opclasses(self):\n+        # Tests an index with multiple columns and opclasses to ensure proper whitespace.\n+        index = Index(\n+            fields=['headline', '-pub_date'],\n+            name='multi_col_idx',\n+            opclasses=['text_pattern_ops', 'int4_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops, %s int4_ops DESC)' % (\n+                    editor.quote_name('headline'), \n+                    editor.quote_name('pub_date')\n+                ),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n     def test_index_together_single_list(self):\n         # Test for using index_together with a single list (#22172)\n         index_sql = connection.schema_editor()._model_indexes_sql(IndexTogetherSingleList)\n@@ -86,6 +302,76 @@ class SchemaIndexesNotPostgreSQLTests(TransactionTestCase):\n             fields=['headline'],\n             opclasses=['varchar_pattern_ops'],\n         )\n+\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_column_with_empty_string_suffix(self):\n+        # Ensures that if col_suffixes contains an empty string, it does not\n+        # introduce additional whitespace issues in the output.\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_index_with_multiple_columns_and_opclasses(self):\n+        # Tests an index with multiple columns and opclasses to ensure proper whitespace.\n+        index = Index(\n+            fields=['headline', '-pub_date'],\n+            name='multi_col_idx',\n+            opclasses=['text_pattern_ops', 'int4_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops, %s int4_ops DESC)' % (\n+                    editor.quote_name('headline'), \n+                    editor.quote_name('pub_date')\n+                ),\n+                str(index.create_sql(Article, editor)),\n+            )\n         with connection.schema_editor() as editor:\n             # This would error if opclasses weren't ignored.\n             editor.add_index(IndexedArticle2, index)\n@@ -236,6 +522,76 @@ class SchemaIndexesMySQLTests(TransactionTestCase):\n         storage = connection.introspection.get_storage_engine(\n             connection.cursor(), ArticleTranslation._meta.db_table\n         )\n+\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_column_with_empty_string_suffix(self):\n+        # Ensures that if col_suffixes contains an empty string, it does not\n+        # introduce additional whitespace issues in the output.\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_index_with_multiple_columns_and_opclasses(self):\n+        # Tests an index with multiple columns and opclasses to ensure proper whitespace.\n+        index = Index(\n+            fields=['headline', '-pub_date'],\n+            name='multi_col_idx',\n+            opclasses=['text_pattern_ops', 'int4_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops, %s int4_ops DESC)' % (\n+                    editor.quote_name('headline'), \n+                    editor.quote_name('pub_date')\n+                ),\n+                str(index.create_sql(Article, editor)),\n+            )\n         if storage != \"InnoDB\":\n             self.skip(\"This test only applies to the InnoDB storage engine\")\n         index_sql = [str(statement) for statement in connection.schema_editor()._model_indexes_sql(ArticleTranslation)]\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..d83746c 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -11,6 +12,7 @@ from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n \n+from django.db.models import Func\n from .models import Author, Item, ObjectC, Ranking\n \n \n@@ -107,7 +109,33 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_exact_query_with_list(self):\n+        query = Query(Item)\n+        # Test case ensures that list input for a query does not get converted to a tuple.\n+        where = query.build_where(Q(name=['a', 'b', 'c']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b', 'c'])\n+\n+    def test_exact_query_with_tuple(self):\n+        query = Query(Item)\n+        # This test checks behavior when a tuple is used.\n+        where = query.build_where(Q(name=('x', 'y', 'z')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('x', 'y', 'z'))\n+\n+    def test_exact_query_with_pickled_field(self):\n+        class MockPickledField(Func):\n+            def as_sql(self, compiler, connection):\n+                return '%s', [self.source]\n+\n+        query = Query(Item)\n+        # This test simulates a PickledField that compares with a list.\n+        where = query.build_where(Q(name=MockPickledField(['pickled', 'data'])))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs.source, ['pickled', 'data'])\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..7864d61 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -834,6 +834,8 @@ class ChangeListTests(TestCase):\n         superuser = self._create_superuser('superuser')\n         self.client.force_login(superuser)\n         changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        import re\n+        from django.utils.regex_helper import _lazy_re_compile\n         m = SwallowAdmin(Swallow, custom_site)\n         request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n@@ -844,7 +846,27 @@ class ChangeListTests(TestCase):\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 2)\n \n-    def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n+    def test_get_list_editable_queryset_with_special_regex_prefix(self):\n+        a = Swallow.objects.create(origin='Swallow C', load=5, speed=3)\n+        Swallow.objects.create(origin='Swallow D', load=3, speed=4)\n+        data = {\n+            'special*.-TOTAL_FORMS': '2',\n+            'special*.-INITIAL_FORMS': '2',\n+            'special*.-MIN_NUM_FORMS': '0',\n+            'special*.-MAX_NUM_FORMS': '1000',\n+            'special*.-0-uuid': str(a.pk),\n+            'special*.-0-load': '15',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        import re\n+        from django.utils.regex_helper import _lazy_re_compile\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='special*.')\n+        self.assertEqual(queryset.count(), 1)\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n         Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/forms_tests/widget_tests/test_checkboxinput.py b/tests/forms_tests/widget_tests/test_checkboxinput.py\nindex 5c5e45d..5546fd9 100644\n--- a/tests/forms_tests/widget_tests/test_checkboxinput.py\n+++ b/tests/forms_tests/widget_tests/test_checkboxinput.py\n@@ -82,10 +82,28 @@ class CheckboxInputTest(WidgetTest):\n         \"\"\"\n         self.assertFalse(self.widget.value_from_datadict({}, {}, 'testing'))\n \n+    def test_get_context_does_not_mutate_attrs_further(self):\n+        widget = forms.CheckboxInput()\n+        # Initialize attrs without 'checked'\n+        attrs = {}\n+        context = widget.get_context('name', True, attrs)\n+        self.assertIn('checked', context['widget']['attrs'])\n+        # The original attrs should remain unchanged\n+        self.assertNotIn('checked', attrs)\n+\n+    def test_no_leak_between_widgets(self):\n+        attrs = {}\n+        widget1 = forms.CheckboxInput()\n+        widget2 = forms.CheckboxInput()\n+        widget1.get_context('name', True, attrs)\n+        self.assertIn('checked', widget1.get_context('name', True, {}).get('widget', {}).get('attrs', {}))\n+        # Verify widget2 does not inherit 'checked' from widget1\n+        self.assertNotIn('checked', widget2.get_context('name', False, {}).get('widget', {}).get('attrs', {}))\n+\n     def test_value_from_datadict_string_int(self):\n         value = self.widget.value_from_datadict({'testing': '0'}, {}, 'testing')\n         self.assertIs(value, True)\n \n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({'field': 'value'}, {}, 'field'), False)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n+        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..ea21e30 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -260,6 +260,8 @@ class UUIDData(models.Model):\n class FKToUUID(models.Model):\n     data = models.ForeignKey(UUIDData, models.CASCADE)\n \n+class UUIDDefaultData(models.Model):\n+    data = models.UUIDField(primary_key=True, default=uuid.uuid4)\n \n # Tests for handling fields with pre_save functions, or\n # models with save functions that modify data\n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..8bcccea 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -77,8 +77,28 @@ class SimpleTagTests(TagTestCase):\n                 'simple_only_unlimited_args - Expected result: 37, 42, 56, 89'),\n             ('{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n+            (\"'inclusion_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 kwarg=42 %}'),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}',\n+                'inclusion_keyword_only_default - Expected result: 37'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'),\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n+            (\"'simple_keyword_only_param' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_param kwarg=42 kwarg=37 %}'),\n         ]\n \n+        # Additional test cases for keyword-only arguments issue\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        # Additional test cases for inclusion tags with keyword-only arguments issue\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n@@ -101,8 +121,28 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            (\"'inclusion_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 kwarg=42 %}'),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}',\n+                'inclusion_keyword_only_default - Expected result: 37'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'),\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n+            (\"'simple_keyword_only_param' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_param kwarg=42 kwarg=37 %}'),\n         ]\n \n+        # Additional test cases for keyword-only arguments issue\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        # Additional test cases for inclusion tags with keyword-only arguments issue\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n         for entry in errors:\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(entry[1])\n@@ -190,8 +230,28 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_only_unlimited_args - Expected result: 37, 42, 56, 89\\n'),\n             ('{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n+            (\"'inclusion_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 kwarg=42 %}'),\n+            ('{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 %}',\n+                'inclusion_keyword_only_default - Expected result: 37'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+                'simple_keyword_only_default - Expected result: 37'),\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n+            (\"'simple_keyword_only_param' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_param kwarg=42 kwarg=37 %}'),\n         ]\n \n+        # Additional test cases for keyword-only arguments issue\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+        # Additional test cases for inclusion tags with keyword-only arguments issue\n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n",
  "django__django-12276": "",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..8a01c27 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -143,7 +144,18 @@ class ChoicesTests(SimpleTestCase):\n                 APPLE = 1, 'Apple'\n                 PINEAPPLE = 1, 'Pineapple'\n \n-    def test_str(self):\n+    from django.template import Context, Template\n+\n+    def test_enum_in_templates(self):\n+        template = Template('{% if student.year_in_school == year.FRESHMAN %}Freshman{% endif %}')\n+        YearInSchool = type('YearInSchool', (models.TextChoices,), {\n+            'FRESHMAN': 'FR', 'FRESHMAN_LABEL': 'Freshman',\n+            'do_not_call_in_templates': True\n+        })\n+        context = Context({'student': type('Student', (object,), {'year_in_school': YearInSchool.FRESHMAN}),\n+                           'year': YearInSchool})\n+        output = template.render(context)\n+        self.assertEqual(output, 'Freshman')\n         for test in [Gender, Suit, YearInSchool, Vehicle]:\n             for member in test:\n                 with self.subTest(member=member):\n",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..323edaa 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1015,7 +1015,25 @@ class OtherModelTests(SimpleTestCase):\n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n \n-    def test_m2m_table_name_clash(self):\n+    def test_mti_onetoone_confusion_correct_order(self):\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        self.assertEqual(Picking.check(), [])\n+\n+    def test_mti_onetoone_confusion_wrong_order(self):\n+        msg = 'Add parent_link=True to invalid_models_tests.Picking.origin.'\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            class Document(models.Model):\n+                pass\n+\n+            class Picking(Document):\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n \n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..4964dd2 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -247,6 +247,14 @@ class SecurityMiddlewareTest(SimpleTestCase):\n             with self.subTest(value=value), override_settings(SECURE_REFERRER_POLICY=value):\n                 self.assertEqual(self.process_response()['Referrer-Policy'], expected)\n \n+    @override_settings(SECURE_REFERRER_POLICY='same-origin')\n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        By default, the middleware should add a \"Referrer-Policy: same-origin\"\n+        header to the response if SECURE_REFERRER_POLICY is not set.\n+        \"\"\"\n+        self.assertEqual(self.process_response()['Referrer-Policy'], 'same-origin')\n+\n     @override_settings(SECURE_REFERRER_POLICY='strict-origin')\n     def test_referrer_policy_already_present(self):\n         \"\"\"\n@@ -254,4 +262,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..4b0c4a8 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -23,9 +23,10 @@ from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n from .models import (\n-    UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n+    UUID, UUIDPK, Company, Employee, Experiment, Manager, Number, RemoteEmployee,\n     Result, SimulationRun, Time,\n )\n+from django.utils.functional import SimpleLazyObject\n \n \n class BasicExpressionsTests(TestCase):\n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..180a34e 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -4,6 +4,62 @@ import re\n from datetime import datetime, timedelta\n from importlib import import_module\n \n+from django.contrib.admin.sites import AdminSite\n+\n+class TestAdminSite(AdminSite):\n+    pass\n+\n+class TestManyToManyFieldWidgetOverride(TestCase):\n+    def setUp(self):\n+        # Define a simple Band model with a ManyToMany relationship for testing.\n+        self.site = TestAdminSite()\n+\n+    def test_formfield_widget_override_many_to_many(self):\n+        \"\"\"\n+        Test if a ManyToManyField's widget can be overridden in formfield_for_manytomany.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+\n+        band_admin = BandAdmin(Band, self.site)\n+        field = band_admin.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n+\n+    def test_default_widget_many_to_many(self):\n+        \"\"\"\n+        Test the default widget for a ManyToManyField when no override is provided.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            pass\n+\n+        band_admin = BandAdmin(Band, self.site)\n+        field = band_admin.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.SelectMultiple)\n+\n+    def test_filter_vertical_widget_many_to_many(self):\n+        \"\"\"\n+        Test filter_vertical overrides the widget for a ManyToManyField.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_vertical = ['members']\n+\n+        band_admin = BandAdmin(Band, self.site)\n+        field = band_admin.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, widgets.FilteredSelectMultiple)\n+\n+    def test_filter_horizontal_widget_many_to_many(self):\n+        \"\"\"\n+        Test filter_horizontal overrides the widget for a ManyToManyField.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_horizontal = ['members']\n+\n+        band_admin = BandAdmin(Band, self.site)\n+        field = band_admin.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, widgets.FilteredSelectMultiple)\n+\n import pytz\n \n from django import forms\n@@ -14,7 +70,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..fe2c39d 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,8 +2444,58 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+    \n+    def get_changes(self, before, after):\n+        autodetector = MigrationAutodetector(from_state=None, to_state=None)\n+        return autodetector._detect_changes(\n+            changes={\n+                'app': (before, after),\n+            },\n+            graph=None\n+        )\n \n-    def test_mti_inheritance_model_removal(self):\n+    def assertNumberMigrations(self, changes, app_label, num):\n+        self.assertEqual(len(changes.get(app_label, [])), num)\n+\n+    def assertOperationTypes(self, changes, app_label, index, types):\n+        operations = changes[app_label][index].operations\n+        self.assertEqual(len(operations), len(types))\n+        for op, op_type in zip(operations, types):\n+            self.assertEqual(op.__class__.__name__, op_type)\n+\n+    def assertOperationAttributes(self, changes, app_label, index, op_index, **kwargs):\n+        operation = changes[app_label][index].operations[op_index]\n+        for attr, value in kwargs.items():\n+            self.assertEqual(getattr(operation, attr), value)\n+\n+\n+    class TestMigrationsIssue(TestCase):\n+\n+        def test_add_model_with_field_removed_from_base_model(self):\n+            \"\"\" \n+            Test for FieldError when moving field to a new model subclass. \n+            \"\"\"\n+            before = [\n+                ModelState('app', 'Readable', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('title', models.CharField(max_length=200)),\n+                ]),\n+            ]\n+\n+            after = [\n+                ModelState('app', 'Readable', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                ]),\n+                ModelState('app', 'Book', [\n+                    ('title', models.CharField(max_length=200)),\n+                ], bases=('app.Readable',)),\n+            ]\n+\n+            changes = self.get_changes(before, after)\n+            self.assertNumberMigrations(changes, 'app', 1)\n+            self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+            self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+            self.assertOperationAttributes(changes, 'app', 0, 1, name='Book')\n         Animal = ModelState('app', 'Animal', [\n             (\"id\", models.AutoField(primary_key=True)),\n         ])\n@@ -2453,4 +2503,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..37b9278 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -9,6 +9,7 @@ from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -193,8 +194,44 @@ class LookupTests(TestCase):\n         msg = \"in_bulk()'s field_name must be a unique field but 'author' isn't.\"\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n+    @isolate_apps('lookup')\n+    def test_in_bulk_meta_constraint(self):\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(ean__isnull=False)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n \n-    def test_values(self):\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..4ad1c85 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -905,7 +905,28 @@ class OtherModelTests(SimpleTestCase):\n \n         self.assertEqual(Child.check(), [])\n \n-    def test_ordering_pointing_to_foreignkey_field(self):\n+    def test_ordering_with_related_field_and_isnull_lookup(self):\n+        class Supply(models.Model):\n+            product = models.ForeignKey('Product', models.CASCADE)\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        self.assertEqual(Stock.check(), [])\n+\n+        class StockDesc(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('-supply__product__parent__isnull',)\n+\n+        self.assertEqual(StockDesc.check(), [])\n         class Parent(models.Model):\n             pass\n \n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..9349f61 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1820,6 +1820,14 @@ class CombinableTests(SimpleTestCase):\n     def test_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n+    class ExpressionWrapperTests(SimpleTestCase):\n+        def test_empty_group_by(self):\n+            expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+        def test_non_empty_group_by(self):\n+            expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n \n     def test_reversed_and(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n@@ -1827,4 +1835,4 @@ class CombinableTests(SimpleTestCase):\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..5163c6b 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1210,8 +1210,54 @@ class Queries1Tests(TestCase):\n             [],\n         )\n \n+from django.test import TestCase\n+from django.db.models import Q, F\n+from .models import Note, Annotation, Author, ExtraInfo, DateTimePK\n \n-class Queries2Tests(TestCase):\n+class QueriesTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.n1 = Note.objects.create(note='n1', misc='foo', id=1)\n+        cls.n2 = Note.objects.create(note='n2', misc='bar', id=2)\n+        cls.n3 = Note.objects.create(note='n3', misc='foo', id=3)\n+\n+        t1 = Tag.objects.create(name='t1')\n+        cls.t2 = Tag.objects.create(name='t2')\n+        t3 = Tag.objects.create(name='t3')\n+        t4 = Tag.objects.create(name='t4')\n+\n+        ann1 = Annotation.objects.create(name='a1', tag=t1)\n+        ann1.notes.add(cls.n1)\n+        ann2 = Annotation.objects.create(name='a2', tag=t4)\n+        ann2.notes.add(cls.n2, cls.n3)\n+\n+        # Create these out of order so that sorting by 'id' will be different to sorting\n+        # by 'info'. Helps detect some problems later.\n+        e1 = ExtraInfo.objects.create(info='e1', note=cls.n1, value=42)\n+        cls.e2 = ExtraInfo.objects.create(info='e2', note=cls.n2, value=41, filterable=True)\n+\n+        cls.a1 = Author.objects.create(name='a1', num=1001, extra=e1)\n+        cls.a2 = Author.objects.create(name='a2', num=2002, extra=e1)\n+        cls.a3 = Author.objects.create(name='a3', num=3003, extra=cls.e2)\n+\n+    def test_filter_with_filterable_false(self):\n+        self.e2.filterable = False\n+        self.e2.save()\n+        with self.assertRaises(NotSupportedError):\n+            list(Author.objects.filter(extra=self.e2))\n+\n+    def test_filter_with_filterable_true(self):\n+        self.e2.filterable = True\n+        self.e2.save()\n+        # this should not raise an error\n+        authors = list(Author.objects.filter(extra=self.e2))\n+        self.assertEqual(authors, [self.a3])\n+\n+    def test_filter_without_filterable_field(self):\n+        authors = list(Author.objects.all())\n+        self.assertIn(self.a1, authors)\n+        self.assertIn(self.a2, authors)\n+        self.assertIn(self.a3, authors)\n     @classmethod\n     def setUpTestData(cls):\n         Number.objects.create(num=4)\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..112e2dc 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,46 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referencing_foreign_key_order_by(self):\n+        # Setup: Create test data\n+        root = OneModel.objects.create(oneval=1)\n+        child1 = OneModel.objects.create(root=root, oneval=2)\n+        child2 = OneModel.objects.create(root=root, oneval=3)\n+        TwoModel.objects.create(record=child1, twoval=10)\n+        TwoModel.objects.create(record=child2, twoval=20)\n+\n+        # Test: Order by 'record__root_id', expects ascending order by the root's id\n+        qs = TwoModel.objects.filter(record__oneval__in=[2, 3]).order_by(\"record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [10, 20],  # expected twoval values ordered by root id\n+            lambda t: t.twoval\n+        )\n+\n+        # Test: Order by 'record__root__id', should behave the same\n+        qs = TwoModel.objects.filter(record__oneval__in=[2, 3]).order_by(\"record__root__id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [10, 20],  # expected twoval values ordered by root id\n+            lambda t: t.twoval\n+        )\n+\n+        # Test: Order by '-record__root_id', expects descending order\n+        qs = TwoModel.objects.filter(record__oneval__in=[2, 3]).order_by(\"-record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [20, 10],  # expected twoval values ordered in descending by root id\n+            lambda t: t.twoval\n+        )\n+\n+        # Test annotation workaround\n+        qs = TwoModel.objects.filter(record__oneval__in=[2, 3]).annotate(root_id=F(\"record__root_id\")).order_by(\"root_id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [10, 20],  # expected twoval values ordered by root id\n+            lambda t: t.twoval\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +393,46 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_self_referencing_foreign_key_order_by(self):\n+        # Setup: Create test data\n+        root = OneModel.objects.create(oneval=1)\n+        child1 = OneModel.objects.create(root=root, oneval=2)\n+        child2 = OneModel.objects.create(root=root, oneval=3)\n+        TwoModel.objects.create(record=child1, twoval=10)\n+        TwoModel.objects.create(record=child2, twoval=20)\n+\n+        # Test: Order by 'record__root_id', expects ascending order by the root's id\n+        qs = TwoModel.objects.filter(record__oneval__in=[2, 3]).order_by(\"record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [10, 20],  # expected twoval values ordered by root id\n+            lambda t: t.twoval\n+        )\n+\n+        # Test: Order by 'record__root__id', should behave the same\n+        qs = TwoModel.objects.filter(record__oneval__in=[2, 3]).order_by(\"record__root__id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [10, 20],  # expected twoval values ordered by root id\n+            lambda t: t.twoval\n+        )\n+\n+        # Test: Order by '-record__root_id', expects descending order\n+        qs = TwoModel.objects.filter(record__oneval__in=[2, 3]).order_by(\"-record__root_id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [20, 10],  # expected twoval values ordered in descending by root id\n+            lambda t: t.twoval\n+        )\n+\n+        # Test annotation workaround\n+        qs = TwoModel.objects.filter(record__oneval__in=[2, 3]).annotate(root_id=F(\"record__root_id\")).order_by(\"root_id\")\n+        self.assertQuerysetEqual(\n+            qs,\n+            [10, 20],  # expected twoval values ordered by root id\n+            lambda t: t.twoval\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "",
  "django__django-13109": "diff --git a/tests/model_forms/models.py b/tests/model_forms/models.py\nindex ff8ad74..9de2940 100644\n--- a/tests/model_forms/models.py\n+++ b/tests/model_forms/models.py\n@@ -29,6 +29,9 @@ class Category(models.Model):\n \n \n class Writer(models.Model):\n+    archived = models.BooleanField(default=False, editable=False)\n+\n+    objects = WriterManager()\n     name = models.CharField(max_length=50, help_text='Use both first and last names.')\n \n     class Meta:\n@@ -38,7 +41,15 @@ class Writer(models.Model):\n         return self.name\n \n \n+class ArticleManager(models.Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        return qs.filter(archived=False)\n+\n class Article(models.Model):\n+    title = models.CharField(max_length=100)\n+    archived = models.BooleanField(default=False)\n+    objects = ArticleManager()\n     ARTICLE_STATUS = (\n         (1, 'Draft'),\n         (2, 'Pending'),\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..5625701 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,7 +867,37 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n-    def test_real_apps(self):\n+    def test_reference_mixed_case_app_label(self):\n+        \"\"\"\n+        Test handling of ForeignKey relationships with models in apps with mixed-case names.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class Author(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Book(models.Model):\n+            author = models.ForeignKey(Author, on_delete=models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Magazine(models.Model):\n+            authors = models.ManyToManyField(Author)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Author))\n+        project_state.add_model(ModelState.from_model(Book))\n+        project_state.add_model(ModelState.from_model(Magazine))\n+\n+        self.assertEqual(len(project_state.apps.get_models()), 3)\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n         This test relies on the fact that contenttypes is always loaded.\n",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..ab1d06e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1618,7 +1618,15 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n-    def test_datetime_subtraction_microseconds(self):\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_output_field(self):\n+        # Test subtraction of two DateTimeFields to ensure it outputs DurationField without an ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.end - experiment.start\n+            self.assertEqual(experiment.delta, expected_delta)\n         delta = datetime.timedelta(microseconds=8999999999999999)\n         Experiment.objects.update(end=F('start') + delta)\n         qs = Experiment.objects.annotate(\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..d8f9e23 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -16,7 +16,12 @@ class QuerySetSetOperationTests(TestCase):\n     def assertNumbersEqual(self, queryset, expected_numbers, ordered=True):\n         self.assertQuerysetEqual(queryset, expected_numbers, operator.attrgetter('num'), ordered)\n \n-    def test_simple_union(self):\n+    def test_union_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs3 = qs1.union(qs2)\n+        self.assertNumbersEqual(qs3.none(), [], ordered=False)\n+        self.assertNumbersEqual(qs3, [0, 1, 8, 9], ordered=False)\n         qs1 = Number.objects.filter(num__lte=1)\n         qs2 = Number.objects.filter(num__gte=8)\n         qs3 = Number.objects.filter(num=5)\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..524d4fa 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -33,7 +33,7 @@ from django.http import HttpResponse\n from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n-from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -323,7 +323,19 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n-    def test_decode_failure_logged_to_security(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_default_hashing_algorith_legacy_decode(self):\n+        data = {'a test key': 'a test value'}\n+        encoded = self.session.encode(data)\n+        self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha256')  # Not the legacy one\n+    def test_default_hashing_algorith_no_legacy_decode(self):\n+        data = {'another test key': 'another test value'}\n+        encoded = self.session.encode(data)\n+        self.assertNotEqual(self.session._legacy_decode(encoded), data)\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n             self.assertEqual({}, self.session.decode(bad_encode))\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..fa54f54 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -8,6 +8,8 @@ from django.test import (\n from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.shortcuts import get_object_or_404\n+from .models import Artist, Account  # Import Account model, assuming it is defined similarly as Artist\n from django.views.generic import RedirectView, TemplateView, View\n \n from . import views\n@@ -589,6 +591,21 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['foo2'], 'bar2')\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering(self):\n+        # Test similar issue with offer_slug being a SimpleLazyObject\n+        class OfferView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, offer_slug, **kwargs):\n+                context = super().get_context_data(**kwargs)\n+                offer = get_object_or_404(Account, slug=str(offer_slug))\n+                return {**context, 'offer': offer}\n+\n+        # Create a sample account with a known slug\n+        account = Account.objects.create(slug='test-offer')\n+        response = OfferView.as_view()(self.rf.get('/offers/test-offer/'), offer_slug=account.slug)\n+        self.assertEqual(response.context_data['offer'], account)\n \n     def test_template_params_warning(self):\n         response = self.client.get('/template/custom/bar1/bar2/')\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..3e6c2cd 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,7 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2815,7 +2816,74 @@ class LimitChoicesToTests(TestCase):\n         f = StumpJokeWithCustomFieldForm()\n         self.assertEqual(f.fields['custom'].queryset, 42)\n \n-    def test_fields_for_model_applies_limit_choices_to(self):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        marley = Character.objects.create(username=\"Marley\", last_action=\"2023-10-01T10:00:00Z\")\n+        threepwood = Character.objects.create(username=\"Threepwood\", last_action=\"2023-10-01T12:00:00Z\")\n+\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=threepwood,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=marley,\n+        )\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..c617990 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -34,7 +34,38 @@ from .models import Storage, temp_storage, temp_storage_location\n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n \n-class GetStorageClassTests(SimpleTestCase):\n+from .models import (\n+    Storage, callable_storage,\n+)\n+\n+\n+class CallableStorageDeconstructionTests(TestCase):\n+\n+    def test_filefield_deconstruction_with_callable_storage(self):\n+        \"\"\"\n+        A FileField with a callable storage should preserve the callable\n+        during deconstruction, not evaluate it.\n+        \"\"\"\n+        # Assuming 'Storage' model has a FileField 'storage_callable'\n+        obj = Storage()\n+        field = obj._meta.get_field('storage_callable')\n+        name, path, args, kwargs = field.deconstruct()\n+        # Ensure the storage in kwargs is the callable, not an evaluated instance.\n+        self.assertIs(kwargs['storage'], callable_storage)\n+        \n+    def test_deconstruction_with_different_storage_callable(self):\n+        \"\"\"\n+        Test deconstruction with a different callable that returns another storage.\n+        \"\"\"\n+        def another_storage_callable():\n+            return temp_storage\n+        \n+        obj = Storage()  # Assume this uses another_storage_callable\n+        field = obj._meta.get_field('storage_callable')  # Assuming same field used for simplicity\n+        name, path, args, kwargs = field.deconstruct()\n+        \n+        # Since we are testing same callable behavior, let's be generic and reuse callable_storage\n+        self.assertIs(kwargs['storage'], callable_storage)\n \n     def test_get_filesystem_storage(self):\n         \"\"\"\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..5de721a 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -635,6 +635,20 @@ class TestQuerying(TestCase):\n     def test_key_icontains(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n+    def test_key_in(self):\n+        tests = [\n+            ('our_field__key__in', [0], self.objs[:312]), # Expected behavior based on the issue description.\n+            ('our_field__key__in', [1], []), # No matching entries.\n+            ('our_field__key__in', [0, 2], self.objs[:312]), # '0' should match the same set.\n+            ('our_field__key', 0, self.objs[:312]), # Direct comparison should result in the same set.\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    OurModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n+\n     def test_key_startswith(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__startswith='b').exists(), True)\n \n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..bb624eb 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -17,6 +17,8 @@ from django.db.models.functions import (\n from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n+import pytz\n+from datetime import datetime\n from django.utils import timezone\n \n from ..models import Author, DTModel, Fan\n@@ -1133,7 +1135,49 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_truncdate_with_tzinfo(self):\n+        start_datetime = datetime(2023, 10, 29, 15, 0)  # Arbitrary date and time\n+        start_datetime = timezone.make_aware(start_datetime, is_dst=False)\n+\n+        melb = pytz.timezone('Australia/Melbourne')\n+        pacific = pytz.timezone('US/Pacific')\n+        new_york = pytz.timezone('America/New_York')\n+\n+        model = DTModel.objects.annotate(\n+            melb_date=TruncDate('start_datetime', tzinfo=melb),\n+            pacific_date=TruncDate('start_datetime', tzinfo=pacific),\n+            new_york_date=TruncDate('start_datetime', tzinfo=new_york),\n+        ).order_by('start_datetime').get()\n+\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        pacific_start_datetime = start_datetime.astimezone(pacific)\n+        new_york_start_datetime = start_datetime.astimezone(new_york)\n+\n+        self.assertEqual(model.melb_date, melb_start_datetime.date())\n+        self.assertEqual(model.pacific_date, pacific_start_datetime.date())\n+        self.assertEqual(model.new_york_date, new_york_start_datetime.date())\n+\n+    def test_trunctime_with_tzinfo(self):\n+        start_datetime = datetime(2023, 10, 29, 15, 0)  # Arbitrary date and time\n+        start_datetime = timezone.make_aware(start_datetime, is_dst=False)\n+\n+        melb = pytz.timezone('Australia/Melbourne')\n+        pacific = pytz.timezone('US/Pacific')\n+        new_york = pytz.timezone('America/New_York')\n+\n+        model = DTModel.objects.annotate(\n+            melb_time=TruncTime('start_datetime', tzinfo=melb),\n+            pacific_time=TruncTime('start_datetime', tzinfo=pacific),\n+            new_york_time=TruncTime('start_datetime', tzinfo=new_york),\n+        ).order_by('start_datetime').get()\n+\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        pacific_start_datetime = start_datetime.astimezone(pacific)\n+        new_york_start_datetime = start_datetime.astimezone(new_york)\n+\n+        self.assertEqual(model.melb_time, melb_start_datetime.time())\n+        self.assertEqual(model.pacific_time, pacific_start_datetime.time())\n+        self.assertEqual(model.new_york_time, new_york_start_datetime.time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..8f58878 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -103,7 +103,44 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n \n-class ChoicesTests(SimpleTestCase):\n+class AbstractModelFieldTests(SimpleTestCase):\n+\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models should not be equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Assert fields from different classes are not equal\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        # Assert fields from different classes have different hashes\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+        # Ensure they all have unique presence in a set\n+        unique_fields = {abstract_model_field, inherit1_model_field, inherit2_model_field}\n+        self.assertEqual(len(unique_fields), 3)\n+\n+        # Order based on creation_counter should still be valid\n+        self.assertLess(abstract_model_field.creation_counter, inherit1_model_field.creation_counter)\n+        self.assertLess(abstract_model_field.creation_counter, inherit2_model_field.creation_counter)\n+        self.assertLess(inherit1_model_field.creation_counter, inherit2_model_field.creation_counter)\n \n     @classmethod\n     def setUpClass(cls):\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..497b894 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -7,6 +8,8 @@ import unittest\n from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n+from django.core.files import locks\n+from pathlib import Path\n \n from django.core.files import File\n from django.core.files.base import ContentFile\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..4fba15d 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2076,6 +2076,30 @@ class QuerysetOrderedTests(unittest.TestCase):\n     def test_empty_queryset(self):\n         self.assertIs(Annotation.objects.none().ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Tag.objects.annotate(num_notes=Count('pk'))\n+        # Check that ordered is False because GROUP BY removes default ordering\n+        self.assertIs(qs.ordered, False)\n+        # Applying an explicit order_by should make it ordered\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Tag.objects.values('name').annotate(num_notes=Count('pk'))\n+        # Check that ordered is False for values query with GROUP BY\n+        self.assertIs(qs.ordered, False)\n+        # Applying an explicit order_by should make it ordered\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_group_by_without_explicit_ordering(self):\n+        qs = Tag.objects.annotate(count=Count('name'))\n+        # This should be False as no explicit order_by and grouping\n+        self.assertIs(qs.ordered, False)\n+\n+    def test_group_by_with_explicit_ordering(self):\n+        qs = Tag.objects.annotate(count=Count('name')).order_by('name')\n+        # This should be True due to explicit ordering\n+        self.assertIs(qs.ordered, True)\n+\n     def test_order_by_extra(self):\n         self.assertIs(Annotation.objects.all().extra(order_by=['id']).ordered, True)\n \n",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..1c33814 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -335,6 +335,39 @@ class CommandTests(SimpleTestCase):\n             with self.assertRaisesMessage(TypeError, msg):\n                 management.call_command('subparser_dest', subcommand='foo', bar=12)\n \n+    def test_outputwrapper_flush(self):\n+        # Import necessary modules for test cases\n+        from django.core.management import call_command\n+        from io import StringIO\n+        from unittest import mock\n+\n+        # Original test case\n+        out = StringIO()\n+        with mock.patch.object(out, 'flush') as mocked_flush:\n+            call_command('outputwrapper', stdout=out)\n+        self.assertIn('Working...', out.getvalue())\n+        self.assertIs(mocked_flush.called, True)\n+\n+        # New test case to check sequential output\n+        out2 = StringIO()\n+        with mock.patch.object(out2, 'flush') as mocked_flush2:\n+            call_command('outputwrapper', stdout=out2)\n+        output = out2.getvalue()\n+        self.assertIn('Working...', output)\n+        self.assertIn('OK', output)\n+        self.assertIs(mocked_flush2.called, True)\n+\n+        # New test case to verify flush is working during migrations\n+        out3 = StringIO()\n+        with mock.patch.object(out3, 'flush') as mocked_flush3:\n+            # Assuming the 'migrate' command would print and flush output, we simulate it\n+            call_command('migrate', stdout=out3)\n+        # Check the start and intermediate log output\n+        migrate_output = out3.getvalue()\n+        self.assertIn('Operations to perform:', migrate_output)\n+        self.assertIn('Running migrations:', migrate_output)\n+        self.assertIs(mocked_flush3.called, True)\n+\n     def test_create_parser_kwargs(self):\n         \"\"\"BaseCommand.create_parser() passes kwargs to CommandParser.\"\"\"\n         epilog = 'some epilog text'\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..21d4b9c 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,7 +1,10 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n+from .models.with_custom_email_field import CustomEmailField\n+from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n from django.test.utils import ignore_warnings\n@@ -37,7 +40,26 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertTrue(p0.check_token(user, tk1))\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertFalse(p0.check_token(user, tk1))\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..da4b507 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n@@ -7,6 +8,7 @@ from django.db import models\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n )\n+from django.db.models import Q, UniqueConstraint\n from django.test.utils import isolate_apps\n \n from .models import CustomUserNonUniqueUsername\n@@ -194,7 +196,27 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_custom_permission_name_max_length(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserConstraintValidation')\n+    def test_username_field_constraint_resolved(self):\n+        \"\"\"\n+        Test if USERNAME_FIELD is validated correctly with a unique constraint applied.\n+        \"\"\"\n+\n+        class CustomUserConstraintValidation(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_unique_constraint'),\n+                ]\n+\n+        # Expect no errors since a unique constraint on USERNAME_FIELD is present.\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            # Expect no warnings since unique constraint ensures uniqueness.\n+            self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n         custom_permission_name = 'some ridiculously long verbose name that is out of control' * 5\n \n         class Checked(models.Model):\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..f8ebf60 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1310,8 +1310,27 @@ class AggregateTestCase(TestCase):\n             contact_publisher__isnull=False,\n         ).annotate(count=Count('authors'))\n         self.assertSequenceEqual(books_qs, [book])\n-        # FIXME: GROUP BY doesn't need to include a subquery with\n-        # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n+        # Test random ordering with aggregation does not affect result counts.\n+        def test_random_ordering_with_aggregation(self):\n+            t1 = Thing.objects.create()\n+            t2 = Thing.objects.create()\n+            rs1 = [Related.objects.create(thing=t1) for _ in range(3)]\n+            rs2 = [Related.objects.create(thing=t2) for _ in range(2)]\n+\n+            result_with_order_by_id = list(Thing.objects.annotate(rc=Count('related')).order_by('id').values('id', 'rc'))\n+            result_with_order_by_random = list(Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc'))\n+\n+            # Expected result: Each Thing should retain its related count irrespective of order_by usage\n+            expected_result = [{'id': t1.id, 'rc': 3}, {'id': t2.id, 'rc': 2}]\n+\n+            # Assert that aggregation count remains consistent with or without random ordering\n+            self.assertCountEqual(result_with_order_by_id, expected_result)\n+            self.assertCountEqual(result_with_order_by_random, expected_result)\n+\n+        def test_random_ordering_with_empty_queryset(self):\n+            # This test ensures that applying random order to an empty queryset does not raise exceptions\n+            result_with_order_by_random = list(Thing.objects.none().annotate(rc=Count('related')).order_by('?').values('id', 'rc'))\n+            self.assertEqual(result_with_order_by_random, [])\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..b4d3e95 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -6,6 +7,7 @@ from copy import deepcopy\n from decimal import Decimal\n from unittest import mock\n \n+from collections import namedtuple\n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import (\n@@ -815,7 +817,12 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..0f7f41d 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,18 +19,22 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..378725b 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -70,8 +71,22 @@ class DateFormatTests(SimpleTestCase):\n         my_birthday = datetime(1979, 7, 8, 22, 00)\n \n         self.assertEqual(dateformat.format(my_birthday, 'a'), 'p.m.')\n-\n-    def test_microsecond(self):\n+    \n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),  # Edge case just below 1000\n+            (1000, '00'), # Edge case at 1000\n+            (2000, '00'), # Regular year check\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         # Regression test for #18951\n         dt = datetime(2009, 5, 16, microsecond=123)\n         self.assertEqual(dateformat.format(dt, 'u'), '000123')\n@@ -164,4 +179,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex ac42308..d6dd505 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -55,6 +55,7 @@ class ReadOnlyPasswordHashField(forms.Field):\n     widget = ReadOnlyPasswordHashWidget\n \n     def __init__(self, *args, **kwargs):\n+        kwargs.setdefault(\"disabled\", True)\n         kwargs.setdefault(\"required\", False)\n         super().__init__(*args, **kwargs)\n \n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..5b7d0ad 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,7 +119,83 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n-    def _test_create_alter_foo_delete_model(self, alter_foo):\n+    def test_create_model_and_remove_model_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [migrations.CreateModel('MyModel', fields=[])],\n+        )\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'verbose_name_plural': 'My Model plural',\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'MyModel',\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model'},\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_with_multiple_options_and_clear(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'db_table': 'my_model_table',\n+                    },\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [migrations.CreateModel('MyModel', fields=[])],\n+        )\n+\n+    def test_create_model_with_extra_options_and_minimize(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'My Model',\n+                        'ordering': ['name'],\n+                        'permissions': [('can_view', 'Can view')],\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'MyModel',\n+                    options={'verbose_name': 'My Model', 'ordering': ['name']},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model', 'ordering': ['name']},\n+                ),\n+            ],\n+        )\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n         AlterOrderWithRespectTo, and DeleteModel should collapse into nothing.\n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..0307951 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,8 +1,9 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n-\n+from django.utils.translation import gettext_lazy\n from ..utils import setup\n \n \n@@ -46,6 +47,22 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n \n class FunctionTests(SimpleTestCase):\n \n",
  "django__django-13807": "diff --git a/tests/backends/models.py b/tests/backends/models.py\nindex a2fd310..a99b82e 100644\n--- a/tests/backends/models.py\n+++ b/tests/backends/models.py\n@@ -134,9 +134,21 @@ class RawData(models.Model):\n     raw_data = models.BinaryField()\n \n \n+from django.db import models, IntegrityError, connection, transaction\n+\n+class Reporter(models.Model):\n+    name = models.CharField(max_length=128)\n+\n+class SQLKeywordsModel(models.Model):\n+    id = models.AutoField(primary_key=True, db_column='select')\n+    reporter = models.ForeignKey(Reporter, models.CASCADE, db_column='where')\n+\n+    class Meta:\n+        db_table = 'order'\n+\n class Author(models.Model):\n     name = models.CharField(max_length=255, unique=True)\n \n \n class Book(models.Model):\n-    author = models.ForeignKey(Author, models.CASCADE, to_field='name')\n+    author = models.ForeignKey(Author, models.CASCADE, to_field='name')\n",
  "django__django-13809": "",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..709e782 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -6,7 +7,44 @@ from django.test import RequestFactory, SimpleTestCase, override_settings\n from . import middleware as mw\n \n \n+from django.core.handlers.asgi import ASGIHandler\n+\n @override_settings(ROOT_URLCONF='middleware_exceptions.urls')\n+class MiddlewareSideEffectsTests(SimpleTestCase):\n+    \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',  # This middleware is meant to replicate the issue\n+        'middleware_exceptions.middleware.AsyncTemplateResponseMiddleware',\n+    ])\n+    async def test_handler_not_poisoned_after_middleware_not_used_async(self):\n+        # Ensure the middleware chain is not poisoned when processing an async request\n+        response = await self.async_client.get('/middleware_exceptions/template_response/')\n+        self.assertEqual(response.status_code, 200)\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',  # This middleware is meant to replicate the issue\n+        'middleware_exceptions.middleware.PaymentMiddleware',\n+    ])\n+    def test_handler_not_poisoned_after_middleware_not_used_sync(self):\n+        # Ensure the middleware chain is not poisoned when processing a sync request\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 402)\n+\n+    @override_settings(\n+        DEBUG=True,\n+        MIDDLEWARE=[\n+            'middleware_exceptions.middleware.DummyMiddleware',  # This middleware is meant to replicate the issue\n+            'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        ],\n+    )\n+    async def test_async_process_with_dummy_middleware_chain(self):\n+        with self.assertLogs('django.request', level='DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\",\n+            [record.getMessage() for record in cm.records]\n+        )\n class MiddlewareTests(SimpleTestCase):\n     def tearDown(self):\n         mw.log = []\n@@ -283,7 +321,44 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         self.assertEqual(response.status_code, 200)\n \n \n+from django.core.handlers.asgi import ASGIHandler\n+\n @override_settings(ROOT_URLCONF='middleware_exceptions.urls')\n+class MiddlewareSideEffectsTests(SimpleTestCase):\n+    \n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',  # This middleware is meant to replicate the issue\n+        'middleware_exceptions.middleware.AsyncTemplateResponseMiddleware',\n+    ])\n+    async def test_handler_not_poisoned_after_middleware_not_used_async(self):\n+        # Ensure the middleware chain is not poisoned when processing an async request\n+        response = await self.async_client.get('/middleware_exceptions/template_response/')\n+        self.assertEqual(response.status_code, 200)\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.DummyMiddleware',  # This middleware is meant to replicate the issue\n+        'middleware_exceptions.middleware.PaymentMiddleware',\n+    ])\n+    def test_handler_not_poisoned_after_middleware_not_used_sync(self):\n+        # Ensure the middleware chain is not poisoned when processing a sync request\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 402)\n+\n+    @override_settings(\n+        DEBUG=True,\n+        MIDDLEWARE=[\n+            'middleware_exceptions.middleware.DummyMiddleware',  # This middleware is meant to replicate the issue\n+            'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        ],\n+    )\n+    async def test_async_process_with_dummy_middleware_chain(self):\n+        with self.assertLogs('django.request', level='DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\",\n+            [record.getMessage() for record in cm.records]\n+        )\n class AsyncMiddlewareTests(SimpleTestCase):\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.AsyncTemplateResponseMiddleware',\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..0965311 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -9,6 +10,8 @@ from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import TestCase, modify_settings, override_settings\n \n+from importlib import import_module, reload\n+from types import ModuleType\n from .test_base import MigrationTestBase\n \n \n@@ -512,6 +515,37 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(MIGRATION_MODULES={\n+        'migrations': 'migrations.test_migrations',\n+        'app_without_file': 'migrations.app_without_file',\n+    })\n+    def test_loading_multiple_packages_with_and_without__file__(self):\n+        \"\"\"\n+        Test loading migrations from both a package with a __file__ attribute\n+        and a package without a __file__ attribute in frozen environments.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations')\n+        package_without_file = ModuleType('migrations.app_without_file')\n+        sys.modules['migrations.app_without_file'] = package_without_file\n+\n+        loader = MigrationLoader(connection)\n+        module_file = test_module.__file__\n+        try:\n+            # Simulate package without __file__\n+            del test_module.__file__\n+            package_without_file.__path__ = []\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app in ['migrations', 'app_without_file']\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            # Restore the original state\n+            test_module.__file__ = module_file\n+            del sys.modules['migrations.app_without_file']\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..9976666 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -36,6 +36,23 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n+    def test_sqlite_version_requirement(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n+\n+    def test_sqlite_version_supported(self):\n+        # Test that SQLite 3.9.0 doesn't raise an ImproperlyConfigured exception\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            # No exception should be raised for version 3.9.0\n+            try:\n+                check_sqlite_version()\n+            except ImproperlyConfigured:\n+                self.fail(\"check_sqlite_version() raised ImproperlyConfigured unexpectedly!\")\n+\n     def test_aggregation(self):\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..72d64e3 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -158,7 +158,14 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n class TestChildArguments(SimpleTestCase):\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -173,7 +180,14 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..58f7602 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -282,7 +282,45 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n         )\n \n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n+\n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_invalid_choice_message(self):\n+        # Create choices for the model choice field tests.\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+        ChoiceModel.objects.create(pk=3, name='c')\n+\n+        # Test for ModelChoiceField with modified error message\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+\n+        # Ensure the invalid choice value is displayed in the error message\n+        self.assertFormErrors(['\"invalid\" is not one of the available choices.'], f.clean, 'invalid')\n+\n+    def test_modelmultiplechoicefield_invalid_choice_message(self):\n+        # Create choices for the model multiple choice field tests.\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+        ChoiceModel.objects.create(pk=3, name='c')\n+\n+        # Test for ModelMultipleChoiceField with modified error message\n+        f = ModelMultipleChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not a valid choice.',\n+                'invalid_list': 'Enter a list of values.',\n+            },\n+        )\n+\n+        # Ensure the invalid choice value is displayed in the error message\n+        self.assertFormErrors(['\"invalid\" is not a valid choice.'], f.clean, ['invalid'])\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +345,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..da9962e 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,9 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from .fields import MyAutoField, MyWrapperField\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n@@ -175,8 +179,24 @@ class BasicCustomPKTests(TestCase):\n             str\n         )\n \n+class CustomAutoFieldTestCase(TestCase):\n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test MyAutoField subclass on create.\n+        Ensure that the from_db_value hook is correctly applied when using create().\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n \n-class CustomPKTests(TestCase):\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test MyAutoField subclass with bulk_create.\n+        Ensure that the from_db_value hook is correctly applied during bulk_create.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n     def test_custom_pk_create(self):\n         \"\"\"\n         New objects can be created both with pk and the custom name\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..17d4c5b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -794,6 +794,27 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n+    def test_commutativity_of_q_and_exists(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+\n+        # Set point_of_contact for 'gmbh' to 'max' (assuming 'max' is an Employee instance set in test setup)\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Test commutativity of & and | operators between Exists and Q\n+        tests = [\n+            (Q(salary__gte=30) & Exists(is_ceo), Exists(is_ceo) & Q(salary__gte=30)),\n+            (Q(salary__lt=15) | Exists(is_poc), Exists(is_poc) | Q(salary__lt=15)),\n+        ]\n+\n+        for (condition1, condition2) in tests:\n+            with self.subTest(condition=condition1):\n+                self.assertEqual(\n+                    list(Employee.objects.filter(condition1)),\n+                    list(Employee.objects.filter(condition2)),\n+                )\n+\n     def test_boolean_expression_combined(self):\n         is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n",
  "django__django-14053": "",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..c889a70 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -18,7 +19,26 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        import collections.abc\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        s = reversed(OrderedSet())\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        s = reversed(OrderedSet([42]))\n+        self.assertEqual(list(s), [42])\n+\n+    def test_reversed_after_removals(self):\n+        s = OrderedSet([1, 2, 3, 4, 5])\n+        s.remove(3)\n+        s.remove(5)\n+        reversed_s = reversed(s)\n+        self.assertEqual(list(reversed_s), [4, 2, 1])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..65c815d 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n from django.db.models import (\n     CharField, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n+from django.db.models import Count\n from django.db.models.functions import Upper\n from django.test import TestCase\n \n@@ -419,7 +421,25 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n-    def test_order_by_constant_value(self):\n+    def test_group_by_without_ordering_fields(self):\n+        \"\"\"\n+        Test that Meta.ordering fields are not included in the GROUP BY clause,\n+        potentially causing incorrect aggregation results.\n+        \"\"\"\n+        # Setup: create additional articles with associations\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+\n+        # Perform an aggregation where `Meta.ordering` should not affect the outcome\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        \n+        # Expect articles to be grouped correctly by 'author' only\n+        self.assertCountEqual(\n+            articles, [\n+                {'author': self.author_1.pk, 'count': 3},\n+                {'author': self.author_2.pk, 'count': 1},\n+            ]\n+        )\n         # Order by annotated constant from selected columns.\n         qs = Article.objects.annotate(\n             constant=Value('1', output_field=CharField()),\n@@ -483,4 +503,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..7e8d8dd 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -835,7 +835,7 @@ class BasicExpressionsTests(TestCase):\n             Q() | Exists(is_poc),\n         ]\n         for conditions in tests:\n-            with self.subTest(conditions):\n+            with self.subTest(conditions=conditions):\n                 self.assertCountEqual(Employee.objects.filter(conditions), [self.max])\n \n \n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..8df4b9f 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -66,8 +67,28 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_mybigautofield(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_mysmallautofield(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n-    @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n             pass\n@@ -82,8 +103,28 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_mybigautofield(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_mysmallautofield(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n-    @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n             m2m = models.ManyToManyField('self')\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..2655559 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -165,6 +165,24 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch('sys.argv', ['-m', 'some.non_django.module.baz', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module(self):\n+        with mock.patch('django.utils.module_loading.import_string', return_value=Path('some/non_django/module/baz.py')):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'some.non_django.module.baz', 'runserver']\n+            )\n+\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_module(self):\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..dfd8b3c 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -214,6 +214,14 @@ TEST_DATA = [\n     (MaxLengthValidator(10), 15 * 'x', ValidationError),\n \n     (MinLengthValidator(10), 15 * 'x', None),\n+    # Newlines, carriage returns, and tabs in URLs should raise ValidationError\n+    (URLValidator(), 'http://example.com\\n', ValidationError),\n+    (URLValidator(), 'http://example.com\\r', ValidationError),\n+    (URLValidator(), 'http://example.com\\t', ValidationError),\n+    (URLValidator(), 'http://example.com/path\\n', ValidationError),\n+    (URLValidator(), 'http://example.com/path\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n     (MinLengthValidator(10), 10 * 'x', None),\n \n     (MinLengthValidator(10), '', ValidationError),\n@@ -229,6 +237,9 @@ TEST_DATA = [\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+    # Test URLs with internal newlines and tabs\n+    (URLValidator(), 'http://user:pass\\nword@example.com/', ValidationError),\n+    (URLValidator(), 'http://user:pass\\tword@example.com/', ValidationError),\n     # Trailing junk does not take forever to reject\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..e9fbc74 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1525,8 +1525,33 @@ class AggregationTests(TestCase):\n             allow_distinct = True\n         DistinctAggregate('foo', distinct=True)\n \n+from django.test import TestCase\n+from django.db.models import Q, Count\n+from .models import Author, Book, PropertyGroup, ManagerAgent\n \n class JoinPromotionTests(TestCase):\n+    def setUp(self):\n+        # Assuming necessary setup for objects based on the context\n+        self.property_groups = PropertyGroup.objects.create(name=\"Group 1\")\n+        self.manager_agent = ManagerAgent.objects.create(name=\"Agent 1\")\n+        self.manager_agent.property_groups.add(self.property_groups)\n+    \n+    def test_q_object_or_behavior_with_ids(self):\n+        queryset = Book.objects.filter(\n+            Q(authors__in=Author.objects.filter(pk=self.property_groups.pk).values_list('id', flat=True))\n+            | Q(authors__count=0)\n+        ).distinct()\n+        \n+        self.assertIsNotNone(queryset)\n+\n+    def test_q_object_or_behavior_with_object_in(self):\n+        queryset = Book.objects.annotate(Count(\"authors\")).filter(\n+            Q(authors__in=Author.objects.filter(pk=self.property_groups.pk))\n+            | Q(authors__count=0)\n+        ).distinct()\n+        \n+        # Ensure no ProgrammingError is raised\n+        self.assertIsNotNone(queryset)\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..f60a881 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -179,7 +179,14 @@ class DateFormatTests(SimpleTestCase):\n                     expected_date,\n                 )\n \n-    def test_twelve_hour_format(self):\n+    def test_Y_format_year_before_1000(self):\n+        # Adding test cases for years < 1000 to check zero-padding in 'Y' format\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n+        # Additional case for year exactly 1000\n+        self.assertEqual(dateformat.format(datetime(1000, 1, 1), 'Y'), '1000')\n+        # Confirm behavior for year in common era, e.g., 2023\n+        self.assertEqual(dateformat.format(datetime(2023, 1, 1), 'Y'), '2023')\n         tests = [\n             (0, '12'),\n             (1, '1'),\n",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..2fde840 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,7 +38,65 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n-    def test_options_override_settings_proper_values(self):\n+    def test_options_both_deprecated_and_new(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args_deprecated = [\n+            'mysql',\n+            '--user=deprecateduser',\n+            '--host=deprecatedhost',\n+            '--port=%s' % options_port,\n+            'deprecateddbname',\n+        ]\n+        expected_env_deprecated = {'MYSQL_PWD': 'deprecatedpassword'}\n+        \n+        expected_args_new = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env_new = {'MYSQL_PWD': 'optionpassword'}\n+\n+        # Test with deprecated keys\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'deprecateddbname',\n+                    'user': 'deprecateduser',\n+                    'passwd': 'deprecatedpassword',\n+                    'host': 'deprecatedhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args_deprecated, expected_env_deprecated),\n+        )\n+\n+        # Test with new keys\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args_new, expected_env_new),\n+       )\n         settings_port = 444\n         options_port = 555\n         self.assertNotEqual(settings_port, options_port, 'test pre-req')\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..503da17 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2197,8 +2197,19 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             AuthorWithUniqueNameAndBirthday._meta.constraints = []\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n-\n-    @skipUnlessDBFeature('supports_expression_indexes')\n+    def test_references_column_with_string_field(self):\n+        # This test validates that references_column works when fields are passed correctly\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        field_name = 'name'\n+        constraint = UniqueConstraint(fields=[field_name], name='name_uq_test')\n+        # Add constraint and generate SQL\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        # Validate that references_column works with correct field type\n+        self.assertIs(sql.references_column(table, field_name), True)\n     def test_func_unique_constraint(self):\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex dc966a1..81ece09 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -93,7 +93,10 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n         ),\n     )\n \n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n \n class NoneHashStorage(ManifestStaticFilesStorage):\n     def file_hash(self, name, content=None):\n-        return None\n+        return None\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..61be096 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -640,7 +640,46 @@ class ExecutorTests(MigrationTestBase):\n         \"\"\"\n         recorder = MigrationRecorder(connection)\n         # Record all replaced migrations as applied\n-        recorder.record_applied(\"migrations\", \"0001_initial\")\n+from django.test import override_settings\n+from django.db.migrations.executor import MigrationExecutor\n+from django.db import connection\n+from django.test import TestCase\n+\n+@override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+class TestSquashedMigrationUnapplied(TestCase):\n+    def test_squashed_migration_unapplied_correctly(self):\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n+        try:\n+            self.assertIn(\n+                (\"migrations\", \"0001_squashed_0002\"),\n+                executor.recorder.applied_migrations(),\n+            )\n+        finally:\n+            executor.loader.build_graph()\n+            executor.migrate([(\"migrations\", None)])\n+            self.assertNotIn(\n+                (\"migrations\", \"0001_squashed_0002\"),\n+                executor.recorder.applied_migrations(),\n+            )\n+            # Ensure that individual migrations marked as replaced are unapplied\n+            self.assertIn(\n+                (\"migrations\", \"0001_initial\"),\n+                executor.recorder.applied_migrations(),\n+            )\n+            self.assertIn(\n+                (\"migrations\", \"0002_second\"),\n+                executor.recorder.applied_migrations(),\n+            )\n+\n+        # Additional test to check that replacement migrations remain unapplied if marked so\n+        executor.record_unapplied(\"migrations\", \"0001_initial\")\n+        executor.record_unapplied(\"migrations\", \"0002_second\")\n+        executor.loader.build_graph()\n+        self.assertNotIn(\n+            (\"migrations\", \"0001_squashed_0002\"),\n+            executor.recorder.applied_migrations(),\n+        )\n         recorder.record_applied(\"migrations\", \"0002_second\")\n         executor = MigrationExecutor(connection)\n         executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..7a5e246 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -250,10 +250,18 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for google.com/?q=! and see.',\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>! and see.'\n             ),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n             (\n                 lazystr('Search for google.com/?q=!'),\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n             ),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n         )\n         for value, output in tests:\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..f305190 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,7 +115,42 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n-    def test_update_primary_key(self):\n+from django.test import TestCase\n+from .models import Note, CustomPk, Valid, Detail, Paragraph, Member\n+\n+class TestBulkUpdateReturnValue(TestCase):\n+    def test_bulk_update_empty_list(self):\n+        # Test that bulk_update returns 0 when given an empty list.\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_bulk_update_multiple_objects(self):\n+        # Create multiple note instances\n+        Note.objects.bulk_create([\n+            Note(note=f'Note {i}', misc='misc') for i in range(3)\n+        ])\n+        notes = list(Note.objects.all())\n+        \n+        # Update notes and check the bulk_update return value\n+        for note in notes:\n+            note.note = 'Updated Note'\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 3)\n+\n+    def test_bulk_update_with_no_changes(self):\n+        # Create notes and perform a bulk update with no actual changes\n+        Note.objects.bulk_create([\n+            Note(note=f'Note {i}', misc='misc') for i in range(2)\n+        ])\n+        notes = list(Note.objects.all())\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_bulk_update_with_duplicates_in_batch(self):\n+        # Create a note and attempt to update the same item multiple times in a batch.\n+        note = Note.objects.create(note='Duplicate Note', misc='misc')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 1)\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..3ff9556 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -315,6 +315,26 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertTrue(formset.is_valid())\n         self.assertEqual([form.cleaned_data for form in formset.forms], [{'votes': 100, 'choice': 'Calexico'}, {}, {}])\n+    \n+    def test_non_form_errors_css_class(self):\n+        \"\"\"\n+        Test that the CSS class 'nonform' is correctly applied for non-form errors\n+        in a FormSet.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '2',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '0',\n+            'choices-0-choice': 'Duplicate',\n+            'choices-0-votes': '10',\n+            'choices-1-choice': 'Duplicate',\n+            'choices-1-votes': '20',\n+        }\n+        formset = formset_factory(Choice, extra=1)(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        error_html = formset.non_form_errors().as_ul()\n+        self.assertIn('class=\"errorlist nonform\"', error_html)\n \n     def test_formset_validate_max_flag(self):\n         \"\"\"\n@@ -970,6 +990,25 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertEqual(formset.management_form.prefix, 'form')\n         formset = FavoriteDrinksFormSet(initial={})\n         self.assertEqual(formset.management_form.prefix, 'form')\n+    \n+    def test_non_form_errors_is_errorlist_instance(self):\n+        \"\"\"\n+        Verify that the non-form errors are indeed instances of ErrorList and\n+        contain the appropriate CSS class 'nonform'.\n+        \"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '2',\n+            'drinks-INITIAL_FORMS': '0',\n+            'drinks-MIN_NUM_FORMS': '0',\n+            'drinks-MAX_NUM_FORMS': '0',\n+            'drinks-0-name': 'Mojito',\n+            'drinks-1-name': 'Mojito',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        non_form_errors = formset.non_form_errors()\n+        self.assertIsInstance(non_form_errors, ErrorList)\n+        self.assertEqual(str(non_form_errors), '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>')\n \n     def test_non_form_errors(self):\n         data = {\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..3411d35 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,34 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_clean_fields_consistency_boundfield_initial(self):\n+        \"\"\"\n+        Test that _clean_fields fetches initial values using BoundField and remains consistent.\n+        \"\"\"\n+        initial_time = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: initial_time, disabled=True)\n+\n+        form = DateTimeForm({})\n+        form.full_clean()  # Trigger full form cleaning\n+        cleaned_value = form.cleaned_data['dt']\n+        bound_field_initial = form['dt'].initial\n+        self.assertEqual(cleaned_value, bound_field_initial)\n+\n+    def test_consistent_changed_data_using_boundfield(self):\n+        \"\"\"\n+        Test that changed_data remains empty if initial value from BoundField matches form data.\n+        \"\"\"\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45), disabled=True)\n+\n+        form_initial = DateTimeForm({})\n+        form_initial.full_clean()\n+        self.assertEqual(form_initial.changed_data, [])\n+\n+        form_without_change = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n+        self.assertEqual(form_without_change.changed_data, [])\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..d4e3f81 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -3,6 +3,7 @@ from operator import attrgetter\n \n from django.db import IntegrityError\n from django.test import TestCase\n+from .models import Parent, ProxyParent, Child, ManyToManyModel\n \n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..9dce627 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -11,7 +12,10 @@ from django.http import Http404\n from django.test import RequestFactory, override_settings\n from django.urls import reverse, reverse_lazy\n \n+from datetime import date\n+from django.test import TestCase\n from .admin import AnswerAdmin, QuestionAdmin\n+from .models import Question  # Adjust based on where Question model is declared\n from .models import (\n     Answer, Author, Authorship, Bonus, Book, Employee, Manager, Parent,\n     PKChild, Question, Toy, WorkHour,\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..500ad53 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -926,7 +926,24 @@ class StateTests(SimpleTestCase):\n \n     def test_ignore_order_wrt(self):\n         \"\"\"\n-        Makes sure ProjectState doesn't include OrderWrt fields when\n+    def test_real_apps_set(self):\n+        # Test with a valid set for real_apps\n+        try:\n+            project_state = ProjectState(real_apps={'auth', 'contenttypes'})\n+            self.assertIsInstance(project_state.real_apps, set)\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n+\n+    def test_real_apps_none(self):\n+        # Test with None for real_apps\n+        try:\n+            project_state = ProjectState(real_apps=None)\n+            self.assertIsInstance(project_state.real_apps, set)\n+            self.assertEqual(len(project_state.real_apps), 0)\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n+\n+        # Additional setup code\n         making from existing models.\n         \"\"\"\n         new_apps = Apps()\n",
  "django__django-14771": "",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..992c1ea 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5084,8 +5084,32 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         su = User.objects.filter(is_superuser=True)[0]\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n-\n-    def test_change_form_renders_correct_null_choice_value(self):\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test that ForeignKey readonly fields render with the correct URL\n+        in a custom Admin Site.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 2',\n+            content='content',\n+            book=Book.objects.create(name='Book 2'),\n+        )\n+        language = Language.objects.create(iso='_41', name='Test Language')\n+        chapter.language = language\n+        chapter.save()\n+        \n+        # Assuming 'site2' is the custom admin site\n+        admin_site_name = 'site2'\n+        response = self.client.get(reverse(f'{admin_site_name}:admin_views_chapter_change', args=(chapter.pk,)))\n+        language_url = reverse(\n+            f'{admin_site_name}:admin_views_language_change',\n+            args=(quote(language.pk),),\n+        )\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_41</a></div>' % language_url,\n+            html=True,\n+        )\n         \"\"\"\n         Regression test for #17911.\n         \"\"\"\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..23b8c9c 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -279,6 +281,25 @@ class ModelChoiceFieldTests(TestCase):\n         field = CustomModelChoiceField(Category.objects.all())\n         self.assertIsInstance(field.choices, CustomModelChoiceIterator)\n \n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        # Test if a ModelChoiceIteratorValue can be hashed\n+        try:\n+            hash_value_1 = hash(value_1)\n+            hash_value_2 = hash(value_2)\n+            self.assertIsInstance(hash_value_1, int)\n+            self.assertIsInstance(hash_value_2, int)\n+        except TypeError:\n+            self.fail(\"ModelChoiceIteratorValue instances should be hashable\")\n+        \n+        # Test if two different ModelChoiceIteratorValues have different hashes\n+        self.assertNotEqual(hash_value_1, hash_value_2)\n+\n+        # Test if two identical ModelChoiceIteratorValues have identical hashes\n+        value_1_duplicate = ModelChoiceIteratorValue(self.c1.pk, None)\n+        self.assertEqual(hash(value_1), hash(value_1_duplicate))\n+\n     def test_choice_iterator_passes_model_to_widget(self):\n         class CustomCheckboxSelectMultiple(CheckboxSelectMultiple):\n             def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n",
  "django__django-14999": "",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..8358daf 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -153,7 +153,51 @@ class ChangeListTests(TestCase):\n         cl = ia.get_changelist_instance(request)\n         self.assertEqual(cl.queryset.query.select_related, {'player': {}, 'band': {}})\n \n-    def test_result_list_empty_changelist_value(self):\n+    def test_many_words_leading_to_unnecessary_joins(self):\n+        \"\"\"\n+        Test that many search terms do not lead to unnecessary JOINs\n+        which cause the admin to stall due to excessive SQL complexity.\n+        \"\"\"\n+        parent = Parent.objects.create(name='Mary')\n+        Child.objects.create(parent=parent, name='Danielle')\n+        Child.objects.create(parent=parent, name='Daniel')\n+\n+        custom_site = AdminSite()\n+        m = ParentAdmin(Parent, custom_site)\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'daniel ' * 80})\n+        request.user = self.superuser\n+\n+        cl = m.get_changelist_instance(request)\n+        with CaptureQueriesContext(connection) as context:\n+            object_count = cl.queryset.count()\n+        self.assertEqual(object_count, 1)\n+        # Ensure that only a minimal number of JOINs are generated\n+        self.assertEqual(context.captured_queries[0]['sql'].count('JOIN'), 1)\n+\n+    def test_many_search_terms_applied_correctly(self):\n+        \"\"\"\n+        Ensure that searches with multiple terms work properly\n+        on a related model and return expected results without unnecessary joins.\n+        \"\"\"\n+        client = Client.objects.create(name='Primary Client')\n+        ClientOffice.objects.create(name='Main Office', client=client)\n+        ClientOffice.objects.create(name='Secondary Office', client=client)\n+\n+        custom_site = AdminSite()\n+        m = ClientAdmin(Client, custom_site)\n+\n+        request = self.factory.get('/client/', data={SEARCH_VAR: 'primary main'})\n+        request.user = self.superuser\n+        cl = m.get_changelist_instance(request)\n+\n+        # Test that queried result count is as expected\n+        object_count = cl.queryset.count()\n+        self.assertEqual(object_count, 1)\n+\n+        # Validate SQL join reduction\n+        with CaptureQueriesContext(connection) as context:\n+            cl.queryset.count()\n+        self.assertTrue(context.captured_queries[0]['sql'].count('JOIN') <= 2)\n         \"\"\"\n         Regression test for #14982: EMPTY_CHANGELIST_VALUE should be honored\n         for relationship fields\n",
  "django__django-15037": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 19402bb..6b646b7 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -195,15 +195,51 @@ class InspectDBTestCase(TestCase):\n             \"from_field = models.ForeignKey('InspectdbPeople', models.DO_NOTHING, db_column='from_id')\",\n             output,\n         )\n+\n+    def test_foreign_key_to_non_id_field(self):\n+        \"\"\"\n+        Test that foreign keys to non-primary key unique fields are correctly introspected.\n+        \"\"\"\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foreignkeytofield', stdout=out)\n+        output = out.getvalue()\n+        self.assertIn(\n+            \"to_field_fk = models.ForeignKey('InspectdbPeoplemoredata', models.DO_NOTHING, to_field='people_unique')\",\n+            output,\n+        )\n         self.assertIn(\n             'people_pk = models.OneToOneField(InspectdbPeople, models.DO_NOTHING, primary_key=True)',\n             output,\n         )\n+\n+    def test_foreign_key_to_non_id_field(self):\n+        \"\"\"\n+        Test that foreign keys to non-primary key unique fields are correctly introspected.\n+        \"\"\"\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foreignkeytofield', stdout=out)\n+        output = out.getvalue()\n+        self.assertIn(\n+            \"to_field_fk = models.ForeignKey('InspectdbPeoplemoredata', models.DO_NOTHING, to_field='people_unique')\",\n+            output,\n+        )\n         self.assertIn(\n             'people_unique = models.OneToOneField(InspectdbPeople, models.DO_NOTHING)',\n             output,\n         )\n \n+    def test_foreign_key_to_non_id_field(self):\n+        \"\"\"\n+        Test that foreign keys to non-primary key unique fields are correctly introspected.\n+        \"\"\"\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foreignkeytofield', stdout=out)\n+        output = out.getvalue()\n+        self.assertIn(\n+            \"to_field_fk = models.ForeignKey('InspectdbPeoplemoredata', models.DO_NOTHING, to_field='people_unique')\",\n+            output,\n+        )\n+\n     def test_digits_column_name_introspection(self):\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..cf0c5ce 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,6 +1,7 @@\n+\n from django.test import SimpleTestCase\n \n-from ..utils import setup\n+from django.utils.html import json_script\n \n \n class JsonScriptTests(SimpleTestCase):\n@@ -16,4 +17,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..cc66983 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2843,6 +2843,82 @@ class MigrationSuggestNameTests(SimpleTestCase):\n         migration = Migration('some_migration', 'test_app')\n         self.assertIs(migration.suggest_name().startswith('auto_'), True)\n \n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        from django.db import models\n+        from django.db.migrations.state import ModelState\n+        from django.db.migrations.autodetector import MigrationAutodetector\n+        \n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n+    def test_custom_fk_without_deconstruct_delete(self):\n+        from django.db import models\n+        from django.db.migrations.state import ModelState\n+        from django.db.migrations.autodetector import MigrationAutodetector\n+\n+        class NoDeleteDeconstructFK(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.NoDeleteModel'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                return super().deconstruct()\n+\n+        book_nodelete_fk_to = ModelState('testapp', 'Book', [\n+            ('author', NoDeleteDeconstructFK(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_nodelete_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n+    def test_custom_fk_with_different_hardcoded_models(self):\n+        from django.db import models\n+        from django.db.migrations.state import ModelState\n+        from django.db.migrations.autodetector import MigrationAutodetector\n+\n+        class AlteredHardcodedFK(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.AlteredModel'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        another_hardcoded_fk_to = ModelState('testapp', 'DifferentBook', [\n+            ('author', AlteredHardcodedFK(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, another_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='DifferentBook')\n+\n     def test_no_operations_initial(self):\n         class Migration(migrations.Migration):\n             initial = True\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..1604b06 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -368,16 +369,24 @@ class BaseTests:\n         tags = [msg.level_tag for msg in storage]\n         self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n \n+\n     @override_settings_tags(MESSAGE_TAGS={\n         constants.INFO: 'info',\n         constants.DEBUG: '',\n         constants.WARNING: '',\n         constants.ERROR: 'bad',\n-        29: 'custom',\n+        constants.SUCCESS: '',\n+        12: 'custom',\n     })\n-    def test_custom_tags(self):\n-        storage = self.get_storage()\n-        storage.level = 0\n-        add_level_messages(storage)\n+    def test_override_settings_level_tags_reflects_updated_tags(self):\n+        \"\"\"\n+        Test that LEVEL_TAGS is updated when MESSAGE_TAGS is overridden.\n+        \"\"\"\n+        self.assertEqual(base.LEVEL_TAGS[constants.INFO], 'info')\n+        self.assertEqual(base.LEVEL_TAGS[constants.DEBUG], '')\n+        self.assertEqual(base.LEVEL_TAGS[constants.WARNING], '')\n+        self.assertEqual(base.LEVEL_TAGS[constants.ERROR], 'bad')\n+        self.assertEqual(base.LEVEL_TAGS[constants.SUCCESS], '')\n+        self.assertEqual(base.LEVEL_TAGS[12], 'custom')\n         tags = [msg.tags for msg in storage]\n         self.assertEqual(tags, ['info', 'custom', 'extra-tag', '', 'bad', 'success'])\n",
  "django__django-15128": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a7bb7e8..e14c5ab 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -625,7 +625,17 @@ class Task(models.Model):\n         return self.title\n \n \n-class Staff(models.Model):\n+class Annotation(models.Model):\n+    tag = models.ForeignKey('Tag', on_delete=models.CASCADE)\n+\n+\n+class BaseUser(models.Model):\n+    annotation = models.ForeignKey(Annotation, on_delete=models.CASCADE)\n+\n+\n+class Task(models.Model):\n+    owner = models.ForeignKey(BaseUser, models.CASCADE, related_name='owned_tasks')\n+    creator = models.ForeignKey(BaseUser, models.CASCADE, related_name='created_tasks')\n     name = models.CharField(max_length=10)\n \n     def __str__(self):\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..4123a77 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1766,7 +1766,16 @@ class ValueTests(TestCase):\n         self.assertEqual(path, 'django.db.models.expressions.Value')\n         self.assertEqual(args, (value.value,))\n         self.assertEqual(kwargs, {})\n-\n+    \n+    def test_deconstruct_F(self):\n+        \"\"\"Test deconstructing F expressions to ensure simplified path is used.\"\"\"\n+        f = F('some_field')\n+        path, args, kwargs = f.deconstruct()\n+        # The path should be simplified 'django.db.models.F'\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('some_field',))\n+        self.assertEqual(kwargs, {})\n+        \n     def test_deconstruct_output_field(self):\n         value = Value('name', output_field=CharField())\n         path, args, kwargs = value.deconstruct()\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..32dcd68 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1762,6 +1762,30 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'newfield2')},\n         )\n \n+    def test_optimize_alter_foo_together(self):\n+        \"\"\"\n+        Test optimization of merging separate AlterFooTogether\n+        operations into single operations.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together_3],\n+            [self.author_empty, self.book_foo_together_5],\n+        )\n+        # Check the number/type of migrations.\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, \"otherapp\", 0, [\n+            \"AlterUniqueTogether\",\n+            \"AlterIndexTogether\",\n+        ])\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 0, name=\"book\",\n+            unique_together={(\"col1\", \"col2\")},\n+        )\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 1, name=\"book\",\n+            index_together={(\"col1\", \"col2\")},\n+        )\n+\n     def test_proxy(self):\n         \"\"\"The autodetector correctly deals with proxy models.\"\"\"\n         # First, we test adding a proxy model\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..e3fad4f 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,7 +1847,19 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n-    def test_resolve_output_field_failure(self):\n+    def test_output_field_does_not_create_extra_validators(self):\n+        \"\"\"\n+        Test that the Value._resolve_output_field() \n+        does not create unnecessary validators.\n+        \"\"\"\n+        value = Value('test')\n+        field = value._resolve_output_field()\n+        validators = [v for v in field.validators if isinstance(v, validators.MaxLengthValidator)]\n+        self.assertTrue(all(v.limit_value is not None for v in validators), \"Validators should not have None as limit_value.\")\n+        # Test with an integer as well, to verify no validators for non-str fields\n+        value_int = Value(100)\n+        field_int = value_int._resolve_output_field()\n+        self.assertFalse(any(isinstance(v, validators.MaxLengthValidator) for v in field_int.validators), \"No MaxLengthValidator should exist for non-string values.\")\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n             Value(object()).output_field\n",
  "django__django-15278": "",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..c7e0a8d 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -90,7 +90,29 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertIsNotNone(f1)\n         self.assertNotIn(f2, (None, 1, ''))\n \n-    def test_field_instance_is_picklable(self):\n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_hash_uniqueness_with_different_fields(self):\n+        field1 = models.IntegerField()\n+        field2 = models.IntegerField()\n+        self.assertNotEqual(hash(field1), hash(field2))\n+\n+    def test_hash_immutability_after_instance_creation(self):\n+        field = models.CharField(max_length=100)\n+        field_hash = hash(field)\n+\n+        class Author(models.Model):\n+            name = field\n+\n+        new_instance = Author(name='Example Author')\n+        self.assertEqual(field_hash, hash(field))\n         \"\"\"Field instances can be pickled.\"\"\"\n         field = models.Field(max_length=100, default='a string')\n         # Must be picklable with this cached property populated (#28188).\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..f053a8e 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,6 +204,18 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n+    def test_f_expression_with_bulk_update(self):\n+        # Create test instances\n+        self_refs = [SelfRef.objects.create(name=f'test_name_{i}') for i in range(10)]\n+        # Assign F('name') to c8 field\n+        for obj in self_refs:\n+            obj.c8 = F('name')\n+        # Perform a bulk update\n+        SelfRef.objects.bulk_update(self_refs, ['c8'])\n+        # Verify that the 'c8' field is updated to match 'name'\n+        for obj in self_refs:\n+            self.assertEqual(obj.c8, obj.name)\n+\n     def test_field_references(self):\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n",
  "django__django-15380": "",
  "django__django-15382": "",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..e684861 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -24,7 +24,9 @@ from django.db.models import (\n     ManyToManyField,\n     UUIDField,\n )\n-from django.test import SimpleTestCase, TestCase, override_settings\n+from django.test import SimpleTestCase, TestCase, RequestFactory, override_settings\n+from django.contrib import admin\n+from django.db import models\n from django.urls import reverse\n from django.utils import translation\n \n@@ -133,6 +135,26 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         )\n \n     def test_radio_fields_ForeignKey(self):\n+        class CustomModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"main_band\": admin.VERTICAL}\n+\n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == \"main_band\":\n+                    kwargs['empty_label'] = \"Custom empty label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        model_admin = CustomModelAdmin(Event, admin.site)\n+        field = Event._meta.get_field(\"main_band\")\n+\n+        # Test with blank = True\n+        field.blank = True\n+        form_field = model_admin.formfield_for_dbfield(field, request=None)\n+        self.assertEqual(form_field.empty_label, \"Custom empty label\")\n+\n+        # Test with blank = False\n+        field.blank = False\n+        form_field = model_admin.formfield_for_dbfield(field, request=None)\n+        self.assertIsNone(form_field.empty_label)\n         ff = self.assertFormfield(\n             Event,\n             \"main_band\",\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..ead275a 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -122,6 +122,34 @@ class OptimizerTests(SimpleTestCase):\n                     name=\"Foo\", options={\"verbose_name_plural\": \"Foozes\"}\n                 ),\n             ],\n+        )\n+\n+    def test_create_model_and_alter_model_managers_high_variation(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[(\"legacy\", models.Manager())],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                        (\"custom\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                        (\"custom\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n             [\n                 migrations.CreateModel(\n                     \"Foo\", fields=[], options={\"verbose_name_plural\": \"Foozes\"}\n@@ -129,6 +157,34 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_model_and_alter_model_managers_high_variation(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[(\"legacy\", models.Manager())],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                        (\"custom\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                        (\"custom\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..29f48c8 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,80 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+import os\n+from django.db import models\n+from django.core import management\n+from django.test import TestCase\n+\n+# Define the model classes used in the test case\n+\n+class Person(models.Model):\n+    name = models.CharField(max_length=255, unique=True)\n+\n+    def natural_key(self):\n+        return (self.name,)\n+\n+class NaturalKeyWithFKDependencyManager(models.Manager):\n+    def get_by_natural_key(self, name, author):\n+        return self.get(name=name, author__name=author)\n+\n+class NaturalKeyWithFKDependency(models.Model):\n+    name = models.CharField(max_length=255)\n+    author = models.ForeignKey(Person, models.CASCADE)\n+\n+    objects = NaturalKeyWithFKDependencyManager()\n+\n+    class Meta:\n+        unique_together = [\"name\", \"author\"]\n+\n+    def natural_key(self):\n+        return (self.name,) + self.author.natural_key()\n+\n+    natural_key.dependencies = [\"fixtures_regress.Person\"]\n+\n+# Test case to validate loading data with natural keys on a non-default database\n+\n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def setUp(self):\n+        # Create and use a second database for the test\n+        self.other_db = \"other\"\n+        management.call_command('migrate', database=self.other_db)\n+        \n+        # Create json fixture file\n+        self.fixture_data = [\n+            {\n+                \"model\": \"fixtures_regress.person\",\n+                \"fields\": {\"name\": \"J.R.R. Tolkien\"}\n+            },\n+            {\n+                \"model\": \"fixtures_regress.naturalkeywithfkdependency\",\n+                \"fields\": {\n+                    \"name\": \"The Lord of the Rings\",\n+                    \"author\": [\"J.R.R. Tolkien\"]\n+                }\n+            }\n+        ]\n+        with open('nk_with_foreign_key.json', 'w') as f:\n+            json.dump(self.fixture_data, f)\n+\n+    def tearDown(self):\n+        # Clean up fixture file\n+        os.remove('nk_with_foreign_key.json')\n+\n+    def test_natural_key_dependencies_on_other_db(self):\n+        \"\"\"Test that natural keys with foreign keys load correctly on a non-default database.\"\"\"\n+        management.call_command(\n+            \"loaddata\",\n+            \"nk_with_foreign_key.json\",\n+            database=self.other_db,\n+            verbosity=0,\n+        )\n+        obj = NaturalKeyWithFKDependency.objects.using(self.other_db).get()\n+        self.assertEqual(obj.name, \"The Lord of the Rings\")\n+        self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..5d10093 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,6 +3961,40 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n+    def test_alter_field_choices_noop_for_integer_field(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"age\")\n+        new_field = IntegerField(\n+            choices=((1, \"One\"), (2, \"Two\")),\n+        )\n+        new_field.set_attributes_from_name(\"age\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_choices_noop_for_text_field(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"bio\")\n+        new_field = TextField(\n+            choices=(\n+                (\"Short bio\", \"Short bio\"),\n+                (\"Detailed bio\", \"Detailed bio\"),\n+            ),\n+        )\n+        new_field.set_attributes_from_name(\"bio\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+        new_field.set_attributes_from_name(\"author\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Book, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Book, new_field, old_field, strict=True)\n+\n     def test_add_textfield_unhashable_default(self):\n         # Create the table\n         with connection.schema_editor() as editor:\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..feac327 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -325,8 +325,34 @@ class LookupTests(TestCase):\n             self.assertIn(\"exactly\", field.get_lookups())\n \n \n+from django.db.models import CharField, IntegerField, F, UniqueConstraint\n+from django.test import TestCase, skipUnlessDBFeature\n+from django.db.models.functions import Lower, Abs\n+from django.db import connection\n+from django.db.models.lookups import Transform\n+\n+# Assuming `Exactly` is a custom lookup that is defined for testing purposes.\n+class Exactly(models.Lookup):\n+    lookup_name = 'exactly'\n+    # ...\n+\n class BilateralTransformTests(TestCase):\n-    def test_bilateral_upper(self):\n+    def test_unregister_lookup_clears_cache(self):\n+        # Get a field to add/remove the lookup\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Ensure cache is clear initially\n+        field.get_lookups.cache_clear()\n+        self.assertNotIn('exactly', field.get_lookups())\n+\n+        # Register the Exactly lookup\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn('exactly', field.get_lookups())\n+\n+            # Unregister the Exactly lookup\n+            models.ForeignObject._unregister_lookup(Exactly)\n+            field.get_lookups.cache_clear()  # Manually clear cache to mimic _unregister_lookup behavior\n+            self.assertNotIn('exactly', field.get_lookups())\n         with register_lookup(models.CharField, UpperBilateralTransform):\n             author1 = Author.objects.create(name=\"Doe\")\n             author2 = Author.objects.create(name=\"doe\")\n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..a56c018 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -736,6 +737,38 @@ class ManagerTest(SimpleTestCase):\n             sorted(self.QUERYSET_PROXY_METHODS),\n         )\n \n+    def test_manager_bulk_create_signature(self):\n+        from django.db import models\n+        import inspect\n+\n+        class Person(models.Model):\n+            name = models.CharField(max_length=100)\n+\n+        # Expected signature for the bulk_create method\n+        expected_signature = \"(objs, batch_size=None, ignore_conflicts=False, \" \\\n+                             \"update_conflicts=False, update_fields=None, unique_fields=None)\"\n+\n+        # Actual signature obtained from inspect.signature\n+        actual_signature = str(inspect.signature(Person.objects.bulk_create))\n+\n+        # Assert that the actual signature matches the expected one\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_other_manager_methods_signature(self):\n+        from django.db import models\n+        import inspect\n+\n+        class TestModel(models.Model):\n+            test_field = models.CharField(max_length=100)\n+\n+        # Test signature for a different method, let's say the 'get' method\n+        # where traditionally, just `*args, **kwargs` might be shown.\n+        expected_signature_get = \"(args, kwargs)\"\n+        actual_signature_get = str(inspect.signature(TestModel.objects.get))\n+        self.assertEqual(actual_signature_get, expected_signature_get)\n+\n+        # Test more manager methods if needed...\n+\n \n class SelectOnSaveTests(TestCase):\n     def test_select_on_save(self):\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..0dd9950 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,4 +1,7 @@\n+\n from datetime import datetime, time\n+from django.utils.translation import gettext_lazy\n+from django.utils.formats import get_format\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n@@ -74,7 +77,21 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n-    def test_date(self):\n+    def test_get_format_lazy(self):\n+        # Test case to ensure that get_format works with a lazy formatted string\n+        # Assumes \"DATE_FORMAT\" maps to \"N j, Y\" if this locale is active\n+        result = get_format(gettext_lazy(\"DATE_FORMAT\"))\n+        self.assertEqual(result, \"N j, Y\")\n+\n+    def test_date_lazy_filter(self):\n+        \"\"\"\n+        Verifying that a lazy string used in the date filter doesn't throw an error and\n+        provides the expected output.\n+        \"\"\"\n+        template_code = '{{ t|date:_(\"H:i\") }}'\n+        context = {\"t\": time(0, 0)}\n+        output = self.engine.render_to_string(template_code, context)\n+        self.assertEqual(output, \"00:00\")\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n     def test_no_args(self):\n",
  "django__django-15814": "",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..14d9d2f 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -151,12 +151,40 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ),\n         )\n \n+    def test_additional_parameters_before_dbname(self):\n+        # This test case checks if additional parameters appear before the database name in the command\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n+    def test_no_additional_parameters(self):\n+        # This test case checks if the command is correctly formed with only the database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, []),\n+            ([\"psql\", \"dbname\"], None),\n+        )\n+\n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_additional_parameters_before_dbname(self):\n+        # This test case checks if additional parameters appear before the database name in the command\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n+    def test_no_additional_parameters(self):\n+        # This test case checks if the command is correctly formed with only the database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, []),\n+            ([\"psql\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..6a23ebe 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -31,6 +31,8 @@ class FloatformatTests(SimpleTestCase):\n         self.assertEqual(output, \"1.4 1.4\")\n \n \n+from decimal import Decimal\n+\n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n         self.assertEqual(floatformat(7.7), \"7.7\")\n@@ -74,6 +76,31 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n+    def test_floatformat_decimal_precision(self):\n+        # Test case from the original issue to check if precision is maintained\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\",\n+        )\n+        # Original test patch verifying that precision is maintained for more decimal places\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+        # Additional test cases for varying decimal points\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.000000000000000000123456\"), 25),\n+            \"0.000000000000000000123456\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"-10.0000000000000001\"), 20),\n+            \"-10.00000000000000010000\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.1\"), 5),\n+            \"0.10000\",\n+        )\n+\n     def test_force_grouping(self):\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..8586e43 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -415,7 +415,16 @@ class CaseExpressionTests(TestCase):\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n-    def test_combined_expression(self):\n+    def test_annotate_with_negated_empty_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        # Verifying all objects are annotated with \"selected\"\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n         self.assertQuerysetEqual(\n             CaseTestModel.objects.annotate(\n                 test=Case(\n",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..fcdf870 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -9,6 +10,7 @@ from django.core import management, serializers\n from django.core.exceptions import ImproperlyConfigured\n from django.core.serializers.base import DeserializationError\n from django.db import IntegrityError, transaction\n+from pathlib import Path\n from django.db.models import signals\n from django.test import (\n     TestCase,\n@@ -556,7 +558,23 @@ class TestFixtures(TestCase):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n     @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, \"fixtures\")])\n-    def test_fixture_dirs_with_default_fixture_path(self):\n+    @override_settings(\n+        FIXTURE_DIRS=[\n+            Path(_cur_dir) / \"fixtures\",\n+            Path(_cur_dir) / \"fixtures_duplicate\"\n+        ]\n+    )\n+    def test_fixture_dirs_with_pathlib_duplicates(self):\n+        \"\"\"\n+        Test that duplicate detection works with Path instances in FIXTURE_DIRS.\n+        Expect an ImproperlyConfigured error when duplicate fixture directories are present.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a duplicate fixture directory in settings.FIXTURE_DIRS.\"\n+            % os.path.join(str(Path(_cur_dir) / \"fixtures_duplicate\"))\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"duplicate.json\", verbosity=0)\n         \"\"\"\n         settings.FIXTURE_DIRS cannot contain a default fixtures directory\n         for application (app/fixtures) in order to avoid repeated fixture loading.\n",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..4a29695 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,24 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n@@ -1001,6 +1019,24 @@ class NonAggregateAnnotationTestCase(TestCase):\n             .values_list(\"max_pubdate\", flat=True)\n             .order_by(\"max_pubdate\")\n         )\n+        self.assertCountEqual(\n+            publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n+        )\n+\n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n         self.assertCountEqual(\n             qs,\n             [\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..387c93f 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2415,8 +2415,31 @@ class CombinedExpressionTests(SimpleTestCase):\n             (DecimalField, IntegerField, DecimalField),\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n+            (IntegerField, IntegerField, IntegerField),  # Integer MOD Integer should result in Integer\n+            (IntegerField, DecimalField, DecimalField),  # Integer MOD Decimal should result in Decimal\n+            (DecimalField, IntegerField, DecimalField),  # Decimal MOD Integer should result in Decimal\n+            (DecimalField, DecimalField, DecimalField),  # Decimal MOD Decimal should result in Decimal\n+            (FloatField, IntegerField, FloatField),      # Float MOD Integer should result in Float\n+            (IntegerField, FloatField, FloatField),      # Integer MOD Float should result in Float\n+        ]\n+\n+        # Ensure MOD operation resolves output types correctly\n+        connectors = [Combinable.MOD]\n+        for lhs, rhs, combined in tests:\n+            with self.subTest(lhs=lhs, connector=Combinable.MOD, rhs=rhs, combined=combined):\n+                expr = CombinedExpression(\n+                    Expression(lhs()),\n+                    Combinable.MOD,\n+                    Expression(rhs()),\n+                )\n+                self.assertIsInstance(expr.output_field, combined)\n+        connectors = [\n+            Combinable.ADD,\n+            Combinable.SUB,\n+            Combinable.MUL,\n+            Combinable.DIV,\n+            Combinable.MOD,  # Added MOD to be tested\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..a038339 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2379,6 +2379,28 @@ class MakeMigrationsTests(MigrationTestBase):\n             )\n             self.assertIn(\"operations=[]\" if HAS_BLACK else \"operations=[\\n]\", content)\n \n+    def test_makemigrations_dry_run_check(self):\n+        \"\"\"\n+        makemigrations --check --dry-run should exit with a zero status when\n+        there are changes to an app requiring migrations, but no migrations should be created.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", \"--dry-run\", \"migrations\", verbosity=0)\n+            self.assertEqual(cm.exception.code, 1)  # Should exit with status 1 if there are changes.\n+            self.assertFalse(os.path.exists(tmpdir))  # Migration files should not be created.\n+\n+    def test_makemigrations_no_changes_check(self):\n+        \"\"\"\n+        makemigrations --check should exit with a zero status when there are no changes.\n+        \"\"\"\n+        with self.temporary_migration_module(\n+            module=\"migrations.test_migrations_no_changes\"\n+        ):\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            self.assertEqual(cm.exception.code, 0)  # Should exit with status 0 when no changes detected.\n+\n     def test_makemigrations_with_invalid_custom_name(self):\n         msg = \"The migration name must be a valid Python identifier.\"\n         with self.assertRaisesMessage(CommandError, msg):\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..c9f5cfd 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,7 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory\n+import asyncio\n from django.test import SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n@@ -119,7 +122,39 @@ class ViewTests(SimpleTestCase):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n-    def test_base_view_class_is_sync(self):\n+    class SyncView(View):\n+        \"\"\"A synchronous view.\"\"\"\n+\n+        def post(self, request):\n+            return HttpResponse(\"Hello, world\")\n+\n+    class AsyncView(View):\n+        \"\"\"An asynchronous view.\"\"\"\n+\n+        async def post(self, request):\n+            return HttpResponse(\"Hello, async world\")\n+\n+    def test_http_method_not_allowed_responds_correctly(self):\n+        \"\"\"Test that HttpResponseNotAllowed is correctly returned from the view.\"\"\"\n+        request_factory = RequestFactory()\n+        tests = [\n+            (self.SyncView, False),\n+            (self.AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.get(\"/\"))\n+                \n+                # Check if the response is a coroutine or not based on the view\n+                self.assertIs(asyncio.iscoroutine(response), is_coroutine)\n+\n+                if is_coroutine:\n+                    # If the response is a coroutine, run it to get the actual response\n+                    response = asyncio.run(response)\n+\n+                # Ensure the response is an instance of HttpResponseNotAllowed\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n         sync.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..c1d805b 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,4 +1,7 @@\n+\n import datetime\n+import urllib.parse\n+from django.urls import reverse\n import re\n from unittest import mock\n \n@@ -892,7 +895,25 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n-    def test_custom_form(self):\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field_uuid(self):\n+        user = User.objects.create_user(username=\"testuuid\", password=\"testpassword\", uuid=\"22222222-3333-4444-5555-666677778888\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+        \n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.uuid,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n                 model = ExtensionUser\n",
  "django__django-16145": "",
  "django__django-16255": "",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..7acf2f3 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,11 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class ActivityBlackListed(models.Model):\n+    blacklistid = models.IntegerField(primary_key=True, db_column=\"BlacklistID\")\n+    sectorid = models.IntegerField(null=True, blank=True, db_column=\"SectorID\")\n+    name = models.CharField(max_length=100, db_column=\"Name\")\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..d94c3aa 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -252,7 +254,61 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n-    def test_password_whitespace_not_stripped(self):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_saves_many_to_many_field_no_organization(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [])\n+\n+    def test_custom_form_saves_many_to_many_field_multiple_organizations(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization1 = Organization.objects.create(name=\"organization 1\")\n+        organization2 = Organization.objects.create(name=\"organization 2\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization1.pk), str(organization2.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization1, organization2])\n         data = {\n             \"username\": \"testuser\",\n             \"password1\": \"   testpassword   \",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..514faaf 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,6 +161,13 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n+\n     def test_naive_datetime_with_tzinfo_attribute(self):\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n",
  "django__django-16454": "",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..fffa6a2 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -104,6 +104,11 @@ class FunctionTests(SimpleTestCase):\n             # Invalid suffix.\n             self.assertEqual(floatformat(66666.666, \"u2\"), \"66666.666\")\n \n+    def test_issue_with_zero_zero_input(self):\n+        # Test cases based on the reported issue.\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+\n     def test_zero_values(self):\n         self.assertEqual(floatformat(0, 6), \"0.000000\")\n         self.assertEqual(floatformat(0, 7), \"0.0000000\")\n@@ -112,6 +117,17 @@ class FunctionTests(SimpleTestCase):\n             floatformat(0.000000000000000000015, 20), \"0.00000000000000000002\"\n         )\n \n+    def test_various_zero_formats(self):\n+        # Adding more test cases for various representations of zero both as string and Decimal.\n+        self.assertEqual(floatformat(\"0000.000\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.000\"), 0), \"0\")\n+        self.assertEqual(floatformat(\"0\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0\"), 0), \"0\")\n+\n+        # Also test with negative decimal_places\n+        self.assertEqual(floatformat(\"0.00\", -1), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), -1), \"0\")\n+\n     def test_negative_zero_values(self):\n         tests = [\n             (-0.01, -1, \"0.0\"),\n",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..b6d4ca1 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,6 +1018,16 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_default_storage)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..7fd4012 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n+from .tests import AdminViewBasicTestCase, get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n@@ -33,6 +36,41 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test that 'show_save_as_new' only appears when the user has 'add' permission.\n+        \"\"\"\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_show_save_and_add_another(self):\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..6625ec4 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -108,6 +108,13 @@ class BaseConstraintTests(SimpleTestCase):\n         self.assertEqual(c.get_violation_error_message(), \"custom name message\")\n \n \n+from django.core.exceptions import ValidationError\n+from django.db import models\n+from django.db.models import F, Q\n+from django.test import TestCase\n+from tests.models import Product, UniqueConstraintProduct, UniqueConstraintConditionProduct, ChildUniqueConstraintProduct\n+from tests.postgres_tests.models import RangesModel\n+\n class CheckConstraintTests(TestCase):\n     def test_eq(self):\n         check1 = models.Q(price__gt=models.F(\"discounted_price\"))\n@@ -237,7 +244,41 @@ class CheckConstraintTests(TestCase):\n         # Valid product.\n         constraint.validate(Product, Product(price=10, discounted_price=5))\n \n-    def test_validate_boolean_expressions(self):\n+    def test_violation_error_code_base_constraint(self):\n+        constraint = BaseConstraint(\n+            name=\"base_name\",\n+            violation_error_code=\"custom_code\"\n+        )\n+        self.assertEqual(\n+            constraint.violation_error_code,\n+            \"custom_code\",\n+        )\n+\n+    def test_violation_error_code_check_constraint(self):\n+        constraint = models.CheckConstraint(\n+            check=models.Q(price__gt=models.F(\"discounted_price\")),\n+            name=\"price\",\n+            violation_error_code=\"fake_discount\",\n+        )\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"fake_discount\")\n+\n+    def test_violation_error_code_unique_constraint(self):\n+        constraint_1 = models.UniqueConstraint(\n+            fields=[\"foo\", \"bar\"],\n+            name=\"unique\",\n+            violation_error_code=\"custom_error\",\n+        )\n+        constraint_2 = models.UniqueConstraint(\n+            fields=[\"foo\", \"bar\"],\n+            name=\"unique\",\n+            violation_error_code=\"other_custom_error\",\n+        )\n+        self.assertNotEqual(constraint_1, constraint_2)\n+        self.assertEqual(constraint_1.violation_error_code, \"custom_error\")\n+        self.assertEqual(constraint_2.violation_error_code, \"other_custom_error\")\n         constraint = models.CheckConstraint(\n             check=models.expressions.ExpressionWrapper(\n                 models.Q(price__gt=500) | models.Q(price__lt=500),\n",
  "django__django-16569": "",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..190ff0e 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,7 +43,89 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n-    def test_none_app_label(self):\n+    def _test_alter_alter(self, alter_first, alter_second):\n+        \"\"\"\n+        This helper function tests that two subsequent AlterField operations \n+        collapse into the second operation.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [alter_first, alter_second],\n+            [alter_second],\n+        )\n+\n+    def test_alter_alter_field(self):\n+        \"\"\"\n+        Test that two AlterField operations on the same field optimize correctly \n+        to the last one.\n+        \"\"\"\n+        self._test_alter_alter(\n+            migrations.AlterField(\"Foo\", \"name\", models.IntegerField()),\n+            migrations.AlterField(\"Foo\", \"name\", models.IntegerField(help_text=\"help\")),\n+        )\n+\n+    def test_alter_chain_field(self):\n+        \"\"\"\n+        Test that multiple subsequent AlterField operations cannot be reduced\n+        when separated from an AddField operation.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterField(\n+                \"book\", \n+                \"title\", \n+                models.CharField(max_length=128, null=True)\n+            ),\n+            migrations.AlterField(\n+                \"book\", \n+                \"title\", \n+                models.CharField(max_length=128, null=True, help_text=\"help\")\n+            ),\n+            migrations.AlterField(\n+                \"book\", \n+                \"title\", \n+                models.CharField(max_length=128, null=True, help_text=\"help\", default=None)\n+            ),\n+        ]\n+        self.assertDoesNotOptimize(operations)\n+\n+    def test_alter_no_reduction_with_add(self):\n+        \"\"\"\n+        Test that if AddField is initially in the list, all AlterFields are reduced to the last one.\n+        \"\"\"\n+        operations = [\n+            migrations.AddField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=256, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+        expected = [\n+            migrations.AddField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=256, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+        self.assertOptimizesTo(operations, expected)\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n             optimizer.optimize([], None)\n",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..cebfe45 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8481,8 +8481,8 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n-    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n-    def test_missing_slash_append_slash_true_force_script_name(self):\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_query_string_preservation(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n             password=\"secret\",\n@@ -8491,10 +8491,29 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n-        response = self.client.get(known_url[:-1])\n+        response = self.client.get(f\"{known_url[:-1]}?id=123\")\n         self.assertRedirects(\n             response,\n-            \"/prefix\" + known_url,\n+            f\"{known_url}?id=123\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_complex_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        complex_query = \"id=123&name=test&active=true\"\n+        response = self.client.get(f\"{known_url[:-1]}?{complex_query}\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?{complex_query}\",\n             status_code=301,\n             fetch_redirect_response=False,\n         )\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..d7f48e5 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -255,6 +255,8 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".br\", \"application/x-brotli\"),\n+            (\".Z\", \"application/x-compress\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..468b603 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,57 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+        \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_disallowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), False)\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..1b61a5c 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -921,8 +921,30 @@ class WriterTests(SimpleTestCase):\n             \"import datetime\\nfrom django.db import migrations, models\\n\",\n             output,\n         )\n-\n-    def test_migration_file_header_comments(self):\n+    def test_generated_migration_import_ordering(self):\n+        \"\"\"\n+        Test that generated migrations have properly sorted import statements.\n+        This ensures 'import module' lines appear before 'from module import objects'.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..c54cdef 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -798,8 +798,9 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[1]' is not a callable, an attribute \"\n-                \"of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is \"\n+                \"not a callable, an attribute of 'SongAdmin', or an attribute of \"\n+                \"'admin_checks.Song'.\",\n                 obj=SongAdmin,\n                 id=\"admin.E035\",\n             )\n@@ -814,8 +815,9 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = CityInline(State, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[0]' is not a callable, an attribute \"\n-                \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is \"\n+                \"not a callable, an attribute of 'CityInline', or an attribute of \"\n+                \"'admin_checks.City'.\",\n                 obj=CityInline,\n                 id=\"admin.E035\",\n             )\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..52748a0 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -37,6 +38,26 @@ class XorLookupsTests(TestCase):\n             self.numbers[:2] + self.numbers[3:8],\n         )\n \n+    def test_parity_xor(self):\n+        # Test with three conditions where an odd number of them are true.\n+        qs = Number.objects.filter(\n+            Q(num=1) ^ Q(num=3) ^ Q(num=5)\n+        )\n+        # num=1, num=3, num=5 are all true, so 3 true evaluations mean it should return empty due to XOR parity logic.\n+        self.assertCountEqual(qs, [])\n+\n+        qs = Number.objects.filter(\n+            Q(num=1) ^ Q(num=2) ^ Q(num=5)\n+        )\n+        # Only num=2 and num=5 are true, an even count, it should return number 1.\n+        self.assertCountEqual(qs, [self.numbers[1]])\n+\n+        qs = Number.objects.filter(\n+            Q(num__lte=2) ^ Q(num=4) ^ Q(num=6)\n+        )\n+        # num__lte=2 is [0,1,2], num=4, num=6 \u2192 1, 4, 6 should return 5 and 1 the only one true.\n+        self.assertCountEqual(qs, [self.numbers[5], self.numbers[1]])\n+\n     def test_exclude(self):\n         self.assertCountEqual(\n             Number.objects.exclude(Q(num__lte=7) ^ Q(num__gte=3)),\n@@ -64,4 +85,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..e49ca10 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -535,7 +535,32 @@ class WriterTests(SimpleTestCase):\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(string, \"models.FilePathField(path=%r)\" % path_like.path)\n \n-    def test_serialize_functions(self):\n+    def test_nested_class_method_as_field_default(self):\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = (\"BASIC\", \"Basic\")\n+                PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = models.ArrayField(\n+                models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+                null=True,\n+                default=Capability.default\n+            )\n+\n+        field = Profile._meta.get_field('capabilities')\n+        \n+        string, imports = MigrationWriter.serialize(field)\n+        expected_default = (\n+            \"app.models.Profile.Capability.default\",\n+            {\"import app.models\"}\n+        )\n+        self.assertEqual(imports, {\"from django.db import models\"})\n+        self.assertIn(expected_default[0], string)\n+        self.assertIn(expected_default[1], str(string))\n         with self.assertRaisesMessage(ValueError, \"Cannot serialize function: lambda\"):\n             self.assertSerializedEqual(lambda x: 42)\n         self.assertSerializedEqual(models.SET_NULL)\n@@ -1032,4 +1057,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..892ec09 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,7 +641,28 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n-    def test_failing_migration(self):\n+    def test_makemigrations_correct_app_model_pairs(self):\n+        \"\"\"\n+        Test that makemigrations only calls allow_migrate with correct\n+        app_label and its own model pairs.\n+        \"\"\"\n+        with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n+            with mock.patch('migrations.routers.TestRouter.allow_migrate', return_value=True) as allow_migrate:\n+                with self.temporary_migration_module() as migration_dir:\n+                    call_command(\"makemigrations\", \"migrations\", verbosity=0)\n+                    initial_file = os.path.join(migration_dir, \"0001_initial.py\")\n+                    self.assertTrue(os.path.exists(initial_file))\n+\n+                # Ensure allow_migrate was called with correct app_label, model_name.\n+                for mock_call in allow_migrate.mock_calls:\n+                    _, call_args, call_kwargs = mock_call\n+                    connection_alias, app_label = call_args\n+                    self.assertIn(connection_alias, ['default', 'other'])\n+                    model_name = call_kwargs.get('model_name')\n+                    if app_label == 'migrations2':\n+                        self.assertNotIn(model_name, ['UnicodeModel'])\n+                    elif app_label == 'migrations':\n+                        self.assertIn(model_name, ['UnicodeModel'])\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n \n",
  "django__django-9296": "",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..4f2649f 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,35 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import matplotlib.pyplot as plt\n+import numpy as np\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    # Original test case derived from the issue report\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_density_with_integers():\n+    # Additional test case: Use a range with data containing integers\n+    np.random.seed(0)\n+    _, bins, _ = plt.hist(np.random.randint(0, 100, 1000), bins=10, range=(0, 100), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 100\n+\n+def test_hist_range_density_on_edge():\n+    # Additional test case: Check the behavior on edge values\n+    data = [0, 0.5, 1]\n+    _, bins, _ = plt.hist(data, bins=5, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_density_floats():\n+    # Additional test case: Check with floating point data and range\n+    data = np.random.uniform(-1, 1, 1000)\n+    _, bins, _ = plt.hist(data, bins=20, range=(-1, 1), density=True)\n+    assert bins[0] == -1\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6395,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..048ed53 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -939,7 +939,22 @@ def test_inverted_limits():\n     plt.close()\n \n \n-@image_comparison(baseline_images=['nonfinite_limits'])\n+def test_invert_log_scale_axis():\n+    # Test inverting the y-axis on a log scale\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    # Verify the limits are correctly inverted\n+    assert ax.get_ylim() == (10, 1)\n+    plt.close()\n+\n+    # Test inverting the x-axis on a log scale\n+    fig, ax = plt.subplots()\n+    ax.set_xscale(\"log\")\n+    ax.set_xlim(10, 1)\n+    # Verify the limits are correctly inverted\n+    assert ax.get_xlim() == (10, 1)\n+    plt.close()\n def test_nonfinite_limits():\n     x = np.arange(0., np.e, 0.01)\n     # silence divide by zero warning from log(0)\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..aa42a05 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,6 +6960,26 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    \n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure without clearing axes\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure with clearing axes before plotting\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()  # clear the axes\n+        ax.plot(x, y)  # re-plot on the cleared axes\n \n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..6e639a8 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -307,8 +307,24 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n         assert y_units is ax.yaxis.units\n \n \n-def test_hist():\n+def test_empty_data_with_convert_xunits():\n+    \"\"\"\n+    Test that using ax.convert_xunits with an empty array does not raise warnings\n+    or exceptions. Handles the edge case with empty data structures.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    import pytest\n+\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+\n+    with pytest.warns(None) as record:\n+        # This should not raise a warning or exception\n+        ax.convert_xunits([])\n+\n+    # Assert that no warnings were captured\n+    assert len(record) == 0, \"Deprecation warning was emitted on empty convert_xunits.\"\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..71237d6 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -919,6 +919,41 @@ def test_proportional_colorbars():\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import matplotlib.colors as mcolors\n+from matplotlib.colorbar import Colorbar\n+\n+@pytest.mark.parametrize(\"extend, coloroffset, expected_segments\", [\n+    ('both', 1, [\n+        np.array([[0., 0.], [0., 1.]]),\n+        np.array([[1., 0.], [1., 1.]]),\n+        np.array([[2., 0.], [2., 1.]])\n+    ]),\n+    ('min', 0, [\n+        np.array([[0., 0.], [0., 1.]]),\n+        np.array([[1., 0.], [1., 1.]])\n+    ]),\n+    ('max', 0, [\n+        np.array([[1., 0.], [1., 1.]]),\n+        np.array([[2., 0.], [2., 1.]])\n+    ]),\n+    ('neither', -1, [\n+        np.array([[1., 0.], [1., 1.]])\n+    ])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, expected_segments):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal', drawedges=True)\n+    assert np.all(np.equal(cbar.dividers.get_segments(), expected_segments))\n+\n def test_negative_boundarynorm():\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..d515293 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,21 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+def test_get_backend_with_rc_context():\n+    # Test to ensure get_backend doesn't clear figures when first created in rc_context\n+    with rc_context():\n+        fig1 = plt.figure()  # Create a figure in rc_context\n+\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()  # Call get_backend\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    assert before == after, f'Figures removed after get_backend call:\\n{before}\\n{after}'\n+\n+import pytest\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..c8708c0 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -17,6 +17,8 @@ import matplotlib.pyplot as plt\n import numpy as np\n \n \n+from matplotlib.testing.decorators import check_figures_equal\n+\n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n@@ -28,7 +30,22 @@ def test_aspect_equal_error():\n         ax.set_aspect('equal')\n \n \n-@mpl3d_image_comparison(['bar3d.png'])\n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_false_3d(fig_test, fig_ref):\n+    ax1 = fig_test.add_subplot(121, projection='3d')\n+    ax2 = fig_test.add_subplot(122, projection='3d')\n+    ax1.scatter(1, 1, 1)\n+    ax2.scatter(1, 1, 1, c='r')\n+    ax1.set_visible(False)\n+\n+    # Reference subplot should have only the second plot\n+    ax_ref = fig_ref.add_subplot(122, projection='3d')\n+    ax_ref.scatter(1, 1, 1, c='r')\n+\n+    # Ensure only the second plot is rendered, matching the reference\n+    assert len(fig_test.axes) == 2\n+    assert not fig_test.axes[0].get_visible()\n+    assert fig_test.axes[1].get_visible()\n def test_bar3d():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..34e4870 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -148,8 +148,28 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_test.set_angle(angle)\n     assert rect_test.get_angle() == angle\n \n+from matplotlib.testing.decorators import check_figures_equal\n \n-def test_negative_rect():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_dash_offset_patch_rect(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    # Reference rectangle without dash offset\n+    rect_ref = Rectangle((0.5, 0.5), 1, 1, linewidth=4, edgecolor='b', linestyle=(0, (10, 10)))\n+    # Reference rectangle with dash offset\n+    rect_ref2 = Rectangle((0.5, 0.5), 1, 1, linewidth=4, edgecolor='r', linestyle=(10, (10, 10)))\n+\n+    ax_ref.add_patch(rect_ref)\n+    ax_ref.add_patch(rect_ref2)\n+\n+    # Test rectangle without dash offset\n+    rect_test = Rectangle((0.5, 0.5), 1, 1, linewidth=4, edgecolor='b', linestyle=(0, (10, 10)))\n+    # Test rectangle with dash offset\n+    rect_test2 = Rectangle((0.5, 0.5), 1, 1, linewidth=4, edgecolor='r', linestyle=(10, (10, 10)))\n+\n+    ax_test.add_patch(rect_test)\n+    ax_test.add_patch(rect_test2)\n     # These two rectangles have the same vertices, but starting from a\n     # different point.  (We also drop the last vertex, which is a duplicate.)\n     pos_vertices = Rectangle((-3, -2), 3, 2).get_verts()[:-1]\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..7d34ec5 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,29 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pytest\n+from matplotlib.patches import Rectangle\n+\n+@pytest.mark.parametrize(\"colors, expected_color, stack_colors\", [\n+    (['C0', 'C1', 'C2'], ['C0', 'C1', 'C2'], ['C2', 'C3', 'C4']),\n+])\n+def test_stackplot_does_not_change_axes_cycler(colors, expected_color, stack_colors):\n+    # Prepare the data\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+\n+    # Set initial colors\n+    line1, = ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+\n+    # Perform stackplot\n+    ax.stackplot([1, 2, 3], my_data, colors=stack_colors)\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+    # Check the colors of the Axes property after stackplot to ensure they remain unchanged\n+    assert line1.get_color() == 'C0'\n+    assert ax.patches[0].get_facecolor() == plt.gca()._get_lines.get_next_color()\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..ecbc9bf 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -12,6 +12,7 @@ import matplotlib.lines as mlines\n from matplotlib.backend_bases import MouseButton, MouseEvent\n \n from matplotlib.offsetbox import (\n+    HPacker, VPacker, DrawingArea,\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n     OffsetImage, TextArea, _get_packed_offsets)\n \n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..db778b2 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,21 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+import pytest\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+import matplotlib.colors as mcolors\n+import matplotlib as mpl\n+\n+@pytest.mark.parametrize(\"value\", [257, 256, 258, -1, 0, 255])\n+def test_cmap_no_deprecation_warnings(value):\n+    cm = plt.get_cmap(\"viridis\")\n+    with pytest.warns(None) as record:\n+        cm(np.array([value], dtype=np.uint8))\n+    # Check that no warning was raised\n+    assert len(record) == 0\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..05b79dc 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -581,7 +581,41 @@ class TestSpectral:\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n-    def test_psd_window_hanning(self):\n+    def test_psd_window_flattop(self):\n+        self.NFFT_density = 512\n+        np.random.seed(0)\n+        self.y = np.random.normal(0, 1, 1024)\n+        self.Fs = 10\n+\n+        # Generate the flattop window as described in the issue\n+        a = [0.21557895, 0.41663158, 0.277263158, 0.083578947, 0.006947368]\n+        fac = np.linspace(-np.pi, np.pi, self.NFFT_density)\n+        win = np.zeros(self.NFFT_density)\n+        for k in range(len(a)):\n+            win += a[k] * np.cos(k * fac)\n+\n+        # Perform PSD using the window\n+        spec, fsp = mlab.psd(x=self.y,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             window=win,\n+                             scale_by_freq=True)\n+        \n+        # Same PSD calculation without flattop window correction\n+        spec_a, fsp_a = mlab.psd(x=self.y,\n+                                 NFFT=self.NFFT_density,\n+                                 Fs=self.Fs,\n+                                 noverlap=0,\n+                                 window=win,\n+                                 scale_by_freq=False)\n+\n+        # Testing the derived window sums vs numpy sums, should be near zero\n+        numpy_sum_difference = np.abs(win).sum()**2 - win.sum()**2\n+        assert_allclose(numpy_sum_difference, 0, atol=1e-8)\n+\n+        # Validate the spectra with the window correction\n+        assert_allclose(spec * win.sum()**2, spec_a * self.Fs * (win**2).sum(), atol=1e-8)\n         if self.NFFT_density is None:\n             return\n         ydata = np.arange(self.NFFT_density)\n@@ -615,7 +649,7 @@ class TestSpectral:\n                                  noverlap=0,\n                                  sides=self.sides,\n                                  window=mlab.window_none)\n-        spec_c *= len(ycontrol1)/(np.abs(windowVals)**2).sum()\n+        spec_c *= len(ycontrol1)/(windowVals**2).sum()\n         assert_array_equal(fsp_g, fsp_c)\n         assert_array_equal(fsp_b, fsp_c)\n         assert_allclose(spec_g, spec_c, atol=1e-08)\n@@ -662,7 +696,7 @@ class TestSpectral:\n                                  noverlap=0,\n                                  sides=self.sides,\n                                  window=mlab.window_none)\n-        spec_c *= len(ycontrol1)/(np.abs(windowVals)**2).sum()\n+        spec_c *= len(ycontrol1)/(windowVals**2).sum()\n         assert_array_equal(fsp_g, fsp_c)\n         assert_array_equal(fsp_b, fsp_c)\n         assert_allclose(spec_g, spec_c, atol=1e-08)\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..8917528 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,9 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..7a434be 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,50 @@\n+\n+import pickletools\n+\n+def test_pickle_figure_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([1, 2], [3, 4], label='Line')\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+    \n+    # Serialize the figure using pickle\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Verify that 'FigureCanvasAgg' is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    # Deserialize the figure\n+    loaded_fig = pickle.loads(pkl)\n+    \n+    # Ensure the figure is loaded as expected by comparing some properties\n+    assert loaded_fig.axes[0].get_legend().get_draggable()\n+\n+    plt.close(fig)\n+    plt.close(loaded_fig)\n+\n+\n+def test_pickle_figure_with_draggable_annotation():\n+    fig, ax = plt.subplots()\n+    line, = ax.plot([1, 2], [3, 4])\n+    annot = ax.annotate('Test', xy=(1, 3))\n+    annot.draggable = True  # Mock setting draggable, assuming this attribute exists\n+\n+    # Serialize the figure using pickle\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Verify that 'FigureCanvasAgg' is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Deserialize the figure\n+    loaded_fig = pickle.loads(pkl)\n+    \n+    # Ensure the figure is loaded as expected\n+    # Assertion checks might vary based on what draggable attributes are exposed for annotations\n+    assert hasattr(loaded_fig.axes[0].texts[0], 'draggable')\n+\n+    plt.close(fig)\n+    plt.close(loaded_fig)\n+\n from io import BytesIO\n import ast\n import pickle\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..77b234f 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -44,6 +44,10 @@ def test_simple():\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n \n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n+\n def _generate_complete_test_figure(fig_ref):\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n@@ -90,8 +94,49 @@ def _generate_complete_test_figure(fig_ref):\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n \n-@mpl.style.context(\"default\")\n+def test_pickle_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+    \n+    fig.align_labels()  # Align labels before pickling\n+\n+    # Try to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        # Successfully pickled if no exception is raised\n+        assert pickle_data is not None\n+    except Exception as e:\n+        assert False, f\"Pickling failed with exception: {e}\"\n @check_figures_equal(extensions=[\"png\"])\n+def test_pickle_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+    \n+    fig.align_labels()  # Align labels before pickling\n+\n+    # Try to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        # Successfully pickled if no exception is raised\n+        assert pickle_data is not None\n+    except Exception as e:\n+        assert False, f\"Pickling failed with exception: {e}\"\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n     # plotting is done, now test its pickle-ability\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..cee8329 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -992,6 +992,70 @@ def test_hexbin_linear():\n               reduce_C_function=np.sum)\n \n \n+import pytest\n+from matplotlib.testing.decorators import check_figures_equal\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+...\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_with_diff_values(fig_test, fig_ref):\n+    # Test with mincnt=0 and mincnt=2 to verify both behaviors\n+    X = np.array([0, 2, 3, 4, 4, 5])\n+    Y = np.array([0, 1, 2, 3, 4, 5])\n+    Z = np.array([1, 1, 1, 1, 1, 1])\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # Test with mincnt set to 0\n+    ax_ref.hexbin(X, Y, C=Z, reduce_C_function=np.sum, mincnt=0, gridsize=5)\n+    ax_test.hexbin(X, Y, mincnt=0, gridsize=5)\n+\n+    # Test with mincnt set to 2\n+    ax_test.hexbin(X, Y, C=Z, reduce_C_function=np.sum, mincnt=2, gridsize=5)\n+    ax_ref.hexbin(X, Y, mincnt=2, gridsize=5)\n+\n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..b2811b3 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,47 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_set_paths_with_same_data(fig_test, fig_ref):\n+    # Create the test contour with the same data to ensure set_paths doesn't alter visuals\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    \n+    z = [[0, 1], [1, 2]]\n+    cs_test = ax_test.contour(z)\n+    cs_ref = ax_ref.contour(z)\n+\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+@check_figures_equal(extensions=['png'])\n+def test_set_paths_with_transformed_data(fig_test, fig_ref):\n+    # Test case for setting paths with transformed versions\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    z1 = [[0, 1], [1, 2]]\n+    z2 = [[1, 0], [2, 1]]\n+    cs_test = ax_test.contour(z1)\n+    cs_ref = ax_ref.contour(z2)\n+\n+    # Simulate transforming paths\n+    transformed_paths = cs_ref.get_paths()\n+    cs_test.set_paths(transformed_paths)\n+\n+@pytest.mark.parametrize(\"data\", [\n+    ([[0, 1], [2, 3]]),\n+    ([[1, 2], [3, 4]]),\n+    ([[4, 5], [6, 7]]),\n+])\n+def test_set_paths_no_side_effect(fig_test, data):\n+    # Ensure that setting paths does not raise an error with valid contour sets\n+    ax = fig_test.subplots()\n+    cs = ax.contour(data)\n+\n+    # Attempt to set paths with an arbitrary modification\n+    initial_paths = cs.get_paths()\n+    cs.set_paths(initial_paths)\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..e792a6c 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -646,6 +646,49 @@ class TestScaling:\n             p.plot()\n \n \n+import pytest\n+import matplotlib as mpl\n+from seaborn import Plot\n+\n+def test_inferred_nominal_x_axis_tweaks():\n+    # Test inferred nominal scale on x-axis\n+    p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+    ax = p.plot()._figure.axes[0]\n+    assert ax.get_xlim() == (-.5, 2.5)\n+    assert not any(x.get_visible() for x in ax.xaxis.get_gridlines())\n+\n+def test_inferred_nominal_y_axis_tweaks():\n+    # Test inferred nominal scale on y-axis\n+    p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+    ax = p.plot()._figure.axes[0]\n+    assert ax.get_ylim() == (2.5, -.5)\n+    assert not any(y.get_visible() for y in ax.yaxis.get_gridlines())\n+\n+def test_nominal_manual_grid():\n+    # Ensure nominal scale respects manual grid settings\n+    p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+    ax = p.plot()._figure.axes[0]\n+    ax.xaxis.grid(True)\n+    assert any(x.get_visible() for x in ax.xaxis.get_gridlines())\n+\n+def test_nominal_with_active_style_grid():\n+    # Test nominal scale with style that enables gridlines\n+    mpl.rc('axes', grid=True)  # Temporarily set gridlines to be active in style\n+    try:\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        ax = p.plot()._figure.axes[0]\n+        assert any(x.get_visible() for x in ax.xaxis.get_gridlines()) is False\n+    finally:\n+        mpl.rcdefaults()  # Reset to defaults to avoid affecting other tests\n+\n+@pytest.mark.xfail(reason=\"Need testimony of invisible artist implementation\")\n+def test_nominal_invisible_artist():\n+    # Assuming that the patch involves setting an invisible artist\n+    p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+    ax = p.plot()._figure.axes[0]\n+    # Assuming function_check_for_invisible_artist() checks for the invisible artist\n+    assert function_check_for_invisible_artist(ax) is True\n+\n class TestPlotting:\n \n     def test_matplotlib_object_creation(self):\n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..459736d 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,9 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "diff --git a/requests/api.py b/requests/api.py\nindex 66d7f21..6796865 100644\n--- a/requests/api.py\n+++ b/requests/api.py\n@@ -11,10 +11,34 @@ This module implements the Requests API.\n \n \"\"\"\n \n+import unittest\n from . import sessions\n-\n-\n-def request(method, url, **kwargs):\n+import requests\n+import os\n+\n+def httpbin(endpoint):\n+    \"\"\"Helper to construct httpbin URL.\"\"\"\n+    return 'https://httpbin.org/' + endpoint\n+\n+class TestRequestsMethods(unittest.TestCase):\n+    def test_str_method_name(self):\n+        files = {'file': open(os.path.basename(__file__), 'rb')}\n+        r = requests.request(method='POST', url=httpbin('post'), files=files)\n+        self.assertEqual(r.status_code, 200)\n+\n+    def test_unicode_method_name(self):\n+        # This is the actual problematic test mentioned in the issue report\n+        files = {'file': open(os.path.basename(__file__), 'rb')}\n+        r = requests.request(method=u'POST', url=httpbin('post'), files=files)\n+        self.assertEqual(r.status_code, 200)\n+\n+    def test_unicode_url(self):\n+        files = {'file': open(os.path.basename(__file__), 'rb')}\n+        r = requests.request(method='POST', url=u'https://httpbin.org/post', files=files)\n+        self.assertEqual(r.status_code, 200)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n     \"\"\"Constructs and sends a :class:`Request <Request>`.\n     Returns :class:`Response <Response>` object.\n \n",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..c6703a0 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,11 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),  # Test case for empty label\n+            (InvalidURL, 'http://-example.com'),  # Test case for invalid starting character\n+            (InvalidURL, 'http://example..com'),  # Test case for consecutive dots in domain\n+            (InvalidURL, 'http://example.com-'),  # Test case for invalid ending character\n+            (InvalidURL, 'http://123.456.789.012'),  # IP format not valid\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..7b0f5ef 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,24 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n-\n-def test_raise_no_warning_for_nan_in_binary_ops():\n+def test_variable_setitem_object_with_values():\n+    import numpy as np\n+    from xarray import Variable\n+\n+    # Define a simple class with a 'values' attribute\n+    class HasValues:\n+        def __init__(self):\n+            self.values = 5\n+\n+    # Define a Variable with an object dtype, assign HasValues instance\n+    var = Variable(dims=(\"x\"), data=np.array([None], dtype=object))\n+    has_values_instance = HasValues()\n+    \n+    var[{\"x\": 0}] = has_values_instance\n+\n+    # Assert that the Variable stores the object, not the returned value from 'values' attribute\n+    assert isinstance(var.values[0], HasValues)\n+    assert var.values[0].values == 5\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 274cb25..384c79f 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -3479,8 +3479,20 @@ class TestDataArray:\n         assert_identical(da_cp['a'], expected_cp)\n \n         assert_identical(da['a'], expected_orig)\n-\n-    def test_real_and_imag(self):\n+    def test_copy_unicode_index(self):\n+        # Create DataArray with unicode dtype\n+        arr = xr.DataArray([1, 2, 3], dims='x', coords={'x': ['foo', 'bar', 'baz']})\n+        assert arr.indexes['x'].dtype.kind == 'U'\n+        \n+        # Test deep copy - should preserve the unicode dtype\n+        arr_copy_deep = arr.copy(deep=True)\n+        assert_identical(arr, arr_copy_deep)\n+        assert arr_copy_deep.indexes['x'].dtype.kind == 'U'\n+        \n+        # Test shallow copy - should also preserve the unicode dtype\n+        arr_copy_shallow = arr.copy(deep=False)\n+        assert_identical(arr, arr_copy_shallow)\n+        assert arr_copy_shallow.indexes['x'].dtype.kind == 'U'\n         array = DataArray(1 + 2j)\n         assert_identical(array.real, DataArray(1))\n         assert_identical(array.imag, DataArray(2))\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..c8851cb 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -534,6 +534,9 @@ class TestManualCombine:\n         assert_identical(expected, actual)\n \n \n+from numpy.testing import assert_array_equal\n+import pytest\n+\n class TestCombineAuto:\n     def test_combine_by_coords(self):\n         objs = [Dataset({'x': [0]}), Dataset({'x': [1]})]\n@@ -574,7 +577,40 @@ class TestCombineAuto:\n         def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n-    def test_infer_order_from_coords(self):\n+    def test_combine_bystander_dimension_non_monotonic(self):\n+        # Verify that non-monotonic but identical coordinate dimensions in bystander dimensions do not raise errors\n+        ycoord = ['a', 'c', 'b']\n+\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n+    def test_identical_coords_different_order_raises(self):\n+        # Ensure a ValueError is raised if identical coords exist in different datasets in different order\n+        ycoord1 = ['a', 'b', 'c']\n+        ycoord2 = ['a', 'c', 'b']\n+\n+        data1 = np.random.rand(3, 3)\n+        data2 = np.random.rand(4, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data1)),\n+                      coords=dict(x=[1, 2, 3], y=ycoord1))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data2)),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord2))\n+\n+        with pytest.raises(ValueError, match=\"Resulting object does not have monotonic global indexes along dimension y\"):\n+            combine_by_coords((ds1, ds2))\n         data = create_test_data()\n         objs = [data.isel(dim2=slice(4, 9)), data.isel(dim2=slice(4))]\n         actual = combine_by_coords(objs)\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..cad9ccf 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,8 +2309,31 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n-\n-    def test_reduce_keep_attrs(self):\n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        import numpy as np\n+        from collections import OrderedDict\n+\n+        # Test with attributes kept\n+        da = xr.DataArray([0, 1, 2, 3], dims=\"x\", attrs={'units': 'K', 'description': 'test'})\n+        result_with_attrs = da.quantile(0.5, dim=\"x\", keep_attrs=True)\n+        \n+        assert result_with_attrs.attrs == {'units': 'K', 'description': 'test'}\n+        \n+        # Test with attributes not kept\n+        result_without_attrs = da.quantile(0.5, dim=\"x\", keep_attrs=False)\n+        \n+        assert result_without_attrs.attrs == OrderedDict()\n+\n+        # Test multi-dimensional DataArray with attrs\n+        da_multidim = xr.DataArray([[0, 1], [2, 3]], dims=(\"x\", \"y\"), attrs={'units': 'C', 'source': 'sensor'})\n+        result_multidim_with_attrs = da_multidim.quantile(0.5, dim=\"x\", keep_attrs=True)\n+\n+        assert result_multidim_with_attrs.attrs == {'units': 'C', 'source': 'sensor'}\n+\n+        result_multidim_without_attrs = da_multidim.quantile(0.5, dim=\"x\", keep_attrs=False)\n+        \n+        assert result_multidim_without_attrs.attrs == OrderedDict()\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..cd81627 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,7 +160,41 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n-    def test_merge_broadcast_equals(self):\n+    def test_merge_dataarray(self):\n+        # Test merging a DataArray into a Dataset using the merge method\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+        expected = xr.merge([ds, da])  # referencing what the correct output should be\n+        actual = ds.merge(da)  # using the merge method which had the issue\n+        assert_identical(actual, expected)\n+\n+        # Test merging with an existing dimension\n+        ds = xr.Dataset({\"a\": (\"x\", [1])})\n+        da = xr.DataArray(data=[2], dims=\"x\", name=\"b\")\n+        expected = xr.merge([ds, da])\n+        actual = ds.merge(da)\n+        assert_identical(actual, expected)\n+\n+        # Test where DataArray has extra dimensions\n+        ds = xr.Dataset({\"a\": (\"x\", [1])})\n+        da = xr.DataArray(data=[[2, 3]], dims=(\"y\", \"x\"), name=\"b\")\n+        expected = xr.merge([ds, da])\n+        actual = ds.merge(da)\n+        assert_identical(actual, expected)\n+\n+        # Testing merging with an empty DataArray\n+        ds = xr.Dataset({\"a\": (\"x\", [1, 2, 3])})\n+        da = xr.DataArray(data=[], dims=\"x\", name=\"b\")\n+        expected = xr.merge([ds, da])\n+        actual = ds.merge(da)\n+        assert_identical(actual, expected)\n+\n+        # Testing with a scalar DataArray\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=3, name=\"b\")\n+        expected = xr.merge([ds, da])\n+        actual = ds.merge(da)\n+        assert_identical(actual, expected)\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n         actual = ds1.merge(ds2)\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..ae80112 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,25 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0, \"y\": 1})\n+        ds2 = xr.Dataset(attrs={\"x\": 1, \"y\": 2})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        \n+        # The initial merged attrs should correspond to the first dataset\n+        assert ds3.attrs[\"x\"] == 0\n+        assert ds3.attrs[\"y\"] == 1\n+\n+        # Modifying the attrs of ds3 should not affect ds1\n+        ds3.attrs[\"x\"] = 42\n+        ds3.attrs[\"y\"] = 43\n+\n+        assert ds3.attrs[\"x\"] == 42\n+        assert ds3.attrs[\"y\"] == 43\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds1.attrs[\"y\"] == 1\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds2.attrs[\"y\"] == 2\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..384c1d0 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,34 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_with_attributes() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"condition_attr\": \"test_cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr_x\": \"value_x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr_y\": \"value_y\"})\n+    \n+    # Without keep_attrs\n+    result_without_attrs = xr.where(cond, x, y)\n+    expected_without_attrs = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected_without_attrs, result_without_attrs)\n+    assert result_without_attrs.attrs == {}\n+\n+    # With keep_attrs\n+    result_with_attrs = xr.where(cond, x, y, keep_attrs=True)\n+    expected_with_attrs = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr_x\": \"value_x\"})\n+    assert_identical(expected_with_attrs, result_with_attrs)\n+\n+    # Verify dtype conservation in xr.where\n+    dtype_data = xr.DataArray(np.ones([10, 10], dtype=np.int8), attrs={\"attr\": \"dtype_test\"})\n+    configured_result = xr.where(dtype_data == 1, 5, 0, keep_attrs=True)\n+    assert configured_result.dtype == np.int8\n+\n+    # Check multiple args with attributes\n+    x.attrs[\"additional_attr\"] = \"extra_value\"\n+    y.attrs[\"global_attr\"] = \"global_value\"\n+    combined_result = xr.where(cond, x, y, keep_attrs=True)\n+    expected_combined = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr_x\": \"value_x\", \"additional_attr\": \"extra_value\", \"global_attr\": \"global_value\"})\n+    assert_identical(expected_combined, combined_result)\n+    assert combined_result.attrs == {\"attr_x\": \"value_x\", \"additional_attr\": \"extra_value\"}\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..1af8e91 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -7,9 +7,48 @@ import pytest\n import xarray as xr\n from xarray.coding import variables\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n-\n+import numpy as np\n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n \n+@pytest.mark.parametrize(\"signed_value, expected_unsigned_value\", [\n+    (-128, 128),\n+    (-1, 255),\n+    (0, 0),\n+    (127, 127)\n+])\n+def test_decode_opendap_signed_bytes_to_unsigned(signed_value, expected_unsigned_value):\n+    # Create a variable with signed integers\n+    signed_data = np.array([signed_value], dtype=np.int8)\n+    encoded = xr.Variable((\"x\",), signed_data, attrs={\"_Unsigned\": \"false\"})\n+    coder = variables.UnsignedIntegerCoder()\n+    \n+    # Decode the variable\n+    decoded = coder.decode(encoded)\n+    \n+    # Assert the type and the value conversion\n+    assert decoded.dtype == np.uint8\n+    assert np.array_equal(decoded.values, np.array([expected_unsigned_value], dtype=np.uint8))\n+\n+\n+@pytest.mark.parametrize(\"unsigned_value, expected_signed_value\", [\n+    (128, -128),\n+    (255, -1),\n+    (0, 0),\n+    (127, 127)\n+])\n+def test_decode_opendap_unsigned_bytes_to_signed(unsigned_value, expected_signed_value):\n+    # Create a variable with unsigned integers\n+    unsigned_data = np.array([unsigned_value], dtype=np.uint8)\n+    encoded = xr.Variable((\"x\",), unsigned_data, attrs={\"_Unsigned\": \"true\"})\n+    coder = variables.UnsignedIntegerCoder()\n+    \n+    # Decode the variable\n+    decoded = coder.decode(encoded)\n+    \n+    # Assert the type and the value conversion\n+    assert decoded.dtype == np.int8\n+    assert np.array_equal(decoded.values, np.array([expected_signed_value], dtype=np.int8))\n+\n with suppress(ImportError):\n     import dask.array as da\n \n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..699bc81 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1919,8 +1919,33 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+import pytest\n+import xarray as xr\n+import numpy as np\n \n-def test_where_attrs() -> None:\n+def test_where_scalar_with_attrs() -> None:\n+    cond = xr.DataArray([True, False, True, False], dims=\"x\", attrs={\"attr\": \"condition\"})\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1, 0], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+    \n+def test_where_scalar_no_attrs() -> None:\n+    cond = xr.DataArray([True, False, True, False], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1, 0], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+def test_where_scalar_cond() -> None:\n+    cond = True\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray(1)\n+    assert_identical(expected, actual)\n+\n+def test_where_scalar_x_and_y() -> None:\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected, actual)\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n     x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n     y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..91f680f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2010,6 +2010,15 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"),\n+                dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..9a28897 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,7 +221,26 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n-    def test_repr(self) -> None:\n+    def test_access_chunks_does_not_load_data(self):\n+        # This test verifies that accessing chunks attribute on a zarr-backed dataset\n+        # should not trigger data loading into memory, a fix for the reported GH issue.\n+        import xarray as xr\n+        import pytest\n+        from unittest.mock import patch\n+        from xarray.backends.zarr import ZarrBackendEntrypoint\n+\n+        url = \"https://example.com/test.zarr\"\n+\n+        # Patching the `ZarrBackendEntrypoint.open_dataset` to raise error if data loading occurs\n+        with patch.object(ZarrBackendEntrypoint, 'open_dataset', side_effect=RuntimeError(\"Data accessed\")):\n+            try:\n+                ds = xr.open_dataset(url, engine='zarr', chunks={})\n+                ds.chunks  # Accessing chunks should not load data\n+            except RuntimeError as e:\n+                pytest.fail(f\"Data was unexpectedly accessed with error: {e}\")\n+        \n+        # Confirm that accessing chunks did not trigger data loading\n+        assert ds.chunks is not None\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n         # need to insert str dtype at runtime to handle different endianness\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..570eaba 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -26,28 +26,20 @@ pytestmark = [\n \n \n class TestDataArrayRolling:\n-    @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n-    def test_rolling_iter(self, da) -> None:\n-        rolling_obj = da.rolling(time=7)\n-        rolling_obj_mean = rolling_obj.mean()\n-\n-        assert len(rolling_obj.window_labels) == len(da[\"time\"])\n-        assert_identical(rolling_obj.window_labels, da[\"time\"])\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    @pytest.mark.parametrize(\"size\", [1, 2, 3, 7])\n+    def test_rolling_center_iter(self, da: xr.DataArray, center: bool, size: int) -> None:\n+        rolling_obj = da.rolling(time=size, center=center)\n \n-        for i, (label, window_da) in enumerate(rolling_obj):\n-            assert label == da[\"time\"].isel(time=i)\n+        # Iterate through the rolling object manually\n+        labels_windows = list(rolling_obj)\n+        rolling_mean_manual = np.array([window.mean().values.item() for label, window in labels_windows])\n \n-            actual = rolling_obj_mean.isel(time=i)\n-            expected = window_da.mean(\"time\")\n+        # Compute the rolling mean using the built-in mean method\n+        rolling_mean_builtin = rolling_obj.mean().values\n \n-            # TODO add assert_allclose_with_nan, which compares nan position\n-            # as well as the closeness of the values.\n-            assert_array_equal(actual.isnull(), expected.isnull())\n-            if (~actual.isnull()).sum() > 0:\n-                np.allclose(\n-                    actual.values[actual.values.nonzero()],\n-                    expected.values[expected.values.nonzero()],\n-                )\n+        # Assert that both methods produce the same result\n+        np.testing.assert_allclose(rolling_mean_manual, rolling_mean_builtin, equal_nan=True)\n \n     @pytest.mark.parametrize(\"da\", (1,), indirect=True)\n     def test_rolling_repr(self, da) -> None:\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..a26b690 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,12 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import numpy as np\n+import xarray as xr\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..4421d04 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,28 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pylint.lint import Run\n+import pytest\n+from pytest import CaptureFixture\n+\n+# File setup for testing\n+EMPTY_MODULE = \"path/to/an/empty/module.py\"\n+\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose_without_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the --verbose flag works without argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..4ea7cd0 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,6 +1233,35 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n+    def test_ignore_in_recursive_mode(self):\n+        \"\"\"Tests that Pylint respects the ignore options when using --recursive=y\"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=ignored_subdirectory\",\n+            ],\n+            code=0,\n+        )\n+        \n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-paths=.*ignored_subdirectory.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-patterns=ignored_.*\",\n+            ],\n+            code=0,\n+        )\n+\n     def test_recursive(self):\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..e1fa177 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1324,9 +1324,38 @@ class TestRunTC:\n                 if not os.path.basename(path) == \"regrtest_data\"\n             ]\n             with _test_cwd():\n-                os.chdir(join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"))\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n+    def test_ignore_paths_on_recursive_check(self):\n+        \"\"\"Test that --recursive=y respects ignore-paths set in pyproject.toml.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.makedirs(join(HERE, \"regrtest_data\", \"directory\", \"generated_code\"), exist_ok=True)\n+                os.makedirs(join(HERE, \"regrtest_data\", \"directory\", \"ignored_subdirectory\"), exist_ok=True)\n+                \n+                # Add some dummy python files\n+                open(join(HERE, \"regrtest_data\", \"directory\", \"generated_code\", \"script.py\"), 'w').close()\n+                open(join(HERE, \"regrtest_data\", \"directory\", \"ignored_subdirectory\", \"script.py\"), 'w').close()\n+                \n                 self._runtest(\n-                    [\".\", \"--recursive=y\"],\n+                    [\n+                        \"directory\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n                     code=0,\n                 )\n \n",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..4861830 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -765,8 +765,35 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n \n-            paths = [cwd, \"/custom_pythonpath\", *default_paths]\n+            paths = [\"something\", *default_paths]\n             sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths  # No change expected, since \"something\" isn't cwd or \"\"\n+             \n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == default_paths  # should remove the first \"\"\n+\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == default_paths  # should remove the first \".\"\n+\n+            paths = [os.getcwd(), *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == default_paths  # should remove the first os.getcwd()\n+\n+            paths = [\"/not_removed\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths  # \"/not_removed\" should not be removed\n             with _test_environ_pythonpath(\"/custom_pythonpath\"):\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n",
  "pytest-dev__pytest-10051": "",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..b10d484 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1269,7 +1269,14 @@ def test_pdb_teardown_skipped(\n             mark=mark\n         )\n     )\n-    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result_no_pdb = pytester.runpytest_inprocess()\n+    result_no_pdb.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+\n+    # Run with --pdb to ensure tearDown is not executed\n+    result_with_pdb = pytester.runpytest_inprocess(\"--pdb\")\n+    result_with_pdb.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n     result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n     assert tracked == []\n \n",
  "pytest-dev__pytest-5262": "",
  "pytest-dev__pytest-5631": "diff --git a/testing/python/integration.py b/testing/python/integration.py\nindex 044a31a..c185b80 100644\n--- a/testing/python/integration.py\n+++ b/testing/python/integration.py\n@@ -178,6 +178,25 @@ class TestMockDecoration:\n         reprec = testdir.inline_run()\n         reprec.assertoutcome(passed=2)\n \n+    def test_mock_numpy_array_patch(self, testdir):\n+        \"\"\"Test patching with a NumPy array to ensure no ValueError occurs during test collection.\"\"\"\n+        pytest.importorskip(\"numpy\")\n+        testdir.makepyfile(\n+            \"\"\"\n+            from unittest.mock import patch\n+            import numpy as np\n+            import some_module\n+\n+            class TestExample:\n+                @patch('some_module.some_function', new=np.array([1.0, 2.0, 3.0]))\n+                def test_patch_with_numpy_array(self):\n+                    # No actual call to some_module.some_function, just testing the patching process.\n+                    assert True\n+            \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=2)\n+\n     def test_mock(self, testdir):\n         pytest.importorskip(\"mock\", \"1.0.1\")\n         testdir.makepyfile(\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..e531d61 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -126,8 +126,21 @@ class TestPaste(object):\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n+        lexer = \"text\"  # Updated according to the issue description\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+    \n+    def test_create_new_paste_with_special_content(self, pastebin, mocked_urlopen):\n+        special_content = b\"some special content that caused HTTP 400 before\"\n+        result = pastebin.create_new_paste(special_content)\n+        assert result.startswith(\"https://bpaste.net/show/\")\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        expected_lexer = \"text\"\n+        assert \"lexer=%s\" % expected_lexer in data.decode()\n+        assert f\"code={special_content.decode('ascii')}\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..5766d14 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -703,6 +703,47 @@ class Test_genitems:\n         assert items[2].name == \"testmethod_one\"\n \n         # let's also test getmodpath here\n+\n+    def test_parametrize_with_special_characters(self, testdir):\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.parametrize(\"arg0\", [\".[\", \"..[\", \"...[\", \".[.\", \".[]\", \".[][.\"])\n+            def test_special_chars(arg0):\n+                pass\n+\n+            class TestExample:\n+                @pytest.mark.parametrize(\"arg0\", [\".[\", \"..[\", \"...[\", \".[.\", \".[]\", \".[][.\"])\n+                def test_method_special_chars(self, arg0):\n+                    pass\n+            \"\"\"\n+        )\n+        items, _ = testdir.inline_genitems(p)\n+        assert len(items) == 12\n+\n+        # Test individual item names ensure they are correct\n+        assert items[0].name == 'test_special_chars[.[0]'\n+        assert items[1].name == 'test_special_chars[..[0]'\n+        assert items[2].name == 'test_special_chars[...[0]'\n+        assert items[3].name == 'test_special_chars[.[.[0]'\n+        assert items[4].name == 'test_special_chars[.[]0]'\n+        assert items[5].name == 'test_special_chars[.[][.0]'\n+\n+        # Test method from within class\n+        assert items[6].name == 'TestExample.test_method_special_chars[.[0]'\n+        assert items[7].name == 'TestExample.test_method_special_chars[..[0]'\n+        assert items[8].name == 'TestExample.test_method_special_chars[...[0]'\n+        assert items[9].name == 'TestExample.test_method_special_chars[.[.[0]'\n+        assert items[10].name == 'TestExample.test_method_special_chars[.[]0]'\n+        assert items[11].name == 'TestExample.test_method_special_chars[.[][.0]'\n+\n+        # Verify that getmodpath returns correctly formatted names\n+        assert items[6].getmodpath() == \"TestExample.test_method_special_chars[.[0]\"\n+        assert items[7].getmodpath() == \"TestExample.test_method_special_chars[..[0]\"\n+        assert items[8].getmodpath() == \"TestExample.test_method_special_chars[...[0]\"\n+        assert items[9].getmodpath() == \"TestExample.test_method_special_chars[.[.[0]\"\n+        assert items[10].getmodpath() == \"TestExample.test_method_special_chars[.[]0]\"\n+        assert items[11].getmodpath() == \"TestExample.test_method_special_chars[.[][.0]\"\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..ffd60bf 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,10 +1,24 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n+import sys\n \n-@pytest.fixture(params=[\"--setup-only\", \"--setup-plan\", \"--setup-show\"], scope=\"module\")\n-def mode(request):\n-    return request.param\n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+        \n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n \n \n def test_show_only_active_fixtures(testdir, mode, dummy_yaml_custom_test):\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..ee73a8f 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -607,7 +607,41 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n \n-    def test_skip_with_reason(self, testdir):\n+    def test_skip_with_runxfail(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip(reason=\"for testing\")\n+            def test_skipped():\n+                pass\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_skipped.py:3: for testing\", \"*1 skipped*\"])\n+\n+    def test_skip_with_runxfail_no_reason(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skipped_no_reason():\n+                pass\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_skipped_no_reason.py:3: unconditional skip\", \"*1 skipped*\"])\n+\n+    def test_skip_with_additional_marker(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip(reason=\"extra marker\") @pytest.mark.slow\n+            def test_skipped_with_marker():\n+                pass\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_skipped_with_marker.py:3: extra marker\", \"*1 skipped*\"])\n         testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..433a897 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,7 +1,9 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n+from _pytest.pytester import Testdir\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n from _pytest.skipping import pytest_runtest_setup\n@@ -382,7 +384,30 @@ class TestXFail:\n         \"\"\"\n         )\n \n-    def xtest_dynamic_xfail_set_during_setup(self, testdir):\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Similar to Issue #7486, tests strict=True behavior.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..843efa4 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -512,6 +512,12 @@ class TestCaptureFixture:\n                 capfd.close()\n             \"\"\"\n         )\n+        \n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_capfd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec.assertoutcome(passed=1)\n \n     def test_capfdbinary(self, testdir):\n@@ -526,6 +532,12 @@ class TestCaptureFixture:\n                 assert err == b''\n             \"\"\"\n         )\n+        \n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_capfd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec.assertoutcome(passed=1)\n \n     def test_capsysbinary(self, testdir):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..0dcaf9f 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,6 +1,35 @@\n+\n import logging\n \n import pytest\n+def test_set_level_restoration_across_multiple_tests(testdir: Testdir) -> None:\n+    \"\"\"Test that changes in log level by caplog.set_level are restored after each test.\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test_foo(caplog):\n+            caplog.set_level(42)\n+            assert caplog.handler.level == 42\n+\n+        def test_bar(caplog):\n+            # This should be the default level, indicating the level was restored.\n+            assert caplog.handler.level == 0\n+\n+        def test_baz(caplog):\n+            caplog.set_level(logging.ERROR)\n+            assert caplog.handler.level == logging.ERROR\n+\n+        def test_qux(caplog):\n+            # This should be the default level again.\n+            assert caplog.handler.level == 0\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=4)\n+\n+from _pytest.pytester import Testdir  # Ensure Testdir is imported for new test functions.\n+\n from _pytest.logging import caplog_records_key\n \n logger = logging.getLogger(__name__)\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..360aae4 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,4 +1,44 @@\n+\n import os\n+def test_collect_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_collect_symlink_loop(pytester: Pytester) -> None:\n+    \"\"\"Test that symlink loops are handled gracefully.\"\"\"\n+    dir1 = pytester.mkdir(\"dir1\")\n+    dir2 = pytester.mkdir(\"dir2\")\n+    dir1.joinpath(\"test_foo.py\").write_text(\"def test_foo(): pass\", \"utf-8\")\n+    dir2.joinpath(\"test_bar.py\").write_text(\"def test_bar(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_to_dir1\").symlink_to(dir1)\n+    pytester.path.joinpath(\"symlink_to_dir2\").symlink_to(dir2)\n+    dir1.joinpath(\"symlink_loop\").symlink_to(dir2)  # Create a loop\n+    dir2.joinpath(\"symlink_loop\").symlink_to(dir1)  # Create a loop\n+\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=4)\n+\n+def test_collect_nonexistent_symlink(pytester: Pytester) -> None:\n+    \"\"\"Test that nonexistent symlinks are ignored.\"\"\"\n+    pytester.path.joinpath(\"broken_symlink\").symlink_to(\"does_not_exist\")\n+\n+    result = pytester.runpytest()\n+    result.assert_outcomes()\n+\n+def test_collect_symlink_to_file(pytester: Pytester) -> None:\n+    \"\"\"A symlinked file is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    test_file = dir.joinpath(\"test_it.py\")\n+    test_file.write_text(\"def test_it(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_to_file\").symlink_to(test_file)\n+\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n import pprint\n import sys\n import textwrap\n@@ -9,7 +49,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Pytester, Testdir\n \n \n class TestCollector:\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..2e58697 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,28 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_unittest_setUpClass_fixture_is_private(pytester: Pytester) -> None:\n+    \"\"\"Test that unittest setUpClass fixtures are private and hidden by default.\"\"\"\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        \n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+\n+            def test_method(self):\n+                pass\n+        \"\"\"\n+    )\n+    # Run pytest with --fixtures to check for fixture visibility\n+    result = pytester.runpytest(\"--fixtures\")\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_MyTestCase*\")\n \n-def test_setup_class(pytester: Pytester) -> None:\n+    # Run pytest with --fixtures -v to verify the fixture is shown\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    result.stdout.fnmatch_lines(\"*unittest_setUpClass_fixture_MyTestCase*\")\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..302e783 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,8 +597,31 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n \n-def test_ridgecv_sample_weight():\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    # Test with len(y.shape) == 1\n+    n_targets = 1\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # Test with len(y.shape) == 2\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..09f9f64 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,19 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+import numpy as np\n+from sklearn.metrics import fowlkes_mallows_score\n+from sklearn.utils.testing import assert_all_finite\n+\n+def test_fowlkes_mallows_score_overflow():\n+    # Large clusters to trigger potential overflow of (pk * qk).\n+    # The clusters are designed to have very large values for pk and qk.\n+    labels_true = np.array([0]*100000 + [1]*200000 + [2]*300000)\n+    labels_pred = np.array([0]*150000 + [1]*150000 + [2]*300000)\n+    \n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert_all_finite(score)\n+    assert score >= 0.0 and score <= 1.0, \"Score should be within valid range [0,1]\"\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..b5c19ef 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,6 +558,32 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+def test_countvectorizer_with_predefined_vocabulary():\n+    # A predefined vocabulary\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    \n+    # Initialize the CountVectorizer with the predefined vocabulary\n+    vectorizer = CountVectorizer(vocabulary=vocab)\n+\n+    # `get_feature_names` should not raise NotFittedError because the vocabulary was provided\n+    feature_names = vectorizer.get_feature_names()\n+    assert_array_equal(feature_names, vocab)\n+\n+    # Again check transformation capability\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+\n+    # Transform the corpus using the predefined vocabulary\n+    X = vectorizer.transform(corpus)\n+    # Check output shape, should be 4 documents x 9 features\n+    assert_equal(X.shape, (4, 9))\n+    # Check if vocabulary_ attribute is set\n+    assert hasattr(vectorizer, \"vocabulary_\")\n+    assert_true(vectorizer.fixed_vocabulary_)\n \n def test_vectorizer_max_features():\n     vec_factories = (\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..94b3349 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1172,8 +1172,19 @@ def test_search_cv_timing():\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n+from sklearn.utils.testing import assert_true\n \n-def test_grid_search_correct_score_results():\n+def test_refit_time_attribute():\n+    # Test to ensure 'refit_time_' attribute is present and of correct type\n+    svc = LinearSVC(random_state=0)\n+    X = [[1, ], [2, ], [3, ], [4, ]]\n+    y = [0, 1, 1, 0]\n+    grid_search = GridSearchCV(svc, {'C': [0.1, 1, 10]}, refit=True, cv=2)\n+    grid_search.fit(X, y)\n+    \n+    assert_true(hasattr(grid_search, \"refit_time_\"))\n+    assert_true(isinstance(grid_search.refit_time_, float))\n+    assert_greater_equal(grid_search.refit_time_, 0)\n     # test that correct scores are used\n     n_splits = 3\n     clf = LinearSVC(random_state=0)\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..13e26c9 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,8 +21,7 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n-\n-from sklearn.exceptions import ConvergenceWarning\n+from sklearn.metrics.scorer import get_scorer\n from sklearn.exceptions import ChangedBehaviorWarning\n from sklearn.linear_model.logistic import (\n     LogisticRegression,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..794eb51 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -166,8 +166,19 @@ def test_clone_sparse_matrices():\n         assert clf.empty.__class__ is clf_cloned.empty.__class__\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    from sklearn.base import BaseEstimator, clone\n \n-def test_repr():\n+    class MyEstimator(BaseEstimator):\n+        def __init__(self, empty=None):\n+            self.empty = empty\n+\n+    # Assuming BaseEstimator or SubClass should be used for testing the class parameter\n+    clf = MyEstimator(empty=BaseEstimator)  # Using class type as parameter\n+    clf2 = clone(clf)\n+\n+    assert clf.empty is clf2.empty\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\n     repr(my_estimator)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..b506a00 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -18,7 +18,8 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..fccb544 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -480,8 +480,33 @@ def test_shuffle_kfold_stratifiedkfold_reproducibility():\n                 with pytest.raises(AssertionError):\n                     np.testing.assert_array_equal(test_a, test_b)\n \n+import numpy as np\n+from sklearn.model_selection import StratifiedKFold\n \n def test_shuffle_stratifiedkfold():\n+    # Test to ensure shuffling changes the split assignments\n+    X = np.linspace(0, 19, 20)\n+    y = np.array([0] * 10 + [1] * 10)\n+\n+    # This will run stratified splits with shuffle = True and different random states\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=43)\n+\n+    splits1 = [tuple(test_idx) for _, test_idx in kf1.split(X, y)]\n+    splits2 = [tuple(test_idx) for _, test_idx in kf2.split(X, y)]\n+\n+    # Assert that the splits with different random states are different\n+    assert splits1 != splits2\n+\n+    # Adding a check to confirm that shuffling works within the same random_state\n+    kf_same = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    splits_same = [tuple(test_idx) for _, test_idx in kf_same.split(X, y)]\n+    assert splits1 == splits_same\n+\n+    # Check to ensure order of test indices are different for the same input with shuffle=True\n+    if len(splits1) > 1 and len(splits2) > 1:\n+        # Comparing first and second fold indices to ensure shuffle's effect\n+        assert_not_equal(set(splits1[0]), set(splits1[1]))\n     # Check that shuffling is happening when requested, and for proper\n     # sample coverage\n     X_40 = np.ones(40)\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..bb0bd88 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -203,6 +203,25 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n \n+@pytest.mark.parametrize(\n+    'strategy, expected_4bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 1, 2, 3], [0, 0, 1, 2, 3, 4]),\n+     ('kmeans', [0, 0, 0, 1, 2, 3], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 2, 3], [0, 0, 1, 2, 3, 4])])\n+def test_kmeans_bin_edges_are_sorted(strategy, expected_4bins, expected_5bins):\n+    \"\"\"Test that bin_edges are sorted properly using kmeans strategy with edge cases.\"\"\"\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+    \n+    # with 4 bins\n+    est = KBinsDiscretizer(n_bins=4, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_4bins, Xt.ravel())\n+    \n+    # with 5 bins\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_5bins, Xt.ravel())\n+\n @pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n @pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n def test_inverse_transform(strategy, encode):\n",
  "scikit-learn__scikit-learn-13142": "",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..74dceab 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,6 +8,9 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n+import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n import numpy as np\n \n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..6a2d85c 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -397,6 +397,32 @@ def test_export_text():\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n \n+def test_export_text_single_feature():\n+    # Test case for single feature issue in export_text\n+    X, y = [[-2], [-1], [-1], [1], [1], [2]], [-1, -1, -1, 1, 1, 1]\n+    clf = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf.fit(X, y)\n+\n+    expected_report = dedent(\"\"\"\n+    |--- feature_0 <= 0.00\n+    |   |--- class: -1\n+    |--- feature_0 >  0.00\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    assert export_text(clf) == expected_report\n+\n+    expected_report = dedent(\"\"\"\n+    |--- sepal_length <= 0.00\n+    |   |--- class: -1\n+    |--- sepal_length >  0.00\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+    \n+    # Test with custom feature name\n+    assert export_text(clf, feature_names=['sepal_length']) == expected_report\n+\n+\n def test_plot_tree_entropy(pyplot):\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..5147f91 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1536,7 +1536,20 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n-    n_classes = 3\n+    # Let's run another test to ensure that refit=True works as intended with the same setup\n+    np.random.seed(29)\n+    X = np.random.normal(size=(1000, 3))\n+    beta = np.random.normal(size=3)\n+    intercept = np.random.normal(size=None)\n+    y = np.sign(intercept + X @ beta)\n+\n+    # Should work without error\n+    LogisticRegressionCV(\n+        cv=5,\n+        solver='saga',\n+        tol=1e-2,\n+        refit=True\n+    ).fit(X, y)\n     n_features = 20\n     X, y = make_classification(n_samples=200, n_classes=n_classes,\n                                n_informative=n_classes, n_features=n_features,\n@@ -1554,11 +1567,42 @@ def test_LogisticRegressionCV_no_refit(multi_class):\n     assert lrcv.coef_.shape == (n_classes, n_features)\n \n \n-def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n+@pytest.mark.parametrize('solver', ['saga', 'liblinear'])\n+def test_LogisticRegressionCV_no_refit_improved(solver):\n+    # Test that no IndexError is thrown when using LogisticRegressionCV with refit=False\n+    np.random.seed(29)\n+    X = np.random.normal(size=(1000, 3))\n+    beta = np.random.normal(size=3)\n+    intercept = np.random.normal(size=None)\n+    y = np.sign(intercept + X @ beta)\n+\n+    # Testing without error\n+    try:\n+        LogisticRegressionCV(\n+            cv=5,\n+            solver=solver,\n+            tol=1e-2,\n+            refit=False\n+        ).fit(X, y)\n+    except IndexError:\n+        pytest.fail(\"IndexError was raised\")\n     # Make sure the shapes of scores_ and coefs_paths_ attributes are correct\n     # when using elasticnet (added one dimension for l1_ratios)\n \n-    n_classes = 3\n+    # Let's run another test to ensure that refit=True works as intended with the same setup\n+    np.random.seed(29)\n+    X = np.random.normal(size=(1000, 3))\n+    beta = np.random.normal(size=3)\n+    intercept = np.random.normal(size=None)\n+    y = np.sign(intercept + X @ beta)\n+\n+    # Should work without error\n+    LogisticRegressionCV(\n+        cv=5,\n+        solver='saga',\n+        tol=1e-2,\n+        refit=True\n+    ).fit(X, y)\n     n_features = 20\n     X, y = make_classification(n_samples=200, n_classes=n_classes,\n                                n_informative=n_classes, n_features=n_features,\n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..8989ea7 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -14,6 +14,10 @@ def test_get_sys_info():\n \n def test_get_deps_info():\n     deps_info = _get_deps_info()\n+    \n+    # Verify that 'joblib' is included in the dependencies\n+    assert 'joblib' in deps_info\n+    deps_info = _get_deps_info()\n \n     assert 'pip' in deps_info\n     assert 'setuptools' in deps_info\n@@ -30,4 +34,4 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..6796276 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,21 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+import numpy as np\n+from scipy import sparse\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for the ZeroDivisionError in _sparse_fit (#14893)\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..301b632 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -96,10 +96,29 @@ def test_strip_accents():\n     a = \"this is \u00e0 test\"\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n+def test_nfkd_accent_removal():\n+    # strings that are already decomposed (NFKD form)\n+    a = \"o\\u0308\"  # o with diaeresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n \n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # grave, acute, circumflex, tilde\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n \n-def test_to_ascii():\n-    # check some classical latin accentuated symbols\n+    # multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"  # o with diaeresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # original case from issue\n+    s1 = chr(241)  # \u00f1\n+    s2 = chr(110) + chr(771)  # n + \u02dc\n+\n+    # both should be normalized to \"n\"\n+    assert strip_accents_unicode(s1) == \"n\"\n+    assert strip_accents_unicode(s2) == \"n\"\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n     assert strip_accents_ascii(a) == expected\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..e0418c9 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1524,6 +1524,55 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     assert_allclose(X_imputed[:, 1], 0)\n \n \n+import numpy as np\n+import pytest\n+from sklearn.experimental import enable_iterative_imputer  # Enables IterativeImputer\n+from sklearn.impute import IterativeImputer\n+from sklearn.utils._testing import assert_array_equal\n+\n+def test_iterative_imputer_constant_fill_value():\n+    \"\"\"Check that we propagate properly the parameter `fill_value`.\"\"\"\n+    X = np.array([[-1, 2, 3, -1], [4, -1, 5, -1], [6, 7, -1, -1], [8, 9, 0, -1]])\n+\n+    fill_value = 100\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, fill_value)\n+\n+def test_iterative_imputer_fill_value_nan():\n+    \"\"\"Test IterativeImputer with fill_value=np.nan.\"\"\"\n+    X = np.array([[np.nan, 2.5, 3.1], [4.9, np.nan, 5.4], [6.5, 7.8, np.nan], [8.1, 9.2, 0.3]])\n+\n+    fill_value = np.nan\n+    imputer = IterativeImputer(\n+        missing_values=np.nan,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    imputed_data = imputer.fit_transform(X)\n+    # Since fill_value is np.nan, we should directly check initial imputer's statistics without comparing to np.nan\n+    assert np.isnan(imputer.initial_imputer_.statistics_).all()\n+\n+def test_iterative_imputer_fill_value_string():\n+    \"\"\"Test IterativeImputer with fill_value as a string.\"\"\"\n+    X = np.array([['missing', 'cat', 'dog'], ['parrot', 'missing', 'owl'], ['eagle', 'sparrow', 'missing']], dtype=object)\n+\n+    fill_value = 'missing'\n+    imputer = IterativeImputer(\n+        missing_values='missing',\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, fill_value)\n+\n @pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n def test_knn_imputer_keep_empty_features(keep_empty_features):\n     \"\"\"Check the behaviour of `keep_empty_features` for `KNNImputer`.\"\"\"\n",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..f1f5ac4 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -330,12 +330,24 @@ def test_iforest_with_n_jobs_does_not_segfault():\n def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n-    model = IsolationForest()\n-    model.fit(X, y)\n+import pytest\n+import numpy as np\n+from sklearn.ensemble import IsolationForest\n+import warnings\n+\n+def test_iforest_no_warning_with_feature_names():\n+    \"\"\"Ensure no warning is raised when feature names are valid and contamination is set.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    X = pd.DataFrame({\"feature\": [0, 0.1, -0.1, 0.2]})\n+    model = IsolationForest(random_state=42, contamination=0.1)\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        model.fit(X)\n+        assert not any(\"does not have valid feature names\" in str(warning.message) for warning in w)\n \n     warn_msg = (\n         \"Attribute `base_estimator_` was deprecated in version 1.2 and \"\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..b443820 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -943,9 +944,31 @@ def test_k_means_empty_cluster_relocated():\n \n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n-\n-\n-def test_minibatch_kmeans_partial_fit_int_data():\n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n+\n+def test_kmeans_inertia_consistency():\n+    # Test that the inertia of KMeans with different n_jobs is consistent\n+    X, _ = make_blobs(n_samples=1000, centers=3, n_features=2, random_state=0)\n+    inertia_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).inertia_\n+    \n+    assert_almost_equal(inertia_1, inertia_2, decimal=5)\n+\n+def test_kmeans_inertia_random_state_consistency():\n+    # Test for consistency of KMeans inertia with different random states and n_jobs\n+    X, _ = make_blobs(n_samples=500, centers=4, n_features=5, random_state=0)\n+    kmeans_1 = KMeans(n_clusters=4, random_state=42, n_jobs=1).fit(X)\n+    kmeans_2 = KMeans(n_clusters=4, random_state=42, n_jobs=2).fit(X)\n+    \n+    assert_array_equal(kmeans_1.labels_, kmeans_2.labels_)\n+    assert_almost_equal(kmeans_1.inertia_, kmeans_2.inertia_, decimal=5)\n     # Issue GH #14314\n     X = np.array([[-1], [1]], dtype=np.int)\n     km = MiniBatchKMeans(n_clusters=2)\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..5970010 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,6 +251,31 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n+@pytest.mark.xfail(reason=\"Issue with literalinclude prepend indentation\")\n+def test_LiteralIncludeReader_prepend_indentation(literal_inc_path):\n+    # Case where prepend content needs specific indentation\n+    options = {\n+        'start-at': \"<groupId>com.github.ekryd.sortpom</groupId>\",\n+        'end-at': \"</plugin>\",\n+        'prepend': '      <plugin>',\n+        'dedent': None,\n+        'language': 'xml'\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    \n+    expected_content = (\n+        \"      <plugin>\\n\"\n+        \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+        \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+        \"        <version>2.15.0</version>\\n\"\n+        \"        <configuration>\\n\"\n+        \"          <verifyFailOn>strict</verifyFailOn>\\n\"\n+        \"        </configuration>\\n\"\n+        \"      </plugin>\\n\"\n+    )\n+    \n+    assert content == expected_content\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n",
  "sphinx-doc__sphinx-10449": "",
  "sphinx-doc__sphinx-10466": "",
  "sphinx-doc__sphinx-10673": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\nindex d3bf6a2..96d46a1 100644\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -344,5 +344,18 @@ def test_get_toctree_for_includehidden(app):\n     assert_node(toctree[1][1][0][0], reference, refuri=\"bar\", secnumber=[2])\n     assert_node(toctree[1][2][0][0], reference, refuri=\"http://sphinx-doc.org/\")\n \n-    assert_node(toctree[2],\n-                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+def test_toctree_with_indices(app):\n+    # Building the documentation\n+    app.build()\n+\n+    # Extracting the toctree from the index\n+    toctree = app.env.tocs['index']\n+\n+    # Assert that the toctree contains entries for genindex, modindex, and search without warnings\n+    assert_node(toctree[1][1][1], addnodes.toctree,\n+                caption=\"Indices\", \n+                entries=[(None, 'genindex'), (None, 'modindex'), (None, 'search')])\n+\n+    # Ensure that these special documents are linked correctly\n+    for index in ['genindex', 'modindex', 'search']:\n+        assert index in [entry[1] for entry in toctree[1][1][1]['entries']]\n",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..5a2f73d 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -145,6 +145,8 @@ def test_glossary(app):\n     assert (\"term1\", \"term1\", \"term\", \"index\", \"term-term1\", -1) in objects\n     assert (\"term2\", \"term2\", \"term\", \"index\", \"term-term2\", -1) in objects\n     assert (\"term3\", \"term3\", \"term\", \"index\", \"term-term3\", -1) in objects\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n \n",
  "sphinx-doc__sphinx-7757": "",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..0ffc51e 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -52,6 +53,18 @@ def test_MockObject():\n     assert isinstance(obj.other_method(), SubClass)\n \n \n+from typing import TypeVar\n+\n+def test_generic_MockObject():\n+    T = TypeVar('T')\n+\n+    class SubClass2(mock.SomeClass[T]):\n+        \"\"\"docstring of SubClass\"\"\"\n+\n+    obj2 = SubClass2()\n+    assert SubClass2.__doc__ == \"docstring of SubClass\"\n+    assert isinstance(obj2, SubClass2)\n+\n def test_mock():\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex 464108d..0def44d 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -1261,8 +1261,30 @@ def test_automethod_for_builtin(app):\n         '',\n     ]\n \n+import functools\n+from sphinx.testing.util import simple_decorator\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_decorated_init_method_documentation(app):\n+    class TestClass:\n+        @simple_decorator\n+        def __init__(self, value):\n+            \"\"\"Initialize with value.\"\"\"\n+            self.value = value\n+    \n+    options = {\"members\": None, \"undoc-members\": None}\n+    actual = do_autodoc(app, 'class', 'tests.test_ext_autodoc.TestClass', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: TestClass(value)',\n+        '   :module: tests.test_ext_autodoc',\n+        '',\n+        '   .. py:method:: __init__(value)',\n+        '      :module: tests.test_ext_autodoc',\n+        '',\n+        '      Initialize with value.',\n+        '',\n+    ]\n def test_automethod_for_decorated(app):\n     actual = do_autodoc(app, 'method', 'target.decorator.Bar.meth')\n     assert list(actual) == [\n@@ -1272,8 +1294,30 @@ def test_automethod_for_decorated(app):\n         '',\n     ]\n \n+import functools\n+from sphinx.testing.util import simple_decorator\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_decorated_init_method_documentation(app):\n+    class TestClass:\n+        @simple_decorator\n+        def __init__(self, value):\n+            \"\"\"Initialize with value.\"\"\"\n+            self.value = value\n+    \n+    options = {\"members\": None, \"undoc-members\": None}\n+    actual = do_autodoc(app, 'class', 'tests.test_ext_autodoc.TestClass', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: TestClass(value)',\n+        '   :module: tests.test_ext_autodoc',\n+        '',\n+        '   .. py:method:: __init__(value)',\n+        '      :module: tests.test_ext_autodoc',\n+        '',\n+        '      Initialize with value.',\n+        '',\n+    ]\n def test_abstractmethods(app):\n     options = {\"members\": None,\n                \"undoc-members\": None}\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..e18ab6e 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -8,6 +8,49 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import os\n+import shutil\n+from sphinx.application import Sphinx\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(tmp_path, app_params, app, status, warning):\n+    srcdir, confdir, outdir, doctreedir = app_params\n+\n+    # Setup source directory with test files\n+    os.makedirs(srcdir / 'subdir', exist_ok=True)\n+    with open(srcdir / 'index.rst', 'w') as f:\n+        f.write(\"\"\"\n+Working link_\n+Broken local link_\n+\n+.. _Working link: subdir/existing_file\n+.. _Broken local link: subdir/non_existing_file\n+        \"\"\")\n+    with open(srcdir / 'subdir/existing_file', 'w') as f:\n+        f.write(\"This is an existing file.\")  # Create a local file to link to\n+    \n+    # Run the linkcheck builder\n+    app = Sphinx(srcdir, confdir, outdir, doctreedir, 'linkcheck')\n+    app.build(force_all=True)\n+\n+    content = (outdir / 'output.txt').read_text()\n+    \n+    # Verify that the local links are correctly reported\n+    assert 'ok        subdir/existing_file' in content, \"Working local link should be reported as OK.\"\n+    assert 'broken    subdir/non_existing_file' in content, \"Non-existing local link should be reported as broken.\"\n+    shutil.rmtree(srcdir / 'subdir')  # Clean up created files\n+\n+    # Test output.json to ensure structure is respected\n+    assert (outdir / 'output.json').exists()\n+    json_content = (outdir / 'output.json').read_text()\n+    json_rows = [json.loads(x) for x in json_content.splitlines()]\n+    local_links = {row[\"uri\"]: row for row in json_rows if 'subdir/' in row['uri']}\n+    \n+    assert 'subdir/existing_file' in local_links\n+    assert local_links['subdir/existing_file']['status'] == 'working'\n+    assert 'subdir/non_existing_file' in local_links\n+    assert local_links['subdir/non_existing_file']['status'] == 'broken'\n+\n import json\n import re\n from unittest import mock\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..4072828 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -14,7 +15,60 @@ from test_ext_autodoc import do_autodoc\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n-def test_private_field(app):\n+def test_specific_private_member(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None, \"private-members\": \"_specific_private_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _specific_private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   specific_private_function is a docstring().',\n+        '',\n+        '   :meta private:',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_mix_public_and_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None, \"private-members\": \"_private_function,_specific_private_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   private_function is a docstring().',\n+        '',\n+        '   :meta private:',\n+        '',\n+        '.. py:function:: _specific_private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   specific_private_function is a docstring().',\n+        '',\n+        '   :meta private:',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_non_existent_private_member(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None, \"private-members\": \"_non_existent_member\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+    ]\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'module', 'target.private', options)\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..7d5c1f3 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1285,7 +1285,52 @@ def test_image_glob_intl_using_figure_language_filename(app):\n     assert_node(doctree[0][3][0], nodes.image, uri='subdir/svgimg.*',\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n+from babel.messages import pofile\n+from sphinx import locale\n+from babel.messages.catalog import Catalog\n \n+import pytest\n \n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_custom_po_translation(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # Before test, clear cache of translators to avoid any side effects\n+        locale.translators.clear()\n+        \n+        # Define the directory and ensure its existence\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locale' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        \n+        # Write custom translations into sphinx.po\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            # Custom translations for test\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # Create app and convert .po to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        \n+        # Verify if the .mo file is created successfully\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        \n+        # Test that translation is correctly used\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        # Build the html and confirm that translations exist in output\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        \n+        # Confirm translations are reflected\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        # Clear cache again post testing\n+        locale.translators.clear()\n+\n+        \n+# Existing function\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..5e13b7a 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,33 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import pytest\n+import sys\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    srcdir='autodoc_typehints_description_and_type_aliases',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_with_aliases(app: SphinxTestApp):\n+    (app.srcdir / 'types.rst').write_text(\".. autofunction:: types.sphinx_doc\")\n+    app.build()\n+    output = (app.outdir / 'types.txt').read_text()\n+    assert ('types.sphinx_doc(data)\\n'\n+            '\\n'\n+            '   Does it work.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      * **data** (*types.JSONObject*) --\\n'\n+            '        Does it args.\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      Does it work in return.\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      types.JSONObject\\n' == output)\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..7995f07 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,21 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled(app, status, warning):\n+    app.builder.build_all()\n+\n+    # Ensure that module pages are not created for epub when viewcode_enable_epub=False\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\n+def test_viewcode_epub_explicit_enabled(app, status, warning):\n+    app.builder.build_all()\n+\n+    # Ensure module pages are created for epub when viewcode_enable_epub=True\n+    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..57f1a28 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,18 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_function_enum():\n+    import enum\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n \n-def test_getslots():\n+    def example_function(e: MyEnum = MyEnum.ValueA):\n+        pass\n+\n+    signature = inspect.object_description(example_function.__defaults__[0])\n+    # Expect that the signature renders without the Enum value details\n+    assert signature == 'MyEnum.ValueA'\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..569d2d1 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -16,8 +16,9 @@ import pytest\n from sphinx import application\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n-\n-warnfile = StringIO()\n+from os import path\n+import sys\n+from sphinx.cmd.quickstart import ask_user\n \n \n def setup_module():\n@@ -241,7 +242,24 @@ def test_default_filename(tempdir):\n     exec(conffile.read_text(), ns)\n \n \n-def test_extensions(tempdir):\n+def test_exits_when_existing_confpy_and_no_path(monkeypatch):\n+    \"\"\"Test `sphinx-quickstart` exits when user presses Enter after finding existing conf.py.\"\"\"\n+    \n+    # Mock an environment where conf.py already exists\n+    def mock_isfile(p):\n+        return True if 'conf.py' in p else False\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    # Mock user enters nothing (just presses Enter) to quickstart prompts\n+    def mock_input(prompt):\n+        sys.stdout.write(prompt)\n+        return ''  # Simulate pressing Enter by returning empty string\n+    \n+    monkeypatch.setattr('builtins.input', mock_input)\n+\n+    d = {}\n+    with pytest.raises(SystemExit):\n+        ask_user(d)\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..c657c7f 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -49,6 +49,7 @@ from sphinx.pycode import ast\n     (\"a >> b\", \"a >> b\"),                       # RShift\n     (\"{1, 2, 3}\", \"{1, 2, 3}\"),                 # Set\n     (\"a - b\", \"a - b\"),                         # Sub\n+    (\"(1,)\", \"(1,)\"),                           # Tuple (single element)\n     (\"'str'\", \"'str'\"),                         # Str\n     (\"+ a\", \"+ a\"),                             # UAdd\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..997e7fe 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,6 +847,52 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n+def test_pyproperty_with_cross_reference(app):\n+    text = (\".. py:class:: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: x\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: y\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: width\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: height\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_name, \"Point\"])],\n+                                  [desc_content, (addnodes.index,\n+                                                  desc,\n+                                                  addnodes.index,\n+                                                  desc)])]))\n+    assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, \"attribute \"],\n+                                                     [desc_name, \"x\"],\n+                                                     [desc_annotation, \": int\"])],\n+                                   [desc_content, ()]))\n+    assert_node(doctree[1][1][3], ([desc_signature, ([desc_annotation, \"attribute \"],\n+                                                     [desc_name, \"y\"],\n+                                                     [desc_annotation, \": int\"])],\n+                                   [desc_content, ()]))\n+    assert_node(doctree[2][1][0], addnodes.index,\n+                entries=[('single', 'end (Square property)', 'Square.end', '', None)])\n+    assert_node(doctree[2][1][1], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [pending_xref, \"Point\"])],\n+                                   [desc_content, ()]))\n+\n def test_pydecorator_signature(app):\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..4fb7fa1 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,39 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    \n+    # Test distance between a 3D and a 2D point\n+    assert p1.distance(p2) == sqrt(5)\n+    \n+    # Test distance from a 2D point to a 3D point (orders reversed)\n+    assert p2.distance(p1) == sqrt(5)\n+    \n+    # Test distance between two 2D points (should behave normally)\n+    p3 = Point2D(3, 4)\n+    assert p2.distance(p3) == sqrt((3-2)**2 + (4-0)**2)  # 5\n+    \n+    # Test distance between two 3D points\n+    p4 = Point3D(4, 0, 0)\n+    assert p1.distance(p4) == sqrt((4-1)**2 + (0-0)**2 + (0-2)**2)  # sqrt(13)\n+    \n+    # Test distance where one point is an origin in 3D space\n+    p_origin = Point3D(0,0,0)\n+    assert p1.distance(p_origin) == sqrt(1**2 + 0**2 + 2**2)\n+\n+    # Test with another different 3D point\n+    p5 = Point3D(1, 1, 1)\n+    assert p1.distance(p5) == sqrt(0**2 + 1**2 + 1**2)  # sqrt(2)\n+    \n+    # Ensure 3D consistency with larger inputs\n+    p6 = Point3D(7, -5, 3)\n+    assert p1.distance(p6) == sqrt((7-1)**2 + (0-(-5))**2 + (3-2)**2)  # sqrt(62)\n+\n+from sympy import sqrt\n+from sympy.geometry import Point, Point3D, Point2D\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..e559607 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,27 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+from sympy import Float\n+from sympy.utilities.lambdify import implemented_function\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2*x)\n+    assert f(f(2)).evalf() == Float(16)\n+\n+def test_issue_12092_recursive():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2*x)\n+\n+    # Single nested eval\n+    assert f(g(2)).evalf() == Float(16)\n+\n+    # Double nested eval\n+    assert f(f(g(2))).evalf() == Float(256)\n+\n+    # Expression involving both g inside f\n+    assert f(g(f(g(2)))).evalf() == Float(1024)\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..a66a8c5 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -84,7 +84,18 @@ def test_Identity():\n     assert In.inverse() == In\n     assert In.conjugate() == In\n \n-def test_Identity_doit():\n+def test_total_sum_of_identity_matrix():\n+    from sympy import Identity, Symbol, Sum, symbols\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    In = Identity(n)\n+    \n+    # Verify the sum of elements for specific values of n\n+    assert Sum(Sum(In[i, j], (i, 0, 2)), (j, 0, 2)).doit() == 3  # Sum of 3x3 identity matrix is 3\n+    assert Sum(Sum(In[i, j], (i, 0, 3)), (j, 0, 3)).doit() == 4  # Sum of 4x4 identity matrix is 4\n+    \n+    # Verify the generalized sum of elements\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n  # For n x n identity matrix\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..eb1ee20 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -354,6 +354,25 @@ def test_args():\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n+    # Test cases for non-disjoint cycles as per the issue description\n+    # Check if Permutation([[0, 1], [0, 1]]) creates the identity permutation\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+\n+    # Check if Permutation([[0, 1], [1, 0]]) creates the identity permutation\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])\n+\n+    # Check application order: Permutation([[0, 1], [1, 2]]) = [0, 2, 1]\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1])\n+\n+    # Check another application order: Permutation([[0, 1, 2], [1, 2]]) = [0, 2, 1]\n+    assert Permutation([[0, 1, 2], [1, 2]]) == Permutation([0, 2, 1])\n+\n+    # Verify that non-disjoint cycle Permutation([[1, 2], [1, 3, 4]]) gives [0, 1, 3, 4, 2]\n+    assert Permutation([[1, 2], [1, 3, 4]]) == Permutation([0, 1, 3, 4, 2])\n+\n+    # Combined non-disjoint cycles leading to permutation of nonzero elements\n+    assert Permutation([[0, 2], [1, 2]]) == Permutation([2, 0, 1])\n+\n \n def test_Cycle():\n     assert str(Cycle()) == '()'\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..563481d 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -502,8 +502,14 @@ def test_sparse_zeros_sparse_eye():\n     assert SparseMatrix.zeros(3) == zeros(3, cls=SparseMatrix)\n     assert len(SparseMatrix.zeros(3)._smat) == 0\n \n-\n-def test_copyin():\n+def test_sparse_hstack_vstack_zero_dimensions():\n+    # Test hstack with zero-row sparse matrices\n+    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices) == SparseMatrix(0, 6)\n+\n+    # Test vstack with zero-column sparse matrices\n+    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices) == SparseMatrix(6, 0)\n     s = SparseMatrix(3, 3, {})\n     s[1, 0] = 1\n     assert s[:, 0] == SparseMatrix(Matrix([0, 1, 0]))\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..005fad8 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -229,9 +229,19 @@ def test_evalf_bugs():\n \n     #issue 11518\n     assert NS(2*x**2.5, 5) == '2.0000*x**2.5000'\n+from sympy import Mul, Max, NS, symbols\n \n+x, y = symbols('x y')\n \n-def test_evalf_integer_parts():\n+def test_evalf_mul_order_unbound_local_error():\n+    # Original test patch for issue 13076\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+\n+    # Additional tests to cover more cases related to multiplication orders\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(Max(0, y), 2, evaluate=False).evalf()) == '2*Max(0, y)'\n+    assert NS(Mul(2, Max(0, y), evaluate=False).evalf()) == '2*Max(0, y)'\n+    assert NS(Mul(Max(0, y), Max(2, x), evaluate=False).evalf()) == 'Max(0, y)*Max(2, x)'\n     a = floor(log(8)/log(2) - exp(-1000), evaluate=False)\n     b = floor(log(8)/log(2), evaluate=False)\n     assert a.evalf() == 3\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..321b902 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -200,6 +200,34 @@ def test_tanh():\n \n     assert tanh(k*pi*I) == 0\n     assert tanh(17*k*pi*I) == 0\n+    from sympy import coth, log, tan, Symbol\n+\n+    def test_coth_log_tan_subs():\n+        x = Symbol('x')\n+        e = coth(log(tan(x)))\n+\n+        # Test cases for specific integral values mentioned in the issue\n+        try:\n+            result_2 = e.subs(x, 2)\n+            print(f\"coth(log(tan(2))) = {result_2}\")\n+        except NameError as ex:\n+            print(f\"Error occurred for coth(log(tan(2))): {ex}\")\n+\n+        try:\n+            result_3 = e.subs(x, 3)\n+            print(f\"coth(log(tan(3))) = {result_3}\")\n+        except NameError as ex:\n+            print(f\"Error occurred for coth(log(tan(3))): {ex}\")\n+\n+        try:\n+            result_5 = e.subs(x, 5)\n+            print(f\"coth(log(tan(5))) = {result_5}\")\n+        except NameError as ex:\n+            print(f\"Error occurred for coth(log(tan(5))): {ex}\")\n+        \n+        # Add more test cases for other integral values as needed\n+\n+    test_coth_log_tan_subs()\n \n     assert tanh(k*pi*I/2) == tan(k*pi/2)*I\n \n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..2c2c144 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -188,6 +188,20 @@ def test_Complement():\n     assert S.Reals - Union(S.Naturals, FiniteSet(pi)) == \\\n             Intersection(S.Reals - S.Naturals, S.Reals - FiniteSet(pi))\n \n+    # Test case for issue with mixture of symbols and numbers in Complement\n+    a = FiniteSet(x, y, 2)\n+    b = Interval(-10, 10)\n+    assert Complement(a, b) == Complement(FiniteSet(x, y), b)  # Only 2 should be removed\n+\n+    # Additional test cases\n+    c = FiniteSet(x, 5, 15, y)\n+    d = Interval(0, 10)\n+    assert Complement(c, d) == Complement(FiniteSet(x, 15, y), d)  # 5 should be removed\n+\n+    e = FiniteSet(1, x, 10, z)\n+    f = Interval(1, 5)\n+    assert Complement(e, f) == Complement(FiniteSet(x, 10, z), f)  # 1 should be removed\n+\n def test_complement():\n     assert Interval(0, 1).complement(S.Reals) == \\\n         Union(Interval(-oo, 0, True, True), Interval(1, oo, True, True))\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..8c0eec1 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,6 +201,59 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n+def test_issue_13643():\n+    from sympy import Matrix, eye, ones\n+\n+    # Original test case\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1],\n+    ])\n+    assert result == expected\n+\n+    # Additional test cases for various scenarios\n+\n+    # Insert into empty matrix\n+    M_empty = Matrix(0, 0, [])\n+    V_empty = ones(0, 2)\n+    result_empty = M_empty.col_insert(0, V_empty)\n+    assert result_empty == Matrix(0, 2, [])\n+\n+    # Insert at start\n+    result_start = M.col_insert(0, V)\n+    expected_start = Matrix([\n+        [2, 2, 1, 0, 0, 0, 0, 0],\n+        [2, 2, 0, 1, 0, 0, 0, 0],\n+        [2, 2, 0, 0, 1, 0, 0, 0],\n+        [2, 2, 0, 0, 0, 1, 0, 0],\n+        [2, 2, 0, 0, 0, 0, 1, 0],\n+        [2, 2, 0, 0, 0, 0, 0, 1],\n+    ])\n+    assert result_start == expected_start\n+\n+    # Insert at end\n+    result_end = M.col_insert(6, V)\n+    expected_end = Matrix([\n+        [1, 0, 0, 0, 0, 0, 2, 2],\n+        [0, 1, 0, 0, 0, 0, 2, 2],\n+        [0, 0, 1, 0, 0, 0, 2, 2],\n+        [0, 0, 0, 1, 0, 0, 2, 2],\n+        [0, 0, 0, 0, 1, 0, 2, 2],\n+        [0, 0, 0, 0, 0, 1, 2, 2],\n+    ])\n+    assert result_end == expected_end\n+\n+    # Insert multiple columns of varying lengths\n+    V_varying = ones(3, 2)\n+    raises(ValueError, lambda: M.col_insert(3, V_varying))  # Should raise an error\n+\n def test_extract():\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..5b650b0 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -677,8 +677,14 @@ def test_Poly_mul():\n     assert Poly(x, x) * 2 == Poly(2*x, x)\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n-\n-def test_Poly_sqr():\n+def test_issue_13079():\n+    from sympy import Poly, S, symbols\n+    x = symbols('x')\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..6bc3edb 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,22 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_customization():\n+    # Test custom mul_symbol as a thin space\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    # Test mul_symbol's impact on fractional expressions\n+    assert latex(S(3)/2*x, mul_symbol='\\\\,') == r\"\\frac{3}{2}\\,x\"\n+    # Test mul_symbol with a more complex expression\n+    assert latex((x**2 + 2*x + 1)*(x - 1), mul_symbol='\\\\,') == r\"\\left(x^{2} + 2\\,x + 1\\right)\\,\\left(x - 1\\right)\"\n+    # Test no mul_symbol provided (should default)\n+    assert latex(3*x**2*y) == \"3 x^{2} y\"\n+    # Test with an arbitrary string as mul_symbol\n+    assert latex(3*x**2*y, mul_symbol='**') == r\"3**x^{2}**y\"\n+    \n+    # Original test cases remain to ensure backward compatibility\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\\\cdot 3^{x}\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..8e8aed5 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -156,8 +156,29 @@ def test_characteristic_function():\n     assert cf(0) == 1\n     assert simplify(cf(1)) == S(25)/26 + 5*I/26\n \n-\n-def test_sample():\n+from sympy import S, oo, symbols, sqrt, exp, gamma, lowergamma, Abs\n+from sympy.stats import (\n+    cdf, Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse, Kumaraswamy,\n+    Laplace, Logistic, Nakagami, StudentT, UniformSum\n+)\n+\n+def test_cdf_precomputed():\n+    x = symbols('x', real=True, finite=True)\n+    # Test cases as described in the issue\n+    assert cdf(Arcsin(\"x\", 0, 3))(1) == 2*asin(sqrt(1/3))/pi\n+    assert cdf(Dagum(\"x\", S(1)/3, S(1)/5, 2))(3) is not None\n+    assert cdf(Erlang(\"x\", 1, 1))(1) == lowergamma(1, 1)/gamma(1)\n+    assert cdf(Frechet(\"x\", S(4)/3, 1, 2))(3) is not None\n+    # Gamma uses lowergamma for CDF computation\n+    assert cdf(Gamma(\"x\", 0.1, 2))(3).func == lowergamma\n+    assert cdf(GammaInverse(\"x\", S(5)/7, 2))(3) is not None\n+    assert cdf(Kumaraswamy(\"x\", S(1)/123, 5))(S(1)/3) is not None\n+    assert cdf(Laplace(\"x\", 2, 3))(5).is_Piecewise\n+    assert cdf(Logistic(\"x\", 1, 0.1))(2).is_function\n+    # Nakagami uses lowergamma for CDF computation\n+    assert cdf(Nakagami(\"x\", S(7)/3, 1))(2).func == lowergamma\n+    assert cdf(StudentT(\"x\", 10))(2).is_function\n+    assert cdf(UniformSum(\"x\", 5))(2) is not None\n     z = Symbol('z')\n     Z = ContinuousRV(z, exp(-z), set=Interval(0, oo))\n     assert sample(Z) in Z.pspace.domain.set\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..a9983da 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -38,6 +38,33 @@ def test_tensor_product_expand():\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n \n+from sympy import symbols\n+from sympy.physics.quantum import TensorProduct as TP, tensor_product_simp\n+from sympy.physics.paulialgebra import Pauli\n+\n+A, B, C, D = symbols('A,B,C,D', commutative=False)\n+\n+def test_tensor_product_power_issue():\n+    # Initial test cases based on the original report\n+    a = symbols('a', commutative=False)\n+    t1 = TP(1, 1) * TP(1, 1)\n+    assert tensor_product_simp(t1) == TP(1 * 1, 1 * 1)\n+    assert t1.expand(tensorproduct=True) == TP(1 * 1, 1 * 1)\n+    assert tensor_product_simp(TP(1, 1) * TP(1, a)).subs(a, 1) == TP(1 * 1, 1 * 1)\n+    \n+    t2 = TP(1, Pauli(3)) * TP(1, Pauli(3))\n+    assert tensor_product_simp(t2) == TP(1 * 1, Pauli(3) * Pauli(3))\n+    assert t2.expand(tensorproduct=True) == TP(1 * 1, Pauli(3) * Pauli(3))\n+    assert tensor_product_simp(TP(1, Pauli(3)) * TP(1, a)).subs(a, Pauli(3)) == TP(1 * 1, 1 * 1)\n+\n+    # Additional test cases for tensor product powers\n+    assert tensor_product_simp(TP(A, B)**2) == TP(A**2, B**2)\n+    assert tensor_product_simp(TP(A, B)**2 * TP(C, D)) == TP(A**2 * C, B**2 * D)\n+    \n+    # Testing that existing functionality is unaffected\n+    assert tensor_product_simp(x*TP(A, B)**2) == x*TP(A**2, B**2)\n+    assert tensor_product_simp(x*(TP(A, B)**2)*TP(C, D)) == x*TP(A**2 * C, B**2 * D)\n+\n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..f6481a5 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -88,7 +88,14 @@ def test_python_relational():\n     assert python(Ne(x/(y + 1), y**2)) in [\"e = Ne(x/(1 + y), y**2)\", \"e = Ne(x/(y + 1), y**2)\"]\n \n \n-def test_python_functions():\n+def test_python_code_generation():\n+    x, y = symbols('x y')\n+    # Test that python function generates code with symbols declared\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n+    assert python(Ne(x / (y + 1), y**2)) in [\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(1 + y), y**2)\",\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(y + 1), y**2)\"\n+    ]\n     # Simple\n     assert python((2*x + exp(x))) in \"x = Symbol('x')\\ne = 2*x + exp(x)\"\n     assert python(sqrt(2)) == 'e = sqrt(2)'\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..5191d53 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -7,8 +7,13 @@ from sympy.utilities.pytest import raises\n Vector.simp = True\n A = ReferenceFrame('A')\n \n-\n-def test_Vector():\n+def test_vector_add_zero_multiplication():\n+    \"\"\"Test adding zero multiplied vector.\"\"\"\n+    N = ReferenceFrame('N')\n+    assert N.x + 0*N.x == N.x\n+    assert 0*N.x + N.x == N.x\n+    assert sum([N.x, 0*N.x]) == N.x\n+    assert sum([N.x, 0*N.x, 0*N.y, 0*N.z]) == N.x\n     assert A.x != A.y\n     assert A.y != A.z\n     assert A.z != A.x\n",
  "sympy__sympy-14976": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex fbe0d75..a266f50 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import (absolute_import, division, print_function)\n \n@@ -38,6 +39,11 @@ def test_PythonCodePrinter():\n \n \n def test_MpmathPrinter():\n+    # Test that Rational numbers are printed correctly with mpmath\n+    x = symbols('x')\n+    p = MpmathPrinter()\n+    assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n+    assert p.doprint(Rational(232, 3)) == 'mpmath.mpf(232)/mpmath.mpf(3)'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n \n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..7f758e0 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,11 +74,24 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    assert len(rank_zero_array) == 1\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n-    raises(ValueError, lambda: rank_zero_array[0])\n+    raises(IndexError, lambda: rank_zero_array[0])\n+    \n+    # Test if converting rank-zero array directly to list gives correct element count\n+    assert len(list(rank_zero_array)) == 1\n+    assert list(rank_zero_array) == [x]\n+  \n+    # Test the behavior of len on scalar elements with different types\n+    scalar_int = ImmutableDenseNDimArray(42)\n+    scalar_symbol = ImmutableDenseNDimArray(Symbol('y'))\n+\n+    assert len(scalar_int) == 1\n+    assert scalar_int[()] == 42\n+    assert len(scalar_symbol) == 1\n+    assert scalar_symbol[()] == Symbol('y')\n \n \n def test_reshape():\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..c9e6935 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,19 @@\n+\n+def test_Max_Min():\n+    # Test issue case: Max with a variable and a constant\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    # Test with more variables\n+    assert mcode(Max(x, y, z)) == \"Max[x, y, z]\"\n+    # Test with expressions\n+    assert mcode(Max(x + 1, y)) == \"Max[x + 1, y]\"\n+    # Test Min to ensure no regressions\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..8feb4c4 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1507,8 +1507,23 @@ def test_product_irrational():\n def test_issue_5919():\n     assert (x/(y*(1 + y))).expand() == x/(y**2 + y)\n \n+from sympy import symbols, Mod, Symbol, sqrt, pi, Rational, factorial, Pow, Float, comp, nan, S, raises, verify_numerically\n \n def test_Mod():\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # Additional tests for diverse cases\n+    assert Mod(9*i + 6, 3) == 0\n+    assert Mod(9*i*j, 6*j) == 3*i % 2\n+    assert Mod(9*i*j*k, 6*i*k) == 3*j % 2\n+    k = Symbol('k', integer=True, positive=True)\n+    assert Mod(3*k, 2) == Mod(k, 2)\n+    assert Mod(-3*i, 2) == -Mod(i, 2)\n+    assert Mod(6*i, 4) == 2*Mod(i, 2)\n     assert Mod(x, 1).func is Mod\n     assert pi % pi == S.Zero\n     assert Mod(5, 3) == 2\n",
  "sympy__sympy-15809": "",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..a127c8b 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1982,7 +1982,35 @@ def test_issue_8247_8354():\n     assert z.is_positive is False  # it's 0 (and a single _mexpand isn't enough)\n \n \n+from sympy import I, simplify\n+\n def test_Add_is_zero():\n+    # Issue 15873: Original test case\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+\n+    # Additional test cases for complex expressions\n+    # Check if a simplified expression resolves the uncertainty\n+    e_simplified = simplify(e)\n+    assert e_simplified.is_zero is True\n+\n+    # Test a zero expression directly\n+    zero_expr = 1*I + (-1)*I\n+    assert zero_expr.is_zero is True\n+\n+    # Expression that includes real and complex parts, should be not zero\n+    expr_mixed = 2 + 3*I + (-2 - 2*I)\n+    assert expr_mixed.is_zero is False\n+\n+    # A complex expression involving symbols\n+    from sympy import symbols\n+    a, b = symbols('a b', real=True)\n+    complex_expr = a + b*I + (-a - b*I)\n+    assert complex_expr.is_zero is None  # Indeterminate without values\n+\n+    # Zero determination involving conjugate\n+    expr_conjugate = (1 + I) - (1 + I).conjugate()\n+    assert expr_conjugate.is_zero is None\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n@@ -1993,4 +2021,4 @@ def test_issue_14392():\n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..51fd891 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -512,7 +512,22 @@ def test_posify():\n         'Sum(_x**(-n), (n, 1, 3))'\n \n \n-def test_issue_4194():\n+def test_posify_preserves_assumptions():\n+    # Test that posify preserves various assumptions\n+    finite_symbol = Symbol('f', finite=True)\n+    integer_symbol = Symbol('i', integer=True)\n+    rational_symbol = Symbol('r', rational=True)\n+    prime_symbol = Symbol('p', prime=True)\n+    even_symbol = Symbol('e', even=True)\n+    odd_symbol = Symbol('o', odd=True)\n+\n+    symbols = [finite_symbol, integer_symbol, rational_symbol, prime_symbol, even_symbol, odd_symbol]\n+    for symbol in symbols:\n+        eq, _ = posify(symbol)\n+        for assumption in ['finite', 'integer', 'rational', 'prime', 'even', 'odd']:\n+            if getattr(symbol, f'is_{assumption}') is not None:  # Check only if the symbol has this assumption explicitly\n+                assert getattr(eq, f'is_{assumption}') == getattr(symbol, f'is_{assumption}'), \\\n+                    f\"posify failed to preserve the '{assumption}' assumption for symbol '{symbol}'\"\n     # simplify should call cancel\n     from sympy.abc import x, y\n     f = Function('f')\n",
  "sympy__sympy-16766": "",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..3584472 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -47,6 +47,17 @@ def test_cython_wrapper_scalar_function():\n         \"    return test(x, y, z)\")\n     assert source == expected\n \n+def test_autowrap_cython_unused_array_arg():\n+    from sympy import MatrixSymbol\n+    from sympy.utilities.autowrap import autowrap\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # x does not appear in the expression\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    \n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n+\n \n def test_cython_wrapper_outarg():\n     from sympy import Equality\n@@ -66,6 +77,17 @@ def test_cython_wrapper_outarg():\n         \"    return z\")\n     assert source == expected\n \n+def test_autowrap_cython_unused_array_arg():\n+    from sympy import MatrixSymbol\n+    from sympy.utilities.autowrap import autowrap\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # x does not appear in the expression\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    \n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n+\n \n def test_cython_wrapper_inoutarg():\n     from sympy import Equality\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..f6e6e5e 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -237,8 +237,11 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(3, (8, 3)) == 1\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n+from sympy.crypto.crypto import encode_morse\n \n def test_encode_morse():\n+    # Check encoding for the digit \"1\"\n+    assert encode_morse('1') == '.----'\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n     assert encode_morse('SMS\\n') == '...|--|...||'\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..1669971 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -811,7 +811,21 @@ def test_issue_15965():\n     assert simplify(B) == bnew\n \n \n-def test_issue_7971():\n+def test_issue_17137():\n+    # Original test patch\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+\n+    # Additional test cases for validation\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify(sin(x)**(2 + 3*I)) == sin(x)**(2 + 3*I)\n+    assert simplify((cos(x) + I*sin(x))**I) == (cos(x) + I*sin(x))**I\n+    assert simplify(exp(I*x)) == exp(I*x)  # no simplification expected\n+    assert simplify((1 + I)**x) == (1 + I)**x  # no simplification\n+\n+    # Test cases involving known reduction situations\n+    assert simplify(cos(0)**I) == 1\n+    assert simplify(cos(pi/2)**I) == 0**I  # Should handle edge cases properly\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..b8e0a49 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n@@ -176,7 +179,17 @@ def test_subsets():\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n \n-def test_issue_5653():\n+def test_issue_12420():\n+    # Test for the original issue described\n+    assert unchanged(sqrtdenest, (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2)\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert unchanged(sqrtdenest, e)\n+    # Additional test cases to verify the fix\n+    assert unchanged(sqrtdenest, sqrt(1 + I))\n+    assert unchanged(sqrtdenest, sqrt(1 + 2*I))\n+    assert unchanged(sqrtdenest, sqrt(I))\n+    assert unchanged(sqrtdenest, I)\n+    assert unchanged(sqrtdenest, 1 + I)\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..bc1ee1f 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,12 +1,20 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n-\n-def test_point():\n+def test_multiplication_with_sympify():\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    assert point1 + point2 * sympify(2.0) == Point(2, 2), (\n+        \"Failed when multiplying point2 directly with sympify result\"\n+    )\n+    assert point1 + sympify(2.0) * point2 == Point(2, 2), (\n+        \"Failed when multiplying sympify result directly with point2\"\n+    )\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..f6978d1 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,22 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+def test_issue_18186():\n+    from sympy import symbols\n+    from sympy.solvers.diophantine import diophantine\n+\n+    x, y = symbols('x y', integer=True)\n+    # Test issue 18186: Testing for consistent results irrespective of symbol order\n+    expected_solutions = {(-3, -2), (-3, 2), (-2, -3), (-2, 3), \n+                          (2, -3), (2, 3), (3, -2), (3, 2)}\n+    \n+    # (x, y) order\n+    result1 = diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True)\n+    assert result1 == expected_solutions, f\"Unexpected result {result1}\"\n+\n+    # (y, x) order\n+    result2 = diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True)\n+    assert result2 == expected_solutions, f\"Unexpected result {result2}\"\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18763": "",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..df210f5 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,7 +1,8 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n-    EmptySet, Union, Contains)\n+    EmptySet, Union, Contains, imageset)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n-    And, Mod, oo, Function)\n+    And, Mod, oo, Function, Lambda)\n from sympy.testing.pytest import raises, XFAIL, warns_deprecated_sympy\n \n \n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..c4d9dfe 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -476,7 +476,26 @@ def test_issue_4988_builtins():\n     assert exp2 == C  # Make sure it did not get mixed up with sympy.C\n \n \n-def test_geometry():\n+from sympy import Symbol\n+from sympy.core.sympify import kernS\n+\n+def test_kernS_issue_resolution():\n+    # Test that no UnboundLocalError is raised and `kernS` resolves correctly\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+    \n+    # Test with various expressions to ensure no errors and expected results\n+    assert kernS(\"(x + 1)/(x - 1)\") == (x + 1)/(x - 1)\n+    assert kernS(\"x - 1/(x + 1)\") == x - 1/(x + 1)\n+    assert kernS(\"3*(x + 2)\") == 3*(x + 2)\n+    assert kernS(\"(x + 1)*(x - 1)\") == (x + 1)*(x - 1)\n+\n+    # Test edge case with spaces in a complex nested expression\n+    complex_expr = \"( (2 * x)/(  x-1  ) + 3)\"\n+    assert kernS(complex_expr) == (2*x)/(x-1) + 3\n+    \n+    # Handling symbols that might interfere with the `kern` variable\n+    assert kernS(\"kern\") == Symbol(\"kern\")\n+    assert kernS(\"2*(kern + x)\") == 2*(Symbol(\"kern\") + x)\n     p = sympify(Point(0, 1))\n     assert p == Point(0, 1) and isinstance(p, Point)\n     L = sympify(Line(p, (1, 0)))\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..97d370d 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,12 +1,13 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n-                   symbols)\n+                   symbols, conjugate)\n from sympy.physics.quantum.qexpr import QExpr\n from sympy.physics.quantum.dagger import Dagger\n from sympy.physics.quantum.hilbert import HilbertSpace\n from sympy.physics.quantum.operator import (Operator, UnitaryOperator,\n                                             HermitianOperator, OuterProduct,\n                                             DifferentialOperator,\n-                                            IdentityOperator)\n+                                            IdentityOperator, adjoint)\n from sympy.physics.quantum.state import Ket, Bra, Wavefunction\n from sympy.physics.quantum.qapply import qapply\n from sympy.physics.quantum.represent import represent\n@@ -84,7 +85,18 @@ def test_unitary():\n     assert Dagger(U).is_commutative is False\n \n \n-def test_identity():\n+def test_dagger_identity_simplification():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    D_O = Dagger(O)\n+\n+    # Check if Dagger(O) * IdentityOperator() simplifies to Dagger(O) after fix.\n+    assert D_O * I == D_O\n+    \n+    # Additional checks\n+    assert I * D_O == D_O\n+    assert D_O * O * I == D_O * O\n+    assert O * D_O * I == O * D_O\n     I = IdentityOperator()\n     O = Operator('O')\n     x = Symbol(\"x\")\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..d82cc52 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -898,11 +898,31 @@ def test_sylow_subgroup():\n     G = SymmetricGroup(100)\n     S = G.sylow_subgroup(3)\n     assert G.order() % S.order() == 0\n+\n+    # Test cases for the issue with sylow_subgroup() in DihedralGroup\n+    # Verifying that no IndexError occurs and the correct order is returned\n+    G = DihedralGroup(18)\n+    S2 = G.sylow_subgroup(p=2)\n+    assert S2.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S2 = G.sylow_subgroup(p=2)\n+    assert S2.order() == 4\n     assert G.order()/S.order() % 3 > 0\n \n     G = AlternatingGroup(100)\n     S = G.sylow_subgroup(2)\n     assert G.order() % S.order() == 0\n+\n+    # Test cases for the issue with sylow_subgroup() in DihedralGroup\n+    # Verifying that no IndexError occurs and the correct order is returned\n+    G = DihedralGroup(18)\n+    S2 = G.sylow_subgroup(p=2)\n+    assert S2.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S2 = G.sylow_subgroup(p=2)\n+    assert S2.order() == 4\n     assert G.order()/S.order() % 2 > 0\n \n \n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..858e3d5 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,32 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n+# Import necessary helpers from sympy\n+from sympy import S\n+from sympy.utilities.iterables import partitions, uniq\n \n def test_partitions():\n+    # Additional test case to ensure dictionaries are not reused\n+    def is_deep_copy(p_iter):\n+        # Convert to list and check if modifying one element affects others\n+        p_list = list(p_iter)\n+        if not p_list:\n+            return True\n+        \n+        # Modify the first element a bit and check the rest are unaffected\n+        first_copy = p_list[0].copy()\n+        first_copy[999] = 999\n+        unaffected_list = [second.copy() for second in p_list[1:]]\n+        \n+        return [first_copy] + unaffected_list == p_list\n+    \n+    # Test for no dictionary reuse issue\n+    assert is_deep_copy(partitions(6, k=2))\n+    assert is_deep_copy(partitions(6, k=3))\n+    assert is_deep_copy(partitions(8, k=4, m=3))\n+    assert is_deep_copy(partitions(S(3), m=2))\n+    assert is_deep_copy(partitions(4, k=3))\n+    assert is_deep_copy(partitions(4))\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20801": "",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..db0471d 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -20,6 +21,38 @@ def test_subs():\n     assert e == Rational(6)\n \n \n+def test_issue_21373_subs():\n+    from sympy.functions.elementary.trigonometric import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+\n+    # Set up symbols\n+    x_r, y_r, z = symbols('x_r y_r z', real=True)\n+\n+    # Expression that used to trigger PolynomialError\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+\n+    # Perform the substitution that used to cause errors\n+    result = expr.subs({1: 1.0})\n+\n+    # Assert that the operation completes without error\n+    # Ideally, we would check the correctness of `result` if we knew what it should be\n+    assert result == expr.subs({1: 1.0})  # rerun to assure consistent behavior\n+\n+    # Exploring similar edge cases\n+    expr_without_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))  # no division\n+    result_without_div = expr_without_div.subs({1: 1.0})\n+\n+    # Assert it should not raise any errors either\n+    assert result_without_div == expr_without_div.subs({1: 1.0})\n+\n+    expr_with_cos = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    result_with_cos = expr_with_cos.subs({1: 1.0})\n+    assert result_with_cos == expr_with_cos.subs({1: 1.0})\n+\n+    expr_with_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    result_with_tanh = expr_with_tanh.subs({1: 1.0})\n+    assert result_with_tanh == expr_with_tanh.subs({1: 1.0})\n+\n def test_subs_Matrix():\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..51c27b2 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -13,6 +13,8 @@ from sympy.polys.polyerrors import ExactQuotientFailed\n \n from sympy.abc import a, b, c, x, y, z\n from sympy.core import S, symbols\n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n from sympy.testing.pytest import raises\n \n \n@@ -161,8 +163,38 @@ def test_monomials():\n                     j**2*k**2, x*j, x**2*k, x**2*j**2*k, j, x**2*j*k,\n                     x*j**2, x*k**2, x*j*k, x**2*j**2*k**2, x*j*k**2, x**2, x**2*j*k**2\n             }\n-\n-def test_monomial_count():\n+def test_itermonomials_min_max_degrees_issue():\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    states = [x1, x2, x3]\n+\n+    # Original test scenario from the issue\n+    max_degrees = 3\n+    min_degrees = 3\n+    monomials = sorted(itermonomials(states, max_degrees, min_degrees=min_degrees), \n+                       key=monomial_key('grlex', states))\n+    correct_monomials = {x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x2*x3, x1*x3**2,\n+                         x2**3, x2**2*x3, x2*x3**2, x2*x1**2, x2*x1*x3, x3**3, x3*x1**2, x3*x2**2, x3*x1*x2}\n+\n+    assert set(monomials) == correct_monomials\n+\n+    # Additional tests\n+    max_degrees = 4\n+    min_degrees = 3\n+    monomials = sorted(itermonomials(states, max_degrees, min_degrees=min_degrees), \n+                       key=monomial_key('grlex', states))\n+    assert set(monomials) >= correct_monomials  # Should include all degree 3 monomials\n+    \n+    max_degrees = 5\n+    min_degrees = 4\n+    monomials = sorted(itermonomials(states, max_degrees, min_degrees=min_degrees), \n+                       key=monomial_key('grlex', states))\n+    correct_monomials_4 = {\n+        x1**4, x1**3*x2, x1**3*x3, x1**2*x2**2, x1**2*x2*x3, x1**2*x3**2, \n+        x1*x2**3, x1*x2**2*x3, x1*x2*x3**2, x1*x3**3,\n+        x2**4, x2**3*x3, x2**2*x3**2, x2*x3**3, x2*x1**3, x2*x1**2*x3, x2*x1*x3**2, \n+        x3**4, x3*x1**3, x3*x1**2*x2, x3*x1*x2**2, x3*x2**3\n+    }\n+    assert set(monomials) >= correct_monomials_4  # Should include all degree 4 monomials\n     assert monomial_count(2, 2) == 6\n     assert monomial_count(2, 3) == 10\n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..5a9def5 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..5a21e93 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,9 +1,11 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.core.sympify import sympify\n from sympy.functions.elementary.miscellaneous import sqrt\n+from sympy.core.parameters import evaluate\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n@@ -443,8 +445,25 @@ def test_unit():\n def test_dot():\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n-\n-def test__normalize_dimension():\n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        result = Point(1, 2)\n+        assert isinstance(result, Point2D)\n+        assert result == Point2D(1, 2)\n+\n+def test_issue_22684_alternative_constructor():\n+    with evaluate(False):\n+        result = Point2D(1, 2)\n+        assert result == Point2D(1, 2)\n+\n+def test_point_without_evaluate():\n+    result = Point2D(1, 2, evaluate=False)\n+    assert result == Point2D(1, 2)\n+\n+def test_point_with_complex_coords():\n+    # This should raise a ValueError for imaginary components\n+    raises(ValueError, lambda: Point2D(1 + 2*I, 2))\n     assert Point._normalize_dimension(Point(1, 2), Point(3, 4)) == [\n         Point(1, 2), Point(3, 4)]\n     assert Point._normalize_dimension(\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..6c4adec 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -58,8 +59,13 @@ def test_PythonCodePrinter():\n     assert prntr.doprint((2,3)) == \"(2, 3)\"\n     assert prntr.doprint([2,3]) == \"[2, 3]\"\n \n-\n-def test_PythonCodePrinter_standard():\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    # Additional test cases\n+    assert prntr.doprint(Min(3, 2, 1)) == \"min(3, 2, 1)\"\n+    assert prntr.doprint(Max(3, 2, 1)) == \"max(3, 2, 1)\"\n+    assert prntr.doprint(Min(x, 2)) == \"min(x, 2)\"\n+    assert prntr.doprint(Max(y, 0)) == \"max(y, 0)\"\n     prntr = PythonCodePrinter()\n \n     assert prntr.standard == 'python3'\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..67c3672 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,23 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+\n+def test_lambdify_single_element_tuple():\n+    f1 = lambdify([], tuple([1]))\n+    assert f1() == (1,)\n+\n+    # Test using inspect to ensure the correct code is generated\n+    source_code = inspect.getsource(lambdify([], tuple([1])))\n+    assert \"return (1,)\" in source_code\n+\n+    f2 = lambdify([], tuple([1, 2]))\n+    assert f2() == (1, 2)\n+\n+    # Additional inspection test for a tuple with more than one element\n+    source_code_multi = inspect.getsource(lambdify([], tuple([1, 2])))\n+    assert \"return (1, 2)\" in source_code_multi\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..580274d 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n+from sympy.core.function import Function, UndefinedFunction\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n@@ -301,6 +303,17 @@ def test_symbols():\n     assert sym('a0:4') == '(a0, a1, a2, a3)'\n     assert sym('a2:4,b1:3') == '(a2, a3, b1, b2)'\n     assert sym('a1(2:4)') == '(a12, a13)'\n+\n+def test_function_symbols_with_extra_parentheses():\n+    from sympy import symbols\n+\n+    # Test for using symbols with an extra layer of parentheses\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert isinstance(q, tuple) and isinstance(u, tuple)\n+    assert isinstance(q[0], UndefinedFunction)\n+    assert isinstance(q[1], UndefinedFunction)\n+    assert isinstance(u[0], UndefinedFunction)\n+    assert isinstance(u[1], UndefinedFunction)\n     assert sym('a0:2.0:2') == '(a0.0, a0.1, a1.0, a1.1)'\n     assert sym('aa:cz') == '(aaz, abz, acz)'\n     assert sym('aa:c0:2') == '(aa0, aa1, ab0, ab1, ac0, ac1)'\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..2a8060b 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -183,6 +183,30 @@ def execute_gamma_simplify_tests_for_function(tfunc, D):\n     assert _is_tensor_eq(st, t)\n \n \n+def test_kahane_leading_gamma_matrix_order():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+\n+    # Test where leading matrices should remain in order\n+    t1 = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r1 = kahane_simplify(t1)\n+    assert r1.equals(4*G(rho)*G(sigma)), f\"Failed on input {t1}: got {r1}\"\n+\n+    # The problematic test case described in the issue\n+    t2 = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r2 = kahane_simplify(t2)\n+    assert r2.equals(4*G(rho)*G(sigma)), f\"Failed on input {t2}: got {r2}\"\n+\n+    # Additional test cases\n+    # Reversed order of gamma matrices -- should still be given in the correct order\n+    t3 = G(sigma)*G(rho)*G(mu)*G(-mu)\n+    r3 = kahane_simplify(t3)\n+    assert r3.equals(4*G(sigma)*G(rho)), f\"Failed on input {t3}: got {r3}\"\n+\n+    # No contractions should remain unchanged\n+    t4 = G(mu)*G(nu)\n+    r4 = kahane_simplify(t4)\n+    assert r4.equals(t4), f\"Failed on input {t4}: got {r4}\"\n+\n def test_kahane_algorithm():\n     # Wrap this function to convert to and from TIDS:\n \n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..8929533 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,6 +30,10 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n+from sympy import Symbol, FiniteSet, S, Contains, Piecewise, Interval, Eq, Not\n+from sympy.core.relational import Ne\n+from sympy.testing.pytest import raises\n+\n def test_binary_symbols():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -37,8 +41,28 @@ def test_binary_symbols():\n     assert Contains(x, FiniteSet(y, Eq(z, True))\n         ).binary_symbols == {y, z}\n \n+def test_as_set_extended():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    \n+    # Tests for cases that should properly return the set and work with Piecewise\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    assert Contains(x, S.Integers).as_set() == S.Integers\n+    assert Contains(x, S.Reals).as_set() == S.Reals\n+    \n+    # Test Piecewise to ensure it won't throw the same AttributeError\n+    expr = Piecewise((6, Contains(x, S.Reals).as_set()), (7, True))\n+    assert expr.subs(x, 0) == 6\n+    assert expr.subs(x, S('a')) == 7\n+\n+    # Test for an interval\n+    assert Contains(x, Interval(0, 1)).as_set() == Interval(0, 1)\n+\n+    # Test a conjunction of conditions\n+    assert Contains(x, FiniteSet(y, Eq(x, 2))).as_set() == FiniteSet(y, Eq(x, 2))\n \n-def test_as_set():\n+    # Test the negation of the Contains condition\n+    assert Not(Contains(x, S.Reals)).as_set() != S.Reals\n     x = Symbol('x')\n     y = Symbol('y')\n     # Contains is a BooleanFunction whose value depends on an arg's\n@@ -48,4 +72,4 @@ def test_as_set():\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..33c7047 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,6 +541,59 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import Quantity, impedance, capacitance, time, ohm, farad, second\n+    from sympy import exp\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+def test_issue_24062_variations():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import Quantity, impedance, capacitance, time, ohm, farad, second\n+    from sympy import exp\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    # Test with different values\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(2, ohm)\n+    C.set_global_relative_scale_factor(0.5, farad)\n+    T.set_global_relative_scale_factor(3, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 5 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (5 + E, Dimension(1))\n+\n+    # Test with power of dimensionless expressions\n+    exp_expr_squared = 7 + exp(expr)**2\n+    assert SI._collect_factor_and_dimension(exp_expr_squared) == (7 + E**2, Dimension(1))\n+\n+...\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..20e4b51 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,34 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+def test_collect_factor_and_dimension_equivalent_dimensions():\n+    from sympy.physics.units import Quantity, SI, time, velocity, acceleration, meter, second\n+\n+    # Define a Quantity for velocity\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    # Define a Quantity for acceleration\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    # Define a Quantity for time\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    # Expression involving a1*t1 (which should have the same dimension as v1)\n+    expr1 = a1 * t1 + v1\n+\n+    # Should not raise a ValueError if equivalent dimensions are detected correctly\n+    factor, dim = SI._collect_factor_and_dimension(expr1)\n+    assert factor == 2 * meter / second + (-9.8 * meter / second**2) * 5 * second\n+    # The dimension of velocity or acceleration*time should be the same for addition\n+    assert dim == velocity\n+\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..f5ec5f6 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -106,4 +107,17 @@ def test_check_homomorphism():\n     a = Permutation(1,2,3,4)\n     b = Permutation(1,3)\n     G = PermutationGroup([a, b])\n-    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+\n+    # Test that homomorphism works with generator inverses in a PermutationGroup \n+    D3 = DihedralGroup(3)\n+    try:\n+        T = homomorphism(D3, D3, D3.generators, D3.generators)\n+        assert T.is_isomorphism()\n+    except ValueError:\n+        assert False, \"The given images should define a valid homomorphism\"\n+\n+    # Additional check: ensure the homomorphism works in both directions\n+    gen = D3.generators\n+    T_inv = homomorphism(D3, D3, gen, [g**-1 for g in gen])\n+    assert T_inv.is_homomorphism(), \"The inverse mapping should also define a homomorphism\"\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..e448da5 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -250,6 +250,28 @@ def test_PolyElement_copy():\n     assert f != g\n \n def test_PolyElement_as_expr():\n+    # Original test patch for the issue\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Additional tests\n+    # Test for invalid number of symbols\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test with unrelated symbols\n+    A, B, C = symbols(\"a,b,c\")\n+    h = 3*A**2*B - A*B*C + 7*C**3 + 1\n+    assert f.as_expr(A, B, C) == h\n+\n+    # Test with sympy.symbols generated as list\n+    symbols_list = symbols(\"p,q,r\")\n+    p, q, r = symbols_list\n+    j = 3*p**2*q - p*q*r + 7*r**3 + 1\n+    assert f.as_expr(*symbols_list) == j\n     R, x, y, z = ring(\"x,y,z\", ZZ)\n     f = 3*x**2*y - x*y*z + 7*z**3 + 1\n \n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..06ad3ab 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -267,6 +267,24 @@ def test_convert_equals_signs():\n     transformations = standard_transformations + \\\n                         (convert_equals_signs, )\n     x = Symbol('x')\n+\n+\n+def test_issue_24288():\n+    from sympy.parsing.sympy_parser import parse_expr\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False),\n+        \"x < 2 + x\": Lt(x, x + 2, evaluate=False),\n+        \"x <= 2 + x\": Le(x, x + 2, evaluate=False),\n+        \"x > 2 + x\": Gt(x, x + 2, evaluate=False),\n+        \"x >= 2 + x\": Ge(x, x + 2, evaluate=False),\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n     y = Symbol('y')\n     assert parse_expr(\"1*2=x\", transformations=transformations) == Eq(2, x)\n     assert parse_expr(\"y = x\", transformations=transformations) == Eq(y, x)\n@@ -276,6 +294,24 @@ def test_convert_equals_signs():\n \n def test_parse_function_issue_3539():\n     x = Symbol('x')\n+\n+\n+def test_issue_24288():\n+    from sympy.parsing.sympy_parser import parse_expr\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False),\n+        \"x < 2 + x\": Lt(x, x + 2, evaluate=False),\n+        \"x <= 2 + x\": Le(x, x + 2, evaluate=False),\n+        \"x > 2 + x\": Gt(x, x + 2, evaluate=False),\n+        \"x >= 2 + x\": Ge(x, x + 2, evaluate=False),\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n     f = Function('f')\n     assert parse_expr('f(x)') == f(x)\n \n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..307c752 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -35,6 +35,9 @@ from astropy.units.utils import is_effectively_unity\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n         ([\"dex(cm s**-2)\", \"dex(cm/s2)\"], u.DexUnit(u.cm / u.s**2)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / u.m / u.s / u.kpc**2)),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / u.s / u.kpc**2)),\n+        ([\"J/m/s/kpc^2\"], u.Unit(u.J / u.m / u.s / u.kpc**2)),\n     ],\n )\n def test_unit_grammar(strings, unit):\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..33480a8 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1899,6 +1899,32 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Author.objects.get(), author)\n \n     @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_check_constraint_with_or_and_on_sqlite_oracle(self):\n+        \"\"\"\n+        Tests the CheckConstraint is applied correctly, creating valid SQL,\n+        for a case with mixed AND/OR involving CheckConstraints on SQLite and Oracle.\n+        \"\"\"\n+        app_label = 'test_or_and_constraint'\n+        constraint_name = 'check_or_and_constraint_validity'\n+        from_state = self.set_up_test_model(app_label)\n+        # CheckConstraint with mixed AND/OR\n+        check = models.Q(field_1__isnull=False, flag__exact=True) | models.Q(flag__exact=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+\n+        # Performing migration forwards\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+\n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        # Test with data violating the constraint\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        # Test with valid data\n+        TestConstraint.objects.create(field_1=1, flag=True)\n+        TestConstraint.objects.create(field_1=None, flag=False)\n     def test_remove_constraint(self):\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\n             models.CheckConstraint(check=models.Q(pink__gt=2), name=\"test_remove_constraint_pony_pink_gt_2\"),\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..c11efdb 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -163,6 +163,30 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n \n+    def test_translate_url_with_optional_named_groups(self):\n+        # Testing optional arguments in URL pattern\n+        with translation.override('en'):\n+            # Case where optional argument is present\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+                '/nl/with-arguments/regular-argument/optional.html',\n+            )\n+            # Case where optional argument is absent\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+                '/nl/with-arguments/regular-argument/',\n+            )\n+\n+        # Additional test cases for the regex_optional path pattern\n+        with translation.override('nl'):\n+            self.assertEqual(\n+                translate_url('/nl/regex_optional/1/2/', 'en'),\n+                '/en/regex_optional/1/2/',\n+            )\n+            self.assertEqual(\n+                translate_url('/nl/regex_optional/1/', 'en'),\n+                '/en/regex_optional/1/',\n+            )\n \n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..7df2720 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -5,7 +6,9 @@ import datetime\n from operator import attrgetter\n from unittest import expectedFailure\n \n+import uuid\n from django import forms\n+from .models import Item, Derived\n from django.test import TestCase\n \n from .models import (\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..6281d9a 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -602,9 +602,19 @@ class DeletionTests(TestCase):\n                     ctx.captured_queries[0]['sql'],\n                 )\n                 signal.disconnect(receiver, sender=Referrer)\n-\n+from django.test import TestCase\n+from myapp.models import User  # Assuming myapp is where User model is defined\n \n class FastDeleteTests(TestCase):\n+    \n+    def test_fast_delete_all(self):\n+        # This test is checking if the SQL generated for an all() delete() does not use a subquery\n+        User.objects.create()  # Create a record to clear with delete\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Ensure that no subquery is performed in the delete statement\n+        self.assertNotIn('SELECT', sql)\n \n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n@@ -702,4 +712,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..680a70a 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -24,8 +25,24 @@ class DecimalFieldTests(TestCase):\n         msg = '\u201cabc\u201d value must be a decimal number.'\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n-\n-    def test_default(self):\n+    \n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            (),\n+            [],\n+            {},\n+            set(),\n+            object(),\n+            complex(),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.clean(value, None)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..4dd7cfa 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -259,8 +260,39 @@ class PickleabilityTestCase(TestCase):\n         event.edition_set.create()\n         self.assert_pickles(event.edition_set.order_by('event'))\n \n-\n-class InLookupTests(TestCase):\n+class ValuesPickleTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Happening.objects.create(name='fun_event', when=datetime.datetime.now())\n+\n+    def test_pickle_values_annotate(self):\n+        original_qs = Happening.objects.values('name').annotate(latest_time=models.Max('when'))\n+        # Pickle and unpickle the queryset's query.\n+        unpickled_qs = Happening.objects.all()\n+        unpickled_qs.query = pickle.loads(pickle.dumps(original_qs.query))\n+        \n+        # Evaluate both querysets.\n+        original_result = list(original_qs)\n+        unpickled_result = list(unpickled_qs)\n+        \n+        # Compare the results to ensure correct behavior.\n+        self.assertEqual(len(original_result), len(unpickled_result))\n+        for original, unpickled in zip(original_result, unpickled_result):\n+            self.assertEqual(original['name'], unpickled['name'])\n+            self.assertEqual(original['latest_time'], unpickled['latest_time'])\n+\n+    def test_pickle_values_list_with_flat(self):\n+        # Test pickling with values_list and flat=True\n+        original_qs = Happening.objects.values_list('name', flat=True)\n+        unpickled_qs = Happening.objects.all()\n+        unpickled_qs.query = pickle.loads(pickle.dumps(original_qs.query))\n+        \n+        # Evaluate both querysets.\n+        original_result = list(original_qs)\n+        unpickled_result = list(unpickled_qs)\n+        \n+        # Compare the results to ensure correct behavior.\n+        self.assertSequenceEqual(original_result, unpickled_result)\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..c32fbf4 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,6 +30,19 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n+        # Test Unicode characters\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d\uff0c\u4e16\u754c'}), '{\"a\": \"\u4f60\u597d\uff0c\u4e16\u754c\"}')\n+        self.assertEqual(field.prepare_value({'emoji': '\ud83d\ude00\ud83d\udc31'}), '{\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        self.assertEqual(field.prepare_value(['\u4f60\u597d\uff0c\u4e16\u754c', 'ja\u017a\u0144']), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        self.assertEqual(field.prepare_value('ja\u017a\u0144'), '\"ja\u017a\u0144\"')\n+\n+    def test_widget(self):\n+        field = JSONField()\n+        self.assertEqual(field.prepare_value({'a': 'b'}), '{\"a\": \"b\"}')\n+        self.assertEqual(field.prepare_value(None), 'null')\n+        self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n+\n     def test_widget(self):\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..b035d09 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6628,6 +6628,32 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertEqual(response.status_code, 404)\n \n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_correct_redirect_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        expected_url = '/prefix' + known_url\n+        self.assertRedirects(response, expected_url, status_code=301, fetch_redirect_response=False)\n+\n+    @override_settings(APPEND_SLASH=False, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_no_append_slash_and_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertEqual(response.status_code, 404)\n     @override_settings(APPEND_SLASH=True)\n     def test_single_model_no_append_slash(self):\n         superuser = User.objects.create_user(\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..25ab89a 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -700,6 +700,41 @@ class WriterTests(SimpleTestCase):\n \n         base_dir = os.path.dirname(os.path.dirname(__file__))\n \n+    def test_migration_with_mixin_and_custom_field(self):\n+        \"\"\"\n+        Test that migrations for models with mixins and custom fields have correct imports.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n+\n+        fields = {\n+            'name': MyField(primary_key=True)\n+        }\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\"MyModel\", tuple(fields.items()), bases=(MyMixin, MyBaseModel)),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        \n+        # Execute the migration string to ensure it doesn't raise import errors.\n+        result = self.safe_exec(output)\n+        \n+        # Check that the migration imports both 'models' and 'app.models'\n+        self.assertIn(\"import app.models\", output)\n+        self.assertIn(\"from django.db import models\", output)\n+        self.assertIn(\"MyField(primary_key=True)\", output)\n+\n         for app in test_apps:\n             with self.modify_settings(INSTALLED_APPS={'append': app}):\n                 migration = migrations.Migration('0001_initial', app.split('.')[-1])\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..363fef6 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1637,9 +1637,37 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(len(qs), 6)\n \n+    def test_aggregation_default_after_annotation(self):\n+        # This test verifies that using default with aggregate after an annotation does not cause a crash.\n+        result = Book.objects.annotate(\n+            idx=F('id'),\n+        ).aggregate(value=Sum('id', default=0))\n+        self.assertEqual(result['value'], 4560)\n+\n+    def test_aggregation_default_with_annotation_field(self):\n+        # Test with annotation field and default value in aggregation.\n+        result = Book.objects.annotate(\n+            double_id=F('id') * 2,\n+        ).aggregate(value=Sum('double_id', default=0))\n+        self.assertEqual(result['value'], 9120)\n+\n     def test_exists_extra_where_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n+\n+    def test_aggregation_default_after_annotation(self):\n+        # This test verifies that using default with aggregate after an annotation does not cause a crash.\n+        result = Book.objects.annotate(\n+            idx=F('id'),\n+        ).aggregate(value=Sum('id', default=0))\n+        self.assertEqual(result['value'], 4560)\n+\n+    def test_aggregation_default_with_annotation_field(self):\n+        # Test with annotation field and default value in aggregation.\n+        result = Book.objects.annotate(\n+            double_id=F('id') * 2,\n+        ).aggregate(value=Sum('double_id', default=0))\n+        self.assertEqual(result['value'], 9120)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..dab8ae5 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2991,6 +2991,20 @@ class OperationTests(OperationTestBase):\n         # Deconstruction.\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n+        \n+        # Additional tests for RenameIndex moving backward and forward\n+        table_name = \"your_table_name\"  # Replace with actual table name\n+        # Simulate moving backward (undoing the rename operation)\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        # Check if the index with the original name exists\n+        self.assertIndexNameExists(table_name, \"original_pony_idx\")\n+        \n+        # Simulate moving forward again (reapplying the rename operation)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        # Check if the renamed index exists\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         self.assertEqual(definition[1], [])\n         self.assertEqual(\n             definition[2],\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..1a82ead 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3496,6 +3496,25 @@ class FormFieldCallbackTests(SimpleTestCase):\n                 type(NewForm.base_fields[name].widget),\n             )\n \n+    def test_modelform_factory_respects_formfield_callback_in_meta(self):\n+        def callback(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            if formfield:\n+                formfield.required = True\n+            return formfield\n+\n+        class MyModelForm(forms.ModelForm):\n+            class Meta:\n+                model = MyModel\n+                fields = ['active', 'name']\n+                formfield_callback = callback\n+\n+        FactoryForm = forms.modelform_factory(MyModel, form=MyModelForm)\n+\n+        # Check if fields in FactoryForm are both required\n+        for field in FactoryForm.base_fields.values():\n+            self.assertTrue(field.required)\n+\n \n class LocalizedModelFormTest(TestCase):\n     def test_model_form_applies_localize_to_some_fields(self):\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..a969594 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,7 +9,8 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.core import serializers\n+from django.db import models\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_backend_macosx.py b/lib/matplotlib/tests/test_backend_macosx.py\nindex 06d044f..c0d2ce6 100644\n--- a/lib/matplotlib/tests/test_backend_macosx.py\n+++ b/lib/matplotlib/tests/test_backend_macosx.py\n@@ -4,6 +4,8 @@ import pytest\n \n import matplotlib as mpl\n import matplotlib.pyplot as plt\n+import pickle\n+import pytest\n try:\n     from matplotlib.backends import _macosx\n except ImportError:\n@@ -11,6 +13,14 @@ except ImportError:\n \n \n @pytest.mark.backend('macosx')\n+def test_figure_dpi_after_unpickle():\n+    fig = plt.figure(dpi=200)\n+    for _ in range(10):  # Simulate multiple pickle/unpickle operations\n+        out = io.BytesIO()\n+        pickle.dump(fig, out)\n+        out.seek(0)\n+        fig = pickle.load(out)\n+        assert fig.dpi == 200, f\"Error: DPI changed after unpickling. Current DPI: {fig.dpi}\"\n def test_cached_renderer():\n     # Make sure that figures have an associated renderer after\n     # a fig.canvas.draw() call\n@@ -24,6 +34,14 @@ def test_cached_renderer():\n \n \n @pytest.mark.backend('macosx')\n+def test_figure_dpi_after_unpickle():\n+    fig = plt.figure(dpi=200)\n+    for _ in range(10):  # Simulate multiple pickle/unpickle operations\n+        out = io.BytesIO()\n+        pickle.dump(fig, out)\n+        out.seek(0)\n+        fig = pickle.load(out)\n+        assert fig.dpi == 200, f\"Error: DPI changed after unpickling. Current DPI: {fig.dpi}\"\n def test_savefig_rcparam(monkeypatch, tmp_path):\n \n     def new_choose_save_file(title, directory, filename):\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..066c89f 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6605,6 +6605,18 @@ def test_integrate(dask):\n \n \n @pytest.mark.parametrize(\"dask\", [True, False])\n+def test_integrate_coord_arg():\n+    da = xr.DataArray([1, 2, 3], dims=[\"x\"], coords={\"x\": [0, 1, 2]})\n+    \n+    # Test integration using 'coord'\n+    actual = da.integrate(coord=\"x\")\n+    expected = xr.DataArray(np.trapz([1, 2, 3], [0, 1, 2]), coords={}, dims=[])\n+    assert_allclose(actual, expected)\n+    \n+    # Ensure warning if 'dim' is still accepted\n+    with pytest.warns(FutureWarning):\n+        actual_deprecated = da.integrate(dim=\"x\")\n+        assert_allclose(actual_deprecated, expected)\n @pytest.mark.parametrize(\"which_datetime\", [\"np\", \"cftime\"])\n def test_trapz_datetime(dask, which_datetime):\n     rs = np.random.RandomState(42)\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..b3079a2 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3044,8 +3044,13 @@ class TestDataset:\n         x0 = y[0].to_unstacked_dataset(\"features\")\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n-\n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_to_unstacked_dataset_single_dim(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..8c4c4aa 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -106,6 +106,34 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     output = capsys.readouterr()\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n+from typing import Any\n+import re\n+import pytest\n+from pylint.lint import Run\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),  # Test case to ensure regex is not mangled\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n \n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..aaa3fd4 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -11,6 +11,7 @@\n import pytest\n \n from sphinx import addnodes\n+from sphinx.testing.util import parse_html\n \n \n @pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n@@ -30,4 +31,15 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n+\n+    # Test for automodule with `autodoc_typehints='description'`\n+    content_description = app.env.get_doctree('module1')\n+    html = parse_html(app, content_description)\n+    assert 'https://docs.python.org/3/library/constants.html#None' in html\n+\n+    # Test for automodule with `autodoc_typehints='signature'`\n+    app.config.autodoc_typehints = 'signature'\n+    content_signature = app.env.get_doctree('module1')\n+    html_signature = parse_html(app, content_signature)\n+    assert 'https://docs.python.org/3/library/constants.html#None' not in html_signature\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..5653026 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,7 +1317,55 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n-    def test_parameters_with_class_reference(self):\n+    def test_multiple_parameters(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_optional(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, optional) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, optional\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, optional\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8551": "",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "",
  "sphinx-doc__sphinx-9258": "",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..1d9578e 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3330,6 +3330,30 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n-def test_issue_18205():\n+from sympy import symbols, sqf_list\n+\n+def test_issue_inconsistency_sqf_list():\n+    x = symbols('x')\n+\n+    # Case related to the reported issue: \n+    # Polynomial with factors of different multiplicities should group them correctly\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected_result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == expected_result\n+\n+    # Additional case: Single factor polynomial should return the factor itself\n+    q = x**4 + 4*x**3 + 6*x**2 + 4*x + 1\n+    expected_q_result = (1, [(x + 1, 4)])\n+    assert sqf_list(q) == expected_q_result\n+\n+    # Additional case: Another factor within multiple terms\n+    r = (x**3 - 3*x**2 + 3*x - 1)\n+    expected_r_result = (1, [(x - 1, 3)])\n+    assert sqf_list(r) == expected_r_result\n+\n+    # Additional case: Validate with more complex polynomial setup\n+    s = x**6 + 3*x**5 + 3*x**4 + x**3\n+    expected_s_result = (1, [(x * (x + 1)**3, 1)])\n+    assert sqf_list(s) == expected_s_result\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..5a8cfbf 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -261,6 +261,10 @@ def test_Poly_from_expr():\n     assert Poly.from_expr(x + 5, x, domain=F3).rep == DMP([F3(1), F3(2)], F3)\n     assert Poly.from_expr(y + 5, y, domain=F3).rep == DMP([F3(1), F3(2)], F3)\n \n+def test_factor_issue_18895():\n+    z = expand((x - 1)*(y - 1))\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n+\n     assert Poly.from_expr(x + y, domain=F3).rep == DMP([[F3(1)], [F3(1), F3(0)]], F3)\n     assert Poly.from_expr(x + y, x, y, domain=F3).rep == DMP([[F3(1)], [F3(1), F3(0)]], F3)\n \n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..78bc1bf 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -9,6 +10,7 @@ from sympy.core.singleton import S\n from sympy.core.symbol import symbols, Symbol, Dummy\n from sympy.core.sympify import SympifyError\n from sympy.core.function import Function, Lambda\n+from sympy.testing.pytest import raises\n from sympy.core.compatibility import default_sort_key\n \n from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum\n@@ -28,7 +30,17 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n-def test_structure():\n+def test_symbol_dict():\n+    x = Symbol('x')\n+    # Symbol should not have __dict__ attribute since it uses __slots__\n+    assert not hasattr(x, '__dict__')\n+\n+    # Should raise AttributeError as symbols are immutable in sympy\n+    with raises(AttributeError):\n+        x.new_attribute = 42\n+\n+    # Verify that the slots are working as expected\n+    assert x.__slots__ == ('name',)\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n     assert bool(b1)\n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..81816bb 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -369,8 +369,37 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n-\n-def test_Number_new():\n+from sympy import Rational\n+\n+def test_issue_24543_extensive():\n+    # Verify that the error with string inputs is resolved.\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+    \n+    # Additional test cases for different types of input\n+    # String numerator and integer denominator\n+    assert Rational('1.5', 3) == Rational(1, 2)\n+    # Float numerator and string denominator\n+    assert Rational(1.5, '3') == Rational(1, 2)\n+    # Integer numerator and string denominator\n+    assert Rational(3, '1.5') == Rational(2)\n+\n+    # Assert behavior with other combinations\n+    assert Rational('0.75', 2) == Rational(3, 8)\n+    assert Rational(0.75, '2') == Rational(3, 8)\n+\n+    # Test with improper fraction string '7/8'\n+    assert Rational('7/8') == Rational(7, 8)\n+\n+    # Edge cases\n+    assert Rational(0, 1) == Rational(0)\n+    assert Rational(0, '2') == Rational(0)\n+\n+    # Rational creation from floating point with denominator\n+    assert Rational(0.5, 1) == Rational(1, 2)\n+    \n+    # Ensure no regression with very simple balanced cases\n+    for p in (0.5, '0.5', 1, 1.0):\n+        assert Rational(p, 1) == Rational(1, 2) if isinstance(p, float) else Rational(p)\n     \"\"\"\"\n     Test for Number constructor\n     \"\"\"\n",
  "django__django-14534": "",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..478e578 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -301,8 +301,53 @@ def test_tool_line_handle():\n \n     assert tool_line_handle.positions == positions\n \n-\n-def check_lasso_selector(**kwargs):\n+# Import necessary modules\n+import pytest\n+from matplotlib import pyplot as plt\n+from matplotlib import widgets\n+from matplotlib.testing.decorators import cleanup\n+from matplotlib.testing.widgets import do_event\n+\n+@cleanup\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound_init(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    # Test non-interactive\n+    non_interactive_tool = widgets.SpanSelector(ax, print, direction, interactive=False)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    # Cleanup\n+    plt.close(fig)\n+\n+@cleanup\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_movement(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    do_event(tool, 'press', xdata=12, ydata=15, button=1)\n+    do_event(tool, 'onmove', xdata=14, ydata=18, button=1)\n+    do_event(tool, 'release', xdata=14, ydata=18, button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    # Cleanup\n+    plt.close(fig)\n+\n+# Existing function...\n     ax = get_ax()\n \n     def onselect(verts):\n",
  "scikit-learn__scikit-learn-12682": "",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..089ead8 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,7 +148,28 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n-# Import the data\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+import pytest\n+import numpy as np\n+\n+# Test case for verifying issue with MultiOutputClassifier and cross_val_predict\n+def test_cross_val_predict_multi_output_classifier_predict_proba():\n+    X, Y = make_multilabel_classification(n_classes=3, random_state=0)\n+\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    pred = cross_val_predict(mo_lda, X, Y, cv=5)  # This should work\n+    assert pred.shape == Y.shape\n+\n+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')  # This should also work\n+    # Ensure that each entry of the prediction probabilities is an ndarray with the right shape\n+    assert len(pred_proba) == Y.shape[1]\n+    for proba in pred_proba:\n+        assert proba.shape == (X.shape[0], mo_lda.estimators_[0].classes_.size)\n+\n+# Continue with previous test setup\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n X = iris.data\n",
  "sphinx-doc__sphinx-9658": "",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..504e533 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,8 +347,26 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n-\n-def test_issue_9983():\n+from sympy import Symbol, Product, S, simplify\n+from sympy.abc import n, k\n+\n+def test_issue_13546():\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+    # Test for n=3\n+    assert p.subs(n, 3).simplify() == S(315)/32\n+\n+    # Explicitly testing for a valid range behavior\n+    expr_n_3 = (3 + 1) * (3 + S(1)/2) * (3 + S(1)/4)\n+    assert simplify(p.subs(n, 3) - expr_n_3) == 0\n+    \n+    # Check simplified expression matches expected form\n+    expected = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert simplify(expected.subs(n, 2) - S(15)/2) == 0\n+\n+    # Running the same test to confirm symbolic correctness with another method\n+    assert simplify(Product(n + 1 / 2**k, (k, 0, n-1)).doit().subs(n, 2) - S(15)/2) == 0\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n     assert p.is_convergent() is S.false\n@@ -357,4 +375,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}