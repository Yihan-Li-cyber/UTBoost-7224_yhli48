{
  "astropy__astropy-12907": "",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..1c91e21 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,9 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu, connect\n+from astropy.io.registry import identify_format\n+from astropy.table import Table\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..0783a27 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -125,6 +125,45 @@ class TestHeaderFunctions(FitsTestCase):\n         \"\"\"Test Card constructor with long integer value\"\"\"\n \n         c = fits.Card(\"long_int\", -467374636747637647347374734737437)\n+\n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation. This includes testing scenarios with values that\n+        may expand when stringified improperly.\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        # Test value exactly as in the issue\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Additional test for different floats\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with a float having more decimal places\n+        c = fits.Card(k, 123.456789, com)\n+        expected_str = f\"{k} = 123.456789 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with a float that is very small\n+        c = fits.Card(k, 1e-10, com)\n+        expected_str = f\"{k} = 1E-10 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test exact match after string expansion bug\n+        c = fits.Card(k, 0.0078125, com)  # Exactly 1 / 128 in binary, should not expand\n+        expected_str = f\"{k} = 0.0078125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n         assert str(c) == _pad(\"LONG_INT= -467374636747637647347374734737437\")\n \n     def test_floating_point_value_card(self):\n",
  "astropy__astropy-14539": "",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..60dc359 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -85,7 +85,23 @@ def test_inherit_docstrings():\n             pass\n \n     if Base.__call__.__doc__ is not None:\n+        # Validate docstring inheritance for methods\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n+        # Test for property docstring inheritance\n+        class BaseProperty(metaclass=misc.InheritDocstrings):\n+            @property\n+            def bar(self):\n+                \"BAR\"\n+                return 1\n+\n+        class SubclassProperty(BaseProperty):\n+            @property\n+            def bar(self):\n+                return 2\n+\n+        if BaseProperty.bar.__doc__ is not None:\n+            # Check if the docstring is correctly inherited for properties\n+            assert SubclassProperty.bar.__doc__ == \"BAR\"\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n \n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..24b8b94 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -171,8 +171,20 @@ def test_multiple_solidus():\n     with pytest.raises(ValueError):\n         u.Unit(\"m/s/kg\", format=\"vounit\")\n \n+import pytest\n+from astropy import units as u\n \n def test_unknown_unit3():\n+    unit = u.Unit('asdf', parse_strict='silent')\n+    # Check if the unit is an instance of UnrecognizedUnit\n+    assert isinstance(unit, u.UnrecognizedUnit)\n+    \n+    # Comparison with `None` should not raise TypeError and should return False\n+    assert unit != None\n+    assert not unit == None\n+    \n+    # Check that the unit is not in a list that includes None\n+    assert unit not in (None, u.m)\n     unit = u.Unit(\"FOO\", parse_strict='silent')\n     assert isinstance(unit, u.UnrecognizedUnit)\n     assert unit.name == \"FOO\"\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..f7c60ef 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -68,8 +68,25 @@ def test_minversion():\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n-    bad_versions = ['1', '1.2rc1']\n+    # Including the additional test case from the original test patch\n+    good_versions.append('0.12dev')\n+    \n+    # New test cases to cover issue scenarios\n+    test_module.__version__ = '1.14.3'\n+    \n+    # Good versions: should return True\n+    good_versions_issue = ['1.14dev', '1.14']\n+    for version in good_versions_issue:\n+        assert minversion(test_module, version)\n+    \n+    # Bad versions: should return False\n+    bad_versions_issue = ['1.15dev', '2.0']\n+    for version in bad_versions_issue:\n+        assert not minversion(test_module, version)\n+    \n+    # Restore the original version for subsequent tests\n+    test_module.__version__ = '0.12.2'\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..5820d31 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -79,6 +79,49 @@ class TestHeaderFunctions(FitsTestCase):\n         assert header['B'] == 'B'\n         assert header.comments['B'] == 'C'\n \n+    def test_card_from_bytes(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object (assuming latin-1 encoding).\n+        \"\"\"\n+        c = fits.Card.fromstring(b\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_card_from_unicode_str(self):\n+        \"\"\"\n+        Test loading a Card from a unicode `str` object.\n+        \"\"\"\n+        c = fits.Card.fromstring(\"DEF     = 'def'\")\n+        assert c.keyword == 'DEF'\n+        assert c.value == 'def'\n+\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string.\n+\n+        See https://github.com/astropy/astropy/issues/8706\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n+\n+    def test_header_fromstring_unicode_str(self):\n+        \"\"\"\n+        Test reading a Header from a unicode `str`.\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            data = fobj.read().decode('latin-1')\n+            pri_hdr_from_unicode_str = fits.Header.fromstring(data)\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_unicode_str['NAXIS']\n+        assert pri_hdr == pri_hdr_from_unicode_str\n+        assert pri_hdr.tostring() == pri_hdr_from_unicode_str.tostring()\n+\n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n \n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..699aab4 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -149,8 +149,51 @@ class TestQuantityCreation:\n \n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n+    def test_float_type_preservation(self):\n+        \"\"\"Test that float types are preserved when creating Quantity\"\"\"\n+        # Test float16\n+        a16 = np.array([1.0, 2.0], dtype=np.float16)\n+        q16 = u.Quantity(a16, u.km)\n+        assert q16.dtype == a16.dtype, f\"Expected dtype float16 but got {q16.dtype}\"\n+\n+        # Test float32\n+        a32 = np.array([1.0, 2.0], dtype=np.float32)\n+        q32 = u.Quantity(a32, u.km)\n+        assert q32.dtype == a32.dtype, f\"Expected dtype float32 but got {q32.dtype}\"\n+\n+        # Test float64\n+        a64 = np.array([1.0, 2.0], dtype=np.float64)\n+        q64 = u.Quantity(a64, u.km)\n+        assert q64.dtype == a64.dtype, f\"Expected dtype float64 but got {q64.dtype}\"\n+\n+        # Test float128 (if available)\n+        try:\n+            a128 = np.array([1.0, 2.0], dtype=np.float128)\n+            q128 = u.Quantity(a128, u.km)\n+            assert q128.dtype == a128.dtype, f\"Expected dtype float128 but got {q128.dtype}\"\n+        except TypeError:\n+            # If float128 is not available in this environment, we skip this test.\n+            pass\n+\n+        # Scalar float16\n+        q_scalar_16 = u.Quantity(np.float16(1.0), u.km)\n+        assert q_scalar_16.dtype == np.dtype('float16'), f\"Expected dtype float16 but got {q_scalar_16.dtype}\"\n+\n+        # Scalar float32\n+        q_scalar_32 = u.Quantity(np.float32(1.0), u.km)\n+        assert q_scalar_32.dtype == np.dtype('float32'), f\"Expected dtype float32 but got {q_scalar_32.dtype}\"\n \n-    def test_copy(self):\n+        # Scalar float64\n+        q_scalar_64 = u.Quantity(np.float64(1.0), u.km)\n+        assert q_scalar_64.dtype == np.dtype('float64'), f\"Expected dtype float64 but got {q_scalar_64.dtype}\"\n+\n+        # Scalar float128\n+        try:\n+            q_scalar_128 = u.Quantity(np.float128(1.0), u.km)\n+            assert q_scalar_128.dtype == np.dtype('float128'), f\"Expected dtype float128 but got {q_scalar_128.dtype}\"\n+        except TypeError:\n+            # If float128 is not available in this environment, we skip this test.\n+            pass\n \n         # By default, a new quantity is constructed, but not if copy=False\n \n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..c929214 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -26,6 +26,7 @@ else:\n     PILLOW_IS_INSTALLED = True\n \n NOW = datetime.now()\n+from django.core.validators import URLValidator, ValidationError\n EXTENDED_SCHEMES = ['http', 'https', 'ftp', 'ftps', 'git', 'file', 'git+ssh']\n \n TEST_DATA = [\n@@ -218,7 +219,13 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n-    # Trailing newlines not accepted\n+    # Test URLs with invalid characters in username and password fields\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://-invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n     # Trailing junk does not take forever to reject\n",
  "django__django-10880": "",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..824097c 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1103,6 +1103,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Verify that the default file upload permissions are set to 0o644 if not overridden.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n     def test_override_file_upload_directory_permissions(self):\n         \"\"\"\n         Overriding the FILE_UPLOAD_DIRECTORY_PERMISSIONS setting should be\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..1f13d03 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,8 +1,10 @@\n+\n import os\n import signal\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n+import subprocess\n from django.test import SimpleTestCase\n \n \n@@ -27,7 +29,15 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         self.pgpass = None\n         with mock.patch('subprocess.call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db(dbinfo)\n-        return self.subprocess_args, self.pgpass\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.subprocess_args = list(*args)\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(self.subprocess_args, 0)\n+\n+        self.pgpassword = None\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db(dbinfo)\n+        return self.subprocess_args, self.pgpassword\n \n     def test_basic(self):\n         self.assertEqual(\n@@ -101,11 +111,33 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n-        \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n-        def _mock_subprocess_call(*args):\n-            handler = signal.getsignal(signal.SIGINT)\n-            self.assertEqual(handler, signal.SIG_IGN)\n+    def test_pgpassword_environment_variable(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'testdb',\n+                'user': 'testuser',\n+                'password': 'testpassword123',\n+                'host': 'localhost',\n+                'port': '5432',\n+            }), (\n+                ['psql', '-U', 'testuser', '-h', 'localhost', '-p', '5432', 'testdb'],\n+                'testpassword123',\n+            )\n+        )\n+\n+    def test_pgpassword_with_special_characters(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'specialdb',\n+                'user': 'special:user',\n+                'password': 'pass:word!',\n+                'host': 'localhost',\n+                'port': '5432',\n+            }), (\n+                ['psql', '-U', 'special:user', '-h', 'localhost', '-p', '5432', 'specialdb'],\n+                'pass:word!',\n+            )\n+        )\n \n         sigint_handler = signal.getsignal(signal.SIGINT)\n         # The default handler isn't SIG_IGN.\n@@ -113,4 +145,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..1665c66 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -6,6 +6,7 @@ from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n \n+from django.contrib.contenttypes.models import ContentType\n \n @override_settings(\n     MIGRATION_MODULES=dict(\n@@ -38,7 +39,20 @@ class ContentTypeOperationsTests(TransactionTestCase):\n                     self.assertEqual(next_operation.old_model, operation.old_name_lower)\n                     self.assertEqual(next_operation.new_model, operation.new_name_lower)\n \n-    def test_existing_content_type_rename(self):\n+    def test_existing_content_type_rename_other_database(self):\n+        class TestRouter:\n+            def db_for_write(self, model, **hints):\n+                return 'other'\n+\n+        with self.settings(DATABASE_ROUTERS=[TestRouter()]):\n+            ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+            other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+            call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+            self.assertFalse(other_content_types.filter(model='foo').exists())\n+            self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+            call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+            self.assertTrue(other_content_types.filter(model='foo').exists())\n+            self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n@@ -63,4 +77,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..6e7b89d 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,37 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inlines_method(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = [AlternateInline, MediaInline]\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        # Test setup\n+        ma = EpisodeAdmin(Episode, self.site)\n+        \n+        # Assuming request is a mock object\n+        request = type('Request', (), {})()  # Creating a simple mock object\n+\n+        # Test various scenarios\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+        for name, inline_class in (('alternate', AlternateInline), ('media', MediaInline)):\n+            request.name = name\n+            self.assertEqual(ma.get_inlines(request, None), [inline_class])\n+            self.assertEqual(type(ma.get_inline_instances(request)[0]), inline_class)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..9895f19 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,8 +237,26 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", \"trailingnewline\\n\",\n+            \"validusername\\n\",\n+            \"validusername\\n\",\n         ]\n+        \n+    def test_unicode_validator_trailing_newline(self):\n+        invalid_usernames = [\"trailingnewline\\n\"]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator_trailing_newline(self):\n+        invalid_usernames = [\"trailingnewline\\n\"]\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +276,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..5efbb04 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -22,7 +22,35 @@ class RenderToStringTest(SimpleTestCase):\n         )\n \n \n-class GetDefaultTests(SimpleTestCase):\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_autoescape_off_multiple_templates(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        template_names = ['test_context.html', 'another_template.html']\n+        self.assertEqual(\n+            engine.render_to_string(template_names, {'obj': '<script>'}),\n+            'obj:<script>\\n',  # Assuming test_context.html is found first and uses the expected output\n+        )\n+\n+    def test_autoescape_on_default(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR])\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',  # Should autoescape by default\n+        )\n+\n+    def test_autoescape_with_context_instance(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        context = Context({'obj': '<script>'})\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', context), \n+            'obj:<script>\\n',  # Should not escape since context instance is used\n+        )\n \n     @override_settings(TEMPLATES=[])\n     def test_no_engines_configured(self):\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..054926b 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,6 +413,19 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'my content'))\n+        self.assertEqual(r.content, b'my content')\n+        \n+        # Test with an empty memoryview\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+        \n+        # Test setting content via property with memoryview\n+        r = HttpResponse()\n+        r.content = memoryview(b'set content')\n+        self.assertEqual(r.content, b'set content')\n+\n     def test_lazy_content(self):\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n",
  "django__django-11141": "",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..44796e4 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -635,8 +635,28 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, '<h2>Inner2s</h2>')\n         self.assertNotContains(response, 'Add another Inner2')\n         self.assertNotContains(response, 'id=\"id_inner2_set-TOTAL_FORMS\"')\n+    def test_inline_add_m2m_view_only_perm(self):\n+        # Give only view permission on books\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only inlines should be present, but not editable\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+        self.assertContains(response, '<input type=\"hidden\" id=\"id_Author_books-TOTAL_FORMS\" value=\"0\"', html=True)\n+        self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n \n-    def test_inline_add_m2m_add_perm(self):\n+    def test_inline_change_m2m_view_only_perm(self):\n+        # Give only view permission on books\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines should be present, but not editable\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(response, '<input type=\"hidden\" id=\"id_Author_books-TOTAL_FORMS\" value=\"1\"', html=True)\n+        self.assertContains(response, '<p>%s</p>' % Book.objects.get(pk=self.book).name)\n+        self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n         permission = Permission.objects.get(codename='add_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(reverse('admin:admin_inlines_author_add'))\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..c453c60 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,6 +2900,18 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n+    def test_fields_empty_list(self):\n+        \"\"\"Test model_to_dict with an empty list for fields parameter.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        # Expecting an empty dict since fields=[] specifies no fields should be included.\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n+    def test_fields_none(self):\n+        \"\"\"Test model_to_dict with a None value for fields parameter.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        # Expecting all fields to be included since fields=None is the default behavior.\n+        self.assertEqual(sorted(model_to_dict(bw, fields=None)), ['id', 'name', 'score', 'writer_ptr'])\n+\n     def test_many_to_many(self):\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..4bcd906 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n@@ -471,7 +473,28 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n-    def test_fast_delete_joined_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_instance_without_dependencies(self):\n+        a = Avatar.objects.create(desc='orphan')\n+        a.delete()\n+        self.assertIsNone(a.pk)\n+\n+    def test_delete_instance_with_dependencies(self):\n+        a = Avatar.objects.create(desc='dependent')\n+        u = User.objects.create(avatar=a)\n+        # Deleting the user should not fast-delete since it has dependencies.\n+        collector = Collector(using='default')\n+        self.assertFalse(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+        self.assertEqual(Avatar.objects.count(), 1)  # Avatar should still exist\n         a = Avatar.objects.create(desc='a')\n         User.objects.create(avatar=a)\n         u2 = User.objects.create()\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..a561cdf 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,11 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # Test cases for the issue where small decimals were not formatted correctly\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-205', 3, '0.000'),\n+            ('5e-210', 5, '0.00000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..d579202 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,5 +1,18 @@\n+\n import uuid\n+# Adding a model to complement the test scenario\n+\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n \n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n from django.contrib.contenttypes.fields import (\n     GenericForeignKey, GenericRelation,\n )\n@@ -7,25 +20,85 @@ from django.contrib.contenttypes.models import ContentType\n from django.db import models\n from django.db.models.query import ModelIterable, QuerySet\n from django.utils.functional import cached_property\n+# Adding a model to complement the test scenario\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class Author(models.Model):\n     name = models.CharField(max_length=50, unique=True)\n     first_book = models.ForeignKey('Book', models.CASCADE, related_name='first_time_authors')\n     favorite_authors = models.ManyToManyField(\n         'self', through='FavoriteAuthors', symmetrical=False, related_name='favors_me')\n+# Adding a model to complement the test scenario\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n+# Adding a model to complement the test scenario\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     def __str__(self):\n         return self.name\n+# Adding a model to complement the test scenario\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class AuthorWithAge(Author):\n     author = models.OneToOneField(Author, models.CASCADE, parent_link=True)\n     age = models.IntegerField()\n+# Adding a model to complement the test scenario\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class FavoriteAuthors(models.Model):\n     author = models.ForeignKey(Author, models.CASCADE, to_field='name', related_name='i_like')\n@@ -164,13 +237,49 @@ class TaggedItem(models.Model):\n     )\n     favorite_fkey = models.CharField(max_length=64, null=True)\n     favorite = GenericForeignKey('favorite_ct', 'favorite_fkey')\n+# Adding a model to complement the test scenario\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n+# Adding a model to complement the test scenario\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     def __str__(self):\n         return self.tag\n+# Adding a model to complement the test scenario\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class Bookmark(models.Model):\n     url = models.URLField()\n@@ -179,31 +288,115 @@ class Bookmark(models.Model):\n                                     content_type_field='favorite_ct',\n                                     object_id_field='favorite_fkey',\n                                     related_query_name='favorite_bookmarks')\n+# Adding a model to complement the test scenario\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n+# Adding a model to complement the test scenario\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class Comment(models.Model):\n     comment = models.TextField()\n+# Adding a model to complement the test scenario\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     # Content-object field\n     content_type = models.ForeignKey(ContentType, models.CASCADE)\n     object_pk = models.TextField()\n     content_object = GenericForeignKey(ct_field=\"content_type\", fk_field=\"object_pk\")\n+# Adding a model to complement the test scenario\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n+# Adding a model to complement the test scenario\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n # Models for lookup ordering tests\n+# Adding a model to complement the test scenario\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n class House(models.Model):\n     name = models.CharField(max_length=50)\n     address = models.CharField(max_length=255)\n     owner = models.ForeignKey('Person', models.SET_NULL, null=True)\n     main_room = models.OneToOneField('Room', models.SET_NULL, related_name='main_room_of', null=True)\n+# Adding a model to complement the test scenario\n \n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=255)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n     class Meta:\n         ordering = ['id']\n \n",
  "django__django-11239": "",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..76bcaa5 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -82,6 +82,14 @@ class FilteredRelationTests(TestCase):\n                     (self.book4, self.author1),\n                 ], lambda x: (x, x.author_join))\n \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],  # Assuming author2 does not have a book with this exact title\n+        )\n+\n     def test_without_join(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..b7ef91f 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -22,6 +22,7 @@ class TestUtilsHtml(SimpleTestCase):\n         self.assertEqual(function(value), output)\n \n     def test_escape(self):\n+        import html\n         items = (\n             ('&', '&amp;'),\n             ('<', '&lt;'),\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..956669e 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -255,8 +255,39 @@ class CommandRunTests(AdminScriptTestCase):\n \n \n class UtilsTests(SimpleTestCase):\n+    def test_skip_checks_output(self):\n+        \"\"\"\n+        Test if the --skip-checks option skips the system checks and outputs the correct result.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['user_commands'])\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+    def test_skip_checks_with_system_errors(self):\n+        \"\"\"\n+        Test if the --skip-checks option correctly skips errors during system checks.\n+        \"\"\"\n+        self.write_settings('settings.py', sdict={\n+            # Induce a known error in STATICFILES_DIRS for testing.\n+            'STATICFILES_DIRS': '\"not_a_list\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        # Ensure that the actual management command completes without error.\n+        self.assertEqual(out.strip(), 'Set foo')\n \n-    def test_no_existent_external_program(self):\n+    def test_without_skip_checks_fails_if_error_exists(self):\n+        \"\"\"\n+        Test if the command raises errors when not using --skip-checks and a system check error exists.\n+        \"\"\"\n+        self.write_settings('settings.py', sdict={\n+            # Induce a known error in STATICFILES_DIRS for testing.\n+            'STATICFILES_DIRS': '\"not_a_list\"',\n+        })\n+        with self.assertRaises(CommandError) as cm:\n+            self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn('The STATICFILES_DIRS setting is not a tuple or list.', str(cm.exception))\n         msg = 'Error executing a_42_command_that_doesnt_exist_42'\n         with self.assertRaisesMessage(CommandError, msg):\n             popen_wrapper(['a_42_command_that_doesnt_exist_42'])\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..238e290 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -9,7 +11,38 @@ class RegexPatternTests(SimpleTestCase):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n \n \n-class RoutePatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    def test_resolver_cache_after_import(self):\n+        # Ensure the resolver caches properly before and after set_urlconf is called.\n+        # Simulating both timings.\n+        resolver_before_set_urlconf = get_resolver(None)\n+        with override_settings(ROOT_URLCONF='urlpatterns.path_urls'):\n+            from django.urls.base import set_urlconf\n+            set_urlconf('urlpatterns.path_urls')\n+            resolver_after_set_urlconf = get_resolver(None)\n+        self.assertIs(resolver_before_set_urlconf, resolver_after_set_urlconf)\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_effectiveness_with_different_configs(self):\n+        # Check if caching uses settings.ROOT_URLCONF effectively and avoids unnecessary instantiation\n+        resolver_one = get_resolver()\n+        resolver_two = get_resolver()\n+        self.assertIs(resolver_one, resolver_two)\n+        resolver_different = get_resolver('urlpatterns.path_dynamic_urls')\n+        self.assertIsNot(resolver_one, resolver_different)\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_with_explicit_none(self):\n+        # Ensure explicit None respects the ROOT_URLCONF setting\n+        self.assertIs(get_resolver(None), get_resolver('urlpatterns.path_urls'))\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..62ba3f4 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -261,6 +261,17 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n         )\n         self.assertEqual(authenticate(username='test', password='test'), user)\n \n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_no_query_or_hashes_when_no_credentials(self):\n+        \"\"\"\n+        Test that no database query is made and no password hashing occurs\n+        when username and password are both None.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            authenticate()  # No username or password provided\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n \n @override_settings(AUTH_USER_MODEL='auth_tests.ExtensionUser')\n class ExtensionUserModelBackendTest(BaseModelBackendTest, TestCase):\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..0b65218 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,6 +124,23 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    def test_change_column_list_in_union_values_list(self):\n+        # Test that changing the column list in values_list works as expected\n+        ReservedName.objects.create(name='b', order=5)\n+        qs1 = ReservedName.objects.all()\n+\n+        # Test initial values_list for 'name' and 'order'\n+        reserved_name = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name, ('b', 5))\n+\n+        # Change to only values_list 'order'\n+        reserved_name = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_name, (5,))\n+\n+        # Change to only values_list 'name'\n+        reserved_name = qs1.union(qs1).values_list('name').get()\n+        self.assertEqual(reserved_name, ('b',))\n+\n     def test_union_with_two_annotated_values_list(self):\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..ebb4e82 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -12,6 +12,7 @@ from email.header import Header\n from email.mime.text import MIMEText\n from email.utils import parseaddr\n from io import StringIO\n+from unittest import mock\n from smtplib import SMTP, SMTPAuthenticationError, SMTPException\n from ssl import SSLError\n \n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..5635839 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,3 +1,25 @@\n+\n+class ListDisplayCheckTests(CheckTestCase):\n+\n+    def test_valid_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n@@ -5,6 +27,7 @@ from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n from django.db.models import F\n from django.db.models.functions import Upper\n+from django.db.models import Field, Model\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n \n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..88368bb 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,7 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n \n \n class OrderingTests(TestCase):\n@@ -462,7 +462,36 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_ptr_field_with_default_ordering_by_expression(self):\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n+    def test_ordering_by_expression_crash(self):\n+        \"\"\"\n+        Test that ordering by a parent model's field, when Meta.ordering\n+        uses an expression, does not crash.\n+        \"\"\"\n+        articles = OrderedByFArticle.objects.all()\n+        try:\n+            articles.order_by('id', 'author').first()\n+        except Exception as e:\n+            self.fail(f\"Ordering by parent model field with Meta.ordering using expression raised an exception: {e}\")\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..544389f 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -391,7 +391,15 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_avg_distinct(self):\n+        books = Book.objects.aggregate(avg_rating=Avg('rating', distinct=True))\n+        expected_avg = 4.125  # Assuming test data matches this expectation\n+        self.assertEqual(books['avg_rating'], expected_avg)\n+\n+    def test_sum_distinct(self):\n+        books = Book.objects.aggregate(total_ratings=Sum('rating', distinct=True))\n+        expected_sum = 16.5  # Assuming test data matches this expectation\n+        self.assertEqual(books['total_ratings'], expected_sum)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..a3a5c4e 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1456,6 +1456,29 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, \"otherapp\", 0, [\n             \"AlterUniqueTogether\", \"AlterIndexTogether\", \"RemoveField\"\n         ])\n+    \n+    app1_with_uuid_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.UUIDField(null=True, blank=True)),\n+    ])\n+    app1_with_fk_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+    ])\n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+    ])\n+    \n+    def test_alter_uuid_to_fk_adds_dependency(self):\n+        before = [self.app1_with_uuid_field, self.app2]\n+        after = [self.app1_with_fk_field, self.app2]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         self.assertOperationAttributes(changes, \"otherapp\", 0, 0, name=\"book\", unique_together=set())\n         self.assertOperationAttributes(changes, \"otherapp\", 0, 1, name=\"book\", index_together=set())\n         self.assertOperationAttributes(changes, \"otherapp\", 0, 2, model_name=\"book\", name=\"author\")\n@@ -1500,6 +1523,29 @@ class AutodetectorTests(TestCase):\n             (\"id\", models.AutoField(primary_key=True)),\n             (\"name\", models.CharField(max_length=200)),\n         ])\n+    \n+    app1_with_uuid_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.UUIDField(null=True, blank=True)),\n+    ])\n+    app1_with_fk_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+    ])\n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+    ])\n+    \n+    def test_alter_uuid_to_fk_adds_dependency(self):\n+        before = [self.app1_with_uuid_field, self.app2]\n+        after = [self.app1_with_fk_field, self.app2]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         book_with_author = ModelState(\"otherapp\", \"Book\", [\n             (\"id\", models.AutoField(primary_key=True)),\n             (\"author\", models.ForeignKey(\"otherapp.Author\", models.CASCADE)),\n@@ -1913,6 +1959,29 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, \"testapp\", 0, [\n             'CreateModel', 'CreateModel', 'CreateModel', 'AddField',\n         ])\n+    \n+    app1_with_uuid_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.UUIDField(null=True, blank=True)),\n+    ])\n+    app1_with_fk_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+    ])\n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+    ])\n+    \n+    def test_alter_uuid_to_fk_adds_dependency(self):\n+        before = [self.app1_with_uuid_field, self.app2]\n+        after = [self.app1_with_fk_field, self.app2]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Author')\n         self.assertOperationAttributes(changes, 'testapp', 0, 1, name='Publisher')\n         self.assertOperationAttributes(changes, 'testapp', 0, 2, name='Contract')\n@@ -1965,6 +2034,29 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, \"testapp\", 0, [\n             \"RemoveField\", \"RemoveField\", \"DeleteModel\", \"DeleteModel\"\n         ])\n+    \n+    app1_with_uuid_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.UUIDField(null=True, blank=True)),\n+    ])\n+    app1_with_fk_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+    ])\n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+    ])\n+    \n+    def test_alter_uuid_to_fk_adds_dependency(self):\n+        before = [self.app1_with_uuid_field, self.app2]\n+        after = [self.app1_with_fk_field, self.app2]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         self.assertOperationAttributes(changes, \"testapp\", 0, 0, name=\"author\", model_name='contract')\n         self.assertOperationAttributes(changes, \"testapp\", 0, 1, name=\"publisher\", model_name='contract')\n         self.assertOperationAttributes(changes, \"testapp\", 0, 2, name=\"Author\")\n@@ -2123,6 +2215,29 @@ class AutodetectorTests(TestCase):\n         altered_model_state = ModelState('app', 'Model', [\n             ('id', models.AutoField(primary_key=True)),\n         ])\n+    \n+    app1_with_uuid_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.UUIDField(null=True, blank=True)),\n+    ])\n+    app1_with_fk_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+    ])\n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+    ])\n+    \n+    def test_alter_uuid_to_fk_adds_dependency(self):\n+        before = [self.app1_with_uuid_field, self.app2]\n+        after = [self.app1_with_fk_field, self.app2]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         changes = self.get_changes([model_state], [altered_model_state])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['AlterModelOptions'])\n@@ -2161,6 +2276,29 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, \"app\", 0, [\n             \"CreateModel\", \"CreateModel\", \"CreateModel\", \"CreateModel\", \"CreateModel\"\n         ])\n+    \n+    app1_with_uuid_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.UUIDField(null=True, blank=True)),\n+    ])\n+    app1_with_fk_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+    ])\n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+    ])\n+    \n+    def test_alter_uuid_to_fk_adds_dependency(self):\n+        before = [self.app1_with_uuid_field, self.app2]\n+        after = [self.app1_with_fk_field, self.app2]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         self.assertOperationAttributes(changes, \"app\", 0, 0, name=\"A\")\n         self.assertOperationAttributes(changes, \"app\", 0, 1, name=\"B\")\n         self.assertOperationAttributes(changes, \"app\", 0, 2, name=\"C\")\n@@ -2260,16 +2398,108 @@ class AutodetectorTests(TestCase):\n             (\"id\", models.AutoField(primary_key=True)),\n             (\"country\", models.ForeignKey(\"b.DeliveryCountry\", models.CASCADE)),\n         ])\n+    \n+    app1_with_uuid_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.UUIDField(null=True, blank=True)),\n+    ])\n+    app1_with_fk_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+    ])\n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+    ])\n+    \n+    def test_alter_uuid_to_fk_adds_dependency(self):\n+        before = [self.app1_with_uuid_field, self.app2]\n+        after = [self.app1_with_fk_field, self.app2]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         person = ModelState(\"a\", \"Person\", [\n             (\"id\", models.AutoField(primary_key=True)),\n         ])\n+    \n+    app1_with_uuid_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.UUIDField(null=True, blank=True)),\n+    ])\n+    app1_with_fk_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+    ])\n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+    ])\n+    \n+    def test_alter_uuid_to_fk_adds_dependency(self):\n+        before = [self.app1_with_uuid_field, self.app2]\n+        after = [self.app1_with_fk_field, self.app2]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         apackage = ModelState(\"b\", \"APackage\", [\n             (\"id\", models.AutoField(primary_key=True)),\n             (\"person\", models.ForeignKey(\"a.Person\", models.CASCADE)),\n         ])\n+    \n+    app1_with_uuid_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.UUIDField(null=True, blank=True)),\n+    ])\n+    app1_with_fk_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+    ])\n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+    ])\n+    \n+    def test_alter_uuid_to_fk_adds_dependency(self):\n+        before = [self.app1_with_uuid_field, self.app2]\n+        after = [self.app1_with_fk_field, self.app2]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         country = ModelState(\"b\", \"DeliveryCountry\", [\n             (\"id\", models.AutoField(primary_key=True)),\n         ])\n+    \n+    app1_with_uuid_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.UUIDField(null=True, blank=True)),\n+    ])\n+    app1_with_fk_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+    ])\n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+    ])\n+    \n+    def test_alter_uuid_to_fk_adds_dependency(self):\n+        before = [self.app1_with_uuid_field, self.app2]\n+        after = [self.app1_with_fk_field, self.app2]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         changes = self.get_changes([], [address, person, apackage, country])\n         # Right number/type of migrations?\n         self.assertNumberMigrations(changes, 'a', 2)\n@@ -2395,8 +2625,31 @@ class AutodetectorTests(TestCase):\n         Animal = ModelState('app', 'Animal', [\n             (\"id\", models.AutoField(primary_key=True)),\n         ])\n+    \n+    app1_with_uuid_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.UUIDField(null=True, blank=True)),\n+    ])\n+    app1_with_fk_field = ModelState(\"testapp1\", \"App1\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+        (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+    ])\n+    app2 = ModelState(\"testapp2\", \"App2\", [\n+        (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+        (\"text\", models.CharField(max_length=100)),\n+    ])\n+    \n+    def test_alter_uuid_to_fk_adds_dependency(self):\n+        before = [self.app1_with_uuid_field, self.app2]\n+        after = [self.app1_with_fk_field, self.app2]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         Dog = ModelState('app', 'Dog', [], bases=('app.Animal',))\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..b0f910b 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -214,7 +214,18 @@ class CommandTests(SimpleTestCase):\n         management.call_command('common_args', stdout=out)\n         self.assertIn('Detected that --version already exists', out.getvalue())\n \n-    def test_subparser(self):\n+    def test_mutually_exclusive_group_required_options(self):\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        \n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+        \n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n         out = StringIO()\n         management.call_command('subparser', 'foo', 12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..ebadf41 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,25 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_maxlength_html_attribute(self):\n+        # Test for custom user model with max_length=255\n+        data = {\n+            'username': 'u' * 255,\n+            'password': 'pwd',\n+            'email': 'test@example.com',\n+        }\n+        CustomEmailField.objects.create_user(**data)\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), '255')\n+\n+        # Test for default user model with implicit max_length=254\n+        data = {\n+            'username': '0123456',\n+            'password': 'password',\n+        }\n+        IntegerUsernameUser.objects.create_user(**data)\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), '254')\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..2635a96 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -296,7 +296,28 @@ class WriterTests(SimpleTestCase):\n             \"(b'value-b', migrations.test_writer.BinaryEnum(b'value-b'))], \"\n             \"default=migrations.test_writer.BinaryEnum(b'value-b'))\"\n         )\n-        field = models.IntegerField(default=IntEnum.A, choices=[(m.value, m) for m in IntEnum])\n+        class TextTranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.GOOD,\n+            (\"migrations.test_writer.TextTranslatedEnum['GOOD']\", {'import migrations.test_writer'})\n+        )\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.BAD,\n+            (\"migrations.test_writer.TextTranslatedEnum['BAD']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(default=TextTranslatedEnum.GOOD, choices=[(m.value, m) for m in TextTranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('Good', migrations.test_writer.TextTranslatedEnum['GOOD']), \"\n+            \"('Bad', migrations.test_writer.TextTranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['GOOD'])\"\n+        )\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..4e77014 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n from datetime import datetime\n+from unittest import mock  # Import mock if not already imported\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -324,7 +326,32 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_year_less_than_70(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mocked_current_year(self, mocked_datetime):\n+        \"\"\"\n+        Test parse_http_date with RFC 850 two-digit year handling,\n+        ensuring correct interpretation based on different mocked current years.\n+        \"\"\"\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Reference years for testing: 2019, 2020, and 2048\n+        test_cases = [\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (datetime(2020, 11, 6, 8, 49, 37), 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(1970, 12, 31, 8, 49, 37)),\n+            (datetime(2048, 11, 6, 8, 49, 37), 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (datetime(2048, 11, 6, 8, 49, 37), 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+            # Add more cases as necessary\n+        ]\n+\n+        for current_dt, rfc850_str, expected_dt in test_cases:\n+            with self.subTest(rfc850_str=rfc850_str):\n+                mocked_datetime.utcnow.return_value = current_dt\n+                parsed_timestamp = parse_http_date(rfc850_str)\n+                actual_dt = datetime.utcfromtimestamp(parsed_timestamp)\n+                self.assertEqual(actual_dt, expected_dt)\n         parsed = parse_http_date('Sun Nov  6 08:49:37 0037')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(2037, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..4196f0c 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3685,8 +3685,28 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertIsInstance(p.data, MultiValueDict)\n         self.assertIsInstance(p.files, MultiValueDict)\n \n+import copy\n+from django.forms import CharField, Form  # Ensuring necessary imports for the test case\n \n class CustomRenderer(DjangoTemplates):\n+\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        \n+        # Ensuring that the copied field is indeed a deep copy\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)  # The error_messages should be different objects\n+        \n+        # Modify the original field's error message and verify it doesn't affect the deepcopy\n+        field.error_messages['invalid'] = 'Changed error message.'\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Form custom error message.')\n+        self.assertNotEqual(field.error_messages['invalid'], field_copy.error_messages['invalid'])\n     pass\n \n \n",
  "django__django-11951": "",
  "django__django-11964": "",
  "django__django-11999": "",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..7a9a000 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -12,6 +12,7 @@ from django.test import (\n from django.test.utils import override_settings\n from django.utils import timezone\n \n+from django.db.models import Index\n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n@@ -22,7 +23,45 @@ class SchemaIndexesTests(TestCase):\n     Test index handling by the db.backends.schema infrastructure.\n     \"\"\"\n \n-    def test_index_name_hash(self):\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n         \"\"\"\n         Index names should be deterministic.\n         \"\"\"\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..3eabc8a 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,8 +1,11 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n from django.db.models import CharField, F, Q\n from django.db.models.expressions import SimpleCol\n+from django.db.models.sql.where import WhereNode\n+from django.test import TestCase\n from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n@@ -107,7 +110,37 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_list_input_for_exact_lookup(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        # Ensure that the RHS of the Exact lookup preserves the input type, i.e., list\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+        self.assertIsInstance(name_exact.rhs, list)\n+\n+    def test_tuple_input_for_exact_lookup(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        # Ensure that the RHS of the Exact lookup preserves the input type, i.e., tuple\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))\n+        self.assertIsInstance(name_exact.rhs, tuple)\n+\n+    def test_iterable_input_in_where_node(self):\n+        # This test verifies that WhereNode handles both list and tuple correctly and keeps their types.\n+        query = Query(Item)\n+        conditions = [Q(name=['x', 'y']), Q(id=(1, 2))]\n+        node = WhereNode(conditions, query)\n+        for idx, condition in enumerate(conditions):\n+            subnode = node.children[idx]\n+            lookup = subnode.children[0]  # Extract the individual lookup\n+            self.assertIsInstance(lookup, Exact)\n+            self.assertEqual(lookup.lhs.output_field, Item._meta.get_field('name' if idx == 0 else 'id'))\n+            self.assertEqual(lookup.rhs, conditions[idx].children[0][2])\n+            # Check if the RHS type matches the condition input.\n+            self.assertIsInstance(lookup.rhs, type(conditions[idx].children[0][2]))\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..550dcaa 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -180,7 +180,39 @@ class OperationWriterTests(SimpleTestCase):\n         )\n \n \n+from django.db import models\n+import enum\n+from django_enumfield import Enum, EnumField\n+\n class WriterTests(SimpleTestCase):\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        field = Outer.Inner(max_length=20)\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"test_writer.Outer.Inner(max_length=20)\",\n+            \"Failed to serialize inner class correctly\"\n+        )\n+\n+    def test_serialize_inner_enum_field(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                on = 'on'\n+                off = 'off'\n+            state = EnumField(enum=State)\n+\n+        field = Thing.state\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertEqual(\n+            string,\n+            \"migrations.test_writer.Thing.State\",\n+            \"Failed to serialize inner enum class field correctly\"\n+        )\n     \"\"\"\n     Tests the migration writer (makes migration files from Migration instances)\n     \"\"\"\n@@ -746,4 +778,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..d08e371 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -838,10 +838,46 @@ class ChangeListTests(TestCase):\n         request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 1)\n+        # Test with regex special character in prefix\n+        # Create a new Swallow instance for testing purposes\n+        b = Swallow.objects.create(origin='Swallow C', load=3, speed=3)\n+        \n+        # Data with a formset prefix containing special regex character '*'\n+        data_special_prefix = {\n+            'form*-TOTAL_FORMS': '1',\n+            'form*-INITIAL_FORMS': '1',\n+            'form*-MIN_NUM_FORMS': '0',\n+            'form*-MAX_NUM_FORMS': '1000',\n+            'form*-0-uuid': str(b.pk),\n+            'form*-0-load': '5',\n+            '_save': 'Save',\n+        }\n+        request_special_prefix = self.factory.post(changelist_url, data=data_special_prefix)\n+        queryset_special_prefix = m._get_list_editable_queryset(request_special_prefix, prefix='form*')\n+        self.assertEqual(queryset_special_prefix.count(), 1)\n+        self.assertEqual(queryset.count(), 1)\n         data['form-0-uuid'] = 'INVALD_PRIMARY_KEY'\n         # The unfiltered queryset is returned if there's invalid data.\n         request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n+        self.assertEqual(queryset.count(), 1)\n+        # Test with regex special character in prefix\n+        # Create a new Swallow instance for testing purposes\n+        b = Swallow.objects.create(origin='Swallow C', load=3, speed=3)\n+        \n+        # Data with a formset prefix containing special regex character '*'\n+        data_special_prefix = {\n+            'form*-TOTAL_FORMS': '1',\n+            'form*-INITIAL_FORMS': '1',\n+            'form*-MIN_NUM_FORMS': '0',\n+            'form*-MAX_NUM_FORMS': '1000',\n+            'form*-0-uuid': str(b.pk),\n+            'form*-0-load': '5',\n+            '_save': 'Save',\n+        }\n+        request_special_prefix = self.factory.post(changelist_url, data=data_special_prefix)\n+        queryset_special_prefix = m._get_list_editable_queryset(request_special_prefix, prefix='form*')\n+        self.assertEqual(queryset_special_prefix.count(), 1)\n         self.assertEqual(queryset.count(), 2)\n \n     def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..b71dfd8 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n@@ -6,9 +7,36 @@ from django.contrib.admindocs.utils import (\n \n from .tests import AdminDocsSimpleTestCase\n \n+from django.test.utils import captured_stderr\n \n @unittest.skipUnless(docutils_is_available, \"no docutils installed.\")\n class TestUtils(AdminDocsSimpleTestCase):\n+    \n+    def test_trim_docstring_with_non_empty_first_line(self):\n+        \"\"\"\n+        Test that `trim_docstring` handles docstrings with non-empty first lines correctly.\n+        \"\"\"\n+        # This is the problematic case described in the issue.\n+        docstring = \"First line\\n\\n    Second line indented\"\n+        trimmed = trim_docstring(docstring)\n+        self.assertEqual(trimmed, \"First line\\n\\nSecond line indented\")\n+    \n+    def test_parse_docstring_with_no_leading_line_feed(self):\n+        \"\"\"\n+        Test that `parse_docstring` handles no leading line feed and correctly\n+        parses the docstring.\n+        \"\"\"\n+        title, body, _ = parse_docstring('firstline\\n\\n    second line')\n+        self.assertEqual(title, 'firstline')\n+        self.assertEqual(body, 'second line')\n+    \n+    def test_parse_rst_with_docstring_no_leading_line_feed(self):\n+        # Original test case that was provided\n+        title, body, _ = parse_docstring('firstline\\n\\n    second line')\n+        with captured_stderr() as stderr:\n+            self.assertEqual(parse_rst(title, ''), '<p>firstline</p>\\n')\n+            self.assertEqual(parse_rst(body, ''), '<p>second line</p>\\n')\n+        self.assertEqual(stderr.getvalue(), '')\n     \"\"\"\n     This __doc__ output is required for testing. I copied this example from\n     `admindocs` documentation. (TITLE)\n",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..b02a6cc 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1112,6 +1112,16 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             \"\"\"\n         )\n \n+    def test_split_array_field_boolean_check(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('name', [False, True, False, True])\n+        subwidgets = context['widget']['subwidgets']\n+        # Assert that each checkbox is initialized correctly\n+        self.assertEqual(subwidgets[0]['attrs'], {})  # Should not be checked\n+        self.assertEqual(subwidgets[1]['attrs'], {'checked': True})  # Should be checked\n+        self.assertEqual(subwidgets[2]['attrs'], {})  # Should not be checked\n+        self.assertEqual(subwidgets[3]['attrs'], {'checked': True})  # Should be checked\n+\n     def test_render_attrs(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2),\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..c847159 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -257,6 +257,9 @@ class UUIDData(models.Model):\n     data = models.UUIDField(primary_key=True)\n \n \n+class UUIDDefaultData(models.Model):\n+    data = models.UUIDField(primary_key=True, default=uuid4)\n+\n class FKToUUID(models.Model):\n     data = models.ForeignKey(UUIDData, models.CASCADE)\n \n",
  "django__django-12262": "",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..84dba98 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2430,6 +2431,24 @@ Password: <input type=\"password\" name=\"password\" required>\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n         )\n \n+    def test_fileinput_with_preexisting_file(self):\n+        class TestForm(Form):\n+            file = FileField(widget=FileInput, required=True)\n+\n+        # Test case where there is initial data; 'required' should not be set.\n+        form_with_initial = TestForm(initial={'file': 'document.pdf'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            form_with_initial.as_table(),\n+            '<tr><th>File:</th><td><input type=\"file\" name=\"file\"></td></tr>',\n+        )\n+\n+        # Test case where there is no initial data; 'required' should be set.\n+        form_without_initial = TestForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            form_without_initial.as_table(),\n+            '<tr><th>File:</th><td><input type=\"file\" name=\"file\" required></td></tr>',\n+        )\n+\n         f = FileForm(data={}, files={}, auto_id=False)\n         self.assertHTMLEqual(\n             f.as_table(),\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..ec95e19 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import decimal\n import ipaddress\n import uuid\n \n from django.db import models\n+from django.template import Context, Template\n from django.test import SimpleTestCase\n from django.utils.functional import Promise\n from django.utils.translation import gettext_lazy as _\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..e2972ba 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -176,6 +176,23 @@ class UtilsTests(SimpleTestCase):\n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n \n+    def test_json_display_for_field(self):\n+        \"\"\"\n+        Test display_for_field to ensure JSONField values are displayed properly.\n+        \"\"\"\n+        tests = [\n+            ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),\n+            (['a', 'b'], '[\"a\", \"b\"]'),\n+            ('a', '\"a\"'),\n+            ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),  # Invalid JSON.\n+        ]\n+        for value, display_value in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    display_value,\n+                )\n+\n     def test_number_formats_display_for_field(self):\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..bf21118 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -999,6 +999,41 @@ class OtherModelTests(SimpleTestCase):\n                 related_name='+',\n             )\n \n+        class Document(models.Model):\n+            pass\n+\n+        class PickingWrongOrder(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        def test_mti_onetoone_with_wrong_order(self):\n+            \"\"\"\n+            Test MTI inheritance with parent_link in wrong order.\n+            \"\"\"\n+            try:\n+                class Picking(Document):\n+                    origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+                    document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+                # The order is wrong, so this should raise an exception\n+                # based on the original issue description.\n+                self.fail(\"Expected ImproperlyConfigured exception due to ordering\")\n+            except ImproperlyConfigured as e:\n+                self.assertEqual(str(e), \"Add parent_link=True to invalid_models_tests.Picking.origin.\")\n+\n+        def test_mti_onetoone_correct_order(self):\n+            \"\"\"\n+            Test MTI inheritance with parent_link in correct order.\n+            \"\"\"\n+            try:\n+                class Picking(Document):\n+                    document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+                    origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+                # Correct order, no exceptions should be raised.\n+            except ImproperlyConfigured:\n+                self.fail(\"ImproperlyConfigured should not be raised for correct order\")\n+\n         class ShippingMethodPrice(models.Model):\n             method = models.ForeignKey(ShippingMethod, models.CASCADE)\n             to_country = models.ForeignKey(Country, models.CASCADE)\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..520d4b5 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -223,6 +223,14 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         ret = self.process_request(\"get\", \"/some/url\")\n         self.assertIsNone(ret)\n \n+    @override_settings()\n+    def test_default_referrer_policy(self):\n+        \"\"\"\n+        By default, the middleware should set \"Referrer-Policy\" to \"same-origin\".\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response.get('Referrer-Policy'), 'same-origin')\n+\n     @override_settings(SECURE_REFERRER_POLICY=None)\n     def test_referrer_policy_off(self):\n         \"\"\"\n@@ -254,4 +262,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..2efc70d 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -13,6 +13,36 @@ from django.db.models import (\n     Func, IntegerField, Max, Min, Model, OrderBy, OuterRef, Q, StdDev,\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n+class SimpleLazyObjectSubqueryTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.user = User.objects.create_user(username='testuser')\n+        cls.manager = Manager.objects.create(name='Manager1')\n+        cls.company = Company.objects.create(name='Company1')\n+\n+    def test_subquery_with_simplelazyobject(self):\n+        max_manager = SimpleLazyObject(lambda: Manager.objects.get(pk=self.manager.pk))\n+        \n+        # Create related employees for the company\n+        employee1 = Employee.objects.create(firstname='John', lastname='Doe', salary=1000)\n+        employee2 = Employee.objects.create(firstname='Jane', lastname='Smith', salary=1200)\n+\n+        # Set CEO to the company\n+        self.company.ceo = employee1\n+        self.company.save()\n+\n+        Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    lastname=OuterRef('ceo__lastname'),\n+                ).values('manager')[:1],  # Ensure a single result for the subquery\n+            ),\n+        ).filter(ceo_manager=max_manager).exists()\n+\n+        # The expected behavior here is that the query does not throw a TypeError\n+        # due to the lazy object not being converted properly.\n+        # It should complete without error.\n+\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n@@ -22,6 +52,8 @@ from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n+from django.contrib.auth.models import User\n+from django.utils.functional import SimpleLazyObject\n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n     Result, SimulationRun, Time,\n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..f4e6ac3 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..e6fa447 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2453,4 +2453,29 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'Readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'Readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'Book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.Readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..2548601 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -6,6 +6,8 @@ from operator import attrgetter\n from django.core.exceptions import FieldError\n from django.db import connection\n from django.db.models import Exists, Max, OuterRef\n+from django.db import models\n+from django.test.utils import isolate_apps\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -189,7 +191,43 @@ class LookupTests(TestCase):\n             }\n         )\n \n-    def test_in_bulk_non_unique_field(self):\n+    def test_in_bulk_meta_constraint(self):\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n         msg = \"in_bulk()'s field_name must be a unique field but 'author' isn't.\"\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..43ec70a 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -884,6 +884,8 @@ class OtherModelTests(SimpleTestCase):\n         ])\n \n     def test_ordering_allows_registered_lookups(self):\n+        from django.db import models\n+        \n         class Model(models.Model):\n             test = models.CharField(max_length=100)\n \n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..7957133 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1825,6 +1825,23 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n+    class ExpressionWrapperTests(SimpleTestCase):\n+        def test_empty_group_by(self):\n+            expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+        \n+        def test_non_empty_group_by(self):\n+            expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+        def test_group_by_with_multiple_constants(self):\n+            expr = ExpressionWrapper(Value(3) + Value(4), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+        def test_group_by_with_field_dependent_expression(self):\n+            expr = ExpressionWrapper(Value(3) + Lower(Value('field')), output_field=CharField())\n+            self.assertNotEqual(expr.get_group_by_cols(alias=None), [])\n+\n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..71aa200 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -56,7 +56,7 @@ class Queries1Tests(TestCase):\n \n         # Create these out of order so that sorting by 'id' will be different to sorting\n         # by 'info'. Helps detect some problems later.\n-        cls.e2 = ExtraInfo.objects.create(info='e2', note=cls.n2, value=41)\n+        cls.e2 = ExtraInfo.objects.create(info='e2', note=cls.n2, value=41, filterable=False)\n         e1 = ExtraInfo.objects.create(info='e1', note=cls.n1, value=42)\n \n         cls.a1 = Author.objects.create(name='a1', num=1001, extra=e1)\n@@ -1211,8 +1211,22 @@ class Queries1Tests(TestCase):\n         )\n \n \n+from django.test import TestCase\n+from django.utils.translation import gettext_lazy as _\n+\n class Queries2Tests(TestCase):\n-    @classmethod\n+    def test_filter_with_nonfilterable_field(self):\n+        # Similar to the issue's situation\n+        extra_info_non_filterable = ExtraInfo.objects.create(info='e3', note=None, value=50, filterable=False)\n+        a5 = Author.objects.create(name='a5', num=5005, extra=extra_info_non_filterable)\n+        \n+        # Attempt to filter on a `filterable=False` field should not raise NotSupportedError now\n+        try:\n+            authors = Author.objects.filter(extra=extra_info_non_filterable)\n+        except Exception as e:\n+            self.fail(f\"Filtering raised an unexpected exception: {e}\")\n+\n+        self.assertSequenceEqual(authors, [a5])\n     def setUpTestData(cls):\n         Number.objects.create(num=4)\n         Number.objects.create(num=8)\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..cb439ca 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,37 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referencing_foreign_key_order_by(self):\n+        # Set up the data for the test\n+        one1 = OneModel.objects.create(oneval=1, root=None)\n+        one2 = OneModel.objects.create(oneval=2, root=one1)\n+        two1 = TwoModel.objects.create(record=one1, twoval=10)\n+        two2 = TwoModel.objects.create(record=one2, twoval=20)\n+\n+        # Test for the initial issue reported\n+        queryset1 = TwoModel.objects.filter(record__oneval__in=[1, 2]).order_by(\"record__root_id\")\n+        self.assertQuerysetEqual(\n+            queryset1, \n+            [two2, two1],\n+            lambda obj: obj.twoval\n+        )\n+\n+        # Test ordering by record__root__id, which should be correct.\n+        queryset2 = TwoModel.objects.filter(record__oneval__in=[1, 2]).order_by(\"record__root__id\")\n+        self.assertQuerysetEqual(\n+            queryset2,\n+            [two1, two2],\n+            lambda obj: obj.twoval\n+        )\n+\n+        # Workaround approach to verify correct ordering\n+        queryset3 = TwoModel.objects.filter(record__oneval__in=[1, 2]).annotate(root_id=F(\"record__root_id\")).order_by(\"root_id\")\n+        self.assertQuerysetEqual(\n+            queryset3,\n+            [two1, two2],\n+            lambda obj: obj.twoval\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +384,37 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_self_referencing_foreign_key_order_by(self):\n+        # Set up the data for the test\n+        one1 = OneModel.objects.create(oneval=1, root=None)\n+        one2 = OneModel.objects.create(oneval=2, root=one1)\n+        two1 = TwoModel.objects.create(record=one1, twoval=10)\n+        two2 = TwoModel.objects.create(record=one2, twoval=20)\n+\n+        # Test for the initial issue reported\n+        queryset1 = TwoModel.objects.filter(record__oneval__in=[1, 2]).order_by(\"record__root_id\")\n+        self.assertQuerysetEqual(\n+            queryset1, \n+            [two2, two1],\n+            lambda obj: obj.twoval\n+        )\n+\n+        # Test ordering by record__root__id, which should be correct.\n+        queryset2 = TwoModel.objects.filter(record__oneval__in=[1, 2]).order_by(\"record__root__id\")\n+        self.assertQuerysetEqual(\n+            queryset2,\n+            [two1, two2],\n+            lambda obj: obj.twoval\n+        )\n+\n+        # Workaround approach to verify correct ordering\n+        queryset3 = TwoModel.objects.filter(record__oneval__in=[1, 2]).annotate(root_id=F(\"record__root_id\")).order_by(\"root_id\")\n+        self.assertQuerysetEqual(\n+            queryset3,\n+            [two1, two2],\n+            lambda obj: obj.twoval\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..1a60daa 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -615,6 +615,30 @@ class BaseCacheTests:\n                 count += 1\n         self.assertEqual(count, final_count)\n \n+    def test_cull_with_empty_cache(self):\n+        \"\"\"\n+        Test the `_cull` method on an empty cache to ensure no NoneType\n+        errors occur when attempting to cull entries in an empty cache.\n+        \"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+            \n+        old_max_entries = cull_cache._max_entries\n+        cull_cache._max_entries = 1  # Ensure _cull will attempt to cull\n+\n+        # Clear all entries to mimic an empty cache state\n+        cull_cache.clear()\n+\n+        try:\n+            # Perform an operation that should trigger culling\n+            cull_cache.set('key_in_empty_cache', 'value', timeout=1000)\n+            # Check that set operation is successful even when _cull is called\n+            self.assertTrue(cull_cache.has_key('key_in_empty_cache'))\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n+\n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n \n",
  "django__django-13109": "diff --git a/tests/model_forms/models.py b/tests/model_forms/models.py\nindex ff8ad74..e961391 100644\n--- a/tests/model_forms/models.py\n+++ b/tests/model_forms/models.py\n@@ -28,8 +28,19 @@ class Category(models.Model):\n         return self.__str__()\n \n \n+class WriterManager(models.Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        return qs.filter(archived=False)\n+\n class Writer(models.Model):\n     name = models.CharField(max_length=50, help_text='Use both first and last names.')\n+    archived = models.BooleanField(default=False, editable=False)\n+    \n+    objects = WriterManager()\n+\n+    class Meta:\n+        ordering = ('name',)\n \n     class Meta:\n         ordering = ('name',)\n",
  "django__django-13112": "",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..441809c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1607,6 +1607,17 @@ class FTimeDeltaTests(TestCase):\n         ))\n         self.assertIsNone(queryset.first().shifted)\n \n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Test the subtraction of DateTimeFields without using ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        # Assert that the delta is calculated as expected\n+        expected_duration = {e.name: (e.end - e.start) for e in Experiment.objects.all()}\n+        for obj in queryset:\n+            self.assertEqual(obj.delta, expected_duration[obj.name])\n+\n     @skipUnlessDBFeature('supports_temporal_subtraction')\n     def test_datetime_subquery_subtraction(self):\n         subquery = Experiment.objects.filter(pk=OuterRef('pk')).values('start')\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..ccb817e 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,7 @@\n import operator\n \n+from django.db.models import Q\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n@@ -45,7 +47,16 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__lte=4)\n         self.assertNumbersEqual(qs1.difference(qs2), [5], ordered=False)\n \n-    def test_union_distinct(self):\n+    def test_union_none(self):\n+        \"\"\"\n+        Test that the none() method on a union of querysets returns an empty result.\n+        \"\"\"\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        union_qs = qs1.union(qs2)\n+        none_qs = union_qs.none()\n+        self.assertSequenceEqual(list(none_qs), [])\n+        self.assertNumbersEqual(union_qs, [0, 1, 8, 9], ordered=False)\n         qs1 = Number.objects.all()\n         qs2 = Number.objects.all()\n         self.assertEqual(len(list(qs1.union(qs2, all=True))), 20)\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..1a5ea01 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -323,6 +323,17 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_legacy_encode_decode(self):\n+        data = {'a test key': 'a test value'}\n+        \n+        # Using the legacy encode method and decode with sha1\n+        encoded = self.session.encode(data)\n+        decoded = self.session._legacy_decode(encoded)\n+\n+        self.assertEqual(decoded, data)\n+\n     def test_decode_failure_logged_to_security(self):\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..3506928 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -9,6 +9,8 @@ from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.views.generic import RedirectView, TemplateView, View\n+from .models import Artist\n+from django.shortcuts import get_object_or_404\n \n from . import views\n \n@@ -590,7 +592,36 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering(self):\n+        class ArtistView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, *, artist_name, **kwargs):\n+                context = super().get_context_data(**kwargs)\n+                artist = Artist.objects.get(name=artist_name)\n+                return {**context, 'artist': artist}\n+\n+        artist = Artist.objects.create(name='Rene Magritte')\n+        response = ArtistView.as_view()(self.rf.get('/'), artist_name=artist.name)\n+        self.assertEqual(response.context_data['artist'], artist)\n+\n+    def test_template_params_simplelazyobject_fix(self):\n+        \"\"\"\n+        Test if the issue with SimpleLazyObject in kwargs is resolved.\n+        \"\"\"\n+        class OfferView(TemplateView):\n+            template_name = \"offers/offer.html\"\n+\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = get_object_or_404(Artist, slug=str(offer_slug))\n+                return {\"offer\": offer, \"offer_slug\": offer_slug}\n+\n+        artist = Artist.objects.create(name=\"Salvador Dali\", slug=\"salvador-dali\")\n+        response = OfferView.as_view()(self.client.get('/offers/salvador-dali/'))\n+        self.assertEqual(response.context_data['offer'], artist)\n+        self.assertEqual(response.context_data['offer_slug'], 'salvador-dali')\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..612e757 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -4,6 +4,7 @@ from decimal import Decimal\n from unittest import mock, skipUnless\n \n from django import forms\n+from django.test.utils import isolate_apps\n from django.core.exceptions import (\n     NON_FIELD_ERRORS, FieldError, ImproperlyConfigured, ValidationError,\n )\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..c4c2c9f 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -906,7 +906,22 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         obj = FileField(storage=GetStorage)\n         self.assertIsInstance(obj.storage, BaseStorage)\n \n-    def test_callable_storage_file_field_in_model(self):\n+    def test_deconstruct_callable_storage(self):\n+        \"\"\"\n+        Test that a FileField with callable storage deconstructs to the callable itself.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, callable_storage)\n+\n+    def test_deconstruct_with_non_callable_storage(self):\n+        \"\"\"\n+        Test that a FileField with a non-callable storage deconstructs correctly.\n+        \"\"\"\n+        obj = Storage()\n+        self.assertEqual(obj.storage_callable.storage, temp_storage)\n+        self.assertEqual(obj.storage_callable.storage.location, temp_storage_location)\n         obj = Storage()\n         self.assertEqual(obj.storage_callable.storage, temp_storage)\n         self.assertEqual(obj.storage_callable.storage.location, temp_storage_location)\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..deb995a 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -632,6 +632,17 @@ class TestQuerying(TestCase):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)\n \n+    def test_key_in(self):\n+        # This tests the behavior described in the issue statement\n+        # We create a situation similar to the issue\n+        first_filter = {'value__key__in': [0]}\n+        first_items = NullableJSONModel.objects.filter(**first_filter)\n+        self.assertEqual(len(first_items), 312)  # Expected length inferred from analogous reasoning\n+\n+        second_filter = {'value__key': 0}\n+        second_items = NullableJSONModel.objects.filter(**second_filter)\n+        self.assertEqual(len(second_items), 312)  # As per the issue description\n+\n     def test_key_icontains(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..c38af4c 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -1133,7 +1133,27 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_truncdate_and_trunctime_with_tzinfo(self):\n+        import pytz\n+        melb = pytz.timezone('Australia/Melbourne')\n+        new_york = pytz.timezone('America/New_York')\n+        start_datetime = timezone.make_aware(datetime(2023, 3, 10, 15, 45, 00), timezone.utc)\n+        self.create_model(start_datetime)\n+\n+        model = DTModel.objects.annotate(\n+            melb_date=TruncDate('start_datetime', tzinfo=melb),\n+            new_york_date=TruncDate('start_datetime', tzinfo=new_york),\n+            melb_time=TruncTime('start_datetime', tzinfo=melb),\n+            new_york_time=TruncTime('start_datetime', tzinfo=new_york),\n+        ).get()\n+\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        new_york_start_datetime = start_datetime.astimezone(new_york)\n+\n+        self.assertEqual(model.melb_date, melb_start_datetime.date())\n+        self.assertEqual(model.new_york_date, new_york_start_datetime.date())\n+        self.assertEqual(model.melb_time, melb_start_datetime.time())\n+        self.assertEqual(model.new_york_time, new_york_start_datetime.time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..0d442da 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -97,11 +97,75 @@ class BasicFieldTests(SimpleTestCase):\n         field._get_default\n         pickle.dumps(field)\n \n-    def test_deconstruct_nested_field(self):\n-        \"\"\"deconstruct() uses __qualname__ for nested class support.\"\"\"\n-        name, path, args, kwargs = Nested.Field().deconstruct()\n-        self.assertEqual(path, 'model_fields.tests.Nested.Field')\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n \n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+    def test_abstract_model_field_inequality_in_set(self):\n+        \"\"\"Fields from different abstract model instances should not be deduplicated in sets.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        field_set = {\n+            InheritAbstractModel1._meta.get_field('field'),\n+            InheritAbstractModel2._meta.get_field('field'),\n+        }\n+\n+        self.assertEqual(len(field_set), 2)\n+\n+    def test_abstract_model_field_different_models(self):\n+        \"\"\"Fields from different models that inherit the same abstract model are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        field1 = InheritAbstractModel1._meta.get_field('field')\n+        field2 = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(field1, field2)\n \n class ChoicesTests(SimpleTestCase):\n \n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..a71f90a 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -6,6 +7,7 @@ import tempfile\n import unittest\n from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n+from django.core.files import locks\n from unittest import mock\n \n from django.core.files import File\n",
  "django__django-13417": "",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..eed13f5 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -335,7 +335,21 @@ class CommandTests(SimpleTestCase):\n             with self.assertRaisesMessage(TypeError, msg):\n                 management.call_command('subparser_dest', subcommand='foo', bar=12)\n \n-    def test_create_parser_kwargs(self):\n+    def test_outputwrapper_flush(self):\n+        out = StringIO()\n+        with mock.patch.object(out, 'flush') as mocked_flush:\n+            management.call_command('outputwrapper', stdout=out)\n+        self.assertIn('Working...', out.getvalue())\n+        self.assertIs(mocked_flush.called, True)\n+\n+    def test_migrate_command_flush_stdout(self):\n+        out = StringIO()\n+        err = StringIO()\n+        with mock.patch.object(out, 'flush') as mocked_flush_out, \\\n+             mock.patch.object(err, 'flush') as mocked_flush_err:\n+            management.call_command('migrate', stdout=out, stderr=err)\n+        self.assertIs(mocked_flush_out.called, True)\n+        self.assertIs(mocked_flush_err.called, True)\n         \"\"\"BaseCommand.create_parser() passes kwargs to CommandParser.\"\"\"\n         epilog = 'some epilog text'\n         parser = BaseCommand().create_parser('prog_name', 'subcommand', epilog=epilog)\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..faa7abe 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n@@ -16,9 +17,33 @@ class MockedPasswordResetTokenGenerator(PasswordResetTokenGenerator):\n     def _now(self):\n         return self._now_val\n \n+from .with_custom_email_field import CustomEmailField\n+from .models import CustomEmailField, IntegerUsernameUser\n \n class TokenGeneratorTest(TestCase):\n \n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                # Token should be invalid after email change\n+                self.assertIs(p0.check_token(user, tk1), False)\n+\n     def test_make_token(self):\n         user = User.objects.create_user('tokentestuser', 'test2@example.com', 'testpw')\n         p0 = PasswordResetTokenGenerator()\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..b395a68 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,3 +1,5 @@\n+\n+from django.db.models import Q, UniqueConstraint\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n@@ -137,8 +139,21 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n                 id='auth.E005',\n             ),\n         ])\n+    \n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithTotalUniqueConstraints')\n+    def test_username_with_total_unique_constraints(self):\n+        class UserWithTotalUniqueConstraints(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n \n-    def test_non_clashing_custom_permissions(self):\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='user_username_unq'),\n+                ]\n+\n+        # With total unique constraint, there should be no auth.E003 error.\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..3da87a2 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -815,7 +816,38 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        # Test case for the issue: Using named tuples in range filters should not cause errors\n+        from collections import namedtuple\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(num_employees__range=EmployeeRange(minimum=51, maximum=100))\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+    def test_range_lookup_namedtuple_single_value(self):\n+        # Test with a namedtuple that specifies a range with the same start and end\n+        from collections import namedtuple\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        Company.objects.create(name='Single Value Ltd', num_employees=70, num_chairs=20)\n+        qs = Company.objects.filter(num_employees__range=EmployeeRange(minimum=70, maximum=70))\n+        self.assertQuerysetEqual(qs, ['<Company: Single Value Ltd>'], ordered=False)\n+\n+    def test_range_lookup_namedtuple_no_results(self):\n+        # Test with a namedtuple that specifies a range with no matching results\n+        from collections import namedtuple\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(num_employees__range=EmployeeRange(minimum=101, maximum=200))\n+        self.assertQuerysetEqual(qs, [], ordered=False)\n+\n+    def test_range_lookup_namedtuple_large_range(self):\n+        # Test with a namedtuple that specifies a wide range that catches all entries\n+        from collections import namedtuple\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(num_employees__range=EmployeeRange(minimum=1, maximum=100))\n+        self.assertQuerysetEqual(qs, [\n+            '<Company: 5020 Ltd>', '<Company: 5040 Ltd>',\n+            '<Company: 5050 Ltd>', '<Company: 5060 Ltd>',\n+            '<Company: 99300 Ltd>',\n+        ], ordered=False)\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..a9ca37f 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -28,10 +28,46 @@ from django.core.management.commands.testserver import (\n )\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n+from django.test.utils import captured_stderr, captured_stdout\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n \n+class ExecuteFromCommandLineTestCase(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_main_py(self):\n+        \"\"\"\n+        Program name is set to 'python -m django' when prog_name is '__main__.py'.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['__main__.py'] + args)\n+        self.assertIn('usage: python -m django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_standard(self):\n+        \"\"\"\n+        Standard test to ensure program name matches when using a standard argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            execute_from_command_line(['manage.py'] + args)\n+        self.assertIn('usage: manage.py shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+\n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..af020a6 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -66,7 +67,21 @@ class DateFormatTests(SimpleTestCase):\n \n         self.assertEqual(dateformat.format(my_birthday, ''), '')\n \n-    def test_am_pm(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (123, '23'),\n+            (0, '00'),  # Edge case test for year \"0000\"\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 1, 1), 'y'),\n+                    expected_date,\n+                )\n         my_birthday = datetime(1979, 7, 8, 22, 00)\n \n         self.assertEqual(dateformat.format(my_birthday, 'a'), 'p.m.')\n@@ -164,4 +179,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..a89ec96 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1019,6 +1019,9 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             </div>\n             \"\"\"\n         )\n+    def test_readonly_password_hash_field_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n \n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..8f04b2f 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,6 +119,46 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n+    def test_create_model_and_remove_model_options_with_permissions(self):\n+        # Case where the `verbose_name` option is removed after squashing with an empty `AlterModelOptions`\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Test Model'},\n+                ),\n+                migrations.AlterModelOptions('TestModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('TestModel', fields=[]),\n+            ],\n+        )\n+\n+        # Case where `permissions` option is partially retained after squashing\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={\n+                        'permissions': [('can_edit', 'Can edit')],\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'TestModel',\n+                    options={'permissions': [('can_edit', 'Can edit'), ('can_view', 'Can view')]},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={'permissions': [('can_edit', 'Can edit'), ('can_view', 'Can view')]},\n+                ),\n+            ],\n+        )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n@@ -134,6 +174,46 @@ class OptimizerTests(SimpleTestCase):\n             [],\n         )\n \n+    def test_create_model_and_remove_model_options_with_permissions(self):\n+        # Case where the `verbose_name` option is removed after squashing with an empty `AlterModelOptions`\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Test Model'},\n+                ),\n+                migrations.AlterModelOptions('TestModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('TestModel', fields=[]),\n+            ],\n+        )\n+\n+        # Case where `permissions` option is partially retained after squashing\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={\n+                        'permissions': [('can_edit', 'Can edit')],\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'TestModel',\n+                    options={'permissions': [('can_edit', 'Can edit'), ('can_view', 'Can view')]},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'TestModel',\n+                    fields=[],\n+                    options={'permissions': [('can_edit', 'Can edit'), ('can_view', 'Can view')]},\n+                ),\n+            ],\n+        )\n+\n     def test_create_alter_unique_delete_model(self):\n         self._test_create_alter_foo_delete_model(migrations.AlterUniqueTogether(\"Foo\", [[\"a\", \"b\"]]))\n \n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..320efdc 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,8 +1,10 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n+from django.utils.translation import gettext_lazy, lazy\n from ..utils import setup\n \n \n@@ -47,6 +49,51 @@ class AddTests(SimpleTestCase):\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n+    @setup({'add10': '{{ s1|add:s2 }}'})\n+    def test_add10(self):\n+        output = self.engine.render_to_string(\n+            'add10',\n+            {'s1': 'string', 's2': 'concatenation'},\n+        )\n+        self.assertEqual(output, 'stringconcatenation')\n+\n+    @setup({'add11': '{{ lazy_s1|add:s2 }}'})\n+    def test_add11(self):\n+        output = self.engine.render_to_string(\n+            'add11',\n+            {'lazy_s1': gettext_lazy('string'), 's2': ' concatenation'},\n+        )\n+        self.assertEqual(output, 'string concatenation')\n+\n+    @setup({'add12': '{{ s1|add:lazy_s2 }}'})\n+    def test_add12(self):\n+        with self.assertRaises(TypeError):\n+            self.engine.render_to_string(\n+                'add12',\n+                {'s1': 5, 'lazy_s2': gettext_lazy('lazy')},\n+            )\n+\n class FunctionTests(SimpleTestCase):\n \n     def test_add(self):\n",
  "django__django-13807": "",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..6f7efaf 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,12 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+import mock\n+from django.core.management import call_command\n+from io import StringIO\n+from django.test import TestCase\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..3f8b1f0 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -5,6 +6,11 @@ from django.test import RequestFactory, SimpleTestCase, override_settings\n \n from . import middleware as mw\n \n+from django.test import override_settings, SimpleTestCase\n+from django.core.exceptions import MiddlewareNotUsed\n+from django.http import HttpResponse\n+from django.test.client import RequestFactory\n+from . import middleware as mw\n \n @override_settings(ROOT_URLCONF='middleware_exceptions.urls')\n class MiddlewareTests(SimpleTestCase):\n@@ -282,6 +288,11 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n         self.assertEqual(response.content, b'OK')\n         self.assertEqual(response.status_code, 200)\n \n+from django.test import override_settings, SimpleTestCase\n+from django.core.exceptions import MiddlewareNotUsed\n+from django.http import HttpResponse\n+from django.test.client import RequestFactory\n+from . import middleware as mw\n \n @override_settings(ROOT_URLCONF='middleware_exceptions.urls')\n class AsyncMiddlewareTests(SimpleTestCase):\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..beb983c 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -8,6 +9,7 @@ from django.db.migrations.exceptions import (\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import TestCase, modify_settings, override_settings\n+from importlib import import_module\n \n from .test_base import MigrationTestBase\n \n@@ -512,6 +514,29 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_no_file'})\n+    def test_loading_package_with_no_file_but_valid_path(self):\n+        \"\"\"\n+        Test that MigrationLoader can load migrations from packages\n+        that do not have a __file__ attribute but have a valid __path__.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations_no_file')\n+        loader = MigrationLoader(connection)\n+        \n+        # Simulate a module with no __file__ but with a valid __path__\n+        try:\n+            del test_module.__file__\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            # Clean up actions if needed.\n+            pass\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..7aaf302 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -10,7 +10,10 @@ from unittest import mock\n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n-from django.db.utils import ConnectionHandler\n+from django.db.utils import ConnectionHandler, ImproperlyConfigured\n+import unittest\n+from unittest import mock\n+import sqlite3.dbapi2 as dbapi2\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n )\n@@ -36,7 +39,20 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_sqlite_version_less_than_required(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n+\n+    def test_sqlite_version_acceptable(self):\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            try:\n+                check_sqlite_version()\n+            except ImproperlyConfigured:\n+                self.fail(\"check_sqlite_version() raised ImproperlyConfigured unexpectedly!\")\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..72d64e3 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -158,7 +158,14 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n class TestChildArguments(SimpleTestCase):\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -173,7 +180,14 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..d7391bf 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -282,8 +282,27 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n         )\n \n \n+from django import forms\n+from django.test import TestCase\n+\n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n-    def test_modelchoicefield(self):\n+    def test_modelchoicefield_value_placeholder(self):\n+        # Create model instances for testing\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        # Verify the invalid choice error includes the invalid value\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n         ChoiceModel.objects.create(pk=2, name='b')\n@@ -307,4 +326,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..8031800 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,13 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..68699fa 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .models import CustomAutoFieldModel\n+from .fields import MyWrapper\n \n from .models import Bar, Business, Employee, Foo\n \n@@ -220,7 +223,22 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n-    # SQLite lets objects be saved with an empty primary key, even though an\n+\n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that MyAutoField correctly wraps values using MyWrapper on single object creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that MyAutoField correctly wraps values using MyWrapper on bulk creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n     @skipIfDBFeature('supports_unspecified_pk')\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..19a5ec4 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -815,6 +815,21 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n             [self.example_inc.ceo, self.max],\n         )\n+        \n+    def test_commutative_boolean_expression_with_exists_and_q(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        tests = [\n+            (Exists(is_poc) & Q(), [self.max]),\n+            (Q() & Exists(is_poc), [self.max]),\n+            (Exists(is_ceo) | Q(), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+            (Q() | Exists(is_ceo), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+        ]\n+        for conditions, expected in tests:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n \n \n class IterableLookupInnerExpressionsTests(TestCase):\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..9e2a526 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -204,6 +204,16 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('cached', 'css', 'img', 'window.png'), stats['unmodified'])\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n+    def test_no_duplicate_yields_in_post_process(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Ensure that each file is only post-processed once\n+        post_processed_files = stats['post_processed']\n+        \n+        # Use set to check for duplicates, because converting to set will remove duplicates\n+        self.assertEqual(len(post_processed_files), len(set(post_processed_files)))\n \n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..84e05bd 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -12,13 +13,33 @@ from django.utils.datastructures import (\n )\n \n \n+import collections.abc\n+\n class OrderedSetTests(SimpleTestCase):\n \n     def test_init_with_iterable(self):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        s = reversed(OrderedSet([]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_singleton(self):\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n+    def test_reversed_with_strings(self):\n+        s = reversed(OrderedSet(['a', 'b', 'c', 'd']))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), ['d', 'c', 'b', 'a'])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..13ab17c 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n@@ -5,6 +6,7 @@ from django.db.models import (\n     CharField, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n from django.db.models.functions import Upper\n+from django.db import connection\n from django.test import TestCase\n \n from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n@@ -419,6 +421,25 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_default_ordering_does_not_affect_group_by(self):\n+        # This is the original test case from the issue text\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n+\n+    def test_group_by_ignores_ordering_fields(self):\n+        \"\"\"Test that ordering fields defined in Meta are not included in GROUP BY clause.\"\"\"\n+        with connection.cursor() as cursor:\n+            Article.objects.values('author').annotate(count=Count('author')).order_by().query\n+            sql = str(cursor.db.ops.last_executed_query(cursor, cursor.db.ops.last_executed_query))\n+            # We only want 'author' in the GROUP BY clause, not Meta.ordering fields.\n+            self.assertNotIn('pub_date', sql)\n+            self.assertNotIn('headline', sql)\n+\n     def test_order_by_constant_value(self):\n         # Order by annotated constant from selected columns.\n         qs = Article.objects.annotate(\n@@ -483,4 +504,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex 7e095fe..28f6e84 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -34,8 +35,16 @@ class QTests(SimpleTestCase):\n             q | obj\n         with self.assertRaisesMessage(TypeError, str(obj)):\n             q & obj\n+    def test_deconstruct_single_child_q(self):\n+        # Test deconstructing a Q-object with a single child that is not a key-value pair.\n+        from django.db.models import Exists, OuterRef\n+        from .models import Employee\n \n-    def test_deconstruct(self):\n+        tagged = Employee.objects.filter(id=OuterRef('pk'))\n+        q = Q(Exists(tagged))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(args, (Exists(tagged),))\n+        self.assertEqual(kwargs, {})\n         q = Q(price__gt=F('discounted_price'))\n         path, args, kwargs = q.deconstruct()\n         self.assertEqual(path, 'django.db.models.Q')\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..fdda42d 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,7 +1,10 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n+from django.db import models\n+from django.test import override_settings\n \n \n @isolate_apps('model_options')\n@@ -66,7 +69,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +105,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..e17ada0 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -182,7 +182,14 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n         )\n \n-    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [f\"{test_main.__file__.rsplit('/', 1)[0]}/baz.py\", 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_dotted_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module.baz', 'runserver'],\n+        )\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n         self.assertEqual(\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..446a566 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,6 +226,13 @@ TEST_DATA = [\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n+    # Newlines and tabs are not accepted.\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..d2fd376 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1525,8 +1525,26 @@ class AggregationTests(TestCase):\n             allow_distinct = True\n         DistinctAggregate('foo', distinct=True)\n \n+from django.db.models import Q\n \n class JoinPromotionTests(TestCase):\n+    \n+    def test_q_object_or_with_in(self):\n+        # Setup test authors and books similar to described models\n+        author1 = Author.objects.create(name='Author 1')\n+        author2 = Author.objects.create(name='Author 2')\n+        book1 = Book.objects.create(title='Book 1')\n+        book1.authors.add(author1, author2)\n+        book2 = Book.objects.create(title='Book 2')\n+        \n+        # Setup queryset to replicate issue\n+        authors_qs = Author.objects.filter(name__in=['Author 1', 'Author 2'])\n+        books = Book.objects.annotate(Count('authors')).filter(\n+            Q(authors__in=authors_qs) | Q(authors__count=0)\n+        ).distinct()\n+        \n+        # Assert expected outcome - problem exposes if the following raises an error\n+        self.assertNotEqual(books.count(), 0)\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..36b898b 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -157,7 +157,12 @@ class DateFormatTests(SimpleTestCase):\n             with self.assertRaisesMessage(TypeError, msg):\n                 dateformat.format(my_birthday, specifier)\n \n-    def test_r_format_with_non_en_locale(self):\n+    from datetime import datetime\n+    from django.utils import dateformat\n+\n+    def test_y_format_year_before_1000(self):\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n         # Changing the locale doesn't change the \"r\" format.\n         dt = datetime(1979, 7, 8, 22, 00)\n         with translation.override('fr'):\n",
  "django__django-14376": "",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..d38a0b5 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2197,9 +2197,34 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             AuthorWithUniqueNameAndBirthday._meta.constraints = []\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n+    \n+    def test_unique_constraint_with_string_reference(self):\n+        # Test the unique constraint with correct string field references.\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name'], name='name_uq_string')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        # Verify that references_column works correctly with the string field name.\n+        self.assertIs(sql.references_table(table), True)\n+        self.assertIs(sql.references_column(table, 'name'), True)\n \n-    @skipUnlessDBFeature('supports_expression_indexes')\n-    def test_func_unique_constraint(self):\n+    def test_unique_constraint_with_table_reference(self):\n+        # Test the unique constraint with a Table object instead of string.\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name'], name='name_uq_table')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        # Verify that references_column works correctly despite using table reference.\n+        self.assertIs(sql.references_table(table), True)\n+        self.assertIs(sql.references_column(table, 'name'), True)\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n         constraint = UniqueConstraint(Upper('name').desc(), name='func_upper_uq')\n",
  "django__django-14493": "",
  "django__django-14500": "",
  "django__django-14539": "",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..cb0c6ee 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -127,7 +127,33 @@ class BulkUpdateTests(TestCase):\n         with self.assertNumQueries(0):\n             Note.objects.bulk_update([], ['note'])\n \n-    def test_large_batch(self):\n+    def test_bulk_update_returns_count(self):\n+        # Test case to ensure `bulk_update()` returns 0 when no objects are updated.\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+        # Create 2000 Note objects.\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(0, 2000)\n+        ])\n+\n+        # Update all notes and assert the correct count.\n+        notes = list(Note.objects.all())\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_bulk_update_with_duplicates(self):\n+        # Create a Note.\n+        note = Note.objects.create(note='test-note', misc='test')\n+\n+        # Try to update with duplicates in the same batch.\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+\n+        # Try to update with duplicates split into different batches.\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n         Note.objects.bulk_create([\n             Note(note=str(i), misc=str(i))\n             for i in range(0, 2000)\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..55a0dd9 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -315,8 +315,26 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertTrue(formset.is_valid())\n         self.assertEqual([form.cleaned_data for form in formset.forms], [{'votes': 100, 'choice': 'Calexico'}, {}, {}])\n-\n-    def test_formset_validate_max_flag(self):\n+    \n+    def test_non_form_errors_css_class(self):\n+        \"\"\"\n+        Ensures the nonform CSS class is applied to non-form errors in formsets.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '2',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '0',\n+            'choices-0-choice': 'Duplicate',\n+            'choices-1-choice': 'Duplicate',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a choice once.</li></ul>'\n+        )\n         \"\"\"\n         If validate_max is set and max_num is less than TOTAL_FORMS in the\n         data, a ValidationError is raised. MAX_NUM_FORMS in the data is\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..a12a68d 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,35 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_same_clean_initial_and_boundfield_initial(self):\n+        \"\"\"\n+        Ensure that the cleaned value for a field with a callable initial matches\n+        the BoundField's cached initial value.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        cleaned_value = form.cleaned_data['dt']\n+        bf_initial_value = form['dt'].initial\n+        self.assertEqual(cleaned_value, bf_initial_value)\n+\n+    def test_changed_data_uses_boundfield_initial(self):\n+        \"\"\"\n+        Verify that changed_data uses the BoundField's initial value for comparison.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now)\n+\n+        form_same = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n+        self.assertEqual(form_same.changed_data, [])  # No changes, so it should be empty\n+\n+        form_different = DateTimeForm({'dt': '2006-10-25 14:31:00'})\n+        self.assertEqual(form_different.changed_data, ['dt'])  # Time has changed\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..3e11624 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -1,7 +1,8 @@\n from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n-from django.db import IntegrityError\n+from django.db import IntegrityError, models\n+from django.core.checks import Error\n from django.test import TestCase\n \n from .models import (\n@@ -20,7 +21,37 @@ class M2mThroughTests(TestCase):\n         cls.rock = Group.objects.create(name='Rock')\n         cls.roll = Group.objects.create(name='Roll')\n \n-    def test_retrieve_intermediate_items(self):\n+    def test_m2m_through_fields_hashing_with_proxy(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            # second_child is not pertinent to this check but allows model definition\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        # Now we check if the issue is resolved by hashing the ManyToManyRel instance\n+        child_m2m_field = Child._meta.get_field('many_to_many_field')\n+        try:\n+            hash(child_m2m_field.remote_field)\n+            # If no exception, test passes for hashing\n+            self.assertTrue(True)\n+        except TypeError:\n+            self.fail(\"Hashing ManyToManyRel failed due to unhashable through_fields list.\")\n         Membership.objects.create(person=self.jim, group=self.rock)\n         Membership.objects.create(person=self.jane, group=self.rock)\n \n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..d5bbe01 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,4 +1,11 @@\n+\n+import datetime\n import json\n+from django.contrib.contenttypes.models import ContentType\n+from django.test import TestCase, RequestFactory\n+from django.http import JsonResponse\n+\n+from .models import Question, Answer  # assuming these models exist and are imported here\n from contextlib import contextmanager\n \n from django.contrib import admin\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..1218d5b 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -915,7 +915,47 @@ class StateTests(SimpleTestCase):\n         with self.assertRaises(ValueError):\n             project_state.apps\n \n-        # If we include the real app it should succeed\n+        # If the real_apps is passed as a set, it should succeed\n+        project_state = ProjectState(real_apps={'contenttypes'})\n+        project_state.add_model(ModelState.from_model(TestModel))\n+        rendered_state = project_state.apps\n+        self.assertEqual(\n+            len([x for x in rendered_state.get_models() if x._meta.app_label == \"migrations\"]),\n+            1,\n+        )\n+\n+    def test_real_apps_non_set(self):\n+        \"\"\"\n+        Tests ProjectState initialization with a non-set real_apps parameter.\n+        \"\"\"\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n+\n+    def test_real_apps_none(self):\n+        \"\"\"\n+        Ensure no exceptions are raised when real_apps is None.\n+        \"\"\"\n+        try:\n+            ProjectState(real_apps=None)\n+        except Exception as e:\n+            self.fail(f\"ProjectState raised an exception with real_apps=None: {e}\")\n+\n+    def test_real_apps_as_set(self):\n+        \"\"\"\n+        Ensure the `real_apps` is correctly set when passed as a set.\n+        \"\"\"\n+        try:\n+            state = ProjectState(real_apps={'contenttypes'})\n+            self.assertEqual(state.real_apps, {'contenttypes'})\n+        except Exception as e:\n+            self.fail(f\"ProjectState raised an exception with real_apps as a set: {e}\")\n+\n+    def test_real_apps_empty_list(self):\n+        \"\"\"\n+        Ensure the `real_apps` is an empty set when passed an empty list.\n+        \"\"\"\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=[])\n         project_state = ProjectState(real_apps={'contenttypes'})\n         project_state.add_model(ModelState.from_model(TestModel))\n         rendered_state = project_state.apps\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..2f37e51 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -176,6 +176,24 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'django', 'runserver']\n         )\n \n+    @mock.patch('sys._xoptions', {})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_no_args(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_with_args(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+\n     @mock.patch.dict(sys.modules, {'__main__': test_main})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n@@ -185,6 +203,24 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n         )\n \n+    @mock.patch('sys._xoptions', {})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_no_args(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_with_args(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+\n     @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n@@ -194,6 +230,24 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n         )\n \n+    @mock.patch('sys._xoptions', {})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_no_args(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_with_args(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+\n     @mock.patch('__main__.__spec__', None)\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n@@ -203,6 +257,24 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch('sys._xoptions', {})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_no_args(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, __file__, 'runserver']\n+        )\n+\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_with_args(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+\n     @mock.patch('__main__.__spec__', None)\n     @mock.patch('sys.warnoptions', [])\n     def test_exe_fallback(self):\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..9c67dad 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -271,6 +271,31 @@ class MethodDecoratorTests(SimpleTestCase):\n                 self.assertEqual(Test.method.__doc__, 'A method')\n                 self.assertEqual(Test.method.__name__, 'method')\n \n+    from functools import wraps\n+    from django.utils.decorators import method_decorator\n+\n+    def test_method_decorator_preserves_function_attributes(self):\n+        \"\"\"Test method_decorator doesn't remove function attributes like __name__ and __module__.\"\"\"\n+\n+        def sample_decorator(func):\n+            @wraps(func)\n+            def wrapper(*args, **kwargs):\n+                # further processing if needed\n+                return func(*args, **kwargs)\n+            return wrapper\n+        \n+        class SampleClass:\n+            @method_decorator(sample_decorator)\n+            def sample_method(self):\n+                pass\n+\n+        instance = SampleClass()\n+        method = instance.sample_method\n+\n+        # Verify if method_decorator preserves function attributes\n+        self.assertEqual(method.__name__, 'sample_method')\n+        self.assertIsNotNone(method.__module__)\n+\n     def test_new_attribute(self):\n         \"\"\"A decorator that sets a new attribute on the method.\"\"\"\n         def decorate(func):\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..a3ac715 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5132,7 +5132,48 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n \n-    def test_readonly_manytomany_backwards_ref(self):\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields in the default admin site render correct links.\n+        \"\"\"\n+        admin_site = 'admin'\n+        chapter = Chapter.objects.create(\n+            title='Chapter 2',\n+            content='content',\n+            book=Book.objects.create(name='Book 2'),\n+        )\n+        language = Language.objects.create(iso='_41', name='Test Default')\n+        ReadOnlyRelatedField.objects.create(chapter=chapter, language=language)\n+\n+        response = self.client.get(reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(chapter.pk,)))\n+        language_url = reverse(f'{admin_site}:admin_views_language_change', args=(quote(language.pk),))\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_41</a></div>' % language_url,\n+            html=True,\n+        )\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields in a custom admin site render correct links.\n+        \"\"\"\n+        admin_site = 'custom_admin'\n+        chapter = Chapter.objects.create(\n+            title='Chapter 3',\n+            content='content',\n+            book=Book.objects.create(name='Book 3'),\n+        )\n+        language = Language.objects.create(iso='_42', name='Test Custom')\n+        # Add the ReadOnlyRelatedField object to the custom admin site.\n+        ReadOnlyRelatedField.objects.create(chapter=chapter, language=language)\n+\n+        response = self.client.get(reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(chapter.pk,)))\n+        language_url = reverse(f'{admin_site}:admin_views_language_change', args=(quote(language.pk),))\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_42</a></div>' % language_url,\n+            html=True,\n+        )\n         \"\"\"\n         Regression test for #16433 - backwards references for related objects\n         broke if the related field is read-only due to the help_text attribute\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..84c6d95 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,28 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+\n+        # Test hashing equality and inequality\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+        # Test using ModelChoiceIteratorValue as dictionary keys\n+        test_dict = {value_1: 'First', value_2: 'Second'}\n+        self.assertEqual(test_dict[value_1], 'First')\n+        self.assertEqual(test_dict[value_2], 'Second')\n+\n+        # Test using ModelChoiceIteratorValue in a set\n+        value_set = {value_1, value_2}\n+        self.assertIn(value_1, value_set)\n+        self.assertIn(value_2, value_set)\n+\n+        # Ensure replacing an element with an identical value works\n+        value_set.remove(value_1)\n+        value_set.add(ModelChoiceIteratorValue(self.c1.pk, None))\n+        self.assertIn(ModelChoiceIteratorValue(self.c1.pk, None), value_set)\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..f46ad8e 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -790,6 +790,32 @@ class OperationTests(OperationTestBase):\n         rider = Rider.objects.create()\n         pony.riders.add(rider)\n         self.assertEqual(Pony.objects.count(), 2)\n+        self.test_rename_model_with_db_table_noop_extended()\n+\n+    def test_rename_model_with_db_table_noop_extended(self):\n+        app_label = 'test_rmwdbtn_extended'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Horse', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'horse'}),\n+            migrations.CreateModel('Owner', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('horse', models.ForeignKey('%s.Horse' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        \n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Horse', 'Stallion')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Verify renaming with db_table on both forward and backward migrations is a noop.\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0, custom_msg=\"Renaming model should not execute queries.\"):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0, custom_msg=\"Reverting rename model should not execute queries.\"):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n",
  "django__django-15022": "",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex b862331..f85a182 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -173,7 +173,24 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, 'test_id'), expected)\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_without_id(self):\n+        tests = (\n+            # Simple JSON object without an id\n+            ({'key': 'value'}, '<script type=\"application/json\">{\"key\": \"value\"}</script>'),\n+            # JSON array without an id\n+            (['item1', 'item2'], '<script type=\"application/json\">[\"item1\", \"item2\"]</script>'),\n+            # Empty JSON object\n+            ({}, '<script type=\"application/json\">{}</script>'),\n+            # String value without an id\n+            ('simple string', '<script type=\"application/json\">\"simple string\"</script>'),\n+            # Integer value without an id\n+            (123, '<script type=\"application/json\">123</script>'),\n+            # JSON with special characters\n+            ('&<>', '<script type=\"application/json\">\"\\\\u0026\\\\u003C\\\\u003E\"</script>'),\n+        )\n+        for arg, expected in tests:\n+            with self.subTest(arg=arg):\n+                self.assertEqual(json_script(arg), expected)\n         items = (\n             ('http://\u00f6\u00e4\u00fc.com/', 'http://xn--4ca9at.com/'),\n             ('http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/', 'http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/'),\n@@ -276,4 +293,4 @@ class TestUtilsHtml(SimpleTestCase):\n         )\n         for value in tests:\n             with self.subTest(value=value):\n-                self.assertEqual(urlize(value), value)\n+                self.assertEqual(urlize(value), value)\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..44c4ad9 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2827,6 +2827,28 @@ class AutodetectorTests(TestCase):\n             ('0002_custom_name_20380101_1112_squashed_0003_model', 3),\n             ('2_squashed_4', 4),\n         ]\n+        \n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n         for migration_name, expected_number in tests:\n             with self.subTest(migration_name=migration_name):\n                 self.assertEqual(\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..4c1b9ff 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -368,6 +369,21 @@ class BaseTests:\n         tags = [msg.level_tag for msg in storage]\n         self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n \n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'info',\n+        constants.DEBUG: '',\n+        constants.WARNING: '',\n+        constants.ERROR: 'bad',\n+        12: 'custom-level',\n+    })\n+    def test_override_message_tags(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        expected_tags = ['info', '', '', 'bad', 'custom-level', 'success']\n+        self.assertEqual(tags, expected_tags)\n+\n     @override_settings_tags(MESSAGE_TAGS={\n         constants.INFO: 'info',\n         constants.DEBUG: '',\n",
  "django__django-15128": "",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..699c8dd 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1755,6 +1755,13 @@ class ValueTests(TestCase):\n         Time.objects.update(time=Value(datetime.time(1), output_field=TimeField()))\n         self.assertEqual(Time.objects.get().time, datetime.time(1))\n \n+    def test_deconstruct_f_expression(self):\n+        f_expr = F('field_name')\n+        path, args, kwargs = f_expr.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('field_name',))\n+        self.assertEqual(kwargs, {})\n+\n     def test_update_UUIDField_using_Value(self):\n         UUID.objects.create()\n         UUID.objects.update(uuid=Value(uuid.UUID('12345678901234567890123456789012'), output_field=UUIDField()))\n",
  "django__django-15268": "",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..ea5b90d 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1845,6 +1845,9 @@ class ValueTests(TestCase):\n         for value, output_field_type in value_types:\n             with self.subTest(type=type(value)):\n                 expr = Value(value)\n+                # Test that no unnecessary validator is added when max_length is None\n+                if isinstance(value, str):\n+                    self.assertFalse(any(isinstance(v, validators.MaxLengthValidator) for v in expr._resolve_output_field().validators))\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n     def test_resolve_output_field_failure(self):\n@@ -1853,6 +1856,8 @@ class ValueTests(TestCase):\n             Value(object()).output_field\n \n \n+from django.core import validators\n+\n class ExistsTests(TestCase):\n     def test_optimizations(self):\n         with CaptureQueriesContext(connection) as context:\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..aa4fc9c 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -623,8 +623,44 @@ class SchemaTests(TransactionTestCase):\n         self.assertEqual(field_type, connection.features.introspected_field_types['IntegerField'])\n         # Make sure the values were transformed correctly\n         self.assertEqual(Author.objects.extra(where=[\"thing = 1\"]).count(), 2)\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Adding a nullable OneToOneField should not crash on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        # Ensure the added field is nullable\n+        self.assertTrue(columns['note_id'][1][6])\n \n-    def test_add_field_binary(self):\n+    def test_add_field_o2o_nullable_with_data(self):\n+        \"\"\"\n+        Adding a nullable OneToOneField with existing data should not crash on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        \n+        # Create some Author instances\n+        Author.objects.create(name='Author 1')\n+        Author.objects.create(name='Author 2')\n+        \n+        with connection.schema_editor() as editor:\n+            # Now create the Note model and add OneToOneField\n+            editor.create_model(Note)\n+            new_field = OneToOneField(Note, CASCADE, null=True)\n+            new_field.set_attributes_from_name('note')\n+            editor.add_field(Author, new_field)\n+\n+        # Ensure that the field was added correctly even with pre-existing rows\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])\n         \"\"\"\n         Tests binary fields get a sane default (#22851)\n         \"\"\"\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..e9db8bb 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -80,6 +80,15 @@ class BasicFieldTests(SimpleTestCase):\n         f = Foo._meta.get_field('a')\n         self.assertEqual(str(f), 'model_fields.Foo.a')\n \n+    def test_field_hash_immutability_before_and_after_assignment(self):\n+        field = models.CharField(max_length=100)  \n+        initial_hash = hash(field)\n+\n+        class Author(models.Model):\n+            name = field\n+\n+        self.assertEqual(initial_hash, hash(field), \"The hash of the field changed after assignment to a model.\")\n+\n     def test_field_ordering(self):\n         \"\"\"Fields are ordered based on their creation.\"\"\"\n         f1 = models.Field()\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..f8575a8 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -211,6 +211,22 @@ class BulkUpdateTests(TestCase):\n         Number.objects.bulk_update(numbers, ['num'])\n         self.assertCountEqual(Number.objects.filter(num=1), numbers)\n \n+    def test_f_expression_resolved_in_bulk_update(self):\n+        # Create instances of SelfRef with different 'name' values\n+        objs = [SelfRef.objects.create(name=f'name_{i}', c8='original') for i in range(5)]\n+        \n+        # Apply F expression to update c8 with the current value of name\n+        for obj in objs:\n+            obj.c8 = F('name')\n+        \n+        # Perform bulk_update\n+        SelfRef.objects.bulk_update(objs, ['c8'])\n+        \n+        # Assert that c8 fields have been updated to respective 'name' values\n+        for obj in objs:\n+            obj.refresh_from_db()\n+            self.assertEqual(obj.c8, f'name_{obj.id}')\n+\n     def test_booleanfield(self):\n         individuals = [Individual.objects.create(alive=False) for _ in range(10)]\n         for individual in individuals:\n",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..bb0fc66 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1038,6 +1038,25 @@ class AutodetectorTests(TestCase):\n         self.assertOperationAttributes(\n             changes, 'app', 0, 0, model_name='bar', name='foo',\n         )\n+\n+    def test_rename_model_and_field(self):\n+        \"\"\"Test renaming a model and a field simultaneously.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_with_name],\n+            [ModelState('testapp', 'RenamedAuthor', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('renamed_name', models.CharField(max_length=200)),\n+            ])],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n         self.assertEqual(changes['app'][0].operations[0].field.deconstruct(), (\n             'foo',\n             'django.db.models.ForeignKey',\n@@ -1049,6 +1068,25 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n+    def test_rename_model_and_field(self):\n+        \"\"\"Test renaming a model and a field simultaneously.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_with_name],\n+            [ModelState('testapp', 'RenamedAuthor', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('renamed_name', models.CharField(max_length=200)),\n+            ])],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n+\n     def test_rename_model(self):\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n@@ -1056,6 +1094,25 @@ class AutodetectorTests(TestCase):\n             [self.author_renamed_with_book, self.book_with_author_renamed],\n             MigrationQuestioner({\"ask_rename_model\": True}),\n         )\n+\n+    def test_rename_model_and_field(self):\n+        \"\"\"Test renaming a model and a field simultaneously.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_with_name],\n+            [ModelState('testapp', 'RenamedAuthor', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('renamed_name', models.CharField(max_length=200)),\n+            ])],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n         # Right number/type of migrations?\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"RenameModel\"])\n",
  "django__django-15382": "",
  "django__django-15467": "",
  "django__django-15499": "",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..27b7897 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,49 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+from django.core import management\n+from django.test import TestCase\n+from .models import Author, Book\n+\n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"other\"}\n+\n+    def test_natural_key_with_foreign_key_on_non_default_db(self):\n+        \"\"\"\n+        Test that natural keys using foreign keys work correctly when loading\n+        data into a non-default database.\n+        \"\"\"\n+        # Prepare the fixture data\n+        fixture_data = [\n+            {\n+                \"model\": \"fixtures_regress.author\",\n+                \"fields\": {\n+                    \"name\": \"J.R.R. Tolkien\"\n+                }\n+            },\n+            {\n+                \"model\": \"fixtures_regress.book\",\n+                \"fields\": {\n+                    \"title\": \"The Lord of the Rings\",\n+                    \"author\": [\"J.R.R. Tolkien\"]\n+                }\n+            }\n+        ]\n+\n+        # Load the data into the 'other' database\n+        management.call_command(\n+            \"loaddata\",\n+            format='json',\n+            database='other',\n+            verbosity=0,\n+            fixtures=[fixture_data]\n+        )\n+\n+        # Verify the data is loaded correctly\n+        book = Book.objects.using(\"other\").get()\n+        self.assertEqual(book.title, \"The Lord of the Rings\")\n+        self.assertEqual(book.author.name, \"J.R.R. Tolkien\")\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..29eaa25 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -324,6 +324,14 @@ class LookupTests(TestCase):\n             # getting the lookups again should re-cache\n             self.assertIn(\"exactly\", field.get_lookups())\n \n+        # Unregistration should bust the cache.\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        field.get_lookups.cache_clear()\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+        with register_lookup(models.ForeignObject, Exactly):\n+            # getting the lookups again should re-cache\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n \n class BilateralTransformTests(TestCase):\n     def test_bilateral_upper(self):\n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..7a43cfd 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -737,7 +738,35 @@ class ManagerTest(SimpleTestCase):\n         )\n \n \n-class SelectOnSaveTests(TestCase):\n+class ManagerMethodSignatureTests(TestCase):\n+    def test_manager_method_attributes(self):\n+        # Ensure that the method name and docstring are correctly copied\n+        self.assertEqual(Article.objects.get.__doc__, models.QuerySet.get.__doc__)\n+        self.assertEqual(Article.objects.count.__name__, models.QuerySet.count.__name__)\n+\n+    def test_manager_method_signature_bulk_create(self):\n+        # Validate the signature of the bulk_create method\n+        expected_signature = \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\"\n+        actual_signature = str(inspect.signature(Article.objects.bulk_create))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_manager_method_signature_filter(self):\n+        # Additional test to check the signature of another Manager method\n+        expected_signature = \"(*args, **kwargs)\"\n+        actual_signature_filter = str(inspect.signature(Article.objects.filter))\n+        self.assertEqual(actual_signature_filter, expected_signature)\n+\n+    def test_manager_method_signature_delete(self):\n+        # Validate the signature of the delete method\n+        expected_signature = \"()\"\n+        actual_signature_delete = str(inspect.signature(Article.objects.all().delete))\n+        self.assertEqual(actual_signature_delete, expected_signature)\n+\n+    def test_manager_method_signature_update(self):\n+        # Validate the signature of the update method\n+        expected_signature = \"(*args, **kwargs)\"\n+        actual_signature_update = str(inspect.signature(Article.objects.update))\n+        self.assertEqual(actual_signature_update, expected_signature)\n     def test_select_on_save(self):\n         a1 = Article.objects.create(pub_date=datetime.now())\n         with self.assertNumQueries(1):\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..c2cbfd5 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,6 +1,9 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n+from django.utils.translation import gettext_lazy as _\n+from django.utils.formats import get_format\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n \n@@ -74,6 +77,10 @@ class DateTests(TimezoneTestCase):\n \n \n class FunctionTests(SimpleTestCase):\n+    def test_get_format_lazy(self):\n+        # Ensure that get_format can handle lazy translated strings\n+        self.assertEqual(get_format(_(\"DATE_FORMAT\"), lang='en'), \"N j, Y\")\n+\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..bed630d 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,9 +398,25 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+from django.test import TestCase\n+from django.db import models\n+from models import AnotherModel, CustomModel, ProxyCustomModel\n \n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n-class ProxyModelAdminTests(TestCase):\n+class ProxyModelQuerySetTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.proxy_instance = ProxyCustomModel.objects.create(name=\"Example\")\n+        cls.another_instance = AnotherModel.objects.create(custom=cls.proxy_instance)\n+\n+    def test_only_after_select_related_on_proxy(self):\n+        \"\"\"\n+        Test the use of .only() after .select_related() on proxy models.\n+        This replicates the condition of the original issue and should\n+        verify that the problem has been resolved.\n+        \"\"\"\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        instance = qs.first()  # Ensure this does not raise exceptions\n+        self.assertEqual(instance.custom.name, \"Example\")\n     @classmethod\n     def setUpTestData(cls):\n         cls.superuser = AuthUser.objects.create(is_superuser=True, is_staff=True)\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..809730b 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,6 +157,28 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_postgres_option_before_dbname(self):\n+        \"\"\"Test that PostgreSQL options are placed before the database name.\"\"\"\n+        # Given command options for psql\n+        options = [\"-c\", \"SELECT 1;\"]\n+        # Expected command should place options before the database name\n+        expected_command = [\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"]\n+\n+        # Execute the test\n+        result_command, _ = self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, options)\n+        self.assertEqual(result_command, expected_command)\n+\n+    def test_postgres_multiple_options(self):\n+        \"\"\"Test multiple PostgreSQL options before database name\"\"\"\n+        # Given multiple command options for psql\n+        options = [\"-c\", \"SELECT 1;\", \"-f\", \"some_file.sql\"]\n+        # Expected command should place all options before the database name\n+        expected_command = [\"psql\", \"-c\", \"SELECT 1;\", \"-f\", \"some_file.sql\", \"dbname\"]\n+\n+        # Execute the test\n+        result_command, _ = self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, options)\n+        self.assertEqual(result_command, expected_command)\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..f1c8233 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -73,8 +73,30 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, 20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n-\n-    def test_force_grouping(self):\n+    \n+    def test_decimal_precision(self):\n+        # Test case from the original issue\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\"\n+        )\n+        # Additional test cases for Decimal with no precision loss\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.00000000000000000012345678901234567890\"), 40),\n+            \"0.00000000000000000012345678901234567890\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"12345678901234567890.12345678901234567890\"), 20),\n+            \"12345678901234567890.12345678901234567890\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"-0.000000000123456789\"), 18),\n+            \"-0.000000000123456789\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"1.23456789012345678901234567890\"), 30),\n+            \"1.23456789012345678901234567890\"\n+        )\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n             self.assertEqual(floatformat(66666.666, \"1g\"), \"66,666.7\")\n",
  "django__django-15930": "",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..a46b35c 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -556,7 +557,31 @@ class TestFixtures(TestCase):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n     @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, \"fixtures\")])\n-    def test_fixture_dirs_with_default_fixture_path(self):\n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures\"])\n+    def test_fixture_dirs_with_default_fixture_path_as_pathlib(self):\n+        \"\"\"\n+        settings.FIXTURE_DIRS cannot contain a default fixtures directory\n+        for application (app/fixtures) in order to avoid repeated fixture loading,\n+        even when using Path instances.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a default fixture directory for the '%s' app \"\n+            \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"), \"fixtures_regress\")\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n+\n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures_1\", Path(_cur_dir) / \"fixtures_2\"])\n+    def test_loaddata_with_valid_pathlib_fixture_dirs(self):\n+        \"\"\"\n+        Ensure loaddata works when FIXTURE_DIRS contains valid Path instances.\n+        \"\"\"\n+        management.call_command(\n+            \"loaddata\",\n+            \"absolute.json\",\n+            verbosity=0,\n+        )\n         \"\"\"\n         settings.FIXTURE_DIRS cannot contain a default fixtures directory\n         for application (app/fixtures) in order to avoid repeated fixture loading.\n",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..29638e8 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,30 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..e2b1de9 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,24 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n+        \n+    def test_resolve_output_field_with_mod(self):\n+        tests = [\n+            (IntegerField, DecimalField, DecimalField),\n+            (DecimalField, IntegerField, DecimalField),\n+            (FloatField, DecimalField, FloatField),\n+            (DecimalField, FloatField, FloatField),\n+        ]\n+        connector = Combinable.MOD\n+        for lhs, rhs, combined in tests:\n+            with self.subTest(lhs=lhs, rhs=rhs, combined=combined):\n+                expr = CombinedExpression(\n+                    Expression(lhs()),\n+                    connector,\n+                    Expression(rhs()),\n+                )\n+                self.assertIsInstance(expr.output_field, combined)\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..706db68 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,10 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError, connection, models\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from django.urls import reverse\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +404,52 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity_for_transactions(self):\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..63d1c98 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,7 +7,8 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory\n from django.test import SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n@@ -119,7 +121,28 @@ class ViewTests(SimpleTestCase):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n-    def test_base_view_class_is_sync(self):\n+    def test_http_method_not_allowed_responds_correctly(self):\n+        \"\"\"\n+        Test that the HttpResponseNotAllowed response is correctly returned\n+        by the async and sync view handlers and verifies the fix.\n+        \"\"\"\n+        request_factory = RequestFactory()\n+        tests = [\n+            (self.SyncView, False),\n+            (self.AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.get(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n         sync.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..42652f3 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,4 +1,6 @@\n+\n import datetime\n+import urllib.parse\n import re\n from unittest import mock\n \n@@ -25,6 +27,7 @@ from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n+from django.urls import reverse\n \n from .models.custom_user import (\n     CustomUser,\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..d5bffa7 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,7 +1600,21 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n-    def test_runner_hostname(self):\n+    def test_runserver_zero_ip_addr(self):\n+        self.output = StringIO()\n+        with mock.patch('django.core.management.commands.runserver.run'), \\\n+             mock.patch('django.core.management.base.BaseCommand.check_migrations'):\n+            call_command(\n+                'runserver',\n+                addrport='0:8000',\n+                use_reloader=False,\n+                skip_checks=True,\n+                stdout=self.output,\n+            )\n+            self.assertIn(\n+                \"Starting development server at http://0.0.0.0:8000/\",\n+                self.output.getvalue(),\n+            )\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n \n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..953461c 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,9 +507,34 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+from django.contrib.sitemaps import Sitemap\n+from django.urls import path\n+from django.test import TestCase\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n \n-# RemovedInDjango50Warning\n-class DeprecatedTests(SitemapTestsBase):\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class TestSitemapsNoItems(TestCase):\n+    def setUp(self):\n+        self.sitemap_paths = {\n+            \"callable-lastmod-no-items\": CallableLastmodNoItemsSitemap,\n+        }\n+\n+    def test_callable_sitemod_no_items(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n     @override_settings(\n         TEMPLATES=[\n             {\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..7e99864 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,10 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..5f5fca2 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,6 @@\n+\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n+\n import datetime\n import re\n import urllib.parse\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..692c957 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,6 +161,22 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_aware_datetime(self):\n+        now = timezone.now()\n+        aware_past = timezone.make_aware(datetime.datetime(2020, 1, 1), timezone=timezone.get_default_timezone())\n+        self.assertEqual(timesince(aware_past, now), f\"{now.year - 2020}\\xa0years\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_mixed_aware_and_naive_datetime(self):\n+        now = timezone.now()\n+        naive_past = datetime.datetime(2020, 1, 1)\n+        # This should raise a TypeError because you can't mix naive and aware datetimes\n+        with self.assertRaises(TypeError):\n+            timesince(naive_past, now)\n+\n     def test_naive_datetime_with_tzinfo_attribute(self):\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..3ef126b 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -470,7 +470,38 @@ class CommandRunTests(AdminScriptTestCase):\n \n \n class UtilsTests(SimpleTestCase):\n-    def test_no_existent_external_program(self):\n+    def test_subparser_error_formatting(self):\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser\", \"foo\", \"twelve\"])\n+        self.maxDiff = None\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser foo: error: argument bar: invalid int value: 'twelve'\",\n+        )\n+\n+    def test_subparser_missing_argument(self):\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser\", \"foo\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertIn(\n+            \"manage.py subparser foo: error: the following arguments are required: bar\",\n+            err_lines,\n+        )\n+\n+    def test_subparser_non_django_error_formatting(self):\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+        out, err = self.run_manage([\"subparser_vanilla\", \"foo\", \"seven\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser_vanilla foo: error: argument bar: invalid int value: 'seven'\",\n+        )\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n         with self.assertRaisesMessage(CommandError, msg):\n             popen_wrapper([\"a_42_command_that_doesnt_exist_42\"])\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..0cc4821 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -104,6 +104,15 @@ class FunctionTests(SimpleTestCase):\n             # Invalid suffix.\n             self.assertEqual(floatformat(66666.666, \"u2\"), \"66666.666\")\n \n+import unittest\n+from decimal import Decimal\n+from django.template.defaultfilters import floatformat\n+\n+class FloatFormatTests(unittest.TestCase):\n+    def test_zero_string(self):\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+\n     def test_zero_values(self):\n         self.assertEqual(floatformat(0, 6), \"0.000000\")\n         self.assertEqual(floatformat(0, 7), \"0.0000000\")\n",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..f5bcec6 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,8 +1018,37 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n+\n+    def test_deconstruction_random_callable_storage(self):\n+        \"\"\"\n+        Test that a callable returning different storages includes the original\n+        callable when deconstructed.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"random_callable_storage\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_storage)\n+\n+    def test_deconstruction_evaluation_consistency(self):\n+        \"\"\"\n+        Ensure the deconstruction handles evaluated storage consistently, whether\n+        or not it returns default_storage.\n+        \"\"\"\n+        obj1 = Storage()\n+        obj2 = Storage()\n+\n+        *_, kwargs1 = obj1._meta.get_field(\"storage_callable_class\").deconstruct()\n+        *_, kwargs2 = obj2._meta.get_field(\"storage_callable_class\").deconstruct()\n \n-# Tests for a race condition on file saving (#4948).\n+        self.assertEqual(kwargs1, kwargs2)\n # This is written in such a way that it'll always pass on platforms\n # without threading.\n \n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..17a1414 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n@@ -33,6 +36,36 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n+    def test_submit_row_save_as_new_permissions(self):\n+        \"\"\"\n+        Test the \"show_save_as_new\" behavior based on user permissions.\n+        \"\"\"\n+        # User without add or change permissions\n+        no_permission_user = User.objects.create_user(\n+            username=\"no_perm_user\", password=\"secret\", is_staff=True\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n+        )\n+        request.user = no_permission_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # User with only add permission\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n     def test_override_show_save_and_add_another(self):\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..2af4941 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -109,7 +109,41 @@ class BaseConstraintTests(SimpleTestCase):\n \n \n class CheckConstraintTests(TestCase):\n-    def test_eq(self):\n+    def test_custom_violation_error_code(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price_check\",\n+            violation_error_code=\"price_error\"\n+        )\n+        invalid_product = Product(price=10, discounted_price=42)\n+        msg = \"Constraint \u201cprice_check\u201d is violated.\"\n+\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"price_error\")\n+\n+        constraint = models.UniqueConstraint(\n+            fields=[\"name\", \"color\"],\n+            name=\"unique_name_color\",\n+            violation_error_code=\"uniq_name_color_code\"\n+        )\n+        non_unique_product = UniqueConstraintProduct(\n+            name=self.p1.name, color=self.p1.color\n+        )\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(UniqueConstraintProduct, non_unique_product)\n+        self.assertEqual(cm.exception.code, \"uniq_name_color_code\")\n+\n+        constraint = ExclusionConstraint(\n+            name=\"exclude_datespan\",\n+            expressions=[(F(\"datespan\"), RangeOperators.OVERLAPS)],\n+            violation_error_code=\"exclude_code\"\n+        )\n+        date_span_obj = RangesModel(ints=(20, 50))\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(RangesModel, date_span_obj)\n+        self.assertEqual(cm.exception.code, \"exclude_code\")\n         check1 = models.Q(price__gt=models.F(\"discounted_price\"))\n         check2 = models.Q(price__lt=models.F(\"discounted_price\"))\n         self.assertEqual(\n@@ -289,7 +323,41 @@ class UniqueConstraintTests(TestCase):\n         cls.p1 = UniqueConstraintProduct.objects.create(name=\"p1\", color=\"red\")\n         cls.p2 = UniqueConstraintProduct.objects.create(name=\"p2\")\n \n-    def test_eq(self):\n+    def test_custom_violation_error_code(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price_check\",\n+            violation_error_code=\"price_error\"\n+        )\n+        invalid_product = Product(price=10, discounted_price=42)\n+        msg = \"Constraint \u201cprice_check\u201d is violated.\"\n+\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"price_error\")\n+\n+        constraint = models.UniqueConstraint(\n+            fields=[\"name\", \"color\"],\n+            name=\"unique_name_color\",\n+            violation_error_code=\"uniq_name_color_code\"\n+        )\n+        non_unique_product = UniqueConstraintProduct(\n+            name=self.p1.name, color=self.p1.color\n+        )\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(UniqueConstraintProduct, non_unique_product)\n+        self.assertEqual(cm.exception.code, \"uniq_name_color_code\")\n+\n+        constraint = ExclusionConstraint(\n+            name=\"exclude_datespan\",\n+            expressions=[(F(\"datespan\"), RangeOperators.OVERLAPS)],\n+            violation_error_code=\"exclude_code\"\n+        )\n+        date_span_obj = RangesModel(ints=(20, 50))\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(RangesModel, date_span_obj)\n+        self.assertEqual(cm.exception.code, \"exclude_code\")\n         self.assertEqual(\n             models.UniqueConstraint(fields=[\"foo\", \"bar\"], name=\"unique\"),\n             models.UniqueConstraint(fields=[\"foo\", \"bar\"], name=\"unique\"),\n",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..fc31ca8 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1476,6 +1476,17 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n \n         formset = ChoiceFormFormset(initial=[{\"choice\": \"Zero\", \"votes\": \"1\"}])\n+\n+    def test_formset_with_index_none(self):\n+        from django import forms\n+        MyFormSet = forms.formset_factory(\n+            form=forms.Form,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+\n+        my_formset = MyFormSet()\n+        self.assertNotIn(\"DELETE\", my_formset.empty_form.fields)\n         self.assertEqual(len(formset), 3)\n         self.assertIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..27eae99 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8463,6 +8463,31 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_on_redirect(self):\n+        # Create a superuser to access the admin site\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"admin_pass\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        \n+        # Generate a known URL and attempt to access it without a trailing slash\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        url_without_slash = f\"{known_url[:-1]}?page=2&sort=asc\"\n+        \n+        response = self.client.get(url_without_slash)\n+        \n+        # Expect the URL to retain query string after redirection\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?page=2&sort=asc\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_script_name(self):\n         superuser = User.objects.create_user(\n@@ -8499,6 +8524,31 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_catch_all_view_preserves_query_string_on_redirect(self):\n+        # Create a superuser to access the admin site\n+        superuser = User.objects.create_user(\n+            username=\"admin\",\n+            password=\"admin_pass\",\n+            email=\"admin@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        \n+        # Generate a known URL and attempt to access it without a trailing slash\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        url_without_slash = f\"{known_url[:-1]}?page=2&sort=asc\"\n+        \n+        response = self.client.get(url_without_slash)\n+        \n+        # Expect the URL to retain query string after redirection\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?page=2&sort=asc\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..84fe8cb 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -255,6 +255,8 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n@@ -263,7 +265,22 @@ class FileResponseTests(SimpleTestCase):\n                 self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n                 self.assertFalse(response.has_header(\"Content-Encoding\"))\n \n-    def test_unicode_attachment(self):\n+    def test_mime_type_guessing_for_br_and_Z(self):\n+        \"\"\"\n+        Ensure FileResponse correctly guesses MIME types for '.br' and '.Z' extensions.\n+        \"\"\"\n+        test_tuples = (\n+            (\".br\", \"application/x-brotli\"),\n+            (\".Z\", \"application/x-compress\"),\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         response = FileResponse(\n             ContentFile(b\"binary content\", name=\"\u795d\u60a8\u5e73\u5b89.odt\"),\n             as_attachment=True,\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..2374413 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -141,17 +141,23 @@ class ModelAdminTests(TestCase):\n         class EmployeeProfileAdmin(ModelAdmin):\n             list_filter = [\n                 \"employee__employeeinfo__description\",\n-                \"employee__department__code\",\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n             ]\n \n-        ma = EmployeeProfileAdmin(EmployeeProfile, self.site)\n-        # Reverse OneToOneField\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n         self.assertIs(\n-            ma.lookup_allowed(\"employee__employeeinfo__description\", \"test_value\"), True\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n         )\n-        # OneToOneField and ForeignKey\n         self.assertIs(\n-            ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name__exact\", \"test_value\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name__icontains\", \"test_value\"), True\n         )\n \n     def test_field_arguments(self):\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..a169ffd 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,48 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_correct_import_ordering_with_multiple_imports(self):\n+        \"\"\"\n+        Test that multiple imports are correctly ordered.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.RunPython(lambda apps, schema_editor: None),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        expected_imports = (\n+            \"import datetime\\nimport time\\n\"\n+            \"from django.db import migrations\\n\"\n+        )\n+        # Assert that 'import ...' precedes 'from ... import ...'\n+        self.assertIn(expected_imports, output)\n+\n+    def test_import_ordering_with_no_models_import(self):\n+        \"\"\"\n+        Test that import ordering works even if 'models' is not used.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.RunPython(lambda apps, schema_editor: None),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # This test should ensure that models is not added if not needed\n+        expected_imports = (\n+            \"from django.db import migrations\\n\"\n+        )\n+        self.assertIn(expected_imports, output)\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..96fff9b 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -338,6 +338,28 @@ class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n     PersonModel = PersonWithHeight\n \n \n+@skipIf(Image is None, \"Pillow is required to test ImageField\")\n+class ImageFieldSignalConnectionTests(TestCase):\n+    \"\"\"\n+    Tests to ensure post_init signal is not connected when not needed.\n+    \"\"\"\n+    def test_post_init_not_connected_without_dimensions(self):\n+        # ImageField without width_field and height_field should not connect post_init.\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_connected_with_dimensions(self):\n+        # ImageField with either width_field or height_field should connect post_init.\n+        person_with_dimensions_id = id(PersonWithHeight)\n+        self.assertIn(\n+            person_with_dimensions_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n+\n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldDimensionsFirstTests(ImageFieldTwoDimensionsTests):\n     \"\"\"\n",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..d449c3f 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1157,4 +1157,44 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n+        \n+    def test_multiple_add_remove_index(self):\n+        # Test if multiple add/remove index pairs are optimized away.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"speed\"], name=\"idx_pony_speed\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_speed\"),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"height\"], name=\"idx_pony_height\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_height\"),\n+            ],\n+            [],\n+        )\n+\n+    def test_non_consecutive_add_remove_mix(self):\n+        # Test if non-consecutive add/remove operations where some can't be reduced are not all optimized away.\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"strength\"], name=\"idx_pony_strength\"\n+                    ),\n+                ),\n+                migrations.AddField(\"Pony\", \"color\", models.CharField(max_length=50)),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_strength\"),\n+            ],\n+            [\n+                migrations.AddField(\"Pony\", \"color\", models.CharField(max_length=50)),\n+            ],\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..7d5994a 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -798,14 +798,25 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[1]' is not a callable, an attribute \"\n-                \"of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an \"\n+                \"attribute of 'admin_checks.Song'.\",\n                 obj=SongAdmin,\n                 id=\"admin.E035\",\n             )\n         ]\n         self.assertEqual(errors, expected)\n \n+    def test_callables_valid_as_readonly_fields(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = [\"some_callable_method\"]\n+\n+            def some_callable_method(self, obj):\n+                return \"Hello, world!\"\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        self.assertEqual(errors, [])\n+\n     def test_nonexistent_field_on_inline(self):\n         class CityInline(admin.TabularInline):\n             model = City\n@@ -814,14 +825,34 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = CityInline(State, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[0]' is not a callable, an attribute \"\n-                \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', \"\n+                \"which is not a callable, an attribute of 'CityInline', or an \"\n+                \"attribute of 'admin_checks.City'.\",\n                 obj=CityInline,\n                 id=\"admin.E035\",\n             )\n         ]\n         self.assertEqual(errors, expected)\n \n+    def test_callable_and_nonexistent_mix(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = [\"some_callable_method\", \"i_dont_exist\"]\n+\n+            def some_callable_method(self, obj):\n+                return \"Test Callable\"\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'i_dont_exist', \"\n+                \"which is not a callable, an attribute of 'SongAdmin', or an \"\n+                \"attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n     def test_readonly_fields_not_list_or_tuple(self):\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = \"test\"\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..7d25296 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -54,7 +55,27 @@ class XorLookupsTests(TestCase):\n             [self.numbers[0]],\n         )\n \n-    def test_pk_q(self):\n+    def test_multiple_xor_middle_arguments_true(self):\n+        # This test checks the parity of multiple XORs.\n+        # num >= 1 and num >= 3 are true, num >= 5 is false.\n+        qs = Number.objects.filter(Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5))\n+        self.assertCountEqual(qs, self.numbers[1:5])\n+\n+    def test_multiple_xor_last_argument_true(self):\n+        # Testing a case where the last argument is true, ensuring odd count.\n+        # num >= 1, num >= 3, num >= 5, and num >= 7 are true, but num >= 9 is false.\n+        qs = Number.objects.filter(\n+            Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5) ^ Q(num__gte=7) ^ Q(num__gte=9)\n+        )\n+        self.assertCountEqual(qs, self.numbers[1:3] + self.numbers[5:7] + self.numbers[9:])\n+\n+    def test_multiple_xor_all_arguments_true(self):\n+        # All conditions are true, testing an even number of truths resulting in false.\n+        # num >= 0, num >= 1, num >= 2, num >= 3, num >= 4 are true and even in count.\n+        qs = Number.objects.filter(\n+            Q(num__gte=0) ^ Q(num__gte=1) ^ Q(num__gte=2) ^ Q(num__gte=3) ^ Q(num__gte=4)\n+        )\n+        self.assertCountEqual(qs, [])\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk=self.numbers[0].pk) ^ Q(pk=self.numbers[1].pk)),\n             self.numbers[:2],\n@@ -64,4 +85,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..ebb62f8 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,7 +641,29 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n-    def test_failing_migration(self):\n+    def test_makemigrations_respects_model_app_label(self):\n+        \"\"\"\n+        Test that makemigrations calls allow_migrate with correct (app_label, model_name) pairs.\n+        \"\"\"\n+        from django.test.utils import override_settings\n+        from .routers import TestRouter\n+\n+        @override_settings(INSTALLED_APPS=['migrations', 'migrations2'])\n+        def inner_test():\n+            with mock.patch.object(TestRouter, 'allow_migrate', return_value=True) as allow_migrate:\n+                call_command('makemigrations', 'migrations', verbosity=0)\n+\n+            allow_migrate.assert_any_call('default', 'migrations', model_name='UnicodeModel')\n+            allow_migrate.assert_any_call('default', 'migrations2', model_name='AnotherModel')\n+\n+            for mock_call in allow_migrate.mock_calls:\n+                _, call_args, call_kwargs = mock_call \n+                connection_alias, app_label = call_args\n+                self.assertIn(connection_alias, ['default', 'other'])\n+                # Assert it only passes valid app_label/model_name\n+                apps.get_app_config(app_label).get_model(call_kwargs['model_name'])\n+\n+        inner_test()\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n \n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..579aeb4 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -290,7 +290,39 @@ class PaginationTests(SimpleTestCase):\n \n     def test_get_page_empty_object_list_and_allow_empty_first_page_false(self):\n         \"\"\"\n-        Paginator.get_page() raises EmptyPage if allow_empty_first_page=False\n+\n+import unittest\n+from django.core.paginator import Paginator, EmptyPage\n+\n+class PaginatorIterationTests(unittest.TestCase):\n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_empty_paginator(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_single_page(self):\n+        paginator = Paginator([1], 2)\n+        page_iterator = iter(paginator)\n+        with self.subTest(page=1):\n+            self.assertEqual([1], list(next(page_iterator)))\n+\n+    def test_large_paginator(self):\n+        paginator = Paginator(range(1, 101), 10)\n+        page_iterator = iter(paginator)\n+        for i in range(10):\n+            start = i * 10 + 1\n+            end = start + 10\n+            expected = list(range(start, end))\n+            with self.subTest(page=i+1):\n+                self.assertEqual(expected, list(next(page_iterator)))\n         and object_list is empty.\n         \"\"\"\n         paginator = Paginator([], 2, allow_empty_first_page=False)\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..69fcdc8 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,35 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    # Original test\n+    _, bins, _ = plt.hist(np.random.rand(10), bins='auto', range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_with_specific_bins():\n+    # Test with a specific bin number\n+    data = np.random.rand(100)\n+    _, bins, _ = plt.hist(data, bins=5, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_with_weights():\n+    # Test with weights and density\n+    data = np.random.rand(50)\n+    weights = np.random.rand(50)\n+    _, bins, _ = plt.hist(data, bins=10, range=(0, 1), density=True, weights=weights)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_and_density_norm():\n+    # Test the deprecated normed parameter\n+    data = np.random.rand(100)\n+    with np.testing.assert_raises(ValueError):\n+        plt.hist(data, bins=10, range=(0, 1), density=True, normed=True)\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6395,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..77c4fb2 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -918,7 +918,16 @@ def test_hexbin_log():\n     plt.colorbar(h)\n \n \n-def test_inverted_limits():\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+def test_invert_log_scale_axis_using_limits():\n+    # Test for inverting log scale axis using limits\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1)\n+    plt.close()\n     # Test gh:1553\n     # Calling invert_xaxis prior to plotting should not disable autoscaling\n     # while still maintaining the inverted direction\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..d3f33ca 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6950,6 +6950,65 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[0].plot([1, 2], [1, 2], c=color.reshape(-1))\n     axs[1].scatter([1, 2], [1, 2], c=color.reshape(-1))\n     axs[2].step([1, 2], [1, 2], c=color.reshape(-1))\n+\n+\n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    axs = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    axs = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+\n+def test_shared_axes_visibility_consistency():\n+    fig, axs = plt.subplots(2, 2, sharex=True, sharey=True)\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.cos(x)\n+\n+    for ax in axs.flatten():\n+        ax.plot(x, y)\n+\n+    # Clear all axes and re-plot\n+    for ax in axs.flatten():\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+    # Check if all tick labels on shared axes are consistently hidden\n+    for i, ax in enumerate(axs.flat):\n+        if i != 3:  # Last subplot should have visible ticks\n+            assert all(label.get_text() == \"\" for label in ax.get_xticklabels()), \"Tick labels should be hidden\"\n+            assert all(label.get_text() == \"\" for label in ax.get_yticklabels()), \"Tick labels should be hidden\"\n+\n+\n+def test_shared_axes_no_extra_ticks():\n+    # Setup figure with shared x and y axes\n+    fig, axs = plt.subplots(2, 2, sharex=True, sharey=True)\n+\n+    x = np.linspace(0, 10, 100)\n+    y = np.sin(x)\n+\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    # After clear, check that 'top' and 'right' ticks are not added\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+        assert not any(tick.label1On for tick in ax.xaxis.get_major_ticks() if not ax.isLastRow()), \"Unexpected top ticks\"\n+        assert not any(tick.label1On for tick in ax.yaxis.get_major_ticks() if not ax.isLastCol()), \"Unexpected right ticks\"\n     axs[3].hist(np.arange(10), color=color.reshape(-1))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape(-1))\n     # plot with 2D-color:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..190c8ca 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -311,4 +311,25 @@ def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Test that no deprecation warning is emitted when empty data is passed\n+    to an axis with categorical units.\n+    \"\"\"\n+    import warnings\n+    import matplotlib.pyplot as plt\n+\n+    with warnings.catch_warnings(record=True) as w:\n+        # Ensure warnings are triggered\n+        warnings.simplefilter(\"always\")\n+        \n+        f, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.plot([], [])\n+\n+        # Verify no deprecation warning is present\n+        for warning in w:\n+            msg = str(warning.message)\n+            assert \"MatplotlibDeprecationWarning\" not in msg, f\"Unexpected deprecation warning: {msg}\"\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..bd8e181 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -918,6 +918,31 @@ def test_proportional_colorbars():\n                                      extend=extends[i])\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n+def test_colorbar_extreme_edges():\n+    import matplotlib as mpl\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    from matplotlib.colors import from_levels_and_colors\n+    \n+    cmap = mpl.cm.viridis\n+    bounds = np.arange(10)\n+    nb_colors = len(bounds) + 1\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = from_levels_and_colors(bounds, colors, extend='both')\n+    \n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = mpl.colorbar.ColorbarBase(ax, cmap=cmap, norm=norm, orientation='horizontal', drawedges=True)\n+    \n+    # Check the number of segments. There should be `len(bounds)+1` segments for the internal\n+    # and two additional for the 'both' extensions.\n+    expected_number_of_segments = len(bounds) + 2 \n+    actual_number_of_segments = len(cbar.dividers.get_segments())\n+    assert actual_number_of_segments == expected_number_of_segments, f\"Expected {expected_number_of_segments} edge segments, found {actual_number_of_segments}.\"\n+    \n+    # Verify the edges positions visually/structurally or leave comments for manual inspection\n+    # For more robust testing, you can check segment positions if accessible.\n+\n \n def test_negative_boundarynorm():\n     fig, ax = plt.subplots(figsize=(1, 3))\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..a85ef07 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,13 +490,29 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+from matplotlib import get_backend\n+from matplotlib.testing.decorators import check_figures_equal\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n \n \n-def test_rcparams_reset_after_fail():\n+def test_get_backend_does_not_clear_figures_in_rc_context():\n+    # Ensure that getting the backend does not clear figures created within an rc_context\n+    original_fig1 = plt.figure()\n+    with plt.rc_context():\n+        fig2 = plt.figure()\n+        \n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    assert before == after, f'Figures before: {before}, Figures after: {after}'\n+    plt.close('all')  # Cleanup after the test\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n     # global rc parameters were left in a modified state.\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..89d1a62 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -12,8 +12,8 @@ from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n-\n import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n import numpy as np\n \n \n",
  "matplotlib__matplotlib-23412": "",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..17fd616 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2863,6 +2863,23 @@ def test_stackplot():\n     data = {\"x\": x, \"y1\": y1, \"y2\": y2, \"y3\": y3}\n     fig, ax = plt.subplots()\n     ax.stackplot(\"x\", \"y1\", \"y2\", \"y3\", data=data)\n+\n+    # Test: stackplot with CN color aliases\n+    fig, ax = plt.subplots()\n+    ax.plot([1, 2, 3], [1, 2, 3], color='C0')\n+    ax.add_patch(Rectangle((1, 1), 0.5, 0.5, color='C1'))\n+    ax.stackplot(\"x\", \"y1\", \"y2\", \"y3\", data={\"x\": [1, 2, 3], \"y1\": [1, 1.5, 2], \"y2\": [1, 2, 3], \"y3\": [3, 2, 1]}, colors=['C2', 'C3', 'C4'])\n+    plt.close(fig)\n+\n+    # Test: cycler state post stackplot\n+    fig, ax = plt.subplots()\n+    ax.plot([1, 2, 3], [1, 2, 3], color='C0')\n+    ax.add_patch(Rectangle((1, 1), 0.5, 0.5, color='C1'))\n+    initial_cycler = ax._get_patches_for_fill.prop_cycler\n+    ax.stackplot([1, 2, 3], [[1, 1, 1], [2, 2, 2], [3, 3, 3]], colors=['C2', 'C3', 'C4'])\n+    # Assert cycler has not been modified by stackplot\n+    assert initial_cycler == ax._get_patches_for_fill.prop_cycler\n+    plt.close(fig)\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..829b21e 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -576,7 +576,60 @@ def test_svg_font_string(font_str, include_generic):\n         rest = rest + [generic]\n     plt.rcParams[f\"font.{generic}\"] = rest\n     plt.rcParams[\"font.size\"] = size\n-    plt.rcParams[\"svg.fonttype\"] = \"none\"\n+def test_annotationbbox_gid_multiple():\n+    # Test multiple AnnotationBbox objects with different gids\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+\n+    positions = [(0.3, 0.55), (0.6, 0.75)]\n+    gids = ['test_gid_1', 'test_gid_2']\n+\n+    for pos, gid in zip(positions, gids):\n+        imagebox = OffsetImage(arr_img, zoom=0.1)\n+        imagebox.image.axes = ax\n+\n+        ab = AnnotationBbox(imagebox, pos,\n+                            xybox=(120., -80.),\n+                            xycoords='data',\n+                            boxcoords=\"offset points\",\n+                            pad=0.5,\n+                            arrowprops=dict(\n+                                arrowstyle=\"->\",\n+                                connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                            )\n+        ab.set_gid(gid)\n+        ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    for gid in gids:\n+        expected = f'<g id=\"{gid}\">'\n+        assert expected in buf\n+\n+def test_annotationbbox_gid_no_arrowprops():\n+    # Test AnnotationBbox without arrowprops set\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, (0.3, 0.55),\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5)\n+    ab.set_gid('no_arrowprops')\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"no_arrowprops\">'\n+    assert expected in buf\n \n     fig, ax = plt.subplots()\n     if generic == \"sans-serif\":\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..af86e9b 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,19 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import numpy as np\n+import pytest\n+import matplotlib as mpl\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+\n+@pytest.mark.parametrize('dtype', [np.uint8, int, np.float16, float])\n+def test_colormap_no_deprecation_warning(dtype):\n+    cm = mpl.colormaps['viridis']\n+    result = cm(dtype(0))\n+    assert result is not None\n+    assert isinstance(result, tuple)\n+    assert len(result) == 4  # Ensure RGBA output\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..6df757c 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -679,6 +679,33 @@ class TestSpectral:\n                              pad_to=self.pad_to_density,\n                              sides=self.sides,\n                              window=np.ones(self.NFFT_density_real))\n+\n+    def test_psd_window_flattop(self):\n+        # Test case for the flattop window\n+        if self.NFFT_density is None:\n+            return\n+        ydata = np.arange(self.NFFT_density)\n+        windowVals = signal.windows.flattop(self.NFFT_density_real)\n+        ycontrol = ydata * windowVals\n+        ydata = np.tile(ydata, (20, 1)).flatten()\n+        ycontrol = np.tile(ycontrol, (20, 1)).flatten()\n+        spec_c, fsp_c = mlab.psd(x=ycontrol,\n+                                 NFFT=self.NFFT_density,\n+                                 Fs=self.Fs,\n+                                 noverlap=0,\n+                                 sides=self.sides,\n+                                 window=windowVals)\n+        spec_c *= len(ycontrol)/(windowVals**2).sum()\n+        \n+        # Calculate the correct spectrum using explicit formula\n+        spec_a, fsp_a = mlab.psd(x=ycontrol,\n+                                 NFFT=self.NFFT_density,\n+                                 Fs=self.Fs,\n+                                 noverlap=0,\n+                                 sides=self.sides,\n+                                 window=windowVals)\n+        \n+        assert_allclose(spec_c, spec_a, atol=1e-08)\n         assert_allclose(fsp, freqs, atol=1e-06)\n         assert spec.shape == freqs.shape\n \n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..aaaad60 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,29 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..720663f 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,8 +1,8 @@\n+\n from io import BytesIO\n import ast\n import pickle\n-\n-import numpy as np\n+import pickletools\n import pytest\n \n import matplotlib as mpl\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..5b6c1bc 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,36 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pickle\n+from io import BytesIO\n \n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Aligning labels should not interfere with pickling\n+    fig.align_labels()\n+\n+    # Attempt to pickle\n+    fig_buffer = BytesIO()\n+    pickle.dump(fig, fig_buffer, protocol=pickle.HIGHEST_PROTOCOL)\n+    fig_buffer.seek(0)\n+\n+    # Load the figure back\n+    loaded_fig = pickle.load(fig_buffer)\n+    assert loaded_fig is not None\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..f4b7152 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -992,6 +992,83 @@ def test_hexbin_linear():\n               reduce_C_function=np.sum)\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_with_C_param(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_equal_0_with_C_param(fig_test, fig_ref):\n+    datapoints = [\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter, mincnt=0\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=0,\n+    )\n+    ax_ref.set_facecolor(\"white\")\n+\n+    # with C parameter, mincnt=0\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=np.sum,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=0,  # mincnt=0 should show bins with at least 1 point\n+    )\n+    ax_test.set_facecolor(\"white\")\n+\n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..e971405 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,43 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # Create ContourSet on both test and reference figures\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+    cs_ref = ax_ref.contour([[1, 0], [2, 1]])\n+\n+    # Use proposed set_paths to be tested\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+    # Verify that the paths have been updated correctly\n+    np.testing.assert_array_equal(cs_test.get_paths(), cs_ref.get_paths())\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_transform(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # Create ContourSet with a transformation\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+    cs_ref = ax_ref.contour([[1, 0], [2, 1]])\n+\n+    # Apply a translation transform to reference paths (to simulate transformation)\n+    transformed_paths = [p.transformed(plt.transforms.Affine2D().translate(1, 1)) for p in cs_ref.get_paths()]\n+    cs_test.set_paths(transformed_paths)\n+\n+    # Ensure the modification actually happened\n+    assert cs_test.get_paths() != cs_ref.get_paths()\n+    for t_path, o_path in zip(cs_test.get_paths(), transformed_paths):\n+        np.testing.assert_array_equal(t_path.vertices, o_path.vertices)\n+\n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..bd64182 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -661,6 +661,28 @@ class TestPlotting:\n         Plot().plot()\n         assert m.n_splits == 0\n \n+    def test_nominal_x_axis_tweaks(self):\n+        \"\"\"Test nominal x-axis adjustments for categorical plots.\"\"\"\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_xlim() == (-.5, 2.5), \"X-axis limits incorrect for nominal scale\"\n+        assert not any(x.get_visible() for x in ax1.xaxis.get_gridlines()), \"Grid lines should not be visible for nominal scale\"\n+        \n+        lim = (-1, 2.1)\n+        ax2 = p.limit(x=lim).plot()._figure.axes[0]\n+        assert ax2.get_xlim() == lim, \"X-axis limits not respected when explicitly set\"\n+\n+    def test_nominal_y_axis_tweaks(self):\n+        \"\"\"Test nominal y-axis adjustments for categorical plots.\"\"\"\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_ylim() == (2.5, -.5), \"Y-axis limits incorrect for nominal scale\"\n+        assert not any(y.get_visible() for y in ax1.yaxis.get_gridlines()), \"Grid lines should not be visible for nominal scale\"\n+        \n+        lim = (-1, 2.1)\n+        ax2 = p.limit(y=lim).plot()._figure.axes[0]\n+        assert ax2.get_ylim() == lim, \"Y-axis limits not respected when explicitly set\"\n+\n     def test_single_split_single_layer(self, long_df):\n \n         m = MockMark()\n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..3e29a7a 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,13 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+import pytest\n+import flask\n+\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..45b69ab 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,10 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n+            (InvalidURL, 'http://..example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://example.com..'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..5b288fc 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2309,6 +2309,26 @@ class TestAsCompatibleData:\n         assert isinstance(orig._data, CustomIndexable)\n \n \n+import numpy as np\n+import pytest\n+from xarray import Variable\n+\n+def test_variable_setitem_with_values_property():\n+    good_indexed = Variable(dims=(\"dim_0\"), data=np.array([None], dtype=object))\n+    bad_indexed = Variable(dims=(\"dim_0\"), data=np.array([None], dtype=object))\n+\n+    class HasValues:\n+        values = 5\n+\n+    good_indexed[{\"dim_0\": 0}] = set()\n+    bad_indexed[{\"dim_0\": 0}] = HasValues()\n+\n+    # Verify correct behavior\n+    assert good_indexed.values[0] == set()\n+    \n+    # Verify behavior that was incorrect and should be fixed\n+    assert isinstance(bad_indexed.values[0], HasValues)\n+\n def test_raise_no_warning_for_nan_in_binary_ops():\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 274cb25..2c72b0d 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -3485,7 +3485,25 @@ class TestDataArray:\n         assert_identical(array.real, DataArray(1))\n         assert_identical(array.imag, DataArray(2))\n \n-    def test_setattr_raises(self):\n+    def test_issue_unicode_index_preservation(self):\n+        # This test ensures that unicode indices are preserved\n+        # correctly when performing a deep copy.\n+\n+        # Setup DataArray\n+        da = xr.DataArray(\n+            ['baz'], \n+            coords={'x': ['foo'], 'y': ('x', ['bar'])}, \n+            dims=['x']\n+        )\n+\n+        # Perform a deep copy\n+        da_copy = da.copy(deep=True)\n+\n+        # Assert that the DataArray copy retains '<U*' dtype\n+        assert da.coords['x'].dtype == '<U3'\n+        assert da_copy.coords['x'].dtype == '<U3'\n+        assert da.coords['y'].dtype == '<U3'\n+        assert da_copy.coords['y'].dtype == '<U3'\n         array = DataArray(0, coords={'scalar': 1}, attrs={'foo': 'bar'})\n         with raises_regex(AttributeError, 'cannot set attr'):\n             array.scalar = 2\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..e23ba2e 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -592,7 +592,45 @@ class TestCombineAuto:\n         actual = combine_by_coords(datasets)\n         assert_identical(expected, actual)\n \n-    def test_combine_by_coords_still_fails(self):\n+    def test_combine_leaving_bystander_dimensions(self):\n+        # Check non-monotonic bystander dimension coord doesn't raise\n+        # ValueError on combine (https://github.com/pydata/xarray/issues/3150)\n+        ycoord = ['a', 'c', 'b']\n+\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n+    def test_non_monotonic_identical_bystander_coords(self):\n+        # Test that non-monotonic identical bystander coordinates do not raise errors\n+        bystander_coord = ['z', 'x', 'y']\n+\n+        ds1 = Dataset(\n+            data_vars=dict(data=(['z', 'y'], np.random.rand(2, 3))),\n+            coords=dict(z=[1, 2], y=bystander_coord)\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(data=(['z', 'y'], np.random.rand(1, 3))),\n+            coords=dict(z=[3], y=bystander_coord)\n+        )\n+\n+        actual = combine_by_coords([ds1, ds2])\n+        expected = Dataset(\n+            data_vars=dict(data=(['z', 'y'], np.concatenate([ds1.data, ds2.data], axis=0))),\n+            coords=dict(z=[1, 2, 3], y=bystander_coord)\n+        )\n+        assert_identical(expected, actual)\n         # concat can't handle new variables (yet):\n         # https://github.com/pydata/xarray/issues/508\n         datasets = [Dataset({'x': 0}, {'y': 0}),\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..448017b 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,7 +2310,33 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n-    def test_reduce_keep_attrs(self):\n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        import pytest\n+        from collections import OrderedDict\n+\n+        # Define a DataArray with an attribute\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        \n+        # Calculate the quantile while keeping attributes\n+        out = da.quantile(.9, dim='x', keep_attrs=True)\n+        \n+        # Check if the attributes are retained\n+        assert out.attrs == {'units': 'K'}\n+        \n+        # Further verification on a different DataArray with multiple quantiles\n+        da_multi = xr.DataArray([1, 2, 3, 4], dims=\"y\", attrs={'description': 'test'})\n+        out_multi = da_multi.quantile([0.25, 0.75], dim='y', keep_attrs=True)\n+        \n+        # Ensure that attributes are kept for multi-quantile results as well\n+        assert out_multi.attrs == {'description': 'test'}\n+\n+        # Verify with different dimensions\n+        da_2d = xr.DataArray([[1, 2], [3, 4]], dims=(\"x\", \"y\"), attrs={'info': '2D array'})\n+        out_2d = da_2d.quantile(.5, dim='x', keep_attrs=True)\n+        \n+        # Check the attribute retention for 2D arrays\n+        assert out_2d.attrs == {'info': '2D array'}\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..f120f3a 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -5,7 +6,7 @@ import xarray as xr\n from xarray.core import dtypes, merge\n \n from . import raises_regex\n-from .test_dataset import create_test_data\n+from xarray.testing import assert_identical\n \n \n class TestMergeInternals:\n@@ -177,6 +178,15 @@ class TestMergeMethod:\n         actual = ds1.merge(ds2)\n         assert ds2.identical(actual)\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Test merging Dataset with DataArray using the Dataset merge method\n+        expected = xr.merge([ds, da])\n+        actual = ds.merge(da)\n+        assert_identical(actual, expected)\n+\n     def test_merge_compat(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": 1})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..e9a5be5 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -595,6 +595,30 @@ def test_min_count(dim_num, dtype, dask, func, aggdim):\n     assert_dask_array(actual, dask)\n \n \n+@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+@pytest.mark.parametrize(\"dask\", [False, True])\n+@pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n+def test_min_count_multiple_dims(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+\n+    da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n+    min_count = 5\n+\n+    # Test reduction across multiple dimensions with a specific min_count\n+    actual = getattr(da, func)(dim=[\"x\", \"y\", \"z\"], skipna=True, min_count=min_count)\n+    null_condition = actual.isnull()\n+\n+    # Manually calculate the expected result with min_count logic applied\n+    expected_array = da.values\n+    mask = np.isnan(expected_array)\n+    valid_counts = (~mask).sum(axis=(0, 1, 2))\n+    expected_result = np.where(valid_counts >= min_count, np.nansum(expected_array, axis=(0, 1, 2)), np.nan)\n+\n+    expected = xr.DataArray(expected_result)\n+    xr.testing.assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n+\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n def test_min_count_dataset(func):\n     da = construct_dataarray(2, dtype=float, contains_nan=True, dask=False)\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..a26303a 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,6 +109,23 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        import xarray as xr\n+        \n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        \n+        # Test merge with combine_attrs=\"override\"\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        \n+        # Modify the attrs of the merged dataset\n+        ds3.attrs[\"x\"] = 2\n+        \n+        # Ensure original datasets' attrs remain unchanged\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds3.attrs[\"x\"] == 2  # Ensure the change applies only to the merged dataset\n+\n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..e0eb36c 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,8 +1921,27 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    # Test when keep_attrs=True\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    \n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n \n-@pytest.mark.parametrize(\"use_dask\", [True, False])\n+    # Test when keep_attrs=False (default)\n+    actual_no_attrs = xr.where(cond, x, y)\n+    expected_no_attrs = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected_no_attrs, actual_no_attrs)\n+\n+    # Test that attributes from x are preferred when condition is True\n+    x.attrs[\"source\"] = \"x source\"\n+    y.attrs[\"source\"] = \"y source\"\n+    actual_prefer_x_attrs = xr.where(x > -1, x, y, keep_attrs=True)\n+    expected_prefer_x_attrs = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\", \"source\": \"x source\"})\n+    assert_identical(expected_prefer_x_attrs, actual_prefer_x_attrs)\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n     if use_dask and not has_dask:\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..fed9813 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -13,8 +13,18 @@ from . import assert_allclose, assert_equal, assert_identical, requires_dask\n with suppress(ImportError):\n     import dask.array as da\n \n+import numpy as np\n+import pytest\n+import xarray as xr\n+from xarray.coding import variables\n \n-def test_CFMaskCoder_decode():\n+@pytest.mark.parametrize(\"engine\", [\"netcdf4\", \"pydap\"])\n+def test_decode_signed_bytes(engine):\n+    url = \"https://observations.ipsl.fr/thredds/dodsC/EUREC4A/PRODUCTS/testdata/netcdf_testfiles/test_NC_BYTE_neg.nc\"\n+    ds = xr.open_dataset(url, engine=engine)\n+    expected_data = [-128, -1, 0, 1, 2, np.nan, 127]\n+    # Check if the dataset 'ds' retrieved from the url has the expected data.\n+    np.testing.assert_array_equal(ds.coords['test'].values, expected_data)\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n     coder = variables.CFMaskCoder()\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..bb08f13 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1920,6 +1920,18 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n+def test_where_scalar_with_keep_attrs() -> None:\n+    cond = DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    actual = where(cond, 1, 0, keep_attrs=True)\n+    expected = DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+    # Test with y as scalar and keep_attrs True\n+    actual_y_scalar = where(cond, DataArray([10, 20, 30], dims=\"x\"), 0, keep_attrs=True)\n+    expected_y_scalar = DataArray([10, 0, 30], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected_y_scalar, actual_y_scalar)\n+\n+\n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n     x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n@@ -1929,6 +1941,18 @@ def test_where_attrs() -> None:\n     assert_identical(expected, actual)\n \n \n+def test_where_scalar_with_keep_attrs() -> None:\n+    cond = DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    actual = where(cond, 1, 0, keep_attrs=True)\n+    expected = DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n+    # Test with y as scalar and keep_attrs True\n+    actual_y_scalar = where(cond, DataArray([10, 20, 30], dims=\"x\"), 0, keep_attrs=True)\n+    expected_y_scalar = DataArray([10, 0, 30], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected_y_scalar, actual_y_scalar)\n+\n+\n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..0cd1463 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2000,6 +2000,18 @@ def test_where_attrs() -> None:\n             xr.Dataset({\"a\": (\"x\", [1, 2, 3]), \"b\": (\"y\", [3, 4, 5])}),\n             id=\"dataset-dataset\",\n         ),\n+        pytest.param(\n+            xr.DataArray(np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([0.0, 1000.0, 2000.0], dims=\"x\"),\n+            id=\"timedelta-constant-term-zero\",\n+        ),\n+        pytest.param(\n+            xr.DataArray(np.array([500, 1500, 2500], dtype=\"timedelta64[ns]\"), dims=\"x\"),\n+            xr.DataArray([3, 2, 1], dims=\"degree\", coords={\"degree\": [0, 1, 2]}),\n+            xr.DataArray([2500003.0, 2250003.0, 625003.0], dims=\"x\"),\n+            id=\"timedelta-nonzero-constant\",\n+        ),\n         pytest.param(\n             xr.DataArray(pd.date_range(\"1970-01-01\", freq=\"s\", periods=3), dims=\"x\"),\n             xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n@@ -2010,6 +2022,18 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([0.0, 1000.0, 2000.0], dims=\"x\"),\n+            id=\"timedelta-constant-term-zero\",\n+        ),\n+        pytest.param(\n+            xr.DataArray(np.array([500, 1500, 2500], dtype=\"timedelta64[ns]\"), dims=\"x\"),\n+            xr.DataArray([3, 2, 1], dims=\"degree\", coords={\"degree\": [0, 1, 2]}),\n+            xr.DataArray([2500003.0, 2250003.0, 625003.0], dims=\"x\"),\n+            id=\"timedelta-nonzero-constant\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..20b43d5 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,7 +221,15 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n-    def test_repr(self) -> None:\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # Additional test to verify that accessing chunks does not load data into memory\n+        store = InaccessibleVariableDataStore()\n+        create_test_data().dump_to_store(store)\n+        ds = open_dataset(store)\n+        # Ensure that accessing chunks does not trigger the data load\n+        with pytest.raises(UnexpectedDataAccess):\n+            ds.load()\n+        assert ds.chunks == {}\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n         # need to insert str dtype at runtime to handle different endianness\n",
  "pydata__xarray-6744": "",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..2b08372 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,14 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import xarray as xr\n+import numpy as np\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\", \"int64\", \"float64\", \"bool\", \"int16\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    # Testing that stacking does not alter dtype\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo_stacked = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+    assert str(foo_stacked[\"bar\"].values.dtype) == dtype\n",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..8b9242f 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,28 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import pytest\n+from pylint.lint.run import Run\n+from _pytest.capture import CaptureFixture\n+from pathlib import Path\n+\n+EMPTY_MODULE = Path(\"/path/to/empty_module.py\")\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag without expecting an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err or \"No config file found, using defaults\" in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err or \"No config file found, using defaults\" in output.err\n",
  "pylint-dev__pylint-6528": "",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..8908f31 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,47 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive(self) -> None:\n+        \"\"\"Tests that ignore-paths works with the recursive flag\"\"\"\n+        with _test_sys_path():\n+            # Remove any interfering directories from sys.path\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                    expected_output=[],\n+                )\n+\n+    def test_ignore_paths_with_recursive_complex_regex(self) -> None:\n+        \"\"\"Tests that complex regex patterns in ignore-paths work with the recursive flag\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^directory/(ignore|skip)_test/.*\",\n+                    ],\n+                    code=0,\n+                    expected_output=[],\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..95ca871 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -765,8 +765,31 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n \n-            paths = [cwd, \"/custom_pythonpath\", *default_paths]\n+            paths = [\"/do_not_remove\", *default_paths]\n             sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths\n+\n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+            with patch(\"os.getcwd\") as mock_getcwd:\n+                mock_getcwd.return_value = cwd\n+                paths = [cwd, *default_paths]\n+                sys.path = copy(paths)\n+                with _test_environ_pythonpath():\n+                    modify_sys_path()\n+                assert sys.path == paths[1:]\n             with _test_environ_pythonpath(\"/custom_pythonpath\"):\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..e1ad83d 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,9 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+from _pytest.logging import caplog_records_key\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n@@ -171,8 +174,29 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     # This reaches into private API, don't use this type of thing in real tests!\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n+def test_caplog_get_records_consistency(caplog):\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    verify_consistency()  # Initial state, both should match\n+    logging.warning(\"test\")\n+    verify_consistency()  # After adding a log, both should match\n+    caplog.clear()\n+    verify_consistency()  # After clear, both should match and be empty\n+\n+def test_caplog_records_after_clear(caplog):\n+    logging.warning(\"initial log\")\n+    assert len(caplog.records) == 1\n+    assert len(caplog.get_records(\"call\")) == 1\n+\n+    caplog.clear()\n+\n+    assert len(caplog.records) == 0  # After clear, records should be empty\n+    assert len(caplog.get_records(\"call\")) == 0  # After clear, get_records(\"call\") should be empty\n \n-def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n+    logging.warning(\"log after clear\")\n+    assert len(caplog.records) == 1  # New log should reflect in records\n+    assert len(caplog.get_records(\"call\")) == 1  # New log should reflect in get_records(\"call\")\n     pytester.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_debugging.py b/testing/test_debugging.py\nindex 912abd7..2ad482c 100644\n--- a/testing/test_debugging.py\n+++ b/testing/test_debugging.py\n@@ -191,8 +191,25 @@ class TestPDB:\n         child.expect_exact(\"= 1 skipped in\")\n         child.sendeof()\n         self.flush(child)\n-\n-    def test_pdb_print_captured_stdout_and_stderr(self, pytester: Pytester) -> None:\n+    \n+    def test_pdb_unittest_teardown_skip_class(self, pytester: Pytester) -> None:\n+        \"\"\"Test for issue where tearDown should not be called for class-level skips with --pdb\"\"\"\n+        p1 = pytester.makepyfile(\n+            \"\"\"\n+            import unittest\n+            @unittest.skip(\"Class-level skip\")\n+            class TestSkipClass(unittest.TestCase):\n+                def setUp(self):\n+                    raise Exception(\"setUp should not be called\")\n+                def tearDown(self):\n+                    raise Exception(\"tearDown should not be called\")\n+                def test_one(self):\n+                    pass\n+            \"\"\"\n+        )\n+        result = pytester.runpytest_subprocess(f\"--pdb {p1}\")\n+        result.stdout.fnmatch_lines([\"* 1 skipped in *\"])\n+        # Ensure no Exception is raised from setUp or tearDown indicating they were called.\n         p1 = pytester.makepyfile(\n             \"\"\"\n             def test_1():\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..385eb33 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,9 +1051,20 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n-\n-@contextlib.contextmanager\n-def saved_fd(fd):\n+def test_capfd_sys_stdout_mode_no_binary(capfd):\n+    # Using pytest's capfd fixture to capture the output\n+    captured = capfd.readouterr()\n+    \n+    # Assert that the captured stdout mode does not contain 'b', indicating it's not in binary mode.\n+    assert \"b\" not in str(captured.out)\n+    assert \"b\" not in str(captured.err)\n+\n+    print(\"Testing output\")\n+    captured = capfd.readouterr()\n+\n+    # Recheck after printing something to stdout\n+    assert \"b\" not in str(captured.out)\n+    assert \"b\" not in str(captured.err)\n     new_fd = os.dup(fd)\n     try:\n         yield\n",
  "pytest-dev__pytest-5631": "",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..1d94b0f 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -120,6 +120,17 @@ class TestPaste(object):\n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n \n+    def test_create_new_paste_with_text_lexer(self, pastebin, mocked_urlopen):\n+        result = pastebin.create_new_paste(b\"another-paste-contents\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=another-paste-contents\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+\n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n@@ -130,4 +141,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..f6037ab 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -673,6 +673,18 @@ class Test_genitems:\n                 pass\n         \"\"\"\n         )\n+        # Test for issue with '.[' replacement\n+        import pytest\n+\n+        @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+        def testmethod_two(arg0):\n+            pass\n+\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 4\n+        # Verify that the parameterized test name is not altered incorrectly\n+        assert items[3].name == \"testmethod_two[.[]\"\n+        assert items[3].getmodpath() == \"testmethod_two[.[]\"\n         p.copy(p.dirpath(p.purebasename + \"2\" + \".py\"))\n         items, reprec = testdir.inline_genitems(p.dirpath())\n         assert len(items) == 4\n@@ -696,6 +708,18 @@ class Test_genitems:\n                 pass\n         \"\"\"\n         )\n+        # Test for issue with '.[' replacement\n+        import pytest\n+\n+        @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+        def testmethod_two(arg0):\n+            pass\n+\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 4\n+        # Verify that the parameterized test name is not altered incorrectly\n+        assert items[3].name == \"testmethod_two[.[]\"\n+        assert items[3].getmodpath() == \"testmethod_two[.[]\"\n         items, reprec = testdir.inline_genitems(p)\n         assert len(items) == 3\n         assert items[0].name == \"testone\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..905cd46 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,8 +201,21 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue where BytesWarning occurs when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n \n-def test_dynamic_fixture_request(testdir):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        'python3', '-bb', '-m', 'pytest', '--setup-show', str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..f04ecfd 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -607,6 +607,25 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n \n+    def test_runxfail_with_skip_location(self, testdir):\n+        \"\"\"Ensure `--runxfail` doesn't affect location reporting of skipped tests.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            \n+            @pytest.mark.skip(reason=\"unconditional skip\")\n+            def test_skip_location():\n+                assert 0\n+            \"\"\"\n+        )\n+        # Running with -rs to check for proper skip location\n+        result = testdir.runpytest(\"-rs\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_skip_location:4: unconditional skip\", \"*1 skipped*\"])\n+        \n+        # Running with -rs --runxfail to ensure location doesn't change\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_skip_location:4: unconditional skip\", \"*1 skipped*\"])\n+\n     def test_skip_with_reason(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..994c326 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,7 +1,9 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n+from _pytest.pytester import Testdir\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n from _pytest.skipping import pytest_runtest_setup\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..56e68aa 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,8 +513,11 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n-\n-    def test_capfdbinary(self, testdir):\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n             def test_hello(capfdbinary):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..dbd5424 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,7 +51,29 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n-def test_with_statement(caplog):\n+def test_change_level_undos_handler_level(testdir: Testdir) -> None:\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\"\"\"\n+\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n         logger.info(\"handler INFO level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..c90f25d 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1178,6 +1179,30 @@ def test_collect_symlink_out_of_tree(testdir):\n     assert result.ret == 0\n \n \n+def test_collect_symlink_file(pytester: Pytester) -> None:\n+    \"\"\"A symlinked file is collected.\"\"\"\n+    test_file = pytester.mkdir(\"test_file_dir\").joinpath(\"test_symlink.py\")\n+    test_file.write_text(\"def test_symlink(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_to_test_file.py\").symlink_to(test_file)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n+def test_collect_symlink_dir_with_subdirs(pytester: Pytester) -> None:\n+    \"\"\"\n+    A symlinked directory containing subdirectories is collected.\n+    Ensure that both the directory and its contents are collected properly.\n+    \"\"\"\n+    dir = pytester.mkdir(\"complex_dir\")\n+    subdir = dir.mkdir(\"subdir\")\n+    subdir.joinpath(\"test_subdir.py\").write_text(\"def test_subdir(): pass\", \"utf-8\")\n+    dir.joinpath(\"test_root.py\").write_text(\"def test_root(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_complex\").symlink_to(dir)\n+\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=3)  # 3 tests: test_root.py and test_subdir.py\n+\n+\n def test_collectignore_via_conftest(testdir):\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n     tests = testdir.mkpydir(\"tests\")\n",
  "pytest-dev__pytest-8399": "",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..d4907e6 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,6 +597,44 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    from sklearn.linear_model import RidgeClassifierCV\n+    import numpy as np\n+\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    # Create some sample data\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-0.8, -1.0], [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [0.1, 1.0, 10.0]\n+    n_alphas = len(alphas)\n+\n+    # Initialize RidgeClassifierCV with store_cv_values=True\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    n_targets = 1\n+\n+    # Fit the model\n+    r.fit(x, y)\n+    # Check shape of cv_values_\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    # Now test with multiple targets\n+    y_multi = np.array([[1, 1, 1, -1, -1], [1, -1, 1, -1, 1], [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y_multi.shape[1]\n+\n+    # Fit the model\n+    r.fit(x, y_multi)\n+\n+    # Check shape of cv_values_\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    # Verify if the alpha chosen is actually one of the alphas provided\n+    assert r.alpha_ in alphas\n \n def test_ridgecv_sample_weight():\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..dd8436d 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,17 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+def test_int_overflow_fowlkes_mallows_score():\n+    # Generating large random labels to try and cause overflow\n+    n = 100000\n+    labels_true = np.random.randint(low=0, high=10, size=n)\n+    labels_pred = np.random.randint(low=0, high=10, size=n)\n+    \n+    # Ensure that fowlkes_mallows_score does not produce runtime warnings\n+    with np.errstate(over='raise'):\n+        score = fowlkes_mallows_score(labels_true, labels_pred)\n+        assert not np.isnan(score)\n+        assert score >= 0.0 and score <= 1.0\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..0add1ec 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -538,8 +538,44 @@ def test_hashing_vectorizer():\n     for i in range(X.shape[0]):\n         assert_almost_equal(np.linalg.norm(X[0].data, 1), 1.0)\n \n+from sklearn.feature_extraction.text import CountVectorizer\n+from sklearn.utils.testing import assert_true, assert_false, assert_equal, assert_raises\n+from numpy.testing import assert_array_equal\n+import numpy as np\n+\n+def test_countvectorizer_custom_vocabulary_repeated_indices():\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    cv = CountVectorizer(vocabulary=vocab)\n+\n+    # Ensure the vocabulary is fixed\n+    assert_true(cv.fixed_vocabulary_)\n+\n+    # Get feature names without a prior transformation and check correctness\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(vocab, feature_names)\n+\n+    # Validate that indices in the vocabulary are correct\n+    for idx, name in enumerate(feature_names):\n+        assert_equal(idx, cv.vocabulary_.get(name))\n+\n+    # Ensure a NotFittedError is not raised when calling get_feature_names\n+    assert_raises(NotFittedError, cv.transform, ['dummy text'])\n+\n+    # Perform transformation to check setting the vocabulary_\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?'\n+    ]\n+    transformed = cv.transform(corpus)\n+    assert_true(hasattr(cv, \"vocabulary_\"))\n+\n+    # Check that the transformed matrix has the correct shape\n+    assert_equal(transformed.shape, (4, len(vocab)))\n \n-def test_feature_names():\n+    # Ensure vocabulary remains consistent post-transformation\n+    assert_array_equal(vocab, cv.get_feature_names())\n     cv = CountVectorizer(max_df=0.5)\n \n     # test for Value error on unfitted/empty vocabulary\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..fed682b 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1172,8 +1172,29 @@ def test_search_cv_timing():\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n+from sklearn.utils.testing import assert_true, assert_greater_equal\n \n-def test_grid_search_correct_score_results():\n+@ignore_warnings()\n+def test_search_cv_refit_time():\n+    # Test if refit_time_ is present and valid in GridSearchCV and RandomizedSearchCV\n+    svc = LinearSVC(random_state=0)\n+\n+    X = [[1], [2], [3], [4]]\n+    y = [0, 1, 1, 0]\n+\n+    gs = GridSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0, refit=True)\n+    rs = RandomizedSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0, n_iter=2, refit=True)\n+\n+    for search in (gs, rs):\n+        search.fit(X, y)\n+        assert_true(hasattr(search, \"refit_time_\"), msg=\"The refit_time_ attribute is missing\")\n+        assert_true(isinstance(search.refit_time_, float), msg=\"refit_time_ is not a float\")\n+        assert_greater_equal(search.refit_time_, 0.0, msg=\"refit_time_ is negative\")\n+\n+    # Test for when refit=False\n+    gs_no_refit = GridSearchCV(svc, {'C': [0, 1]}, cv=2, error_score=0, refit=False)\n+    gs_no_refit.fit(X, y)\n+    assert_true(not hasattr(gs_no_refit, \"refit_time_\"), msg=\"refit_time_ should not exist when refit=False\")\n     # test that correct scores are used\n     n_splits = 3\n     clf = LinearSVC(random_state=0)\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..b322384 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,6 +21,9 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.datasets import make_classification\n+from sklearn.utils.testing import assert_array_almost_equal\n \n from sklearn.exceptions import ConvergenceWarning\n from sklearn.exceptions import ChangedBehaviorWarning\n",
  "scikit-learn__scikit-learn-12585": "",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..73c2aed 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -5,6 +5,35 @@ from distutils.version import LooseVersion\n import numpy as np\n from scipy import linalg\n \n+@pytest.mark.parametrize('initial_copy_X, fit_copy_X', [\n+    (True, None),\n+    (False, None),\n+    (True, True),\n+    (False, True),\n+    (True, False),\n+    (False, False)\n+])\n+def test_lasso_lars_combined_copyX_behaviour(initial_copy_X, fit_copy_X):\n+    \"\"\"\n+    Test the combined behavior of LassoLarsIC initialization and fit method\n+    with respect to the copy_X parameter.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(precompute=False, copy_X=initial_copy_X)\n+\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+\n+    if fit_copy_X is None:\n+        lasso_lars.fit(X, y)\n+        expected_behaviour = initial_copy_X\n+    else:\n+        lasso_lars.fit(X, y, copy_X=fit_copy_X)\n+        expected_behaviour = fit_copy_X\n+\n+    assert expected_behaviour == np.array_equal(X, X_copy)\n+\n import pytest\n \n from sklearn.model_selection import train_test_split\n@@ -18,7 +47,8 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..b7358dd 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -494,6 +494,34 @@ def test_shuffle_stratifiedkfold():\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n \n+def test_different_test_sets_for_different_random_states():\n+    # Check that different random states result in different test sets\n+    # when shuffle is True for StratifiedKFold\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+    kf1 = StratifiedKFold(10, shuffle=True, random_state=42)\n+    kf2 = StratifiedKFold(10, shuffle=True, random_state=24)\n+    \n+    test_sets_1 = [test for _, test in kf1.split(X, y)]\n+    test_sets_2 = [test for _, test in kf2.split(X, y)]\n+    \n+    assert any(not np.array_equal(t1, t2) for t1, t2 in zip(test_sets_1, test_sets_2)), \\\n+        \"Test indices should be different for different random states\"\n+        \n+def test_identical_results_with_same_random_state():\n+    # Check that the same random_state yields identical results across multiple runs\n+    X = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+    random_state = 101\n+    kf1 = StratifiedKFold(10, shuffle=True, random_state=random_state)\n+    kf2 = StratifiedKFold(10, shuffle=True, random_state=random_state)\n+\n+    test_sets_1 = [test for _, test in kf1.split(X, y)]\n+    test_sets_2 = [test for _, test in kf2.split(X, y)]\n+\n+    assert all(np.array_equal(t1, t2) for t1, t2 in zip(test_sets_1, test_sets_2)), \\\n+        \"Test indices should be identical for the same random state\"\n+\n def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..5045a36 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -203,7 +203,16 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n \n-@pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n+def test_kmeans_bin_edges_sorted():\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+\n+    # Use 5 bins\n+    est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')\n+    Xt = est.fit_transform(X)\n+\n+    # Check that bin edges are sorted\n+    for bin_edge in est.bin_edges_:\n+        assert np.all(bin_edge[:-1] <= bin_edge[1:]), \"Bin edges are not sorted\"\n @pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n def test_inverse_transform(strategy, encode):\n     X = np.random.RandomState(0).randn(100, 3)\n",
  "scikit-learn__scikit-learn-13142": "",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..f4289c2 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -9,6 +10,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n import pytest\n \n import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..ba770f5 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -506,4 +506,36 @@ def test_transform():\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n+\n+\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.ensemble import RandomForestClassifier, VotingClassifier\n+import numpy as np\n+import pytest\n+from sklearn.datasets import load_iris\n+\n+\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(load_iris(return_X_y=True),\n+      VotingClassifier(\n+          estimators=[\n+              ('lr', LogisticRegression()),\n+              ('rf', RandomForestClassifier(n_estimators=5))\n+          ],\n+      ))]\n+)\n+def test_none_estimator_with_weights_extended(X_y_voter):\n+    X, y, voter = X_y_voter\n+    # Confirm estimator can be set to None and weights are still handled without error\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n+\n+    # Additional check when all estimators are None\n+    with pytest.raises(ValueError, match=\"All estimators are None.*\"):\n+        voter.set_params(lr=None, rf=None)\n+        voter.fit(X, y, sample_weight=np.ones(y.shape))\n",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..f173024 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -397,7 +397,36 @@ def test_export_text():\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n \n-def test_plot_tree_entropy(pyplot):\n+def test_export_text_single_feature():\n+    # Test single feature DecisionTreeClassifier\n+    X, y = load_iris(return_X_y=True)\n+    X_single = X[:, 0].reshape(-1, 1)\n+    \n+    clf = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf.fit(X_single, y)\n+    \n+    expected_report = dedent(\"\"\"\n+    |--- sepal_length <= 5.45\n+    |   |--- class: 0\n+    |--- sepal_length >  5.45\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+    \n+    assert export_text(clf, feature_names=['sepal_length']) == expected_report\n+\n+    # Test single feature DecisionTreeRegressor\n+    y_mo_single = [[-1], [-1], [-1], [1], [1], [1]]\n+    reg = DecisionTreeRegressor(max_depth=2, random_state=0)\n+    reg.fit(X_single[:6], y_mo_single)\n+\n+    expected_report = dedent(\"\"\"\n+    |--- sepal_length <= 5.15\n+    |   |--- value: -1.0\n+    |--- sepal_length >  5.15\n+    |   |--- value: 1.0\n+    \"\"\").lstrip()\n+\n+    assert export_text(reg, feature_names=['sepal_length'], decimals=1) == expected_report\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..9fb0e84 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1553,8 +1553,31 @@ def test_LogisticRegressionCV_no_refit(multi_class):\n     assert lrcv.l1_ratio_.shape == (n_classes,)\n     assert lrcv.coef_.shape == (n_classes, n_features)\n \n+import pytest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn.datasets import make_classification\n \n-def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+def test_LogisticRegressionCV_no_refit_new(penalty, multi_class):\n+    # Test LogisticRegressionCV with new dataset and verify no IndexError\n+    X, y = make_classification(n_samples=1000, n_features=3, random_state=29)\n+    \n+    l1_ratios = np.linspace(0, 1, 2) if penalty == 'elasticnet' else None\n+    \n+    lrcv = LogisticRegressionCV(\n+        penalty=penalty,\n+        Cs=np.logspace(-4, 4, 3),\n+        solver='saga',\n+        l1_ratios=l1_ratios,\n+        multi_class=multi_class,\n+        refit=False,\n+        random_state=0\n+    )\n+    lrcv.fit(X, y)\n+    assert lrcv.C_ is not None  # Check if C_ is assigned\n+    assert lrcv.coef_ is not None  # Check if coef_ is assigned\n     # Make sure the shapes of scores_ and coefs_paths_ attributes are correct\n     # when using elasticnet (added one dimension for l1_ratios)\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..f09393a 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -23,6 +23,7 @@ def test_get_deps_info():\n     assert 'Cython' in deps_info\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n+    assert 'joblib' in deps_info\n \n \n def test_show_versions_with_blas(capsys):\n@@ -30,4 +31,5 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n+    assert 'joblib' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..604186f 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -78,6 +78,26 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n     assert_array_equal(labels, expected)\n \n \n+def test_float_min_samples():\n+    # Test with min_samples given as a float in the OPTICS algorithm\n+    rng = np.random.RandomState(0)\n+    X, _ = make_blobs(n_samples=100, centers=3, cluster_std=1.0, random_state=rng)\n+\n+    # Expected behavior: rounding min_samples*100 (n_samples) should yield integer value \n+    try:\n+        clust = OPTICS(min_samples=0.1, max_eps=20, cluster_method='xi', xi=0.05)\n+        clust.fit(X)\n+        print(\"Test passed: No TypeError was raised when using float for min_samples\")\n+    except TypeError:\n+        print(\"Test failed: TypeError was raised when using float for min_samples\")\n+\n+    try:\n+        clust = OPTICS(min_samples=0.05, max_eps=20, cluster_method='xi', xi=0.05)\n+        clust.fit(X)\n+        print(\"Test passed: No TypeError was raised when using float for min_samples\")\n+    except TypeError:\n+        print(\"Test failed: TypeError was raised when using float for min_samples\")\n+\n def test_extract_xi():\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n",
  "scikit-learn__scikit-learn-14710": "diff --git a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\nindex 7e8bccd..7c4ea93 100644\n--- a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n@@ -414,4 +414,20 @@ def test_infinite_values_missing_values():\n                                                learning_rate=1, max_depth=2)\n \n     assert stump_clf.fit(X, y_isinf).score(X, y_isinf) == 1\n-    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+\n+\n+@pytest.mark.parametrize(\"scoring\", [None, 'accuracy'])\n+def test_string_target_early_stopping(scoring):\n+    # Regression tests for #14709 where the targets need to be encoded before\n+    # computing the score during early stopping.\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10, scoring=scoring)\n+    gbrt.fit(X, y)\n+\n+    # Validate that the classifier can predict without errors and output matches the training distribution\n+    predictions = gbrt.predict(X)\n+    assert set(predictions) == set(y), \"Predictions do not match target classes\"\n+    assert all(p in ['x', 'y'] for p in predictions), \"All predictions should be in the set of target classes\"\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..1964164 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,19 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test to confirm fixed ZeroDivisionError in _sparse_fit\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    # Verify that the support_vectors_ attribute is empty, handled without error\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..8221db6 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -93,6 +93,32 @@ def test_strip_accents():\n     assert strip_accents_unicode(a) == expected\n \n     # mix letters accentuated and not\n+\n+    # Test case for strings in NFKD\n+    # s1 contains one code point, \"LATIN SMALL LETTER N WITH TILDE\"\n+    s1 = chr(241)\n+    # s2 contains two code points, \"LATIN SMALL LETTER N\" followed by \"COMBINING TILDE\"\n+    s2 = chr(110) + chr(771)\n+    # Expected to strip accents from both representations\n+    expected = 'n'\n+    assert strip_accents_unicode(s1) == expected\n+    assert strip_accents_unicode(s2) == expected\n+\n+    # Original test patch cases\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaeresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n     a = \"this is \u00e0 test\"\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..f15d23c 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -331,6 +331,23 @@ def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n     model = IsolationForest()\n+\n+\n+def test_iforest_no_warning_with_feature_names_and_non_auto_contamination():\n+    \"\"\"Test that no warning is raised when fitted with feature names and non-'auto' contamination.\"\"\"\n+    import warnings\n+    from sklearn.ensemble import IsolationForest\n+    import pandas as pd\n+    import numpy as np\n+\n+    X = pd.DataFrame({\"a\": np.random.randn(4)})\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+        model.fit(X)\n+        # Check if any warning was raised\n+        assert not any(\"does not have valid feature names\" in str(warning.message) for warning in w)\n     model.fit(X, y)\n \n     warn_msg = (\n@@ -338,4 +355,4 @@ def test_base_estimator_property_deprecated():\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "diff --git a/sklearn/feature_selection/tests/test_sequential.py b/sklearn/feature_selection/tests/test_sequential.py\nindex 42e1fbb..efbe639 100644\n--- a/sklearn/feature_selection/tests/test_sequential.py\n+++ b/sklearn/feature_selection/tests/test_sequential.py\n@@ -313,4 +313,27 @@ def test_backward_neg_tol():\n     new_score = lr.fit(Xr, y).score(Xr, y)\n \n     assert 0 < sfs.get_support().sum() < X.shape[1]\n-    assert new_score < initial_score\n+    assert new_score < initial_score\n+\n+def test_sequential_feature_selector_with_iterable_cv():\n+    \"\"\"Check SequentialFeatureSelector with an iterable of splits.\"\"\"\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SequentialFeatureSelector\n+    from sklearn.neighbors import KNeighborsClassifier\n+    from sklearn.model_selection import LeaveOneGroupOut\n+    import numpy as np\n+\n+    X, y = make_classification(random_state=0)\n+\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2 :] = 1\n+\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+\n+    knc = KNeighborsClassifier(n_neighbors=5)\n+\n+    sfs = SequentialFeatureSelector(knc, n_features_to_select=5, cv=splits)\n+    sfs.fit(X, y)\n+\n+    assert sfs.get_support().sum() == 5\n",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..e9c76ab 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -20,6 +20,70 @@ from sklearn.compose import (\n     make_column_selector,\n )\n from sklearn.exceptions import NotFittedError\n+import pandas as pd\n+import numpy as np\n+import pytest\n+from sklearn.feature_selection import VarianceThreshold\n+\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for #26306.\n+    \"\"\"\n+\n+    pd = pytest.importorskip(\"pandas\")\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n+def test_column_transformer_with_dataframe_remainder():\n+    \"\"\"Test ColumnTransformer with remainder as an estimator and set_output as 'pandas'.\"\"\"\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+    \n+    # First using remainder as an estimator and setting output to pandas\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False\n+    )\n+    \n+    ct.set_output(transform=\"pandas\")\n+    result = ct.fit_transform(df)\n+    expected_result = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+    \n+    pd.testing.assert_frame_equal(result, expected_result)\n+\n+    # Checking default transformation output is a numpy array\n+    ct.set_output(transform=\"default\")\n+    result_default = ct.fit_transform(df)\n+    assert isinstance(result_default, np.ndarray)\n+    \n+def test_column_transformer_remainder_passthrough_with_pandas():\n+    \"\"\"Test using 'passthrough' with remainder and set_output for pandas.\"\"\"\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder='passthrough',\n+        verbose_feature_names_out=False\n+    )\n+    \n+    ct.set_output(transform=\"pandas\")\n+    result = ct.fit_transform(df)\n+    expected_result = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+    \n+    pd.testing.assert_frame_equal(result, expected_result)\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n \n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..55672d7 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,6 +945,20 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_inertia_consistent_for_diff_n_jobs():\n+    # Test that KMeans gives the same inertia with different n_jobs settings\n+    rnd = np.random.RandomState(2)\n+    X, _ = make_blobs(n_samples=10000, centers=10, n_features=2, random_state=rnd)\n+\n+    inertia_single = KMeans(n_clusters=10, random_state=2, n_jobs=1).fit(X).inertia_\n+    inertia_parallel = KMeans(n_clusters=10, random_state=2, n_jobs=2).fit(X).inertia_\n+    \n+    assert_almost_equal(inertia_single, inertia_parallel)\n+\n+    # Iterating over multiple n_jobs\n+    for n_jobs in range(1, 5):\n+        inertia = KMeans(n_clusters=10, random_state=2, n_jobs=n_jobs).fit(X).inertia_\n+        assert_almost_equal(inertia_single, inertia)\n \n def test_minibatch_kmeans_partial_fit_int_data():\n     # Issue GH #14314\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..5251524 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,6 +251,42 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_dedent(literal_inc_path):\n+    # Test preserving leading whitespace using prepend with indentation and dedent\n+    options = {'lines': '18-23', 'prepend': ' '*6 + '<plugin>', 'dedent': 2}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    expected_content = (\n+        \"      <plugin>\\n\"\n+        \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+        \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+        \"        <version>2.15.0</version>\\n\"\n+        \"        <configuration>\\n\"\n+        \"          <verifyFailOn>strict</verifyFailOn>\\n\"\n+        \"        </configuration>\\n\"\n+        \"      </plugin>\\n\"\n+    )\n+    assert content == expected_content\n+\n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_only(literal_inc_path):\n+    # Test just using prepend without dedent\n+    options = {'lines': '18-23', 'prepend': '<plugin>'}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    # Checking that it didn't indent to match the level initially, placing on the first line.\n+    expected_content = (\n+        \"<plugin>\\n\"\n+        \"      <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+        \"      <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+        \"      <version>2.15.0</version>\\n\"\n+        \"      <configuration>\\n\"\n+        \"        <verifyFailOn>strict</verifyFailOn>\\n\"\n+        \"      </configuration>\\n\"\n+    )\n+    assert content == expected_content\n+\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n",
  "sphinx-doc__sphinx-10449": "",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..5fb7b4b 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -5,12 +6,49 @@ import os\n import re\n import subprocess\n from subprocess import PIPE, CalledProcessError\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n import pytest\n \n from sphinx.util.osutil import cd\n \n \n+def test_Catalog_duplicated_message():\n+    catalog = Catalog()\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 2))\n+    catalog.add('hello', MsgOrigin('/path/to/yetanother', 1))\n+    catalog.add('world', MsgOrigin('/path/to/filename', 1))\n+\n+    assert len(list(catalog)) == 2\n+\n+    msg1, msg2 = list(catalog)\n+    assert msg1.text == 'hello'\n+    assert msg1.locations == [('/path/to/filename', 1),\n+                              ('/path/to/filename', 2),\n+                              ('/path/to/yetanother', 1)]\n+    assert msg2.text == 'world'\n+    assert msg2.locations == [('/path/to/filename', 1)]\n+\n+def test_Catalog_no_duplicated_message():\n+    catalog = Catalog()\n+    catalog.add('example', MsgOrigin('/path/to/samefile', 1))\n+    catalog.add('example', MsgOrigin('/path/to/samefile', 1))\n+    catalog.add('example', MsgOrigin('/path/to/samefile', 1))\n+    catalog.add('another', MsgOrigin('/path/to/different', 0))\n+    catalog.add('another', MsgOrigin('/path/to/different', 0))\n+    catalog.add('another', MsgOrigin('/path/to/different', 1))\n+\n+    assert len(list(catalog)) == 2\n+\n+    msg1, msg2 = list(catalog)\n+    assert msg1.text == 'example'\n+    assert msg1.locations == [('/path/to/samefile', 1)]\n+    assert msg2.text == 'another'\n+    assert msg2.locations == [('/path/to/different', 0),\n+                              ('/path/to/different', 1)]\n+\n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n def test_build_gettext(app):\n     # Generic build; should fail only when the builder is horribly broken.\n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..2c11a0b 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -325,6 +325,16 @@ def test_signature_from_str_complex_annotations():\n \n def test_signature_from_str_kwonly_args():\n     sig = inspect.signature_from_str('(a, *, b)')\n+\n+    # Test for positional-only and positional-or-keyword arguments with defaults\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n     assert list(sig.parameters.keys()) == ['a', 'b']\n     assert sig.parameters['a'].kind == Parameter.POSITIONAL_OR_KEYWORD\n     assert sig.parameters['a'].default == Parameter.empty\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..ecfa468 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -11,6 +12,7 @@\n import abc\n import sys\n from importlib import import_module\n+from typing import TypeVar\n \n import pytest\n \n@@ -33,6 +35,17 @@ def test_MockModule():\n \n \n def test_MockObject():\n+    T = TypeVar('T')\n+\n+    # Test case for generically-typed classes\n+    class SubClassGeneric(mock.SomeClass[T]):\n+        \"\"\"docstring of SubClassGeneric\"\"\"\n+\n+    obj_generic = SubClassGeneric()\n+    assert SubClassGeneric.__doc__ == \"docstring of SubClassGeneric\"\n+    assert isinstance(obj_generic, SubClassGeneric)\n+\n+    # Original test case\n     mock = _MockObject()\n     assert isinstance(mock.some_attr, _MockObject)\n     assert isinstance(mock.some_method, _MockObject)\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex 464108d..69814db 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -1261,9 +1261,10 @@ def test_automethod_for_builtin(app):\n         '',\n     ]\n \n-\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n-def test_automethod_for_decorated(app):\n+def test_decorated_init_in_docs(app):\n+    actual = do_autodoc(app, 'class', 'target.decorator.Foo')\n+    assert '.. py:method:: Foo.__init__' in list(actual)\n     actual = do_autodoc(app, 'method', 'target.decorator.Bar.meth')\n     assert list(actual) == [\n         '',\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..31877fa 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -84,6 +84,17 @@ def test_defaults_json(app, status, warning):\n     assert \"Not Found for url: https://www.google.com/image.png\" in \\\n         rowsby[\"https://www.google.com/image.png\"][\"info\"]\n \n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    print(content)\n+    # looking for non-existent local file should fail\n+    assert \"broken    path/to/notfound\" in content\n+    assert len(content.splitlines()) == 6  # Adjust this number based on actual output\n \n @pytest.mark.sphinx(\n     'linkcheck', testroot='linkcheck', freshenv=True,\n",
  "sphinx-doc__sphinx-8035": "",
  "sphinx-doc__sphinx-8120": "",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..2f893c9 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -12,6 +13,8 @@ import platform\n import sys\n \n import pytest\n+import sys\n+from sphinx.testing.fixtures import sphinx\n \n from sphinx.testing import restructuredtext\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..6467f83 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,23 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum_update():\n+    # Define an Enum class\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n \n-def test_getslots():\n+    # Existing behavior: Enum member should just be \"MyEnum.ValueA\"\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+\n+    # Check how the Enum default parameter in function signature is described\n+    def func_with_enum(e: MyEnum = MyEnum.ValueA) -> None:\n+        pass\n+\n+    # Render the signature using the object_description function\n+    signature = inspect.object_description(func_with_enum)\n+    expected_signature = \"func_with_enum(e: MyEnum = MyEnum.ValueA) -> None\"\n+    assert expected_signature in signature\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..1fca2f4 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -9,11 +9,11 @@\n \"\"\"\n \n import time\n+import sys\n from io import StringIO\n \n import pytest\n-\n-from sphinx import application\n+from sphinx.cmd import quickstart as qs\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n \n@@ -241,7 +241,47 @@ def test_default_filename(tempdir):\n     exec(conffile.read_text(), ns)\n \n \n-def test_extensions(tempdir):\n+def test_exits_when_existing_confpy_with_no_path(monkeypatch):\n+    # This test mocks the presence of a conf.py file\n+    # and provides an empty input to test the application exiting\n+    def mock_isfile(path):\n+        return True\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    def mock_input(prompt):\n+        if prompt == \"Please enter a new root path (or just Enter to exit)\":\n+            return ''  # Mock pressing Enter\n+        return 'fake_input'\n+\n+    monkeypatch.setattr('builtins.input', mock_input)\n+\n+    d = {}\n+    with pytest.raises(SystemExit):\n+        qs.ask_user(d)\n+\n+\n+def test_exits_when_existing_confpy_provides_path(monkeypatch):\n+    # This test mocks the presence of a conf.py file\n+    # and provides a valid path to verify different inputs\n+    def mock_isfile(path):\n+        return True\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    def mock_input(prompt):\n+        if prompt == \"Please enter a new root path (or just Enter to exit)\":\n+            return 'new_valid_path'  # Mock providing a path\n+        return 'fake_input'\n+\n+    monkeypatch.setattr('builtins.input', mock_input)\n+\n+    d = {}\n+    # This should not raise an exception because a valid path is provided\n+    try:\n+        qs.ask_user(d)\n+    except SystemExit:\n+        pytest.fail(\"qs.ask_user raised SystemExit unexpectedly!\")\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..61ea184 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -843,10 +843,47 @@ def test_pyproperty(app):\n                                    [desc_content, ()]))\n     assert 'Class.prop1' in domain.objects\n     assert domain.objects['Class.prop1'] == ('index', 'Class.prop1', 'property', False)\n+    assert_node(doctree[1][1][3], ([desc_signature, ([desc_annotation, \"class property \"],\n+                                                     [desc_name, \"prop2\"],\n+                                                     [desc_annotation, \": str\"])],\n+                                   [desc_content, ()]))\n+    assert 'Class.prop1' in domain.objects\n+    assert domain.objects['Class.prop1'] == ('index', 'Class.prop1', 'property', False)\n     assert 'Class.prop2' in domain.objects\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n+def test_pyproperty_cross_reference(app):\n+    text = (\".. py:class:: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: x\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: y\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_name, \"Point\"])],\n+                                  [desc_content, (addnodes.index,\n+                                                  desc,\n+                                                  addnodes.index,\n+                                                  desc)])]))\n+    assert_node(doctree[1][1][1][2], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                        [desc_name, \"end\"],\n+                                                        [pending_xref, \"Point\"])],\n+                                      [desc_content, ()]))\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n+    assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n+\n+\n def test_pydecorator_signature(app):\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..b708739 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,29 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy import sqrt\n+from sympy.geometry import Point, Point2D, Point3D\n+\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+    assert p2.distance(p1) == sqrt(5)\n+\n+    # Additional tests\n+    p3 = Point3D(0, 0, 0)\n+    p4 = Point2D(3, 4)\n+    assert p3.distance(p4) == 5\n+    assert p4.distance(p3) == 5\n+\n+    p5 = Point3D(0, 0, 1)\n+    p6 = Point3D(0, 0, 6)\n+    assert p5.distance(p6) == 5\n+\n+    p7 = Point2D(0, 0)\n+    p8 = Point2D(3, 4)\n+    assert p7.distance(p8) == 5\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..c170694 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,27 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    \n+    # Original test case\n+    assert f(f(2)).evalf() == Float(16)\n+    \n+    # New test case to verify the recursive evalf issue:\n+    assert f(g(2)).evalf() == Float(16)\n+    \n+    # New test cases checking nested compositions\n+    assert f(g(f(2))).evalf() == Float(64)\n+    assert g(f(g(2))).evalf() == Float(32)\n+    \n+    # Additional test with multiple nesting levels\n+    complex_func = implemented_function('h', lambda x: x + 1)\n+    assert complex_func(f(g(f(2)))).evalf() == Float(65)\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..82c1c1e 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -330,6 +330,24 @@ def test_args():\n     assert p._array_form == [3, 2, 0, 1, 5, 4]\n     p = Permutation((0, 3, 1, 2))\n     assert p._cyclic_form is None\n+\n+    # Original test patch verifying non-disjoint cycles result in correct permutation\n+    assert Permutation([[0, 1], [0, 2]]) == Permutation(0, 1, 2)\n+\n+    # New test case: Verify identity permutation construction from non-disjoint identical cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+\n+    # New test case: Verify identity permutation construction when cycles are effectively identity\n+    assert Permutation([[0], [1], [2]]) == Permutation([0, 1, 2])\n+\n+    # Verify the combination of disjoint and non-disjoint cycles\n+    assert Permutation([[0, 1], [2, 3], [0, 2]]) == Permutation([1, 3, 0, 2])\n+\n+    # Verify larger cycles with overlaps\n+    assert Permutation([[0, 1, 2], [2, 3]]) == Permutation([1, 2, 3, 0])\n+\n+    # Case where cycles fully overlap but should still succeed\n+    assert Permutation([[0, 1, 2], [0, 1]]) == Permutation([1, 2, 0])\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..5898b60 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -503,7 +503,27 @@ def test_sparse_zeros_sparse_eye():\n     assert len(SparseMatrix.zeros(3)._smat) == 0\n \n \n-def test_copyin():\n+def test_zero_row_hstack():\n+    # Test hstack with 0-row matrices\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(0, 1)\n+    M3 = SparseMatrix.zeros(0, 2)\n+    M4 = SparseMatrix.zeros(0, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+\n+    M1 = SparseMatrix.zeros(1, 0)\n+    M2 = SparseMatrix.zeros(1, 1)\n+    M3 = SparseMatrix.zeros(1, 2)\n+    M4 = SparseMatrix.zeros(1, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (1, 6)\n+\n+def test_zero_column_vstack():\n+    # Test vstack with 0-column matrices\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(1, 0)\n+    M3 = SparseMatrix.zeros(2, 0)\n+    M4 = SparseMatrix.zeros(3, 0)\n+    assert SparseMatrix.vstack(M1, M2, M3, M4).shape == (6, 0)\n     s = SparseMatrix(3, 3, {})\n     s[1, 0] = 1\n     assert s[:, 0] == SparseMatrix(Matrix([0, 1, 0]))\n",
  "sympy__sympy-13372": "",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..d4fe376 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -203,6 +203,21 @@ def test_tanh():\n \n     assert tanh(k*pi*I/2) == tan(k*pi/2)*I\n \n+def test_issue_coth_log_tan():\n+    x = Symbol('x')\n+    \n+    # Testing specific integral values that were causing issues\n+    test_values = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+    for val in test_values:\n+        expr = coth(log(tan(x)))\n+        # Evaluate and check that no errors occur\n+        result = expr.subs(x, val)\n+        assert result.is_real or result.has(I)\n+\n+    # Additional checks\n+    assert coth(log(tan(0))) == coth(log(-tan(0)))  # tan(0) is 0, coth(log(0)) is undefined\n+    assert coth(log(tan(pi))) == coth(log(-tan(pi)))  # tan(pi) is nearly 0, similar behavior\n+\n \n def test_tanh_series():\n     x = Symbol('x')\n",
  "sympy__sympy-13615": "",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..98e423c 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,53 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643():\n+    from sympy.matrices import Matrix, eye, ones\n+    # Reproducing the example from the issue\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    result = M.col_insert(3, V)\n+    assert result == expected, f\"Expected {expected}, got {result}\"\n+\n+    # Additional coverage tests\n+    M2 = eye(3)\n+    V2 = ones(3, 1)\n+    expected2 = Matrix([\n+        [1, 0, 1, 0],\n+        [0, 1, 1, 0],\n+        [0, 0, 1, 1]\n+    ])\n+    result2 = M2.col_insert(2, V2)\n+    assert result2 == expected2, f\"Expected {expected2}, got {result2}\"\n+\n+    # Edge case with inserting at the beginning\n+    M3 = eye(3)\n+    V3 = Matrix([[-1, -1, -1]]).T\n+    expected3 = Matrix([\n+        [-1, 1, 0, 0],\n+        [-1, 0, 1, 0],\n+        [-1, 0, 0, 1]\n+    ])\n+    result3 = M3.col_insert(0, V3)\n+    assert result3 == expected3, f\"Expected {expected3}, got {result3}\"\n+\n+    # Edge case with inserting at the end\n+    M4 = eye(2)\n+    V4 = Matrix([[9, 9]]).T\n+    expected4 = Matrix([\n+        [1, 0, 9],\n+        [0, 1, 9]\n+    ])\n+    result4 = M4.col_insert(2, V4)\n+    assert result4 == expected4, f\"Expected {expected4}, got {result4}\"\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..4519d15 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -665,6 +665,17 @@ def test_Poly_sub():\n def test_Poly_mul():\n     assert Poly(0, x).mul(Poly(0, x)) == Poly(0, x)\n     assert Poly(0, x) * Poly(0, x) == Poly(0, x)\n+from sympy import Symbol, Poly, S\n+\n+x = Symbol('x')\n+\n+def test_issue_13079():\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+\n \n     assert Poly(2, x).mul(Poly(4, x)) == Poly(8, x)\n     assert Poly(2, x, y) * Poly(4, x) == Poly(8, x, y)\n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..1e9d341 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,24 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_custom():\n+    # Original test cases for custom mul_symbol\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3 \\, x^{2} \\, y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\, 3^{x}\"\n+    \n+    # Additional test cases for various expressions\n+    assert latex(x*y*z, mul_symbol='\\\\,') == r\"x \\, y \\, z\"\n+    assert latex(2*x*y*z, mul_symbol='\\\\,') == r\"2 \\, x \\, y \\, z\"\n+    assert latex(x**2*y**3*z, mul_symbol='\\\\,') == r\"x^{2} \\, y^{3} \\, z\"\n+    assert latex((x + 1)*(y + 1), mul_symbol='\\\\,') == r\"\\left(x + 1\\right) \\, \\left(y + 1\\right)\"\n+    \n+    # Test with nested expressions\n+    assert latex((x + y)*(z + 1), mul_symbol='\\\\,') == r\"\\left(x + y\\right) \\, \\left(z + 1\\right)\"\n+    \n+    # Ensure compatibility with default behavior\n+    assert latex(2*x*y) == \"2 x y\"\n+    assert latex(2*x*y, mul_symbol='dot') == r\"2 \\cdot x \\cdot y\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..9148166 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,6 +402,31 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n+def test_issue_13835():\n+    from sympy import symbols, Matrix\n+\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+\n+    # These are the assertions from the original patch\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n+\n+    # Additional cases to ensure comprehensive testing of the issue:\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a\n+    assert M(3).det() == -3*a**2 - 2*a\n+    assert M(4).det() == 0\n+    # Check if determinant for higher dimensions are consistent, without errors\n+    assert M(8).det() == 0\n+    assert M(9).det() == 0\n+    # Determinant for a symbolically higher matrix size to catch possible errors\n+    try:\n+        M(10).det()\n+    except Exception as e:\n+        assert False, f\"Unexpected error: {e}\"\n+\n \n def test_det_LU_decomposition():\n \n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..c930962 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -708,8 +708,91 @@ def test_issue_10003():\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n+from sympy import Piecewise, exp, lowergamma, uppergamma, gamma, asin, Rational, sqrt, pi\n+from sympy.utilities.randtest import verify_numerically as tn\n \n-def test_precomputed_cdf():\n+def test_arcsin_cdf():\n+    a, b = 0, 3\n+    X = Arcsin('x', a, b)\n+    cdf_expr = cdf(X)(1)\n+    expected_cdf = Piecewise((0, 1 < a), (2/pi*asin(sqrt((1 - a)/(b - a))), a <= 1), (1, True))\n+    assert tn(cdf_expr, expected_cdf, x)\n+\n+def test_dagum_cdf():\n+    a, b, p = Rational(1, 3), Rational(1, 5), 2\n+    X = Dagum('x', p, a, b)\n+    cdf_expr = cdf(X)(3)\n+    expected_cdf = Piecewise(((1 + (3/b)**(-a))**(-p), 3 >= 0), (0, True))\n+    assert tn(cdf_expr, expected_cdf, x)\n+\n+def test_erlang_cdf():\n+    k, l = 1, 1\n+    X = Erlang('x', k, l)\n+    cdf_expr = cdf(X)(1)\n+    expected_cdf = Piecewise((lowergamma(k, l)/gamma(k), 1 > 0), (0, True))\n+    assert tn(cdf_expr, expected_cdf, x)\n+\n+def test_frechet_cdf():\n+    a, s, m = Rational(4, 3), 1, 2\n+    X = Frechet('x', a, s, m)\n+    cdf_expr = cdf(X)(3)\n+    expected_cdf = Piecewise((exp(-(m - 3/s) ** (-a)), 3 >= m), (0, True))\n+    assert tn(cdf_expr, expected_cdf, x)\n+\n+def test_gamma_cdf():\n+    k, theta = 0.1, 2\n+    X = Gamma('x', k, theta)\n+    cdf_expr = cdf(X)(3)\n+    expected_cdf = Piecewise((lowergamma(k, 3/theta)/gamma(k), 3 >= 0), (0, True))\n+    assert tn(cdf_expr, expected_cdf, x)\n+\n+def test_gamma_inverse_cdf():\n+    a, b = Rational(5, 7), 2\n+    X = GammaInverse('x', a, b)\n+    cdf_expr = cdf(X)(3)\n+    expected_cdf = Piecewise((uppergamma(a, b/3)/gamma(a), 3 > 0), (0, True))\n+    assert tn(cdf_expr, expected_cdf, x)\n+\n+def test_kumaraswamy_cdf():\n+    a, b = Rational(1, 123), 5\n+    X = Kumaraswamy('x', a, b)\n+    cdf_expr = cdf(X)(Rational(1, 3))\n+    expected_cdf = Piecewise((-(1 - Rational(1, 3)**a)**b + 1, Rational(1, 3) <= 1), (1, True))\n+    assert tn(cdf_expr, expected_cdf, x)\n+\n+def test_laplace_cdf():\n+    mu, b = 2, 3\n+    X = Laplace('x', mu, b)\n+    cdf_expr = cdf(X)(5)\n+    expected_cdf = Piecewise((exp((5-mu)/b)/2, mu > 5), (-exp(-(5-mu)/b)/2 + 1, True))\n+    assert tn(cdf_expr, expected_cdf, x)\n+\n+def test_logistic_cdf():\n+    mu, s = 1, 0.1\n+    X = Logistic('x', mu, s)\n+    cdf_expr = cdf(X)(2)\n+    expected_cdf = 1/(exp((mu - 2)/s) + 1)\n+    assert tn(cdf_expr, expected_cdf, x)\n+\n+def test_nakagami_cdf():\n+    mu, omega = Rational(7, 3), 1\n+    X = Nakagami('x', mu, omega)\n+    cdf_expr = cdf(X)(2)\n+    expected_cdf = Piecewise((lowergamma(mu, mu*(2**2)/omega)/gamma(mu), 2 > 0), (0, True))\n+    assert tn(cdf_expr, expected_cdf, x)\n+\n+def test_studentT_cdf():\n+    nu = 10\n+    X = StudentT('x', nu)\n+    cdf_expr = cdf(X)(2)\n+    expected_cdf = 1/2 + 2*gamma(nu/2 + 1/2)*hyper((1/2, nu/2 + 1/2), (3/2,), -2**2/nu)/(sqrt(pi)*sqrt(nu)*gamma(nu/2))\n+    assert tn(cdf_expr, expected_cdf, x)\n+\n+def test_uniformsum_cdf():\n+    X = UniformSum('x', 5)\n+    cdf_expr = cdf(X)(2)\n+    # Expected result is a more complex piecewise sum that can be numerically verified\n+    assert not cdf_expr.has('Integral')  # should not contain unevaluated integral\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..541d823 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -38,6 +38,38 @@ def test_tensor_product_expand():\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n \n+def test_evaluating_tensorproduct_powers():\n+    from sympy import Symbol\n+    from sympy.physics.quantum import TensorProduct as TP\n+    from sympy.physics.quantum import tensor_product_simp as tps\n+    from sympy.physics.paulialgebra import Pauli\n+\n+    a = Symbol('a', commutative=False)\n+    x = Symbol('x')\n+\n+    # Test cases according to the issue description\n+\n+    # Testing direct powers of tensor products\n+    t1 = TP(1, 1) * TP(1, 1)\n+    assert tps(t1) == TP(1, 1**2)\n+    \n+    t2 = TP(1, Pauli(3)) * TP(1, Pauli(3))\n+    assert tps(t2) == TP(1, Pauli(3)**2)\n+\n+    # Expanded tensor products with substitution\n+    expr1 = tps(TP(1, 1) * TP(1, a)).subs(a, 1)\n+    assert expr1 == TP(1, 1)\n+\n+    expr2 = tps(TP(1, Pauli(3)) * TP(1, a)).subs(a, Pauli(3))\n+    assert expr2 == TP(1, 1)\n+\n+    # Ensure scalar multiplication with powers is handled\n+    assert tps(x * TP(a, a)**2) == x * TP(a**2, a**2)\n+\n+    # Complex expressions involving powers and additional tensor products\n+    assert tps(x * (TP(a, a)**2) * TP(a, a)) == x * TP(a**2 * a, a**2 * a)\n+\n+\n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..9a92559 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -80,6 +80,13 @@ def test_python_keyword_function_name_escaping():\n \n \n def test_python_relational():\n+    # Original issue: python should generate a proper code for Eq(x, y)\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n+    # Additional test to ensure Ne relational works correctly with python\n+    assert python(Ne(x/(y + 1), y**2)) in [\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(1 + y), y**2)\",\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(y + 1), y**2)\"\n+    ]\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..1ba9522 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,9 +4,19 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+def test_vector_add_zero():\n+    assert N.x + 0 == N.x  # Test initial assertion from original test patch\n+    assert (0 * N.x) + N.x == N.x  # Test adding zero-scaled vector\n+    assert sum([N.x, 0 * N.x]) == N.x  # Test sum function with zero-scaled vector\n+    assert N.x + (N.x * 0) == N.x  # Test reversed addition with zero-scaled vector\n+    assert (0 * N.x) + (0 * N.y) == Vector(0)  # Test sum of two zero-scaled vectors\n+from sympy import symbols\n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n-\n+N = ReferenceFrame('N')\n+x, y, z = symbols('x y z')\n \n def test_Vector():\n     assert A.x != A.y\n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..7aede9e 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -134,7 +135,16 @@ def test_math_lambda():\n \n \n @conserve_mpmath_dps\n-def test_mpmath_lambda():\n+def test_rational_wrapping_with_mpmath():\n+    mpmath.mp.dps = 50\n+    x = symbols('x')\n+    f = lambdify(x, Rational(232, 3), modules='mpmath')\n+    assert f(0) == mpmath.mpf(232) / mpmath.mpf(3)\n+\n+    eqn = Eq(Rational(232, 3), x)\n+    g = lambdify(x, eqn.lhs - eqn.rhs, modules='mpmath')\n+    source = inspect.getsource(g)\n+    assert 'mpmath.mpf' in source\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n     f = lambdify(x, sin(x), \"mpmath\")\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..a8c53b3 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -79,8 +80,18 @@ def test_ndim_array_initiation():\n     assert rank_zero_array[()] == x\n     raises(ValueError, lambda: rank_zero_array[0])\n \n-\n-def test_reshape():\n+def test_rank_zero_array_len():\n+    from sympy import Array\n+    # Create a rank-0 array\n+    rank_zero_array = Array(3)\n+    \n+    # Test for len function\n+    assert len(rank_zero_array) == 1, \"Expected len(rank_zero_array) to be 1\"\n+\n+    # Ensure it behaves similarly to Numpy's behavior\n+    import numpy\n+    numpy_rank_zero_array = numpy.asarray(3)\n+    assert numpy_rank_zero_array.size == len(rank_zero_array), \"Expected equal sizes between Numpy and SymPy rank-0 arrays\"\n     array = ImmutableDenseNDimArray(range(50), 50)\n     assert array.shape == (50,)\n     assert array.rank() == 1\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..1053cfb 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,20 @@\n+\n+def test_Max_Min():\n+    # Original test case\n+    assert mcode(Max(x,y,z)*Min(y,z)) == \"Max[x, y, z]*Min[y, z]\"\n+    \n+    # New test cases to verify the issue\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"  # Ensure Max with a single symbol and number is in correct format\n+    assert mcode(Max(3, x)) == \"Max[3, x]\"  # Ensure order of arguments doesn't affect output\n+    assert mcode(Max(5, 2, x, y)) == \"Max[5, 2, x, y]\"  # Ensure multiple arguments are handled correctly\n+    assert mcode(Max(Max(x, 2), y)) == \"Max[Max[x, 2], y]\"  # Nested Max functions\n+    assert mcode(Min(x, 3, z)) == \"Min[x, 3, z]\"  # Ensure Min function is unaffected and correct\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..68be81b 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,35 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_to_rotation_matrix():\n+    from sympy import symbols, cos, sin, Matrix, trigsimp\n+    from sympy.algebras.quaternion import Quaternion\n+\n+    x = symbols('x')\n+    # Test for a quaternion rotating around the x-axis\n+    q_x = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    assert trigsimp(q_x.to_rotation_matrix()) == Matrix([\n+        [1,      0,       0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]\n+    ])\n+\n+    # Test for a quaternion rotating around the y-axis\n+    q_y = Quaternion(cos(x/2), 0, sin(x/2), 0)\n+    assert trigsimp(q_y.to_rotation_matrix()) == Matrix([\n+        [cos(x), 0, sin(x)],\n+        [0,      1,      0],\n+        [-sin(x), 0, cos(x)]\n+    ])\n+\n+    # Test for a quaternion rotating around the z-axis\n+    q_z = Quaternion(cos(x/2), 0, 0, sin(x/2))\n+    assert trigsimp(q_z.to_rotation_matrix()) == Matrix([\n+        [cos(x), -sin(x), 0],\n+        [sin(x),  cos(x), 0],\n+        [0,          0,   1]\n+    ])\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +148,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..39c5856 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1508,7 +1508,18 @@ def test_issue_5919():\n     assert (x/(y*(1 + y))).expand() == x/(y**2 + y)\n \n \n+from sympy import Symbol, symbols, Mod, factorial, S, sqrt, Float, pi, I, Pow, nan, raises\n+\n def test_Mod():\n+    # Additional test cases for issue 15493\n+    i, j, k = symbols('i j k', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+    assert Mod(i + 3*j, j) == Mod(i, j)\n+    assert Mod(4*i + j, 2) == Mod(j, 2)\n+    assert Mod(6*i*x, 3*i*y) == i*Mod(2*x, y)\n+    assert Mod(i*i, 3*i) == i*Mod(i, 3)\n     assert Mod(x, 1).func is Mod\n     assert pi % pi == S.Zero\n     assert Mod(5, 3) == 2\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..050d25b 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,7 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +156,7 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..56bcf44 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1987,10 +1987,28 @@ def test_Add_is_zero():\n     assert (x + y).is_zero\n \n \n-def test_issue_14392():\n+def test_issue_15873():\n+    from sympy import I, simplify\n+    # The problematic expression from the issue\n+    e = -2*I + (1 + I)**2\n+    # Ensure that the output is None before simplification\n+    assert e.is_zero is None\n+    # Ensure that after simplification, the expression is identified as zero\n+    assert simplify(e).is_zero is True\n+\n+    # Additional test cases for complex numbers\n+    e2 = I + 1 - (1 + I)\n+    assert e2.is_zero is None  # Expect None, as it's non-obvious without simplification\n+    assert simplify(e2).is_zero is True  # After simplification, it should be zero\n+\n+    e3 = (1 + I)*(1 - I)\n+    assert e3.is_zero is False  # Since it's 1 (non-zero), the result should be False\n+\n+    e4 = 0*I\n+    assert e4.is_zero is True  # Should be True because 0*I is zero\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..ef9f567 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -478,6 +478,53 @@ def test_logcombine_complex_coeff():\n         i + log(x**2)\n \n \n+from sympy import Symbol, posify\n+\n+def test_posify_preserves_assumptions():\n+    # Test if 'posify' preserves certain assumptions\n+\n+    # Test case for finite assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    \n+    # Check that the 'finite' assumption is preserved post posify\n+    expected_assumptions = {\n+        'positive': True,\n+        'zero': False,\n+        'imaginary': False,\n+        'nonpositive': False,\n+        'commutative': True,\n+        'hermitian': True,\n+        'real': True,\n+        'nonzero': True,\n+        'nonnegative': True,\n+        'negative': False,\n+        'complex': True,\n+        'finite': True,\n+        'infinite': False\n+    }\n+    \n+    assert eq.assumptions0 == expected_assumptions\n+\n+    # Additional test case for integer assumption\n+    i = Symbol('i', integer=True)\n+    eq, _ = posify(i)\n+    assert eq.is_integer is True\n+\n+    # Check rational assumption\n+    r = Symbol('r', rational=True)\n+    eq, _ = posify(r)\n+    assert eq.is_rational is True\n+\n+    # Check even and odd assumptions\n+    e = Symbol('e', even=True)\n+    eq, _ = posify(e)\n+    assert eq.is_even is True\n+\n+    o = Symbol('o', odd=True)\n+    eq, _ = posify(o)\n+    assert eq.is_odd is True\n+\n def test_issue_5950():\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..ce82742 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -35,8 +37,13 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n-\n-def test_MpmathPrinter():\n+def test_PythonCodePrinter_Indexed():\n+    prntr = PythonCodePrinter()\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(p[x, y, z]) == 'p[x, y, z]'\n+    assert prntr.doprint(p[5]) == 'p[5]'\n+    assert prntr.doprint(p[0]) == 'p[0]'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n     assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..c17f012 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -67,7 +67,13 @@ def test_cython_wrapper_outarg():\n     assert source == expected\n \n \n-def test_cython_wrapper_inoutarg():\n+def test_cython_autowrap_with_unused_array_argument():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    func = autowrap(expr, args=(x,), backend='cython')\n+    \n+    result = func(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n     code_gen = CythonCodeWrapper(C99CodeGen())\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..334a659 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -238,6 +238,8 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n \n+from sympy.crypto.crypto import encode_morse\n+\n def test_encode_morse():\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n@@ -248,8 +250,15 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n-\n-def test_decode_morse():\n+def test_encode_morse_issue():\n+    # Test the specific issue case for '1'\n+    assert encode_morse('1') == '.----'\n+    # Original patch test cases\n+    assert encode_morse('12345') == '.----|..---|...--|....-|.....'\n+    assert encode_morse('67890') == '-....|--...|---..|----.|-----'\n+    \n+    # Additional test case covering a mix of numbers to verify the fix does not break others\n+    assert encode_morse('9876543210') == '----.|---..|--...|-....|.....|....-|...--|..---|.----|-----'\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_fu.py b/sympy/simplify/tests/test_fu.py\nindex 135b4cd..f6a516a 100644\n--- a/sympy/simplify/tests/test_fu.py\n+++ b/sympy/simplify/tests/test_fu.py\n@@ -67,8 +67,20 @@ def test_TR3():\n         j = TR3(i)\n         assert verify_numerically(i, j) and i.func != j.func\n \n-\n-def test__TR56():\n+def test_issue_17137_additional():\n+    from sympy import Symbol, cos, sin, simplify, I\n+\n+    x = Symbol('x')\n+    # Original issue tests\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+\n+    # Additional tests\n+    assert simplify(sin(x)**I) == sin(x)**I  # Similar function test with sin\n+    assert simplify((sin(x) + cos(x))**I) == (sin(x) + cos(x))**I  # Combination test\n+    assert simplify((sin(x) / cos(x))**I) == (sin(x) / cos(x))**I  # Division test\n+    assert simplify(cos(x)**(I - 1)) == cos(x)**(I - 1)  # Subtraction in the exponent\n+    assert simplify(cos(x)**(I + I)) == cos(x)**(I + I)  # Multiple I's in exponent\n     h = lambda x: 1 - x\n     assert T(sin(x)**3, sin, cos, h, 4, False) == sin(x)**3\n     assert T(sin(x)**10, sin, cos, h, 4, False) == sin(x)**10\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..d2388ca 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,5 +1,7 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n-from sympy.simplify.sqrtdenest import _subsets as subsets\n+from sympy.simplify.sqrtdenest import _subsets as subsets, _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.utilities.pytest import slow\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n@@ -175,8 +177,15 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n-\n-def test_issue_5653():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    # Verify that the expression returns unchanged instead of causing IndexError\n+    assert sqrtdenest((3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2) == (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    # Verify unchanged behavior for other non-denestable expressions\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n+    # Verify correct matching pattern\n+    assert _sqrt_match(4 + I) == []\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..2f58d39 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,9 +1,11 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n+from sympy import sympify\n \n \n def test_point():\n@@ -95,6 +97,14 @@ def test_point():\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n+    # Test scalar multiplication in different orders\n+    assert (p3 + p4 * sympify(2.0)) == Point(2, 2)\n+    assert (p3 + sympify(2.0) * p4) == Point(2, 2)\n+\n+    # Test multiplication order does not affect complex expressions\n+    assert (sympify(3.0) * p4 + sympify(2.0) * p5) == ((p4 * 3) + (p5 * 2))\n+    assert (p4 * sympify(3.0) + p5 * sympify(2.0)) == (sympify(3.0) * p4 + sympify(2.0) * p5)\n+\n     # Point differences should be simplified\n     assert Point(x*(x - 1), y) - Point(x**2 - x, y + 1) == Point(0, -1)\n \n",
  "sympy__sympy-18189": "",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..2f57c64 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -671,13 +671,25 @@ def test_latex_derivatives():\n     assert latex(diff(f(x), (x, Max(n1, n2)))) == \\\n         r'\\frac{d^{\\max\\left(n_{1}, n_{2}\\right)}}{d x^{\\max\\left(n_{1}, n_{2}\\right)}} f{\\left(x \\right)}'\n \n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\\\left. \\\\left(- x + y\\\\right) \\\\right|_{\\\\substack{ x=1 }}'\n+\n \n def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n \n-def test_latex_integrals():\n+def test_latex_subs_parenthesizing():\n+    from sympy import Subs\n+    from sympy.abc import x, y\n+\n+    # Original issue test case\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\\\left. \\\\left(- x + y\\\\right) \\\\right|_{\\\\substack{ x=1 }}'\n+\n+    # Additional test cases\n+    assert latex(-2*Subs(x-y, (x,), (2,))) == r'-2 \\\\left. \\\\left(x - y\\\\right) \\\\right|_{\\\\substack{ x=2 }}'\n+    assert latex(4*Subs(x*y - 1, (x, y), (a, b))) == r'4 \\\\left. \\\\left(x y - 1\\\\right) \\\\right|_{\\\\substack{ x=a\\\\ y=b }}'\n+    assert latex(Subs(x**2 + y**2, (x, y), (0, 0))) == r'\\\\left. \\\\left(x^{2} + y^{2}\\\\right) \\\\right|_{\\\\substack{ x=0\\\\ y=0 }}'\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n         r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..1050a40 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,3 +1,4 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n     EmptySet, Union, Contains)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n@@ -129,6 +130,14 @@ def test_subs_CondSet():\n     assert ConditionSet(f(x), f(x) < 1, {w, z}\n         ).subs(f(x), y) == ConditionSet(y, y < 1, {w, z})\n \n+    # Test for substitution in ConditionSet with ImageSet (issue example)\n+    from sympy import asin, pi, Lambda, imageset\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    condset = ConditionSet(x, Contains(y, Interval(-1, 1)), img1)\n+    assert condset.subs(y, S.One/3).dummy_eq(img2)\n+\n \n def test_subs_CondSet_tebr():\n     with warns_deprecated_sympy():\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..d1595d6 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -514,7 +514,34 @@ def test_kernS():\n     assert one != 1 and one.expand() == 1\n \n \n-def test_issue_6540_6552():\n+def test_issue_kernS_unboundlocalerror():\n+    from sympy.abc import x, y, z\n+\n+    # Basic test case that caused the original UnboundLocalError\n+    # This should pass without raising an error\n+    text = \"(2*x)/(x-1)\"\n+    expected_expr = 2*x/(x-1)\n+    assert kernS(text) == expected_expr\n+    \n+    # Test with a simple expression that does not involve operations\n+    assert kernS(\"x\") == x\n+\n+    # Test with more complex nested expressions\n+    assert kernS(\"(x + y)*(z + 1)/(x-1)\") == (x + y)*(z + 1)/(x - 1)\n+\n+    # Test with expressions involving multiple operations with different precedence\n+    assert kernS(\"x - (x - 1)\") != 1\n+    assert kernS(\"(1-x)/(1-(1-y)*x)\").simplify() == (1-x)/(1-(1-y)*x)\n+    assert kernS(\"(2**-1)*(x - 1)\").simplify() == (2**-1)*(x - 1)\n+\n+    # Edge case with nested parenthesis\n+    assert kernS(\"-(x-(x-1))\") == -(x-(x-1))\n+\n+    # Expressions involving exponentials and trigonometry to test robustness\n+    assert kernS(\"exp(-x)\") == exp(-x)\n+    assert kernS(\"sin(x)**2 + cos(x)**2\") == sin(x)**2 + cos(x)**2\n+\n+    print(\"All test_issue_kernS_unboundlocalerror tests passed.\")\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..d84a9f7 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -84,7 +85,13 @@ def test_unitary():\n     assert Dagger(U).is_commutative is False\n \n \n-def test_identity():\n+def test_dagger_identity_operator():\n+    A = Operator('A')\n+    Id = IdentityOperator()\n+\n+    # The result should directly be Dagger(A), without the explicit IdentityOperator\n+    assert Dagger(A) * Id == Dagger(A)\n+    assert Id * Dagger(A) == Dagger(A)\n     I = IdentityOperator()\n     O = Operator('O')\n     x = Symbol(\"x\")\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..acf5056 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -905,6 +905,15 @@ def test_sylow_subgroup():\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 2 > 0\n \n+    # Test cases based on reported issue\n+    G = DihedralGroup(18)\n+    S2 = G.sylow_subgroup(2)\n+    assert S2.order() == 4, \"Sylow 2-subgroup of DihedralGroup(18) should have order 4\"\n+\n+    G = DihedralGroup(50)\n+    S2 = G.sylow_subgroup(2)\n+    assert S2.order() == 4, \"Sylow 2-subgroup of DihedralGroup(50) should have order 4\"\n+\n \n @slow\n def test_presentation():\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..6c4b626 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -512,9 +512,28 @@ def test_partitions():\n             assert  q == RGS_unrank(i, n)\n             i += 1\n         assert i == RGS_enum(n)\n-\n-\n-def test_binary_partitions():\n+def test_partitions_no_reuse():\n+    # Test for issue: ensure partitions does not reuse dictionary objects\n+    result1 = list(partitions(6, k=2))\n+    result2 = list(partitions(6, k=2))\n+    assert result1 == result2, \"Results should be identical\"\n+    assert all(p1 is not p2 for p1, p2 in zip(result1, result2)), \\\n+        \"Partitions should not reuse the same dictionary objects.\"\n+\n+    # Check if modification of one result list affects another\n+    result1[0][2] = 999\n+    assert result1 != result2, \"Modifying one list should not modify the other\"\n+\n+    # Additional similar tests for different calls\n+    result1 = list(partitions(4, k=3))\n+    result2 = list(partitions(4, k=3))\n+    assert result1 == result2, \"Results should be identical\"\n+    assert all(p1 is not p2 for p1, p2 in zip(result1, result2)), \\\n+        \"Partitions should not reuse the same dictionary objects.\"\n+\n+    # Check if modification of one result list affects another\n+    result1[0][3] = 888\n+    assert result1 != result2, \"Modifying one list should not modify the other\"\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n         [4, 2, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2],\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..97a311f 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -571,25 +571,60 @@ def test_Float():\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=10))\n     raises(ValueError, lambda: Float(\"1.23\", dps=3, precision=\"\"))\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=\"\"))\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n     # from NumberSymbol\n     assert same_and_same_prec(Float(pi, 32), pi.evalf(32))\n     assert same_and_same_prec(Float(Catalan), Catalan.evalf())\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n     # oo and nan\n     u = ['inf', '-inf', 'nan', 'iNF', '+inf']\n     v = [oo, -oo, nan, oo, oo]\n     for i, a in zip(u, v):\n         assert Float(i) is a\n-\n-\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n @conserve_mpmath_dps\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n     mp_pi = mpmath.pi()\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n     assert Float(mp_pi, 100) == Float(mp_pi._mpf_, 100) == pi.evalf(100)\n \n     mpmath.mp.dps = 15\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..656ad5b 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -19,6 +20,23 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+    # Test for issue with unexpected PolynomialError during subs\n+    from sympy.functions.elementary.hyperbolic import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    \n+    # Recreate the scenario causing PolynomialError\n+    expr1 = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    \n+    # Test substitution\n+    result = expr1.subs({1: 1.0})\n+    assert result == exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    \n+    # Ensure no error occurs when reattempting substitution without clearing cache\n+    result2 = expr1.subs({1: 1.0})\n+    assert result2 == result\n+\n \n def test_subs_Matrix():\n     z = zeros(2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..238ac6e 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -15,8 +15,47 @@ from sympy.abc import a, b, c, x, y, z\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n \n+from sympy import symbols\n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n+\n+def test_monomials_degrees():\n+    x, y, z = symbols('x y z')\n+    \n+    # Test with min_degrees equal to max_degrees\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    \n+    # Test with min_degrees < max_degrees\n+    assert set(itermonomials([x, y], 3, 2)) == {\n+        x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3\n+    }\n+    \n+    # Test similar example given in the issue for three variables\n+    x1, x2, x3 = symbols('x1, x2, x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {\n+        x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x1*x3**2, x1**2*x3, x2*x3**2, x2**2*x3,\n+        x1*x2*x3\n+    }\n+    \n+    # Additional Test: Ensuring no monomials returned for higher min_degrees than max_degrees\n+    assert set(itermonomials([x, y], 2, 3)) == set()\n+\n+    # Original tests from provided patch also here\n+    x, y = symbols('x y')\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n \n-def test_monomials():\n+    i, j, k = symbols('i j k', commutative=False)\n+    assert set(itermonomials([i, j, k], 2, 2)) == {\n+        k*i, i**2, i*j, j*k, j*i, k**2, j**2, k*j, i*k\n+    }\n+    assert set(itermonomials([i, j, k], 3, 2)) == {\n+        j*k**2, i*k**2, k*i*j, k*i**2, k**2, j*k*j, k*j**2, i*k*i, i*j,\n+        j**2*k, i**2*j, j*i*k, j**3, i**3, k*j*i, j*k*i, j*i,\n+        k**2*j, j*i**2, k*j, k*j*k, i*j*i, j*i*j, i*j**2, j**2,\n+        k*i*k, i**2, j*k, i*k, i*k*j, k**3, i**2*k, j**2*i, k**2*i,\n+        i*j*k, k*i\n+    }\n \n     # total_degree tests\n     assert set(itermonomials([], 0)) == {S.One}\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..a814935 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,12 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    # Testing invariance: expr.func(*expr.args) == expr\n+    assert st.func(*st.args) == st\n+\n+    # Test on subclass\n+    si = Signifier('foobar')\n+    assert si.func(*si.args) == si\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..37bb47b 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -10,6 +11,8 @@ from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n+from sympy.core.parameters import evaluate\n+from sympy.geometry import Point2D\n \n \n def test_point():\n@@ -440,7 +443,12 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Used to give an error with evaluate=False\n+    with evaluate(False):\n+        p = Point2D(1, 2)\n+        assert p == Point2D(1, 2, evaluate=False)\n+        assert isinstance(p, Point2D)\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22914": "",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..d6aec61 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,18 @@ def test_scipy_polys():\n \n \n \n+def test_lambdify_single_element_tuple():\n+    # Test lambdify with a single-element tuple\n+    f = lambdify([], (1,))\n+    assert f() == (1,)\n+    # Verify that the generated code is correct\n+    source = inspect.getsource(f)\n+    # Check that the source code of the returned function matches the expected output\n+    assert \"return (1,)\" in source\n+\n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..1521550 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n-from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n+from sympy.core.function import Function, UndefinedFunction\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n@@ -292,7 +293,23 @@ def test_symbols():\n \n     assert symbols('aa:d') == (aa, ab, ac, ad)\n     assert symbols('aa:d,x:z') == (aa, ab, ac, ad, x, y, z)\n-    assert symbols(('aa:d','x:z')) == ((aa, ab, ac, ad), (x, y, z))\n+    assert symbols(('aa:d', 'x:z')) == ((aa, ab, ac, ad), (x, y, z))\n+\n+    # Test case for issue 23532\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) == UndefinedFunction\n+    assert type(u[1]) == UndefinedFunction\n+\n+    # Additional test cases for more confidence\n+    # Test single symbol with extra parentheses and Function class\n+    v, = symbols(('v:1',), cls=Function)\n+    assert type(v[0]) == UndefinedFunction\n+\n+    # Test tuple unpacking with mixed types\n+    a, (b, c) = symbols('a (b c)', cls=Function)\n+    assert type(a) == UndefinedFunction\n+    assert type(b) == UndefinedFunction\n+    assert type(c) == UndefinedFunction\n \n \n     # issue 6675\n",
  "sympy__sympy-23824": "",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..fe34e22 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -45,7 +45,22 @@ def test_as_set():\n     # containment in a Set -- rewriting as a Set is not yet implemented\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n-\n-def test_type_error():\n+def test_issue_14965():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    from sympy import Reals, Integers, FiniteSet\n+    \n+    # Test to verify that Contains(x, S.Reals).as_set() returns S.Reals\n+    assert Contains(x, Reals).as_set() == Reals\n+    \n+    # Verify that Contains returns the correct set instead of itself\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    assert Contains(x, Integers).as_set() == Integers\n+    \n+    # Test when Contains is expected to be used in Piecewise\n+    from sympy import Piecewise, S\n+    expr = Piecewise((6, Contains(x, Reals).as_set()), (7, S.true))\n+    assert expr.subs(x, 1.5) == 6\n+    assert expr.subs(x, S.Infinity) == 7\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..5720ef8 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,6 +541,29 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy import exp\n+    \n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..4b7a131 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,42 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import Quantity, SI, time, velocity, acceleration, second, meter\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+def test_equivalent_dimensions_in_addition():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1 * t1 + v1\n+    try:\n+        factor, dim = SI._collect_factor_and_dimension(expr1)\n+    except ValueError:\n+        assert False, \"Test failed due to unexpected ValueError for equivalent dimensions\"\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..4ed91f1 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -106,4 +107,16 @@ def test_check_homomorphism():\n     a = Permutation(1,2,3,4)\n     b = Permutation(1,3)\n     G = PermutationGroup([a, b])\n-    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+\n+    # Test case for verifying the issue with _check_homomorphism\n+    D3 = DihedralGroup(3)\n+    # The generators of D3 are rotations and reflections\n+    rho, tau = D3.generators\n+    # Create a homomorphism from D3 to D3 using the same generators as images\n+    T = homomorphism(D3, D3, [rho, tau], [rho, tau])\n+    assert T.is_isomorphism()\n+\n+    # Additional test case for variations of D3, ensuring _check_homomorphism acts correctly\n+    # Reflections and rotations order matters\n+    raises(ValueError, lambda: homomorphism(D3, D3, [tau, rho], [rho, tau]))\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..9752b8d 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -249,9 +249,34 @@ def test_PolyElement_copy():\n     g[(1, 1, 1)] = 7\n     assert f != g\n \n+from sympy import symbols\n+from sympy.polys.rings import ring, ZZ\n+from sympy.testing.pytest import raises\n+\n def test_PolyElement_as_expr():\n+    \n+    # Original test case\n     R, x, y, z = ring(\"x,y,z\", ZZ)\n     f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+    \n+    # New test case with different valid symbols\n+    A, B, C = symbols(\"a,b,c\")\n+    expected_expr = 3*A**2*B - A*B*C + 7*C**3 + 1\n+    assert f.as_expr(A, B, C) == expected_expr\n+\n+    # Test with more symbols than necessary, expect ValueError\n+    D = symbols(\"d\")\n+    raises(ValueError, lambda: f.as_expr(A, B, C, D))\n+\n+    # Test with fewer symbols than necessary, expect ValueError\n+    raises(ValueError, lambda: f.as_expr(A, B))\n+\n+    # Test with same symbols but as a tuple\n+    assert f.as_expr((A, B, C)) == expected_expr\n+\n+    # Test with zero generators\n+    R0, = ring(\"\", ZZ)\n+    assert R0(3).as_expr() == 3\n \n     X, Y, Z = R.symbols\n     g = 3*X**2*Y - X*Y*Z + 7*Z**3 + 1\n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..697a3bd 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -267,6 +267,26 @@ def test_convert_equals_signs():\n     transformations = standard_transformations + \\\n                         (convert_equals_signs, )\n     x = Symbol('x')\n+\n+def test_parse_expr_evaluate_false_for_relationals():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    for text, expected in inputs.items():\n+        assert parse_expr(text, evaluate=False) == expected\n+\n+    # Additional tests to cover edge cases\n+    assert parse_expr(\"x < 1\", evaluate=False) == Lt(x, 1, evaluate=False)\n+    assert parse_expr(\"x <= 1\", evaluate=False) == Le(x, 1, evaluate=False)\n+    assert parse_expr(\"x > 1\", evaluate=False) == Gt(x, 1, evaluate=False)\n+    assert parse_expr(\"x >= 1\", evaluate=False) == Ge(x, 1, evaluate=False)\n+    assert parse_expr(\"x != 1\", evaluate=False) == Ne(x, 1, evaluate=False)\n+    assert parse_expr(\"x == 1\", evaluate=False) == Eq(x, 1, evaluate=False)\n     y = Symbol('y')\n     assert parse_expr(\"1*2=x\", transformations=transformations) == Eq(2, x)\n     assert parse_expr(\"y = x\", transformations=transformations) == Eq(y, x)\n@@ -276,6 +296,26 @@ def test_convert_equals_signs():\n \n def test_parse_function_issue_3539():\n     x = Symbol('x')\n+\n+def test_parse_expr_evaluate_false_for_relationals():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    for text, expected in inputs.items():\n+        assert parse_expr(text, evaluate=False) == expected\n+\n+    # Additional tests to cover edge cases\n+    assert parse_expr(\"x < 1\", evaluate=False) == Lt(x, 1, evaluate=False)\n+    assert parse_expr(\"x <= 1\", evaluate=False) == Le(x, 1, evaluate=False)\n+    assert parse_expr(\"x > 1\", evaluate=False) == Gt(x, 1, evaluate=False)\n+    assert parse_expr(\"x >= 1\", evaluate=False) == Ge(x, 1, evaluate=False)\n+    assert parse_expr(\"x != 1\", evaluate=False) == Ne(x, 1, evaluate=False)\n+    assert parse_expr(\"x == 1\", evaluate=False) == Eq(x, 1, evaluate=False)\n     f = Function('f')\n     assert parse_expr('f(x)') == f(x)\n \n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..f627875 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -35,6 +35,13 @@ from astropy.units.utils import is_effectively_unity\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n         ([\"dex(cm s**-2)\", \"dex(cm/s2)\"], u.DexUnit(u.cm / u.s**2)),\n+        ([\"km/s/Mpc\"], u.km / u.s / u.Mpc),\n+        ([\"km/(s.Mpc)\"], u.km / u.s / u.Mpc),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.kpc**2))),\n+        ([\"1.5\u00d710+11/m\"], u.Unit(1.5e11 / u.m)),\n+        ([\"/s\"], u.s**-1),\n+        \"km/s.Mpc-1\",\n+        \"/s.Mpc\",\n     ],\n )\n def test_unit_grammar(strings, unit):\n@@ -90,6 +97,13 @@ def test_unit_grammar_fail(string):\n         ([\"[cm/s2]\"], dex(u.cm / u.s**2)),\n         ([\"[K]\"], dex(u.K)),\n         ([\"[-]\"], dex(u.dimensionless_unscaled)),\n+        ([\"km/s/Mpc\"], u.km / u.s / u.Mpc),\n+        ([\"km/(s.Mpc)\"], u.km / u.s / u.Mpc),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.kpc**2))),\n+        ([\"1.5\u00d710+11/m\"], u.Unit(1.5e11 / u.m)),\n+        ([\"/s\"], u.s**-1),\n+        \"km/s.Mpc-1\",\n+        \"/s.Mpc\",\n     ],\n )\n def test_cds_grammar(strings, unit):\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..99c14a7 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1899,7 +1899,34 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Author.objects.get(), author)\n \n     @skipUnlessDBFeature('supports_table_check_constraints')\n-    def test_remove_constraint(self):\n+    def test_check_constraint_or_and(self):\n+        app_label = \"test_checkconstraint_or_and\"\n+        constraint_name = \"check_constraint_or_and\"\n+        \n+        from_state = self.set_up_test_model(app_label)\n+        check = models.Q(field_1__isnull=False, flag=True) | models.Q(flag=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        \n+        operation = migrations.AddConstraint(\"TestModel\", constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        \n+        with connection.schema_editor() as editor:\n+            # Forward migration should apply the constraint\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        \n+        TestModel = to_state.apps.get_model(app_label, \"TestModel\")\n+        \n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestModel.objects.create(field_1=None, flag=True)\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestModel.objects.create(field_1=1, flag=None)\n+        \n+        TestModel.objects.bulk_create([\n+            TestModel(field_1=None, flag=False),\n+            TestModel(field_1=1, flag=False),\n+            TestModel(field_1=1, flag=True),\n+        ])\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\n             models.CheckConstraint(check=models.Q(pink__gt=2), name=\"test_remove_constraint_pony_pink_gt_2\"),\n             models.CheckConstraint(check=models.Q(pink__lt=100), name=\"test_remove_constraint_pony_pink_lt_100\"),\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..fcffd0b 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -148,8 +148,27 @@ class URLTranslationTests(URLTestCaseBase):\n \n         with translation.override('pt-br'):\n             self.assertEqual(reverse('users'), '/pt-br/usuarios/')\n+    from django.urls import resolve, reverse, re_path\n+    from django.utils.translation import gettext_lazy as _\n \n     def test_translate_url_utility(self):\n+        # Test URL translation with optional parameters\n+        with translation.override('en'):\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/', 'nl'), '/nl/with-arguments/regular-argument/')\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'), '/nl/with-arguments/regular-argument/optional.html')\n+            \n+            # Testing URLs where optional parts are not included\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/', 'nl'), '/nl/with-arguments/regular-argument/')\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/', 'nl'), '/nl/with-arguments/regular-argument/')\n+\n+            # Test handling of optional parameters in regex\n+            for url_pair in [\n+                # URL without the optional second group\n+                ('/nl/regex_optional/1/', '/en/regex_optional/1/'),\n+                # URL with both groups present\n+                ('/nl/regex_optional/1/2/', '/en/regex_optional/1/2/')\n+            ]:\n+                self.assertEqual(translate_url(url_pair[1], 'nl'), url_pair[0])\n         with translation.override('en'):\n             self.assertEqual(translate_url('/en/nonexistent/', 'nl'), '/en/nonexistent/')\n             self.assertEqual(translate_url('/en/users/', 'nl'), '/nl/gebruikers/')\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..9a1860c 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -8,13 +9,36 @@ from unittest import expectedFailure\n from django import forms\n from django.test import TestCase\n \n+import uuid\n+from django.db import models\n from .models import (\n     ArticleWithAuthor, BachelorParty, BirthdayParty, BusStation, Child,\n     DerivedM, InternalCertificationAudit, ItalianRestaurant, M2MChild,\n     MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n     Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n     SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n+    ArticleWithAuthor, BachelorParty, BirthdayParty, BusStation, Child, Derived,\n+    Congressman, Item, SaveTestCase,\n )\n+    \n+class TestPrimaryKeyReset(TestCase):\n+    def setUp(self):\n+        self.derived = Derived.objects.create(f=True)\n+\n+    def test_reset_primary_key(self):\n+        # Test whether the reset method correctly creates a new object instead of overwriting.\n+        obj1 = Derived.objects.get(pk=self.derived.pk)\n+        obj1.reset()\n+        obj1.save()\n+        self.assertEqual(Derived.objects.count(), 2, \"Resetting PK and saving should create a new object.\")\n+\n+    def test_no_overwrite_on_reset(self):\n+        # Verify the original object is not overwritten.\n+        obj1 = Derived.objects.get(pk=self.derived.pk)\n+        obj1.reset()\n+        obj1.save()\n+        original_obj = Derived.objects.get(pk=self.derived.pk)\n+        self.assertTrue(original_obj.f, \"The original object should not be overwritten.\")\n \n \n class ModelInheritanceTest(TestCase):\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..45132c0 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -683,6 +683,13 @@ class FastDeleteTests(TestCase):\n         # that + fast delete of the related objs.\n         self.assertNumQueries(2, a.delete)\n         self.assertEqual(User.objects.count(), 0)\n+    def test_fast_delete_all(self):\n+        # Check for the absence of subquery in 'DELETE' query for all records.\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Ensure no subquery is used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n \n     def test_fast_delete_empty_no_update_can_self_select(self):\n         \"\"\"\n@@ -702,4 +709,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..f8ea3dc 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,11 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_dictionary_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        with self.assertRaisesMessage(ValidationError, msg % '{}'):\n+            field.clean({}, None)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..b4e648d 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -219,6 +220,38 @@ class PickleabilityTestCase(TestCase):\n         with self.assertNumQueries(0):\n             self.assert_pickles(groups)\n \n+    def test_annotation_values_pickle(self):\n+        # Setting up test data\n+        Happening.objects.create(name='test1')\n+        Happening.objects.create(name='test2')\n+        \n+        # Create a queryset with values and annotations\n+        qs = Happening.objects.values('name').annotate(latest_time=models.Max('when'))\n+        reloaded = Happening.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+        \n+        # Validate that the unpickled queryset returns the correct format\n+        self.assertEqual(\n+            list(reloaded),\n+            [{'name': 'test1', 'latest_time': None}, {'name': 'test2', 'latest_time': None}]\n+        )\n+\n+    def test_annotation_values_list_pickle(self):\n+        Happening.objects.create(name='test1')\n+        Happening.objects.create(name='test2')\n+\n+        tests = [\n+            Happening.objects.values_list('name'),\n+            Happening.objects.values_list('name', flat=True),\n+            Happening.objects.values_list('name', named=True),\n+        ]\n+\n+        for qs in tests:\n+            with self.subTest(qs_type=qs._iterable_class.__name__):\n+                reloaded = Happening.objects.all()\n+                reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+                self.assertEqual(list(reloaded), ['test1', 'test2'])\n+\n     def test_annotation_with_callable_default(self):\n         # Happening.when has a callable default of datetime.datetime.now.\n         qs = Happening.objects.annotate(latest_time=models.Max('when'))\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..d1ad2b4 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,6 +30,15 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n+    def test_chinese_characters_in_jsonfield(self):\n+        field = JSONField()\n+        # Test with Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d\uff0c\u4e16\u754c'}), '{\"a\": \"\u4f60\u597d\uff0c\u4e16\u754c\"}')\n+        # Test with mixed Unicode characters\n+        self.assertEqual(field.prepare_value({'a': '\u4e2d\u56fd', 'b': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\u4e2d\u56fd\", \"b\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        # Test with a list of Unicode strings\n+        self.assertEqual(field.prepare_value(['\u4f60\u597d\uff0c\u4e16\u754c', 'ja\u017a\u0144']), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]')\n+\n     def test_widget(self):\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..bf805cf 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6602,6 +6602,34 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix')\n+    def test_redirect_with_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        expected_redirect_url = '/prefix' + known_url\n+        self.assertRedirects(response, expected_redirect_url, status_code=301, fetch_redirect_response=False)\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/custom/')\n+    def test_redirect_with_custom_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        expected_redirect_url = '/custom' + known_url\n+        self.assertRedirects(response, expected_redirect_url, status_code=301, fetch_redirect_response=False)\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..fdf2edf 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,6 +691,40 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n+    def test_missing_import_in_migration_with_mixin_and_abstract_model(self):\n+        \"\"\"\n+        Test that migration generation correctly imports `models` when using\n+        a mixin and abstract base model.\n+        \"\"\"\n+        models_content = {\n+            'MyField': models.TextField(primary_key=True),\n+        }\n+        \n+        mixin_bases = (models.Model,)\n+\n+        class MyMixin:\n+            pass\n+\n+        operations = [\n+            migrations.CreateModel(\n+                name='MyModel',\n+                fields=[('name', models_content['MyField'])],\n+                options={'abstract': False},\n+                bases=(MyMixin,) + mixin_bases,\n+            ),\n+        ]\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\"operations\": operations})\n+\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+\n+        # Execute the generated migration script to check for import errors\n+        result = self.safe_exec(output)\n+        \n+        self.assertIn('Migration', result)\n+        self.assertIn('models', result) # Ensure 'models' is in output/imports\n+\n     def test_migration_path(self):\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n",
  "django__django-15375": "",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..102b389 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2988,7 +2988,24 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n-        # Deconstruction.\n+        # Additional test case to ensure unnamed index renaming and restoration works correctly.\n+        # Rename unnamed index for unique_together, then revert it and reapply the renaming.\n+        with connection.schema_editor() as editor:\n+            unnamed_index_op = RenameIndex(\"Pony\", \"old_idx_name\", \"new_pony_test_idx\")\n+            # Forward operation initially\n+            unnamed_index_op.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+        # Simulate moving backwards, testing restoration of the index name\n+        with connection.schema_editor() as editor:\n+            unnamed_index_op.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameNotExists(table_name, \"new_pony_test_idx\")\n+        self.assertIndexNameExists(table_name, \"old_idx_name\")  # If the old name should be restored\n+        \n+        # Re-apply renaming to check that the operation is a no-op\n+        with connection.schema_editor() as editor:\n+            unnamed_index_op.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n         self.assertEqual(definition[1], [])\n",
  "django__django-15732": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..108e177 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -595,6 +595,54 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         )\n \n \n+from django.test import TestCase\n+from django.db import connection\n+from django.db import models\n+from django.db.migrations.state import ProjectState\n+from django.db.migrations import operations, migrations\n+from django.test.utils import skipUnlessDBFeature\n+from .test_base import OperationTestBase\n+\n+class TestAlterUniqueTogetherConstraintRemoval(OperationTestBase):\n+    @skipUnlessDBFeature(\"allows_multiple_constraints_on_same_fields\")\n+    def test_drop_unique_together_with_primary_key(self):\n+        \"\"\"\n+        Test dropping a unique_together constraint on a field\n+        that also happens to be a primary key.\n+        \"\"\"\n+        app_label = \"test_duccpk\"\n+        initial_operations = [\n+            migrations.CreateModel(\n+                \"TestModel\",\n+                fields=[\n+                    (\"id\", models.AutoField(primary_key=True)),\n+                    (\"name\", models.CharField(max_length=255, unique=True)),\n+                ],\n+                options={\"unique_together\": {(\"id\",)}},\n+            )\n+        ]\n+\n+        project_state = self.apply_operations(app_label, ProjectState(), initial_operations)\n+        table_name = f\"{app_label}_testmodel\"\n+        pk_constraint_name = f\"{table_name}_pkey\"\n+        unique_together_constraint_name = f\"{table_name}_id_uniq\"\n+\n+        # Ensure both constraints exist\n+        self.assertConstraintExists(table_name, pk_constraint_name)\n+        self.assertConstraintExists(table_name, unique_together_constraint_name)\n+\n+        new_state = project_state.clone()\n+        drop_unique_together_op = migrations.AlterUniqueTogether(\"TestModel\", set())\n+        drop_unique_together_op.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            drop_unique_together_op.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # PK constraint should still exist\n+        self.assertConstraintExists(table_name, pk_constraint_name)\n+        # Unique together constraint should not exist\n+        self.assertConstraintNotExists(table_name, unique_together_constraint_name)\n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..0366012 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3497,6 +3497,10 @@ class FormFieldCallbackTests(SimpleTestCase):\n             )\n \n \n+from django.test import TestCase\n+from django.forms import modelform_factory\n+from .models import Person  # Assuming that Person is defined in models used by tests\n+\n class LocalizedModelFormTest(TestCase):\n     def test_model_form_applies_localize_to_some_fields(self):\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..46d8a29 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -5,13 +5,41 @@ import re\n \n from django.core import serializers\n from django.core.serializers.base import DeserializationError\n-from django.core.serializers.json import DjangoJSONEncoder\n+from django.core import serializers\n+from django.db import models\n+from django.core.exceptions import FieldError\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n from django.utils.translation import gettext_lazy, override\n \n-from .models import Score\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+class TestTag(models.Model):\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+    class TestTagManager(models.Manager):\n+        def get_queryset(self):\n+            return super().get_queryset().select_related(\"master\")\n+\n+    objects = TestTagManager()\n+\n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n+\n+class TestSerializationError(TestCase):\n+    def test_m2m_serialization_with_custom_manager(self):\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+        test.save()\n+        \n+        with self.assertRaises(FieldError, msg=\"FieldError was expected when serializing with select_related and only\"):\n+            serializers.serialize(\"json\", [test])\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n \n \n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..187da36 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -206,8 +206,18 @@ def test_inset_and_secondary():\n def test_cmap(cmap):\n     pickle.dumps(cmap)\n \n+import pytest\n+import matplotlib.pyplot as plt\n \n-def test_unpickle_canvas():\n+def test_dpi_doubling_issue():\n+    initial_dpi = 200\n+    fig = plt.figure(dpi=initial_dpi)\n+    for _ in range(10):\n+        out = BytesIO()\n+        pickle.dump(fig, out)\n+        out.seek(0)\n+        fig = pickle.load(out)\n+        assert fig.dpi == initial_dpi, f\"Unexpected DPI {fig.dpi}, expected {initial_dpi}\"\n     fig = mfigure.Figure()\n     assert fig.canvas is not None\n     out = BytesIO()\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..1c924be 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6586,6 +6586,13 @@ def test_integrate(dask):\n     assert isinstance(actual.data, type(da.data))\n \n     # along y\n+    da = da.copy()\n+\n+    # Test using coord argument in integrate method for DataArray\n+    actual_coord_y = da.integrate(coord=\"y\")\n+    expected_coord_y = expected_y.copy()\n+    assert_equal(actual_coord_y, expected_coord_y)\n+\n     actual = da.integrate(\"y\")\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..3dcb462 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -107,6 +107,40 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import re\n+from typing import Any\n+from pylint.lint import Run\n+\n+CSV_REGEX_COMMA_CASES = [\n+    # Valid cases containing commas in regex\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"foo{1,3}\", [\"foo{1,3}\"]),\n+    # Invalid regex cases\n+    (\"(foo{1,}, foo{1,3})\", \"missing ), unterminated subpattern at position 0\"),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: Any) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\"\"\"\n+    \n+    def _template_run(in_string: str) -> Any:\n+        try:\n+            r = Run([str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"], exit=False)\n+            bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+            return bad_names_rgxs\n+        except SystemExit as e:\n+            return str(e)\n+    \n+    compiled_patterns = _template_run(in_string)\n+    if isinstance(expected, list):\n+        assert compiled_patterns == [re.compile(regex) for regex in expected]\n+    else:\n+        assert expected in compiled_patterns\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..b1d5df4 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -135,10 +135,23 @@ def test_syntax_errors(expr: str, column: int, message: str) -> None:\n         \"while\",\n     ),\n )\n-def test_valid_idents(ident: str) -> None:\n+def test_invalid_keywords_compile() -> None:\n+    \"\"\"Test that compiling expressions with 'None', 'True', and 'False'\n+    does not cause an assertion failure in debug mode.\"\"\"\n+    \n+    invalid_keywords = [\"None\", \"True\", \"False\"]\n+    for keyword in invalid_keywords:\n+        try:\n+            expr = Expression.compile(keyword)\n+            assert expr is not None  # Ensure that compiling does not fail and returns an Expression\n+        except AssertionError:\n+            pytest.fail(f\"Compiling with keyword '{keyword}' caused an assertion failure.\")\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+import pytest\n+from _pytest.mark.expression import Expression\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..7b83300 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -11,6 +11,48 @@\n import pytest\n \n from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n+from sphinx.util.docutils import new_document\n+from sphinx.parsers import RSTParser\n+\n+def parse_rst(app, text):\n+    \"\"\"Utility function to parse restructuredtext\"\"\"\n+    env = app.builder.env\n+    env.temp_data['docname'] = 'index'\n+    document = new_document('', app.env.settings)\n+    parser = RSTParser()\n+    parser.parse(text, document)\n+    app.env.resolve_references(document, 'index', app.builder)\n+    return document\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_function_with_return_none_and_signature(app):\n+    # Testing description mode with 'None' type hint for return\n+    app.config.autodoc_typehints = 'description'\n+    content = \".. py:function:: f1() -> None\"\n+    doctree = parse_rst(app, content)\n+    assert_node(doctree, (addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, \"f1\"],\n+                                                                     addnodes.desc_parameterlist,\n+                                                                     [addnodes.desc_returns, pending_xref, \"None\"])],\n+                                          addnodes.desc_content)))\n+    # Test if 'None' is linked as an external reference in description mode\n+    resolved = [node for node in doctree.traverse(addnodes.pending_xref) if node['reftarget'] == 'None']\n+    assert resolved[0]['reftype'] == 'obj'\n+    assert resolved[0]['refdomain'] == 'py'\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_function_with_return_none_and_nosignature(app):\n+    # Testing signature mode with 'None' type hint for return\n+    app.config.autodoc_typehints = 'signature'\n+    content = \".. py:function:: f1() -> None\"\n+    doctree = parse_rst(app, content)\n+    assert_node(doctree, (addnodes.desc, ([addnodes.desc_signature, ([addnodes.desc_name, \"f1\"],\n+                                                                     addnodes.desc_parameterlist,\n+                                                                     [addnodes.desc_returns, \"None\"])],\n+                                          addnodes.desc_content)))\n+    # Ensure there's no link for None in signature mode\n+    resolved = [node for node in doctree.traverse(addnodes.pending_xref) if node['reftarget'] == 'None']\n+    assert not resolved  # Should be empty\n \n \n @pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n@@ -30,4 +72,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..acba10c 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,7 +1317,55 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n-    def test_parameters_with_class_reference(self):\n+    def test_multiple_parameters(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..1fabf27 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -773,9 +773,52 @@ def test_pydecoratormethod_signature(app):\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n+import pytest\n+from sphinx.testing import restructuredtext\n+from sphinx import addnodes\n+from docutils import nodes\n \n @pytest.mark.sphinx(freshenv=True)\n-def test_module_index(app):\n+def test_type_rtype_ambiguous_class_lookup(app):\n+    text = \"\"\"\n+    .. py:module:: mod\n+\n+    .. py:class:: A\n+    .. py:class:: submod.A\n+    \n+    .. py:function:: f()\n+    \n+        :param A a:\n+        :param submod.A b:\n+        :rtype: A\n+        :rtype: submod.A\n+\n+    .. py:currentmodule:: mod.submod\n+\n+    .. py:function:: g()\n+    \n+        :param A a: BUG: links to mod.A instead of mod.submod.A\n+        :rtype: A\n+    \"\"\"\n+    \n+    # Parse the input document\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    # Test that there are warnings about the ambiguous lookup\n+    warnings = app._warning.getvalue().strip().split(\"\\n\")\n+    expected_warnings = [\n+        \"index.rst:13: WARNING: more than one target found for cross-reference 'A': mod.A, mod.submod.A\",\n+        \"index.rst:15: WARNING: more than one target found for cross-reference 'A': mod.A, mod.submod.A\"\n+    ]\n+    for warning in expected_warnings:\n+        assert warning in warnings\n+\n+    # Verify the expected resolution points to `mod.submod.A` in the context of `mod.submod`\n+    assert_node(doctree[4][1], [nodes.field_list, [nodes.field, [nodes.field_name, \"Parameters\"], \n+                                                   [nodes.field_body, nodes.paragraph, \n+                                                    [pending_xref, addnodes.literal_emphasis, \"A\"]]]])\n+    assert_node(doctree[4][2][0], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"A\",\n+                **{\"py:module\": \"mod.submod\", \"py:class\": \"g\"})\n     text = (\".. py:module:: docutils\\n\"\n             \".. py:module:: sphinx\\n\"\n             \".. py:module:: sphinx.config\\n\"\n",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..ec4b94e 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,3 +1,6 @@\n+\n+_foo = None  #: :meta public:\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n \n@@ -8,4 +11,4 @@ def _public_function(name):\n     \"\"\"public_function is a docstring().\n \n     :meta public:\n-    \"\"\"\n+    \"\"\"\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..b8abda3 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -984,6 +984,42 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n+def test_param_dict_str_str(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:function:: function_name\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"function \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"function_name\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": None})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": None})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": None})\n+\n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-9258": "",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..c2a3a9a 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -832,7 +832,30 @@ def test_autodoc_typehints_description(app):\n             '\\n'\n             '   docstring\\n'\n             in context)\n+import pytest\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={\n+                        'autodoc_typehints': \"description\",\n+                        'autodoc_typehints_description_target': 'documented',\n+                        'napoleon_numpy_docstring': False\n+                    })\n+def test_autodoc_typehints_with_napoleon(app):\n+    # Testing the proper annotation of return types with Napoleon and autodoc_typehints_description_target=configured as documented\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autofunction:: target.typehints.decr\\n'\n+        '\\n'\n+        '   :returns: decremented number\\n'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text()\n+    assert ('target.typehints.decr(a, b=1)\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      decremented number\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n' in context)\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..432bea7 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1069,7 +1069,13 @@ def test_conditionset():\n \n \n @XFAIL\n-def test_conditionset_equality():\n+def test_issue_18188():\n+    x = Symbol('x')\n+    result1 = Eq(x*cos(x) - 3*sin(x), 0)\n+    assert result1.as_set() == ConditionSet(x, Eq(x*cos(x) - 3*sin(x), 0), Reals)\n+\n+    result2 = Eq(x**2 + sqrt(x*2) + sin(x), 0)\n+    assert result2.as_set() == ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), Reals)\n     ''' Checking equality of different representations of ConditionSet'''\n     assert solveset(Eq(tan(x), y), x) == ConditionSet(x, Eq(tan(x), y), S.Complexes)\n \n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..bc583cd 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3264,6 +3264,31 @@ def test_noncommutative():\n     assert cancel(e + foo(e)) == c + foo(c)\n     assert cancel(e*foo(c)) == c*foo(c)\n \n+from sympy import symbols, sqf_list\n+\n+x, y = symbols('x y')\n+\n+def test_issue_sqf_inconsistency():\n+    # Existing test case, verify it again\n+    p1 = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected_result1 = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p1) == expected_result1\n+    \n+    # Verifying the correct scenario given in the issue\n+    p2 = x**5 - 2*x**4 - 2*x**3 + 4*x**2 + x - 2\n+    expected_result2 = (1, [(x - 2, 1), (x**2 - 1, 2)])\n+    assert sqf_list(p2) == expected_result2\n+\n+    # Additional test case: check with distinct polynomial factors\n+    p3 = (x + 1)**2 * (x - 2)\n+    expected_result3 = (1, [(x + 1, 2), (x - 2, 1)])\n+    assert sqf_list(p3) == expected_result3\n+\n+    # Additional test case: Unaffected simple case\n+    simple_p = x * (x + y)\n+    simple_expected = (1, [(x, 1), (x + y, 1)])\n+    assert sqf_list(simple_p) == simple_expected\n+\n \n def test_to_rational_coeffs():\n     assert to_rational_coeffs(\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..f45d857 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3255,7 +3255,23 @@ def test_issue_5786():\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n \n-def test_noncommutative():\n+def test_factor_extension_issue():\n+    # Import necessary modules and functions\n+    from sympy import symbols, I, expand, factor\n+\n+    # Define the symbols\n+    x, y = symbols('x y')\n+\n+    # Expand the polynomial (x - 1)*(y - 1)\n+    z = expand((x - 1)*(y - 1))\n+\n+    # Check the factorization without extension\n+    factored_without_extension = factor(z)\n+    assert factored_without_extension == (x - 1)*(y - 1), \"Factorization without extension failed.\"\n+\n+    # Check the factorization with complex extension\n+    factored_with_extension = factor(z, extension=[I])\n+    assert factored_with_extension == (x - 1)*(y - 1), \"Factorization with extension dropped a factor.\"\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..829987c 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -11,7 +12,7 @@ from sympy.core.sympify import SympifyError\n from sympy.core.function import Function, Lambda\n from sympy.core.compatibility import default_sort_key\n \n-from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum\n+from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum, Symbol\n from sympy.functions.elementary.exponential import exp\n from sympy.testing.pytest import raises\n from sympy.core import I, pi\n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..b3be597 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -369,6 +369,30 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n+def test_issue_24543_extended():\n+    from sympy import Rational\n+    # Testing more combinations of string and numeric inputs\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+    assert Rational(0.5, 100) == Rational(1, 200)\n+    assert Rational('3', '1000') == Rational(3, 1000)\n+    assert Rational(3, '1000') == Rational(3, 1000)\n+    assert Rational('3', 1000) == Rational(3, 1000)\n+\n+    # Additional edge cases\n+    assert Rational('1.0', '2') == Rational(1, 2)\n+    assert Rational('0', '1') == Rational(0, 1)\n+    assert Rational('-3', '9') == Rational(-1, 3)\n+\n+    # Ensure invalid strings raise appropriate errors\n+    try:\n+        Rational('1.5.0', '100')\n+    except Exception as e:\n+        assert isinstance(e, TypeError)\n+\n+    try:\n+        Rational('pi', '3')\n+    except Exception as e:\n+        assert isinstance(e, TypeError)\n \n def test_Number_new():\n     \"\"\"\"\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..092af89 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3201,6 +3201,24 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         form = SomeForm()\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n+    def test_boundwidget_id_for_label_with_custom_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the custom id provided through\n+        widget.attrs['id'].\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(\n+                    attrs={'id': 'custom_id'}\n+                ),\n+            )\n+\n+        form = SomeForm()\n+        subwidgets = form['field'].subwidgets\n+\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n \n     def test_boundfield_widget_type(self):\n         class SomeForm(Form):\n",
  "matplotlib__matplotlib-20676": "",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..1c1d9a1 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,70 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n+def test_sparse_coder_lasso_cd_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.vstack([ricker_matrix(w, resolution, n_components // 5) for w in (10, 50, 100, 500, 1000)])\n+\n+    X = np.zeros(resolution)\n+    first_quarter = np.arange(resolution) < resolution / 4\n+    X[first_quarter] = 3.0\n+    X[~first_quarter] = -1.0\n+    X = X.reshape(1, -1)\n+\n+    # check that the underlying model fails to converge\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # check that the underlying model converges w/o warnings\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n+    # additional checks for boundary conditions on max_iter\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1000)  # the default value\n+        model.fit_transform(X)\n+    assert not record.list\n+\n+    # check setting max_iter to a higher value to ensure flexibility\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=5000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..90e214b 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -147,6 +147,24 @@ def test_multi_target_sample_weights():\n     X_test = [[1.5, 2.5, 3.5], [3.5, 4.5, 5.5]]\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n+def test_cross_val_predict_with_multioutputclassifier():\n+    from sklearn.datasets import make_multilabel_classification\n+    from sklearn.multioutput import MultiOutputClassifier\n+    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+    from sklearn.model_selection import cross_val_predict\n+\n+    X, Y = make_multilabel_classification()\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+\n+    # This should work without raising an exception\n+    pred = cross_val_predict(mo_lda, X, Y, cv=5)\n+    assert pred.shape == Y.shape\n+\n+    # Check that the fix resolves the AttributeError\n+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')\n+    assert all(isinstance(prob, list) for prob in pred_proba)\n+    assert all(len(prob) == len(mo_lda.estimators_) for prob in pred_proba)\n+\n \n # Import the data\n iris = datasets.load_iris()\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..3c115eb 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -158,16 +158,33 @@ def test_restify_pep_585():\n                                                    \"[:py:class:`int`, ...]]\")\n \n \n-@pytest.mark.skipif(sys.version_info < (3, 10), reason='python 3.10+ is required.')\n+from sphinx.ext.autodoc import mock\n+\n def test_restify_type_union_operator():\n     assert restify(int | None) == \":py:class:`int` | :py:obj:`None`\"  # type: ignore\n     assert restify(int | str) == \":py:class:`int` | :py:class:`str`\"  # type: ignore\n     assert restify(int | str | None) == (\":py:class:`int` | :py:class:`str` | \"  # type: ignore\n                                          \":py:obj:`None`\")\n \n-\n-def test_restify_broken_type_hints():\n-    assert restify(BrokenType) == ':py:class:`tests.test_util_typing.BrokenType`'\n+def test_restify_mocked_inheritance():\n+    with mock(['mocked_base']):\n+        from mocked_base import Base\n+        class Inherited(Base):\n+            pass\n+\n+        documented = restify(Inherited)\n+        # Assert that it captures the mocked base correctly\n+        assert documented.startswith(':py:class:`mocked_base.Base`')\n+\n+def test_stringify_mocked_inheritance():\n+    with mock(['mocked_base']):\n+        from mocked_base import Base\n+        class Inherited(Base):\n+            pass\n+\n+        documented = stringify(Inherited)\n+        # Assert that the stringify captures the mocked base correctly\n+        assert documented.startswith('mocked_base.Base')\n \n \n def test_stringify():\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..02be6de 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,8 +347,18 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n-\n-def test_issue_9983():\n+from sympy import Product, Symbol, S\n+from sympy.abc import n, k\n+\n+def test_issue_13546():\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15) / 2\n+\n+def test_issue_13546_additional_cases():\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 3).doit() == S(35) / 4\n+    assert p.subs(n, 1).doit() == S(3)\n+    assert p.subs(n, 0).doit() == S(1)\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n     assert p.is_convergent() is S.false\n@@ -357,4 +367,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}