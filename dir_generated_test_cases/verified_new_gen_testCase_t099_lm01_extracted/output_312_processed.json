{
  "astropy__astropy-12907": "",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..fc14fee 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,11 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import (\n+    BinTableHDU, HDUList, ImageHDU, PrimaryHDU, connect, table_to_hdu\n+)\n+from astropy.io.registry import identify_format\n+from astropy.table import Table\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..5697622 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -125,6 +125,43 @@ class TestHeaderFunctions(FitsTestCase):\n         \"\"\"Test Card constructor with long integer value\"\"\"\n \n         c = fits.Card(\"long_int\", -467374636747637647347374734737437)\n+\n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation.\n+        \n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        \n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[:len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[:len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[:len(expected_str)] == expected_str\n+\n+    def test_exact_representation(self):\n+        \"\"\"\n+        Additional test case to ensure known problematic float handling is correct.\n+        \"\"\"\n+        k = \"KEYWORD\"\n+        \n+        # Test with a float representation that can classically cause issues\n+        c = fits.Card(k, 0.1, \"Test Comment\")\n+        expected_str = f\"{k} = 0.1 / Test Comment\"\n+        assert str(c)[:len(expected_str)] == expected_str\n+        \n+        c = fits.Card(k, 1e-16, \"Edge case test\")\n+        expected_str = f\"{k} = 1.0E-16 / Edge case test\"\n+        assert str(c)[:len(expected_str)] == expected_str\n         assert str(c) == _pad(\"LONG_INT= -467374636747637647347374734737437\")\n \n     def test_floating_point_value_card(self):\n",
  "astropy__astropy-14539": "",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..fc108d5 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -74,6 +74,14 @@ def test_JsonCustomEncoder():\n     assert newd == tmpd\n \n \n+import inspect\n+import pytest\n+from astropy.utils import misc\n+import locale\n+import json\n+import numpy as np\n+from astropy import units as u\n+\n def test_inherit_docstrings():\n     class Base(metaclass=misc.InheritDocstrings):\n         def __call__(self, *args):\n@@ -88,8 +96,20 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings_for_properties():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return 0\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 42\n \n-def test_set_locale():\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..86d6f10 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -172,6 +172,17 @@ def test_multiple_solidus():\n         u.Unit(\"m/s/kg\", format=\"vounit\")\n \n \n+from astropy import units as u\n+import pytest\n+\n+def test_none_comparison_with_unrecognized_unit():\n+    # Create an unrecognized unit with a silent parse\n+    unit = u.Unit(\"UNKNOWN_UNIT\", parse_strict='silent')\n+\n+    # Test comparison with None\n+    assert unit != None  # Should not raise, should be False\n+    assert not (unit == None)  # Should be False\n+\n def test_unknown_unit3():\n     unit = u.Unit(\"FOO\", parse_strict='silent')\n     assert isinstance(unit, u.UnrecognizedUnit)\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..a6bb78e 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -62,6 +62,25 @@ def test_find_mod_objs():\n     assert 'collections.namedtuple' not in fqns\n     assert namedtuple not in objs\n \n+def test_minversion_edge_cases():\n+    from astropy.utils.introspection import minversion\n+    from types import ModuleType\n+    \n+    module_with_dev_version = ModuleType(str(\"dev_module\"))\n+    module_with_dev_version.__version__ = '1.14.3'\n+    \n+    good_versions = ['1.14dev', '1.0', '1.14']\n+    bad_versions = ['1.15dev', '2.0', '2.0.0']\n+    \n+    for version in good_versions:\n+        assert minversion(module_with_dev_version, version), f\"Expected {module_with_dev_version.__version__} to be >= {version}\"\n+    for version in bad_versions:\n+        assert not minversion(module_with_dev_version, version), f\"Expected {module_with_dev_version.__version__} to be < {version}\"\n+\n+    module_without_patch_version = ModuleType(str(\"no_patch_module\"))\n+    module_without_patch_version.__version__ = '1.14'\n+    assert minversion(module_without_patch_version, '1.14dev'), \"Expected 1.14 to satisfy '1.14dev'\"\n+    assert not minversion(module_without_patch_version, '1.15dev'), \"Expected 1.14 to not satisfy '1.15dev'\"\n \n def test_minversion():\n     from types import ModuleType\n@@ -72,4 +91,4 @@ def test_minversion():\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..2e809a5 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -149,8 +149,30 @@ class TestQuantityCreation:\n \n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n-\n-    def test_copy(self):\n+    \n+    def test_float_dtype_preservation(self):\n+        \"\"\"Test that np.float16 dtype is preserved when creating a Quantity.\"\"\"\n+\n+        # Test np.float16\n+        val_16 = np.array([1., 2.], dtype=np.float16)\n+        q_16 = u.Quantity(val_16, u.km)\n+        assert q_16.dtype == val_16.dtype\n+\n+        # Test np.float32\n+        val_32 = np.array([1., 2.], dtype=np.float32)\n+        q_32 = u.Quantity(val_32, u.km)\n+        assert q_32.dtype == val_32.dtype\n+\n+        # Test np.float64\n+        val_64 = np.array([1., 2.], dtype=np.float64)\n+        q_64 = u.Quantity(val_64, u.km)\n+        assert q_64.dtype == val_64.dtype\n+\n+        # Test np.float128, if available\n+        if hasattr(np, 'float128'):\n+            val_128 = np.array([1., 2.], dtype=np.float128)\n+            q_128 = u.Quantity(val_128, u.km)\n+            assert q_128.dtype == val_128.dtype\n \n         # By default, a new quantity is constructed, but not if copy=False\n \n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..53f96fe 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -215,6 +215,15 @@ TEST_DATA = [\n \n     (URLValidator(EXTENDED_SCHEMES), 'file://localhost/path', None),\n     (URLValidator(EXTENDED_SCHEMES), 'git://example.com/', None),\n+\n+    # Test cases for invalid URLs with unencoded characters in username/password\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),  # \"@\" in username\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),  # \"/\" in username\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),  # multiple colons in username\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),  # \"@\" in username and password\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),  # \"/\" in password\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),  # \"@\" in query params\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),  # special characters\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..bc577af 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -10,6 +11,7 @@ from django.db.models import (\n )\n from django.test import TestCase\n from django.test.utils import Approximate, CaptureQueriesContext\n+from django.db.models.expressions import Case, When\n from django.utils import timezone\n \n from .models import Author, Book, Publisher, Store\n@@ -395,7 +397,28 @@ class AggregateTestCase(TestCase):\n         sql = ctx.captured_queries[0]['sql']\n         self.assertIn('SELECT COUNT(*) ', sql)\n \n-    def test_non_grouped_annotation_not_in_group_by(self):\n+    def test_count_distinct_expression(self):\n+        # This is the original test to verify the fix for the issue.\n+        # It tests Count with a Case condition and distinct=True.\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+        # Additional test case: Use Case condition with different criteria \n+        # and verify correct Count with distinct=True.\n+        aggs = Book.objects.aggregate(\n+            distinct_price=Count(Case(When(price__gt=20, then='price')), distinct=True),\n+        )\n+        # Assuming there are 3 distinct prices above 20.\n+        self.assertEqual(aggs['distinct_price'], 3)\n+\n+        # Additional test case: without any Case condition but with distinct=True.\n+        aggs = Book.objects.aggregate(\n+            distinct_publishers=Count('publisher', distinct=True),\n+        )\n+        # Assuming there are 5 distinct publishers.\n+        self.assertEqual(aggs['distinct_publishers'], 5)\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n         excluded from the group by clause.\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..4698837 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1103,6 +1103,13 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n             self.assertEqual(default_storage.file_permissions_mode, 0o777)\n \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        By default, the FILE_UPLOAD_PERMISSIONS should be set to 0o644.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):  # Clear any setting\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n     def test_override_file_upload_directory_permissions(self):\n         \"\"\"\n         Overriding the FILE_UPLOAD_DIRECTORY_PERMISSIONS setting should be\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..d96a6eb 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -28,8 +30,25 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n+    def test_subprocess_run_with_pgpassword(self):\n+        \"\"\"\n+        Test that subprocess.run is called with PGPASSWORD set in the environment.\n+        \"\"\"\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'password': 'somepassword',\n+            'host': 'somehost',\n+            'port': '444',\n+        }\n \n-    def test_basic(self):\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            self.assertIn('PGPASSWORD', env)\n+            self.assertEqual(env['PGPASSWORD'], dbinfo['password'])\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db(dbinfo)\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +132,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..8e47b07 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -5,6 +5,7 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n+from django.contrib.contenttypes.models import ContentType\n \n \n @override_settings(\n@@ -47,7 +48,20 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_missing_content_type_rename_ignore(self):\n+    class TestRouter:\n+        def db_for_write(self, model, **hints):\n+            return 'default'\n+\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n@@ -63,4 +77,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..af9aae1 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,8 +237,33 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", \"trailingnewline\\n\",\n+            \"trailingnewline\\n\"\n         ]\n+\n+    def test_unicode_validator_with_newline(self):\n+        valid_usernames = ['user1', 'valid_user']\n+        invalid_usernames = ['invalid\\n', 'invalid_user\\n']\n+        v = validators.UnicodeUsernameValidator()\n+        for valid in valid_usernames:\n+            with self.subTest(valid=valid):\n+                v(valid)\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator_with_newline(self):\n+        valid_usernames = ['user1', 'valid_user']\n+        invalid_usernames = ['invalid\\n', 'invalid_user\\n']\n+        v = validators.ASCIIUsernameValidator()\n+        for valid in valid_usernames:\n+            with self.subTest(valid=valid):\n+                v(valid)\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +283,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..c68d5c5 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -2,6 +2,7 @@ import os\n \n from django.core.exceptions import ImproperlyConfigured\n from django.template import Context\n+from django.utils.html import escape\n from django.template.engine import Engine\n from django.test import SimpleTestCase, override_settings\n \n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..110e06e 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,6 +413,10 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_lazy_content(self):\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..26799ff 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -508,6 +508,26 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, ['0001_initial'])\n \n+    @override_settings(\n+        MIGRATION_MODULES={'migrations_no_init': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        loader = MigrationLoader(connection)\n+        loader.load_disk()\n+        migrations = [name for app, name in loader.disk_migrations if app == 'migrations_no_init']\n+        self.assertEqual(migrations, ['0001_initial'])\n+\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations_with_init': 'migrations.test_migrations_standard_package'},\n+    )\n+    def test_loading_standard_package(self):\n+        \"\"\"Migration directories with an __init__.py file are loaded.\"\"\"\n+        loader = MigrationLoader(connection)\n+        loader.load_disk()\n+        migrations = [name for app, name in loader.disk_migrations if app == 'migrations_with_init']\n+        self.assertEqual(migrations, ['0001_initial'])\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..e60d49b 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -607,8 +607,46 @@ class TestInlinePermissions(TestCase):\n     def setUp(self):\n         self.holder_change_url = reverse('admin:admin_inlines_holder2_change', args=(self.holder.id,))\n         self.client.force_login(self.user)\n+    def test_inline_add_m2m_view_only_perm(self):\n+        # Add view permission for Book\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # Verify user with view-only permission cannot add inlines\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n \n-    def test_inline_add_m2m_noperm(self):\n+    def test_inline_change_m2m_view_only_perm(self):\n+        # Add view permission for Book\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # Verify user with view-only permission can see but not modify inlines\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True\n+        )\n+        self.assertContains(response, '<p>%s</p>' % self.book)\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True\n+        )\n         response = self.client.get(reverse('admin:admin_inlines_author_add'))\n         # No change permission on books, so no inline\n         self.assertNotContains(response, '<h2>Author-book relationships</h2>')\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..efcfc6f 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2899,7 +2899,32 @@ class StrictAssignmentTests(SimpleTestCase):\n         })\n \n \n+from django.test import TestCase\n+from myapp.models import BetterWriter\n+from django.forms.models import model_to_dict\n+\n class ModelToDictTests(TestCase):\n+    def test_model_to_dict_empty_fields(self):\n+        \"\"\"Test that model_to_dict returns an empty dict for empty fields list.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n+    def test_model_to_dict_specified_fields(self):\n+        \"\"\"Test that model_to_dict returns only specified fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields=['id', 'name']), {'id': bw.id, 'name': 'Joe Better'})\n+\n+    def test_model_to_dict_exclude_fields_empty(self):\n+        \"\"\"Test that model_to_dict returns all fields when exclude is an empty list.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        expected_fields = {'id': bw.id, 'name': 'Joe Better', 'score': 10, 'writer_ptr': bw.writer_ptr_id}\n+        self.assertEqual(model_to_dict(bw, exclude=[]), expected_fields)\n+\n+    def test_model_to_dict_exclude_fields(self):\n+        \"\"\"Test that model_to_dict excludes specified fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        expected_fields = {'score': 10, 'writer_ptr': bw.writer_ptr_id}\n+        self.assertEqual(model_to_dict(bw, exclude=['id', 'name']), expected_fields)\n     def test_many_to_many(self):\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..d416273 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n@@ -471,6 +473,14 @@ class FastDeleteTests(TestCase):\n         self.assertEqual(User.objects.count(), 1)\n         self.assertTrue(User.objects.filter(pk=u2.pk).exists())\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n     def test_fast_delete_joined_qs(self):\n         a = Avatar.objects.create(desc='a')\n         User.objects.create(avatar=a)\n",
  "django__django-11206": "",
  "django__django-11211": "diff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py\nindex 1dc206f..566fd3c 100644\n--- a/tests/prefetch_related/tests.py\n+++ b/tests/prefetch_related/tests.py\n@@ -1,4 +1,8 @@\n+\n+import uuid\n from django.contrib.contenttypes.models import ContentType\n+from django.contrib.contenttypes.fields import GenericForeignKey\n+from django.db import models\n from django.core.exceptions import ObjectDoesNotExist\n from django.db import connection\n from django.db.models import Prefetch, QuerySet\n@@ -885,7 +889,30 @@ class GenericRelationTests(TestCase):\n             qs = Comment.objects.prefetch_related('content_object')\n             [c.content_object for c in qs]\n \n-    def test_traverse_GFK(self):\n+    def test_prefetch_GFK_uuid_pk(self):\n+        # Create a model with UUID primary key\n+        class FooModel(models.Model):\n+            id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+            name = models.CharField(max_length=20)\n+        \n+        # Create another model with GFK to FooModel\n+        class BarModel(models.Model):\n+            foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE, db_index=True)\n+            foo_object_id = models.CharField(max_length=255, db_index=True)\n+            foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+        \n+        # Register models\n+        FooModel = models.get_model(FooModel)\n+        BarModel = models.get_model(BarModel)\n+        \n+        # Create test data\n+        foo_instance = FooModel.objects.create(name='Test Foo')\n+        bar_instance = BarModel.objects.create(foo_content_type=ContentType.objects.get_for_model(FooModel), foo_object_id=foo_instance.pk)\n+\n+        # Attempt to prefetch and ensure it returns the correct objects\n+        with self.assertNumQueries(2):\n+            queryset = BarModel.objects.prefetch_related('foo')\n+            self.assertEqual([b.foo for b in queryset], [foo_instance])\n         \"\"\"\n         A 'content_object' can be traversed with prefetch_related() and\n         get to related objects on the other side (assuming it is suitably\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..a71a0ef 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -51,7 +51,29 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_column(self):\n+    def test_ssl_certificate(self):\n+        # Test to verify that SSL certificate options are correctly passed to the environment.\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None,\n+                {\n+                    'PGSSLCERT': 'client.crt',\n+                    'PGSSLKEY': 'client.key',\n+                    'PGSSLMODE': 'verify-ca',\n+                    'PGSSLROOTCERT': 'root.crt',\n+                }\n+            )\n+        )\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..c98aaf3 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -82,6 +82,34 @@ class FilteredRelationTests(TestCase):\n                     (self.book4, self.author1),\n                 ], lambda x: (x, x.author_join))\n \n+    def test_with_exclude(self):\n+        # Verify excluding a non-existent FilteredRelation doesn't cause errors and returns expected results\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2]  # Assuming author2 has no book titled \"poem by alice\"\n+        )\n+\n+    def test_exclude_with_no_match(self):\n+        # Test exclude when no FilteredRelation matches; should return all authors\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_non_existent=FilteredRelation('book', condition=Q(book__title__iexact='non existent title')),\n+            ).exclude(book_non_existent__isnull=False),\n+            [self.author1, self.author2]  # Both authors should be returned as none have books titled \"non existent title\"\n+        )\n+\n+    def test_exclude_with_partial_match(self):\n+        # Test exclude with partial matches to check proper exclusions are made\n+        Author.objects.create(name=\"Author 3\")  # Adding more context authors\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_rented=FilteredRelation('book', condition=Q(book__state=Book.RENTED)),\n+            ).exclude(book_rented__isnull=False),\n+            [self.author1, self.author2, Author.objects.last()]  # Ensure appropriate authors not involved with rented books are returned\n+        )\n+\n     def test_without_join(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..fd6d6eb 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -28,7 +28,14 @@ class TestUtilsHtml(SimpleTestCase):\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n             (\"'\", '&#39;'),\n+            (\"<script>alert('xss')</script>\", \"&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;\"),\n+            (\"It's a test & check\", \"It&#x27;s a test &amp; check\"),\n+            (\"Quotes: ' and \\\"\", \"Quotes: &#x27; and &quot;\"),\n         )\n+        # Add extensive edge case tests specifically for escaping single quotes\n+        self.assertEqual(html.escape(\"test's\"), 'test&#x27;s')\n+        self.assertEqual(html.escape(\"<tag attr='value'>\"), '&lt;tag attr=&#x27;value&#x27;&gt;')\n+        self.assertEqual(html.escape('\"'), '&quot;')\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n         for value, output in items:\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..4d334b1 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -254,7 +254,24 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), 'Set foo')\n \n \n-class UtilsTests(SimpleTestCase):\n+    def test_skip_checks_option_effectiveness(self):\n+        \"\"\"\n+        Test that using --skip-checks actually skips the system checks.\n+        \"\"\"\n+        # Write settings with potential issues to trigger system check errors.\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',  # This should cause a check error (staticfiles.E001)\n+        })\n+\n+        # Run command with --skip-checks and ensure no errors are output\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+        # Run command without --skip-checks and ensure errors are captured\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn(\"staticfiles.E001\", err)\n+        self.assertNotEqual(out.strip(), 'Set foo')\n \n     def test_no_existent_external_program(self):\n         msg = 'Error executing a_42_command_that_doesnt_exist_42'\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..a7713cf 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,9 +1,44 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n-class RegexPatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default__root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cached_on_subsequent_calls(self):\n+        # Test that subsequent calls without changing the URLconf return the same resolver instance\n+        resolver1 = get_resolver()\n+        resolver2 = get_resolver()\n+        self.assertIs(resolver1, resolver2)\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_differs_with_different_urlconf(self):\n+        # Test that different URL confs are not the same resolver instance\n+        resolver_path_urls = get_resolver('urlpatterns.path_urls')\n+        resolver_dynamic_urls = get_resolver('urlpatterns.path_dynamic_urls')\n+        self.assertIsNot(resolver_path_urls, resolver_dynamic_urls)\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_get_resolver_returns_cached_instance_after_set_urlconf(self):\n+        # Simulate set_urlconf being called during request handling\n+        resolver_before = get_resolver()\n+        \n+        # Manually mimic set_urlconf behavior\n+        from django.urls.base import set_urlconf\n+        set_urlconf('urlpatterns.new_path_urls')\n+        \n+        resolver_after = get_resolver()\n+        # Since the URLconf didn't change due to set_urlconf, the resolver should remain cached\n+        self.assertIs(resolver_before, resolver_after)\n \n     def test_str(self):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n@@ -12,4 +47,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..a2d00c3 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -226,8 +226,32 @@ class BaseModelBackendTest:\n         authenticate(username='no_such_user', password='test')\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n+from django.contrib.auth import authenticate\n+from django.test import TestCase, override_settings\n \n class ModelBackendTest(BaseModelBackendTest, TestCase):\n+    \n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_with_none_username_or_password(self):\n+        \"\"\"\n+        Test that authenticate doesn't query the database with None username or password.\n+        \"\"\"\n+        # Ensure no queries are executed and no calls to the hasher\n+        test_cases = [\n+            {},  # no username or password\n+            {'username': None, 'password': None},  # explicitly None\n+            {'username': None, 'password': 'test'},  # no username\n+            {'username': 'test', 'password': None},  # no password\n+        ]\n+\n+        for credentials in test_cases:\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    user = authenticate(**credentials)\n+                    self.assertIsNone(user)  # Should return None when credentials are incomplete\n+\n+                # Check that password hasher is not called\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n     \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..b2e0ac2 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,7 +124,18 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_two_annotated_values_list(self):\n+    def test_change_column_with_values_list(self):\n+        # Ensure that changing the list of columns works correctly when using union \n+\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+\n+        # Test values_list with changing columns\n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n+\n+        reserved_name = qs1.union(qs1).values_list('name').get()\n+        self.assertEqual(reserved_name, ('a',))\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n         ).values_list('num', 'count')\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..c4c4eab 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -365,7 +365,23 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n \n-    def test_encoding(self):\n+    def test_message_id_with_non_ascii_dns_and_iso_encoding(self):\n+        with mock.patch('socket.getfqdn', return_value='\u6f22\u5b57'):\n+            # Clearing cached DNS_NAME to force the mock to take effect\n+            delattr(DNS_NAME, '_fqdn')\n+            email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+            email.encoding = 'iso-8859-1'\n+            message = email.message()\n+            self.assertIn('xn--p8s937b', message['Message-ID'])\n+\n+    def test_message_id_with_non_ascii_dns_and_utf8_encoding(self):\n+        with mock.patch('socket.getfqdn', return_value='\u6f22\u5b57'):\n+            # Clearing cached DNS_NAME to force the mock to take effect\n+            delattr(DNS_NAME, '_fqdn')\n+            email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+            email.encoding = 'utf-8'\n+            message = email.message()\n+            self.assertIn('\u6f22\u5b57', message['Message-ID'])\n         \"\"\"\n         Regression for #12791 - Encode body correctly with other encodings\n         than utf-8\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..6f47637 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,48 @@\n+\n+class ListDisplayCheckTests(CheckTestCase):\n+\n+    def test_valid_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_invalid_field_that_does_not_exist(self):\n+        class TestModel(Model):\n+            field = models.IntegerField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' refers to 'non_existent_field', \"\n+            \"which is not a callable, an attribute of 'TestModelAdmin', or an \"\n+            \"attribute or method on 'app_label.TestModel'.\",  # assumed app_label\n+            'admin.E108'\n+        )\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..7d32303 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -2,6 +2,7 @@ from datetime import datetime\n from operator import attrgetter\n \n from django.core.exceptions import FieldError\n+from django.db.models.expressions import OrderBy\n from django.db.models import (\n     CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n@@ -456,6 +457,37 @@ class OrderingTests(TestCase):\n         \"\"\"F expressions can be used in Meta.ordering.\"\"\"\n         articles = OrderedByFArticle.objects.all()\n         articles.filter(headline='Article 2').update(author=self.author_2)\n+\n+    def test_order_by_expression_with_meta_ordering(self):\n+        class ParentArticle(models.Model):\n+            headline = models.CharField(max_length=200)\n+            pub_date = models.DateTimeField()\n+\n+            class Meta:\n+                ordering = [models.F('pub_date').asc()]\n+\n+        class InheritedArticle(ParentArticle):\n+            class Meta:\n+                ordering = [OrderBy(F('headline'), descending=True)]\n+\n+        a1 = InheritedArticle.objects.create(headline=\"A\", pub_date=datetime(2020, 1, 1))\n+        a2 = InheritedArticle.objects.create(headline=\"B\", pub_date=datetime(2020, 1, 2))\n+        \n+        queryset = InheritedArticle.objects.all()\n+        self.assertSequenceEqual(queryset, [a2, a1])\n+\n+    def test_order_by_inherited_with_default_ordering_by_expression(self):\n+        class ProxyInherited(OrderedByFArticle):\n+            class Meta:\n+                proxy = True\n+\n+        proxy_articles = ProxyInherited.objects.order_by('id')\n+        # Assuming that parent model ordering takes place and then overridden ordering logic is applied.\n+        self.assertQuerysetEqual(\n+            proxy_articles,\n+            [repr(self.a1), repr(self.a2), repr(self.a3), repr(self.a4)],\n+            lambda a: repr(a)\n+        )\n         articles.filter(headline='Article 3').update(author=self.author_1)\n         self.assertQuerysetEqual(\n             articles, ['Article 1', 'Article 4', 'Article 3', 'Article 2'],\n",
  "django__django-11603": "",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..49929f5 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -718,7 +718,35 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, 'testapp', 0, [\"RemoveField\"])\n         self.assertOperationAttributes(changes, \"testapp\", 0, 0, name=\"name\")\n \n-    def test_alter_field(self):\n+    def test_fk_dependency_autodetector_issue(self):\n+        \"\"\"\n+        Test for the scenario in which a UUIDField is changed to a ForeignKey\n+        without creating a dependency in the migration.\n+        \"\"\"\n+        # Initial state with UUIDField\n+        app1_initial = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True)),\n+        ])\n+\n+        app2_initial = ModelState(\"testapp2\", \"App2\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+        ])\n+        \n+        # State after changing UUIDField to ForeignKey\n+        app1_modified = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+\n+        changes = self.get_changes([app1_initial, app2_initial], [app1_modified, app2_initial])\n+        \n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         \"\"\"Tests autodetection of new fields.\"\"\"\n         changes = self.get_changes([self.author_name], [self.author_name_longer])\n         # Right number/type of migrations?\n@@ -2399,4 +2427,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..a82828b 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -219,11 +219,37 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser', 'foo', 12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options(self):\n+        out = StringIO()\n+        # Test passing a mutually exclusive group argument as a keyword argument\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue(), \"Failed to find 'foo_id' in the output when passing foo_id as keyword argument.\")\n+        \n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue(), \"Failed to find 'foo_name' in the output when passing foo_name as keyword argument.\")\n+        \n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_args(self):\n         out = StringIO()\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n+    def test_mutually_exclusive_group_required_options(self):\n+        out = StringIO()\n+        # Test passing a mutually exclusive group argument as a keyword argument\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue(), \"Failed to find 'foo_id' in the output when passing foo_id as keyword argument.\")\n+        \n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue(), \"Failed to find 'foo_name' in the output when passing foo_name as keyword argument.\")\n+        \n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n     def test_subparser_dest_required_args(self):\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n",
  "django__django-11790": "",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..bd59df6 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -252,6 +252,28 @@ class WriterTests(SimpleTestCase):\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n \n+    def test_serialize_translated_enum(self):\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')  # Enum value will be translated\n+            BAD = _('Bad')    # Enum value will be translated\n+\n+        # Test the serialization of the default value using the enum name, not the translated value.\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.value, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('Good', migrations.test_writer.TranslatedEnum('Good')), \"\n+            \"('Bad', migrations.test_writer.TranslatedEnum('Bad'))], \"\n+            \"default=migrations.test_writer.TranslatedEnum('Good'))\"\n+        )\n+        \n+        # Ensure that the Enum name, not the translated value, is used in serialization\n+        self.assertSerializedResultEqual(\n+            TranslatedEnum.GOOD,\n+            (\"migrations.test_writer.TranslatedEnum('Good')\", {'import migrations.test_writer'})\n+        )\n+\n     def test_serialize_enums(self):\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..7641021 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,9 +317,29 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_two_digit_year(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Current datetime for boundary testing\n+        current_datetime = datetime(2023, 11, 6, 8, 49, 37)\n+        mocked_datetime.utcnow.return_value = current_datetime\n+\n+        # Test cases with two-digit years\n+        tests = (\n+            ('Sunday, 31-Dec-69 08:49:37 GMT', current_datetime - timedelta(days=(2023-1969)*365)),\n+            ('Sunday, 31-Dec-70 08:49:37 GMT', current_datetime - timedelta(days=(2023-1970)*365)),\n+            ('Sunday, 01-Jan-00 08:49:37 GMT', current_datetime - timedelta(days=(2023-2000)*365)),\n+            ('Sunday, 31-Dec-99 08:49:37 GMT', current_datetime - timedelta(days=(2023-1999)*365)),\n+        )\n+\n+        for rfc850str, expected_timedelta in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                parsed = parse_http_date(rfc850str)\n+                expected_date = datetime.utcfromtimestamp(parsed)\n+                self.assertLessEqual(expected_date.year, mocked_datetime.utcnow().year)\n+                self.assertEqual(expected_date.date(), expected_timedelta.date())\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..b7cc4d3 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3690,8 +3690,47 @@ class CustomRenderer(DjangoTemplates):\n     pass\n \n \n+import copy\n+from django.forms import Form, CharField\n+from django.test import SimpleTestCase\n+\n class RendererTests(SimpleTestCase):\n \n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_field_deep_copy_no_modification_shares_errors(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Initial error message.'}\n+                super().__init__(**kwargs)\n+\n+        field1 = CustomCharField()\n+        field2 = copy.deepcopy(field1)\n+        field2.error_messages['invalid'] = 'Changed error message.'\n+        self.assertNotEqual(field1.error_messages['invalid'], field2.error_messages['invalid'])\n+\n+    # Additional test to ensure no shared references\n+    def test_field_deep_copy_with_other_attributes(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Initial error message.'}\n+                self.test_attr = [1, 2, 3]\n+                super().__init__(**kwargs)\n+\n+        field1 = CustomCharField()\n+        field2 = copy.deepcopy(field1)\n+        field2.test_attr.append(4)\n+        self.assertNotEqual(field1.test_attr, field2.test_attr)\n+\n     def test_default(self):\n         form = Form()\n         self.assertEqual(form.renderer, get_default_renderer())\n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..c1398a3 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,4 +1,6 @@\n+\n from operator import attrgetter\n+from math import ceil\n \n from django.db import IntegrityError, NotSupportedError, connection\n from django.db.models import FileField, Value\n@@ -203,6 +205,29 @@ class BulkCreateTests(TestCase):\n \n     def test_empty_model(self):\n         NoFields.objects.bulk_create([NoFields() for i in range(2)])\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n+            \n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_batch_size_defaults_to_max_batch_size(self):\n+        objs = [Country() for i in range(100)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs)\n+            \n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_small_batch_size(self):\n+        objs = [Country() for i in range(10)]\n+        small_batch_size = 1\n+        with self.assertNumQueries(ceil(len(objs) / small_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=small_batch_size)\n         self.assertEqual(NoFields.objects.count(), 2)\n \n     @skipUnlessDBFeature('has_bulk_insert')\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..0611f2a 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,32 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.test import SimpleTestCase\n+from django.utils.translation import gettext_lazy as _\n+from django.db import models\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class EnumTest(SimpleTestCase):\n+    def setUp(self):\n+        self.my_object = MyObject(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_retrieved_object_is_str(self):\n+        # Simulating database save/retrieve behavior here\n+        my_object = MyObject(my_str_value=MyChoice.FIRST_CHOICE)\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..9205a7b 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -147,8 +147,19 @@ class ChoicesTests(SimpleTestCase):\n             with self.subTest(field=field):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n+from django.db import models\n+from django.test import TestCase\n+\n+class FooBarOverrideTestCase(TestCase):\n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n \n-class GetFieldDisplayTests(SimpleTestCase):\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n \n     def test_choices_and_field_display(self):\n         \"\"\"\n",
  "django__django-12039": "",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..0c16eb7 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -107,7 +108,26 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+\n+    def test_list_remains_list_in_exact_lookup(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name__exact=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+\n+    def test_tuple_remains_tuple_in_exact_lookup(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name__exact=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..b3cfb6c 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -746,4 +746,33 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n+\n+    def test_serialize_nested_class(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+        \n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = A._meta.get_field('field')\n+        serialized_field = MigrationWriter.serialize(field)[0]\n+\n+        # Expect the correct nested Inner class path\n+        self.assertIn(\"test_writer.Outer.Inner\", serialized_field)\n+\n+        # A real life case with Enum\n+        @enum.unique\n+        class State(enum.Enum):\n+            ON = \"on\"\n+            OFF = \"off\"\n+\n+        class Thing(models.Model):\n+            state = EnumField(enum=State)\n+\n+        field = Thing._meta.get_field('state')\n+        serialized_field = MigrationWriter.serialize(field)[0]\n+\n+        # Expect the correct nested State class path\n+        self.assertIn(\"test_writer.Thing.State\", serialized_field)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..7c9b71d 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -831,20 +831,35 @@ class ChangeListTests(TestCase):\n             'form-0-load': '10',\n             '_save': 'Save',\n         }\n+        self.run_regex_character_test('form')\n+        self.run_regex_character_test('form$')\n+        self.run_regex_character_test('form[')\n+        self.run_regex_character_test('form^')\n+\n+    def run_regex_character_test(self, prefix):\n+        \"\"\"Run test for a specific prefix with regex special characters.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            f'{prefix}-TOTAL_FORMS': '2',\n+            f'{prefix}-INITIAL_FORMS': '2',\n+            f'{prefix}-MIN_NUM_FORMS': '0',\n+            f'{prefix}-MAX_NUM_FORMS': '1000',\n+            f'{prefix}-0-uuid': str(a.pk),\n+            f'{prefix}-0-load': '10',\n+        }\n         superuser = self._create_superuser('superuser')\n         self.client.force_login(superuser)\n         changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n         m = SwallowAdmin(Swallow, custom_site)\n         request = self.factory.post(changelist_url, data=data)\n-        queryset = m._get_list_editable_queryset(request, prefix='form')\n+        queryset = m._get_list_editable_queryset(request, prefix=prefix)\n         self.assertEqual(queryset.count(), 1)\n-        data['form-0-uuid'] = 'INVALD_PRIMARY_KEY'\n+        data[f'{prefix}-0-uuid'] = 'INVALID_PRIMARY_KEY'\n         # The unfiltered queryset is returned if there's invalid data.\n         request = self.factory.post(changelist_url, data=data)\n-        queryset = m._get_list_editable_queryset(request, prefix='form')\n+        queryset = m._get_list_editable_queryset(request, prefix=prefix)\n         self.assertEqual(queryset.count(), 2)\n-\n-    def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n         Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/forms_tests/widget_tests/test_checkboxinput.py b/tests/forms_tests/widget_tests/test_checkboxinput.py\nindex 5c5e45d..d029b43 100644\n--- a/tests/forms_tests/widget_tests/test_checkboxinput.py\n+++ b/tests/forms_tests/widget_tests/test_checkboxinput.py\n@@ -81,6 +81,12 @@ class CheckboxInputTest(WidgetTest):\n         result for unchecked checkboxes).\n         \"\"\"\n         self.assertFalse(self.widget.value_from_datadict({}, {}, 'testing'))\n+        \n+    def test_get_context_does_not_mutate_attrs(self):\n+        # Test to check that attrs dictionary is not mutated\n+        attrs = {'checked': False}\n+        self.widget.get_context('name', True, attrs)\n+        self.assertIs(attrs['checked'], False)\n \n     def test_value_from_datadict_string_int(self):\n         value = self.widget.value_from_datadict({'testing': '0'}, {}, 'testing')\n@@ -88,4 +94,4 @@ class CheckboxInputTest(WidgetTest):\n \n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({'field': 'value'}, {}, 'field'), False)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n+        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n",
  "django__django-12209": "",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..35f7564 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -50,6 +50,14 @@ class SimpleTagTests(TagTestCase):\n         c = Context({'value': 42})\n \n         templates = [\n+            # Test simple tag with a keyword-only argument with default value\n+            ('{% load custom %}{% hello greeting=\"hi\" %}', 'hello world'),\n+        \n+            # Test multiple keyword arguments leading to errors\n+            (\n+                '\\'hi\\' received multiple values for keyword argument \\'greeting\\'',\n+                '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}',\n+            ),\n             ('{% load custom %}{% no_params %}', 'no_params - Expected result'),\n             ('{% load custom %}{% one_param 37 %}', 'one_param - Expected result: 37'),\n             ('{% load custom %}{% explicit_no_context 37 %}', 'explicit_no_context - Expected result: 37'),\n@@ -88,6 +96,13 @@ class SimpleTagTests(TagTestCase):\n             self.assertEqual(t.render(c), \"Result: %s\" % entry[1])\n \n     def test_simple_tag_errors(self):\n+        # Additional errors cases for the identified issue\n+        errors += [\n+            (\"'hello' received unexpected keyword argument 'greeting'\",\n+                '{% load custom %}{% hello non_existent=\"oops\" %}'),\n+            (\"'hi' received multiple values for keyword argument 'greeting'\",\n+                '{% load custom %}{% hi greeting=\"hi\" greeting=\"hello\" %}'),\n+        ]\n         errors = [\n             (\"'simple_one_default' received unexpected keyword argument 'three'\",\n                 '{% load custom %}{% simple_one_default 99 two=\"hello\" three=\"foo\" %}'),\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..331be9a 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2486,7 +2487,39 @@ Password: <input type=\"password\" name=\"password\" required>\n         self.assertEqual(f.errors, {})\n         self.assertEqual(f.cleaned_data['file1'], 'resume.txt')\n \n-    def test_basic_processing_in_view(self):\n+    \n+    def test_filefield_with_initial_data_not_required(self):\n+        \"\"\"\n+        Test that FileInput doesn't display the required attribute when initial data exists.\n+        \"\"\"\n+        class FileForm(Form):\n+            file1 = FileField(widget=FileInput)\n+\n+        # Without initial data\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+        # With initial data, should not be marked required\n+        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+    def test_use_required_attribute(self):\n+        \"\"\"\n+        Test that the use_required_attribute() method behaves correctly based on presence of initial data.\n+        \"\"\"\n+        widget = FileInput()\n+\n+        # No initial data, should use required attribute\n+        self.assertIs(widget.use_required_attribute(None), True)\n+\n+        # With initial data, should not use required attribute\n+        self.assertIs(widget.use_required_attribute('resume.txt'), False)\n         class UserRegistration(Form):\n             username = CharField(max_length=10)\n             password1 = CharField(widget=PasswordInput)\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..a318a83 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -138,6 +139,29 @@ class ChoicesTests(SimpleTestCase):\n                 ONE = 1, 'X', 'Invalid'\n \n         msg = \"duplicate values found in <enum 'Fruit'>: PINEAPPLE -> APPLE\"\n+\n+    def test_template_enum_callable(self):\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}True{% else %}False{% endif %}')\n+        rendered_output = template.render(Context({'student': Student(year_in_school=YearInSchool.FRESHMAN), 'YearInSchool': YearInSchool}))\n+        self.assertEqual(rendered_output, 'True')\n+\n+    def test_template_enum_label_and_value(self):\n+        template = Template('{{ YearInSchool.FRESHMAN.label }}|{{ YearInSchool.FRESHMAN.value }}')\n+        rendered_output = template.render(Context({'YearInSchool': YearInSchool}))\n+        self.assertEqual(rendered_output, 'Freshman|1')\n+\n+    def test_template_enum_invalid_access(self):\n+        template = Template('{{ YearInSchool.SENIOR.invalid_attribute }}')\n+        rendered_output = template.render(Context({'YearInSchool': YearInSchool}))\n+        self.assertEqual(rendered_output, '')\n+\n+    def test_template_enum_comparison(self):\n+        senior_student = Student(year_in_school=YearInSchool.SENIOR)\n+        sophomore_student = Student(year_in_school=YearInSchool.SOPHOMORE)\n+        \n+        template = Template('{% if senior_student.year_in_school == sophomore_student.year_in_school %}Same{% else %}Different{% endif %}')\n+        rendered_output = template.render(Context({'senior_student': senior_student, 'sophomore_student': sophomore_student}))\n+        self.assertEqual(rendered_output, 'Different')\n         with self.assertRaisesMessage(ValueError, msg):\n             class Fruit(models.IntegerChoices):\n                 APPLE = 1, 'Apple'\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..67b20e7 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -175,8 +175,28 @@ class UtilsTests(SimpleTestCase):\n \n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n-\n-    def test_number_formats_display_for_field(self):\n+    \n+    def test_json_display_for_field(self):\n+        \"\"\"\n+        Test JSONField values are correctly displayed as JSON strings\n+        when they are marked as readonly in the admin.\n+        \"\"\"\n+        # Import necessary items\n+        from django.contrib.admin.utils import display_for_field\n+        from django.db import models\n+\n+        json_tests = [\n+            ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),  # Nested dict to valid JSON\n+            (['a', 'b'], '[\"a\", \"b\"]'),               # List to valid JSON\n+            ('a', '\"a\"'),                             # String to valid JSON\n+            # Invalid JSON to check handling in the admin representation\n+            ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"), # Python tuple key, not JSON serializable\n+        ]\n+\n+        for value, expected_display in json_tests:\n+            with self.subTest(value=value):\n+                display_value = display_for_field(value, models.JSONField(), self.empty_value)\n+                self.assertEqual(display_value, expected_display)\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n \n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..4f0135a 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1014,6 +1014,40 @@ class OtherModelTests(SimpleTestCase):\n \n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n+    def test_mti_with_multiple_onetoone_fields(self):\n+        # Define the base Document model.\n+        class Document(models.Model):\n+            pass\n+\n+        # Define the Picking model inheriting from Document\n+        # with two OneToOne fields pointing to Document.\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        # Check that there are no configuration issues with these fields.\n+        self.assertEqual(Picking.check(), [])\n+\n+    def test_onetoone_field_order_variation(self):\n+        # Define Document model.\n+        class Document(models.Model):\n+            pass\n+\n+        # Define a Picking model with Order 1: First OneToOneField with parent_link.\n+        class PickingOrder1(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        # Check that there are no configuration errors.\n+        self.assertEqual(PickingOrder1.check(), [])\n+\n+        # Define a Picking model with Order 2: First OneToOneField without parent_link.\n+        class PickingOrder2(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        # Check that there are no configuration errors.\n+        self.assertEqual(PickingOrder2.check(), [])\n \n     def test_m2m_table_name_clash(self):\n         class Foo(models.Model):\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..bf94bbb 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -247,11 +247,18 @@ class SecurityMiddlewareTest(SimpleTestCase):\n             with self.subTest(value=value), override_settings(SECURE_REFERRER_POLICY=value):\n                 self.assertEqual(self.process_response()['Referrer-Policy'], expected)\n \n-    @override_settings(SECURE_REFERRER_POLICY='strict-origin')\n+    @override_settings(SECURE_REFERRER_POLICY=None)\n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        When SECURE_REFERRER_POLICY is not set, the default \"Referrer-Policy\"\n+        header should be \"same-origin\".\n+        \"\"\"\n+        response = self.process_response()\n+        self.assertEqual(response.get('Referrer-Policy'), 'same-origin')\n     def test_referrer_policy_already_present(self):\n         \"\"\"\n         The middleware will not override a \"Referrer-Policy\" header already\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..7b5441a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -13,12 +13,40 @@ from django.db.models import (\n     Func, IntegerField, Max, Min, Model, OrderBy, OuterRef, Q, StdDev,\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n+class SimpleLazyObjectSubqueryTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.manager1 = Manager.objects.create(name='Manager 1')\n+        cls.manager2 = Manager.objects.create(name='Manager 2')\n+        cls.employee_1 = Employee.objects.create(\n+            firstname='John', lastname='Doe', manager=cls.manager1\n+        )\n+        cls.employee_2 = Employee.objects.create(\n+            firstname='Jane', lastname='Smith', manager=cls.manager2\n+        )\n+        cls.company = Company.objects.create(\n+            name='Company Ltd', ceo=cls.employee_1\n+        )\n+\n+    def test_subquery_with_lazy_object(self):\n+        lazy_manager = SimpleLazyObject(lambda: self.manager1)\n+        qs = Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    lastname=OuterRef('ceo__lastname')\n+                ).values('manager')\n+            )\n+        ).filter(ceo_manager=lazy_manager.id)\n+        # This should filter to include only the company where the ceo is managed by manager1\n+        self.assertEqual(qs.get(), self.company)\n+\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n )\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n+from django.utils.functional import SimpleLazyObject\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..f4e6ac3 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..7dbfa7c 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,8 +2444,79 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n \n-    def test_mti_inheritance_model_removal(self):\n+    def test_field_clash_with_mti_and_field_reordering(self):\n+        \"\"\"\n+        Ensure RemoveField operation is performed before CreateModel to avoid field name clashes.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('name', models.CharField(max_length=100)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'item', [\n+                ('name', models.CharField(max_length=100)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='name', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='item')\n+\n+    def test_inheriting_model_with_field_clash(self):\n+        \"\"\"\n+        A more complex scenario where a field is moved from base to the child with new sibling model\n+        introduced in between.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('description', models.TextField()),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'details', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('description', models.TextField()),\n+            ], bases=('app.details', 'app.readable')),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='description', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n         Animal = ModelState('app', 'Animal', [\n             (\"id\", models.AutoField(primary_key=True)),\n         ])\n@@ -2453,4 +2524,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..44f7882 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -9,6 +9,8 @@ from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db import models, connection\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -194,7 +196,44 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    @isolate_apps('lookup')\n+    def test_in_bulk_unique_constraint(self):\n+        # Define a model with UniqueConstraint and verify in_bulk works.\n+        class ArticleWithUniqueSlug(models.Model):\n+            slug = models.CharField(max_length=255)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['slug'], name='unique_slug_constraint'),\n+                ]\n+\n+        # Use the model defined above\n+        article1 = ArticleWithUniqueSlug.objects.create(slug='unique-slug-1')\n+        article2 = ArticleWithUniqueSlug.objects.create(slug='unique-slug-2')\n+        ArticleWithUniqueSlug.objects.create(slug='unique-slug-3')  # Not retrieved\n+\n+        self.assertEqual(\n+            ArticleWithUniqueSlug.objects.in_bulk(['unique-slug-1', 'unique-slug-2'], field_name='slug'),\n+            {article1.slug: article1, article2.slug: article2}\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_with_non_unique_constraint_field(self):\n+        class ArticleWithNonUniqueFields(models.Model):\n+            slug = models.CharField(max_length=255)\n+            author = models.CharField(max_length=255)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['slug'], name='unique_slug_constraint'),\n+                    models.UniqueConstraint(fields=['author', 'slug'], name='non_unique_author_and_slug'),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['author']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    ArticleWithNonUniqueFields.objects.in_bulk(field_name=field_name)\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..2684389 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -883,7 +883,21 @@ class OtherModelTests(SimpleTestCase):\n             )\n         ])\n \n-    def test_ordering_allows_registered_lookups(self):\n+    def test_ordering_uses_lookups_that_are_not_transforms(self):\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, on_delete=models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, on_delete=models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        # Assuming running checks validates if the ordering is correct.\n+        self.assertEqual(Stock.check(), [])\n         class Model(models.Model):\n             test = models.CharField(max_length=100)\n \n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..05cab1d 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,29 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_constant_expression_not_in_group_by(self):\n+        # Simulating the query to check group by behavior\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        group_by_cols = expr.get_group_by_cols(alias=None)\n+        self.assertNotIn(Value(3, output_field=IntegerField()), group_by_cols)\n+\n+    def test_non_constant_expression_in_group_by(self):\n+        # Lowering a value is a transformation, hence should appear in group by\n+        expr = ExpressionWrapper(Lower(Value('HELLO')), output_field=IntegerField())\n+        group_by_cols = expr.get_group_by_cols(alias=None)\n+        self.assertIn(Lower(Value('HELLO')), group_by_cols)\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..9c76814 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1199,8 +1199,23 @@ class Queries1Tests(TestCase):\n             'mixed_case_db_column_category__category',\n         )\n         self.assertTrue(qs.first())\n-\n-    def test_excluded_intermediary_m2m_table_joined(self):\n+    def test_filterable_field_handling(self):\n+        # Set up initial data\n+        extra_info_1 = ExtraInfo.objects.create(info='info1', note=self.n1, value=10, filterable=True)\n+        extra_info_2 = ExtraInfo.objects.create(info='info2', note=self.n1, value=20, filterable=False)\n+        author_1 = Author.objects.create(name='author1', extra=extra_info_1)\n+        author_2 = Author.objects.create(name='author2', extra=extra_info_2)\n+\n+        # Test filtering on `ExtraInfo` with a field that was originally `filterable=False`\n+        # to confirm the fix has resolved the NotSupportedError issue\n+        self.assertSequenceEqual(\n+            Author.objects.filter(extra=extra_info_1),\n+            [author_1],\n+        )\n+        self.assertSequenceEqual(\n+            Author.objects.filter(extra=extra_info_2),\n+            [author_2],\n+        )\n         self.assertSequenceEqual(\n             Note.objects.filter(~Q(tag__annotation__name=F('note'))),\n             [self.n1, self.n2, self.n3],\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..a3adea6 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,36 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_self_referential_fk_ordering_issue(self):\n+        class OneModel(models.Model):\n+            class Meta:\n+                ordering = (\"-id\",)\n+            id = models.BigAutoField(primary_key=True)\n+            root = models.ForeignKey(\"self\", on_delete=models.CASCADE, null=True)\n+            oneval = models.BigIntegerField(null=True)\n+\n+        class TwoModel(models.Model):\n+            id = models.BigAutoField(primary_key=True)\n+            record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+            twoval = models.BigIntegerField(null=True)\n+\n+        # Creating instances\n+        root1 = OneModel.objects.create(oneval=1)\n+        root2 = OneModel.objects.create(root=root1, oneval=2)\n+        two1 = TwoModel.objects.create(record=root2, twoval=10)\n+\n+        qs = TwoModel.objects.filter(record__oneval__in=[1,2,3]).order_by('record__root_id')\n+        self.assertEqual(list(qs), [two1])\n+\n+        # Check correct SQL generated by order_by(\"record__root__id\") workaround\n+        qs = TwoModel.objects.filter(record__oneval__in=[1,2,3]).order_by(\"record__root__id\")\n+        self.assertEqual(qs.query.order_by, ('orion_onemodel.root_id',))\n+\n+        # Using annotate to enforce expected behavior\n+        from django.db.models import F\n+        qs = TwoModel.objects.filter(record__oneval__in=[1,2,3]).annotate(root_id=F(\"record__root_id\")).order_by(\"root_id\")\n+        self.assertEqual(list(qs), [two1])\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..9b5cb4e 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -608,7 +608,33 @@ class BaseCacheTests:\n         # causing a cull.\n         for i in range(1, initial_count):\n             cull_cache.set('cull%d' % i, 'value', 1000)\n-        count = 0\n+import unittest\n+from django.core.cache import caches\n+from django.core.cache.backends.base import InvalidCacheBackendError\n+from django.db import connections\n+from django.test import TestCase\n+\n+class TestCullingBehavior(TestCase):\n+    def test_cull_delete_when_no_entries_exist(self):\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        old_max_entries = cull_cache._max_entries\n+        # Simulate culling when there are no entries in the cache\n+        cull_cache._max_entries = 0\n+\n+        # This is simulating an empty cache.\n+        # We expect no exception to be raised during culling\n+        with connections['default'].cursor() as cursor:\n+            cull_cache._cull('default', cursor, None)\n+    \n+        try:\n+            # Set a value and check that it is stored correctly\n+            cull_cache.set('check_no_exception', 'value', 1000)\n+            self.assertIs(cull_cache.has_key('check_no_exception'), True)\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n         # Count how many keys are left in the cache.\n         for i in range(1, initial_count):\n             if cull_cache.has_key('cull%d' % i):\n",
  "django__django-13109": "diff --git a/tests/model_forms/models.py b/tests/model_forms/models.py\nindex ff8ad74..4e3f8e3 100644\n--- a/tests/model_forms/models.py\n+++ b/tests/model_forms/models.py\n@@ -28,8 +28,22 @@ class Category(models.Model):\n         return self.__str__()\n \n \n+class WriterManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().filter(archived=False)\n+\n class Writer(models.Model):\n     name = models.CharField(max_length=50, help_text='Use both first and last names.')\n+    archived = models.BooleanField(default=False, editable=False)\n+    objects = WriterManager()\n+\n+    class Meta:\n+        ordering = ('name',)\n+\n+# New Model to test ForeignKey with overridden manager\n+class FavoriteArticles(models.Model):\n+    article = models.ForeignKey('Article', on_delete=models.CASCADE)\n+    name = models.CharField(max_length=50, help_text='Use both first and last names.')\n \n     class Meta:\n         ordering = ('name',)\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..762d6ea 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,6 +867,34 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n+    def test_foreign_key_mixed_case_app_label(self):\n+        new_apps = Apps()\n+\n+        class Category(models.Model):\n+            title = models.CharField(max_length=100, db_index=True)\n+            slug = models.SlugField(max_length=100, db_index=True)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Content(models.Model):\n+            title = models.CharField(max_length=100, unique=True)\n+            body_text = models.TextField()\n+            category = models.ForeignKey(Category, on_delete=models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+\n+        # Ensure both models are recognized within the same app\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n+        self.assertIn('category', [field.name for field in Content._meta.fields])\n+\n     def test_real_apps(self):\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..bfcb7cf 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1209,14 +1209,64 @@ class ExpressionOperatorTests(TestCase):\n         Number.objects.filter(pk=self.n.pk).update(integer=F('integer') ** 2, float=F('float') ** 1.5)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 1764)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).float, Approximate(61.02, places=2))\n-\n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+    \n+    from django.db.models import F\n+    import datetime\n+    from .models import Experiment\n+\n+    def test_duration_expressions_with_various_deltas(self):\n+        # Adding test cases for a day, an hour, and a minute as delta\n+        deltas = [datetime.timedelta(days=1), datetime.timedelta(hours=1), datetime.timedelta(minutes=1)]\n+        for delta in deltas:\n+            with self.subTest(delta=delta):\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+                for obj in qs:\n+                    self.assertEqual(obj.duration, obj.estimated_time + delta)\n+    \n+    def test_negative_duration_expressions(self):\n+        # Adding a test case for subtracting a duration to test negative results\n+        delta = datetime.timedelta(days=1)\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') - delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time - delta)\n+\n+    def test_duration_expressions_zero(self):\n+        # Adding a test case with zero timedelta\n+        delta = datetime.timedelta(0)\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time + delta)\n     def test_lefthand_bitwise_xor(self):\n         Number.objects.update(integer=F('integer').bitxor(48))\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 26)\n         self.assertEqual(Number.objects.get(pk=self.n1.pk).integer, -26)\n-\n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n+    \n+    from django.db.models import F\n+    import datetime\n+    from .models import Experiment\n+\n+    def test_duration_expressions_with_various_deltas(self):\n+        # Adding test cases for a day, an hour, and a minute as delta\n+        deltas = [datetime.timedelta(days=1), datetime.timedelta(hours=1), datetime.timedelta(minutes=1)]\n+        for delta in deltas:\n+            with self.subTest(delta=delta):\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+                for obj in qs:\n+                    self.assertEqual(obj.duration, obj.estimated_time + delta)\n+    \n+    def test_negative_duration_expressions(self):\n+        # Adding a test case for subtracting a duration to test negative results\n+        delta = datetime.timedelta(days=1)\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') - delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time - delta)\n+\n+    def test_duration_expressions_zero(self):\n+        # Adding a test case with zero timedelta\n+        delta = datetime.timedelta(0)\n+        qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+        for obj in qs:\n+            self.assertEqual(obj.duration, obj.estimated_time + delta)\n     def test_lefthand_bitwise_xor_null(self):\n         employee = Employee.objects.create(firstname='John', lastname='Doe')\n         Employee.objects.update(salary=F('salary').bitxor(48))\n",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..d6242e5 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1627,7 +1627,24 @@ class FTimeDeltaTests(TestCase):\n         for e in qs:\n             self.assertEqual(e.delta, delta)\n \n-    def test_duration_with_datetime(self):\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_datetime_direct_subtraction(self):\n+        # Annotate delta without using ExpressionWrapper. \n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+\n+        expected_deltas = {\n+            'e0': datetime.timedelta(days=1),\n+            'e1': datetime.timedelta(days=2),\n+            'e2': datetime.timedelta(days=3),\n+            'e3': datetime.timedelta(days=4),\n+            'e4': datetime.timedelta(days=5),\n+            'e5': datetime.timedelta(days=120)\n+        }\n+\n+        for experiment in queryset:\n+            self.assertEqual(experiment.delta, expected_deltas[experiment.name])\n         # Exclude e1 which has very high precision so we can test this on all\n         # backends regardless of whether or not it supports\n         # microsecond_precision.\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..ba69f66 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,11 @@\n import operator\n \n+from .models import Category\n+from django import forms\n+from django.template import Template\n+from django.utils.text import slugify\n+from django.utils.safestring import mark_safe\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n",
  "django__django-13279": "",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..f02edc3 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -8,6 +8,25 @@ from django.test import (\n from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.test import TestCase\n+from django.urls import path\n+from django.shortcuts import get_object_or_404\n+from django.utils.functional import SimpleLazyObject\n+from .models import Artist\n+from django.views.generic import TemplateView\n+\n+# Mockup model and view required to test the SimpleLazyObject issue\n+class Account(models.Model):\n+    slug = models.SlugField(unique=True)\n+\n+class OfferView(TemplateView):\n+    template_name = \"offers/offer.html\"\n+\n+    def get_context_data(self, **kwargs):\n+        offer_slug = kwargs.get(\"offer_slug\", \"\")\n+        # Convert SimpleLazyObject to str\n+        offer = get_object_or_404(Account, slug=str(offer_slug))\n+        return {\"offer\": offer, \"offer_slug\": offer_slug}\n from django.views.generic import RedirectView, TemplateView, View\n \n from . import views\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..95da7b5 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -16,6 +16,7 @@ from django.forms.models import (\n )\n from django.template import Context, Template\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, ArticleStatus, Author, Author1, Award, BetterWriter, BigInt, Book,\n@@ -2819,7 +2820,71 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n-    def test_callable_called_each_time_form_is_instantiated(self):\n+    @isolate_apps('tests.model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.threepwood,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=self.marley,\n+        )\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n             StumpJokeForm()\n",
  "django__django-13343": "",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..13bcee8 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -623,7 +623,20 @@ class TestQuerying(TestCase):\n                     expected,\n                 )\n \n-    def test_key_iexact(self):\n+    def test_key_in_lookup_on_transform(self):\n+        tests = [\n+            ('value__key__in', [0], []),\n+            ('value__key__in', [0, 1], [self.objs[0], self.objs[1]]),  # Assuming objs[0], objs[1] have value 1\n+            ('value__key__in', [1, 2], [self.objs[0], self.objs[1], self.objs[2]]),  # Assuming objs[0], objs[1], objs[2] have value 1 or 2\n+            ('value__key__in', ['bar'], [self.objs[3]]),  # Assuming objs[3] has value 'bar'\n+            ('value__key__in', ['bar', 'baz'], [self.objs[3], self.objs[4]]),  # Assuming objs[3], objs[4] have value 'bar' or 'baz'\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='\"BaR\"').exists(), False)\n \n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..2320689 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -18,7 +18,8 @@ from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n from django.utils import timezone\n-\n+import pytz\n+from datetime import datetime\n from ..models import Author, DTModel, Fan\n \n \n@@ -1133,7 +1134,45 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_trunc_date_with_tzinfo(self):\n+        \"\"\"Test TruncDate with explicit tzinfo.\"\"\"\n+        start_datetime = datetime(2023, 3, 29, 15, 45, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        ny_tz = pytz.timezone('America/New_York')\n+        la_tz = pytz.timezone('America/Los_Angeles')\n+\n+        model = DTModel.objects.annotate(\n+            ny_date=TruncDate('start_datetime', tzinfo=ny_tz),\n+            la_date=TruncDate('start_datetime', tzinfo=la_tz),\n+        ).get()\n+\n+        ny_start = start_datetime.astimezone(ny_tz)\n+        la_start = start_datetime.astimezone(la_tz)\n+\n+        self.assertEqual(model.ny_date, ny_start.date())\n+        self.assertEqual(model.la_date, la_start.date())\n+\n+    def test_trunc_time_with_tzinfo(self):\n+        \"\"\"Test TruncTime with explicit tzinfo.\"\"\"\n+        start_datetime = datetime(2023, 3, 29, 15, 45, 0)\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        ny_tz = pytz.timezone('America/New_York')\n+        la_tz = pytz.timezone('America/Los_Angeles')\n+\n+        model = DTModel.objects.annotate(\n+            ny_time=TruncTime('start_datetime', tzinfo=ny_tz),\n+            la_time=TruncTime('start_datetime', tzinfo=la_tz),\n+        ).get()\n+\n+        ny_start = start_datetime.astimezone(ny_tz)\n+        la_start = start_datetime.astimezone(la_tz)\n+\n+        self.assertEqual(model.ny_time, ny_start.time())\n+        self.assertEqual(model.la_time, la_start.time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..8a56143 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -114,6 +114,51 @@ class ChoicesTests(SimpleTestCase):\n         cls.empty_choices_text = Choiceful._meta.get_field('empty_choices_text')\n         cls.with_choices = Choiceful._meta.get_field('with_choices')\n \n+\n+class FieldEqualityTests(TestCase):\n+    \n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models should not be equal across different models.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+            \n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Ensure fields from different models are not considered equal\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        # Test ordering is consistent with inequality\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        # Check hash inequality\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+        # Explicitly test for set de-duplication issue\n+        fields_set = {inherit1_model_field, inherit2_model_field}\n+        self.assertEqual(len(fields_set), 2, \"Fields should not be de-duplicated in a set\")\n+\n+        # Cross verify using lists and sets for different combinations\n+        self.assertNotIn(abstract_model_field, fields_set)\n+        fields_list = [abstract_model_field, inherit1_model_field, inherit2_model_field]\n+        self.assertEqual(len(set(fields_list)), 3, \"All distinct fields should remain unique in the set\")\n+\n     def test_choices(self):\n         self.assertIsNone(self.no_choices.choices)\n         self.assertEqual(self.empty_choices.choices, ())\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..3abf74f 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -8,7 +9,8 @@ from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks\n+from pathlib import Path\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n@@ -171,10 +173,84 @@ class FileTests(unittest.TestCase):\n \n \n class NoNameFileTestCase(unittest.TestCase):\n+    ...\n     \"\"\"\n+\n+class FileLocksTestCase(unittest.TestCase):\n+    def setUp(self):\n+        # Create a temporary file for lock testing\n+        self.file_path = Path(tempfile.gettempdir()) / 'test_lock_file.txt'\n+        self.file_path.touch()\n+\n+    def tearDown(self):\n+        # Remove temporary file after tests\n+        if self.file_path.exists():\n+            self.file_path.unlink()\n+\n+    def test_exclusive_lock(self):\n+        with open(self.file_path, 'w') as f1, open(self.file_path, 'w') as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True, \"Exclusive lock should succeed.\")\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False, \"Non-blocking exclusive lock should fail if file is already locked.\")\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False, \"Non-blocking shared lock should fail if file is exclusively locked.\")\n+            self.assertIs(locks.unlock(f1), True, \"Unlock should succeed.\")\n+\n+    def test_shared_lock(self):\n+        with open(self.file_path, 'w') as f1, open(self.file_path, 'w') as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True, \"Shared lock should succeed.\")\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True, \"Non-blocking shared lock should succeed if file is not exclusively locked.\")\n+            self.assertIs(locks.unlock(f1), True, \"Unlock should succeed.\")\n+            self.assertIs(locks.unlock(f2), True, \"Unlock should succeed.\")\n+\n+    def test_unexpected_unlock(self):\n+        with open(self.file_path, 'w') as f:\n+            # Test unlocking a file not locked\n+            self.assertIs(locks.unlock(f), True, \"Unlock should succeed even if no lock is held.\")\n+\n+    def test_lock_after_unlock(self):\n+        with open(self.file_path, 'w') as f1, open(self.file_path, 'w') as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True, \"Exclusive lock should succeed.\")\n+            self.assertIs(locks.unlock(f1), True, \"Unlock should succeed.\")\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX), True, \"Exclusive lock should succeed after unlock.\")\n     Other examples of unnamed files may be tempfile.SpooledTemporaryFile or\n     urllib.urlopen()\n+    ...\n     \"\"\"\n+\n+class FileLocksTestCase(unittest.TestCase):\n+    def setUp(self):\n+        # Create a temporary file for lock testing\n+        self.file_path = Path(tempfile.gettempdir()) / 'test_lock_file.txt'\n+        self.file_path.touch()\n+\n+    def tearDown(self):\n+        # Remove temporary file after tests\n+        if self.file_path.exists():\n+            self.file_path.unlink()\n+\n+    def test_exclusive_lock(self):\n+        with open(self.file_path, 'w') as f1, open(self.file_path, 'w') as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True, \"Exclusive lock should succeed.\")\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False, \"Non-blocking exclusive lock should fail if file is already locked.\")\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False, \"Non-blocking shared lock should fail if file is exclusively locked.\")\n+            self.assertIs(locks.unlock(f1), True, \"Unlock should succeed.\")\n+\n+    def test_shared_lock(self):\n+        with open(self.file_path, 'w') as f1, open(self.file_path, 'w') as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True, \"Shared lock should succeed.\")\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True, \"Non-blocking shared lock should succeed if file is not exclusively locked.\")\n+            self.assertIs(locks.unlock(f1), True, \"Unlock should succeed.\")\n+            self.assertIs(locks.unlock(f2), True, \"Unlock should succeed.\")\n+\n+    def test_unexpected_unlock(self):\n+        with open(self.file_path, 'w') as f:\n+            # Test unlocking a file not locked\n+            self.assertIs(locks.unlock(f), True, \"Unlock should succeed even if no lock is held.\")\n+\n+    def test_lock_after_unlock(self):\n+        with open(self.file_path, 'w') as f1, open(self.file_path, 'w') as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True, \"Exclusive lock should succeed.\")\n+            self.assertIs(locks.unlock(f1), True, \"Unlock should succeed.\")\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX), True, \"Exclusive lock should succeed after unlock.\")\n     def test_noname_file_default_name(self):\n         self.assertIsNone(File(BytesIO(b'A file with no name')).name)\n \n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..1130d95 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2085,7 +2085,35 @@ class QuerysetOrderedTests(unittest.TestCase):\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n \n-@skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+from django.test import TestCase\n+from django.db.models import Count\n+from .models import Foo  # Assuming Foo is the model being used in the examples.\n+\n+class OrderingTests(TestCase):\n+\n+    def test_annotated_default_ordering_false(self):\n+        \"\"\"Test that annotated queryset on a model with Meta ordering is not marked as ordered by default.\"\"\"\n+        qs2 = Foo.objects.annotate(Count('pk')).all()\n+        self.assertIs(qs2.ordered, False)\n+        self.assertIs(qs2.query.default_ordering, True)\n+\n+    def test_annotated_with_order_by_true(self):\n+        \"\"\"Test that applying order_by to an annotated queryset results in it being ordered.\"\"\"\n+        qs3 = Foo.objects.annotate(Count('pk')).order_by('name')\n+        self.assertIs(qs3.ordered, True)\n+        self.assertIs(qs3.query.default_ordering, True)\n+\n+    def test_annotated_values_default_ordering_false(self):\n+        \"\"\"Test that values + annotate removes default ordering.\"\"\"\n+        qs4 = Foo.objects.values('name').annotate(num_notes=Count('pk'))\n+        self.assertIs(qs4.ordered, False)\n+        self.assertIs(qs4.query.default_ordering, True)\n+\n+    def test_annotated_values_with_order_by_true(self):\n+        \"\"\"Test that applying order_by to a values + annotate queryset results in it being ordered.\"\"\"\n+        qs5 = Foo.objects.values('name').annotate(num_notes=Count('pk')).order_by('name')\n+        self.assertIs(qs5.ordered, True)\n+        self.assertIs(qs5.query.default_ordering, True)\n class SubqueryTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..1176280 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,10 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n-from django.test.utils import ignore_warnings\n+from .models.with_custom_email_field import CustomEmailField\n from django.utils.deprecation import RemovedInDjango40Warning\n \n \n@@ -37,7 +38,28 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                # Change email and save\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                # Token should now be invalid\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..3d77947 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n@@ -7,6 +8,7 @@ from django.db import models\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n )\n+from django.db.models import Q, UniqueConstraint\n from django.test.utils import isolate_apps\n \n from .models import CustomUserNonUniqueUsername\n@@ -138,6 +140,54 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraint')\n+    def test_username_with_partial_unique_constraint(self):\n+        \"\"\"\n+        Test that a username field with a UniqueConstraint and condition \n+        does not trigger auth.E003.\n+        \"\"\"\n+        class CustomUserPartiallyUnique(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=['username'],\n+                        name='partial_username_unique',\n+                        condition=Q(password__isnull=False)\n+                    ),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        # Expect a warning instead of an error due to the constraint having a condition\n+        self.assertEqual(errors, [\n+            checks.Warning(\n+                \"'CustomUserPartiallyUnique.username' is named as the 'USERNAME_FIELD', \"\n+                \"but it is not unique.\",\n+                hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n+                obj=CustomUserPartiallyUnique,\n+                id='auth.W004',\n+            ),\n+        ])\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraintWithConstraint')\n+    def test_username_with_explicit_unique_constraint(self):\n+        \"\"\"\n+        Test that a username field with a UniqueConstraint does not trigger auth.E003.\n+        \"\"\"\n+        class CustomUserUniqueConstraintWithConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_unique_constraint'),\n+                ]\n+\n+        # No errors should be returned as the UniqueConstraint satisfies the uniqueness requirement\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n     def test_non_clashing_custom_permissions(self):\n         class Checked(models.Model):\n             class Meta:\n@@ -194,6 +244,54 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraint')\n+    def test_username_with_partial_unique_constraint(self):\n+        \"\"\"\n+        Test that a username field with a UniqueConstraint and condition \n+        does not trigger auth.E003.\n+        \"\"\"\n+        class CustomUserPartiallyUnique(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=['username'],\n+                        name='partial_username_unique',\n+                        condition=Q(password__isnull=False)\n+                    ),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        # Expect a warning instead of an error due to the constraint having a condition\n+        self.assertEqual(errors, [\n+            checks.Warning(\n+                \"'CustomUserPartiallyUnique.username' is named as the 'USERNAME_FIELD', \"\n+                \"but it is not unique.\",\n+                hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n+                obj=CustomUserPartiallyUnique,\n+                id='auth.W004',\n+            ),\n+        ])\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserUniqueConstraintWithConstraint')\n+    def test_username_with_explicit_unique_constraint(self):\n+        \"\"\"\n+        Test that a username field with a UniqueConstraint does not trigger auth.E003.\n+        \"\"\"\n+        class CustomUserUniqueConstraintWithConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_unique_constraint'),\n+                ]\n+\n+        # No errors should be returned as the UniqueConstraint satisfies the uniqueness requirement\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n     def test_custom_permission_name_max_length(self):\n         custom_permission_name = 'some ridiculously long verbose name that is out of control' * 5\n \n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..cf9ba2f 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -8,6 +9,7 @@ from unittest import mock\n \n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n+from collections import namedtuple\n from django.db.models import (\n     AutoField, Avg, BinaryField, BooleanField, Case, CharField, Count,\n     DateField, DateTimeField, DecimalField, DurationField, Exists, Expression,\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..907072c 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -28,6 +28,7 @@ from django.core.management.commands.testserver import (\n )\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n+from django.test.utils import captured_stderr, captured_stdout\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n@@ -37,6 +38,43 @@ custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates\n SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n \n+class ExecuteFromCommandLineTests(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_conflict_with_sys_argv(self):\n+        \"\"\"\n+        Test when there is a conflict between sys.argv[0] and provided argv,\n+        it uses the provided argv's prog name.\n+        \"\"\"\n+        custom_prog_name = 'custom-admin'\n+        args = ['makemigrations']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['different-admin'] + args):\n+                execute_from_command_line([custom_prog_name] + args)\n+        self.assertIn('usage: custom-admin makemigrations', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_main_py(self):\n+        \"\"\"\n+        Test when prog_name is '__main__.py', it should default to 'python -m django'.\n+        \"\"\"\n+        args = ['runserver']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['__main__.py'] + args)\n+        self.assertIn('usage: python -m django runserver', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n class AdminScriptTestCase(SimpleTestCase):\n     def setUp(self):\n         tmpdir = tempfile.TemporaryDirectory()\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..ba4b728 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -146,7 +147,20 @@ class DateFormatTests(SimpleTestCase):\n         # Ticket #16924 -- We don't need timezone support to test this\n         self.assertEqual(dateformat.format(aware_dt, 'O'), '-0330')\n \n-    def test_invalid_time_format_specifiers(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (1000, '00'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         my_birthday = date(1984, 8, 7)\n \n         for specifier in ['a', 'A', 'f', 'g', 'G', 'h', 'H', 'i', 'P', 'r', 's', 'u']:\n@@ -164,4 +178,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..7ae8ac0 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,6 +119,56 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n+    def test_create_model_and_remove_all_model_options(self):\n+        \"\"\"\n+        Test that all options are removed when an AlterModelOptions specifies an empty set.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'Verbose Name',\n+                        'ordering': ['name'],\n+                    },\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[]),\n+            ],\n+        )\n+\n+    def test_create_model_reduce_to_specific_options(self):\n+        \"\"\"\n+        Test that specific options are correctly retained when squashed.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'Verbose Name',\n+                        'verbose_name_plural': 'Verbose Names',\n+                        'ordering': ['name'],\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'MyModel',\n+                    options={'verbose_name': 'Verbose Name'}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Verbose Name'},\n+                ),\n+            ],\n+        )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n@@ -134,6 +184,56 @@ class OptimizerTests(SimpleTestCase):\n             [],\n         )\n \n+    def test_create_model_and_remove_all_model_options(self):\n+        \"\"\"\n+        Test that all options are removed when an AlterModelOptions specifies an empty set.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'Verbose Name',\n+                        'ordering': ['name'],\n+                    },\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('MyModel', fields=[]),\n+            ],\n+        )\n+\n+    def test_create_model_reduce_to_specific_options(self):\n+        \"\"\"\n+        Test that specific options are correctly retained when squashed.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'Verbose Name',\n+                        'verbose_name_plural': 'Verbose Names',\n+                        'ordering': ['name'],\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'MyModel',\n+                    options={'verbose_name': 'Verbose Name'}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Verbose Name'},\n+                ),\n+            ],\n+        )\n+\n     def test_create_alter_unique_delete_model(self):\n         self._test_create_alter_foo_delete_model(migrations.AlterUniqueTogether(\"Foo\", [[\"a\", \"b\"]]))\n \n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..4e0923b 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,9 +1,12 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n from ..utils import setup\n+from django.utils.functional import lazy\n+from django.utils.translation import gettext_lazy\n \n \n class AddTests(SimpleTestCase):\n@@ -42,6 +45,27 @@ class AddTests(SimpleTestCase):\n         self.assertEqual(output, '(3, 4, 1, 2)')\n \n     @setup({'add07': '{{ d|add:t }}'})\n+\n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n     def test_add07(self):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..a98dc48 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -16,14 +16,55 @@ from django.db.models.sql.constants import CURSOR\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n     skipUnlessDBFeature,\n+    SQLKeywordsModel,\n )\n \n+class ConstraintTests(TransactionTestCase):\n+    \n+    def test_check_constraints_sql_keywords(self):\n+        \"\"\"\n+        Test that loaddata and check_constraints work with table names that are SQL keywords.\n+        \"\"\"\n+        with transaction.atomic():\n+            reporter = Reporter.objects.create(name=\"Test Reporter\")\n+            obj = SQLKeywordsModel.objects.create(reporter=reporter)\n+            obj.refresh_from_db()\n+            \n+            # Simulate a foreign key issue by manually setting an invalid reporter_id\n+            obj.reporter_id = 30\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n+\n+from django.db import IntegrityError, connection, transaction\n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n     VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n+    SQLKeywordsModel,\n )\n \n+class ConstraintTests(TransactionTestCase):\n+    \n+    def test_check_constraints_sql_keywords(self):\n+        \"\"\"\n+        Test that loaddata and check_constraints work with table names that are SQL keywords.\n+        \"\"\"\n+        with transaction.atomic():\n+            reporter = Reporter.objects.create(name=\"Test Reporter\")\n+            obj = SQLKeywordsModel.objects.create(reporter=reporter)\n+            obj.refresh_from_db()\n+            \n+            # Simulate a foreign key issue by manually setting an invalid reporter_id\n+            obj.reporter_id = 30\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n+\n \n class DateQuotingTest(TestCase):\n \n",
  "django__django-13809": "",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..405803d 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -190,6 +191,19 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.PaymentMiddleware',\n     ])\n+    async def test_middleware_not_used_with_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+        )\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncAndAsyncMiddleware'\",\n+            cm.output[1],\n+        )\n     def test_sync_middleware(self):\n         response = self.client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.status_code, 402)\n@@ -197,6 +211,19 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.DecoratedPaymentMiddleware',\n     ])\n+    async def test_middleware_not_used_with_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+        )\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncAndAsyncMiddleware'\",\n+            cm.output[1],\n+        )\n     def test_sync_decorated_middleware(self):\n         response = self.client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.status_code, 402)\n@@ -204,6 +231,19 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.async_payment_middleware',\n     ])\n+    async def test_middleware_not_used_with_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+        )\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncAndAsyncMiddleware'\",\n+            cm.output[1],\n+        )\n     def test_async_middleware(self):\n         with self.assertLogs('django.request', 'DEBUG') as cm:\n             response = self.client.get('/middleware_exceptions/view/')\n@@ -218,6 +258,19 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.NotSyncOrAsyncMiddleware',\n     ])\n+    async def test_middleware_not_used_with_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+        )\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncAndAsyncMiddleware'\",\n+            cm.output[1],\n+        )\n     def test_not_sync_or_async_middleware(self):\n         msg = (\n             'Middleware '\n@@ -230,6 +283,19 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.PaymentMiddleware',\n     ])\n+    async def test_middleware_not_used_with_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+        )\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncAndAsyncMiddleware'\",\n+            cm.output[1],\n+        )\n     async def test_sync_middleware_async(self):\n         with self.assertLogs('django.request', 'DEBUG') as cm:\n             response = await self.async_client.get('/middleware_exceptions/view/')\n@@ -243,6 +309,19 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.async_payment_middleware',\n     ])\n+    async def test_middleware_not_used_with_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+        )\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncAndAsyncMiddleware'\",\n+            cm.output[1],\n+        )\n     async def test_async_middleware_async(self):\n         with self.assertLogs('django.request', 'WARNING') as cm:\n             response = await self.async_client.get('/middleware_exceptions/view/')\n@@ -269,6 +348,19 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n     ])\n+    async def test_middleware_not_used_with_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+        )\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncAndAsyncMiddleware'\",\n+            cm.output[1],\n+        )\n     async def test_async_and_sync_middleware_async_call(self):\n         response = await self.async_client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.content, b'OK')\n@@ -277,6 +369,19 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n     ])\n+    async def test_middleware_not_used_with_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+        )\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncAndAsyncMiddleware'\",\n+            cm.output[1],\n+        )\n     def test_async_and_sync_middleware_sync_call(self):\n         response = self.client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.content, b'OK')\n@@ -288,6 +393,19 @@ class AsyncMiddlewareTests(SimpleTestCase):\n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.AsyncTemplateResponseMiddleware',\n     ])\n+    async def test_middleware_not_used_with_async_call(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            \"Asynchronous middleware middleware_exceptions.middleware.SyncAndAsyncMiddleware adapted.\",\n+        )\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.SyncAndAsyncMiddleware'\",\n+            cm.output[1],\n+        )\n     async def test_process_template_response(self):\n         response = await self.async_client.get(\n             '/middleware_exceptions/template_response/'\n",
  "django__django-13820": "",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..7ffc064 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -16,6 +16,10 @@ from django.test import (\n )\n from django.test.utils import isolate_apps\n \n+import unittest\n+from unittest import mock\n+from django.db import connection\n+from django.core.exceptions import ImproperlyConfigured\n from ..models import Author, Item, Object, Square\n \n try:\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..5bd3ed0 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -156,6 +156,15 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                 )\n \n \n+from .test_module import __main__ as test_main\n+import mock\n+import sys\n+import django.__main__\n+from django.utils import autoreload\n+from django.test import SimpleTestCase\n+from pathlib import Path\n+import tempfile\n+\n class TestChildArguments(SimpleTestCase):\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n@@ -172,9 +181,15 @@ class TestChildArguments(SimpleTestCase):\n             autoreload.get_child_arguments(),\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n-\n+    \n+    @mock.patch.dict('sys.modules', {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n-    def test_exe_fallback(self):\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        )\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n             exe_path.touch()\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..75c5cda 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -298,6 +298,15 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n \n+        # Test for ModelChoiceField with invalid choice value showing the value\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.'\n+            }\n+        )\n+        self.assertFormErrors(['\"4\" is not one of the available choices.'], f.clean, '4')\n+\n         # ModelMultipleChoiceField\n         e = {\n             'required': 'REQUIRED',\n@@ -307,4 +316,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..8031800 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,13 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..6d401be 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,7 +1,10 @@\n+\n from django.db import IntegrityError, transaction\n from django.test import TestCase, skipIfDBFeature\n \n-from .models import Bar, Business, Employee, Foo\n+from .models import Bar, Business, Employee, Foo, CustomAutoFieldModel\n+from .fields import MyWrapper\n+from django.test import skipUnlessDBFeature\n \n \n class BasicCustomPKTests(TestCase):\n@@ -220,6 +223,22 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that MyAutoField calls from_db_value upon insertion with create()\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+    \n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that MyAutoField calls from_db_value upon insertion with bulk_create()\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n     # SQLite lets objects be saved with an empty primary key, even though an\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n",
  "django__django-14017": "",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..f208ae2 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,50 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields(self):\n+        # Simulate collectstatic command to get the stats.\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Ensure no file is yielded twice.\n+        post_processed_files = stats['post_processed']\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n+    def test_yield_all_and_error_handling(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+\n+        # Check if RuntimeError is correctly raised when max passes are exceeded.\n+        with self.assertRaises(RuntimeError):\n+            collectstatic_cmd.max_post_process_passes = 1  # Force to exceed passes.\n+            collectstatic_cmd.collect()\n+\n+    def test_post_process_output(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Check the consistency of post-processed files vs expected pattern\n+        for file_name in stats['post_processed']:\n+            self.assertTrue(file_name.endswith('.css') or file_name.endswith('.png'))\n+\n+    def test_substitution_logic(self):\n+        storage_instance = storage.staticfiles_storage\n+        paths = {'path/to/css/file.css': 'hashed/path/to/css/file.abc123.css'}\n+        adjustable_paths = ['path/to/css/file.css']\n+        hashed_files = {}\n+\n+        # Mock the _post_process to ensure substitutions logic\n+        with mock.patch.object(storage_instance, '_post_process', return_value=iter([\n+            ('path/to/css/file.css', 'hashed/path/to/css/file.abc123.css', True, True),\n+            ('path/to/js/file.js', 'hashed/path/to/js/file.abc123.js', True, False)\n+        ])):\n+            results = list(storage_instance.post_process(paths))\n+\n+            # Ensure correct yielding of files on substitution change\n+            self.assertCountEqual([r[0] for r in results], ['path/to/css/file.css', 'path/to/js/file.js'])\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +258,50 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields(self):\n+        # Simulate collectstatic command to get the stats.\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Ensure no file is yielded twice.\n+        post_processed_files = stats['post_processed']\n+        self.assertCountEqual(post_processed_files, set(post_processed_files))\n+\n+    def test_yield_all_and_error_handling(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+\n+        # Check if RuntimeError is correctly raised when max passes are exceeded.\n+        with self.assertRaises(RuntimeError):\n+            collectstatic_cmd.max_post_process_passes = 1  # Force to exceed passes.\n+            collectstatic_cmd.collect()\n+\n+    def test_post_process_output(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Check the consistency of post-processed files vs expected pattern\n+        for file_name in stats['post_processed']:\n+            self.assertTrue(file_name.endswith('.css') or file_name.endswith('.png'))\n+\n+    def test_substitution_logic(self):\n+        storage_instance = storage.staticfiles_storage\n+        paths = {'path/to/css/file.css': 'hashed/path/to/css/file.abc123.css'}\n+        adjustable_paths = ['path/to/css/file.css']\n+        hashed_files = {}\n+\n+        # Mock the _post_process to ensure substitutions logic\n+        with mock.patch.object(storage_instance, '_post_process', return_value=iter([\n+            ('path/to/css/file.css', 'hashed/path/to/css/file.abc123.css', True, True),\n+            ('path/to/js/file.js', 'hashed/path/to/js/file.abc123.js', True, False)\n+        ])):\n+            results = list(storage_instance.post_process(paths))\n+\n+            # Ensure correct yielding of files on substitution change\n+            self.assertCountEqual([r[0] for r in results], ['path/to/css/file.css', 'path/to/js/file.js'])\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..e260634 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,7 +1,9 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n \n+import collections.abc\n import copy\n import pickle\n \n@@ -18,6 +20,21 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        s = reversed(OrderedSet([]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n     def test_remove(self):\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n",
  "django__django-14122": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex b2ec8af..3c68f2f 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -417,8 +418,27 @@ class AggregateTestCase(TestCase):\n             with self.subTest(aggregate=aggregate.__name__):\n                 books = Book.objects.aggregate(ratings=aggregate('rating', distinct=True))\n                 self.assertEqual(books['ratings'], expected_result)\n-\n-    def test_non_grouped_annotation_not_in_group_by(self):\n+    def test_meta_ordering_not_in_group_by(self):\n+        \"\"\"\n+        Ensure that fields specified in Meta.ordering are not included in the GROUP BY clause\n+        when not explicitly grouped against.\n+        \"\"\"\n+        # Setup for a model that has Meta.ordering\n+        pubs = Publisher.objects.annotate(\n+            count_books=Count('book')\n+        ).order_by().values('name').annotate(\n+            max_awards=Max('num_awards')\n+        ).order_by('max_awards', 'name')\n+        self.assertEqual(\n+            list(pubs), \n+            [\n+                {'name': 'Jonno\\'s House of Books', 'max_awards': 0},\n+                {'name': 'Sams', 'max_awards': 1},\n+                {'name': 'Apress', 'max_awards': 3},\n+                {'name': 'Prentice Hall', 'max_awards': 7},\n+                {'name': 'Morgan Kaufmann', 'max_awards': 9},\n+            ]\n+        )\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n         excluded from the group by clause.\n@@ -1339,4 +1359,4 @@ class AggregateTestCase(TestCase):\n             ('Wesley J. Chun', 1),\n             ('Stuart Russell', 1),\n             ('Peter Norvig', 2),\n-        ], lambda a: (a.name, a.contact_count), ordered=False)\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n",
  "django__django-14140": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex 7e095fe..89016f2 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,4 +1,6 @@\n-from django.db.models import F, Q\n+\n+from django.db.models import Exists, F, OuterRef, Q\n+from .models import Tag, Group, Event\n from django.test import SimpleTestCase\n \n \n@@ -82,6 +84,14 @@ class QTests(SimpleTestCase):\n         ))\n         self.assertEqual(kwargs, {})\n \n+    def test_deconstruct_single_nonsubscriptable_child(self):\n+        tagged = Tag.objects.filter(category=OuterRef('pk'))\n+        q = Q(Exists(tagged))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(tagged),))\n+        self.assertEqual(kwargs, {})\n+\n     def test_deconstruct_nested(self):\n         q = Q(Q(price__gt=F('discounted_price')))\n         path, args, kwargs = q.deconstruct()\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..c3c5301 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -74,6 +75,26 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n+\n     @isolate_apps('model_options.apps.ModelPKConfig')\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_app_default_auto_field(self):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..5e850b2 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -166,6 +166,15 @@ class TestIterModulesAndFiles(SimpleTestCase):\n class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_with_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_module(self):\n         self.assertEqual(\n@@ -175,6 +184,15 @@ class TestChildArguments(SimpleTestCase):\n \n     @mock.patch.dict(sys.modules, {'__main__': test_main})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_with_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_non_django_module(self):\n         self.assertEqual(\n@@ -190,6 +208,15 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_with_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n@@ -201,6 +228,15 @@ class TestChildArguments(SimpleTestCase):\n                     [exe_path, 'runserver']\n                 )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_with_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n",
  "django__django-14349": "",
  "django__django-14351": "",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..7ad9ca0 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -179,7 +179,11 @@ class DateFormatTests(SimpleTestCase):\n                     expected_date,\n                 )\n \n-    def test_twelve_hour_format(self):\n+    def test_y_format_year_before_1000(self):\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n+        self.assertEqual(dateformat.format(datetime(1000, 1, 1), 'Y'), '1000')\n+        self.assertEqual(dateformat.format(datetime(2000, 1, 1), 'Y'), '2000')\n         tests = [\n             (0, '12'),\n             (1, '1'),\n",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..259c751 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,7 +38,65 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n-    def test_options_override_settings_proper_values(self):\n+    def test_options_deprecated_vs_new_kwargs(self):\n+        # Test with both deprecated ('db', 'passwd') and new ('database', 'password') keywords.\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args_deprecated = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env_deprecated = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        expected_args_new = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env_new = {'MYSQL_PWD': 'optionpassword'}\n+\n+        # Test with deprecated options\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args_deprecated, expected_env_deprecated),\n+        )\n+\n+        # Test with new option keys\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args_new, expected_env_new),\n+        )\n         settings_port = 444\n         options_port = 555\n         self.assertNotEqual(settings_port, options_port, 'test pre-req')\n",
  "django__django-14434": "",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 17aecdd..c98e65e 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -454,6 +454,10 @@ class TestCollectionManifestStorage(TestHashedFiles, CollectionTestCase):\n         )\n \n \n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+from django.test import override_settings\n+from io import StringIO\n+\n @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoneHashStorage')\n class TestCollectionNoneHashStorage(CollectionTestCase):\n     hashed_file_path = hashed_file_path\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..27d3e77 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -642,7 +642,30 @@ class ExecutorTests(MigrationTestBase):\n         # Record all replaced migrations as applied\n         recorder.record_applied(\"migrations\", \"0001_initial\")\n         recorder.record_applied(\"migrations\", \"0002_second\")\n+from django.test import TestCase, override_settings\n+from django.db import connection\n+from django.db.migrations.executor import MigrationExecutor\n+from django.db.migrations.recorder import MigrationRecorder\n+\n+class MigrationExecutorTestCase(TestCase):\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_unapply_squashed_migration(self):\n         executor = MigrationExecutor(connection)\n+        recorder = MigrationRecorder(connection)\n+        \n+        # Assume '0001_squashed_0002' is a squashed migration of '0001' and '0002'\n+        # Simulate applying squashed migration\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        self.assertIn(('migrations', '0001_squashed_0002'), recorder.applied_migrations())\n+        \n+        # Now unapply the squashed migration\n+        executor.migrate([('migrations', None)])\n+        \n+        # Assert that the squashed migration is marked as unapplied\n+        self.assertNotIn(('migrations', '0001_squashed_0002'), recorder.applied_migrations())\n+        # Assert replaced migrations are marked unapplied\n+        self.assertNotIn(('migrations', '0001'), recorder.applied_migrations())\n+        self.assertNotIn(('migrations', '0002'), recorder.applied_migrations())\n         executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n \n         # Because 0001 and 0002 are both applied, even though this migrate run\n",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..381bca2 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -255,6 +255,26 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n             ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            (\n+                'Visit this: example.com/?test=2&gt;.',\n+                'Visit this: <a href=\"http://example.com/?test=2%3E\">example.com/?test=2&gt</a>.'\n+            ),\n+            (\n+                'Check http://mysite.org/path?arg=param&gt; for more.',\n+                'Check <a href=\"http://mysite.org/path?arg=param%3E\">http://mysite.org/path?arg=param&gt</a> for more.'\n+            ),\n+            (\n+                'An example: foo.com/bar?baz=42&gt! and more text.',\n+                'An example: <a href=\"http://foo.com/bar?baz=42%3E\">foo.com/bar?baz=42&gt</a>! and more text.'\n+            ),\n+            (\n+                'Look at google.com/search?q=query&amp;page=1.',\n+                'Look at <a href=\"http://google.com/search?q=query&amp;page=1\">google.com/search?q=query&amp;page=1</a>.'\n+            ),\n         )\n         for value, output in tests:\n             with self.subTest(value=value):\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..812ae27 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,7 +115,26 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n-    def test_update_primary_key(self):\n+    def test_check_bulk_update_returns_zero_on_empty(self):\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_check_bulk_update_returns_correct_count(self):\n+        Note.objects.bulk_create(\n+            [Note(note=f'Note {i}', misc=f'Misc {i}') for i in range(2000)]\n+        )\n+        notes = Note.objects.all()\n+        for note in notes:\n+            note.note = 'Updated note'\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_count_with_duplicates(self):\n+        note = Note.objects.create(note='test-note', misc='test')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n \n",
  "django__django-14608": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 0b8d2fa..00c73a6 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -3349,6 +3349,8 @@ class AdminViewListEditable(TestCase):\n         non_form_errors = response.context['cl'].formset.non_form_errors()\n         self.assertIsInstance(non_form_errors, ErrorList)\n         self.assertEqual(str(non_form_errors), str(ErrorList([\"Grace is not a Zombie\"])))\n+        # Additional test to check for 'nonform' CSS class\n+        self.assertIn('nonform', str(non_form_errors))\n \n     def test_list_editable_ordering(self):\n         collector = Collector.objects.create(id=1, name=\"Frederick Clegg\")\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..ae08385 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,44 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_datetime_clean_initial_callable_disabled_consistency(self):\n+        \"\"\"\n+        Test that the cleaned field value matches the BoundField's initial value.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        clean_dt = form.cleaned_data['dt']\n+        bf_dt_initial = form['dt'].initial\n+        self.assertEqual(clean_dt, bf_dt_initial)\n+\n+    def test_changed_data_with_boundfield(self):\n+        \"\"\"\n+        Test that changed_data correctly reports no changes when initialized with\n+        BoundField handling.\n+        \"\"\"\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45))\n+\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n+        self.assertEqual(form.changed_data, [])\n+\n+    def test_clean_fields_respects_boundfield_initial(self):\n+        \"\"\"\n+        Ensure that _clean_fields respects the initial value of BoundField when it's accessed.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        self.assertEqual(form.errors, {})\n+        self.assertEqual(form.cleaned_data, {'dt': now})\n+        self.assertEqual(form['dt'].initial, now)\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..61094e6 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -1,8 +1,58 @@\n from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n+class ThroughFieldsHashableTests(TestCase):\n+    def test_m2m_with_through_fields_is_hashable(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        # Ensure that creating an instance of this model structure does not raise any errors.\n+        self.assertEqual(ProxyParent.check(), [])\n+\n+    def test_hash_of_m2m_with_through_fields(self):\n+        # Reuse the models from the issue description to test their hashability\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Child(models.Model):\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+\n+        reverse_m2m = Child._meta.get_field('many_to_many_field')\n+        # Assert statements to ensure through_fields is hashable\n+        self.assertEqual(reverse_m2m.through_fields, ['child', 'parent'])\n+        self.assertIsInstance(hash(reverse_m2m), int)  # Should not raise a TypeError\n+\n from django.db import IntegrityError\n from django.test import TestCase\n+from django.db import models\n+from django.core.checks import Error\n \n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..ddd068e 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -11,7 +12,10 @@ from django.http import Http404\n from django.test import RequestFactory, override_settings\n from django.urls import reverse, reverse_lazy\n \n+import datetime\n from .admin import AnswerAdmin, QuestionAdmin\n+from django.test import TestCase\n+from .models import Question\n from .models import (\n     Answer, Author, Authorship, Bonus, Book, Employee, Manager, Parent,\n     PKChild, Question, Toy, WorkHour,\n",
  "django__django-14765": "",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..52616b5 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -195,7 +195,16 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_propagation(self):\n+        \"\"\"Test that -X options are properly propagated by the auto-reloader.\"\"\"\n+        expected = [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            expected\n+        )\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n         self.assertEqual(\n@@ -235,8 +244,17 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_propagation(self):\n+        \"\"\"Test that -X options are properly propagated by the auto-reloader.\"\"\"\n+        expected = [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            expected\n+        )\n+    @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n         module = types.ModuleType('test_module')\n         del module.__spec__\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..27478ff 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -199,6 +199,29 @@ class MethodDecoratorTests(SimpleTestCase):\n     \"\"\"\n     Tests for method_decorator\n     \"\"\"\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n     def test_preserve_signature(self):\n         class Test:\n             @simple_dec_m\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..5affc52 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,7 +5085,35 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n-    def test_change_form_renders_correct_null_choice_value(self):\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test that readonly ForeignKey fields in a custom Admin Site generate\n+        URLs with the correct admin prefix.\n+        \"\"\"\n+        custom_site = site2\n+        book = Book.objects.create(name='Book 2')\n+        chapter = Chapter.objects.create(\n+            title='Chapter 2',\n+            content='content',\n+            book=book,\n+        )\n+        language = Language.objects.create(iso='_41', name='Custom Test')\n+        \n+        # Ensure the language is registered in the custom admin site\n+        custom_site.register(Language)\n+        \n+        # Use the custom admin site's URL\n+        response = self.client.get(reverse('namespaced_admin:admin_views_readonlyrelatedfield_change', args=(chapter.pk,)))\n+        language_url = reverse('namespaced_admin:admin_views_language_change', args=(quote(language.pk),))\n+\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_41</a></div>' % language_url,\n+            html=True,\n+        )\n+\n+        # Ensure that the related Chapter object not registered in the custom admin site doesn't generate a URL\n+        self.assertContains(response, '<div class=\"readonly\">Chapter 2</div>', html=True)\n         \"\"\"\n         Regression test for #17911.\n         \"\"\"\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..350b8cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..2372080 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,7 +793,30 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n-    def test_rename_m2m_target_model(self):\n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Ensuring no queries (noops) are made on forwards operation\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Ensuring no queries (noops) are made on backwards operation\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n             migrations.CreateModel(\"Rider\", fields=[\n",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..b4bafe5 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -144,14 +144,58 @@ class ChangeListTests(TestCase):\n         class GetListSelectRelatedAdmin(admin.ModelAdmin):\n             list_display = ('band', 'player')\n \n-            def get_list_select_related(self, request):\n-                return ('band', 'player')\n+from django.test import TestCase\n+from django.contrib.admin.sites import site as custom_site\n+from django.contrib.admin.views.main import SEARCH_VAR\n+from django.db import connection\n+from .models import Parent, Child\n+from .admin import ParentAdmin, ParentAdminTwoSearchFields\n+\n+...\n+\n+class OptimizedJoinTests(TestCase):\n+    # Adding test cases to ensure optimized join queries in changelist\n+    \n+    def setUp(self):\n+        self.superuser = User.objects.create_superuser('admin', 'admin@example.com', 'password')\n+        self.factory = RequestFactory()\n \n-        ia = GetListSelectRelatedAdmin(Invitation, custom_site)\n-        request = self.factory.get('/invitation/')\n+    def test_many_search_terms(self):\n+        # Original test to ensure optimized joins\n+        parent = Parent.objects.create(name='Mary')\n+        Child.objects.create(parent=parent, name='Danielle')\n+        Child.objects.create(parent=parent, name='Daniel')\n+\n+        m = ParentAdmin(Parent, custom_site)\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'daniel ' * 80})\n         request.user = self.superuser\n-        cl = ia.get_changelist_instance(request)\n-        self.assertEqual(cl.queryset.query.select_related, {'player': {}, 'band': {}})\n+\n+        cl = m.get_changelist_instance(request)\n+        with CaptureQueriesContext(connection) as context:\n+            object_count = cl.queryset.count()\n+\n+        self.assertEqual(object_count, 1)\n+        self.assertEqual(context.captured_queries[0]['sql'].count('JOIN'), 1)\n+\n+    def test_related_field_multiple_search_terms(self):\n+        # Ensuring multi-value relationship queries are optimized\n+        parent = Parent.objects.create(name='Mary')\n+        Child.objects.create(parent=parent, name='Danielle', age=18)\n+        Child.objects.create(parent=parent, name='Daniel', age=19)\n+\n+        m = ParentAdminTwoSearchFields(Parent, custom_site)\n+\n+        # Test search for \"danielle 19\" that doesn't return results\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'danielle 19'})\n+        request.user = self.superuser\n+        cl = m.get_changelist_instance(request)\n+        self.assertEqual(cl.queryset.count(), 0)\n+\n+        # Test search for \"daniel 19\" that returns a result\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'daniel 19'})\n+        request.user = self.superuser\n+        cl = m.get_changelist_instance(request)\n+        self.assertEqual(cl.queryset.count(), 1)\n \n     def test_result_list_empty_changelist_value(self):\n         \"\"\"\n",
  "django__django-15037": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 19402bb..d182453 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -204,7 +204,18 @@ class InspectDBTestCase(TestCase):\n             output,\n         )\n \n-    def test_digits_column_name_introspection(self):\n+    @skipUnlessDBFeature('can_introspect_foreign_keys')\n+    def test_foreign_key_to_unique_field(self):\n+        \"\"\"\n+        Test introspection of a foreign key to a non-primary key unique field.\n+        \"\"\"\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foreignkeytouniquefield', stdout=out)\n+        output = out.getvalue()\n+        self.assertIn(\n+            \"to_field_fk = models.ForeignKey('InspectdbPeoplemoredata', models.DO_NOTHING, to_field='people_unique')\",\n+            output,\n+        )\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n         out = StringIO()\n",
  "django__django-15103": "",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..75dead0 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2835,6 +2835,50 @@ class AutodetectorTests(TestCase):\n                 )\n \n \n+from django.db import models\n+from django.db.migrations.state import ProjectState, ModelState\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.test import TestCase\n+\n+# New test case for handling the issue with custom ForeignKeys\n+\n+class TestCustomForeignKeyHandling(TestCase):\n+    def test_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.HardcodedModel'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']  # Mimicking the behavior that causes the issue\n+                return name, path, args, kwargs\n+\n+        # Setting up before and after states\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [\n+            ('custom_fk', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ]))\n+\n+        # Running the autodetector to see if it handles the missing 'to' key gracefully\n+        changes = MigrationAutodetector(before, after)._detect_changes()\n+        self.assertEqual(len(changes['testapp']), 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='TestModel')\n+\n+    def assertOperationTypes(self, changes, app_label, index, types):\n+        migration = changes[app_label][index]\n+        self.assertEqual([type(op).__name__ for op in migration.operations], types)\n+\n+    def assertOperationAttributes(self, changes, app_label, index, operation_index, **attrs):\n+        migration = changes[app_label][index]\n+        operation = migration.operations[operation_index]\n+        for attr, value in attrs.items():\n+            self.assertEqual(getattr(operation, attr), value)\n+\n class MigrationSuggestNameTests(SimpleTestCase):\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..cb773bb 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -36,6 +37,17 @@ class override_settings_tags(override_settings):\n         base.LEVEL_TAGS = self.old_level_tags\n \n \n+class TestOverrideLevelTags(SimpleTestCase):\n+    @override_settings(MESSAGE_TAGS={constants.INFO: 'info', constants.DEBUG: '', constants.WARNING: 'warn', constants.ERROR: 'error', 15: 'custom'})\n+    def test_override_settings_and_message_tags_update(self):\n+        self.assertEqual(base.LEVEL_TAGS, {\n+            constants.INFO: 'info',\n+            constants.DEBUG: '',\n+            constants.WARNING: 'warn',\n+            constants.ERROR: 'error',\n+            15: 'custom'\n+        })\n+\n class BaseTests:\n     storage_class = default_storage\n     levels = {\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..753271e 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2095,13 +2095,51 @@ class QuerySetBitwiseOperationTests(TestCase):\n         cls.room_3 = Classroom.objects.create(school=cls.school, has_blackboard=True, name='Room 3')\n         cls.room_4 = Classroom.objects.create(school=cls.school, has_blackboard=False, name='Room 4')\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    def test_conflicting_aliases_during_combine(self):\n+        tag = Tag.objects.create(name='test_tag')\n+        annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        base_user_1 = BaseUser.objects.create(annotation=annotation_1)\n+        base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        task = Task.objects.create(owner=base_user_2, creator=base_user_2, note=annotation_1.notes.create(tag=tag))\n+\n+        # QuerySets to trigger the alias conflict\n+        qs1 = annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=annotation_1.notes.all()) |\n+            Q(creator__note__in=annotation_1.notes.all())\n+        )\n+\n+        # Verify the composition and commutative property of the querysets\n+        self.assertSequenceEqual(list(qs1), [base_user_1])\n+        self.assertSequenceEqual(list(qs2), [base_user_2])\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [base_user_1, base_user_2])\n     def test_or_with_rhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)\n         qs2 = Classroom.objects.filter(has_blackboard=False)[:1]\n         self.assertCountEqual(qs1 | qs2, [self.room_1, self.room_2, self.room_3])\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    def test_conflicting_aliases_during_combine(self):\n+        tag = Tag.objects.create(name='test_tag')\n+        annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        base_user_1 = BaseUser.objects.create(annotation=annotation_1)\n+        base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        task = Task.objects.create(owner=base_user_2, creator=base_user_2, note=annotation_1.notes.create(tag=tag))\n+\n+        # QuerySets to trigger the alias conflict\n+        qs1 = annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=annotation_1.notes.all()) |\n+            Q(creator__note__in=annotation_1.notes.all())\n+        )\n+\n+        # Verify the composition and commutative property of the querysets\n+        self.assertSequenceEqual(list(qs1), [base_user_1])\n+        self.assertSequenceEqual(list(qs2), [base_user_2])\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [base_user_1, base_user_2])\n     def test_or_with_lhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)[:1]\n         qs2 = Classroom.objects.filter(has_blackboard=False)\n",
  "django__django-15161": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex ca4c20d..ff3e889 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -599,6 +599,18 @@ class WriterTests(SimpleTestCase):\n         string = MigrationWriter.serialize(validator)[0]\n         self.assertEqual(string, \"migrations.test_writer.EmailValidator(message='hello')\")\n \n+    def test_serialize_deconstruct_F_expression(self):\n+        index = models.Index(\n+            models.F('rating'),\n+            name='f_expression_index',\n+        )\n+        string, imports = MigrationWriter.serialize(index)\n+        self.assertEqual(\n+            string,\n+            \"models.Index(models.F('rating'), name='f_expression_index')\"\n+        )\n+        self.assertEqual(imports, {'from django.db import models'})\n+\n         validator = deconstructible(path=\"custom.EmailValidator\")(EmailValidator)(message=\"hello\")\n         with self.assertRaisesMessage(ImportError, \"No module named 'custom'\"):\n             MigrationWriter.serialize(validator)\n",
  "django__django-15268": "",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..6bd5b4b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1852,8 +1852,50 @@ class ValueTests(TestCase):\n         with self.assertRaisesMessage(FieldError, msg):\n             Value(object()).output_field\n \n+    def test_resolve_char_field_with_no_max_length(self):\n+        \"\"\"\n+        Ensure that CharField created without a max_length doesn't have a MaxLengthValidator.\n+        \"\"\"\n+        value = Value('test_string')\n+        field = value._resolve_output_field()\n+        self.assertIsInstance(field, fields.CharField)\n+        self.assertTrue(all(\n+            not isinstance(validator, validators.MaxLengthValidator) \n+            for validator in field.validators\n+        ))\n \n-class ExistsTests(TestCase):\n+    def test_resolve_various_value_types(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        import datetime\n+        import uuid\n+        from decimal import Decimal\n+\n+        value_types = [\n+            'str',\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15, 15, 30),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'bytes',\n+            uuid.uuid4(),\n+            None,  # Testing with None to ensure it handles safely\n+            '',  # Empty string\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                if isinstance(value, str):\n+                    self.assertIsInstance(field, fields.CharField)\n+                # Performing field.clean to ensure no exceptions are raised\n+                field.clean(value, model_instance=None)\n     def test_optimizations(self):\n         with CaptureQueriesContext(connection) as context:\n             list(Experiment.objects.values(exists=Exists(\n",
  "django__django-15278": "",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..480272e 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -19,6 +19,26 @@ class Nested:\n \n class BasicFieldTests(SimpleTestCase):\n \n+    def test_hash_immutability(self):\n+        \"\"\"\n+        Test that the hash of a field object remains unchanged even after\n+        the field is associated with a model class.\n+        \"\"\"\n+        field = models.CharField(max_length=200)\n+        original_hash = hash(field)\n+        field_dict = {field: 'data'}\n+\n+        # Before being assigned to a model, the field should be in the dictionary.\n+        self.assertIn(field, field_dict)\n+\n+        class TestModel(models.Model):\n+            test_field = field\n+\n+        # Ensure the hash remains the same after assignment.\n+        self.assertEqual(original_hash, hash(field))\n+        # Ensure the field is still in the dictionary.\n+        self.assertIn(field, field_dict)\n+\n     def test_show_hidden_initial(self):\n         \"\"\"\n         Fields with choices respect show_hidden_initial as a kwarg to\n",
  "django__django-15368": "",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..1e99f29 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,7 +1049,29 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n-    def test_rename_model(self):\n+    def test_rename_model_and_field_together(self):\n+        \"\"\"Test autodetection of renaming a model and a field at the same time.\"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState('testapp', 'RenamedAuthor', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        # Ensure the renaming process generates the correct number of migrations\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        # Verify that the model rename attributes are correct\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        # Verify that the field rename attributes are correct\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n             [self.author_with_book, self.book],\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..1264dbf 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,7 +1906,34 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n-class FieldTransformTests(TestCase):\n+from django.db.models import Exists, Q\n+from django.test import TestCase\n+from myapp.models import Manager, MyModel  # Assuming these are the correct model paths\n+\n+class ExistsSubqueryTests(TestCase):\n+\n+    def test_negated_empty_exists(self):\n+        # Original test case to ensure its correctness and does not break.\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(~Exists(Manager.objects.none()) & Q(pk=manager.pk))\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_exists_subquery_removal_with_other_filter(self):\n+        # New test case to check filter with additional conditions\n+        obj = MyModel.objects.create(name='test')\n+        qs = MyModel.objects.filter(~Exists(MyModel.objects.none()), name='test')\n+        self.assertSequenceEqual(qs, [obj])\n+        \n+    def test_negated_exists_with_non_empty_queryset(self):\n+        # Test negated Exists with a non-empty queryset\n+        Manager.objects.create(name='exists')\n+        qs = Manager.objects.filter(~Exists(Manager.objects.filter(name='exists')))\n+        self.assertQuerysetEqual(qs, [])\n+\n+    def test_exists_with_empty_queryset(self):\n+        # Test non-negated Exists with an empty queryset is correctly handled\n+        qs = Manager.objects.filter(Exists(Manager.objects.none()))\n+        self.assertQuerysetEqual(qs, [])\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..66c76aa 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -9,6 +9,10 @@ try:\n except ImportError:\n     from backports import zoneinfo\n \n+from django.contrib.contenttypes.models import ContentType\n+from django.contrib.admin import ModelAdmin\n+from .models import Inventory  # Assuming Inventory model is defined somewhere in models\n+\n from django import forms\n from django.conf import settings\n from django.contrib import admin\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..5db032c 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,63 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_model_and_alter_managers_and_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Foo\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Foo\",\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelOptions(\n+                    name=\"Foo\",\n+                    options={\"verbose_name\": \"Test Foo\"},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\",\n+                    fields=[],\n+                    managers=[(\"objects\", models.Manager())],\n+                    options={\"verbose_name\": \"Test Foo\"},\n+                ),\n+            ],\n+        )\n+        \n+    def test_create_model_multiple_alterations(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"extras\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelOptions(\n+                    name=\"Bar\",\n+                    options={\"verbose_name_plural\": \"Bars\"},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[(\"objects\", models.Manager()), (\"extras\", models.Manager())],\n+                    options={\"verbose_name_plural\": \"Bars\"},\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..c20c484 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,54 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+import json\n+from django.test import TestCase\n+from django.core import management\n+from django.core.serializers import serialize\n+from .models import NaturalKeyWithFKDependency, Person\n+\n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"other\"}\n+\n+    def setUp(self):\n+        Person.objects.using(\"other\").create(name=\"J.R.R. Tolkien\")\n+\n+    def test_natural_key_dependencies(self):\n+        \"\"\"\n+        Test loading data using natural keys with foreign key dependencies\n+        into a non-default database.\n+        \"\"\"\n+        fixture_data = [\n+            {\n+                \"model\": \"fixtures_regress.person\",\n+                \"fields\": {\n+                    \"name\": \"J.R.R. Tolkien\"\n+                }\n+            },\n+            {\n+                \"model\": \"fixtures_regress.naturalkeywithfkdependency\",\n+                \"fields\": {\n+                    \"name\": \"The Hobbit\",\n+                    \"author\": [\"J.R.R. Tolkien\"]\n+                }\n+            }\n+        ]\n+\n+        with open('temp_fixture.json', 'w') as f:\n+            json.dump(fixture_data, f)\n+\n+        # Loading the fixture into the \"other\" database\n+        management.call_command(\n+            \"loaddata\", \n+            \"temp_fixture.json\", \n+            database=\"other\", \n+            verbosity=0\n+        )\n+\n+        # Verify that the data is loaded correctly\n+        obj = NaturalKeyWithFKDependency.objects.using(\"other\").get(name=\"The Hobbit\")\n+        self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..b33d6e0 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,7 +3961,40 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n-    def test_add_textfield_unhashable_default(self):\n+    def test_alter_field_choices_noop(self):\n+        \"\"\"\n+        Test that altering field choices is a no-op in SQLite, i.e., it generates no SQL.\n+        This is important for ensuring migrations are indeed optimized and platform-specific.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        \n+        # Test altering the field to add choices\n+        new_field = CharField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        \n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        \n+        # Test altering the field back to remove choices\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_noop_with_identical_field(self):\n+        \"\"\"\n+        Test that altering a field to an identical field results in no operation.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        identical_field = Author._meta.get_field(\"name\")\n+\n+        # Attempt to alter a field to itself\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, identical_field, identical_field, strict=True)\n         # Create the table\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..d641eb7 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -324,8 +324,18 @@ class LookupTests(TestCase):\n             # getting the lookups again should re-cache\n             self.assertIn(\"exactly\", field.get_lookups())\n \n+    def test_unregister_lookups_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register and cache the lookup\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+            self.assertIs(field.get_lookup(\"exactly\"), Exactly)\n \n-class BilateralTransformTests(TestCase):\n+        # Unregistering the lookup should clear the cache\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        field.get_lookups.cache_clear()  # Clear cache explicitly\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n     def test_bilateral_upper(self):\n         with register_lookup(models.CharField, UpperBilateralTransform):\n             author1 = Author.objects.create(name=\"Doe\")\n",
  "django__django-15572": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 188dca4..109f984 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -76,7 +76,33 @@ class TemplateReloadTests(SimpleTestCase):\n             },\n         )\n \n-    @mock.patch(\"django.template.loaders.base.Loader.reset\")\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_empty_path(self):\n+        # Test that a TEMPLATES DIRS containing an empty string is ignored.\n+        self.assertEqual(autoreload.get_template_directories(), set())\n+\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"/valid/path\", \"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_with_valid_and_empty_path(self):\n+        # Test that only valid paths are included and empty paths are ignored.\n+        self.assertEqual(\n+            autoreload.get_template_directories(),\n+            {Path.cwd() / \"valid/path\"}\n+        )\n     def test_reset_all_loaders(self, mock_reset):\n         autoreload.reset_loaders()\n         self.assertEqual(mock_reset.call_count, 2)\n",
  "django__django-15731": "",
  "django__django-15741": "diff --git a/tests/i18n/tests.py b/tests/i18n/tests.py\nindex 1f80a63..ee9f827 100644\n--- a/tests/i18n/tests.py\n+++ b/tests/i18n/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import gettext as gettext_module\n@@ -11,6 +12,8 @@ from pathlib import Path\n from unittest import mock\n \n from asgiref.local import Local\n+from django.utils.translation import gettext_lazy as _\n+from django.utils.formats import get_format\n \n from django import forms\n from django.apps import AppConfig\n@@ -1514,6 +1517,10 @@ class FormattingTests(SimpleTestCase):\n             list(iter_format_modules(\"en-gb\")), [en_gb_format_mod, en_format_mod]\n         )\n \n+    def test_get_format_with_lazy_string(self):\n+        # This is a regression test for the issue where get_format failed with lazy strings.\n+        self.assertEqual(get_format(_(\"DATE_FORMAT\")), \"N j, Y\")\n+\n     def test_get_format_modules_lang(self):\n         with translation.override(\"de\", deactivate=True):\n             self.assertEqual(\".\", get_format(\"DECIMAL_SEPARATOR\", lang=\"en\"))\n@@ -1525,6 +1532,10 @@ class FormattingTests(SimpleTestCase):\n         context = Context(\n             {\"int\": 1455, \"float\": 3.14, \"date\": datetime.date(2016, 12, 31)}\n         )\n+\n+    def test_get_format_with_lazy_string(self):\n+        # This is a regression test for the issue where get_format failed with lazy strings.\n+        self.assertEqual(get_format(_(\"DATE_FORMAT\")), \"N j, Y\")\n         template1 = Template(\n             \"{% load l10n %}{% localize %}\"\n             \"{{ int }}/{{ float }}/{{ date }}{% endlocalize %}; \"\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..deeb330 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -395,7 +395,17 @@ class ProxyModelTests(TestCase):\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n \n-    def test_eq(self):\n+    def test_proxy_model_with_select_related_and_only(self):\n+        # Create instances of models\n+        custom_model = CustomModel.objects.create(name=\"CustomName\")\n+        proxy_custom_model = ProxyCustomModel.objects.create(name=\"ProxyName\")\n+        another_model = AnotherModel.objects.create(custom=proxy_custom_model)\n+        \n+        # Test using select_related with only() on proxy model\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        retrieved_instance = qs.get()\n+        self.assertEqual(retrieved_instance, another_model)\n+        self.assertEqual(retrieved_instance.custom.name, \"ProxyName\")\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..e1054d2 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,7 +157,21 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n-    @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n+    def test_psql_with_additional_parameters(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env(\n+                {\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]\n+            ),\n+            ([\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"], None),\n+        )\n+\n+    def test_psql_with_multiple_parameters(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env(\n+                {\"NAME\": \"dbname\"}, [\"-h\", \"localhost\", \"-p\", \"5432\"]\n+            ),\n+            ([\"psql\", \"-h\", \"localhost\", \"-p\", \"5432\", \"dbname\"], None),\n+        )\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n \n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..a5f38fe 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -31,6 +31,8 @@ class FloatformatTests(SimpleTestCase):\n         self.assertEqual(output, \"1.4 1.4\")\n \n \n+from decimal import Decimal\n+\n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n         self.assertEqual(floatformat(7.7), \"7.7\")\n@@ -74,6 +76,32 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n+    def test_decimal_precision(self):\n+        # Test that the floatformat keeps the precision of Decimal values\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20), \n+            \"42.12345678901234567890\"\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21), \n+            \"123456.123456789012345678901\"\n+        )\n+        # Test with a Decimal that has trailing zeros and ensure they remain\n+        self.assertEqual(\n+            floatformat(Decimal(\"15.000000000000000000\"), 18), \n+            \"15.000000000000000000\"\n+        )\n+        # Test extremely large numbers\n+        self.assertEqual(\n+            floatformat(Decimal(\"1.23456789012345678901234567890123456789e+25\"), 40),\n+            \"12345678901234567890123456.789012345678901234567890000000000000000000\"\n+        )\n+        # Test small numbers\n+        self.assertEqual(\n+            floatformat(Decimal(\"1.23456789012345678901234567890123456789e-25\"), 40),\n+            \"0.000000000000000000000000123456789012345678901234567890000000000000\"\n+        )\n+\n     def test_force_grouping(self):\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n",
  "django__django-15930": "",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..8769917 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -575,7 +576,24 @@ class TestFixtures(TestCase):\n             os.path.join(_cur_dir, \"fixtures_2\"),\n         ]\n     )\n-    def test_loaddata_with_valid_fixture_dirs(self):\n+    @override_settings(\n+        FIXTURE_DIRS=[\n+            Path(_cur_dir) / \"fixtures\",\n+            Path(_cur_dir) / \"fixtures\",  # Duplicate entry as a Path instance\n+        ]\n+    )\n+    def test_fixture_dirs_duplicates_with_path_instances(self):\n+        \"\"\"\n+        Test that duplicate directories in FIXTURE_DIRS are detected\n+        even when using Path instances.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a default fixture directory for the '%s' app \"\n+            \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"), \"fixtures_regress\")\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n         management.call_command(\n             \"loaddata\",\n             \"absolute.json\",\n",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..74533c5 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -988,6 +988,31 @@ class NonAggregateAnnotationTestCase(TestCase):\n         self.assertCountEqual(\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n+    \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        from django.db.models import Value\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n \n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..7ef76c5 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2406,6 +2406,10 @@ class CombinableTests(SimpleTestCase):\n             object() ^ Combinable()\n \n \n+from django.db.models import Expression, IntegerField, DecimalField, FloatField, AutoField, F\n+from django.db.models.expressions import CombinedExpression, Combinable\n+from django.test import SimpleTestCase\n+\n class CombinedExpressionTests(SimpleTestCase):\n     def test_resolve_output_field_number(self):\n         tests = [\n@@ -2416,7 +2420,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..198217d 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,10 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from django.urls import reverse\n+from unittest import mock\n+from django.db import DatabaseError\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +404,61 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        # Create test data\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+        \n+        # Log in as superuser\n+        self.client.force_login(self.superuser)\n+        \n+        # Prepare changelist URL and POST data\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+\n+        # Mock a failure in log_change to simulate a database error\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+\n+        # Ensure original values are preserved\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        # Test partial success in transaction\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+\n+        # Ensure original values are preserved\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex f0e76b4..a1dcd7e 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -157,6 +157,9 @@ class Command(BaseCommand):\n                         \"performed for database connection '%s': %s\" % (alias, error),\n                         RuntimeWarning,\n                     )\n+        if check_changes and changes:\n+            sys.exit(1)\n+\n         # Before anything else, see if there's conflicting apps and drop out\n         # hard if there are any and they don't want to merge\n         conflicts = loader.detect_conflicts()\n",
  "django__django-16136": "",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..2db7821 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,4 +1,7 @@\n+\n import datetime\n+import urllib.parse\n+from django.urls import reverse\n import re\n from unittest import mock\n \n@@ -884,6 +887,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # original hashed password contains $\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_bug_19349_bound_password_field(self):\n         user = User.objects.get(username=\"testclient\")\n         form = UserChangeForm(data={}, instance=user)\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..f38028c 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,7 +1600,21 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n-    def test_runner_hostname(self):\n+    def test_runserver_zero_ip(self):\n+        \"\"\"Test that `runserver 0:8000` results in the correct server start address.\"\"\"\n+        with mock.patch('django.core.management.commands.runserver.run'):\n+            output = StringIO()\n+            with mock.patch('django.core.management.base.BaseCommand.stdout', new=output):\n+                call_command(\n+                    \"runserver\",\n+                    addrport=\"0:8000\",\n+                    use_reloader=False,\n+                    skip_checks=True,\n+                )\n+            self.assertIn(\n+                \"Starting development server at http://0.0.0.0:8000/\",\n+                output.getvalue(),\n+            )\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n \n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..76e0fef 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -508,6 +508,44 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n+import datetime\n+import os\n+from django.test import TestCase, override_settings\n+from django.contrib.sitemaps import Sitemap\n+from django.urls import path\n+from django.utils import timezone\n+from django.utils.translation import gettext_lazy as _\n+\n+# This is a simple model stub used for testing.\n+class TestModel:\n+    pass\n+\n+class CallableLastmodNoItemsSitemap(Sitemap):\n+    location = \"/location/\"\n+\n+    def items(self):\n+        return []\n+\n+    def lastmod(self, obj):\n+        return obj.lastmod\n+\n+class SitemapTestsBase(TestCase):\n+    urls = \"tests.sitemaps_tests.urls.http\"\n+\n+    def assertXMLEqual(self, xml1, xml2):\n+        self.assertEqual(xml1.strip(), xml2.strip())\n+\n+class CallableLastmodNoItemsTest(SitemapTestsBase):\n+    def test_callable_lastmod_no_items(self):\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", response)\n+        expected_xml = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(response.content.decode(), expected_xml)\n+\n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..2b5dcf9 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,11 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n@@ -79,6 +84,11 @@ class NoFields(models.Model):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n+\n class SmallAutoFieldModel(models.Model):\n     id = models.SmallAutoField(primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..3938dfb 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,8 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n+from django.forms import ModelForm\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -252,7 +255,58 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n-    def test_password_whitespace_not_stripped(self):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_invalid_many_to_many_input(self):\n+        \"\"\"Test form with invalid ManyToManyField input.\"\"\"\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient2@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [\"invalid_id\"],  # Invalid org id\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), False)\n+\n+    def test_empty_many_to_many_field(self):\n+        \"\"\"Test form submission with an empty ManyToManyField\"\"\"\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient3@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [],  # Empty list for orgs\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [])\n         data = {\n             \"username\": \"testuser\",\n             \"password1\": \"   testpassword   \",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..eaa16b0 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,6 +161,25 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        # Create a datetime object 31 days in the past, with timezone info\n+        past_date = now - datetime.timedelta(days=31)\n+        past_date = timezone.make_aware(past_date, timezone.get_default_timezone())\n+        self.assertEqual(timesince(past_date, now), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz_multimonth(self):\n+        now = timezone.now()\n+        # Create a datetime object 62 days in the past, with timezone info\n+        past_date = now - datetime.timedelta(days=62)\n+        past_date = timezone.make_aware(past_date, timezone.get_default_timezone())\n+        # 62 days is approximately 2 months\n+        self.assertEqual(timesince(past_date, now), \"2\\xa0months\")\n+\n     def test_naive_datetime_with_tzinfo_attribute(self):\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..7875982 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -466,6 +466,27 @@ class CommandRunTests(AdminScriptTestCase):\n         )\n         out, err = self.run_manage([\"set_option\", \"--skip-checks\", \"--set\", \"foo\"])\n         self.assertNoOutput(err)\n+\n+class SubparserErrorFormattingTests(SimpleTestCase):\n+    def test_subparser_error_formatting_for_missing_argument(self):\n+        from django.core.management import call_command, CommandError\n+\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(required=True)\n+                create = subparsers.add_parser(\"create\")\n+                create.add_argument(\"name\")\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        with self.assertRaises(CommandError) as cm:\n+            call_command('test_command', 'create')\n+\n+        self.assertIn(\n+            \"manage.py test_command create: error: the following arguments are required: name\",\n+            str(cm.exception),\n+        )\n         self.assertEqual(out.strip(), \"Set foo\")\n \n \n",
  "django__django-16485": "",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..630c368 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,6 +1018,17 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_callable_returning_default_storage(self):\n+        \"\"\"\n+        Ensure a callable returning default_storage is not omitted in the deconstruct method.\n+        \"\"\"\n+        from .models import callable_default_storage\n+\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_default_storage)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..c51b7bd 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n+from django.contrib.auth import get_permission_codename\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from .tests import AdminViewBasicTestCase, get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n@@ -54,6 +57,38 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n                     template_context[\"show_save_and_add_another\"], expected_flag\n                 )\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_change_form_template_tags(self):\n         \"\"\"\n         admin_modify template tags follow the standard search pattern\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..23822df 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -237,6 +237,31 @@ class CheckConstraintTests(TestCase):\n         # Valid product.\n         constraint.validate(Product, Product(price=10, discounted_price=5))\n \n+    def test_check_constraint_custom_violation_error_code(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"check_custom_code\",\n+            violation_error_message=\"Check failed!\",\n+            violation_error_code=\"check_custom_code_violation\",\n+        )\n+        invalid_product = Product(price=10, discounted_price=20)\n+        with self.assertRaisesMessage(ValidationError, \"Check failed!\") as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"check_custom_code_violation\")\n+\n+    def test_unique_constraint_custom_violation_error_code(self):\n+        constraint = models.UniqueConstraint(\n+            fields=[\"name\"],\n+            name=\"unique_constraint_with_code\",\n+            violation_error_message=\"Unique violation.\",\n+            violation_error_code=\"unique_violation_code\",\n+        )\n+        duplicate_product = UniqueConstraintProduct(name=self.p1.name)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(UniqueConstraintProduct, duplicate_product)\n+        self.assertEqual(cm.exception.code, \"unique_violation_code\")\n+\n     def test_validate_boolean_expressions(self):\n         constraint = models.CheckConstraint(\n             check=models.expressions.ExpressionWrapper(\n",
  "django__django-16569": "",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..2c37c43 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,6 +43,22 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n+    def test_alter_field_reduction(self):\n+        \"\"\"\n+        Test that multiple AlterField operations on the same field are optimized\n+        to the last AlterField operation.\n+        \"\"\"\n+        operations = [\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=256, null=True)),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True)),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+        ]\n+        expected = [\n+            migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+        ]\n+        self.assertOptimizesTo(operations, expected)\n+\n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n",
  "django__django-16612": "",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..5a61b97 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,16 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        test_tuples_additional = (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_tuples_additional:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..93cc7ef 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,59 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_migration_import_order_default(self):\n+        \"\"\"\n+        Test that newly generated migration imports are ordered as per isort defaults and Django style guide.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Check that there are correctly ordered imports\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n+\n+    def test_migration_import_order_with_partial_imports(self):\n+        \"\"\"\n+        Test migration imports ordering when both full and partial imports exist.\n+        \"\"\"\n+        class AddFieldWithImport(migrations.AddField):\n+            def import_json(self):\n+                import json  # Simulating an additional import\n+\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    AddFieldWithImport(\n+                        \"mymodel\",\n+                        \"myfield3\",\n+                        models.JSONField(default=dict),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Check that there are correctly ordered imports, assuming import_json() runs and adds 'import json' \n+        self.assertIn(\n+            \"import datetime\\nimport json\\nfrom django.db import migrations, models\\n\",\n+            output\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..d1433e2 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -328,6 +328,17 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n \n     PersonModel = Person\n \n+    def test_post_init_not_connected(self):\n+        person_model_id = id(self.PersonModel)\n+        post_init_receivers = [\n+            sender_id for (_, sender_id), *_ in signals.post_init.receivers\n+        ]\n+        self.assertNotIn(\n+            person_model_id,\n+            post_init_receivers,\n+            \"post_init signal should not be connected when width_field and height_field are not set.\"\n+        )\n+\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..5e351fe 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -791,6 +791,21 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         self.assertEqual(errors, [])\n \n+    def test_readonly_field_refers_field_name_in_error(self):\n+        class CityInline(admin.TabularInline):\n+            model = City\n+            readonly_fields = [\"non_existent_field\"]\n+\n+        errors = CityInline(State, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'non_existent_field', which is not a callable, an attribute of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                obj=CityInline,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n     def test_nonexistent_field(self):\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = (\"title\", \"nonexistent\")\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..1d00323 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -19,7 +20,22 @@ class XorLookupsTests(TestCase):\n             self.numbers[:3] + self.numbers[8:],\n         )\n \n-    def test_filter_negated(self):\n+    def test_xor_parity(self):\n+        # Test for correct parity handling of XOR with an odd number of trues\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5)),\n+            [self.numbers[1]] + self.numbers[3:5]\n+        )\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5) ^ Q(num__gte=7)),\n+            self.numbers[1:3] + self.numbers[5:7],\n+        )\n+        \n+        # Test with five conditions as in the original issue\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5) ^ Q(num__gte=7) ^ Q(num__gte=9)),\n+            self.numbers[1:3] + self.numbers[5:7] + self.numbers[9:],\n+        )\n         self.assertCountEqual(\n             Number.objects.filter(Q(num__lte=7) ^ ~Q(num__lt=3)),\n             self.numbers[:3] + self.numbers[8:],\n@@ -64,4 +80,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..b0e1272 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -24,6 +24,12 @@ SOME_INSTALLED_APPS = [\n     \"django.contrib.staticfiles\",\n ]\n \n+from django.test import SimpleTestCase, override_settings\n+from django.apps import apps\n+from django.apps.registry import Apps\n+\n+import os\n+\n SOME_INSTALLED_APPS_NAMES = [\n     \"django.contrib.admin\",\n     \"django.contrib.auth\",\n",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..735475a 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,7 +641,33 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n-    def test_failing_migration(self):\n+    def test_makemigrations_only_calls_allow_migrate_with_correct_app_models(self):\n+        \"\"\"\n+        Test that makemigrations only calls allow_migrate with models\n+        corresponding to the current app being processed.\n+        \"\"\"\n+\n+        # Mock the MigrationRecorder to prevent schema operations during tests\n+        with mock.patch.object(MigrationRecorder, 'ensure_schema', return_value=None):\n+\n+            with self.settings(\n+                DATABASE_ROUTERS=['migrations.routers.TestRouter']\n+            ), mock.patch.object(TestRouter, 'allow_migrate', return_value=True) as allow_migrate:\n+\n+                with self.temporary_migration_module() as migration_dir:\n+                    call_command('makemigrations', 'migrations', verbosity=0)\n+\n+                    # Check if allow_migrate is called with the correct app names and models.\n+                    for mock_call in allow_migrate.mock_calls:\n+                        _, call_args, call_kwargs = mock_call\n+                        connection_alias, app_label = call_args\n+\n+                        # Ensure only models from the specific app are called\n+                        if app_label == 'migrations':\n+                            self.assertIn('UnicodeModel', call_kwargs['model_name'])\n+\n+        # Reset apps to remove test models\n+        apps.unregister_model('migrations', 'UnicodeModel')\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n \n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..3ee5376 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -297,8 +297,23 @@ class PaginationTests(SimpleTestCase):\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n+from django.core.paginator import Paginator\n+from django.test import TestCase\n \n-class ModelPaginationTests(TestCase):\n+class PaginationTests(TestCase):\n+\n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_empty_paginator_iteration(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n     \"\"\"\n     Test pagination with Django model instances\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..5e0c412 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -918,6 +918,9 @@ def test_hexbin_log():\n     plt.colorbar(h)\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n def test_inverted_limits():\n     # Test gh:1553\n     # Calling invert_xaxis prior to plotting should not disable autoscaling\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..33b4e20 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,6 +6960,24 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference plot\n+    axs = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    # Test plot with clearing each axis\n+    axs = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n \n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..7386c9b 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -294,21 +294,28 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n \n     ax_test = fig_test.subplots()\n     ax_ref = fig_ref.subplots()\n-    for ax, kwargs in zip([ax_test, ax_ref],\n-                          ({}, dict(xunits=None, yunits=None))):\n-        # First call works\n-        ax.plot([t0, t1], [\"V1\", \"V2\"], **kwargs)\n-        x_units = ax.xaxis.units\n-        y_units = ax.yaxis.units\n-        # this should not raise\n-        ax.plot([t2, t3], [\"V1\", \"V2\"], **kwargs)\n-        # assert that we have not re-set the units attribute at all\n-        assert x_units is ax.xaxis.units\n-        assert y_units is ax.yaxis.units\n-\n-\n-def test_hist():\n-    fig, ax = plt.subplots()\n-    n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n-    assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Test that no deprecation warning is emitted for empty data input on\n+    categorical axis.\n+    \"\"\"\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter(\"always\")\n+\n+        f, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.plot([], [])\n+        \n+        assert not any(item.category is MatplotlibDeprecationWarning for item in w), \\\n+            \"Deprecation warning was thrown on empty data input.\"\n+\n+\n+def test_empty_data_produces_no_artists():\n+    \"\"\"\n+    Test that providing empty data to the plot method results in\n+    no line artists being added to the axes.\n+    \"\"\"\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    lines = ax.plot([], [])\n+    assert len(lines) == 0, \"Empty data should result in no artists being created.\"\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..d584f22 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -919,6 +919,12 @@ def test_proportional_colorbars():\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import matplotlib.colors as mcolors\n+from matplotlib.colorbar import Colorbar\n+import pytest\n+\n def test_negative_boundarynorm():\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..07ce10b 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,31 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+\n+def test_get_backend_does_not_clear_gcf():\n+    # Test based on the described bug in the issue report.\n+    \n+    # Create a figure within an rc_context\n+    with rc_context():\n+        fig = plt.figure()\n+        \n+    # Store information about current figures\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    \n+    # Call get_backend() to see if it erroneously clears figures\n+    get_backend()\n+    \n+    # Store information post get_backend call\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    # Confirm figures remain the same, meaning they weren't cleared\n+    assert before == after, f\"Figures were cleared: before={before}, after={after}\"\n+    \n+    # Clean up the figure after test\n+    plt.close(fig)\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..fbdb67d 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -15,6 +15,8 @@ from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+import pytest\n \n \n mpl3d_image_comparison = functools.partial(\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..f721c1f 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -148,8 +148,25 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_test.set_angle(angle)\n     assert rect_test.get_angle() == angle\n \n+from matplotlib.testing.decorators import image_comparison\n+from matplotlib.patches import Rectangle\n+import matplotlib.pyplot as plt\n \n-def test_negative_rect():\n+@image_comparison(baseline_images=['test_dash_offset_patch'], extensions=['png'])\n+def test_dash_offset_patch():\n+    fig, ax = plt.subplots()\n+    ax.set_xlim(0, 2)\n+    ax.set_ylim(0, 2)\n+    \n+    # Rectangle with no offset and dash pattern of (10, 10)\n+    rect1 = Rectangle((0.5, 0.5), 1, 1, linewidth=2, edgecolor='r', linestyle=(0, (10, 10)))\n+    ax.add_patch(rect1)\n+    \n+    # Rectangle with offset 10 and dash pattern of (10, 10)\n+    rect2 = Rectangle((0.5, 0.5), 1, 1, linewidth=2, edgecolor='b', linestyle=(10, (10, 10)))\n+    ax.add_patch(rect2)\n+    \n+    plt.draw()\n     # These two rectangles have the same vertices, but starting from a\n     # different point.  (We also drop the last vertex, which is a duplicate.)\n     pos_vertices = Rectangle((-3, -2), 3, 2).get_verts()[:-1]\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..18b7243 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2853,6 +2853,24 @@ def test_stackplot():\n     x = np.linspace(0, 10, 10)\n     y1 = 1.0 * x\n     y2 = 2.0 * x + 1\n+\n+def test_stackplot_cycler_with_CN_aliases():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    from matplotlib.patches import Rectangle\n+\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    # Initial colors from the cycler\n+    initial_colors = [next(ax._get_lines.prop_cycler)['color'] for i in range(3)]\n+    assert len(initial_colors) == 3, \"Initial colors from the cycler should have 3 entries.\"\n+\n+    # Try using the stackplot with CN aliases\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+\n+    # Check if the property cycler is not altered\n+    after_colors = [next(ax._get_lines.prop_cycler)['color'] for i in range(3)]\n+    assert initial_colors == after_colors, \"Property cycler should remain unchanged after stackplot.\"\n     y3 = 3.0 * x + 2\n     ax = fig.add_subplot(1, 1, 1)\n     ax.stackplot(x, y1, y2, y3)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..258e433 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -327,7 +327,30 @@ def test_zorder():\n     assert OffsetBox(zorder=42).zorder == 42\n \n \n-def test_arrowprops_copied():\n+@pytest.mark.parametrize(\"align\", [\"top\", \"bottom\"])\n+def test_hpacker_alignments(align):\n+    fig, ax = plt.subplots(dpi=72)\n+    x1, y1 = 10, 30\n+    x2, y2 = 20, 60\n+    r1 = DrawingArea(x1, y1)\n+    r2 = DrawingArea(x2, y2)\n+    \n+    rect1 = mpatches.Rectangle((0, 0), x1, y1, fc=\"gray\", ec=\"black\")\n+    rect2 = mpatches.Rectangle((0, 0), x2, y2, fc=\"gray\", ec=\"black\")\n+    r1.add_artist(rect1)\n+    r2.add_artist(rect2)\n+\n+    hpacker = HPacker(children=[r1, r2], pad=0, sep=0, align=align)\n+    renderer = fig.canvas.get_renderer()\n+\n+    _, _, _, _, offset_pairs = hpacker.get_extent_offsets(renderer)\n+\n+    if align == \"top\":\n+        expected_offsets = [(0, 0), (x1, y2 - y1)]\n+    elif align == \"bottom\":\n+        expected_offsets = [(0, y2 - y1), (x1, 0)]\n+\n+    assert_allclose(offset_pairs, expected_offsets)\n     da = DrawingArea(20, 20, 0, 0, clip=True)\n     arrowprops = {\"arrowstyle\": \"->\", \"relpos\": (.3, .7)}\n     ab = AnnotationBbox(da, [.5, .5], xybox=(-0.2, 0.5), xycoords='data',\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..5d7733f 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -576,7 +576,49 @@ def test_svg_font_string(font_str, include_generic):\n         rest = rest + [generic]\n     plt.rcParams[f\"font.{generic}\"] = rest\n     plt.rcParams[\"font.size\"] = size\n-    plt.rcParams[\"svg.fonttype\"] = \"none\"\n+def test_annotationbbox_multi_gid():\n+    # Test multiple AnnotationBboxes with different gids\n+    fig, ax = plt.subplots()\n+    arr_img1 = np.ones((32, 32))\n+    arr_img2 = np.ones((32, 32)) * 0.5\n+    xy1 = (0.3, 0.55)\n+    xy2 = (0.6, 0.75)\n+\n+    imagebox1 = OffsetImage(arr_img1, zoom=0.1)\n+    imagebox1.image.axes = ax\n+    ab1 = AnnotationBbox(imagebox1, xy1)\n+    ab1.set_gid(\"box1\")\n+    ax.add_artist(ab1)\n+\n+    imagebox2 = OffsetImage(arr_img2, zoom=0.1)\n+    imagebox2.image.axes = ax\n+    ab2 = AnnotationBbox(imagebox2, xy2)\n+    ab2.set_gid(\"box2\")\n+    ax.add_artist(ab2)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    assert '<g id=\"box1\">' in buf\n+    assert '<g id=\"box2\">' in buf\n+\n+def test_annotationbbox_no_gid():\n+    # Test AnnotationBbox without a gid to ensure it does not mistakenly add one\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.5, 0.5)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+    ab = AnnotationBbox(imagebox, xy)\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    assert '<g id=' not in buf\n \n     fig, ax = plt.subplots()\n     if generic == \"sans-serif\":\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..9f00cc1 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,35 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_cmap_no_deprecation(dtype):\n+    # This test ensures there are no deprecation warnings when using cmap with different dtypes\n+    cm = plt.get_cmap(\"viridis\")\n+    with pytest.warns(None) as record:\n+        result = cm(dtype(0))\n+    assert len(record) == 0, \"Deprecation warning was raised!\"\n+\n+    # Check that it results in the same color as using int index 0\n+    assert_array_equal(result, cm(0))\n+\n+\n+def test_colormap_index_boundaries():\n+    # This test checks the behavior of colormap at the edge indices\n+    cm = plt.get_cmap(\"viridis\")\n+    N = cm.N\n+    indices = [-1, 0, 1, N - 1, N, N + 1]\n+    expected_no_warnings = True\n+    with pytest.warns(None) as record:\n+        results = [cm(i) for i in indices]\n+    assert len(record) == 0, \"Deprecation warnings were raised at boundaries!\"\n+    assert len(results) == len(indices), \"Incorrect number of colormap results!\"\n+\n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib.colors as mcolors\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..b8b71bb 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -580,8 +580,36 @@ class TestSpectral:\n         # these should not be almost equal\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n+    import numpy as np\n+    import pytest\n+    from numpy.testing import assert_allclose\n+    from matplotlib import mlab\n+    from scipy import signal\n \n-    def test_psd_window_hanning(self):\n+    def test_psd_window_flattop(self):\n+        if self.NFFT_density is None:\n+            return\n+        ydata = np.random.rand(self.NFFT_density)\n+        windowVals = signal.windows.flattop(self.NFFT_density_real)\n+        ycontrol = ydata * windowVals\n+\n+        spec_g, fsp_g = mlab.psd(x=ydata,\n+                                 NFFT=self.NFFT_density,\n+                                 Fs=self.Fs,\n+                                 noverlap=0,\n+                                 sides=self.sides,\n+                                 window=windowVals)\n+        spec_c, fsp_c = mlab.psd(x=ycontrol,\n+                                 NFFT=self.NFFT_density,\n+                                 Fs=self.Fs,\n+                                 noverlap=0,\n+                                 sides=self.sides,\n+                                 window=mlab.window_none)\n+        spec_c *= len(ydata) / (windowVals**2).sum()\n+        \n+        assert_allclose(spec_g*windowVals.sum()**2,\n+                        spec_c*self.Fs*(windowVals**2).sum(),\n+                        atol=1e-08)\n         if self.NFFT_density is None:\n             return\n         ydata = np.arange(self.NFFT_density)\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..5c6b197 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7825,7 +7825,26 @@ def test_relative_ticklabel_sizes(size):\n             assert tick.label1.get_size() == axis._get_tick_label_size(name)\n \n \n-def test_multiplot_autoscale():\n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n     fig = plt.figure()\n     ax1, ax2 = fig.subplots(2, 1, sharex='all')\n     ax1.scatter([1, 2, 3, 4], [2, 3, 2, 3])\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..108ce3b 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,48 @@\n+\n+import pickletools\n+\n+def test_pickle_figure_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [3, 4, 5], label='line')\n+    leg = ax.legend(draggable=True)\n+    \n+    # Check if the legend is set to draggable\n+    assert leg.get_draggable() is True\n+\n+    # Pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure that \"FigureCanvasAgg\", indicating a specific canvas type, is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Unpickle the figure\n+    loaded_fig = pickle.loads(pkl)\n+\n+    # Ensure the loaded figure is operative\n+    loaded_fig.canvas.draw()\n+    plt.close(loaded_fig)\n+\n+def test_pickle_figure_with_draggable_annotation():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [3, 4, 5], label='line')\n+    annotation = ax.annotate(\"Test\", (1, 4), draggable=True)\n+    \n+    # Check if the annotation is set to draggable\n+    assert annotation.draggable() is True\n+\n+    # Pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure that \"FigureCanvasAgg\", indicating a specific canvas type, is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Unpickle the figure\n+    loaded_fig = pickle.loads(pkl)\n+\n+    # Ensure the loaded figure is operative\n+    loaded_fig.canvas.draw()\n+    plt.close(loaded_fig)\n+\n from io import BytesIO\n import ast\n import pickle\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..1ca7123 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -44,6 +44,40 @@ def test_simple():\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pickle\n+from io import BytesIO\n+...\n+\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Test the pickling after calling `align_labels()`\n+    fig.align_labels()\n+\n+    # Ensure that this operation does not raise a TypeError\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+    except TypeError as e:\n+        pytest.fail(f\"Pickling failed with TypeError: {e}\")\n+\n+    # Optionally, load the figure back and check basic properties\n+    loaded_fig = pickle.loads(pickle_data)\n+    assert loaded_fig.get_size_inches() == fig.get_size_inches()\n+    assert len(loaded_fig.axes) == len(fig.axes)\n+    for orig_ax, loaded_ax in zip(fig.axes, loaded_fig.axes):\n+        assert orig_ax.get_ylabel() == loaded_ax.get_ylabel()\n+\n def _generate_complete_test_figure(fig_ref):\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..aff7584 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,80 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior(fig_test, fig_ref):\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # Without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # With C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=np.sum,\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+    \n \n-def test_hexbin_log_clim():\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_zero(fig_test, fig_ref):\n+    datapoints = [\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+\n+    Z = [1, 1, 1]\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # With C parameter, mincnt=0, should render all points\n+    ax_test.hexbin(\n+        X, Y,\n+        C=Z,\n+        reduce_C_function=np.sum,\n+        mincnt=0,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+    # Without mincnt parameter specified\n+    ax_ref.hexbin(\n+        X, Y,\n+        C=Z,\n+        reduce_C_function=np.sum,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..3104248 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,44 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_set_paths_with_transforms(fig_test, fig_ref):\n+    # Create two subplots with contour plots\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+    \n+    # Original data\n+    data = np.array([[0, 1], [1, 2]])\n+    \n+    # Create contour sets\n+    cs_test = ax_test.contour(data)\n+    cs_ref = ax_ref.contour(data[::-1])  # slightly modified data for visual difference\n+    \n+    # Apply transformed paths from cs_ref to cs_test\n+    cs_test.set_paths(cs_ref.get_paths())\n+    \n+    # Test figure should look identical to the reference figure\n+    assert len(cs_test.get_paths()) == len(cs_ref.get_paths())\n+\n+@check_figures_equal(extensions=['png'])\n+def test_set_paths_no_change(fig_test, fig_ref):\n+    # Setup for testing if set_paths with itself causes changes\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+    \n+    # Use the same data for both plots\n+    data = np.array([[0, 1], [1, 2]])\n+    \n+    # Create contour sets\n+    cs_test = ax_test.contour(data)\n+    cs_ref = ax_ref.contour(data)\n+    \n+    # Apply set_paths with its own paths\n+    cs_test.set_paths(cs_test.get_paths())\n+    \n+    # Ensure nothing changed by comparing it to a fresh contour set\n+    assert len(cs_test.get_paths()) == len(cs_ref.get_paths())\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..7d82547 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -661,6 +661,40 @@ class TestPlotting:\n         Plot().plot()\n         assert m.n_splits == 0\n \n+    def test_nominal_x_axis_tweaks(self):\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_xlim() == (-.5, 2.5)\n+        assert not any(x.get_visible() for x in ax1.xaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(x=lim).plot()._figure.axes[0]\n+        assert ax2.get_xlim() == lim\n+\n+    def test_nominal_y_axis_tweaks(self):\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        ax1 = p.plot()._figure.axes[0]\n+        assert ax1.get_ylim() == (2.5, -.5)\n+        assert not any(y.get_visible() for y in ax1.yaxis.get_gridlines())\n+\n+        lim = (-1, 2.1)\n+        ax2 = p.limit(y=lim).plot()._figure.axes[0]\n+        assert ax2.get_ylim() == lim\n+\n+    def test_nominal_x_axis_grid_forced(self):\n+        p = Plot(x=[\"a\", \"b\", \"c\"], y=[1, 2, 3])\n+        ax1 = p.plot()._figure.axes[0]\n+        # Force grid to be visible\n+        ax1.xaxis.grid(True)\n+        assert any(x.get_visible() for x in ax1.xaxis.get_gridlines())\n+\n+    def test_nominal_y_axis_grid_forced(self):\n+        p = Plot(x=[1, 2, 3], y=[\"a\", \"b\", \"c\"])\n+        ax1 = p.plot()._figure.axes[0]\n+        # Force grid to be visible\n+        ax1.yaxis.grid(True)\n+        assert any(y.get_visible() for y in ax1.yaxis.get_gridlines())\n+\n     def test_single_split_single_layer(self, long_df):\n \n         m = MockMark()\n",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..459736d 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,9 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..7502238 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,12 +81,24 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n             requests.get(url)\n \n-    def test_basic_building(self):\n+    \n+    @pytest.mark.parametrize(\n+        'url', (\n+            'http://.example.com',\n+            'http://..example.com',\n+            'http://example..com',\n+            'http://example.com..',\n+            (InvalidURL, 'http://.example.com'),\n+        ))\n+    def test_invalid_labels(self, url):\n+        with pytest.raises(InvalidURL, match=\"URL has an invalid label.\"):\n+            requests.get(url)\n         req = requests.Request()\n         req.url = 'http://kennethreitz.org/'\n         req.data = {'life': '42'}\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..80ba6bc 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,39 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n-\n-def test_raise_no_warning_for_nan_in_binary_ops():\n+def test_variable_setitem_preserve_object_with_values_property():\n+    import numpy as np\n+    from xarray import Variable\n+\n+    # Test case for object without 'values' property\n+    good_indexed = Variable(dims=(\"dim_0\",), data=[None])\n+    good_indexed[{'dim_0': 0}] = set()\n+    assert good_indexed.data[0] == {set()}, \"Failed to set an object without 'values' property\"\n+\n+    # Test case for object with 'values' property\n+    class HasValues(object):\n+        values = 5\n+    \n+    bad_indexed = Variable(dims=(\"dim_0\",), data=[None])\n+    has_values_instance = HasValues()\n+    bad_indexed[{'dim_0': 0}] = has_values_instance\n+    assert bad_indexed.data[0] is has_values_instance, \"Object with 'values' property should be preserved\"\n+\n+    # Ensure that the value is not coerced into numpy array\n+    assert not isinstance(bad_indexed.data[0], np.ndarray), \"Object with 'values' coerced to ndarray\"\n+\n+    # An additional test with a more complex object with a values attribute\n+    class ComplexObject:\n+        def __init__(self, val):\n+            self.values = val\n+        \n+        def __eq__(self, other):\n+            return isinstance(other, ComplexObject) and self.values == other.values\n+\n+    complex_instance = ComplexObject(10)\n+    variable_with_complex_object = Variable(dims=(\"dim_0\",), data=[None])\n+    variable_with_complex_object[{'dim_0': 0}] = complex_instance\n+    assert variable_with_complex_object.data[0] is complex_instance, \"Failed to maintain complex object with 'values' property\"\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..2ff0650 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -611,6 +611,45 @@ class TestCombineAuto:\n         expected = Dataset({'x': 0, 'y': 1, 'z': 2})\n         assert_identical(expected, actual)\n \n+    def test_combine_leaving_bystander_dimensions(self):\n+        # Check non-monotonic bystander dimension coord doesn't raise\n+        # ValueError on combine (https://github.com/pydata/xarray/issues/3150)\n+        ycoord = ['a', 'c', 'b']\n+\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n+    def test_non_monotonic_bystander_dim_not_present(self):\n+        # Test with non-monotonic bystander dimension when not all datasets contain it.\n+        ycoord1 = ['a', 'c', 'b']\n+        ycoord2 = ['a', 'b', 'c']\n+\n+        ds1 = Dataset(data_vars={'var1': (['x', 'y'], np.random.rand(3, 3))},\n+                      coords={'x': [1, 2, 3], 'y': ycoord1})\n+\n+        ds2 = Dataset(data_vars={'var2': (['x', 'y'], np.random.rand(4, 3))},\n+                      coords={'x': [4, 5, 6, 7], 'y': ycoord2})\n+\n+        expected = Dataset(\n+            data_vars={'var1': (['x', 'y'], np.concatenate([ds1['var1'].values, np.full((4, 3), np.nan)], axis=0)),\n+                       'var2': (['x', 'y'], np.concatenate([np.full((3, 3), np.nan), ds2['var2'].values], axis=0))},\n+            coords={'x': [1, 2, 3, 4, 5, 6, 7], 'y': ycoord2}\n+        )\n+\n+        actual = combine_by_coords([ds1, ds2])\n+        assert_identical(expected, actual)\n+\n     def test_check_for_impossible_ordering(self):\n         ds0 = Dataset({'x': [0, 1, 5]})\n         ds1 = Dataset({'x': [2, 3]})\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..c1b1aca 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,7 +2310,22 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n-    def test_reduce_keep_attrs(self):\n+    def test_quantile_keep_attrs(self):\n+        \"\"\"Test that the quantile method correctly honors the keep_attrs parameter.\"\"\"\n+        \n+        da = DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        \n+        # Test quantile with keep_attrs=True\n+        result = da.quantile(0.9, dim='x', keep_attrs=True)\n+        assert result.attrs == da.attrs, f\"Expected {da.attrs}, but got {result.attrs}\"\n+        \n+        # Test quantile with keep_attrs=False\n+        result_no_attrs = da.quantile(0.9, dim='x', keep_attrs=False)\n+        assert result_no_attrs.attrs == {}, f\"Expected empty attrs, but got {result_no_attrs.attrs}\"\n+\n+        # Test quantile with multiple quantiles and keep_attrs=True\n+        result_multiple = da.quantile([0.1, 0.9], dim='x', keep_attrs=True)\n+        assert result_multiple.attrs == da.attrs, f\"Expected {da.attrs}, but got {result_multiple.attrs}\"\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..6434771 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -5,7 +6,7 @@ import xarray as xr\n from xarray.core import dtypes, merge\n \n from . import raises_regex\n-from .test_dataset import create_test_data\n+from xarray.testing import assert_identical\n \n \n class TestMergeInternals:\n@@ -159,7 +160,11 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n-    def test_merge_broadcast_equals(self):\n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n         actual = ds1.merge(ds2)\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..9576f6b 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,31 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+\n+    def test_merge_attrs_override_independent(self):\n+        ds1 = xr.Dataset(attrs={\"a\": \"b\"})\n+        ds2 = xr.Dataset(attrs={\"a\": \"c\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        assert ds3.attrs[\"a\"] == \"b\"\n+        ds3.attrs[\"a\"] = \"d\"\n+        assert ds1.attrs[\"a\"] == \"b\"\n+        assert ds3.attrs[\"a\"] == \"d\"\n+\n+    def test_merge_attrs_override_multiple(self):\n+        ds1 = xr.Dataset(attrs={\"k1\": \"v1\", \"k2\": \"v2\"})\n+        ds2 = xr.Dataset(attrs={\"k1\": \"v3\", \"k3\": \"v4\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        assert ds3.attrs[\"k1\"] == \"v1\"\n+        assert ds3.attrs[\"k2\"] == \"v2\"\n+        assert \"k3\" not in ds3.attrs\n+        ds3.attrs[\"k1\"] = \"v5\"\n+        assert ds1.attrs[\"k1\"] == \"v1\"\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..2c7e5b8 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,33 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    # Test 1: Conditions on a DataArray with attributes\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # Test 2: DataArray with a single attribute\n+    da = xr.DataArray(1)\n+    da.attrs['foo'] = 'bar'\n+    result = xr.where(da==0, -1, da, keep_attrs=True)\n+    assert result.attrs == {'foo': 'bar'}\n+\n+    # Test 3: DataArray without attributes, should remain empty\n+    da_no_attrs = xr.DataArray(1)\n+    result = xr.where(da_no_attrs==0, -1, da_no_attrs, keep_attrs=True)\n+    assert result.attrs == {}\n+\n+    # Test 4: Different data types, ensuring dtype conversion if necessary\n+    data = xr.DataArray(np.ones([10,10], dtype=np.int8))\n+    data.attrs[\"attr_1\"] = \"test1\"\n+    data.attrs[\"attr_2\"] = \"test2\"\n+    data2 = xr.where(data == 1, 5, 0, keep_attrs=True)\n+    assert data2.attrs == data.attrs\n+    assert data2.dtype == np.int64  # intentionally keeping the dtype change as part of the test\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..914b716 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -9,12 +9,41 @@ from xarray.coding import variables\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n \n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n+import numpy as np\n+import xarray as xr\n+from xarray.coding import variables\n \n with suppress(ImportError):\n     import dask.array as da\n-\n-\n-def test_CFMaskCoder_decode():\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_unsigned_from_signed(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([np.iinfo(unsigned_dtype).max], dtype=unsigned_dtype)\n+    \n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(signed_dtype), attrs={\"_Unsigned\": \"true\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    \n+    assert decoded.dtype == unsigned_dtype\n+    assert np.array_equal(decoded.values, original_values)\n+\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_signed_from_unsigned(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([-1], dtype=signed_dtype)\n+    \n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    \n+    assert decoded.dtype == signed_dtype\n+    assert np.array_equal(decoded.values, original_values)\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n     expected = xr.Variable((\"x\",), [0, np.nan, 1])\n     coder = variables.CFMaskCoder()\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..72f5c6d 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1920,7 +1920,34 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n-def test_where_attrs() -> None:\n+import pytest\n+import xarray as xr\n+import numpy as np\n+\n+def test_where_with_scalars_and_keep_attrs() -> None:\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    # Test with scalar arguments for x and y\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    # Since we are using scalars, there should be no attributes, so we expect an empty dict\n+    assert actual.attrs == {}\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    xr.testing.assert_identical(expected, actual)\n+\n+    # Test with scalar as x and a DataArray as y\n+    y = xr.DataArray([0, 0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, 1, y, keep_attrs=True)\n+    # It should keep the attributes of y\n+    assert actual.attrs == {\"attr\": \"y\"}\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={\"attr\": \"y\"})\n+    xr.testing.assert_identical(expected, actual)\n+\n+    # Test with a DataArray as x and scalar as y\n+    x = xr.DataArray([1, 1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    actual = xr.where(cond, x, 0, keep_attrs=True)\n+    # It should keep the attributes of x\n+    assert actual.attrs == {\"attr\": \"x\"}\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    xr.testing.assert_identical(expected, actual)\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n     x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n     y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..4129a33 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2010,6 +2010,22 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta_ns\",\n+        ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1, 2, 3], dtype=\"timedelta64[s]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1, 2], dims=\"degree\", coords={\"degree\": [0, 1, 2]}),\n+            xr.DataArray([2.0, 8.0, 18.0], dims=\"x\"),\n+            id=\"timedelta_seconds_higher_degree\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..cf298f0 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -993,7 +993,19 @@ class TestDataset:\n         assert isinstance(data.attrs, dict)\n \n     @requires_dask\n-    def test_chunk(self) -> None:\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # regression test for the reported bug\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        \n+        # Open the dataset using xarray (zarr engine)\n+        ds = xr.open_dataset(url, engine='zarr')\n+        # Check that accessing chunks does not load data into memory\n+        assert ds.chunks is not None\n+        with pytest.raises(UnexpectedDataAccess, match=\"Inaccessible data was accessed\"):\n+            # Ensure we're using a zarr store that prevents data access\n+            with InaccessibleVariableDataStore() as store:\n+                inaccessible_ds = xr.open_dataset(store, engine='zarr')\n+                inaccessible_ds.chunks\n         data = create_test_data()\n         for v in data.variables.values():\n             assert isinstance(v.data, np.ndarray)\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..d567612 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -49,6 +49,25 @@ class TestDataArrayRolling:\n                     expected.values[expected.values.nonzero()],\n                 )\n \n+    def test_rolling_iter_center_kwarg(self):\n+        # Create a DataArray for testing\n+        data = xr.DataArray(np.arange(1, 10), dims=\"x\")\n+        \n+        # Expected result when center=True is used\n+        expected_result = np.array([np.nan, 2., 3., 4., 5., 6., 7., 8., np.nan])\n+\n+        # Perform rolling mean with center=True\n+        result_center_true = data.rolling(x=3, center=True).mean().values\n+        np.testing.assert_array_equal(result_center_true, expected_result)\n+\n+        # Manual iteration with center=True\n+        data_rolling = data.rolling(x=3, center=True)\n+        manual_result_center_true = [window.mean().values.item() for label, window in data_rolling]\n+        \n+        # Since the original issue was about mismatched centering,\n+        # this test checks if the manually iterated result matches the center-aligned result.\n+        np.testing.assert_array_equal(manual_result_center_true, expected_result)\n+        \n     @pytest.mark.parametrize(\"da\", (1,), indirect=True)\n     def test_rolling_repr(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..933f906 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,17 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import xarray as xr\n+import numpy as np\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    stacked = foo.stack(baz=(\"bar\",))\n+    assert str(stacked[\"bar\"].values.dtype) == dtype\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+def test_stack_int32_to_int64_issue() -> None:\n+    ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})\n+    result = ds['a'].values.dtype == ds.stack(b=('a',))['a'].values.dtype\n+    assert result is True, f\"Expected dtype to remain 'int32', but got {ds.stack(b=('a',))['a'].values.dtype}\"\n",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..dbb65cb 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -493,6 +493,36 @@ def test_get_map_data() -> None:\n             sim.append_stream(source_fname, stream)\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n+import pytest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.checkers.similar import Run\n+\n+# The original test case\n+def test_set_duplicate_lines_to_zero():\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=0\", \"SIMILAR1\", \"SIMILAR2\"])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n+\n+# Additional test case to confirm no output with duplicate lines present\n+def test_set_duplicate_lines_to_zero_with_duplicates():\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        # Consider SIMILAR_DUPLICATE1 and SIMILAR_DUPLICATE2 to contain duplicate lines\n+        Run([\"--duplicates=0\", \"SIMILAR_DUPLICATE1\", \"SIMILAR_DUPLICATE2\"])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n+\n+# Additional test case for non-zero similarity to confirm duplicates are reported\n+def test_set_duplicate_lines_non_zero_with_duplicates():\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        # This should produce output if SIMILAR_DUPLICATE1 and SIMILAR_DUPLICATE2 have duplicates\n+        Run([\"--duplicates=1\", \"SIMILAR_DUPLICATE1\", \"SIMILAR_DUPLICATE2\"])\n+    assert ex.value.code != 0  # Expect some code duplication warnings\n+    assert \"SIMILAR_DUPLICATE1\" in output.getvalue() or \"SIMILAR_DUPLICATE2\" in output.getvalue()\n \n     assert len(expected_linelists) == len(data)\n     for source_fname, expected_lines, lineset_obj in zip(\n@@ -501,4 +531,4 @@ def test_get_map_data() -> None:\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..a72b99d 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,30 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import pytest\n+from _pytest.capture import CaptureFixture\n+from pylint.lint import Run\n+from pathlib import Path\n+\n+EMPTY_MODULE = Path(__file__).parent / \"empty_module.py\"\n+\n+def test_short_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that short verbose option -v works without expecting an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+    assert \"VERBOSE MODE ON\" in output.err  # Assuming 'VERBOSE MODE ON' is printed in verbose mode\n+\n+def test_long_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that long verbose option --verbose works without expecting an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+    assert \"VERBOSE MODE ON\" in output.err  # Assuming 'VERBOSE MODE ON' is printed in verbose mode\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex d5ccd91..127a4a4 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -859,6 +859,32 @@ def test_by_module_statement_value(initialized_linter: PyLinter) -> None:\n         else:\n             linter2.check([os.path.join(os.path.dirname(__file__), module)])\n \n+        # Test recursive ignore functionality\n+    @pytest.mark.parametrize(\n+        \"ignore_flag, ignore_value\",\n+        [\n+            (\"--ignore\", \"ignored_module.py\"),\n+            (\"--ignore-paths\", \".*ignored_directory/.*\"),\n+            (\"--ignore-patterns\", \".*ignore.*\"),\n+        ],\n+    )\n+    def test_recursive_ignore(self, initialized_linter: PyLinter, ignore_flag, ignore_value) -> None:\n+        \"\"\"Test that Pylint respects ignore flags in recursive mode.\"\"\"\n+        linter = initialized_linter\n+        with tempdir() as tmpdir:\n+            # Create test files and directories\n+            ignored_path = Path(tmpdir) / \"ignored_directory\"\n+            ignored_path.mkdir()\n+            ignored_file = ignored_path / \"ignored_module.py\"\n+            ignored_file.write_text(\"import os\\n\", encoding=\"utf-8\")\n+            normal_file = Path(tmpdir) / \"normal_module.py\"\n+            normal_file.write_text(\"import sys\\n\", encoding=\"utf-8\")\n+\n+            # Run linting\n+            result = linter.run([str(tmpdir), \"--recursive=y\", ignore_flag, ignore_value])\n+            assert \"ignored_module.py\" not in result.linter.msgs_by_file\n+            assert \"normal_module.py\" in result.linter.msgs_by_file\n+\n         # Check that the by_module \"statement\" is equal to the global \"statement\"\n         # computed for that module\n         assert module_stats[\"statement\"] == linter2.stats.statement\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..5eae1f8 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,26 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_recursive(self) -> None:\n+        \"\"\"Tests that `--recursive=y` respects `ignore-paths` setting.\"\"\"\n+        with _test_sys_path():\n+            # Remove conflicting path entries if any.\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\"))\n+                self._runtest(\n+                    [\n+                        \"directory\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^directory/ignored_subdirectory/.*$\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..21861f4 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,29 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+\n+...\n+\n+def test_caplog_clear_resets_get_records(caplog):\n+    logger = logging.getLogger('caplog_test')\n+\n+    def verify_get_records(expected_setup, expected_call):\n+        assert [x.message for x in caplog.get_records(\"setup\")] == expected_setup\n+        assert [x.message for x in caplog.get_records(\"call\")] == expected_call\n+\n+    logger.info(\"setup_log\")\n+    verify_get_records([\"setup_log\"], [])\n+\n+    logger.info(\"call_log\")\n+    verify_get_records([\"setup_log\"], [\"call_log\"])\n+\n+    caplog.clear()\n+    verify_get_records([], [])\n+\n+    logger.info(\"call_log_after_clear\")\n+    verify_get_records([], [\"call_log_after_clear\"])\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_debugging.py b/testing/test_debugging.py\nindex 912abd7..95b2237 100644\n--- a/testing/test_debugging.py\n+++ b/testing/test_debugging.py\n@@ -175,13 +175,19 @@ class TestPDB:\n         assert \"debug.me\" in rest\n         self.flush(child)\n \n-    def test_pdb_unittest_skip(self, pytester: Pytester) -> None:\n-        \"\"\"Test for issue #2137\"\"\"\n+    def test_pdb_unittest_skip_with_teardown(self, pytester: Pytester) -> None:\n+        \"\"\"Test for issue regarding tearDown execution with pdb on skipped classes.\"\"\"\n         p1 = pytester.makepyfile(\n             \"\"\"\n             import unittest\n-            @unittest.skipIf(True, 'Skipping also with pdb active')\n+            @unittest.skip('class level skip')\n             class MyTestCase(unittest.TestCase):\n+                def setUp(self):\n+                    raise AssertionError(\"setUp should not be called in skipped class\")\n+\n+                def tearDown(self):\n+                    raise AssertionError(\"tearDown should not be called in skipped class\")\n+\n                 def test_one(self):\n                     assert 0\n         \"\"\"\n",
  "pytest-dev__pytest-5262": "",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 8c1c2d7..3b3a3c8 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1,5 +1,7 @@\n+\n import gc\n \n+import numpy as np\n import pytest\n from _pytest.main import ExitCode\n \n@@ -19,8 +21,22 @@ def test_simple_unittest(testdir):\n     assert reprec.matchreport(\"testpassing\").passed\n     assert reprec.matchreport(\"test_failing\").failed\n \n-\n-def test_runTest_method(testdir):\n+def test_mock_patch_with_numpy_array(testdir):\n+    \"\"\"Test that unittest.mock.patch works with a numpy array as the new parameter (#5606).\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        from unittest.mock import patch\n+        import numpy as np\n+        class Foo:\n+            value = np.array([1, 2, 3])\n+        class TestFoo:\n+            @patch('foo.Foo.value', new=np.array([7, 8, 9]))\n+            def test_value_patch(self):\n+                assert (foo.Foo.value == np.array([7, 8, 9])).all()\n+        \"\"\"\n+    )\n+    reprec = testdir.inline_run()\n+    reprec.assertoutcome(passed=1)\n     testdir.makepyfile(\n         \"\"\"\n         import unittest\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..71e0a41 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -116,8 +116,19 @@ class TestPaste(object):\n             monkeypatch.setattr(urllib, \"urlopen\", mocked)\n         else:\n             import urllib.request\n-\n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n+\n+    def test_create_new_paste_with_text_lexer(self, pastebin, mocked_urlopen):\n+        \"\"\"Test that the pastebin uses 'text' as the lexer instead of 'python3'.\"\"\"\n+        result = pastebin.create_new_paste(b\"full-paste-contents\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()  # Verify the lexer is 'text'\n+        assert \"code=full-paste-contents\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n         return calls\n \n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n@@ -130,4 +141,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..8c7344c 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -703,6 +703,24 @@ class Test_genitems:\n         assert items[2].name == \"testmethod_one\"\n \n         # let's also test getmodpath here\n+        \n+        # Original test to verify correct modpath with special characters\n+        pytestmark = pytest.mark.parametrize('arg0', ['..[', '.[', '['])\n+        for idx, arg0 in enumerate(['..[', '.[', '[']):\n+            items, reprec = testdir.inline_genitems(testdir.makepyfile(f'''\n+                import pytest\n+                \n+                @pytest.mark.parametrize(\"arg0\", [\"{arg0}\"])\n+                def testmethod_two(self, arg0):\n+                    pass\n+            '''.strip()))\n+\n+            assert len(items) == 1\n+            expected_name = f\"testmethod_two[{arg0}]\"\n+            expected_modpath = f\"testmethod_two[{arg0}]\"\n+\n+            assert items[0].name == expected_name\n+            assert items[0].getmodpath() == expected_modpath\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..0043a83 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -382,7 +383,35 @@ class TestXFail:\n         \"\"\"\n         )\n \n-    def xtest_dynamic_xfail_set_during_setup(self, testdir):\n+    def test_dynamic_xfail_set_during_request(self, testdir):\n+        \"\"\"Test dynamically adding xfail marker during test execution.\"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            \n+            def test_xfail_during_execution(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"execution failed\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p, \"-rsxX\")\n+        result.stdout.fnmatch_lines([\"*XFAIL*test_xfail_during_execution*\"])\n+        assert result.ret == 0\n+\n+    def test_dynamic_xfail_no_fail(self, testdir):\n+        \"\"\"Test dynamically adding xfail where no failure occurs.\"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            def test_xfail_no_fail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"execution modified\", strict=True))\n+                assert True\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p, \"-rxX\")\n+        result.stdout.fnmatch_lines([\"*XPASS(strict)*test_xfail_no_fail*\"])\n+        assert result.ret == 1\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..f38c47b 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,8 +513,14 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n-\n-    def test_capfdbinary(self, testdir):\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        \"\"\"\n+        Verify that capfd.readouterr() does not alter the line endings.\n+        \"\"\"\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n             def test_hello(capfdbinary):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..47943a0 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,6 +1,9 @@\n+\n import logging\n \n import pytest\n+from _pytest.pytester import Testdir\n+\n from _pytest.logging import caplog_records_key\n \n logger = logging.getLogger(__name__)\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..beee548 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1178,7 +1179,32 @@ def test_collect_symlink_out_of_tree(testdir):\n     assert result.ret == 0\n \n \n-def test_collectignore_via_conftest(testdir):\n+def test_symlinked_directory_collected_with_multiple_files(pytester: Pytester) -> None:\n+    \"\"\"Ensure multiple files in a symlinked directory are collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    dir.joinpath(\"test_another.py\").write_text(\"def test_another(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n+def test_symlink_with_non_py_files(pytester: Pytester) -> None:\n+    \"\"\"Non-Python files in a symlinked directory are ignored, only Python test files are collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    dir.joinpath(\"README.md\").write_text(\"# This is a readme file\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_symlink_in_subdirectory(pytester: Pytester) -> None:\n+    \"\"\"Collect tests in symlinked directories that are within other directories.\"\"\"\n+    parent_dir = pytester.mkdir(\"parent\")\n+    test_dir = parent_dir.mkdir(\"test_dir\")\n+    test_dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"outsider_symlink\").symlink_to(test_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n     tests = testdir.mkpydir(\"tests\")\n     tests.ensure(\"conftest.py\").write(\"collect_ignore = ['ignore_me']\")\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..c66d248 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -300,7 +300,39 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     )\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n+def test_unittest_setUpClass_fixture_visibility(pytester: Pytester) -> None:\n+    # Create a unittest based test file\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        \n+        class SampleTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+            \n+            @classmethod\n+            def tearDownClass(cls):\n+                pass\n+\n+            def test_sample(self):\n+                assert True\n+        \"\"\"\n+    )\n+\n+    # Run the pytest command checking for fixtures\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+\n+    # There should be no output indicating a fixture without documentation\n+    result.stdout.no_fnmatch_line(\"*no docstring available*\")\n+\n+    # Run again but in verbose mode\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n \n+    # In verbose mode, it should now show the fixture without documentation\n+    result.stdout.fnmatch_lines([\"unittest_setUpClass_fixture_SampleTestCase *\", \"*no docstring available*\"])\n \n def test_setup_class(pytester: Pytester) -> None:\n     testpath = pytester.makepyfile(\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..87504e7 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,6 +574,32 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n+def test_ridge_classifier_cv_store_cv_values():\n+    rng = np.random.RandomState(42)\n+\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+    y_multitarget = np.array([[1, 1, 1, -1, -1],\n+                              [1, -1, 1, -1, 1],\n+                              [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y_multitarget.shape[1]\n+    r.fit(x, y_multitarget)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+\n+\n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..dccfdf4 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,17 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+def test_int_overflow_fowlkes_mallows_score():\n+    # Test potential overflow in fowlkes_mallows_score when pk * qk is large\n+    labels_true = np.array([1] * (52632 + 2529) + [2] * (14660 + 793) + \n+                           [3] * (3271 + 204) + [4] * (814 + 39) + \n+                           [5] * (316 + 20))\n+    labels_pred = np.array([0] * (52632 + 2529) + [3] * (14660 + 793) +\n+                           [1] * (3271 + 204) + [4] * (814 + 39) +\n+                           [2] * (316 + 20))\n+    \n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert_all_finite(score)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..fba47e7 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,29 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+def test_countvectorizer_with_custom_vocabulary():\n+    # Custom vocabulary provided\n+    vocabulary = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    vectorizer = CountVectorizer(vocabulary=vocabulary)\n+    \n+    # Ensure get_feature_names() does not raise NotFittedError for a fixed vocabulary\n+    feature_names = vectorizer.get_feature_names()\n+    assert_array_equal(vocabulary, feature_names)\n+\n+    # Ensure transformation works without fitting\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    X = vectorizer.transform(corpus)\n+    expected_shape = (4, len(vocabulary))\n+    assert_equal(X.shape, expected_shape)\n+    assert_equal(X.nnz, 19)  # Check the number of non-zero elements\n \n-def test_vectorizer_max_features():\n+    # Validate vocabulary_ has been set after transform\n+    assert_true(hasattr(vectorizer, \"vocabulary_\"))\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..b453435 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1161,10 +1161,14 @@ def test_search_cv_timing():\n \n     for search in (gs, rs):\n         search.fit(X, y)\n-        for key in ['mean_fit_time', 'std_fit_time']:\n+        for key in ['mean_fit_time', 'std_fit_time', 'refit_time_']:\n             # NOTE The precision of time.time in windows is not high\n             # enough for the fit/score times to be non-zero for trivial X and y\n-            assert_true(np.all(search.cv_results_[key] >= 0))\n+            assert_true(hasattr(search, \"refit_time_\"))\n+            assert_true(isinstance(search.refit_time_, float))\n+            assert_greater_equal(search.refit_time_, 0)\n+            # Check that refit_time_ is less than a second for this minimal case\n+            assert_true(search.refit_time_ < 1)\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n         for key in ['mean_score_time', 'std_score_time']:\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..63c8cda 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -492,7 +492,33 @@ def test_logistic_cv():\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n \n-def test_multinomial_logistic_regression_string_inputs():\n+def test_logistic_cv_proba_multinomial_vs_ovr():\n+    # Test that LogisticRegressionCV predicts probabilities using the right method\n+    # depending on the 'multi_class' parameter (OvR vs multinomial).\n+    \n+    X, y = make_classification(n_samples=100, n_features=10, \n+                               n_informative=5, n_classes=3, random_state=42)\n+\n+    train, test = np.arange(80), np.arange(80, 100)\n+    \n+    # Prepare LogisticRegressionCV with OvR\n+    lr_cv_ovr = LogisticRegressionCV(cv=5, multi_class='ovr', solver='lbfgs', max_iter=200)\n+    lr_cv_ovr.fit(X[train], y[train])\n+    proba_ovr = lr_cv_ovr.predict_proba(X[test])\n+\n+    # Prepare LogisticRegressionCV with multinomial\n+    lr_cv_multi = LogisticRegressionCV(cv=5, multi_class='multinomial', solver='lbfgs', max_iter=200)\n+    lr_cv_multi.fit(X[train], y[train])\n+    proba_multi = lr_cv_multi.predict_proba(X[test])\n+\n+    # Ensure OvR and multinomial provide different probabilities\n+    assert not np.allclose(proba_ovr, proba_multi), (\n+        \"OvR and multinomial probabilities should differ for scored data.\"\n+    )\n+\n+    # Ensure probabilities sum to 1\n+    assert_array_almost_equal(proba_ovr.sum(axis=1), np.ones(proba_ovr.shape[0]))\n+    assert_array_almost_equal(proba_multi.sum(axis=1), np.ones(proba_multi.shape[0]))\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..09f870d 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,7 +154,23 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n-def test_clone_sparse_matrices():\n+from sklearn.base import clone\n+from sklearn.preprocessing import StandardScaler\n+\n+class MyEstimator:\n+    def __init__(self, empty=None):\n+        self.empty = empty\n+    \n+    def get_params(self, deep=False):\n+        return {'empty': self.empty}\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than\n+    # instances\n+    clf = MyEstimator(empty=StandardScaler)\n+    clf2 = clone(clf)\n+\n+    assert clf.empty is clf2.empty\n     sparse_matrix_classes = [\n         getattr(sp, name)\n         for name in dir(sp) if name.endswith('_matrix')]\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..1904937 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -5,7 +5,28 @@ from distutils.version import LooseVersion\n import numpy as np\n from scipy import linalg\n \n+@pytest.mark.parametrize('init_copy_X', [True, False])\n+@pytest.mark.parametrize('fit_copy_X', [True, False, None])\n+def test_lasso_larsic_copyX_consistency(init_copy_X, fit_copy_X):\n+    \"\"\"Test consistency between init and fit parameters for copy_X.\"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=init_copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    \n+    if fit_copy_X is None:\n+        lasso_lars.fit(X, y)\n+        expected_copy_behavior = init_copy_X\n+    else:\n+        lasso_lars.fit(X, y, copy_X=fit_copy_X)\n+        expected_copy_behavior = fit_copy_X\n+\n+    assert expected_copy_behavior == np.array_equal(X, X_copy)\n+\n import pytest\n+import numpy as np\n+from sklearn.linear_model import LassoLarsIC\n \n from sklearn.model_selection import train_test_split\n from sklearn.utils.testing import assert_equal\n",
  "scikit-learn__scikit-learn-13124": "",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..c1780b8 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -203,6 +203,33 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n \n+def test_kmeans_unsorted_bin_edges():\n+    from sklearn.preprocessing import KBinsDiscretizer\n+    import numpy as np\n+    from numpy.testing import assert_array_equal\n+\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+\n+    # Test with original parameters\n+    est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    expected_output = [0, 0, 1, 2, 3, 4]\n+    assert_array_equal(expected_output, Xt.ravel())\n+\n+    # Additional test cases might include edge cases where the n_bins are near the number of samples \n+    X_edge = np.array([\n+        [1.0],\n+        [2.0],\n+        [3.0],\n+        [4.0],\n+        [5.0]\n+    ])\n+\n+    est_edge = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')\n+    Xt_edge = est_edge.fit_transform(X_edge)\n+    expected_output_edge = [0, 1, 2, 3, 4]\n+    assert_array_equal(expected_output_edge, Xt_edge.ravel())\n+\n @pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n @pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n def test_inverse_transform(strategy, encode):\n",
  "scikit-learn__scikit-learn-13142": "",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..a691c03 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,6 +8,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n import numpy as np\n \n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..16973d1 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -502,8 +502,35 @@ def test_transform():\n     assert_array_equal(eclf2.transform(X).shape, (4, 6))\n     assert_array_equal(eclf3.transform(X).shape, (3, 4, 2))\n     assert_array_almost_equal(eclf1.transform(X),\n+\n                               eclf2.transform(X))\n+\n+\n+@pytest.mark.parametrize(\n+    \"estimator_class, create_data\",\n+    [\n+        (VotingClassifier, lambda: load_iris(return_X_y=True)),\n+        (VotingRegressor,\n+         lambda: make_regression(n_samples=100, n_features=2, noise=0.1))\n+    ]\n+)\n+def test_none_estimator_with_weights_addition(estimator_class, create_data):\n+    # Test to ensure that when a None estimator is set and sample_weight is passed, no error occurs \n+    # ensuring the same issue is resolved for both classifier and regressor.\n+    \n+    X, y = create_data()\n+    estimators = [('lr', LogisticRegression()), ('rf', RandomForestClassifier(n_estimators=5))] \\\n+                 if estimator_class is VotingClassifier else \\\n+                 [('lr', LinearRegression()), ('rf', RandomForestRegressor(n_estimators=5))]\n+    \n+    voter = estimator_class(estimators=estimators)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))  # Initial fitting\n+    voter.set_params(lr=None)  # Set one estimator to None\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))  # Should not raise an error\n+\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape[0] == y.shape[0]\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..4df226d 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,8 +396,24 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n-\n-def test_plot_tree_entropy(pyplot):\n+# Test the export_text function for a DecisionTree with a single feature\n+def test_export_text_single_feature():\n+    from sklearn.tree import DecisionTreeClassifier\n+    from sklearn.datasets import load_iris\n+    from sklearn.tree import export_text\n+\n+    X, y = load_iris(return_X_y=True)\n+    X_single_feature = X[:, 0].reshape(-1, 1)  # Use only one feature\n+\n+    tree = DecisionTreeClassifier()\n+    tree.fit(X_single_feature, y)\n+\n+    try:\n+        tree_text = export_text(tree, feature_names=['sepal_length'])\n+        print(\"Test passed, no IndexError occurred.\")\n+        print(tree_text)\n+    except IndexError as e:\n+        print(\"Test failed, IndexError occurred:\", e)\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..338c5df 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1553,8 +1553,46 @@ def test_LogisticRegressionCV_no_refit(multi_class):\n     assert lrcv.l1_ratio_.shape == (n_classes,)\n     assert lrcv.coef_.shape == (n_classes, n_features)\n \n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_extended(penalty, multi_class):\n+    # Additional tests for LogisticRegressionCV when refit is False\n+\n+    # Prepare a dataset\n+    n_samples = 100\n+    n_classes = 2\n+    n_features = 5\n+    X, y = make_classification(n_samples=n_samples, n_classes=n_classes,\n+                               n_informative=3, n_features=n_features,\n+                               random_state=42)\n+\n+    # Generate different Cs and l1_ratios based on penalty type\n+    Cs = np.logspace(-3, 2, 5)\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 3)\n+    else:\n+        l1_ratios = None\n+\n+    # Initialize LogisticRegressionCV with refit=False\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver='saga',\n+                                l1_ratios=l1_ratios, random_state=42,\n+                                multi_class=multi_class, refit=False)\n+\n+    # Fit model and check no IndexError occurs\n+    lrcv.fit(X, y)\n \n-def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n+    # Verify expected attributes, depending on scenario\n+    if multi_class == 'ovr' and penalty == 'elasticnet':\n+        assert hasattr(lrcv, 'coef_')\n+        assert lrcv.C_.shape == (n_classes,)\n+        assert hasattr(lrcv, 'l1_ratio_')\n+    elif penalty == 'l2':\n+        assert hasattr(lrcv, 'coef_')\n+        assert lrcv.C_.shape == (n_classes,)\n+\n+    # Test consistency with predictions\n+    predictions = lrcv.predict(X)\n+    assert len(predictions) == len(y)\n     # Make sure the shapes of scores_ and coefs_paths_ attributes are correct\n     # when using elasticnet (added one dimension for l1_ratios)\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..4ba7ce6 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -22,6 +22,7 @@ def test_get_deps_info():\n     assert 'scipy' in deps_info\n     assert 'Cython' in deps_info\n     assert 'pandas' in deps_info\n+    assert 'joblib' in deps_info\n     assert 'matplotlib' in deps_info\n \n \n@@ -30,4 +31,4 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..b8e1bdb 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -77,8 +77,28 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n \n     assert_array_equal(labels, expected)\n \n+from sklearn.cluster import OPTICS\n+import numpy as np\n+from sklearn.utils import shuffle\n+from numpy.testing import assert_array_equal\n+\n+def test_float_min_samples():\n+    # Test case to verify fix for float min_samples\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 5\n+\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * 5, [1] * 5, [2] * 5]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n \n-def test_extract_xi():\n+    # Using min_samples as float\n+    clust = OPTICS(min_samples=0.2, min_cluster_size=0.1,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.05).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..b598d7d 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,32 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+import numpy as np\n+from scipy import sparse\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_no_support_vectors():\n+    X_train = sparse.csr_matrix([[0, 0, 0, 0],\n+                                 [0, 0, 0, 0],\n+                                 [0, 0, 0, 0],\n+                                 [0, 0, 0, 0]])\n+    y_train = np.array([0, 0, 0, 0])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert model.support_.size == 0\n+    assert model.dual_coef_.nnz == 0\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..014021e 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -78,6 +78,15 @@ def lazy_analyze(s):\n \n \n def test_strip_accents():\n+    from sklearn.feature_extraction.text import strip_accents_unicode\n+\n+    # Test cases from the original issue report\n+    # This string contains two code points, \"LATIN SMALL LETTER N\" followed by \"COMBINING TILDE\"\n+    s2 = chr(110) + chr(771)\n+    expected_s2 = 'n'\n+    assert strip_accents_unicode(s2) == expected_s2, f\"Expected {expected_s2}, but got {strip_accents_unicode(s2)}\"\n+\n+    # Original test cases\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..5ea7bcf 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -330,7 +330,49 @@ def test_iforest_with_n_jobs_does_not_segfault():\n def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n-    model = IsolationForest()\n+    import warnings\n+    import numpy as np\n+    import pandas as pd\n+    import pytest\n+\n+    def test_iforest_preserve_feature_names():\n+        \"\"\"Check that feature names are preserved when contamination is not \"auto\".\n+\n+        Feature names are required for consistency checks during scoring.\n+\n+        Non-regression test for Issue #25844\n+        \"\"\"\n+        pd = pytest.importorskip(\"pandas\")\n+        rng = np.random.RandomState(0)\n+\n+        X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+        model = IsolationForest(random_state=0, contamination=0.05)\n+\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\", UserWarning)\n+            model.fit(X)\n+\n+    def test_iforest_with_auto_contamination():\n+        \"\"\"Check that no warning is raised for auto contamination parameter.\"\"\"\n+        pd = pytest.importorskip(\"pandas\")\n+        rng = np.random.RandomState(0)\n+\n+        X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"feature1\"])\n+        model = IsolationForest(random_state=0, contamination='auto')\n+\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\", UserWarning)\n+            model.fit(X)\n+\n+    def test_iforest_with_ndarray():\n+        \"\"\"Ensure that using ndarray as input does not raise warning.\"\"\"\n+        rng = np.random.RandomState(0)\n+        X = rng.randn(4, 1)\n+        model = IsolationForest(random_state=0, contamination=0.1)\n+\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\", UserWarning)\n+            model.fit(X)\n     model.fit(X, y)\n \n     warn_msg = (\n@@ -338,4 +380,4 @@ def test_base_estimator_property_deprecated():\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "diff --git a/sklearn/feature_selection/tests/test_sequential.py b/sklearn/feature_selection/tests/test_sequential.py\nindex 42e1fbb..ee27049 100644\n--- a/sklearn/feature_selection/tests/test_sequential.py\n+++ b/sklearn/feature_selection/tests/test_sequential.py\n@@ -313,4 +313,30 @@ def test_backward_neg_tol():\n     new_score = lr.fit(Xr, y).score(Xr, y)\n \n     assert 0 < sfs.get_support().sum() < X.shape[1]\n-    assert new_score < initial_score\n+\n+def test_sequential_feature_selector_with_splits():\n+    \"\"\"Check that SequentialFeatureSelector works with a generator of splits as CV.\"\"\"\n+\n+    from sklearn.feature_selection import SequentialFeatureSelector\n+    from sklearn.model_selection import LeaveOneGroupOut\n+    from sklearn.datasets import make_classification\n+    import numpy as np\n+\n+    # Generate synthetic data\n+    X, y = make_classification(n_samples=100, n_features=20, random_state=0)\n+\n+    # Define groups\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[len(y) // 2 :] = 1\n+\n+    # Create a cross-validation generator that splits the dataset into train/test pairs\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+\n+    # Define the classifier and feature selector\n+    knc = KNeighborsClassifier(n_neighbors=5)\n+    sfs = SequentialFeatureSelector(knc, n_features_to_select=5, cv=splits)\n+\n+    # This should run without any errors\n+    sfs.fit(X, y)\n+    assert new_score < initial_score\n",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..1314c78 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -13,12 +13,12 @@ from sklearn.utils._testing import assert_array_equal\n from sklearn.utils._testing import assert_allclose_dense_sparse\n from sklearn.utils._testing import assert_almost_equal\n \n+from sklearn.feature_selection import VarianceThreshold\n from sklearn.base import BaseEstimator, TransformerMixin\n-from sklearn.compose import (\n-    ColumnTransformer,\n-    make_column_transformer,\n-    make_column_selector,\n-)\n+import pytest\n+import numpy as np\n+import pandas as pd\n+from sklearn.compose import make_column_transformer, make_column_selector\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..13e97bc 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,6 +945,25 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n+\n+    # Additional tests to check inertia consistency\n+    inertia_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).inertia_\n+    inertia_3 = KMeans(n_clusters=3, random_state=0, n_jobs=3).fit(X).inertia_\n+    assert_almost_equal(inertia_1, inertia_2, decimal=10)\n+    assert_almost_equal(inertia_1, inertia_3, decimal=10)\n+\n+    # Testing if n_jobs=-1 (i.e., using all processors) produces the same result\n+    result_all = KMeans(n_clusters=3, random_state=0, n_jobs=-1).fit(X).labels_\n+    assert_array_equal(result_1, result_all)\n \n def test_minibatch_kmeans_partial_fit_int_data():\n     # Issue GH #14314\n",
  "sphinx-doc__sphinx-10323": "",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..544c857 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1054,6 +1054,26 @@ def test_autodoc_typehints_description_with_documented_init(app):\n             '      Return type:\\n'\n             '         None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_for_class_constructor(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.square.Square\\n'\n+        '   :members:\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.square.Square\\n'\n+            '\\n'\n+            '   A class representing a square figure.\\n'\n+            '\\n'\n+            '   __init__(width, height)\\n'\n+            '\\n'\n+            '      Parameters:\\n'\n+            '         **width** (*int*) --\\n'\n+            '         **height** (*int*) --\\n'\n+            == context)\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..389e2ee 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,21 @@\n+\n+['from sphinx.builders.gettext import Catalog, MsgOrigin', 'def test_Catalog_duplicated_message():', '    catalog = Catalog()', \"    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\", \"    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\", \"    catalog.add('hello', MsgOrigin('/path/to/filename', 2))\", \"    catalog.add('hello', MsgOrigin('/path/to/yetanother', 1))\", \"    catalog.add('world', MsgOrigin('/path/to/filename', 1))\", '', '    assert len(list(catalog)) == 2', '', '    msg1, msg2 = list(catalog)', \"    assert msg1.text == 'hello'\", \"    assert msg1.locations == [('/path/to/filename', 1),\", \"                              ('/path/to/filename', 2),\", \"                              ('/path/to/yetanother', 1)]\", \"    assert msg2.text == 'world'\", \"    assert msg2.locations == [('/path/to/filename', 1)]\", '', '']\n+\n+def test_Catalog_duplicate_locations_handling():\n+    catalog = Catalog()\n+    catalog.add('duplicate', MsgOrigin('/path/with/dup', 1))\n+    catalog.add('duplicate', MsgOrigin('/path/with/dup', 1))\n+    catalog.add('duplicate', MsgOrigin('/path/with/dup', 2))\n+    catalog.add('duplicate', MsgOrigin('/another/path', 1))\n+\n+    assert len(list(catalog)) == 1\n+\n+    msg, = list(catalog)\n+    assert msg.text == 'duplicate'\n+    assert msg.locations == [('/path/with/dup', 1),\n+                             ('path/with/dup', 2),\n+                             ('/another/path', 1)]\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n",
  "sphinx-doc__sphinx-10673": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\nindex d3bf6a2..35a5408 100644\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -338,6 +338,30 @@ def test_get_toctree_for_includehidden(app):\n                  [list_item, compact_paragraph, reference, \"foo.2\"]))\n \n     assert_node(toctree[1][0][0][0], reference, refuri=\"foo\", secnumber=[1])\n+\n+@pytest.mark.sphinx('html', testroot='toctree-index')\n+def test_toctree_index_includes(app):\n+    app.build()\n+    warnings = app._warning.getvalue()\n+    assert 'toctree contains reference to nonexisting document' not in warnings\n+\n+    toctree = app.env.tocs['index']\n+    # Verify that the toctree includes the special pages.\n+    assert_node(toctree[1][0],\n+                [list_item, (compact_paragraph,  # [0]\n+                             [bullet_list, (addnodes.toctree,  # [0][1][0]\n+                                            addnodes.toctree)])])  # [0][1][1]\n+\n+    assert_node(toctree[1][0][1][1], addnodes.toctree,\n+                caption=\"Indices and tables\", glob=False, hidden=False,\n+                titlesonly=False, maxdepth=1, numbered=0,\n+                entries=[(None, 'genindex'), (None, 'modindex'), (None, 'search')])\n+\n+    # Further check if specific titles or references present\n+    titles = [node[0].astext() for node in toctree[1][0][1][1]]\n+    assert 'Index' in titles\n+    assert 'Module Index' in titles\n+    assert 'Search Page' in titles\n     assert_node(toctree[1][0][1][0][0][0], reference, refuri=\"quux\", secnumber=[1, 1])\n     assert_node(toctree[1][0][1][1][0][0], reference, refuri=\"foo#foo-1\", secnumber=[1, 2])\n     assert_node(toctree[1][0][1][2][0][0], reference, refuri=\"foo#foo-2\", secnumber=[1, 3])\n@@ -345,4 +369,4 @@ def test_get_toctree_for_includehidden(app):\n     assert_node(toctree[1][2][0][0], reference, refuri=\"http://sphinx-doc.org/\")\n \n     assert_node(toctree[2],\n-                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..4ef236e 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -140,7 +140,33 @@ def test_glossary(app):\n     assert_node(doctree[0][0][2][1],\n                 [nodes.definition, nodes.paragraph, \"description\"])\n \n-    # index\n+    # Test for terms with the same spelling but different case\n+    text_case_sensitive = (\".. glossary::\\n\"\n+                           \"\\n\"\n+                           \"   mysql\\n\"\n+                           \"       A relational database management system.\\n\"\n+                           \"\\n\"\n+                           \"   MySQL\\n\"\n+                           \"       A popular open-source relational database management system.\\n\")\n+\n+    # doctree\n+    doctree_case_sensitive = restructuredtext.parse(app, text_case_sensitive)\n+    assert_node(doctree_case_sensitive, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"mysql\",\n+                                                                     index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"MySQL\",\n+                                                                     index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree_case_sensitive[0][0][0][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+    assert_node(doctree_case_sensitive[0][0][0][1],\n+                [definition, nodes.paragraph, \"A relational database management system.\"])\n+    assert_node(doctree_case_sensitive[0][1][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree_case_sensitive[0][1][0][1],\n+                [definition, nodes.paragraph, \"A popular open-source relational database management system.\"])\n     objects = list(app.env.get_domain(\"std\").get_objects())\n     assert (\"term1\", \"term1\", \"term\", \"index\", \"term-term1\", -1) in objects\n     assert (\"term2\", \"term2\", \"term\", \"index\", \"term-term2\", -1) in objects\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..25b9bcf 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -332,6 +332,23 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].default == Parameter.empty\n \n \n+@pytest.mark.skipif(sys.version_info < (3, 8),\n+                    reason='python-3.8 or above is required')\n+def test_signature_from_str_positionaly_only_args_with_default():\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n+    assert list(sig.parameters.keys()) == ['a', 'b']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n+    assert sig.parameters['b'].default == Parameter.empty\n+\n+\n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n def test_signature_from_str_positionaly_only_args():\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..380c8b0 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -15,6 +16,7 @@ from importlib import import_module\n import pytest\n \n from sphinx.ext.autodoc.mock import _MockModule, _MockObject, mock\n+from typing import TypeVar, Generic\n \n \n def test_MockModule():\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..fab0620 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -9,8 +10,41 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+class DecoratedInitClass:\n+    @simple_decorator\n+    def __init__(self, x):\n+        \"\"\"Initialize with parameter x\"\"\"\n+        self.x = x\n+        \n+    def regular_method(self):\n+        \"\"\"A regular method\"\"\"\n+        return self.x\n+\n+\n+class TestNapoleonDecoratedInit(TestCase):\n+    def test_decorated_init_doc(self):\n+        # Setup mock configuration\n+        config = Config()\n+        config.napoleon_include_init_with_doc = True\n+\n+        # Mock the sphinx application\n+        app = mock.Mock()\n+        app.config = config\n+        \n+        # Run the skip member check with the decorated init\n+        result = _skip_member(app, 'class', '__init__', DecoratedInitClass.__init__, False)\n+        \n+        # Assert that it should not be skipped, meaning it should be documented\n+        self.assertIs(result, False)\n+\n+    def test_decorated_init_functionality(self):\n+        # Ensure that the decorated __init__ function works as expected\n+        instance = DecoratedInitClass(10)\n+        self.assertEqual(instance.regular_method(), 10)\n+\n import sys\n from collections import namedtuple\n+from sphinx.testing.util import simple_decorator\n from unittest import TestCase, mock\n \n from sphinx.application import Sphinx\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..ecb2334 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -30,7 +30,10 @@ def test_defaults(app, status, warning):\n     # images should fail\n     assert \"Not Found for url: https://www.google.com/image.png\" in content\n     assert \"Not Found for url: https://www.google.com/image2.png\" in content\n-    assert len(content.splitlines()) == 5\n+    # looking for local file should succeed\n+    assert \"local linked file\" in content\n+    assert \"path/to/notfound - local file not found\" in content\n+    assert len(content.splitlines()) == 7\n \n \n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n@@ -48,7 +51,15 @@ def test_defaults_json(app, status, warning):\n         assert attr in row\n \n     assert len(content.splitlines()) == 8\n-    assert len(rows) == 8\n+    # check for local link existence and status\n+    assert len(content.splitlines()) == 9\n+    assert len(rows) == 9\n+    # Check for local URIs in JSON results\n+    row = rowsby['path/to/notfound']\n+    assert row['filename'] == 'links.txt'\n+    assert row['lineno'] == 18\n+    assert row['status'] == 'broken'\n+    assert row['info'] == 'local file not found'\n     # the output order of the rows is not stable\n     # due to possible variance in network latency\n     rowsby = {row[\"uri\"]:row for row in rows}\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..fe45cab 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -14,8 +15,36 @@ from test_ext_autodoc import do_autodoc\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n-def test_private_field(app):\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None, \"private-members\": \"_private_method_one,_private_method_three\"}\n+    actual = do_autodoc(app, 'class', 'target.ClassWithPrivateMethods', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: ClassWithPrivateMethods()',\n+        '   :module: target',\n+        '',\n+        '   Class docstring.',\n+        '',\n+        '   .. py:method:: ClassWithPrivateMethods._private_method_one()',\n+        '      :module: target',\n+        '',\n+        '      Private method one docstring.',\n+        '',\n+        '   .. py:method:: ClassWithPrivateMethods._private_method_three()',\n+        '      :module: target',\n+        '',\n+        '      Private method three docstring.',\n+        '',\n+    ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_no_private_members(app):\n     app.config.autoclass_content = 'class'\n+    options = {\"members\": None, \"private-members\": \"\"}\n+    actual = do_autodoc(app, 'class', 'target.ClassWithPrivateMethods', options)\n+    assert '_private_method' not in '\\n'.join(actual)\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'module', 'target.private', options)\n     assert list(actual) == [\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..4e64709 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1286,6 +1286,38 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n+from babel.messages.catalog import Catalog\n+from babel.messages import pofile\n+from sphinx import locale\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_customize_system_message_in_danish(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # clear translators cache\n+        locale.translators.clear()\n+\n+        # prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar' in content\n+        assert 'Whatever' in content\n+    finally:\n+        locale.translators.clear()\n \n def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..e6d53ef 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -45,7 +45,44 @@ def do_autodoc(app, objtype, name, options=None):\n     return bridge.result\n \n \n-def make_directive_bridge(env):\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_ignore_module_all_false(app):\n+    options = {'members': True, 'ignore-module-all': False}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all_ignore_module_all_true(app):\n+    options = {'members': True, 'ignore-module-all': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+        '.. py:function:: bar()',\n+        '   :module: target.empty_all',\n+        '',\n+        '   docstring',\n+        '',\n+        '.. py:function:: baz()',\n+        '   :module: target.empty_all',\n+        '',\n+        '   docstring',\n+        '',\n+        '.. py:function:: foo()',\n+        '   :module: target.empty_all',\n+        '',\n+        '   docstring',\n+        '',\n+    ]\n     options = Options(\n         inherited_members = False,\n         undoc_members = False,\n",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..3a85b8e 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -9,7 +9,9 @@\n \"\"\"\n \n import time\n+import sys\n from io import StringIO\n+from unittest.mock import patch\n \n import pytest\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..1dce1b9 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -53,7 +53,8 @@ from sphinx.pycode import ast\n     (\"+ a\", \"+ a\"),                             # UAdd\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n-    (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1, 2, 3)\", \"(1, 2, 3)\"),                 # Tuple\n+    (\"(1,)\", \"(1,)\"),                           # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..5975b14 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,6 +847,23 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n+def test_property_type_annotation_cross_reference(app):\n+    text = (\".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    # Check that the type annotations for property and attribute are cross-referenced\n+    assert_node(doctree[1][1][0][2], pending_xref, **{\"py:class\": \"Point\"})\n+    assert_node(doctree[1][1][1][2], pending_xref, **{\"py:class\": \"Point\"})\n+\n+\n+# Existing test case\n def test_pydecorator_signature(app):\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..5462925 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,38 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy.geometry import Point2D, Point3D\n+from sympy import sqrt\n+\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+    assert p2.distance(p1) == sqrt(5)\n+\n+def test_distance_mixed_dimensions():\n+    p1 = Point3D(0, 0, 0)\n+    p2 = Point3D(1, 1, 1)\n+    p3 = Point2D(1, 1)\n+    p4 = Point3D(2, 2, 2)\n+    p5 = Point3D(1, 0, 1)\n+\n+    # 3D to 2D, where 2D plane is z=0\n+    assert p1.distance(p3) == sqrt(2)\n+    assert p2.distance(p3) == sqrt(1**2 + 1**2 + 1**2)\n+\n+    # From 2D in z=0 plane to 3D\n+    assert p3.distance(p1) == sqrt(2)\n+    assert p3.distance(p5) == sqrt((1-1)**2 + (1-0)**2 + (0-1)**2)\n+\n+    # 3D to 3D\n+    assert p1.distance(p2) == sqrt(1**2 + 1**2 + 1**2)\n+    assert p2.distance(p4) == sqrt((2-1)**2 + (2-1)**2 + (2-1)**2)\n+\n+    # Test with same point\n+    assert p1.distance(p1) == 0\n+    assert p3.distance(p3) == 0\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..7fcf8d7 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,17 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+from sympy import Float\n+from sympy.utilities.lambdify import implemented_function\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    assert f(f(2)).evalf() == Float(16)\n+    assert g(g(2)).evalf() == Float(8)\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..bd0ef12 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -85,6 +85,15 @@ def test_Identity():\n     assert In.conjugate() == In\n \n def test_Identity_doit():\n+    from sympy import symbols, Sum, Identity\n+\n+    n = symbols('n', integer=True)\n+    In = Identity(n)\n+\n+    # Test case to verify that the sum of all elements in the identity matrix is n\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit().subs(n, 3) == 3\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit().subs(n, 4) == 4\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit().subs(n, 5) == 5\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..fb5c0e9 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -354,8 +354,23 @@ def test_args():\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n+from sympy.combinatorics.permutations import Permutation\n \n-def test_Cycle():\n+def test_non_disjoint_cycles():\n+    # Test case: Non-disjoint cycles that should yield identity permutation\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([]), \"Non-disjoint cycles should result in the identity permutation\"\n+\n+    # Test case: Non-disjoint cycles that result in a non-trivial permutation\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([0, 2, 1]), \"Permutation should apply cycles correctly in left-to-right order\"\n+\n+    # Test case: Overlapping cycles\n+    assert Permutation([[0, 1, 2], [2, 3]]) == Permutation([0, 2, 3, 1]), \"Permutation should resolve overlapping cycles properly\"\n+\n+    # Test case: Cycles with no elements (identity permutation)\n+    assert Permutation([[]]) == Permutation([]), \"Empty cycle should result in identity permutation\"\n+\n+    # Test case: Nested cycles that should yield identity when resolved\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([]), \"Nested non-disjoint cycles should cancel to give identity\"\n     assert str(Cycle()) == '()'\n     assert Cycle(Cycle(1,2)) == Cycle(1, 2)\n     assert Cycle(1,2).copy() == Cycle(1,2)\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..8dab912 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -502,6 +502,14 @@ def test_sparse_zeros_sparse_eye():\n     assert SparseMatrix.zeros(3) == zeros(3, cls=SparseMatrix)\n     assert len(SparseMatrix.zeros(3)._smat) == 0\n \n+def test_issue_matrix_stacking():\n+    # Test for behavior of hstack with matrices having 0 rows\n+    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices) == SparseMatrix(0, 6, [])\n+\n+    # Test for behavior of vstack with matrices having 0 columns\n+    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices) == SparseMatrix(6, 0, [])\n \n def test_copyin():\n     s = SparseMatrix(3, 3, {})\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..070be08 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -170,8 +170,19 @@ def test_evalf_ramanujan():\n \n # Input that for various reasons have failed at some point\n \n-\n-def test_evalf_bugs():\n+from sympy import Max, Mul, Symbol\n+from sympy.core.numbers import Rational\n+\n+def test_issue_13076_evalf_max_mul():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    # More permutations to ensure coverage\n+    assert NS(Mul(Max(1, y), x, evaluate=False).evalf()) == 'x*Max(1, y)'\n+    assert NS(Mul(x, Max(1, y), evaluate=False).evalf()) == 'x*Max(1, y)'\n+    assert NS(Mul(Max(0, 2*y), x, evaluate=False).evalf()) == 'x*Max(0, 2*y)'\n+    assert NS(Mul(Max(0, y+1), x, evaluate=False).evalf()) == 'x*Max(0, y + 1)'\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n     assert NS(exp(10**10) + sin(1), 10) == NS(exp(10**10), 10)\n     assert NS('log(1+1/10**50)', 20) == '1.0000000000000000000e-50'\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..78c0c03 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,8 +272,24 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n-\n-def test_coth_series():\n+from sympy import coth, log, tan, Symbol\n+\n+def test_coth_issue_substitution():\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    # Test cases for values mentioned in the issue\n+    assert e.subs(x, 2) is not None  # Should not raise NameError\n+    assert e.subs(x, 3) is not None  # Should not raise NameError\n+    assert e.subs(x, 5) is not None  # Should not raise NameError\n+    assert e.subs(x, 6) is not None  # Should not raise NameError\n+    assert e.subs(x, 8) is not None  # Should not raise NameError\n+    assert e.subs(x, 9) is not None  # Should not raise NameError\n+    assert e.subs(x, 11) is not None  # Should not raise NameError\n+    assert e.subs(x, 12) is not None  # Should not raise NameError\n+    assert e.subs(x, 13) is not None  # Should not raise NameError\n+    assert e.subs(x, 15) is not None  # Should not raise NameError\n+    assert e.subs(x, 18) is not None  # Should not raise NameError\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..7646e53 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -165,6 +165,11 @@ def test_difference():\n     assert -1 in S.Reals - S.Naturals\n \n \n+from sympy import Symbol, Interval, FiniteSet, Complement, S\n+from sympy.sets import EmptySet, Union, Intersection\n+\n+x, y, z = Symbol('x'), Symbol('y'), Symbol('z')\n+\n def test_Complement():\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n@@ -188,7 +193,20 @@ def test_Complement():\n     assert S.Reals - Union(S.Naturals, FiniteSet(pi)) == \\\n             Intersection(S.Reals - S.Naturals, S.Reals - FiniteSet(pi))\n \n-def test_complement():\n+def test_issue_12712():\n+    # Test set with a mixture of symbols and numbers\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == FiniteSet(x, y)\n+    assert Complement(FiniteSet(x, y, 8), Interval(-10, 10)) == FiniteSet(x, y)\n+    assert Complement(FiniteSet(x, 15, 2), Interval(0, 10)) == FiniteSet(x, 15)\n+    assert Complement(FiniteSet(x, 5, 10, 15), Interval(-10, 10)) == FiniteSet(x, 15)\n+    assert Complement(FiniteSet(x, 5, 10, 15), Interval(-10, 5, False, False)) == FiniteSet(x, 5, 10, 15)\n+\n+    # Test complement with nested FiniteSet\n+    assert Complement(FiniteSet(FiniteSet(x, y, 2)), Interval(-10, 10)) == FiniteSet(FiniteSet(x, y))\n+    assert Complement(FiniteSet(FiniteSet(x), 10, 3), Interval(3, 10)) == FiniteSet(FiniteSet(x))\n+\n+    # Test when all elements are in the interval\n+    assert Complement(FiniteSet(1, 2, 3), Interval(0, 5)) == EmptySet()\n     assert Interval(0, 1).complement(S.Reals) == \\\n         Union(Interval(-oo, 0, True, True), Interval(1, oo, True, True))\n     assert Interval(0, 1, True, False).complement(S.Reals) == \\\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..f3c010d 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,38 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643_col_insert():\n+    from sympy import Matrix, eye, ones\n+\n+    # Test inserting columns into an identity matrix\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1],\n+    ])\n+    assert M.col_insert(3, V) == result\n+\n+    # Test edge cases by inserting at the beginning and end\n+    assert eye(3).col_insert(0, ones(3, 1)) == Matrix([\n+        [1, 1, 0, 0],\n+        [1, 0, 1, 0],\n+        [1, 0, 0, 1],\n+    ])\n+    \n+    assert eye(3).col_insert(3, ones(3, 1)) == Matrix([\n+        [1, 0, 0, 1],\n+        [0, 1, 0, 1],\n+        [0, 0, 1, 1],\n+    ])\n+\n+    # Test inserting columns of different sizes, ensuring dimension mismatch raises an error\n+    from sympy.core.compatibility import raises\n+    raises(ValueError, lambda: eye(3).col_insert(2, ones(4, 1)))\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/core/tests/test_match.py b/sympy/core/tests/test_match.py\nindex 5aad772..34d9da2 100644\n--- a/sympy/core/tests/test_match.py\n+++ b/sympy/core/tests/test_match.py\n@@ -111,6 +111,10 @@ def test_match_exclude():\n     assert e.match(a*x**2 + a*x + 2*a) is None\n \n \n+from sympy import symbols, Poly, S\n+\n+x = symbols('x')\n+\n def test_mul():\n     x, y, a, b, c = map(Symbol, 'xyabc')\n     p, q = map(Wild, 'pq')\n@@ -134,6 +138,19 @@ def test_mul():\n     assert e.match(x**p*exp(x*q)) == {p: 0, q: 1}\n \n     e = I*Poly(x, x)\n+\n+def test_issue_13079():\n+    # Test cases from the issue description\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+    \n+    # Additional test cases to ensure correctness\n+    assert x*Poly(2*x, x) == Poly(2*x**2, x, domain='ZZ')\n+    assert -S(3)*Poly(x**2, x) == Poly(-3*x**2, x, domain='ZZ')\n+    assert Poly(3*x)*x == Poly(3*x**2, x, domain='ZZ')\n     assert e.match(I*p) == {p: Poly(x, x)}\n \n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..1ada619 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,20 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_arbitrary():\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3 \\, x^{2} \\, y\"\n+    assert latex(1.5 * 3**x, mul_symbol='\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+    \n+    # Test with other custom symbols\n+    assert latex(3*x*y, mul_symbol='---') == r\"3---x---y\"\n+    assert latex(3*x*y, mul_symbol='***') == r\"3***x***y\"\n+    \n+    # Test the default behavior when no mul_symbol is provided\n+    assert latex(x * y) == \"x y\"\n+    \n+    # Ensure that thin space is used correctly in integrals\n+    assert latex(Integral(2*x**2*y, x)) == r\"\\int 2 x^{2} y\\, dx\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..c99fc25 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,8 +402,25 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n-\n-def test_det_LU_decomposition():\n+from sympy import symbols, Matrix\n+\n+def test_issue_13835_determinant_invalid_nan_comparison():\n+    # Original test cases ensuring no Invalid NaN comparison for symbolic entries\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    \n+    assert M(1).det() == 0  # Determinant of 1x1 symbolic matrix\n+    assert M(2).det() == -a  # Determinant of 2x2 symbolic matrix\n+\n+    det_3 = M(3).det()\n+    assert det_3 == 2*a*(a + 2) + 2*a*(2*a + 1) - 3*a*(2*a + 2)  # Ensure no exceptions here\n+\n+    assert M(4).det() == 0  # Determinant of 4x4 symbolic matrix with special pattern\n+    \n+    # Now test larger sizes to ensure no NaN or Exceptions\n+    assert M(5).det() == 0  \n+    assert M(6).det() == 0  \n+    assert M(7).det() == 0\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert M.det(method=\"lu\") == 1\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..f1642f1 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -708,8 +708,85 @@ def test_issue_10003():\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n+from sympy.utilities.randtest import verify_numerically as tn\n \n-def test_precomputed_cdf():\n+def test_issue_precomputed_cdf():\n+    from sympy import pi, asin, exp, gamma, lowergamma, uppergamma, hyper, sqrt, Piecewise, floor\n+    from sympy.stats import density\n+    x = symbols(\"x\", real=True, finite=True)\n+\n+    # Arcsin distribution CDF tests\n+    X_arcsin = Arcsin(\"x\", 0, 3)\n+    expected_arcsin_cdf = Piecewise((2*asin(sqrt(x/3))/pi, (x >= 0) & (x <= 3)), (1, x > 3), (0, x < 0))\n+    assert cdf(X_arcsin)(x) == expected_arcsin_cdf\n+    assert tn(diff(cdf(X_arcsin)(x), x), density(X_arcsin)(x), x)\n+\n+    # Dagum distribution CDF tests\n+    X_dagum = Dagum(\"x\", S(1)/3, S(1)/5, 2)\n+    expected_dagum_cdf = Piecewise(((1 + (x/2)**(-1/5))**(-1/3), x >= 0), (0, True))\n+    assert cdf(X_dagum)(x) == expected_dagum_cdf\n+    assert tn(diff(cdf(X_dagum)(x), x), density(X_dagum)(x), x)\n+\n+    # Erlang distribution CDF tests\n+    X_erlang = Erlang(\"x\", 1, 1)\n+    expected_erlang_cdf = Piecewise((lowergamma(1, x)/gamma(1), x >= 0), (0, True))\n+    assert cdf(X_erlang)(x) == expected_erlang_cdf\n+    assert tn(diff(cdf(X_erlang)(x), x), density(X_erlang)(x), x)\n+\n+    # Frechet distribution CDF tests\n+    X_frechet = Frechet(\"x\", S(4)/3, 1, 2)\n+    expected_frechet_cdf = Piecewise((exp(-(x - 2)**-(4/3)), x >= 2), (0, True))\n+    assert cdf(X_frechet)(x) == expected_frechet_cdf\n+    assert tn(diff(cdf(X_frechet)(x), x), density(X_frechet)(x), x)\n+\n+    # Gamma distribution CDF tests\n+    X_gamma = Gamma(\"x\", 0.1, 2)\n+    expected_gamma_cdf = Piecewise((lowergamma(0.1, x/2)/gamma(0.1), x >= 0), (0, True))\n+    assert cdf(X_gamma)(x) == expected_gamma_cdf\n+    assert tn(diff(cdf(X_gamma)(x), x), density(X_gamma)(x), x)\n+\n+    # Gamma Inverse distribution CDF tests\n+    X_gamma_inverse = GammaInverse(\"x\", S(5)/7, 2)\n+    expected_gamma_inverse_cdf = Piecewise((uppergamma(5/7, 2/x)/gamma(5/7), x > 0), (0, True))\n+    assert cdf(X_gamma_inverse)(x) == expected_gamma_inverse_cdf\n+    assert tn(diff(cdf(X_gamma_inverse)(x), x), density(X_gamma_inverse)(x), x)\n+\n+    # Kumaraswamy distribution CDF tests\n+    X_kumaraswamy = Kumaraswamy(\"x\", S(1)/123, 5)\n+    expected_kumaraswamy_cdf = Piecewise((-(-x**(1/123) + 1)**5 + 1, (x >= 0) & (x <= 1)), (1, x > 1), (0, x < 0))\n+    assert cdf(X_kumaraswamy)(x) == expected_kumaraswamy_cdf\n+    assert tn(diff(cdf(X_kumaraswamy)(x), x), density(X_kumaraswamy)(x), x)\n+\n+    # Laplace distribution CDF tests\n+    X_laplace = Laplace(\"x\", 2, 3)\n+    expected_laplace_cdf = Piecewise((exp((x - 2)/3)/2, x < 2), (-exp(-(x - 2)/3)/2 + 1, x >= 2))\n+    assert cdf(X_laplace)(x) == expected_laplace_cdf\n+    assert tn(diff(cdf(X_laplace)(x), x), density(X_laplace)(x), x)\n+\n+    # Logistic distribution CDF tests\n+    X_logistic = Logistic(\"x\", 1, 0.1)\n+    expected_logistic_cdf = 1/(exp((1 - x)/0.1) + 1)\n+    assert cdf(X_logistic)(x) == expected_logistic_cdf\n+    assert tn(diff(cdf(X_logistic)(x), x), density(X_logistic)(x), x)\n+\n+    # Nakagami distribution CDF tests\n+    X_nakagami = Nakagami(\"x\", S(7)/3, 1)\n+    expected_nakagami_cdf = Piecewise((lowergamma(7/3, 7*x**2/9)/gamma(7/3), x > 0), (0, True))\n+    assert cdf(X_nakagami)(x) == expected_nakagami_cdf\n+    assert tn(diff(cdf(X_nakagami)(x), x), density(X_nakagami)(x), x)\n+\n+    # Student T distribution CDF tests\n+    X_studentt = StudentT(\"x\", 10)\n+    expected_studentt_cdf = Rational(1, 2) + x*gamma(11/2)*hyper((1/2, 11/2), (3/2,), -x**2/10)/(sqrt(pi)*sqrt(10)*gamma(5))\n+    assert cdf(X_studentt)(x) == expected_studentt_cdf\n+    assert tn(diff(cdf(X_studentt)(x), x), density(X_studentt)(x), x)\n+\n+    # UniformSum distribution CDF tests\n+    X_uniformsum = UniformSum(\"x\", 5)\n+    # Custom logic might be needed as direct CDF function might not handle it effectively.\n+    pdf_us = density(X_uniformsum)(x).subs(floor(x), 0).doit()\n+    cdf_us = cdf(X_uniformsum, evaluate=False)(x).subs(floor(x), 0).doit()\n+    assert tn(diff(cdf_us, x), pdf_us, x)\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..f76c653 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -49,7 +49,29 @@ def test_tensor_product_simp():\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n \n-def test_issue_5923():\n+def test_tensor_product_powers():\n+    from sympy.physics.quantum import TensorProduct as tp\n+    from sympy import Symbol\n+    from sympy.physics.paulialgebra import Pauli\n+    from sympy.physics.quantum import tensor_product_simp as tps\n+    \n+    a = Symbol('a', commutative=False)\n+\n+    # Test direct power evaluation\n+    t1 = tp(1, 1) * tp(1, 1)\n+    assert tps(t1) == tp(1**2, 1**2)\n+    assert t1.expand(tensorproduct=True) == tp(1, 1)\n+    assert tps(tp(1, 1) * tp(1, a)).subs(a, 1) == tp(1, 1)\n+    \n+    # Test evaluation with non-scalar components\n+    t2 = tp(1, Pauli(3)) * tp(1, Pauli(3))\n+    assert tps(t2) == tp(1**2, Pauli(3)**2)\n+    assert t2.expand(tensorproduct=True) == tp(1, Pauli(3))\n+    assert tps(tp(1, Pauli(3)) * tp(1, a)).subs(a, Pauli(3)) == tp(1, Pauli(3))\n+\n+    # Verify specific tensor products do not simplify if not meant to\n+    t3 = tp(2, Pauli(1) + Pauli(2)) * tp(3, Pauli(1))\n+    assert tps(t3) != tp(6, Pauli(1)**2 + Pauli(2)*Pauli(1))\n     # most of the issue regarding sympification of args has been handled\n     # and is tested internally by the use of args_cnc through the quantum\n     # module, but the following is a test from the issue that used to raise.\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 29c7fd2..692cebf 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -440,6 +440,11 @@ def test_sqrt():\n     assert str(1/x**(1/2)) == \"x**(-0.5)\"\n \n \n+def test_Eq_and_Limit_with_sstr():\n+    x = Symbol(\"x\")\n+    assert sstr(Eq(x, S(1)/2), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    assert sstr(Limit(x, x, S(1)/2), sympy_integers=True) == \"Limit(x, x, S(1)/2)\"\n+\n def test_Rational():\n     n1 = Rational(1, 4)\n     n2 = Rational(1, 3)\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..6730717 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,11 +4,29 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n-\n-def test_Vector():\n+def test_zero_multiplied_vector_addition():\n+    N = ReferenceFrame('N')\n+    # Test adding a vector and zero-multiplied vector\n+    result = sum([N.x, (0 * N.x)])\n+    assert result == N.x\n+\n+    # Additional test cases\n+    result = sum([N.x, (0 * N.y)])\n+    assert result == N.x\n+\n+    result = sum([0 * N.x, N.y])\n+    assert result == N.y\n+    \n+    result = sum([0 * N.x, 0 * N.x])\n+    assert result == 0 * N.x\n+\n+    result = N.x + 0 * N.x\n+    assert result == N.x\n     assert A.x != A.y\n     assert A.y != A.z\n     assert A.z != A.x\n",
  "sympy__sympy-14976": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex fbe0d75..63ebf99 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,8 +1,9 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import (absolute_import, division, print_function)\n \n from sympy.codegen import Assignment\n-from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo\n+from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational\n from sympy.core.numbers import pi\n from sympy.codegen.ast import none\n from sympy.external import import_module\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..ec878f7 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,14 +74,23 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    assert len(rank_zero_array) == 1\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n     raises(ValueError, lambda: rank_zero_array[0])\n \n+def test_rank_zero_array_length():\n+    from sympy import Array\n+\n+    # Test length of rank-0 scalar array\n+    scalar_array = Array(5)\n+    assert len(scalar_array) == 1  # Rank-0 array should have length 1\n \n-def test_reshape():\n+    # Test length of rank-0 symbolic scalar array\n+    x = Symbol('x')\n+    scalar_symbolic_array = Array(x)\n+    assert len(scalar_symbolic_array) == 1  # Rank-0 array should have length 1\n     array = ImmutableDenseNDimArray(range(50), 50)\n     assert array.shape == (50,)\n     assert array.rank() == 1\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..43f52e5 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,21 @@\n+\n+def test_Max_min_order():\n+    # Test the specific issue: Max(x, 2) should return 'Max[x, 2]' and respect order\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    \n+    # Additional tests with Min to ensure consistency\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+    assert mcode(Min(2, x)) == \"Min[2, x]\"\n+\n+    # Original test patch for coverage\n+    assert mcode(Max(x, y, z)*Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..1559a8e 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1624,10 +1624,16 @@ def test_Mod():\n     i = Symbol('i', integer=True)\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n-\n-    # issue 8677\n-    n = Symbol('n', integer=True, positive=True)\n-    assert factorial(n) % n == 0\n+    \n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(6*i, 2) == 0\n+    assert Mod(9*i, 4) == 3*Mod(i, 4)\n+    assert Mod(5*i, 3) == 2*Mod(i, 3)\n+    assert Mod(3*i*j, 2*j) == j*Mod(3*i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n     assert factorial(n + 2) % n == 0\n     assert (factorial(n + 4) % (n + 5)).func is Mod\n \n",
  "sympy__sympy-15809": "",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..835ca4c 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1988,9 +1988,28 @@ def test_Add_is_zero():\n \n \n def test_issue_14392():\n-    assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n+    # Test for issue 15873\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+    assert simplify(e).is_zero is True  # Reference test to confirm simplification results\n+\n+    # Additional test cases for complex expressions where is_zero returns None or True\n+    # Define expressions with imaginary parts that should be zero\n+    expr1 = 3 + 4*I - 3 - 4*I\n+    expr2 = I*(I + 1) + 1 + I  # Simplifies to 0 over complex plane\n+    expr3 = 2*I - 1 + (1 - 2*I)\n+    expr4 = 3*I + (2 + 3*I) - 2\n+    \n+    # Verify that is_zero is None for unsimplified complex expressions,\n+    # and it evaluates to True when explicitly simplified if appropriate\n+    assert expr1.is_zero is True  # Directly results in zero (0)\n+    assert expr2.is_zero is None  # Should be indeterminate without simplification\n+    assert simplify(expr2).is_zero is True  # Becomes zero after simplification\n+    assert expr3.is_zero is False  # Directly results in a non-zero\n+    assert expr4.is_zero is None  # Indeterminate due to lack of full simplification\n+    assert simplify(expr4).is_zero is False  # Confirms it's non-zero through simplification\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..b5b2892 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -511,8 +511,26 @@ def test_posify():\n     assert str(Sum(posify(1/x**n)[0], (n,1,3)).expand()) == \\\n         'Sum(_x**(-n), (n, 1, 3))'\n \n-\n-def test_issue_4194():\n+def test_issue_16438():\n+    # issue 16438\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['infinite'] == False\n+    assert eq.assumptions0['positive'] == True\n+    assert eq.assumptions0['negative'] == False\n+    \n+    # Additional test cases to cover more assumptions\n+    m = Symbol('m', integer=True, odd=True)\n+    eq2, _ = posify(m)\n+    assert eq2.assumptions0['integer'] == True\n+    assert eq2.assumptions0['odd'] == True\n+    assert eq2.assumptions0['even'] == False\n+\n+    n = Symbol('n', rational=True, prime=True)\n+    eq3, _ = posify(n)\n+    assert eq3.assumptions0['rational'] == True\n+    assert eq3.assumptions0['prime'] == True\n     # simplify should call cancel\n     from sympy.abc import x, y\n     f = Function('f')\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..fdb6b31 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,9 +1,11 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational\n+from sympy.tensor import IndexedBase\n from sympy.core.numbers import pi\n from sympy.functions import acos, Piecewise, sign\n from sympy.logic import And, Or\n@@ -35,6 +37,13 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n+    # Test for the Indexed feature fix in PythonCodePrinter\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(p[x, y, z]) == 'p[x, y, z]'\n+    assert prntr.doprint(p[2, 2]) == 'p[2, 2]'\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+\n \n def test_MpmathPrinter():\n     p = MpmathPrinter()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..3e35fb5 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -47,8 +47,17 @@ def test_cython_wrapper_scalar_function():\n         \"    return test(x, y, z)\")\n     assert source == expected\n \n-\n-def test_cython_wrapper_outarg():\n+def test_cython_autowrap_unused_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+    \n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # Expression does not depend on 'x'.\n+    f = autowrap(expr, args=(x,), backend='cython')  # Should handle 'x' correctly.\n+    \n+    result = f(np.array([[1.0, 2.0]]))  # Call with an array.\n+    assert result == 1.0  # We expect the result to be 1.0.\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n     code_gen = CythonCodeWrapper(C99CodeGen())\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..6c76562 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -237,9 +237,12 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(3, (8, 3)) == 1\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n+from sympy.crypto.crypto import encode_morse\n \n def test_encode_morse():\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('10') == '.----|-----'\n     assert encode_morse('SMS ') == '...|--|...||'\n     assert encode_morse('SMS\\n') == '...|--|...||'\n     assert encode_morse('') == ''\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..12bd30d 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -811,7 +811,16 @@ def test_issue_15965():\n     assert simplify(B) == bnew\n \n \n-def test_issue_7971():\n+def test_issue_17137():\n+    x = Symbol('x')\n+    # Verify that the simplify function correctly handles power of `cos(x)` with complex exponent `I`\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    # Additional test cases with varying complex exponents\n+    assert simplify(cos(x)**(1 + I)) == cos(x)**(1 + I)\n+    assert simplify(cos(x)**(1 - I)) == cos(x)**(1 - I)\n+    assert simplify(cos(x)**(-I)) == cos(x)**(-I)\n+    assert simplify(cos(x)**(-2 - 3*I)) == cos(x)**(-2 - 3*I)\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..fb3fd19 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..e712f27 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -93,6 +94,11 @@ def test_point():\n     assert p4 * 5 == Point(5, 5)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n+    # Test multiplication order with sympy Float\n+    multiplier = sympify(2.0)\n+    assert p3 + p4 * multiplier == Point(2, 2)\n+    assert p3 + multiplier * p4 == Point(2, 2)\n+\n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n     # Point differences should be simplified\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..fe9bcd6 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -501,6 +501,19 @@ def test_diophantine():\n     assert diophantine(eq, permute=True) == complete_soln\n \n     assert diophantine(x**2 + x*Rational(15, 14) - 3) == set()\n+\n+    # Test for issue: diophantine incomplete results depending on syms order with permute=True\n+    # Original test patch for issue 18186\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+\n+    # Additional test cases to verify diophantine equivalency with permute=True\n+    assert diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(m, n), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(n**4 + m**4 - 2**4 - 3**4, syms=(n, m), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n     # test issue 11049\n     eq = 92*x**2 - 99*y**2 - z**2\n     coeff = eq.as_coefficients_dict()\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..1f81fbd 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -676,6 +676,8 @@ def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n+    assert latex(3*Subs(-x+y, (x,),(1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+\n \n def test_latex_integrals():\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..171cfd7 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,8 +1,10 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n     EmptySet, Union, Contains)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n     And, Mod, oo, Function)\n from sympy.testing.pytest import raises, XFAIL, warns_deprecated_sympy\n+from sympy import imageset, Lambda\n \n \n w = Symbol('w')\n@@ -110,6 +112,21 @@ def test_subs_CondSet():\n     # to evaluate, that can't be helped from SymPy's end\n     n = Symbol('n', negative=True)\n     assert ConditionSet(n, 0 < n, S.Integers) is S.EmptySet\n+\n+def test_issue_subs_condset_imageset():\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    cond_set = ConditionSet(x, Contains(y, Interval(-1, 1)), img1)\n+    assert cond_set.subs(y, S.One/3).dummy_eq(img2)\n+    assert cond_set.xreplace({y: S.One/3}).dummy_eq(img2)\n+    assert cond_set.subs({y: S.One/3}, simultaneous=True).dummy_eq(img2)\n+\n+    # Testing with another substitution value\n+    img3 = imageset(Lambda(k, 2*k*pi + asin(1/2)), S.Integers)\n+    assert cond_set.subs(y, 1/2).dummy_eq(img3)\n+    assert cond_set.xreplace({y: 1/2}).dummy_eq(img3)\n+    assert cond_set.subs({y: 1/2}, simultaneous=True).dummy_eq(img3)\n     p = Symbol('p', positive=True)\n     assert ConditionSet(n, n < y, S.Integers\n         ).subs(n, x) == ConditionSet(x, x < y, S.Integers)\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..8460c46 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -514,7 +514,24 @@ def test_kernS():\n     assert one != 1 and one.expand() == 1\n \n \n-def test_issue_6540_6552():\n+def test_kernS_variable_reference():\n+    # Verify that kernS processes expressions correctly without variable errors\n+    assert kernS(\"(x+1)*(x-1)\") == (x+1)*(x-1)\n+    assert kernS(\"2*(x+y)\") == 2*(x+y)\n+    \n+    # Test cases with unmatched parentheses to ensure SympifyError is raised\n+    try:\n+        kernS(\"(2*x)/(x-1\")\n+    except SympifyError:\n+        pass  # Expected behavior\n+\n+    # Test with complex nested structures\n+    expr = kernS(\"((x+1)*((x+2)-1)/(x-1))\")\n+    assert expr == (x+1)*((x+2)-1)/(x-1)\n+\n+    # Verify handling of negative expressions\n+    assert kernS(\"-(x + 1)\") == -(x + 1)\n+    assert kernS(\"-(x - 1)\") == -(x - 1)\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..139d713 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -895,6 +895,14 @@ def test_sylow_subgroup():\n         else:\n             assert len(ls) == length\n \n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+    \n     G = SymmetricGroup(100)\n     S = G.sylow_subgroup(3)\n     assert G.order() % S.order() == 0\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..4232989 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -501,7 +501,14 @@ def test_partitions():\n         i.copy() for i in partitions(4) if all(k <= 3 for k in i)]\n \n \n-    # Consistency check on output of _partitions and RGS_unrank.\n+    # Check if list(partitions(n)) gives correct results without reusing dictionaries\n+    assert list(partitions(6, k=2)) == [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+    assert list(partitions(6, k=3)) == [{3: 2}, {1: 1, 2: 1, 3: 1}, {1: 3, 3: 1}, {2: 3},\n+                                        {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+    assert list(partitions(8, k=4, m=3)) == [{4: 2}, {1: 1, 3: 1, 4: 1}, {2: 2, 4: 1}, {2: 1, 3: 2}]\n+    assert list(partitions(S(3), m=2)) == [{3: 1}, {1: 1, 2: 1}]\n+    assert list(partitions(4, k=3)) == [{1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n+    assert list(uniq(partitions(4))) == [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     # This provides a sanity test on both routines.  Also verifies that\n     # the total number of partitions is the same in each case.\n     #    (from pkrathmann2)\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..ec37474 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,23 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+def test_zero_not_false():\n+    # Verify the issue https://github.com/sympy/sympy/issues/20796\n+    from sympy import S\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+def test_zero_is_false_other_cases():\n+    from sympy import S\n+    # Additional tests for edge cases and related comparisons\n+    assert (S(0) != S.true) is True  # Sanity check\n+    assert (S.true != S(0)) is True  # Sanity check\n+    assert (S(1) == S.true) is True  # Positive integer equality with True\n+    assert (S(-1) != S.false) is True  # Negative integer inequality with False\n+    assert (S.false != S(1)) is True  # False not equal to positive integer\n+    assert (S.true == S(1.0)) is True  # True should be equal to 1.0\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..7f738b4 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -19,6 +20,44 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+    # Test cases for issue \"Unexpected `PolynomialError` when using simple `subs()`\"\n+\n+    def test_issue_21373_polynomial_error_with_subs():\n+        from sympy.functions.elementary.hyperbolic import sinh\n+        from sympy.functions.elementary.piecewise import Piecewise\n+\n+        x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+        \n+        # Expression involving sinh and Piecewise\n+        expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+        \n+        # Performing substitution\n+        result = expr.subs({1: 1.0})\n+        \n+        # Check if substitution completes and does not raise PolynomialError\n+        assert result is not None\n+\n+        # Additional tests to verify different scenarios that previously triggered errors\n+        # Test with cosh\n+        expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+        result_cosh = expr_cosh.subs({1: 1.0})\n+        assert result_cosh is not None\n+\n+        # Test with tanh\n+        expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+        result_tanh = expr_tanh.subs({1: 1.0})\n+        assert result_tanh is not None\n+\n+        # Test removing division by z\n+        expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+        result_no_div = expr_no_div.subs({1: 1.0})\n+        assert result_no_div is not None\n+\n+        # Test without the exp function, using sin\n+        expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+        result_no_exp = expr_no_exp.subs({1: 1.0})\n+        assert result_no_exp is not None\n+\n \n def test_subs_Matrix():\n     z = zeros(2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..06dbf78 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -12,6 +12,9 @@ from sympy.polys.monomials import (\n from sympy.polys.polyerrors import ExactQuotientFailed\n \n from sympy.abc import a, b, c, x, y, z\n+from sympy import symbols\n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n \n@@ -50,7 +53,31 @@ def test_monomials():\n     assert set(itermonomials([x, y], 3)) == \\\n             {S.One, x, y, x**2, x**3, y**2, y**3, x*y, x*y**2, y*x**2}\n \n+    # Ensure the `itermonomials` function works as expected with specified min_degrees\n     i, j, k = symbols('i j k', commutative=False)\n+\n+    # Test cases for identical min_degrees and max_degrees\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y, z], 2, 2)) == {x**2, y**2, z**2, x*y, x*z, y*z, x*y*z}\n+    \n+    # Test cases for distinct min_degrees and max_degrees\n+    assert set(itermonomials([x, y, z], 3, 2)) == {\n+        x**2, y**2, z**2, x*y, x*z, y*z, \n+        x**3, y**3, z**3,\n+        x**2*y, x**2*z, y**2*x, y**2*z, z**2*x, z**2*y,\n+        x*y*z\n+    }\n+\n+    # Extended test cases for higher degree monomials\n+    assert set(itermonomials([a, b, c], 4, 3)) == {\n+        a**3, b**3, c**3, a**4, b**4, c**4,\n+        a**3*b, a**3*c, b**3*a, b**3*c, c**3*a, c**3*b,\n+        a**2*b*c, b**2*a*c, c**2*a*b,\n+        a*b**3, a*c**3, b*a**3, b*c**3, c*a**3, c*b**3,\n+        a*b*c,\n+        a**2*b**2, a**2*c**2, b**2*c**2,\n+        a*b**2*c, a*c**2*b, b*a**2*c, b*c**2*a, c*a**2*b, c*b**2*a\n+    }\n     assert set(itermonomials([i, j, k], 0)) == {S.One}\n     assert set(itermonomials([i, j, k], 1)) == {S.One, i, j, k}\n     assert set(itermonomials([i, j, k], 2)) == \\\n@@ -131,7 +158,31 @@ def test_monomials():\n     assert set(itermonomials([x, y], [2, 2])) == \\\n             {S.One, y**2, x*y**2, x, x*y, x**2, x**2*y**2, y, x**2*y}\n \n+    # Ensure the `itermonomials` function works as expected with specified min_degrees\n     i, j, k = symbols('i j k', commutative=False)\n+\n+    # Test cases for identical min_degrees and max_degrees\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y, z], 2, 2)) == {x**2, y**2, z**2, x*y, x*z, y*z, x*y*z}\n+    \n+    # Test cases for distinct min_degrees and max_degrees\n+    assert set(itermonomials([x, y, z], 3, 2)) == {\n+        x**2, y**2, z**2, x*y, x*z, y*z, \n+        x**3, y**3, z**3,\n+        x**2*y, x**2*z, y**2*x, y**2*z, z**2*x, z**2*y,\n+        x*y*z\n+    }\n+\n+    # Extended test cases for higher degree monomials\n+    assert set(itermonomials([a, b, c], 4, 3)) == {\n+        a**3, b**3, c**3, a**4, b**4, c**4,\n+        a**3*b, a**3*c, b**3*a, b**3*c, c**3*a, c**3*b,\n+        a**2*b*c, b**2*a*c, c**2*a*b,\n+        a*b**3, a*c**3, b*a**3, b*c**3, c*a**3, c*b**3,\n+        a*b*c,\n+        a**2*b**2, a**2*c**2, b**2*c**2,\n+        a*b**2*c, a*c**2*b, b*a**2*c, b*c**2*a, c*a**2*b, c*b**2*a\n+    }\n     assert set(itermonomials([i, j, k], [0, 0, 0])) == {S.One}\n     assert set(itermonomials([i, j, k], [0, 0, 1])) == {1, k}\n     assert set(itermonomials([i, j, k], [0, 1, 0])) == {1, j}\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..7b518b1 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,8 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    # Adding test case for argument invariance specific to String class\n+    assert st.func(*st.args) == st\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..0bad815 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -5,6 +6,7 @@ from sympy.core.symbol import Symbol\n from sympy.core.sympify import sympify\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n+from sympy.core.parameters import evaluate\n from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n@@ -443,8 +445,39 @@ def test_unit():\n def test_dot():\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n-\n-def test__normalize_dimension():\n+def test_issue_22684():\n+    # Used to give an error with evaluate(False)\n+    with evaluate(False):\n+        p = Point(1, 2)\n+        assert isinstance(p, Point2D)\n+        assert p == Point2D(1, 2)\n+\n+    # Verify with Point2D directly\n+    with evaluate(False):\n+        p = Point2D(1, 2)\n+        assert p == Point2D(1, 2)\n+\n+    # With evaluation turned off explicitly in function call\n+    p = Point2D(1, 2, evaluate=False)\n+    assert p == Point2D(1, 2)\n+\n+    # With evaluation turned on\n+    p = Point2D(1, 2)\n+    assert p == Point2D(1, 2)\n+\n+    # Without using evaluate context manager but with evaluate=False\n+    p = Point(1, 2, evaluate=False)\n+    assert isinstance(p, Point2D)\n+    assert p == Point2D(1, 2)\n+\n+    # Edge case: floating point representation\n+    with evaluate(False):\n+        p = Point2D(1.0, 2.0)\n+        assert p == Point2D(1, 2)\n+\n+    # Ensure incorrect values still raise errors\n+    raises(ValueError, lambda: Point2D(1, I))\n+    raises(ValueError, lambda: Point(1, I))\n     assert Point._normalize_dimension(Point(1, 2), Point(3, 4)) == [\n         Point(1, 2), Point(3, 4)]\n     assert Point._normalize_dimension(\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..277469e 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -26,8 +27,23 @@ p = IndexedBase(\"p\")\n \n def test_PythonCodePrinter():\n     prntr = PythonCodePrinter()\n-\n-    assert not prntr.module_imports\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    \n+    # Additional test cases for Min and Max with more complex scenarios\n+    assert prntr.doprint(Min(x + y, y + z, z + x)) == \"min(x + y, y + z, z + x)\"\n+    assert prntr.doprint(Max(x * y, y * z, z * x)) == \"max(x*y, y*z, z*x)\"\n+    \n+    # Test Min and Max with literals\n+    assert prntr.doprint(Min(1, 2, 3)) == \"min(1, 2, 3)\"\n+    assert prntr.doprint(Max(1, 2, 3)) == \"max(1, 2, 3)\"\n+\n+    # Test nested Min and Max\n+    assert prntr.doprint(Min(Max(x, y), Min(y, z))) == \"min(max(x, y), min(y, z))\"\n+\n+    # Test Min and Max in an expression\n+    assert prntr.doprint(x + Min(y, z)) == \"x + min(y, z)\"\n+    assert prntr.doprint(x * Max(y, z)) == \"x*max(y, z)\"\n \n     assert prntr.doprint(x**y) == 'x**y'\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n",
  "sympy__sympy-23262": "",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..d8e412d 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,5 +1,7 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n@@ -303,6 +305,22 @@ def test_symbols():\n     assert sym('a1(2:4)') == '(a12, a13)'\n     assert sym('a0:2.0:2') == '(a0.0, a0.1, a1.0, a1.1)'\n     assert sym('aa:cz') == '(aaz, abz, acz)'\n+\n+def test_symbols_with_function_cls():\n+    # Ensure that when using the `symbols` with `Function`, and extra parentheses, it creates `UndefinedFunction`\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert isinstance(q[0], UndefinedFunction)  # Checks the type of the elements in the tuple\n+    assert isinstance(u[1], UndefinedFunction)\n+\n+    # Non-parenthesized case for comparison\n+    q2, u2 = symbols('q:2 u:2', cls=Function)\n+    assert isinstance(q2[0], UndefinedFunction)\n+    assert isinstance(u2[1], UndefinedFunction)\n+\n+    # Ensure using default behavior without `cls=Function` uses `Symbol`\n+    a, b = symbols(('a:2', 'b:2'))\n+    assert isinstance(a[0], Symbol)\n+    assert isinstance(b[1], Symbol)\n     assert sym('aa:c0:2') == '(aa0, aa1, ab0, ab1, ac0, ac1)'\n     assert sym('aa:ba:b') == '(aaa, aab, aba, abb)'\n     assert sym('a:3b') == '(a0b, a1b, a2b)'\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..79a51c7 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -261,8 +261,31 @@ def test_kahane_simplify1():\n     r = kahane_simplify(t)\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+\n+    # Test case 1: Contracted matrices at the beginning\n+    t1 = (G(mu)*G(-mu)*G(rho)*G(sigma))\n+    r1 = kahane_simplify(t1)\n+    assert r1.equals(4 * G(rho) * G(sigma)), \"Failed on contracted pair at start\"\n+\n+    # Test case 2: Contracted matrices at the end\n+    t2 = (G(rho)*G(sigma)*G(mu)*G(-mu))\n+    r2 = kahane_simplify(t2)\n+    assert r2.equals(4 * G(rho) * G(sigma)), \"Failed on contracted pair at the end\"\n+\n+    # Additional test cases to ensure order is preserved\n+    # contracted pair in between\n+    t3 = (G(rho)*G(mu)*G(-mu)*G(sigma))\n+    r3 = kahane_simplify(t3)\n+    assert r3.equals(4 * G(rho) * G(sigma)), \"Failed on contracted pair in the middle\"\n+\n+    # two sets of contracted pairs\n+    t4 = (G(mu)*G(-mu)*G(nu)*G(-nu)*G(rho)*G(sigma))\n+    r4 = kahane_simplify(t4)\n+    assert r4.equals(16 * G(rho) * G(sigma)), \"Failed on two contracted pairs\"\n \n-def test_gamma_matrix_class():\n+    print(\"All test cases for kahane_leading_gamma_matrix_bug() passed.\")\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..755a7d9 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -45,7 +45,17 @@ def test_as_set():\n     # containment in a Set -- rewriting as a Set is not yet implemented\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n+from sympy import S, Symbol, FiniteSet, Integers, Reals\n+from sympy.sets.contains import Contains\n+from sympy.testing.pytest import raises\n+\n \n-def test_type_error():\n+def test_contains_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Testing that as_set raises NotImplementedError\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..106c49a 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,7 +528,27 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n-def test_issue_20288():\n+from sympy.core.numbers import E\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+from sympy import exp\n+\n+def test_issue_24062():\n+    from sympy.physics.units import Quantity\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n     u = Quantity('u')\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..27325b0 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,32 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_equivalent_dimensions_in_addition():\n+    # Create quantities for velocity, acceleration, and time\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1 * t1 + v1\n+\n+    # Ensure no error is raised; if issue is resolved, this test should pass\n+    try:\n+        SI._collect_factor_and_dimension(expr1)\n+        assert True  # If no error is raised, the test passes\n+    except ValueError:\n+        assert False, \"ValueError was raised unexpectedly\"\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..5d39f56 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,9 +1,11 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n from sympy.combinatorics.free_groups import free_group\n from sympy.combinatorics.fp_groups import FpGroup\n from sympy.combinatorics.named_groups import AlternatingGroup, DihedralGroup, CyclicGroup\n+from sympy.combinatorics.named_groups import DihedralGroup\n from sympy.testing.pytest import raises\n \n def test_homomorphism():\n@@ -43,6 +45,10 @@ def test_homomorphism():\n     assert T.invert(a**-1*b**-1*a**2) == a*b**-1\n \n     # PermutationGroup -> PermutationGroup\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+    assert T.domain == D3 and T.codomain == D3\n     D = DihedralGroup(8)\n     p = Permutation(0, 1, 2, 3, 4, 5, 6, 7)\n     P = PermutationGroup(p)\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..658acda 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -270,6 +270,22 @@ def test_PolyElement_as_expr():\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n+    # Additional test cases for the issue\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Testing with different number of symbols, should raise ValueError\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+    raises(ValueError, lambda: f.as_expr(U, V, W, X))\n+    raises(ValueError, lambda: f.as_expr())\n+    \n+    # Ensure the function works correctly with one generator polymials\n+    R, x = ring(\"x\", ZZ)\n+    p = x**2 + 2*x + 1\n+    U, = symbols(\"u\")\n+    assert p.as_expr(U) == U**2 + 2*U + 1\n+\n def test_PolyElement_from_expr():\n     x, y, z = symbols(\"x,y,z\")\n     R, X, Y, Z = ring((x, y, z), ZZ)\n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..8220f4e 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -273,6 +273,18 @@ def test_convert_equals_signs():\n     assert parse_expr(\"(2*y = x) = False\",\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n+def test_issue_24288():\n+    from sympy.parsing.sympy_parser import parse_expr\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n \n def test_parse_function_issue_3539():\n     x = Symbol('x')\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..0394984 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -35,6 +35,11 @@ from astropy.units.utils import is_effectively_unity\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n         ([\"dex(cm s**-2)\", \"dex(cm/s2)\"], u.DexUnit(u.cm / u.s**2)),\n+        # Additional test cases for CDS unit parsing based on the reported issue.\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),  # Correct interpretation\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),  # Correct interpretation\n+        ([\"km/s/Mpc\"], u.km / u.s / u.Mpc),  # Valid composite unit with multiple divisions\n+        ([\"km/(s.Mpc)\"], u.km / (u.s * u.Mpc))  # Valid composite unit with parentheses\n     ],\n )\n def test_unit_grammar(strings, unit):\n@@ -90,6 +95,11 @@ def test_unit_grammar_fail(string):\n         ([\"[cm/s2]\"], dex(u.cm / u.s**2)),\n         ([\"[K]\"], dex(u.K)),\n         ([\"[-]\"], dex(u.dimensionless_unscaled)),\n+        # Additional test cases for CDS unit parsing based on the reported issue.\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),  # Correct interpretation\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),  # Correct interpretation\n+        ([\"km/s/Mpc\"], u.km / u.s / u.Mpc),  # Valid composite unit with multiple divisions\n+        ([\"km/(s.Mpc)\"], u.km / (u.s * u.Mpc))  # Valid composite unit with parentheses\n     ],\n )\n def test_cds_grammar(strings, unit):\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..591d396 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -148,8 +148,30 @@ class URLTranslationTests(URLTestCaseBase):\n \n         with translation.override('pt-br'):\n             self.assertEqual(reverse('users'), '/pt-br/usuarios/')\n+    from django.urls import resolve\n \n     def test_translate_url_utility(self):\n+        # Test that translate_url correctly handles optional URL parameters\n+        with translation.override('en'):\n+            # Optional part 'optional' is missing\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+                '/nl/with-arguments/regular-argument/',\n+            )\n+            # Optional part 'optional' is present\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+                '/nl/with-arguments/regular-argument/optional.html',\n+            )\n+\n+        for url, kwargs in (\n+            ('/regex_optional/1/2/', {'arg1': '1', 'arg2': '2'}),\n+            ('/regex_optional/1/', {'arg1': '1'}),\n+        ):\n+            with self.subTest(url=url):\n+                match = resolve(url)\n+                self.assertEqual(match.url_name, 'regex_optional')\n+                self.assertEqual(match.kwargs, kwargs)\n         with translation.override('en'):\n             self.assertEqual(translate_url('/en/nonexistent/', 'nl'), '/en/nonexistent/')\n             self.assertEqual(translate_url('/en/users/', 'nl'), '/nl/gebruikers/')\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..758d47a 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,9 +1,12 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n import datetime\n from operator import attrgetter\n+import uuid\n from unittest import expectedFailure\n+from django.db import models\n \n from django import forms\n from django.test import TestCase\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..068ff7d 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -606,6 +606,14 @@ class DeletionTests(TestCase):\n \n class FastDeleteTests(TestCase):\n \n+    def test_fast_delete_all_no_subquery(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries should be used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+        self.assertEqual(User.objects.count(), 0)\n+\n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n@@ -702,4 +710,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..22b1a5f 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,11 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_dict_input_raises_validation_error(self):\n+        f = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        with self.assertRaisesMessage(ValidationError, msg % ({})):\n+            f.to_python({})\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..e142ccb 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -219,7 +220,37 @@ class PickleabilityTestCase(TestCase):\n         with self.assertNumQueries(0):\n             self.assert_pickles(groups)\n \n-    def test_annotation_with_callable_default(self):\n+    def test_values_annotate_pickle(self):\n+        # Setup data.\n+        group1 = Group.objects.create(name='group1')\n+        group2 = Group.objects.create(name='group2')\n+        Event.objects.create(title='event1', group=group1)\n+        Event.objects.create(title='event2', group=group2)\n+        Event.objects.create(title='event3', group=group1)\n+\n+        # Annotate and use values.\n+        qs = Event.objects.values('group__name').annotate(num_events=models.Count('id'))\n+        # Pickle and unpickle the queryset.\n+        reloaded_qs = pickle.loads(pickle.dumps(qs))\n+\n+        # Assert both evaluated querysets give the same list of dicts.\n+        self.assertEqual(list(qs), list(reloaded_qs))\n+\n+    def test_values_list_annotate_pickle(self):\n+        # Setup data.\n+        group1 = Group.objects.create(name='group1')\n+        group2 = Group.objects.create(name='group2')\n+        Event.objects.create(title='event1', group=group1)\n+        Event.objects.create(title='event2', group=group2)\n+        Event.objects.create(title='event3', group=group1)\n+\n+        # Annotate and use values_list.\n+        qs = Event.objects.values_list('group__name', flat=True).annotate(num_events=models.Count('id'))\n+        # Pickle and unpickle the queryset.\n+        reloaded_qs = pickle.loads(pickle.dumps(qs))\n+\n+        # Assert both evaluated querysets give the same list.\n+        self.assertEqual(list(qs), list(reloaded_qs))\n         # Happening.when has a callable default of datetime.datetime.now.\n         qs = Happening.objects.annotate(latest_time=models.Max('when'))\n         self.assert_pickles(qs)\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..528e2cf 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,7 +30,16 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n-    def test_widget(self):\n+    def test_unicode_characters(self):\n+        field = JSONField()\n+        # Test Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d\uff0c\u4e16\u754c'}), '{\"a\": \"\u4f60\u597d\uff0c\u4e16\u754c\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n+        # Test Emojis\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        self.assertEqual(field.prepare_value('\ud83d\ude00\ud83d\udc31'), '\"\ud83d\ude00\ud83d\udc31\"')\n+        # Test mixed Unicode characters\n+        self.assertEqual(field.prepare_value(['\u4f60\u597d\uff0c\u4e16\u754c', 'ja\u017a\u0144']), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]')\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n \n",
  "django__django-14404": "",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..9308999 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,7 +691,38 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n-    def test_migration_path(self):\n+    def test_mixin_and_custom_field_imports(self):\n+        \"\"\"\n+        Tests that a migration with a model using a mixin and custom field\n+        includes all necessary imports.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyMixin:\n+            pass\n+\n+        fields = {\n+            'name': MyField(primary_key=True),\n+        }\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"MyModel\",\n+                    fields=tuple(fields.items()),\n+                    bases=(MyMixin, models.Model),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        result = self.safe_exec(output)\n+        # Check if 'models' and 'MyMixin' are correctly imported\n+        self.assertIn(\"MyField\", result)\n+        self.assertIn(\"from django.db import models\", result)\n+        self.assertIn(\"app.models.MyMixin\", result)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..ce689cc 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1629,6 +1629,20 @@ class AggregateTestCase(TestCase):\n             value=Sum('price', filter=Q(rating__lt=3.0), default=Avg('pages') / 10.0),\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n+    def test_aggregation_default_after_annotation_with_different_field(self):\n+        result = Book.objects.annotate(\n+            double_id=F('id') * 2,\n+        ).aggregate(value=Sum('double_id', default=0))\n+        self.assertEqual(result['value'], Sum(x.id * 2 for x in Book.objects.all()))\n+\n+    def test_aggregation_default_the_same_as_coalesce_form(self):\n+        result_default = Book.objects.annotate(\n+            double_id=F('id') * 2,\n+        ).aggregate(value=Sum('double_id', default=0))\n+        result_coalesce = Book.objects.annotate(\n+            double_id=F('id') * 2,\n+        ).aggregate(value=Coalesce(Sum('double_id'), 0))\n+        self.assertEqual(result_default['value'], result_coalesce['value'])\n \n     def test_exists_none_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n@@ -1642,4 +1656,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..8daeef9 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2980,7 +2980,17 @@ class OperationTests(OperationTestBase):\n \n         new_state = project_state.clone()\n         operation.state_forwards(app_label, new_state)\n-        # Rename index.\n+        # Attempt to move the unnamed index forward and backward to ensure RenameIndex works properly.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n+        # Move index backwards by re-applying with original state\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"Unnamed index or original autogenerated name\")\n+        \n+        # Now, move it forward again to ensure re-application does not crash\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..cb1ebef 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3497,7 +3497,68 @@ class FormFieldCallbackTests(SimpleTestCase):\n             )\n \n \n-class LocalizedModelFormTest(TestCase):\n+from django.test import TestCase\n+from django import forms\n+from django.forms import modelform_factory\n+from django.db import models\n+\n+class Person(models.Model):\n+    name = models.CharField(max_length=100)\n+    age = models.IntegerField()\n+\n+class TestModelFormCallback(TestCase):\n+    def test_custom_callback_in_meta(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class NewForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = [\"name\", \"age\"]\n+                formfield_callback = callback\n+\n+        for field in NewForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_custom_callback_from_base_form_meta(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = \"__all__\"\n+                formfield_callback = callback\n+\n+        NewForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        class InheritedForm(NewForm):\n+            pass\n+\n+        for name, field in NewForm.base_fields.items():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+            self.assertEqual(\n+                type(field.widget),\n+                type(InheritedForm.base_fields[name].widget),\n+            )\n+\n+    def test_customize_formfields_with_callback(self):\n+        def custom_callback(db_field, **kwargs):\n+            if db_field.name == 'age':\n+                return forms.IntegerField(min_value=18)\n+            return db_field.formfield(**kwargs)\n+\n+        class CustomForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = \"__all__\"\n+                formfield_callback = custom_callback\n+\n+        FormClass = modelform_factory(Person, form=CustomForm)\n+        form_instance = FormClass(data={'name': 'John Doe', 'age': 17})\n+        self.assertFalse(form_instance.is_valid())\n+        form_instance = FormClass(data={'name': 'John Doe', 'age': 18})\n+        self.assertTrue(form_instance.is_valid())\n     def test_model_form_applies_localize_to_some_fields(self):\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n             class Meta:\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..fff7880 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,7 +9,8 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.core.exceptions import FieldError\n+from django.core import serializers\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n@@ -258,7 +259,37 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             for obj in serializers.deserialize(\"json\", test_string, ignore=False):\n                 obj.save()\n \n-    def test_helpful_error_message_for_many2many_not_iterable(self):\n+    def test_serialization_with_custom_manager_using_select_related(self):\n+        \"\"\"\n+        Test serialization of m2m relation with a custom manager using select_related.\n+        \"\"\"\n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+\n+        class TestTagManager(models.Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().select_related(\"master\")\n+\n+        class TestTag(models.Model):\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+            objects = TestTagManager()\n+\n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+\n+        # Create objects\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+\n+        # Test if serialization works without FieldError\n+        try:\n+            serializers.serialize(\"json\", [test])\n+        except FieldError:\n+            self.fail(\"Serialization with custom manager using select_related raised a FieldError.\")\n         \"\"\"\n         Not iterable many-to-many field value throws a helpful error message.\n         \"\"\"\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..734088c 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -217,8 +217,26 @@ def test_unpickle_canvas():\n     assert fig2.canvas is not None\n \n \n-def test_mpl_toolkits():\n-    ax = parasite_axes.host_axes([0, 0, 1, 1])\n+def test_dpi_after_unpickling():\n+    import matplotlib.pyplot as plt\n+    import pickle\n+    \n+    # Create a new figure with a specified DPI\n+    original_dpi = 100\n+    fig = plt.figure(dpi=original_dpi)\n+    \n+    # Pickle and unpickle the figure\n+    fig_pickled = pickle.dumps(fig)\n+    fig_unpickled = pickle.loads(fig_pickled)\n+    \n+    # Assert that the DPI is the same after unpickling\n+    assert fig_unpickled.dpi == original_dpi, \"DPI should remain constant after unpickling\"\n+    \n+    # Run a loop to repeatedly pickle and unpickle\n+    for _ in range(10):\n+        fig_pickled = pickle.dumps(fig_unpickled)\n+        fig_unpickled = pickle.loads(fig_pickled)\n+        assert fig_unpickled.dpi == original_dpi, \"DPI should remain constant after unpickling in loop\"\n     assert type(pickle.loads(pickle.dumps(ax))) == parasite_axes.HostAxes\n \n \n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..92bd70f 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6586,7 +6586,20 @@ def test_integrate(dask):\n     assert isinstance(actual.data, type(da.data))\n \n     # along y\n-    actual = da.integrate(\"y\")\n+    # Test with the 'coord' argument for integration on DataArray\n+    actual_coord = da.integrate(coord=\"y\")\n+    expected_y_coord = xr.DataArray(\n+        np.trapz(da, da[\"y\"], axis=1),\n+        dims=[\"x\"],\n+        coords={k: v for k, v in da.coords.items() if \"y\" not in v.dims},\n+    )\n+    assert_allclose(expected_y_coord, actual_coord.compute())\n+    assert_equal(actual_coord, ds.integrate(coord=\"y\")[\"var\"])\n+    assert_equal(ds[\"var\"].integrate(coord=\"y\"), ds.integrate(coord=\"y\")[\"var\"])\n+\n+    with pytest.warns(FutureWarning):\n+        actual_dim = da.integrate(dim=\"y\")\n+        assert_equal(actual_dim, actual_coord)\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..9db5369 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -130,8 +130,34 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     )\n     assert assertString in output.err\n \n+from typing import Any\n+import re\n+import pytest\n+from pylint.lint import Run\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (r\"(foo{1,3})\", [r\"foo{1,3}\"]),\n+    (r\"(foo{2,5},bar)\", [r\"foo{2,5}\", \"bar\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_handling(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that regular expressions with commas inside quantifiers are parsed correctly.\"\"\"\n+    \n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n \n-def test_csv_regex_error(capsys: CaptureFixture) -> None:\n+    compiled_expected = [re.compile(regex) for regex in expected]\n+    assert _template_run(in_string) == compiled_expected\n     \"\"\"Check that we correctly error when an option is passed and one\n     of its comma-separated regular expressions values is an invalid regular expression.\n     \"\"\"\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..f66a715 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,20 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"test_input,expected_exception\",\n+    [\n+        (\"None\", AssertionError),\n+        (\"True\", AssertionError),\n+        (\"False\", AssertionError),\n+    ],\n+)\n+def test_compile_reserved_identifiers(test_input: str, expected_exception: type) -> None:\n+    \"\"\"Test that compiling expressions with reserved identifiers raises an assertion error.\"\"\"\n+    with pytest.raises(expected_exception) as excinfo:\n+        Expression.compile(test_input)\n+    assert \"failed\" in str(excinfo.value)\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..48c1ffd 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,31 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with custom transformer and pandas output.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    from sklearn.pipeline import FeatureUnion, make_union\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn import set_config\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y=None):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y=None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().to_frame()\n+\n+    # Check with pandas output configuration\n+    set_config(transform_output=\"pandas\")\n+    union = make_union(MyTransformer())\n+    result = union.fit_transform(data)\n+\n+    # Verify that the transformation does not raise an error and returns a DataFrame\n+    assert isinstance(result, pd.DataFrame)\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..a604ea4 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -12,8 +12,44 @@ import pytest\n \n from sphinx import addnodes\n \n+import re\n \n @pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n+def test_autodoc_typehints_description(app, status, warning):\n+    # Build with 'autodoc_typehints = description'\n+    app.config.autodoc_typehints = 'description'\n+    app.builder.build_all()\n+    \n+    content = app.env.get_doctree('index')\n+    html = app.builder.get_outfilename('index')\n+    \n+    with open(html, encoding='utf-8') as f:\n+        output = f.read()\n+    \n+    # Expecting a link for \"None\" return type\n+    assert re.search(r'href=\"https://docs.python.org/3/library/constants.html#None\"', output), \\\n+        \"Expected a link for None in 'description' mode, but it was absent.\"\n+\n+    # no warnings should be present\n+    assert warning.getvalue() == ''\n+\n+def test_autodoc_typehints_signature(app, status, warning):\n+    # Build with 'autodoc_typehints = signature'\n+    app.config.autodoc_typehints = 'signature'\n+    app.builder.build_all()\n+    \n+    content = app.env.get_doctree('index')\n+    html = app.builder.get_outfilename('index')\n+    \n+    with open(html, encoding='utf-8') as f:\n+        output = f.read()\n+\n+    # Not expecting a link for \"None\" return type\n+    assert not re.search(r'href=\"https://docs.python.org/3/library/constants.html#None\"', output), \\\n+        \"Expected no link for None in 'signature' mode, but a link was found.\"\n+    \n+    # no warnings should be present\n+    assert warning.getvalue() == ''\n def test_autodoc(app, status, warning):\n     app.builder.build_all()\n \n@@ -30,4 +66,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..ae51c7a 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1266,8 +1266,55 @@ class NumpyDocstringTest(BaseDocstringTest):\n                  description of yielded value\n         \"\"\"\n     )]\n+    \n+    def test_multiple_parameters(self):\n+        # Test case for verifying multiple parameter handling in docstring\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n \n-    def test_sphinx_admonitions(self):\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Adding test for optional parameters\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         admonition_map = {\n             'Attention': 'attention',\n             'Caution': 'caution',\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..2d06ff8 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -773,6 +773,57 @@ def test_pydecoratormethod_signature(app):\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n+@pytest.mark.sphinx(freshenv=True)\n+def test_ambiguous_class_lookup_warnings(app):\n+    text = (\"\"\"\n+.. py:class:: mod.A\n+\n+.. py:class:: mod.submod.A\n+\n+.. py:function:: f()\n+\n+    - :py:class:`mod.A`\n+    - :py:class:`mod.submod.A`\n+\n+    :param mod.A a:\n+    :param mod.submod.A b:\n+    :rtype: mod.A\n+    :rtype: mod.submod.A\n+\n+.. py:currentmodule:: mod\n+\n+.. py:function:: f()\n+\n+    - :py:class:`A`\n+    - :py:class:`mod.A`\n+    - :py:class:`mod.submod.A`\n+\n+    :param A a:\n+    :param mod.A b:\n+    :param mod.submod.A c:\n+    :rtype: A\n+    :rtype: mod.A\n+    :rtype: mod.submod.A\n+\n+.. py:currentmodule:: mod.submod\n+\n+.. py:function:: f()\n+\n+    - :py:class:`A`\n+    - :py:class:`mod.A`\n+    - :py:class:`mod.submod.A`\n+\n+    :param A a:\n+    :param mod.A b:\n+    :param mod.submod.A c:\n+    :rtype: A\n+    :rtype: mod.A\n+    :rtype: mod.submod.A\n+    \"\"\")\n+    \n+    warnings = app._warning.getvalue()\n+    assert \"WARNING: more than one target found for cross-reference 'A'\" not in warnings\n+\n \n @pytest.mark.sphinx(freshenv=True)\n def test_module_index(app):\n",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..e5c978e 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,11 +1,12 @@\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n-\n+_foo = None  #: :meta public:\n     :meta private:\n     \"\"\"\n-\n+_foo = None  #: :meta public:\n def _public_function(name):\n     \"\"\"public_function is a docstring().\n-\n+_foo = None  #: :meta public:\n     :meta public:\n-    \"\"\"\n+    \"\"\"\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..e22458b 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -984,7 +984,43 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n-def test_info_field_list_var(app):\n+def test_info_field_list_dict_param(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional) blah blah\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional) blah blah\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..84f8b2e 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1009,6 +1009,12 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n+from docutils import nodes\n+from sphinx.addnodes import desc, desc_signature, desc_annotation, desc_addname, desc_name, desc_content, pending_xref\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.testing.restructuredtext import parse\n+from sphinx.testing.util import assert_node\n+\n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..dcfba06 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1069,7 +1069,12 @@ def test_conditionset():\n \n \n @XFAIL\n-def test_conditionset_equality():\n+def test_solveset_conditionset_trigonometric():\n+    from sympy import Eq, cos, sin, solveset, ConditionSet, Reals\n+    n = symbols('n')\n+    # Equation: n*cos(n) - 3*sin(n) = 0\n+    eq = Eq(n*cos(n) - 3*sin(n), 0)\n+    assert solveset(eq, n, domain=Reals) == ConditionSet(n, eq, Reals)\n     ''' Checking equality of different representations of ConditionSet'''\n     assert solveset(Eq(tan(x), y), x) == ConditionSet(x, Eq(tan(x), y), S.Complexes)\n \n",
  "sympy__sympy-18698": "",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..6f0b7b8 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3254,8 +3254,17 @@ def test_issue_5786():\n     assert expand(factor(expand(\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n-\n-def test_noncommutative():\n+def test_factor_with_extension():\n+    from sympy import I, x, y, expand\n+    expr = expand((x-1)*(y-1))\n+    factored_expr_no_extension = factor(expr)\n+    factored_expr_with_extension = factor(expr, extension=[I])\n+    \n+    # Assert that the factor function without extension provides the correct factorization\n+    assert factored_expr_no_extension == (x - 1)*(y - 1)\n+    \n+    # Assert that the factor function with extension does not drop any factor\n+    assert factored_expr_with_extension == (x - 1)*(y - 1)\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..b5b6f2e 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -11,7 +12,7 @@ from sympy.core.sympify import SympifyError\n from sympy.core.function import Function, Lambda\n from sympy.core.compatibility import default_sort_key\n \n-from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum\n+from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum, Symbol\n from sympy.functions.elementary.exponential import exp\n from sympy.testing.pytest import raises\n from sympy.core import I, pi\n@@ -24,7 +25,17 @@ b21 = Basic(b2, b1)\n \n def test__aresame():\n     assert not _aresame(Basic([]), Basic())\n-    assert not _aresame(Basic([]), Basic(()))\n+def test_symbol_no_dict():\n+    s = Symbol('s')\n+    # Verify that Symbol instances do not have __dict__\n+    assert not hasattr(s, '__dict__')\n+    with raises(AttributeError):\n+        _ = s.__dict__\n+\n+def test_symbol_slots():\n+    s = Symbol('s')\n+    # Verify that Symbol instances have the correct __slots__\n+    assert s.__slots__ == ('name',)\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n",
  "sympy__sympy-24562": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..b50446f 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,38 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundfield_subwidget_id_for_label_custom_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label correctly uses the custom 'id' provided\n+        via ChoiceWidget.options in subwidgets.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_choice_id'}),\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets()\n+        # Ensure the custom 'id' is used over the auto_id\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_choice_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_choice_id_1')\n+\n+    def test_boundfield_subwidget_id_for_label_default_auto_id(self):\n+        \"\"\"\n+        Test the default behavior where auto_id is utilized if no custom ID is provided.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets()\n+        \n+        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..f5b3bf5 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -299,6 +299,29 @@ def test_tool_line_handle():\n         assert artist.get_animated()\n         assert artist.get_visible()\n \n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_axes_limits_unchanged(direction):\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [10, 30])\n+    initial_xlim = ax.get_xlim()\n+    initial_ylim = ax.get_ylim()\n+    \n+    ss = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    ax.figure.canvas.draw_idle()\n+\n+    # After initializing the SpanSelector, limits should not change\n+    assert ax.get_xlim() == initial_xlim\n+    assert ax.get_ylim() == initial_ylim\n+\n+    # Simulate a selection event, axes limits should remain unchanged\n+    do_event(ss, 'press', xdata=15, ydata=20, button=1)\n+    do_event(ss, 'onmove', xdata=18, ydata=25, button=1)\n+    do_event(ss, 'release', xdata=18, ydata=25, button=1)\n+\n+    assert ax.get_xlim() == initial_xlim\n+    assert ax.get_ylim() == initial_ylim\n+\n     assert tool_line_handle.positions == positions\n \n \n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..f72b521 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,59 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n+def test_sparse_coder_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** 0.25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3\n+    n_components = resolution // subsampling\n+\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                                        n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # Check that the underlying model fails to converge with low max_iter\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # Check that the underlying model converges without warnings with sufficient max_iter\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n+    print(\"Tests for SparseCoder's max_iter conducted successfully.\")\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..ebcb560 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -137,16 +137,97 @@ def test_multi_target_sample_weights():\n     w = [2., 1.]\n     rgr_w = MultiOutputRegressor(GradientBoostingRegressor(random_state=0))\n     rgr_w.fit(Xw, yw, w)\n-\n+import pytest\n+import numpy as np\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from numpy.testing import assert_array_equal\n+\n+def test_cross_val_predict_multioutput_predict_proba():\n+    # Generating a multilabel classification problem\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20,\n+                                          n_classes=3, n_labels=2, random_state=42)\n+    # Initializing the MultiOutputClassifier with LinearDiscriminantAnalysis\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+\n+    # Testing to ensure no errors are raised when using cross_val_predict with method='predict_proba'\n+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')\n+    \n+    # Verify the prediction probabilities' format and shape\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]\n+    for est_pred_proba, true_classes in zip(pred_proba, Y.T):\n+        assert est_pred_proba.shape[0] == X.shape[0]\n+        assert est_pred_proba.shape[1] == len(np.unique(true_classes))\n+\n+    # Check predictions probabilities sum to 1 for each instance and output\n+    for output_array in pred_proba:\n+        assert np.allclose(np.sum(output_array, axis=1), 1)\n     # unweighted, but with repeated samples\n     X = [[1, 2, 3], [1, 2, 3], [4, 5, 6]]\n     y = [[3.141, 2.718], [3.141, 2.718], [2.718, 3.141]]\n     rgr = MultiOutputRegressor(GradientBoostingRegressor(random_state=0))\n     rgr.fit(X, y)\n-\n+import pytest\n+import numpy as np\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from numpy.testing import assert_array_equal\n+\n+def test_cross_val_predict_multioutput_predict_proba():\n+    # Generating a multilabel classification problem\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20,\n+                                          n_classes=3, n_labels=2, random_state=42)\n+    # Initializing the MultiOutputClassifier with LinearDiscriminantAnalysis\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+\n+    # Testing to ensure no errors are raised when using cross_val_predict with method='predict_proba'\n+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')\n+    \n+    # Verify the prediction probabilities' format and shape\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]\n+    for est_pred_proba, true_classes in zip(pred_proba, Y.T):\n+        assert est_pred_proba.shape[0] == X.shape[0]\n+        assert est_pred_proba.shape[1] == len(np.unique(true_classes))\n+\n+    # Check predictions probabilities sum to 1 for each instance and output\n+    for output_array in pred_proba:\n+        assert np.allclose(np.sum(output_array, axis=1), 1)\n     X_test = [[1.5, 2.5, 3.5], [3.5, 4.5, 5.5]]\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n-\n+import pytest\n+import numpy as np\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from numpy.testing import assert_array_equal\n+\n+def test_cross_val_predict_multioutput_predict_proba():\n+    # Generating a multilabel classification problem\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20,\n+                                          n_classes=3, n_labels=2, random_state=42)\n+    # Initializing the MultiOutputClassifier with LinearDiscriminantAnalysis\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+\n+    # Testing to ensure no errors are raised when using cross_val_predict with method='predict_proba'\n+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')\n+    \n+    # Verify the prediction probabilities' format and shape\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]\n+    for est_pred_proba, true_classes in zip(pred_proba, Y.T):\n+        assert est_pred_proba.shape[0] == X.shape[0]\n+        assert est_pred_proba.shape[1] == len(np.unique(true_classes))\n+\n+    # Check predictions probabilities sum to 1 for each instance and output\n+    for output_array in pred_proba:\n+        assert np.allclose(np.sum(output_array, axis=1), 1)\n \n # Import the data\n iris = datasets.load_iris()\n@@ -520,7 +601,34 @@ def test_base_chain_crossval_fit_and_predict():\n         chain_cv.fit(X, Y)\n         Y_pred_cv = chain_cv.predict(X)\n         Y_pred = chain.predict(X)\n-\n+import pytest\n+import numpy as np\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from numpy.testing import assert_array_equal\n+\n+def test_cross_val_predict_multioutput_predict_proba():\n+    # Generating a multilabel classification problem\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20,\n+                                          n_classes=3, n_labels=2, random_state=42)\n+    # Initializing the MultiOutputClassifier with LinearDiscriminantAnalysis\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+\n+    # Testing to ensure no errors are raised when using cross_val_predict with method='predict_proba'\n+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')\n+    \n+    # Verify the prediction probabilities' format and shape\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]\n+    for est_pred_proba, true_classes in zip(pred_proba, Y.T):\n+        assert est_pred_proba.shape[0] == X.shape[0]\n+        assert est_pred_proba.shape[1] == len(np.unique(true_classes))\n+\n+    # Check predictions probabilities sum to 1 for each instance and output\n+    for output_array in pred_proba:\n+        assert np.allclose(np.sum(output_array, axis=1), 1)\n         assert Y_pred_cv.shape == Y_pred.shape\n         assert not np.all(Y_pred == Y_pred_cv)\n         if isinstance(chain, ClassifierChain):\n",
  "sphinx-doc__sphinx-9658": "",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..7a45736 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,8 +347,25 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n-\n-def test_issue_9983():\n+def test_issue_13546():\n+    from sympy import Product, Symbol, S\n+    n = Symbol('n', integer=True, positive=True)\n+    k = Symbol('k', integer=True, positive=True)\n+    \n+    # Check for n=2\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    \n+    # Additional test cases to cover other scenarios:\n+    \n+    # Check for n=1\n+    assert Product(n + 1 / 2**k, (k, 0, n-1)).doit().subs(n, 1).doit() == S(3)\n+    \n+    # Check for n=3\n+    assert Product(n + 1 / 2**k, (k, 0, n-1)).doit().subs(n, 3).doit() == S(203)/8\n+    \n+    # Check for n=4\n+    assert Product(n + 1 / 2**k, (k, 0, n-1)).doit().subs(n, 4).doit() == S(1203)/16\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n     assert p.is_convergent() is S.false\n@@ -357,4 +374,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}