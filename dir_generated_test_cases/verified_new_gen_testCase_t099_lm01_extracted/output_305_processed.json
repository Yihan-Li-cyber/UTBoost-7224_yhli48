{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..5b512d5 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,6 +55,39 @@ compound_models = {\n             )\n }\n \n+def test_nested_compound_model_separability():\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+\n+    # Create a simple compound model\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+\n+    # Verify separability matrix for a simple compound model\n+    expected_simple_matrix = np.array([[True, False],\n+                                       [False, True]])\n+    assert_allclose(separability_matrix(cm), expected_simple_matrix)\n+\n+    # Create a more complex compound model\n+    complex_model = m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)\n+\n+    # Verify separability matrix for a more complex compound model\n+    expected_complex_matrix = np.array([[True, True, False, False],\n+                                        [True, True, False, False],\n+                                        [False, False, True, False],\n+                                        [False, False, False, True]])\n+    assert_allclose(separability_matrix(complex_model), expected_complex_matrix)\n+\n+    # Test for the nested compound model\n+    nested_model = m.Pix2Sky_TAN() & cm\n+\n+    # The expected separability matrix for the nested compound model\n+    expected_nested_matrix = np.array([[True, True, False, False],\n+                                       [True, True, False, False],\n+                                       [False, False, True, False],\n+                                       [False, False, False, True]])\n+    \n+    assert_allclose(separability_matrix(nested_model), expected_nested_matrix)\n+\n \n def test_coord_matrix():\n     c = _coord_matrix(p2, 'left', 2)\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..848a5a7 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,16 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import (\n+    BinTableHDU,\n+    HDUList,\n+    ImageHDU,\n+    PrimaryHDU,\n+    connect,\n+    table_to_hdu,\n+)\n+from astropy.io.registry import identify_format\n+from astropy.table import Table\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..1d8f50a 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,6 +137,40 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n+    def test_varied_precision_floating_point_card(self):\n+        \"\"\"Test Card with a variety of floating point precisions\"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+\n+        # Test with a typical float\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with a float that can cause precision issues\n+        c = fits.Card(k, 0.009124999999999999, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with a large float value\n+        c = fits.Card(k, 1.234e+30, com)\n+        expected_str = f\"{k} = 1.234E+30 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with a very small float value\n+        c = fits.Card(k, 1.234e-30, com)\n+        expected_str = f\"{k} = 1.234E-30 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Backward compatibility scenarios\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..1d057bf 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,7 +601,23 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_fitsdiff_identical_vla():\n+        \"\"\"\n+        Test `io.fits.FITSDiff` on files with VLAs to ensure no false positives in diff.\n+        \"\"\"\n+\n+        # Create a file with a VLA column\n+        col = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        hdu.writeto('test_vla_identical_1.fits', overwrite=True)\n+\n+        # Compare the file to itself\n+        diff = fits.FITSDiff('test_vla_identical_1.fits', 'test_vla_identical_1.fits')\n+        assert diff.identical, \"FITSDiff reported a difference for a file compared to itself with VLA\"\n+\n+        # Clean up the test file\n+        import os\n+        os.remove('test_vla_identical_1.fits')\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..6d50bcc 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,20 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings_properties():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def foo(self):\n+            \"This is foo\"\n+            return 10\n+\n+    class Subclass(Base):\n+        @property\n+        def foo(self):\n+            return 42\n \n-def test_set_locale():\n+    if Base.foo.__doc__ is not None:\n+        assert Subclass.foo.__doc__ == \"This is foo\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..7dab4dd 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -172,6 +172,10 @@ def test_multiple_solidus():\n         u.Unit(\"m/s/kg\", format=\"vounit\")\n \n \n+import astropy.units as u\n+import pytest\n+from pytest import raises, warns\n+\n def test_unknown_unit3():\n     unit = u.Unit(\"FOO\", parse_strict='silent')\n     assert isinstance(unit, u.UnrecognizedUnit)\n@@ -197,6 +201,22 @@ def test_unknown_unit3():\n     with pytest.raises(TypeError):\n         unit5 = u.Unit(None)\n \n+def test_unrecognized_unit_equality_with_none():\n+    unit = u.Unit(\"asdf\", parse_strict='silent')\n+    # Check the unit is an UnrecognizedUnit\n+    assert isinstance(unit, u.UnrecognizedUnit)\n+    \n+    # Test equality comparison with None should not raise TypeError and returns False\n+    assert unit != None  # noqa\n+    assert not unit == None  # noqa\n+\n+    # Test 'in' operations\n+    assert unit not in (None, u.m)\n+\n+    # Test more comparisons for robustness\n+    assert not None == unit\n+    assert (None != unit) is True\n+\n \n @raises(TypeError)\n def test_invalid_scale():\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..bc36e5d 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -68,8 +68,16 @@ def test_minversion():\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n-    bad_versions = ['1', '1.2rc1']\n+    bad_versions = ['1', '1.2rc1', '1.14dev']\n+\n+    # Additional test cases to cover the issue reported with '1.14dev'\n+    newer_versions = ['1.14.3', '1.15']\n+    problematic_versions = ['1.14dev']\n+    for version in good_versions + problematic_versions:\n+        assert minversion(test_module, version)\n+    for version in bad_versions + newer_versions:\n+        assert not minversion(test_module, version)\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..ab9e571 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -32,7 +32,12 @@ except ImportError:\n     HAS_MATPLOTLIB = False\n \n \n-\"\"\" The Quantity class will represent a number + unit + uncertainty \"\"\"\n+import numpy as np\n+import astropy.units as u\n+import pytest\n+import decimal\n+from astropy.utils.exceptions import AstropyWarning\n+from warnings import catch_warnings\n \n \n class TestQuantityCreation:\n@@ -138,11 +143,21 @@ class TestQuantityCreation:\n         assert q2.value == float(q1.value)\n         assert q2.unit == q1.unit\n \n-        # but we should preserve float32\n+        # But we should preserve all float dtypes, including float32 and float64\n+        a3_32 = np.array([1., 2.], dtype=np.float32)\n+        q3_32 = u.Quantity(a3_32, u.yr)\n+        assert q3_32.dtype == a3_32.dtype\n+\n+        a3_64 = np.array([1., 2.], dtype=np.float64)\n+        q3_64 = u.Quantity(a3_64, u.yr)\n+        assert q3_64.dtype == a3_64.dtype\n         a3 = np.array([1., 2.], dtype=np.float32)\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n-        # items stored as objects by numpy should be converted to float\n+        # Test preservation of np.float16 dtype\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n         # by default\n         q4 = u.Quantity(decimal.Decimal('10.25'), u.m)\n         assert q4.dtype == float\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..1451437 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -25,7 +25,8 @@ except ImportError:\n else:\n     PILLOW_IS_INSTALLED = True\n \n-NOW = datetime.now()\n+from django.core.validators import URLValidator\n+from django.core.exceptions import ValidationError\n EXTENDED_SCHEMES = ['http', 'https', 'ftp', 'ftps', 'git', 'file', 'git+ssh']\n \n TEST_DATA = [\n@@ -225,7 +226,19 @@ TEST_DATA = [\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n \n-    (BaseValidator(True), True, None),\n+    # Invalid URL test cases for the updated URLValidator logic\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n+    # Edge case: encoded characters should be valid\n+    (URLValidator(), 'http://foo%40bar@example.com', None),\n+    (URLValidator(), 'http://foo:bar%40example.net@example.com', None),\n+    (URLValidator(), 'http://foo%3Abar:password@example.com', ValidationError),  # Password includes unencoded ':'\n+    (URLValidator(), 'http://foo:b%40r@example.com', None),  # Encoded '@' in the password\n     (BaseValidator(True), False, ValidationError),\n \n     (RegexValidator(), '', None),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..c866061 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n import re\n from decimal import Decimal\n \n from django.core.exceptions import FieldError\n+from django.db.models.expressions import Case, When\n from django.db import connection\n from django.db.models import (\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n@@ -389,7 +391,28 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_count_distinct_case_expression(self):\n+        # Test a count with a distinct parameter and a conditional case\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        # We expect the count of distinct ratings for books with more than 300 pages\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_case_expression_with_multiple_conditions(self):\n+        # Test a count with distinct parameter and complex conditional cases\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(\n+                Case(\n+                    When(pages__gt=300, then='rating'),\n+                    When(price__gt=30, then='rating'),\n+                    default=None\n+                ), \n+                distinct=True\n+            ),\n+        )\n+        # We expect the count of distinct ratings for books matching any of the conditions\n+        self.assertEqual(aggs['distinct_ratings'], 5)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..b498e56 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1093,6 +1093,15 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        The default FILE_UPLOAD_PERMISSIONS setting should be reflected in\n+        the file_permissions_mode attribute of\n+        django.core.files.storage.default_storage.\n+        \"\"\"\n+        # Check if the default is correctly set to 0o644\n+        self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n     def test_override_file_upload_permissions(self):\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..66c70ee 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,9 +1,11 @@\n+\n import os\n import signal\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n from django.test import SimpleTestCase\n+import subprocess\n \n \n class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n@@ -29,7 +31,49 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n-    def test_basic(self):\n+    def test_subprocess_run_with_password(self):\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'password': 'somepassword',\n+            'host': 'somehost',\n+            'port': '444',\n+        }\n+\n+        def _mock_subprocess_run(args, env=None, **kwargs):\n+            self.subprocess_args = args\n+            self.pgpassword = env.get('PGPASSWORD') if env else None\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            args, pgpassword = DatabaseClient.runshell_db(dbinfo)\n+        \n+        expected_args = ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname']\n+        expected_pgpassword = 'somepassword'\n+        \n+        self.assertEqual(args, expected_args)\n+        self.assertEqual(pgpassword, expected_pgpassword)\n+\n+    def test_subprocess_run_without_password(self):\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'host': 'somehost',\n+            'port': '444',\n+        }\n+\n+        def _mock_subprocess_run(args, env=None, **kwargs):\n+            self.subprocess_args = args\n+            self.pgpassword = env.get('PGPASSWORD', None)\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            args, pgpassword = DatabaseClient.runshell_db(dbinfo)\n+        \n+        expected_args = ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname']\n+        \n+        self.assertEqual(args, expected_args)\n+        self.assertIsNone(pgpassword)\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +157,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..509b489 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -5,6 +5,7 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n+from django.contrib.contenttypes.models import ContentType\n \n \n @override_settings(\n@@ -47,7 +48,16 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_missing_content_type_rename_ignore(self):\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n@@ -63,4 +73,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..1c215f5 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,64 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inlines_with_no_request_attribute(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = [AlternateInline, MediaInline]\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        # Mock request without 'name' attribute\n+        request = type('Request', (object,), {})()  \n+        ma = EpisodeAdmin(Episode, self.site)\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+    def test_get_inlines_with_different_request_names(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = [AlternateInline, MediaInline]\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        request = type('Request', (object,), {})()\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+\n+        # Test for 'alternate'\n+        request.name = 'alternate'\n+        self.assertEqual(ma.get_inlines(request, None), [AlternateInline])\n+        inline_instances = ma.get_inline_instances(request)\n+        self.assertEqual(len(inline_instances), 1)\n+        self.assertIsInstance(inline_instances[0], AlternateInline)\n+\n+        # Test for 'media'\n+        request.name = 'media'\n+        self.assertEqual(ma.get_inlines(request, None), [MediaInline])\n+        inline_instances = ma.get_inline_instances(request)\n+        self.assertEqual(len(inline_instances), 1)\n+        self.assertIsInstance(inline_instances[0], MediaInline)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..175802b 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -224,7 +224,21 @@ class NumericPasswordValidatorTest(SimpleTestCase):\n         self.assertEqual(cm.exception.messages, [expected_error])\n         self.assertEqual(cm.exception.error_list[0].code, 'password_entirely_numeric')\n \n-    def test_help_text(self):\n+    def test_newline_in_username(self):\n+        # Ensure that usernames with trailing newlines are considered invalid\n+        invalid_usernames = [\n+            'trailingnewline\\n',\n+            'anothertrailingnewline\\r\\n',\n+            'newline\\u000A',\n+        ]\n+        v_unicode = validators.UnicodeUsernameValidator()\n+        v_ascii = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v_unicode(invalid)\n+                with self.assertRaises(ValidationError):\n+                    v_ascii(invalid)\n         self.assertEqual(\n             NumericPasswordValidator().get_help_text(),\n             \"Your password can't be entirely numeric.\"\n@@ -258,4 +272,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..c8e44b6 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -15,7 +15,19 @@ class RenderToStringTest(SimpleTestCase):\n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n-    def test_basic_context(self):\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n         self.assertEqual(\n             self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n             'obj:test\\n',\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..110e06e 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,6 +413,10 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_lazy_content(self):\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..09d1946 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -501,6 +501,17 @@ class LoaderTests(TestCase):\n         self.assertEqual(plan, expected_plan)\n \n     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_private'})\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n     def test_ignore_files(self):\n         \"\"\"Files prefixed with underscore, tilde, or dot aren't loaded.\"\"\"\n         loader = MigrationLoader(connection)\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..e762858 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -773,36 +773,42 @@ class TestInlinePermissions(TestCase):\n         )\n         self.assertContains(response, 'id=\"id_inner2_set-0-DELETE\"')\n \n-    def test_inline_change_fk_all_perms(self):\n-        permission = Permission.objects.get(codename='add_inner2', content_type=self.inner_ct)\n-        self.user.user_permissions.add(permission)\n-        permission = Permission.objects.get(codename='change_inner2', content_type=self.inner_ct)\n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n-        permission = Permission.objects.get(codename='delete_inner2', content_type=self.inner_ct)\n-        self.user.user_permissions.add(permission)\n-        response = self.client.get(self.holder_change_url)\n-        # All perms on inner2s, so we can add/change/delete\n-        self.assertContains(response, '<h2>Inner2s</h2>', count=2)\n-        # One form for existing instance only, three for new\n-        self.assertContains(\n-            response,\n-            '<input type=\"hidden\" id=\"id_inner2_set-TOTAL_FORMS\" value=\"4\" name=\"inner2_set-TOTAL_FORMS\">',\n-            html=True\n-        )\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # View-only inlines.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n         self.assertContains(\n             response,\n-            '<input type=\"hidden\" id=\"id_inner2_set-0-id\" value=\"%i\" name=\"inner2_set-0-id\">' % self.inner2.id,\n-            html=True\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n         )\n-        self.assertContains(response, 'id=\"id_inner2_set-0-DELETE\"')\n-        # TabularInline\n-        self.assertContains(response, '<th class=\"column-dummy required\">Dummy</th>', html=True)\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines.\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n         self.assertContains(\n             response,\n-            '<input type=\"number\" name=\"inner2_set-2-0-dummy\" value=\"%s\" '\n-            'class=\"vIntegerField\" id=\"id_inner2_set-2-0-dummy\">' % self.inner2.dummy,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n             html=True,\n         )\n+        self.assertContains(response, '<p>%s</p>' % Author.books.through.objects.first().book)\n+        self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n \n \n @override_settings(ROOT_URLCONF='admin_inlines.urls')\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..4e6ba45 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,18 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_model_to_dict_empty_fields(self):\n+        # Create an instance of BetterWriter\n+        bw = BetterWriter.objects.create(name='Test User', score=5)\n+        \n+        # Test with empty fields list\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n+        # Test with specific fields\n+        self.assertEqual(model_to_dict(bw, fields=['name', 'score']), {'name': 'Test User', 'score': 5})\n+\n+        # Test with exclude to ensure that it still works as expected\n+        self.assertEqual(sorted(model_to_dict(bw, exclude=['name'])), ['id', 'score', 'writer_ptr'])\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..ddec981 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,4 +1,6 @@\n+\n from math import ceil\n+from django.db.models.deletion import Collector\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n@@ -464,7 +466,25 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        u = User.objects.create()\n+        # User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_instance_clears_pk_with_dependents(self):\n+        a = Avatar.objects.create(desc='a')\n+        u = User.objects.create(avatar=a)\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_delete_instance_clears_pk_of_unsaved_instance(self):\n+        u = User()\n+        self.assertIsNone(u.pk)\n+        u.delete()\n+        self.assertIsNone(u.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..3481929 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,11 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # Test case verifying the fix for small decimals rendered in exponential notation\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-10', 15, '0.000000000100000'),\n+            ('0.000000000000000000001', 25, '0.0000000000000000000010000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..41b152d 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,16 @@\n+\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=20)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n",
  "django__django-11239": "",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..d78f0fa 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -82,6 +82,22 @@ class FilteredRelationTests(TestCase):\n                     (self.book4, self.author1),\n                 ], lambda x: (x, x.author_join))\n \n+    def test_with_exclude(self):\n+        # Test case from issue to verify if exclude properly works with FilteredRelation.\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n+    def test_with_exclude_invalid(self):\n+        # Test case that should raise an error according to the issue description.\n+        with self.assertRaises(FieldError):\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__state=Book.RENTED)\n+\n     def test_without_join(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..f73e088 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -27,8 +27,24 @@ class TestUtilsHtml(SimpleTestCase):\n             ('<', '&lt;'),\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n-            (\"'\", '&#39;'),\n+            (\"'\", '&#x27;'),\n         )\n+\n+    def test_html_escape_integration(self):\n+        \"\"\"\n+        Test integration with Python's html.escape to ensure it replaces Django's escape\n+        function correctly and maintains expected behavior.\n+        \"\"\"\n+        inputs_outputs = [\n+            (\"It's a test\", \"It&#x27;s a test\"),\n+            (\"<b>bold</b>\", \"&lt;b&gt;bold&lt;/b&gt;\"),\n+            (\"3 > 2\", \"3 &gt; 2\"),\n+            ('Use \"quotes\"', 'Use &quot;quotes&quot;'),\n+            (\"& symbol\", \"&amp; symbol\"),\n+        ]\n+        for text, expected in inputs_outputs:\n+            with self.subTest(text=text, expected=expected):\n+                self.assertEqual(escape(text), expected)\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n         for value, output in items:\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..a0344f9 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,6 +243,41 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n+    def test_skip_checks(self):\n+        \"\"\"\n+        Test the --skip-checks option to verify it suppresses system checks.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # (staticfiles.E001) The STATICFILES_DIRS setting is not a tuple or\n+            # list.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+    def test_skip_checks_with_checks(self):\n+        \"\"\"\n+        Test that without --skip-checks, system checks are not suppressed.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn('staticfiles.E001', err)\n+        self.assertNotIn('Set foo', out)\n+\n+    def test_skip_checks_option_interaction(self):\n+        \"\"\"\n+        Test that --skip-checks does not conflict with other common options.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--verbosity', '2', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertIn('Set foo', out)\n+\n     def test_disallowed_abbreviated_options(self):\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..f4a7b8f 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -9,7 +11,39 @@ class RegexPatternTests(SimpleTestCase):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n \n \n-class RoutePatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_called_once_before_and_after_set_urlconf(self):\n+        # Simulate calling get_resolver before and after set_urlconf is called.\n+        # Before set_urlconf is called\n+        resolver_before = get_resolver()\n+        \n+        # Mock the situation where set_urlconf would typically be called in a request lifecycle\n+        from django.urls import set_urlconf\n+        set_urlconf('urlpatterns.path_urls')\n+        \n+        # After set_urlconf is called\n+        resolver_after = get_resolver()\n+        \n+        # Even with set_urlconf called, the resolver should still be the same cached instance\n+        self.assertIs(resolver_before, resolver_after)\n+\n+    @override_settings(ROOT_URLCONF=None)\n+    def test_resolver_with_none_root_urlconf(self):\n+        # When ROOT_URLCONF is None and `get_resolver` is called with None,\n+        # it should not raise an error and should not create multiple resolvers unintentionally.\n+        resolver_none = get_resolver(None)\n+        resolver_default = get_resolver()\n+        # Both should be the same because the default is to fall back on settings.ROOT_URLCONF, which is None here.\n+        self.assertIs(resolver_none, resolver_default)\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..ab6fc66 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -226,8 +226,26 @@ class BaseModelBackendTest:\n         authenticate(username='no_such_user', password='test')\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n+from django.test import TestCase, override_settings\n+from django.contrib.auth import authenticate, get_user_model\n+from auth_tests.test_auth_backends import CountingMD5PasswordHasher\n+\n+User = get_user_model()\n \n class ModelBackendTest(BaseModelBackendTest, TestCase):\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_without_credentials(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        for credentials in (\n+            {},\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},\n+            {'password': 'test'},\n+        ):\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n     \"\"\"\n",
  "django__django-11490": "",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..f54fe4f 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -360,7 +360,23 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         msg.attach('example.txt', 'Text file content', 'text/plain')\n         self.assertIn(html_content, msg.message().as_string())\n \n-    def test_none_body(self):\n+    @mock.patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email_message_id(self, mocked_getfqdn):\n+        \"\"\"Test creating a Message-ID with a non-ASCII domain.\"\"\"\n+        delattr(mail.message.DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@xn--p8s937b>', message['Message-ID'])\n+\n+    @mock.patch('socket.getfqdn', return_value='\u6b63\u5b97')\n+    def test_non_ascii_dns_longer_domain(self, mocked_getfqdn):\n+        \"\"\"Test with another non-ASCII domain, for variety.\"\"\"\n+        delattr(mail.message.DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@xn--6qq79v>', message['Message-ID'])\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..6ccb698 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,3 +1,4 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n@@ -6,7 +7,7 @@ from django.core.checks import Error\n from django.db.models import F\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n-from django.test import SimpleTestCase\n+from django.db.models import Field, Model\n \n from .models import (\n     Band, Song, User, ValidationTestInlineModel, ValidationTestModel,\n@@ -498,16 +499,24 @@ class ListDisplayTests(CheckTestCase):\n             'admin.E109'\n         )\n \n-    def test_valid_case(self):\n-        def a_callable(obj):\n-            pass\n+    def test_valid_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n \n         class TestModelAdmin(ModelAdmin):\n-            def a_method(self, obj):\n-                pass\n-            list_display = ('name', 'decade_published_in', 'a_method', a_callable)\n+            list_display = ('field',)\n \n-        self.assertIsValid(TestModelAdmin, ValidationTestModel)\n+        self.assertIsValid(TestModelAdmin, TestModel)\n \n \n class ListDisplayLinksCheckTests(CheckTestCase):\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..dbc3c98 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -6,6 +6,8 @@ from django.db.models import (\n     CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n from django.db.models.functions import Upper\n+from django.db.models import ExpressionWrapper, BooleanField\n+from datetime import datetime\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n@@ -462,7 +464,51 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_parent_model_with_expression_in_ordering(self):\n+        # Create test instances for ChildArticle\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(\n+            headline='h1',\n+            pub_date=datetime(2005, 7, 28),\n+            author=None\n+        )\n+\n+        # Verifies ordering by the parent model field 'article_ptr'\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+    \n+    def test_order_by_expression_in_ordering_with_nulls_first(self):\n+        # Create OrderedByFArticle items with authors, some with None\n+        oa1 = OrderedByFArticle.objects.create(\n+            headline=\"Article 1\", pub_date=datetime(2005, 7, 26), author=self.author_1\n+        )\n+        oa2 = OrderedByFArticle.objects.create(\n+            headline=\"Article 2\", pub_date=datetime(2005, 7, 27), author=None\n+        )\n+        oa3 = OrderedByFArticle.objects.create(\n+            headline=\"Article 3\", pub_date=datetime(2005, 7, 27), author=self.author_2\n+        )\n+\n+        # Order by author and 'id', with authors having nulls first\n+        articles = OrderedByFArticle.objects.all()\n+        self.assertQuerysetEqual(\n+            articles, [oa2, oa1, oa3],\n+            lambda a: a.headline  # Compare by headline for simplicity\n+        )\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "",
  "django__django-11740": "",
  "django__django-11749": "",
  "django__django-11790": "",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..ac43c82 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -247,7 +247,21 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n \n-    def test_serialize_lazy_objects(self):\n+    def test_serialize_enum_name_used_in_default(self):\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        # Verify serializer uses enum name instead of enum value.\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.value, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('Good', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('Bad', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..292852b 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n from datetime import datetime\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,9 +318,31 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Simulated 'current' datetime setups for the tests\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+\n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..0c0590b 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,53 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+import copy\n+from django.forms import Form, CharField\n+from django.test import SimpleTestCase\n+\n+class FormFieldsDeepCopyTests(SimpleTestCase):\n+\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_deep_copy_modification_does_not_affect_original(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        # Modify the copy's error messages\n+        field_copy.error_messages['invalid'] = 'Modified error message.'\n+\n+        # Original error message should remain unchanged\n+        self.assertEqual(field.error_messages['invalid'], 'Form custom error message.')\n+        self.assertNotEqual(field_copy.error_messages['invalid'], field.error_messages['invalid'])\n+\n+    def test_deep_copy_multiple_fields(self):\n+        class ProfileForm(Form):\n+            name = CharField(error_messages={'required': 'Name is required.'})\n+            email = CharField(error_messages={'required': 'Email is required.'})\n+\n+        form = ProfileForm()\n+        form_copy = copy.deepcopy(form)\n+\n+        # Change error message in copy\n+        form_copy.fields['name'].error_messages['required'] = 'Modified name required message.'\n+        form_copy.fields['email'].error_messages['required'] = 'Modified email required message.'\n+\n+        # Ensure original form's messages remain unchanged\n+        self.assertEqual(form.fields['name'].error_messages['required'], 'Name is required.')\n+        self.assertEqual(form.fields['email'].error_messages['required'], 'Email is required.')\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..f12b9fd 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n@@ -206,6 +208,25 @@ class BulkCreateTests(TestCase):\n         self.assertEqual(NoFields.objects.count(), 2)\n \n     @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_calculated_max_batch_size(self):\n+        objs = [Country(name='Country %d' % i) for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        \n+        # If batch_size is set larger than the max_batch_size, it should use max_batch_size.\n+        larger_batch_size = max_batch_size + 10\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=larger_batch_size)\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_bulk_create_without_explicit_batch_size(self):\n+        objs = [Country(name='Country %d' % i) for i in range(999)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+\n+        # When no batch_size is provided, max_batch_size should be used.\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs)\n     def test_explicit_batch_size_efficiency(self):\n         objs = [TwoFields(f1=i, f2=i) for i in range(0, 100)]\n         with self.assertNumQueries(2):\n@@ -215,6 +236,25 @@ class BulkCreateTests(TestCase):\n             TwoFields.objects.bulk_create(objs, len(objs))\n \n     @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_calculated_max_batch_size(self):\n+        objs = [Country(name='Country %d' % i) for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        \n+        # If batch_size is set larger than the max_batch_size, it should use max_batch_size.\n+        larger_batch_size = max_batch_size + 10\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=larger_batch_size)\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_bulk_create_without_explicit_batch_size(self):\n+        objs = [Country(name='Country %d' % i) for i in range(999)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+\n+        # When no batch_size is provided, max_batch_size should be used.\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs)\n     def test_bulk_insert_expressions(self):\n         Restaurant.objects.bulk_create([\n             Restaurant(name=\"Sam's Shake Shack\"),\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..19cf890 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -32,6 +32,9 @@ class Vehicle(models.IntegerChoices):\n     __empty__ = _('(Unknown)')\n \n \n+from django.test import TestCase\n+from django.utils.translation import gettext_lazy as _\n+\n class Gender(models.TextChoices):\n     MALE = 'M'\n     FEMALE = 'F'\n@@ -39,8 +42,26 @@ class Gender(models.TextChoices):\n \n     __empty__ = '(Undeclared)'\n \n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class EnumTest(TestCase):\n+    def setUp(self) -> None:\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n \n-class ChoicesTests(SimpleTestCase):\n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..3fc7200 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -168,7 +168,24 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertIsInstance(val, str)\n         self.assertEqual(val, 'translated')\n \n-    def test_iterator_choices(self):\n+class OverrideGetFieldDisplayTests(TestCase):\n+\n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_unaffected_get_FIELD_display(self):\n+        class UnaffectedModel(models.Model):\n+            status = models.CharField(max_length=10, choices=[('A', 'Active'), ('I', 'Inactive')])\n+\n+        u = UnaffectedModel(status='A')\n+        self.assertEqual(u.get_status_display(), 'Active')\n         \"\"\"\n         get_choices() works with Iterators.\n         \"\"\"\n",
  "django__django-12039": "",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..cf5fe50 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -8,6 +9,9 @@ from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n from django.db.models.sql.where import OR\n+from django.db.models.sql.query import Query\n+from django.db.models.lookups import Exact\n+from .models import Item\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n \n@@ -15,7 +19,25 @@ from .models import Author, Item, ObjectC, Ranking\n \n \n class TestQuery(SimpleTestCase):\n-    def test_simple_query(self):\n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+\n+    def test_tuple_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('c', 'd')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('c', 'd'))\n+\n+    def test_list_conversion_inexact(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name__contains=['e', 'f']))\n+        name_contains = where.children[0]\n+        self.assertNotIsInstance(name_contains.rhs, tuple)  # Ensure it's not coerced to tuple\n         query = Query(Author)\n         where = query.build_where(Q(num__gt=2))\n         lookup = where.children[0]\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..39f17e4 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -187,8 +187,29 @@ class WriterTests(SimpleTestCase):\n     class NestedEnum(enum.IntEnum):\n         A = 1\n         B = 2\n+    \n+    class Outer:\n+        class InnerField(models.CharField):\n+            pass\n \n-    def safe_exec(self, string, value=None):\n+    def test_inner_class_serialization(self):\n+        \"\"\"\n+        Test serialization of a Django model using a field defined in an inner class.\n+        \"\"\"\n+        class TestModel(models.Model):\n+            field = self.Outer.InnerField(max_length=20)\n+\n+        field_instance = TestModel._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field_instance)\n+        expected = (\n+            \"django.db.models.CharField(max_length=20)\",\n+            {'from django.db import models'}\n+        )\n+        self.assertEqual((string, imports), expected)\n+\n+        # Run through actual migration writer to verify the entire class path is used\n+        migration_string = MigrationWriter.serialize(field_instance)[0]\n+        self.assertIn(\"migrations.test_writer.WriterTests.Outer.InnerField\", migration_string)\n         d = {}\n         try:\n             exec(string, globals(), d)\n@@ -746,4 +767,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..663715b 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -843,9 +843,59 @@ class ChangeListTests(TestCase):\n         request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 2)\n+    def test_get_list_editable_queryset_with_various_regex_chars_in_prefix(self):\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form$-TOTAL_FORMS': '2',\n+            'form$-INITIAL_FORMS': '2',\n+            'form$-MIN_NUM_FORMS': '0',\n+            'form$-MAX_NUM_FORMS': '1000',\n+            'form$-0-uuid': str(a.pk),\n+            'form$-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form$')\n+        self.assertEqual(queryset.count(), 1)\n \n-    def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n-        \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n+        # Test with different regex special characters in prefix\n+        data.update({\n+            'form.*-0-uuid': str(a.pk),\n+            'form.*-0-load': '20',\n+        })\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form.*')\n+        self.assertEqual(queryset.count(), 1)\n+        \n+        data.update({\n+            'form(?)-0-uuid': str(a.pk),\n+            'form(?)-0-load': '30',\n+        })\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form(?)')\n+        self.assertEqual(queryset.count(), 1)\n+\n+        data.update({\n+            'form[]-0-uuid': str(a.pk),\n+            'form[]-0-load': '40',\n+        })\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form[]')\n+        self.assertEqual(queryset.count(), 1)\n+\n+        # Even with invalid characters in prefix, the queryset should be safely evaluated\n+        data.update({\n+            'form\\\\-0-uuid': str(a.pk),\n+            'form\\\\-0-load': '50',\n+        })\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form\\\\')\n+        self.assertEqual(queryset.count(), 1)\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n         Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n         data = {\n",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..d7cd508 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,6 +1103,18 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n+    def test_split_arraywidget_with_booleanfield(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        \n+        # Provide data with a mix of True and False\n+        context = widget.get_context('name', [False, True, False, True])\n+        \n+        # Verify each subwidget's 'checked' attribute corresponds correctly\n+        expected_attrs = [{'checked': False}, {'checked': True}, {'checked': False}, {'checked': True}]\n+        actual_attrs = [subwidget['attrs'] for subwidget in context['widget']['subwidgets']]\n+        \n+        self.assertEqual(actual_attrs, expected_attrs)\n+\n     def test_render(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..291b65d 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -253,6 +253,13 @@ class SmallPKData(models.Model):\n #    data = models.TimeField(primary_key=True)\n \n \n+import uuid\n+from django.db import models\n+\n+class Sample(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4)\n+    name = models.CharField(blank=True, max_length=100)\n+\n class UUIDData(models.Model):\n     data = models.UUIDField(primary_key=True)\n \n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..1fc463f 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -111,7 +111,29 @@ class SimpleTagTests(TagTestCase):\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(\"%s as var %%}\" % entry[1][0:-2])\n \n-    def test_simple_tag_escaping_autoescape_off(self):\n+    def test_keyword_only_arguments_with_defaults(self):\n+        tests = [\n+            # Test custom simple_tag with keyword-only argument having a default value\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}', \n+                'simple_keyword_only_default - Expected result: 37'),\n+            # Test keyword-only argument not provided, uses default value\n+            ('{% load custom %}{% simple_keyword_only_default %}', \n+                'simple_keyword_only_default - Expected result: 42'),\n+            # Duplicate keyword argument should raise TemplateSyntaxError\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n+            # Another variant with simple_tag\n+            (\"'simple_keyword_only_param' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_param kwarg=42 kwarg=37 %}'),\n+        ]\n+\n+        for entry in tests:\n+            if isinstance(entry, tuple) and len(entry) == 2:  # Successful render\n+                t = self.engine.from_string(entry[0])\n+                self.assertEqual(t.render(Context()), entry[1])\n+            else:  # Expected errors\n+                with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                    self.engine.from_string(entry[1])\n         c = Context({'name': \"Jack & Jill\"}, autoescape=False)\n         t = self.engine.from_string(\"{% load custom %}{% escape_naive %}\")\n         self.assertEqual(t.render(c), \"Hello Jack & Jill!\")\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..db6b742 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2478,6 +2479,24 @@ Password: <input type=\"password\" name=\"password\" required>\n             '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n         )\n \n+    def test_filefield_with_fileinput_required(self):\n+        class FileForm(Form):\n+            file1 = FileField(widget=FileInput)\n+\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+        # A required file field with initial data doesn't contain the required\n+        # HTML attribute. The file input is left blank by the user to keep the\n+        # existing, initial value.\n+        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n     def test_filefield_initial_callable(self):\n         class FileForm(forms.Form):\n             file1 = forms.FileField(initial=lambda: 'resume.txt')\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..5be94a7 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -5,6 +6,7 @@ import uuid\n \n from django.db import models\n from django.test import SimpleTestCase\n+from django.template import Context, Template\n from django.utils.functional import Promise\n from django.utils.translation import gettext_lazy as _\n \n@@ -137,11 +139,26 @@ class ChoicesTests(SimpleTestCase):\n                 # A string is not permitted as the second argument to int().\n                 ONE = 1, 'X', 'Invalid'\n \n-        msg = \"duplicate values found in <enum 'Fruit'>: PINEAPPLE -> APPLE\"\n-        with self.assertRaisesMessage(ValueError, msg):\n-            class Fruit(models.IntegerChoices):\n-                APPLE = 1, 'Apple'\n-                PINEAPPLE = 1, 'Pineapple'\n+    def test_enum_in_template(self):\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}Freshman{% endif %}')\n+        context = Context({\n+            'student': type('Student', (object,), {'year_in_school': YearInSchool.FRESHMAN}),\n+            'YearInSchool': YearInSchool\n+        })\n+        output = template.render(context)\n+        self.assertEqual(output, 'Freshman')\n+\n+    def test_enum_label_in_template(self):\n+        template = Template('{{ Suit.DIAMOND.label }}|{{ Suit.SPADE.label }}')\n+        context = Context({'Suit': Suit})\n+        output = template.render(context)\n+        self.assertEqual(output, 'Diamond|Spade')\n+\n+    def test_enum_value_in_template(self):\n+        template = Template('{{ Suit.DIAMOND.value }}|{{ Suit.SPADE.value }}')\n+        context = Context({'Suit': Suit})\n+        output = template.render(context)\n+        self.assertEqual(output, '1|2')\n \n     def test_str(self):\n         for test in [Gender, Suit, YearInSchool, Vehicle]:\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..ffd4f82 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -174,6 +174,23 @@ class UtilsTests(SimpleTestCase):\n         self.assertEqual(display_value, self.empty_value)\n \n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n+\n+    def test_json_display_for_field(self):\n+        \"\"\"\n+        Test display_for_field properly formats the JSONField data as valid JSON string\n+        when the field is read-only.\n+        \"\"\"\n+        tests = [\n+            ({'foo': 'bar'}, '{\"foo\": \"bar\"}'),\n+            (['foo', 'bar'], '[\"foo\", \"bar\"]'),\n+            ('foo', '\"foo\"'),\n+            ({'nested': {'json': 'data'}}, '{\"nested\": {\"json\": \"data\"}}'),\n+            (None, self.empty_value),  # Test for None value\n+        ]\n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                display_value = display_for_field(value, models.JSONField(), self.empty_value)\n+                self.assertEqual(display_value, expected_display)\n         self.assertEqual(display_value, self.empty_value)\n \n     def test_number_formats_display_for_field(self):\n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..6ea371e 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -999,6 +999,37 @@ class OtherModelTests(SimpleTestCase):\n                 related_name='+',\n             )\n \n+    def test_onetoone_reverse_check_with_parent_link(self):\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        self.assertEqual(Picking.check(), [])\n+\n+    def test_onetoone_incorrect_order_without_parent_link(self):\n+        msg = 'Add parent_link=True to invalid_models_tests.Picking.origin.'\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            class Document(models.Model):\n+                pass\n+\n+            class Picking(Document):\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+        \n+    def test_multiple_onetoone_with_correct_parent_link(self):\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            source_document = models.OneToOneField(Document, related_name='source_picking', on_delete=models.PROTECT)\n+        \n+        self.assertEqual(Picking.check(), [])\n+\n         class ShippingMethodPrice(models.Model):\n             method = models.ForeignKey(ShippingMethod, models.CASCADE)\n             to_country = models.ForeignKey(Country, models.CASCADE)\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..83038bf 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -247,6 +247,14 @@ class SecurityMiddlewareTest(SimpleTestCase):\n             with self.subTest(value=value), override_settings(SECURE_REFERRER_POLICY=value):\n                 self.assertEqual(self.process_response()['Referrer-Policy'], expected)\n \n+    @override_settings(SECURE_REFERRER_POLICY='same-origin')\n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        With SECURE_REFERRER_POLICY set to 'same-origin', the middleware adds a\n+        \"Referrer-Policy: same-origin\" header to the response.\n+        \"\"\"\n+        self.assertEqual(self.process_response()['Referrer-Policy'], 'same-origin')\n+\n     @override_settings(SECURE_REFERRER_POLICY='strict-origin')\n     def test_referrer_policy_already_present(self):\n         \"\"\"\n@@ -254,4 +262,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..b0a423c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -13,6 +13,27 @@ from django.db.models import (\n     Func, IntegerField, Max, Min, Model, OrderBy, OuterRef, Q, StdDev,\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n+class SimpleLazyObjectSubqueryTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.user = User.objects.create_user(\"testuser\")\n+        cls.manager = Manager.objects.create(name=\"Jordan\")\n+        cls.joe = Employee.objects.create(firstname=\"Joe\", lastname=\"Smith\", manager=cls.manager)\n+\n+    def test_simple_lazy_object_with_subquery(self):\n+        lazy_manager = SimpleLazyObject(lambda: self.manager)\n+        \n+        # Create a subquery to test annotation involving SimpleLazyObject\n+        ceo_manager = Employee.objects.filter(\n+            lastname=OuterRef('ceo__lastname')\n+        ).values('manager')\n+\n+        qs = Company.objects.annotate(\n+            ceo_manager=Subquery(ceo_manager)\n+        ).filter(ceo_manager=lazy_manager)\n+\n+        self.assertEqual(qs.count(), 0)  # as there are no matching ceo lastname with 'Joe'\n+\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n@@ -22,6 +43,8 @@ from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n+from django.contrib.auth.models import User\n+from django.utils.functional import SimpleLazyObject\n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n     Result, SimulationRun, Time,\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..2ef420e 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,7 +1759,70 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n-    @skipUnlessDBFeature('supports_table_check_constraints')\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_remove_with_unique_together_non_overlapping(self):\n+        \"\"\"\n+        Test removing index_together when unique_together has different fields\n+        or overlaps partly, to verify the operation is isolated and doesn't\n+        mistakenly remove unique constraints on unrelated fields.\n+        \"\"\"\n+        app_label = 'test_alintoremove_nonoverlapping'\n+        table_name = '%s_unicorn' % app_label\n+        project_state = self.set_up_test_model(\n+            app_label, \n+            unique_together=True, \n+            index_fields=[('length', 'width')], \n+            unique_fields=[('girth', 'height')]\n+        )\n+\n+        # Assert initial constraints\n+        self.assertUniqueConstraintExists(table_name, ['girth', 'height'])\n+        self.assertIndexExists(table_name, ['length', 'width'])\n+\n+        # Modify to remove the index together but keep unique_together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Unicorn', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Assert it correctly removes only the index constraint\n+        self.assertIndexNotExists(table_name, ['length', 'width'])\n+        self.assertUniqueConstraintExists(table_name, ['girth', 'height'])\n+\n+    def test_alter_both_index_together_and_unique_together(self):\n+        \"\"\"\n+        Try to change both index_together and unique_together at the same time\n+        and confirm the operation succeeds for both parts independently and collectively.\n+        \"\"\"\n+        app_label = 'test_both_alterations'\n+        table_name = '%s_horsey' % app_label\n+        project_state = self.set_up_test_model(\n+            app_label,\n+            unique_together=True,\n+            index_fields=[('mane_color', 'leg_length')],\n+            unique_fields=[('eye_color', 'tail_length')]\n+        )\n+\n+        # Assert initial unique_together and index_together exist.\n+        self.assertUniqueConstraintExists(table_name, ['eye_color', 'tail_length'])\n+        self.assertIndexExists(table_name, ['mane_color', 'leg_length'])\n+\n+        # Modify both unique_together and index_together.\n+        new_state = project_state.clone()\n+        operation_1 = migrations.AlterUniqueTogether('Horsey', set())\n+        operation_2 = migrations.AlterIndexTogether('Horsey', set())\n+\n+        for operation in (operation_1, operation_2):\n+            operation.state_forwards(app_label, new_state)\n+\n+        with connection.schema_editor() as editor:\n+            for operation in (operation_1, operation_2):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Assert constraints are removed properly.\n+        self.assertIndexNotExists(table_name, ['mane_color', 'leg_length'])\n+        self.assertUniqueConstraintNotExists(table_name, ['eye_color', 'tail_length'])\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n         gt_check = models.Q(pink__gt=2)\n",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..8b80969 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,8 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n+from django.contrib import admin\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n@@ -120,8 +121,41 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n     def test_formfield_overrides(self):\n         self.assertFormfield(Event, 'start_date', forms.TextInput,\n                              formfield_overrides={DateField: {'widget': forms.TextInput}})\n+    \n+    def test_formfield_overrides_m2m_filter_widget(self):\n+        \"\"\"\n+        The autocomplete_fields, raw_id_fields, filter_vertical, and\n+        filter_horizontal widgets for ManyToManyFields may be overridden by\n+        specifying a widget in formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_vertical = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget.widget, forms.CheckboxSelectMultiple)\n+\n+    def test_formfield_no_widget_override_m2m(self):\n+        \"\"\"\n+        Tests the default behavior without overrides to ensure non-regression.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_horizontal = ['members']\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, widgets.FilteredSelectMultiple)\n \n-    def test_formfield_overrides_widget_instances(self):\n+    def test_formfield_overrides_autocomplete_m2m(self):\n+        \"\"\"\n+        Test if the autocomplete_fields overrides are correctly applied to ManyToManyFields.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            autocomplete_fields = ['members']\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, widgets.AutocompleteSelectMultiple)\n         \"\"\"\n         Widget instances in formfield_overrides are not shared between\n         different fields. (#19423)\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..1de874c 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -5,9 +5,9 @@ from operator import attrgetter\n \n from django.core.exceptions import FieldError\n from django.db import connection\n-from django.db.models import Exists, Max, OuterRef\n+from django.db.models import Exists, Max, OuterRef, Q\n from django.db.models.functions import Substr\n-from django.test import TestCase, skipUnlessDBFeature\n+from django.test import TestCase, skipUnlessDBFeature, isolate_apps\n from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import (\n@@ -194,7 +194,48 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    @isolate_apps('lookup')\n+    def test_in_bulk_unique_constraint(self):\n+        class Article(models.Model):\n+            slug = models.CharField(max_length=255)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=[\"slug\"], name=\"article_slug_unique\"),\n+                ]\n+\n+        article_1 = Article.objects.create(slug=\"unique-slug-1\")\n+        article_2 = Article.objects.create(slug=\"unique-slug-2\")\n+        result = Article.objects.in_bulk([\"unique-slug-1\", \"unique-slug-2\"], field_name=\"slug\")\n+        self.assertEqual(result, {article_1.slug: article_1, article_2.slug: article_2})\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_unique_constraint_with_condition(self):\n+        class Product(models.Model):\n+            ean = models.CharField(max_length=100)\n+            is_active = models.BooleanField(default=True)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=[\"ean\"],\n+                        name=\"active_ean_unique\",\n+                        condition=Q(is_active=True)\n+                    ),\n+                ]\n+\n+        # Create instances with conditional uniqueness\n+        product_active_1 = Product.objects.create(ean=\"ean-123\", is_active=True)\n+        product_active_2 = Product.objects.create(ean=\"ean-456\", is_active=True)\n+        product_inactive_3 = Product.objects.create(ean=\"ean-789\", is_active=False)\n+\n+        # Test in_bulk on active products\n+        result = Product.objects.in_bulk([\"ean-123\", \"ean-456\"], field_name=\"ean\")\n+        self.assertEqual(result, {product_active_1.ean: product_active_1, product_active_2.ean: product_active_2})\n+\n+        # This should raise an error as the inactive product doesn't satisfy the uniqueness constraint condition\n+        with self.assertRaises(ValueError):\n+            Product.objects.in_bulk([\"ean-789\"], field_name=\"ean\")\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..eda40ca 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -905,7 +905,38 @@ class OtherModelTests(SimpleTestCase):\n \n         self.assertEqual(Child.check(), [])\n \n-    def test_ordering_pointing_to_foreignkey_field(self):\n+    def test_ordering_using_lookups_not_transforms(self):\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        self.assertEqual(Stock.check(), [])\n+        \n+    def test_ordering_multiple_related_fields(self):\n+        class Category(models.Model):\n+            pass\n+        \n+        class Product(models.Model):\n+            category = models.ForeignKey(Category, models.CASCADE)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__category__pk',)\n+\n+        self.assertEqual(Stock.check(), [])\n         class Parent(models.Model):\n             pass\n \n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..b280c31 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,22 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+    def test_constant_with_expression_wrapper(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_expression_with_expression_wrapper(self):\n+        # Lower is an actual expression, so this should appear in GROUP BY\n+        expr = ExpressionWrapper(Lower(Value('Test')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_expression_wrapper_with_aggregate_function(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        # Assuming we simulate how GROUP BY is applied in ORM, wrapping constant in ExpressionWrapper should not add to GROUP BY\n+        self.assertEqual(expr.get_group_by_cols(alias='alias'), [])\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..2aa0f21 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1200,6 +1200,25 @@ class Queries1Tests(TestCase):\n         )\n         self.assertTrue(qs.first())\n \n+    def test_product_metadata_filter_with_filterable_field(self):\n+        # Scenario setup similar to the issue described\n+        product_metadata_type = ProductMetaDataType.objects.create(label='Brand', filterable=False)\n+        product_metadata_type_2 = ProductMetaDataType.objects.create(label='Category', filterable=True)\n+        product_metadata = ProductMetaData.objects.create(\n+            product_id=1, value=\"Dark Vador\", marketplace_id=1, metadata_type=product_metadata_type\n+        )\n+\n+        # Attempt filtering using a field with filterable=False\n+        with self.assertRaises(NotSupportedError):\n+            ProductMetaData.objects.filter(metadata_type=product_metadata_type, value=\"Dark Vador\")\n+\n+        # Verify filtering when the field is filterable\n+        try:\n+            result_set = ProductMetaData.objects.filter(metadata_type=product_metadata_type_2, value=\"Dark Vador\")\n+            self.assertTrue(result_set.exists())\n+        except NotSupportedError:\n+            self.fail(\"Filtering should be supported when filterable is True.\")\n+\n     def test_excluded_intermediary_m2m_table_joined(self):\n         self.assertSequenceEqual(\n             Note.objects.filter(~Q(tag__annotation__name=F('note'))),\n@@ -1211,6 +1230,8 @@ class Queries1Tests(TestCase):\n         )\n \n \n+from django.db import NotSupportedError\n+\n class Queries2Tests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13033": "",
  "django__django-13089": "",
  "django__django-13109": "diff --git a/tests/model_forms/models.py b/tests/model_forms/models.py\nindex ff8ad74..ee01927 100644\n--- a/tests/model_forms/models.py\n+++ b/tests/model_forms/models.py\n@@ -18,8 +18,14 @@ class Person(models.Model):\n \n class Category(models.Model):\n     name = models.CharField(max_length=20)\n-    slug = models.SlugField(max_length=20)\n-    url = models.CharField('The URL', max_length=40)\n+    archived = models.BooleanField(default=False, editable=False)\n+\n+    objects = WriterManager()\n+\n+class Article(models.Model):\n+    title = models.CharField(max_length=100)\n+    archived = models.BooleanField(default=False)\n+    objects = ArticleManager()\n \n     def __str__(self):\n         return self.name\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..62d5349 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,7 +867,30 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n-    def test_real_apps(self):\n+    def test_mixed_case_app_name_foreign_key(self):\n+        \"\"\"\n+        Test handling of ForeignKey with mixed-case app label.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class Category(models.Model):\n+            class Meta:\n+                app_label = 'DJ_RegLogin'\n+                apps = new_apps\n+\n+        class Content(models.Model):\n+            category = models.ForeignKey(Category, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'DJ_RegLogin'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+\n+        # Ensure that models are correctly loaded\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n         This test relies on the fact that contenttypes is always loaded.\n",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..2a2385f 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1616,6 +1616,14 @@ class FTimeDeltaTests(TestCase):\n             ),\n         ).filter(difference=datetime.timedelta())\n         self.assertTrue(queryset.exists())\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_wrapper(self):\n+        # This is the test for temporal subtraction without ExpressionWrapper.\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for obj in queryset:\n+            self.assertEqual(obj.delta, obj.end - obj.start)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n     def test_datetime_subtraction_microseconds(self):\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..4ee6764 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,7 @@\n import operator\n \n+from django import forms\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..9049a5e 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -34,6 +34,7 @@ from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -323,7 +324,19 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n-    def test_decode_failure_logged_to_security(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_default_hashing_algorithm_sha1(self):\n+        # Test legacy decoding scenario with DEFAULT_HASHING_ALGORITHM='sha1'.\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'a test key': 'a test value'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n+    def test_default_hashing_algorithm_default(self):\n+        # Test current decoding with current DEFAULT_HASHING_ALGORITHM.\n+        data = {'a test key': 'a test value'}\n+        encoded = self.session.encode(data)\n+        self.assertEqual(self.session.decode(encoded), data)\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n             self.assertEqual({}, self.session.decode(bad_encode))\n",
  "django__django-13297": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..1e7706d 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,7 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2829,6 +2830,63 @@ class LimitChoicesToTests(TestCase):\n             StumpJokeForm()\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_with_join_on_foreign_key(self):\n+        # Create Characters.\n+        self.threepwood = Character.objects.create(username='Threepwood', last_action='2023-01-01')\n+        self.marley = Character.objects.create(username='Marley', last_action='2023-01-01')\n+\n+        # Create StumpJokes.\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.marley)\n+        joke4 = StumpJoke.objects.create(funny=False, most_recently_fooled=self.marley)\n+\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(jokes__funny=True, jokes_today__funny=True),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(jokes__funny=True, jokes_today__funny=True),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+\n \n class FormFieldCallbackTests(SimpleTestCase):\n \n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..48c47e0 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,9 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import (\n+    Storage, callable_storage, temp_storage, temp_storage_location,\n+)\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -82,6 +84,19 @@ class FileSystemStorageTests(unittest.TestCase):\n         path, args, kwargs = storage.deconstruct()\n         self.assertEqual(kwargs, kwargs_orig)\n \n+    def test_filefield_with_callable_storage(self):\n+        \"\"\"\n+        Test that FileField with a callable storage retains its callable reference during deconstruction.\n+        \"\"\"\n+        obj = Storage()\n+\n+        # Deconstruct the field\n+        *_, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        storage = kwargs['storage']\n+\n+        # Ensure the callable is returned, not the evaluated storage\n+        self.assertIs(storage, callable_storage)\n+\n     def test_lazy_base_url_init(self):\n         \"\"\"\n         FileSystemStorage.__init__() shouldn't evaluate base_url.\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..eb1c7b6 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -631,8 +631,30 @@ class TestQuerying(TestCase):\n     def test_key_contains(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)\n+        \n+    def test_key_in(self):\n+        # Create sample objects\n+        obj1 = NullableJSONModel.objects.create(value={'key': 0})\n+        obj2 = NullableJSONModel.objects.create(value={'key': 1})\n+        obj3 = NullableJSONModel.objects.create(value={'other_key': 0})\n+\n+        # Test __in lookup\n+        in_filter = {'value__key__in': [0]}\n+        in_items = NullableJSONModel.objects.filter(**in_filter)\n+        self.assertSequenceEqual(\n+            in_items,\n+            [obj1],\n+            \"Expected objects with keys in [0] to be filtered\"\n+        )\n \n-    def test_key_icontains(self):\n+        simple_filter = {'value__key': 0}\n+        simple_items = NullableJSONModel.objects.filter(**simple_filter)\n+        \n+        self.assertSequenceEqual(\n+            simple_items,\n+            [obj1, obj3],\n+            \"Expected both objects with key = 0 to be filtered\"\n+        )\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n     def test_key_startswith(self):\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..d1a794c 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -17,6 +17,8 @@ from django.db.models.functions import (\n from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n+import pytz\n+from datetime import datetime\n from django.utils import timezone\n \n from ..models import Author, DTModel, Fan\n@@ -1111,7 +1113,43 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n             self.assertEqual(model.day_melb, 16)\n             self.assertEqual(model.day_utc, 15)\n \n-    def test_trunc_timezone_applied_before_truncation(self):\n+    def test_truncdate_with_tzinfo(self):\n+        start_datetime = datetime(2022, 1, 1, 23, 30)\n+        start_datetime = timezone.make_aware(start_datetime, is_dst=False)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        melb = pytz.timezone('Australia/Melbourne')\n+        pacific = pytz.timezone('US/Pacific')\n+\n+        queryset = DTModel.objects.annotate(\n+            melb_date=TruncDate('start_datetime', tzinfo=melb),\n+            pacific_date=TruncDate('start_datetime', tzinfo=pacific),\n+        ).get()\n+\n+        melb_datetime = start_datetime.astimezone(melb)\n+        pacific_datetime = start_datetime.astimezone(pacific)\n+\n+        self.assertEqual(queryset.melb_date, melb_datetime.date())\n+        self.assertEqual(queryset.pacific_date, pacific_datetime.date())\n+\n+    def test_trunctime_with_tzinfo(self):\n+        start_datetime = datetime(2022, 1, 1, 23, 30, 45)\n+        start_datetime = timezone.make_aware(start_datetime, is_dst=False)\n+        self.create_model(start_datetime, start_datetime)\n+\n+        melb = pytz.timezone('Australia/Melbourne')\n+        pacific = pytz.timezone('US/Pacific')\n+\n+        queryset = DTModel.objects.annotate(\n+            melb_time=TruncTime('start_datetime', tzinfo=melb),\n+            pacific_time=TruncTime('start_datetime', tzinfo=pacific),\n+        ).get()\n+\n+        melb_datetime = start_datetime.astimezone(melb)\n+        pacific_datetime = start_datetime.astimezone(pacific)\n+\n+        self.assertEqual(queryset.melb_time, melb_datetime.time())\n+        self.assertEqual(queryset.pacific_time, pacific_datetime.time())\n         start_datetime = datetime(2016, 1, 1, 1, 30, 50, 321)\n         end_datetime = datetime(2016, 6, 15, 14, 10, 50, 123)\n         start_datetime = timezone.make_aware(start_datetime, is_dst=False)\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..27d5eff 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -103,6 +103,78 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n \n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class AbstractModelFieldTests(SimpleTestCase):\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+    def test_multiple_fields_in_abstract_model(self):\n+        \"\"\"Test multiple fields from an abstract model are distinguished.\"\"\"\n+        class AbstractWithMultipleFields(models.Model):\n+            int_field = models.IntegerField()\n+            char_field = models.CharField(max_length=10)\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractWithMultiple(AbstractWithMultipleFields):\n+            pass\n+\n+        int_field_1 = InheritAbstractWithMultiple._meta.get_field('int_field')\n+        char_field_1 = InheritAbstractWithMultiple._meta.get_field('char_field')\n+\n+        self.assertNotEqual(int_field_1, char_field_1)\n+        self.assertNotEqual(hash(int_field_1), hash(char_field_1))\n+\n+    def test_ordering_of_fields_from_same_model(self):\n+        \"\"\"Verify field ordering within the same model.\"\"\"\n+        class OrderedModel(models.Model):\n+            first_field = models.IntegerField()\n+            second_field = models.CharField(max_length=10)\n+            third_field = models.BooleanField()\n+\n+            class Meta:\n+                abstract = True\n+        \n+        ordered_fields = [\n+            OrderedModel._meta.get_field(name)\n+            for name in ['first_field', 'second_field', 'third_field']\n+        ]\n+\n+        field_0, field_1, field_2 = ordered_fields\n+\n+        self.assertLess(field_0, field_1)\n+        self.assertLess(field_1, field_2)\n+\n class ChoicesTests(SimpleTestCase):\n \n     @classmethod\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..d2763d4 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -6,6 +7,7 @@ import tempfile\n import unittest\n from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n+from django.core.files import locks\n from unittest import mock\n \n from django.core.files import File\n@@ -175,6 +177,24 @@ class NoNameFileTestCase(unittest.TestCase):\n     Other examples of unnamed files may be tempfile.SpooledTemporaryFile or\n     urllib.urlopen()\n     \"\"\"\n+    def test_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as f:\n+            f.write('dummy content')  # Ensure the test file exists\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n     def test_noname_file_default_name(self):\n         self.assertIsNone(File(BytesIO(b'A file with no name')).name)\n \n",
  "django__django-13417": "",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..6a149b5 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n@@ -16,8 +17,42 @@ class MockedPasswordResetTokenGenerator(PasswordResetTokenGenerator):\n     def _now(self):\n         return self._now_val\n \n+from .with_custom_email_field import CustomEmailField\n+from django.contrib.auth.models import User\n \n class TokenGeneratorTest(TestCase):\n+    \n+    def test_token_invalid_after_email_change(self):\n+        \"\"\"Test that a password reset token becomes invalid after the user's email address is changed.\"\"\"\n+        user = User.objects.create_user('changeuser', 'initial@example.com', 'testpw')\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)  # Ensure token is initially valid\n+        \n+        # Change the user's email\n+        user.email = 'changed@example.com'\n+        user.save()\n+        \n+        # The token should now be invalid\n+        self.assertIs(p0.check_token(user, tk1), False)\n+    \n+    def test_custom_user_email_change_invalidates_token(self):\n+        \"\"\"Test that a password reset token becomes invalid when the email of a CustomEmailField user is changed.\"\"\"\n+        user = CustomEmailField.objects.create_user(\n+            username='customchangeuser', \n+            email='initialcustom@example.com', \n+            password='testpw'\n+        )\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)  # Initial check\n+        \n+        # Change email on the custom user\n+        user.email_address = 'changedcustom@example.com'\n+        user.save()\n+        \n+        # Ensure the token is now invalid\n+        self.assertIs(p0.check_token(user, tk1), False)\n \n     def test_make_token(self):\n         user = User.objects.create_user('tokentestuser', 'test2@example.com', 'testpw')\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..13dd9d3 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n@@ -9,7 +10,7 @@ from django.test import (\n )\n from django.test.utils import isolate_apps\n \n-from .models import CustomUserNonUniqueUsername\n+from django.db.models import Q, UniqueConstraint\n \n \n @isolate_apps('auth_tests', attr_name='apps')\n@@ -138,7 +139,25 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserUniqueConstraint')\n+    def test_username_unique_with_multiple_constraints(self):\n+        class UserUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_unique'),\n+                    UniqueConstraint(fields=['username', 'password'], name='username_password_unique'),\n+                ]\n+\n+        # Expect no errors because USERNAME_FIELD is guaranteed to be unique by constraints.\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..b4e86db 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -7,6 +8,7 @@ from decimal import Decimal\n from unittest import mock\n \n from django.core.exceptions import FieldError\n+from collections import namedtuple\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import (\n     AutoField, Avg, BinaryField, BooleanField, Case, CharField, Count,\n@@ -886,7 +888,37 @@ class IterableLookupInnerExpressionsTests(TestCase):\n \n     @unittest.skipUnless(connection.vendor == 'sqlite',\n                          \"This defensive test only works on databases that don't validate parameter types\")\n-    def test_complex_expressions_do_not_introduce_sql_injection_via_untrusted_string_inclusion(self):\n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['<Company: 99300 Ltd>'],\n+            ordered=False\n+        )\n+\n+    def test_range_lookup_namedtuple_single_element(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minmax'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minmax=(51, 100)),\n+        )\n+        self.assertQuerysetEqual(qs, ['<Company: 99300 Ltd>'], ordered=False)\n+\n+    def test_range_lookup_namedtuple_differently_ordered(self):\n+        DifferentRange = namedtuple('DifferentRange', ['max', 'min'])\n+        qs = Company.objects.filter(\n+            num_employees__range=DifferentRange(min=1, max=100),\n+        )\n+        self.assertQuerysetEqual(\n+            qs,\n+            [\n+                '<Company: 5020 Ltd>', '<Company: 5040 Ltd>', '<Company: 5050 Ltd>',\n+                '<Company: 5060 Ltd>', '<Company: 99300 Ltd>',\n+            ],\n+            ordered=False\n+        )\n         \"\"\"\n         This tests that SQL injection isn't possible using compilation of\n         expressions in iterable filters, as their compilation happens before\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..9f817d2 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,18 +19,26 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n+from unittest import mock\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n+from unittest import mock\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n+from unittest import mock\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n+from unittest import mock\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n@@ -1866,6 +1874,28 @@ class ArgumentOrder(AdminScriptTestCase):\n             \"('verbosity', 1)]\" % option_b\n         )\n \n+class ExecuteFromCommandLineTest(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Verify that the program name is computed from the execute_from_command_line()\n+        argv argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_sys_argv_set(self):\n+        \"\"\"\n+        Verify that executing a command with sys.argv correctly set works,\n+        ensuring the change does not negatively impact normal usage.\n+        \"\"\"\n+        with captured_stdout() as out, captured_stderr() as err:\n+            execute_from_command_line(['django-admin', 'shell'])\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n \n @override_settings(ROOT_URLCONF='admin_scripts.urls')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..517af8b 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -146,7 +147,25 @@ class DateFormatTests(SimpleTestCase):\n         # Ticket #16924 -- We don't need timezone support to test this\n         self.assertEqual(dateformat.format(aware_dt, 'O'), '-0330')\n \n-    def test_invalid_time_format_specifiers(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (123, '23'),\n+            (999, '99'),\n+            (1000, '00'), # This case shows transition to a new century\n+            (9, '09'),\n+            (80, '80'),\n+            (800, '00'),\n+            (507, '07'), # Random year in range\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         my_birthday = date(1984, 8, 7)\n \n         for specifier in ['a', 'A', 'f', 'g', 'G', 'h', 'H', 'i', 'P', 'r', 's', 'u']:\n@@ -164,4 +183,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "",
  "django__django-13786": "",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..a274771 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,6 +1,9 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n+from django.utils.functional import lazy\n+from django.utils.translation import gettext_lazy\n from django.test import SimpleTestCase\n \n from ..utils import setup\n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..cd732f7 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -11,6 +11,26 @@ from django.db import (\n )\n from django.db.backends.base.base import BaseDatabaseWrapper\n from django.db.backends.signals import connection_created\n+class SQLKeywordsTest(TransactionTestCase):\n+    available_apps = ['backends']\n+\n+    def setUp(self):\n+        Reporter.objects.create(id=1, name=\"Reporter 1\")\n+\n+    def test_loaddata_sql_keywords(self):\n+        \"\"\"\n+        Tests the loaddata function with a model whose table name is an SQL keyword.\n+        \"\"\"\n+        with transaction.atomic():\n+            obj = SQLKeywordsModel.objects.create(reporter=Reporter.objects.first())\n+            obj.refresh_from_db()\n+            obj.reporter_id = 30\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n+\n from django.db.backends.utils import CursorWrapper\n from django.db.models.sql.constants import CURSOR\n from django.test import (\n@@ -18,6 +38,7 @@ from django.test import (\n     skipUnlessDBFeature,\n )\n \n+from django.db import connection, IntegrityError, transaction\n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..4dc8fba 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,10 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+import mock\n+from django.core.management import call_command\n+from io import StringIO\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n@@ -1343,7 +1347,38 @@ class ManageRunserverMigrationWarning(TestCase):\n         )\n \n \n-class ManageRunserverEmptyAllowedHosts(AdminScriptTestCase):\n+class ManageRunserverSkipChecks(TestCase):\n+    \n+    def setUp(self):\n+        self.stdout = StringIO()\n+    \n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_skip_checks_option(self, mocked_check):\n+        \"\"\"\n+        Test runserver with --skip-checks option.\n+        \"\"\"\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.stdout,\n+        )\n+        # Ensures that system checks are NOT performed when skip_checks is True\n+        self.assertNotIn('Performing system checks...', self.stdout.getvalue())\n+        mocked_check.assert_not_called()\n+\n+        self.stdout.truncate(0)\n+        self.stdout.seek(0)\n+\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=False,\n+            stdout=self.stdout,\n+        )\n+        # Ensures that system checks are performed when skip_checks is False\n+        self.assertIn('Performing system checks...', self.stdout.getvalue())\n+        mocked_check.assert_called()\n     def setUp(self):\n         super().setUp()\n         self.write_settings('settings.py', sdict={\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..5a0c4b4 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -268,11 +269,17 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n \n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.DummyMiddleware',\n     ])\n-    async def test_async_and_sync_middleware_async_call(self):\n-        response = await self.async_client.get('/middleware_exceptions/view/')\n+    async def test_middleware_not_used_side_effects(self):\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n         self.assertEqual(response.content, b'OK')\n         self.assertEqual(response.status_code, 200)\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.DummyMiddleware'\",\n+            [record.getMessage() for record in cm.records]\n+        )\n \n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..b3ceb58 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -12,7 +13,34 @@ from django.test import TestCase, modify_settings, override_settings\n from .test_base import MigrationTestBase\n \n \n-class RecorderTests(TestCase):\n+class LoaderFrozenEnvironmentTests(TestCase):\n+\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_no_file'})\n+    def test_loading_package_without_file(self):\n+        \"\"\"\n+        Ensure MigrationLoader can load migrations from packages that don't have a __file__ attribute.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations_no_file')\n+        loader = MigrationLoader(connection)\n+        orig_file = getattr(test_module, '__file__', None)\n+        orig_spec = getattr(test_module, '__spec__', None)\n+        try:\n+            if hasattr(test_module, '__file__'):\n+                del test_module.__file__\n+            if orig_spec and orig_spec.origin is not None:\n+                orig_spec.origin = None\n+                orig_spec.has_location = False\n+            loader.load_disk()\n+            migrations = [\n+                name for app, name in loader.disk_migrations if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            if orig_file is not None:\n+                test_module.__file__ = orig_file\n+            if orig_spec is not None:\n+                orig_spec.origin = orig_file\n+                orig_spec.has_location = True\n     \"\"\"\n     Tests recording migrations as applied or not.\n     \"\"\"\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..91eb8de 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -17,6 +17,10 @@ from django.test import (\n from django.test.utils import isolate_apps\n \n from ..models import Author, Item, Object, Square\n+import unittest\n+import mock\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db.backends.sqlite3.base import DatabaseWrapper as dbapi2\n \n try:\n     from django.db.backends.sqlite3.base import check_sqlite_version\n@@ -36,7 +40,21 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_pre_3_9_0(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n+\n+    def test_check_sqlite_version_3_9_0(self):\n+        # Ensure no error is raised for exactly 3.9.0\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            try:\n+                check_sqlite_version()\n+            except ImproperlyConfigured as e:\n+                self.fail(f\"check_sqlite_version() raised ImproperlyConfigured unexpectedly: {e}\")\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..01f5048 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -451,6 +451,44 @@ class RestartWithReloaderTests(SimpleTestCase):\n             self.assertEqual(mock_call.call_count, 1)\n             self.assertEqual(mock_call.call_args[0][0], [self.executable, '-Wall', '-m', 'django'] + argv[1:])\n \n+    @mock.patch('sys.modules', {'__main__': django.__main__})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n+\n+    @mock.patch('sys.modules', {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-mutils_tests.test_module', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_pkg_with_dash_m(self):\n+        # Test to ensure that it correctly handles -m with non-django package\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n+\n+    @mock.patch('sys.modules', {'__main__': test_main})\n+    @mock.patch('sys.argv', ['-mpkg_other_than_django', 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_other_pkg_with_dash_m(self):\n+        # Test to ensure that it correctly handles -m with another package\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'pkg_other_than_django', 'runserver'],\n+        )\n+\n+    @mock.patch('sys.modules', {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    def test_run_with_no_warnoptions(self):\n+        # Test when there are no warnoptions\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n+\n \n class ReloaderTests(SimpleTestCase):\n     RELOADER_CLS = None\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..e61edf1 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -283,6 +283,19 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n \n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    def test_modelchoicefield_value_placeholder(self):\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            f.clean,\n+            'invalid',\n+        )\n+\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +320,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..4666898 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -549,7 +550,33 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_order_with_unsaved_product_and_non_numeric_pk(self):\n+        # Test replicating the failure described in the issue\n+        with transaction.atomic():\n+            product = Product()  # Unsaved product\n+            order = Order(product=product)\n+\n+            # Assign SKU after initializing Order\n+            order.product.sku = 'test_sku'\n+            order.product.save()\n+            order.save()\n+\n+            # Check that order with correct product doesn't exist\n+            self.assertFalse(Order.objects.filter(product=order.product).exists())\n+            # The wrong filter should not exist as well\n+            self.assertFalse(Order.objects.filter(product_id='').exists())\n+\n+    def test_order_with_pre_saved_product_and_non_numeric_pk(self):\n+        # Test replicating the correct behavior described in the issue\n+        with transaction.atomic():\n+            product = Product(sku='test_sku')  # Preset SKU before assign to Order\n+            product.save()\n+            order = Order(product=product)\n+            order.save()\n+\n+            # Check that order with correct product exists\n+            self.assertTrue(Order.objects.filter(product=order.product).exists())\n+            self.assertFalse(Order.objects.filter(product_id='').exists())\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..5ddae96 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyAutoField, MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n@@ -223,7 +226,22 @@ class CustomPKTests(TestCase):\n     # SQLite lets objects be saved with an empty primary key, even though an\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n-    @skipIfDBFeature('supports_unspecified_pk')\n+    \n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that MyAutoField's from_db_value is called upon creation.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that MyAutoField's from_db_value is called during bulk_create.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n     def test_required_pk(self):\n         # The primary key must be specified, so an error is raised if you\n         # try to create an object without it.\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..099e224 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -816,8 +816,49 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n-\n-class IterableLookupInnerExpressionsTests(TestCase):\n+    def test_q_and_exists_commutative(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        \n+        # Test commutative property with AND\n+        and_conditions = [\n+            (Q(salary__gte=30) & Exists(is_ceo)),\n+            (Exists(is_ceo) & Q(salary__gte=30)),\n+            (Q() & Exists(is_poc)),\n+            (Exists(is_poc) & Q()),\n+        ]\n+        \n+        expected_and_results = [\n+            [self.max],\n+            [self.max],\n+            [self.max],\n+            [self.max],\n+        ]\n+        \n+        for conditions, expected in zip(and_conditions, expected_and_results):\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n+\n+        # Test commutative property with OR\n+        or_conditions = [\n+            (Q(salary__lt=15) | Exists(is_poc)),\n+            (Exists(is_poc) | Q(salary__lt=15)),\n+            (Q() | Exists(is_ceo)),\n+            (Exists(is_ceo) | Q()),\n+        ]\n+        \n+        expected_or_results = [\n+            [self.example_inc.ceo, self.max],\n+            [self.example_inc.ceo, self.max],\n+            [self.example_inc.ceo, self.foobar_ltd.ceo, self.max],\n+            [self.example_inc.ceo, self.foobar_ltd.ceo, self.max],\n+        ]\n+        \n+        for conditions, expected in zip(or_conditions, expected_or_results):\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n     @classmethod\n     def setUpTestData(cls):\n         ceo = Employee.objects.create(firstname='Just', lastname='Doit', salary=30)\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..aa1373e 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,19 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_post_process_no_duplicate_yields(self):\n+        \"\"\"\n+        Test to ensure that each file is yielded only once during post_process.\n+        \"\"\"\n+        # Setup the environment and run collectstatic command\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Check that no file is yielded more than once\n+        # Using assertCountEqual checks if two iterables have the same elements, the same number of times, regardless of their order\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +227,19 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_post_process_no_duplicate_yields(self):\n+        \"\"\"\n+        Test to ensure that each file is yielded only once during post_process.\n+        \"\"\"\n+        # Setup the environment and run collectstatic command\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(clear=False, dry_run=False, post_process=True)\n+        stats = collectstatic_cmd.collect()\n+\n+        # Check that no file is yielded more than once\n+        # Using assertCountEqual checks if two iterables have the same elements, the same number of times, regardless of their order\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..f97f863 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n@@ -387,7 +388,24 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n-    def test_order_by_f_expression_duplicates(self):\n+    def test_default_ordering_does_not_affect_group_by(self):\n+        # Setting up test data\n+        Article.objects.exclude(headline='Article 4').update(author=self.author_1)\n+        Article.objects.filter(headline='Article 4').update(author=self.author_2)\n+\n+        # Query with aggregation and an explicit values() call\n+        articles = Article.objects.values('author').annotate(count=Count('author'))\n+        self.assertCountEqual(articles, [\n+            {'author': self.author_1.pk, 'count': 3},\n+            {'author': self.author_2.pk, 'count': 1},\n+        ])\n+\n+        # Query without explicit values(), should not include `Meta.ordering` fields in GROUP BY\n+        articles_no_values = Article.objects.annotate(count=Count('author'))\n+        self.assertCountEqual(articles_no_values.values('count'), [\n+            {'count': 3},\n+            {'count': 1},\n+        ])\n         \"\"\"\n         A column may only be included once (the first occurrence) so we check\n         to ensure there are no duplicates by inspecting the SQL.\n@@ -483,4 +501,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..6457137 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -824,7 +824,31 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n-    def test_boolean_expression_combined_with_empty_Q(self):\n+    def test_deconstruct_single_exists_expression(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        q = Q(Exists(is_poc))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(is_poc),))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_combined_exists_and_Q(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        # Check that combining Exists with an empty Q does not raise errors\n+        combined_conditions = [\n+            (Q(Exists(is_poc)) & Q(), [self.max]),\n+            (Q() & Q(Exists(is_poc)), [self.max]),\n+            (Q(Exists(is_poc)) | Q(), [self.max]),\n+            (Q() | Q(Exists(is_poc)), [self.max])\n+        ]\n+        for conditions, expected in combined_conditions:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(conditions),\n+                    expected\n+                )\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n         self.gmbh.save()\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..8953814 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,10 +1,26 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n \n+from example.core.models import MyBigAutoField, MySmallAutoField\n \n @isolate_apps('model_options')\n+class TestAutoFieldInheritance(SimpleTestCase):\n+    @override_settings(DEFAULT_AUTO_FIELD='example.core.models.MyBigAutoField')\n+    def test_default_auto_field_setting_mybigautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='example.core.models.MySmallAutoField')\n+    def test_default_auto_field_setting_mysmallautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n class TestDefaultPK(SimpleTestCase):\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.NonexistentAutoField')\n     def test_default_auto_field_setting_nonexistent(self):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..d91b99e 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -166,7 +166,14 @@ class TestIterModulesAndFiles(SimpleTestCase):\n class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_with_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -175,7 +182,14 @@ class TestChildArguments(SimpleTestCase):\n \n     @mock.patch.dict(sys.modules, {'__main__': test_main})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_with_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_run_as_non_django_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -190,7 +204,14 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_with_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n@@ -201,7 +222,14 @@ class TestChildArguments(SimpleTestCase):\n                     [exe_path, 'runserver']\n                 )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_with_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             script_path = Path(tmpdir) / 'django-admin-script.py'\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..36fc050 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -329,7 +329,34 @@ class TestValidators(SimpleTestCase):\n                 else:\n                     self.assertEqual(expected, validator(value))\n \n-    def test_single_message(self):\n+    def test_behavior_with_patch(self):\n+        validator = URLValidator()\n+\n+        # With CR\n+        with self.subTest(value='http://www.djangoproject.com/\\r'):\n+            with self.assertRaises(ValidationError):\n+                validator('http://www.djangoproject.com/\\r')\n+        \n+        with self.subTest(value='http://[::ffff:192.9.5.5]\\r'):\n+            with self.assertRaises(ValidationError):\n+                validator('http://[::ffff:192.9.5.5]\\r')\n+\n+        with self.subTest(value='http://www.django\\rproject.com/'):\n+            with self.assertRaises(ValidationError):\n+                validator('http://www.django\\rproject.com/')\n+                \n+        with self.subTest(value='http://[::\\rffff:192.9.5.5]'):\n+            with self.assertRaises(ValidationError):\n+                validator('http://[::\\rffff:192.9.5.5]')\n+        \n+        # With tab\n+        with self.subTest(value='http://\\twww.djangoproject.com/'):\n+            with self.assertRaises(ValidationError):\n+                validator('http://\\twww.djangoproject.com/')\n+        \n+        with self.subTest(value='http://\\t[::ffff:192.9.5.5]'):\n+            with self.assertRaises(ValidationError):\n+                validator('http://\\t[::ffff:192.9.5.5]')\n         v = ValidationError('Not Valid')\n         self.assertEqual(str(v), \"['Not Valid']\")\n         self.assertEqual(repr(v), \"ValidationError(['Not Valid'])\")\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..28aea1b 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1525,6 +1525,34 @@ class AggregationTests(TestCase):\n             allow_distinct = True\n         DistinctAggregate('foo', distinct=True)\n \n+class QObjectOrTests(TestCase):\n+    def test_subquery_returns_single_column(self):\n+        # Setup: Create property groups and agents\n+        management_agent = ...\n+        property_groups = PropertyGroup.objects.agent_groups(management_agent)\n+        \n+        # Test the issue case\n+        queryset = self.annotate(Count(\"agent__property_groups\"))\n+        with self.assertRaises(ProgrammingError):\n+            queryset.filter(\n+                Q(agent__property_groups__in=property_groups)\n+                | Q(agent__property_groups__count=0)\n+            ).distinct()\n+    \n+    def test_id_in_works_correctly(self):\n+        # This should work as it uses 'id__in'\n+        management_agent = ...\n+        property_groups = PropertyGroup.objects.agent_groups(management_agent)\n+        \n+        queryset = self.annotate(Count(\"agent__property_groups\"))\n+        result = queryset.filter(\n+            Q(agent__property_groups__id__in=property_groups.values_list(\"id\", flat=True))\n+            | Q(agent__property_groups__count=0)\n+        ).distinct()\n+        \n+        expected_results = ...  # Add logic to determine expected results based on the test data setup\n+        self.assertEqual(set(result), expected_results)\n+\n \n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..052b0d9 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -68,6 +68,66 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_options_prefer_new_kwargs(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_options_prefer_deprecated_kwargs(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_password(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..a9d04c0 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2199,6 +2199,18 @@ class SchemaTests(TransactionTestCase):\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n \n     @skipUnlessDBFeature('supports_expression_indexes')\n+    def test_unique_constraint_reference(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name'], name='name_uq_test')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        self.assertTrue(sql.references_table(table), \"The SQL should reference the correct table\")\n+        self.assertTrue(sql.references_column(table, 'name'), \"The SQL should reference the correct column\")\n+\n     def test_func_unique_constraint(self):\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex dc966a1..2e1ab90 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -93,7 +93,7 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n         ),\n     )\n \n-\n-class NoneHashStorage(ManifestStaticFilesStorage):\n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n     def file_hash(self, name, content=None):\n-        return None\n+        return None\n",
  "django__django-14500": "",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..b7b56a2 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -256,6 +256,24 @@ class TestUtilsHtml(SimpleTestCase):\n             ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n         )\n+        # Test cases for handling HTML-escaped string and trailing punctuation\n+        tests += (\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            (\n+                'Visit google.com/?q=1&gt! and enjoy.',\n+                'Visit <a href=\"http://google.com/?q=1%3E\">google.com/?q=1&gt</a>! and enjoy.'\n+            ),\n+            (\n+                'Follow https://example.com/?url=abc&lt...',\n+                'Follow <a href=\"https://example.com/?url=abc%3C\">https://example.com/?url=abc&lt</a>...'\n+            ),\n+        )\n+        for value, output in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(urlize(value), output)\n         for value, output in tests:\n             with self.subTest(value=value):\n                 self.assertEqual(urlize(value), output)\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..910398b 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -123,7 +123,32 @@ class BulkUpdateTests(TestCase):\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             CustomPk.objects.bulk_update([], ['name'])\n \n-    def test_empty_objects(self):\n+from django.test import TestCase\n+from .models import Note, CustomPk, Valid, Detail, Paragraph, Member\n+\n+class BulkUpdateTests(TestCase):\n+    def test_no_rows_updated(self):\n+        # Test with an empty list of objects for bulk_update.\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_bulk_update_multiple_objects(self):\n+        # Create 2000 Note objects\n+        Note.objects.bulk_create([Note(note=str(i), misc=str(i)) for i in range(2000)])\n+        notes = list(Note.objects.all())\n+        # Perform bulk update and check if 2000 rows are matched\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_bulk_update_with_duplicates(self):\n+        # Create a Note object\n+        note = Note.objects.create(note='test-note', misc='test')\n+        # Test updating with duplicates\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+        # Duplicates in different batches\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n         with self.assertNumQueries(0):\n             Note.objects.bulk_update([], ['note'])\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..5881a78 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -984,6 +984,26 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n+    def test_formset_nonform_css_class(self):\n+        \"\"\"\n+        Test that the nonform CSS class is added for non form errors in FormSets.\n+        \"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '2',  # number of forms rendered\n+            'drinks-INITIAL_FORMS': '0',  # number of forms with initial data\n+            'drinks-MIN_NUM_FORMS': '0',  # minimum number of forms\n+            'drinks-MAX_NUM_FORMS': '0',  # maximum number of forms\n+            'drinks-0-name': 'Gin and Tonic',\n+            'drinks-1-name': 'Gin and Tonic',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        # Check that the nonform CSS class is applied correctly\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n+\n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n",
  "django__django-14631": "",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..1e5b02b 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -3,6 +3,8 @@ from operator import attrgetter\n \n from django.db import IntegrityError\n from django.test import TestCase\n+from django.db import models\n+from django.core.checks import Error\n \n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..be20311 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -9,7 +10,9 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import PermissionDenied\n from django.http import Http404\n from django.test import RequestFactory, override_settings\n+import datetime\n from django.urls import reverse, reverse_lazy\n+from .models import Question\n \n from .admin import AnswerAdmin, QuestionAdmin\n from .models import (\n",
  "django__django-14765": "",
  "django__django-14771": "",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..9bb653a 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -199,6 +199,29 @@ class MethodDecoratorTests(SimpleTestCase):\n     \"\"\"\n     Tests for method_decorator\n     \"\"\"\n+    def test_wrapper_assignments(self):\n+        \"\"\"Ensure @method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n     def test_preserve_signature(self):\n         class Test:\n             @simple_dec_m\n",
  "django__django-14855": "",
  "django__django-14915": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5a30801..55b3c81 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1171,6 +1171,9 @@ class ModelChoiceIteratorValue:\n             other = other.value\n         return self.value == other\n \n+    def __hash__(self):\n+        return hash(self.value)\n+\n \n class ModelChoiceIterator:\n     def __init__(self, field):\n",
  "django__django-14999": "",
  "django__django-15022": "",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..8284508 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n \n+from django.utils.html import json_script\n from ..utils import setup\n \n \n@@ -16,4 +18,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..886d9c1 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2834,8 +2834,32 @@ class AutodetectorTests(TestCase):\n                     expected_number,\n                 )\n \n-\n-class MigrationSuggestNameTests(SimpleTestCase):\n+class TestMigrationAutodetectorWithCustomFKField(SimpleTestCase):\n+    def test_add_custom_fk_with_hardcoded_to_keyerror_fix(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.HardcodedModel'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']  # Deliberately remove it as per the initial design to mimic the bug\n+                return name, path, args, kwargs\n+\n+        # Project states before and after adding the model with the custom ForeignKey\n+        initial_state = ProjectState()\n+        initial_state.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        \n+        altered_state = ProjectState()\n+        altered_state.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        altered_state.add_model(ModelState('testapp', 'NewModel', [('hardcoded_fk', HardcodedForeignKey(on_delete=models.CASCADE))]))\n+\n+        # Run the autodetector to observe if it triggers the KeyError\n+        changes = MigrationAutodetector(initial_state, altered_state)._detect_changes()\n+        self.assertEqual(len(changes['testapp']), 1)\n+        # Ensure a new model migration is detected correctly\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='NewModel')\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n             operations = []\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..69b8e0a 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -361,6 +362,29 @@ class BaseTests:\n         tags = [msg.tags for msg in storage]\n         self.assertEqual(tags, ['info', '', 'extra-tag debug', 'warning', 'error', 'success', 'info'])\n \n+    def test_override_settings_level_tags_updates_base_level_tags(self):\n+        original_level_tags = base.LEVEL_TAGS.copy()\n+        try:\n+            with override_settings(MESSAGE_TAGS={\n+                constants.INFO: 'info-override',\n+                constants.ERROR: 'error-override',\n+                99: 'custom-override',\n+            }):\n+                self.assertEqual(base.LEVEL_TAGS[constants.INFO], 'info-override')\n+                self.assertEqual(base.LEVEL_TAGS[constants.ERROR], 'error-override')\n+                self.assertIn(99, base.LEVEL_TAGS)\n+                self.assertEqual(base.LEVEL_TAGS[99], 'custom-override')\n+\n+                # Ensure the storage uses the overridden tags.\n+                storage = self.get_storage()\n+                storage.add(constants.INFO, 'Info message')\n+                storage.add(99, 'Custom message 99')\n+                levels_applied = [msg.level_tag for msg in storage]\n+                self.assertEqual(levels_applied, ['info-override', 'custom-override'])\n+        finally:\n+            base.LEVEL_TAGS = original_level_tags\n+        self.assertEqual(tags, ['info', '', 'extra-tag debug', 'warning', 'error', 'success', 'info'])\n+\n     def test_level_tag(self):\n         storage = self.get_storage()\n         storage.level = 0\n",
  "django__django-15128": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a7bb7e8..0816d7b 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -612,7 +612,11 @@ class OrderItem(models.Model):\n         return str(self.pk)\n \n \n+class Annotation(models.Model):\n+    tag = models.ForeignKey('Tag', on_delete=models.CASCADE)\n+\n class BaseUser(models.Model):\n+    annotation = models.ForeignKey(Annotation, models.CASCADE)\n     pass\n \n \n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..41ba5ef 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1765,6 +1765,13 @@ class ValueTests(TestCase):\n         path, args, kwargs = value.deconstruct()\n         self.assertEqual(path, 'django.db.models.expressions.Value')\n         self.assertEqual(args, (value.value,))\n+\n+    def test_deconstruct_F(self):\n+        expression = F('test_field')\n+        path, args, kwargs = expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('test_field',))\n+        self.assertEqual(kwargs, {})\n         self.assertEqual(kwargs, {})\n \n     def test_deconstruct_output_field(self):\n@@ -1772,6 +1779,13 @@ class ValueTests(TestCase):\n         path, args, kwargs = value.deconstruct()\n         self.assertEqual(path, 'django.db.models.expressions.Value')\n         self.assertEqual(args, (value.value,))\n+\n+    def test_deconstruct_F(self):\n+        expression = F('test_field')\n+        path, args, kwargs = expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('test_field',))\n+        self.assertEqual(kwargs, {})\n         self.assertEqual(len(kwargs), 1)\n         self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n \n",
  "django__django-15268": "",
  "django__django-15277": "",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..0955047 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -618,7 +618,27 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n         # Ensure the field is there\n+from django.db import connection\n+from django.db.models import OneToOneField, CASCADE\n+from .models import Author, Note\n+from django.test import TestCase\n+\n+class SchemaTests(TestCase):\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField on a model using SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True, unique=True, blank=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        # Check that the column is nullable (the \"null\" attribute is True)\n+        self.assertTrue(columns['note_id'][1][6])\n         field_type, field_info = columns['thing']\n         self.assertEqual(field_type, connection.features.introspected_field_types['IntegerField'])\n         # Make sure the values were transformed correctly\n@@ -636,7 +656,27 @@ class SchemaTests(TransactionTestCase):\n         new_field.set_attributes_from_name(\"bits\")\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n+from django.db import connection\n+from django.db.models import OneToOneField, CASCADE\n+from .models import Author, Note\n+from django.test import TestCase\n+\n+class SchemaTests(TestCase):\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField on a model using SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True, unique=True, blank=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        # Check that the column is nullable (the \"null\" attribute is True)\n+        self.assertTrue(columns['note_id'][1][6])\n         # MySQL annoyingly uses the same backend, so it'll come back as one of\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..4a26150 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -102,6 +102,34 @@ class BasicFieldTests(SimpleTestCase):\n         name, path, args, kwargs = Nested.Field().deconstruct()\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n+    def test_hash_immutability(self):\n+        field = models.IntegerField()\n+        field_hash = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash, hash(field))\n+\n+    def test_field_in_dict_before_assignment(self):\n+        \"\"\"\n+        Test to ensure a Field can be used as a key in a dictionary\n+        before it's assigned to a model, and its hash remains unchanged\n+        after assignment.\n+        \"\"\"\n+        field = models.CharField(max_length=200)\n+        field_dict = {field: 'Test value'}\n+        field_hash_before = hash(field)\n+\n+        class AnotherModel(models.Model):\n+            char_field = field\n+        \n+        # Ensure the hash hasn't changed after assignment\n+        self.assertEqual(field_hash_before, hash(field))\n+\n+        # Ensure the key is still in the dictionary after assignment\n+        self.assertIn(field, field_dict)\n+\n     def test_abstract_inherited_fields(self):\n         \"\"\"Field instances from abstract models are not equal.\"\"\"\n         class AbstractModel(models.Model):\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..88022cf 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -211,7 +211,24 @@ class BulkUpdateTests(TestCase):\n         Number.objects.bulk_update(numbers, ['num'])\n         self.assertCountEqual(Number.objects.filter(num=1), numbers)\n \n-    def test_booleanfield(self):\n+    def test_f_expression_bulk_update(self):\n+        # Test that F expressions are correctly handled by bulk_update.\n+        # Create 10 Notes with 'misc' fields initially set to 'test_misc'.\n+        notes = [Note.objects.create(note='test_note', misc='test_misc') for _ in range(10)]\n+        # Assign F('note') to 'misc' field, which should copy 'note' to 'misc'.\n+        for note in notes:\n+            note.misc = F('note')\n+        Note.objects.bulk_update(notes, ['misc'])\n+        # After bulk_update, all notes' misc fields should equal 'test_note'.\n+        self.assertCountEqual(Note.objects.filter(misc='test_note'), notes)\n+\n+    def test_f_expression_different_field(self):\n+        # Additional test with different model and fields for robustness.\n+        objs = [SelfRef.objects.create(name='test_name', c8='initial') for _ in range(5)]\n+        for obj in objs:\n+            obj.c8 = F('name')\n+        SelfRef.objects.bulk_update(objs, ['c8'])\n+        self.assertCountEqual(SelfRef.objects.filter(c8='test_name'), objs)\n         individuals = [Individual.objects.create(alive=False) for _ in range(10)]\n         for individual in individuals:\n             individual.alive = True\n",
  "django__django-15380": "",
  "django__django-15382": "",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..ba4cd2d 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -9,8 +9,15 @@ try:\n except ImportError:\n     from backports import zoneinfo\n \n+from django import forms\n+import unittest\n from django import forms\n from django.conf import settings\n+from django.db import models\n+from django.contrib import admin\n+from django.contrib.admin import widgets\n+from django.contrib.admin.sites import AdminSite\n+from django.utils.translation import gettext_lazy as _\n from django.contrib import admin\n from django.contrib.admin import widgets\n from django.contrib.admin.tests import AdminSeleniumTestCase\n@@ -132,7 +139,22 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             raw_id_fields=[\"main_band\"],\n         )\n \n-    def test_radio_fields_ForeignKey(self):\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=255)\n+\n+        class Inventory(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+            formfield_overrides = {\n+                models.ForeignKey: {\"empty_label\": \"Custom empty label\"},\n+            }\n+\n+        ma = MyModelAdmin(Inventory, AdminSite())\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n         ff = self.assertFormfield(\n             Event,\n             \"main_band\",\n",
  "django__django-15499": "",
  "django__django-15525": "diff --git a/tests/fixtures_regress/models.py b/tests/fixtures_regress/models.py\nindex 6245d2f..ac054c3 100644\n--- a/tests/fixtures_regress/models.py\n+++ b/tests/fixtures_regress/models.py\n@@ -15,6 +15,37 @@ class Animal(models.Model):\n         return self.name\n \n \n+from django.db import models\n+\n+class PersonManager(models.Manager):\n+    def get_by_natural_key(self, name):\n+        return self.get(name=name)\n+\n+class Person(models.Model):\n+    id = models.AutoField(primary_key=True)\n+    name = models.CharField(max_length=255, unique=True)\n+    objects = PersonManager()\n+\n+    def natural_key(self):\n+        return (self.name,)\n+\n+class NaturalKeyWithFKDependencyManager(models.Manager):\n+    def get_by_natural_key(self, name, author):\n+        return self.get(name=name, author__name=author)\n+\n+class NaturalKeyWithFKDependency(models.Model):\n+    name = models.CharField(max_length=255)\n+    author = models.ForeignKey(Person, models.CASCADE)\n+    objects = NaturalKeyWithFKDependencyManager()\n+\n+    class Meta:\n+        unique_together = [\"name\", \"author\"]\n+\n+    def natural_key(self):\n+        return (self.name,) + self.author.natural_key()\n+\n+    natural_key.dependencies = [\"fixtures_regress.Person\"]\n+\n class Plant(models.Model):\n     name = models.CharField(max_length=150)\n \n",
  "django__django-15561": "",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..4f74341 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -326,7 +326,17 @@ class LookupTests(TestCase):\n \n \n class BilateralTransformTests(TestCase):\n-    def test_bilateral_upper(self):\n+    def test_unregister_lookup_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Register a lookup and check it's in cache\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+        \n+        # Unregister the lookup and check cache is cleared\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        field.get_lookups.cache_clear()\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n         with register_lookup(models.CharField, UpperBilateralTransform):\n             author1 = Author.objects.create(name=\"Doe\")\n             author2 = Author.objects.create(name=\"doe\")\n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..a43d8b2 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -736,6 +737,39 @@ class ManagerTest(SimpleTestCase):\n             sorted(self.QUERYSET_PROXY_METHODS),\n         )\n \n+    def test_bulk_create_method_signature(self):\n+        \"\"\"\n+        Test that inspect.signature returns the correct signature for bulk_create.\n+        This verifies that the decorator wraps maintain the correct metadata.\n+        \"\"\"\n+        from .models import Article  # Assumed import for a test model similar to Person\n+\n+        expected_signature = (\n+            \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, \"\n+            \"update_fields=None, unique_fields=None)\"\n+        )\n+        actual_signature = str(inspect.signature(Article.objects.bulk_create))\n+        self.assertEqual(expected_signature, actual_signature, \n+                         \"The signature of bulk_create on the manager is incorrect.\")\n+\n+    def test_other_manager_method_signature(self):\n+        \"\"\"\n+        Additional test case to check other functionalities of manager methods\n+        if necessary, like get or count.\n+        \"\"\"\n+        from .models import Article  # Assumed import for test model\n+\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.get)), \n+            \"(args, *kwargs)\",\n+            \"The signature of get on the manager should match QuerySet get.\"\n+        )\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.count)), \n+            \"()\",\n+            \"The signature of count on the manager should match QuerySet count.\"\n+        )\n+\n \n class SelectOnSaveTests(TestCase):\n     def test_select_on_save(self):\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..0a6ae56 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,6 +1,9 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n+from django.utils.translation import gettext_lazy\n+from django.utils.formats import get_format\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n \n@@ -77,7 +80,13 @@ class FunctionTests(SimpleTestCase):\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n-    def test_no_args(self):\n+    def test_get_format_lazy_date_format(self):\n+        self.assertEqual(get_format(gettext_lazy(\"DATE_FORMAT\")), \"N j, Y\")\n+\n+    @setup({\"datelazy\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy(self):\n+        output = self.engine.render_to_string(\"datelazy\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n         self.assertEqual(date(\"\"), \"\")\n         self.assertEqual(date(None), \"\")\n \n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..17f12c5 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -399,6 +399,29 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n+import unittest\n+from django.test import TestCase\n+from .models import CustomModel, ProxyCustomModel, AnotherModel\n+\n+class ProxyModelQuerySetTests(TestCase):\n+    def setUp(self):\n+        self.custom_model = CustomModel.objects.create(name=\"Custom\")\n+        self.proxy_custom_model = ProxyCustomModel.objects.create(name=\"ProxyCustom\")\n+        self.another_model = AnotherModel.objects.create(custom=self.proxy_custom_model)\n+\n+    def test_select_related_only_on_proxy_model(self):\n+        # This test is designed to cover the case where select_related() and only() are used together.\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.get()\n+        # This should not raise an error, previously raised \"ValueError: 'id' is not in list\"\n+        self.assertEqual(result.custom.name, \"ProxyCustom\")\n+\n+    def test_select_related_only_on_non_proxy_model(self):\n+        # This tests that the original model without proxy also works\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        result = qs.get()\n+        self.assertEqual(result.custom.name, self.proxy_custom_model.name)\n+\n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..1d35523 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,7 +157,26 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n-    @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n+    def test_parameters_correct_order(self):\n+        # Test to ensure additional parameters are correctly added before database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"dbname\"], None),\n+        )\n+\n+    def test_no_parameters(self):\n+        # Test to ensure that the absence of additional parameters places dbname correctly\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, []),\n+            ([\"psql\", \"dbname\"], None),\n+        )\n+\n+    def test_multiple_parameters(self):\n+        # Test multiple parameters for correct ordering\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1\", \"--no-align\"]),\n+            ([\"psql\", \"-c\", \"SELECT 1\", \"--no-align\", \"dbname\"], None),\n+        )\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n \n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..d8ebcd8 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -73,8 +73,29 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, 20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n-\n-    def test_force_grouping(self):\n+    def test_decimal_precision(self):\n+        # Test the original issue with the precision of 21\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+        # Additional test cases\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.00000000000000000000123\"), 22),\n+            \"0.00000000000000000000123\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"987654321.123456789012345678\"), 18),\n+            \"987654321.123456789012345678\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"1.0000000000000000001\"), 19),\n+            \"1.0000000000000000001\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"-42.00000000000000000042\"), 20),\n+            \"-42.00000000000000000042\",\n+        )\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n             self.assertEqual(floatformat(66666.666, \"1g\"), \"66,666.7\")\n",
  "django__django-15930": "",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..aa496b2 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -556,7 +557,21 @@ class TestFixtures(TestCase):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n     @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, \"fixtures\")])\n-    def test_fixture_dirs_with_default_fixture_path(self):\n+    @override_settings(\n+        FIXTURE_DIRS=[Path(_cur_dir) / \"fixtures\", Path(_cur_dir) / \"fixtures\"]\n+    )\n+    def test_duplicate_fixture_dirs_as_path_instances(self):\n+        \"\"\"\n+        Test that loaddata detects duplicate fixture directories\n+        when they are specified as Path instances.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a default fixture directory for the '%s' app \"\n+            \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"), \"fixtures_regress\")\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n         \"\"\"\n         settings.FIXTURE_DIRS cannot contain a default fixtures directory\n         for application (app/fixtures) in order to avoid repeated fixture loading.\n",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..29638e8 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,30 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c6202be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..3dfdcb3 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,9 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +403,52 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..af070e9 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,25 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_with_dry_run(self):\n+        \"\"\"\n+        makemigrations --check --dry-run should not create migrations or exit with non-zero.\n+        \"\"\"\n+        migration_dir = 'migrations'\n+        with self.temporary_migration_module(module=migration_dir):\n+            # Ensure migration directory exists initially, but no migration files inside.\n+            self.assertTrue(os.path.exists(migration_dir))\n+            self.assertFalse(\n+                any(fname.endswith('.py') for fname in os.listdir(migration_dir))\n+            )\n+\n+            # Call command with --check --dry-run and ensure it doesn't create files\n+            call_command(\"makemigrations\", \"--check\", \"--dry-run\", \"migrations\", verbosity=0)\n+\n+            # There should still be no migration files created after this command.\n+            self.assertFalse(\n+                any(fname.endswith('.py') for fname in os.listdir(migration_dir))\n+            )\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..45e0064 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,10 +1,15 @@\n+\n import asyncio\n import os\n from unittest import mock\n \n from asgiref.sync import async_to_sync\n \n+import asyncio\n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n+from django.http import HttpResponseNotAllowed\n+from django.test import RequestFactory\n+from django.views import View\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n from django.http import HttpResponse\n from django.test import SimpleTestCase\n@@ -119,7 +124,33 @@ class ViewTests(SimpleTestCase):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n-    def test_base_view_class_is_sync(self):\n+    def test_http_method_not_allowed_responds_correctly(self):\n+        request_factory = RequestFactory()\n+        # Define both synchronous and asynchronous views for testing\n+        class SyncView(View):\n+            def post(self, request):\n+                return HttpResponse(\"ok\")\n+\n+        class AsyncView(View):\n+            async def post(self, request):\n+                return HttpResponse(\"ok\")\n+\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.post(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n         sync.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..70dd88e 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,7 +25,8 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n-from django.utils.translation import gettext as _\n+from django.urls import reverse\n+import urllib.parse\n \n from .models.custom_user import (\n     CustomUser,\n@@ -892,7 +894,44 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n-    def test_custom_form(self):\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field_with_uuid(self):\n+        user = User.objects.create_user(username=\"testuuid\", password=\"top_secret\", uuid=\"22222222-3333-4444-5555-666677778888\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.uuid,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    def test_link_to_password_reset_in_helptext_via_to_field_with_pk(self):\n+        user = User.objects.create_user(username=\"testclient\", password=\"password\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm typically accessed via pk.\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.pk,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n                 model = ExtensionUser\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..d3196e9 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,7 +1600,21 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n-    def test_runner_hostname(self):\n+    @mock.patch(\"django.core.management.commands.runserver.run\")\n+    @mock.patch(\"django.core.management.base.BaseCommand.check_migrations\")\n+    def test_zero_ip_addr(self, *mocked_objects):\n+        output = StringIO()\n+        call_command(\n+            self.cmd,\n+            addrport=\"0:8000\",\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=output,\n+        )\n+        self.assertIn(\n+            \"Starting development server at http://0.0.0.0:8000/\",\n+            output.getvalue(),\n+        )\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n \n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..5b2e57a 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -504,6 +504,21 @@ class HTTPSitemapTests(SitemapTestsBase):\n             \"<lastmod>2014-03-13</lastmod></url>\\n\"\n             \"</urlset>\"\n         )\n+    \n+    def test_callable_lastmod_with_empty_items(self):\n+        \"\"\"\n+        Test that a sitemap with callable lastmod and no items does not raise a ValueError\n+        and returns the appropriate response.\n+        \"\"\"\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", response)\n+        expected_content = (\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            '<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n'\n+            '<sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\\n'\n+            '</sitemapindex>\\n'\n+        )\n+        self.assertXMLEqual(response.content.decode(), expected_content)\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..1b51d14 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -78,6 +78,9 @@ class UpsertConflict(models.Model):\n class NoFields(models.Model):\n     pass\n \n+class ActivityBlackListed(models.Model):\n+    blacklistid = models.IntegerField(primary_key=True, db_column=\"BlacklistID\")\n+    sectorid = models.IntegerField(null=True, blank=True, db_column=\"SectorID\")\n \n class SmallAutoFieldModel(models.Model):\n     id = models.SmallAutoField(primary_key=True)\n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..8934e6a 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..ec0ceb7 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,7 +161,25 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n-    def test_naive_datetime_with_tzinfo_attribute(self):\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz_aware(self):\n+        # Test with timezone-aware datetime objects\n+        now = timezone.now()\n+        # Create a datetime 31 days in the past\n+        past = now - datetime.timedelta(days=31)\n+        # Ensure past is timezone-aware\n+        past = timezone.make_aware(past, timezone.get_default_timezone())\n+        self.assertEqual(timesince(past, now), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz_naive(self):\n+        # Test with timezone-naive datetime objects\n+        now = datetime.datetime.now()\n+        # Create a datetime 31 days in the past\n+        past = now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(past, now), \"1\\xa0month\")\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n                 return None\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..596217c 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -481,6 +481,46 @@ class UtilsTests(SimpleTestCase):\n         for char in key:\n             self.assertIn(char, \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)\")\n \n+    def test_command_missing_subparser(self):\n+        \"\"\"\n+        Test that a subparser is required, and the proper error message is displayed\n+        when it is missing.\n+        \"\"\"\n+        out, err = self.run_manage([\"subparser\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 1)\n+        self.assertEqual(\n+            err_lines[0],\n+            \"manage.py: error: the following arguments are required: {foo}\",\n+        )\n+\n+    def test_subparser_missing_argument(self):\n+        \"\"\"\n+        Test that when a required argument for a subparser is missing, the correct error message is displayed.\n+        \"\"\"\n+        out, err = self.run_manage([\"subparser\", \"foo\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser foo: error: the following arguments are required: bar\",\n+        )\n+\n+    def test_argument_type_error(self):\n+        \"\"\"\n+        Test that an invalid argument type for a subparser argument produces a correct error message.\n+        \"\"\"\n+        out, err = self.run_manage([\"subparser\", \"foo\", \"not_an_int\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py subparser foo: error: argument bar: invalid int value: 'not_an_int'\",\n+        )\n+\n     def test_is_ignored_path_true(self):\n         patterns = (\n             [\"foo/bar/baz\"],\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..8933db4 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -112,6 +112,23 @@ class FunctionTests(SimpleTestCase):\n             floatformat(0.000000000000000000015, 20), \"0.00000000000000000002\"\n         )\n \n+    def test_issue_0_00(self):\n+        # Test cases explicitly covering the issue of crashing on \"0.00\".\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+        self.assertEqual(floatformat(\"0.0000\", 0), \"0\")\n+\n+        # Add additional edge cases\n+        self.assertEqual(floatformat(0.0, 0), \"0\")\n+        self.assertEqual(floatformat(-0.0, 0), \"0\")\n+        self.assertEqual(floatformat(\"0.0\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.000\"), 0), \"0\")\n+        self.assertEqual(floatformat(\"10.00\", 0), \"10\")\n+        self.assertEqual(floatformat(Decimal(\"10.00\"), 1), \"10.0\")\n+        self.assertEqual(floatformat(\"100.123456\", 3), \"100.123\")\n+        self.assertEqual(floatformat(Decimal(\"100.123456\"), -3), \"100.123\")\n+        self.assertEqual(floatformat(0.9999, 0), \"1\")\n+\n     def test_negative_zero_values(self):\n         tests = [\n             (-0.01, -1, \"0.0\"),\n",
  "django__django-16493": "diff --git a/tests/file_storage/models.py b/tests/file_storage/models.py\nindex 3513a6b..132e8c4 100644\n--- a/tests/file_storage/models.py\n+++ b/tests/file_storage/models.py\n@@ -32,8 +32,13 @@ class CallableStorage(FileSystemStorage):\n         # no-op implementation.\n         return self\n \n+def callable_default_storage():\n+    return default_storage\n \n class Storage(models.Model):\n+    storage_callable_default = models.FileField(\n+        storage=callable_default_storage, upload_to=\"storage_callable_default\"\n+    )\n     def custom_upload_to(self, filename):\n         return \"foo\"\n \n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..20ea8d7 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -6,6 +7,8 @@ from django.contrib.admin.templatetags.admin_modify import submit_row\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n@@ -54,7 +57,37 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n                     template_context[\"show_save_and_add_another\"], expected_flag\n                 )\n \n-    def test_override_change_form_template_tags(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         \"\"\"\n         admin_modify template tags follow the standard search pattern\n         admin/app_label/model/template.html.\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..58cfad7 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -76,12 +76,46 @@ class BaseConstraintTests(SimpleTestCase):\n             constraint.get_violation_error_message(),\n             \"custom base_name message\",\n         )\n+        \n+    def test_custom_violation_error_code(self):\n+        # Define a check constraint with a custom error message and code.\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"Price should be greater than discounted price.\",\n+            violation_error_code=\"price_discount_mismatch\",\n+        )\n+        # Create an invalid product instance to trigger validation error.\n+        invalid_product = Product(price=10, discounted_price=15)\n+        msg = \"Price should be greater than discounted price.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        # Assert that the custom code is attached to the raised ValidationError.\n+        self.assertEqual(cm.exception.code, \"price_discount_mismatch\")\n \n     def test_deconstruction(self):\n         constraint = BaseConstraint(\n             name=\"base_name\",\n             violation_error_message=\"custom %(name)s message\",\n         )\n+        \n+    def test_custom_violation_error_code(self):\n+        # Define a check constraint with a custom error message and code.\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"Price should be greater than discounted price.\",\n+            violation_error_code=\"price_discount_mismatch\",\n+        )\n+        # Create an invalid product instance to trigger validation error.\n+        invalid_product = Product(price=10, discounted_price=15)\n+        msg = \"Price should be greater than discounted price.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        # Assert that the custom code is attached to the raised ValidationError.\n+        self.assertEqual(cm.exception.code, \"price_discount_mismatch\")\n         path, args, kwargs = constraint.deconstruct()\n         self.assertEqual(path, \"django.db.models.BaseConstraint\")\n         self.assertEqual(args, ())\n@@ -116,6 +150,23 @@ class CheckConstraintTests(TestCase):\n             models.CheckConstraint(check=check1, name=\"price\"),\n             models.CheckConstraint(check=check1, name=\"price\"),\n         )\n+        \n+    def test_custom_violation_error_code(self):\n+        # Define a check constraint with a custom error message and code.\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"Price should be greater than discounted price.\",\n+            violation_error_code=\"price_discount_mismatch\",\n+        )\n+        # Create an invalid product instance to trigger validation error.\n+        invalid_product = Product(price=10, discounted_price=15)\n+        msg = \"Price should be greater than discounted price.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        # Assert that the custom code is attached to the raised ValidationError.\n+        self.assertEqual(cm.exception.code, \"price_discount_mismatch\")\n         self.assertEqual(models.CheckConstraint(check=check1, name=\"price\"), mock.ANY)\n         self.assertNotEqual(\n             models.CheckConstraint(check=check1, name=\"price\"),\n@@ -140,6 +191,23 @@ class CheckConstraintTests(TestCase):\n                 check=check1, name=\"price\", violation_error_message=\"other custom error\"\n             ),\n         )\n+        \n+    def test_custom_violation_error_code(self):\n+        # Define a check constraint with a custom error message and code.\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"Price should be greater than discounted price.\",\n+            violation_error_code=\"price_discount_mismatch\",\n+        )\n+        # Create an invalid product instance to trigger validation error.\n+        invalid_product = Product(price=10, discounted_price=15)\n+        msg = \"Price should be greater than discounted price.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        # Assert that the custom code is attached to the raised ValidationError.\n+        self.assertEqual(cm.exception.code, \"price_discount_mismatch\")\n         self.assertEqual(\n             models.CheckConstraint(\n                 check=check1, name=\"price\", violation_error_message=\"custom error\"\n@@ -148,17 +216,68 @@ class CheckConstraintTests(TestCase):\n                 check=check1, name=\"price\", violation_error_message=\"custom error\"\n             ),\n         )\n+        \n+    def test_custom_violation_error_code(self):\n+        # Define a check constraint with a custom error message and code.\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"Price should be greater than discounted price.\",\n+            violation_error_code=\"price_discount_mismatch\",\n+        )\n+        # Create an invalid product instance to trigger validation error.\n+        invalid_product = Product(price=10, discounted_price=15)\n+        msg = \"Price should be greater than discounted price.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        # Assert that the custom code is attached to the raised ValidationError.\n+        self.assertEqual(cm.exception.code, \"price_discount_mismatch\")\n \n     def test_repr(self):\n         constraint = models.CheckConstraint(\n             check=models.Q(price__gt=models.F(\"discounted_price\")),\n             name=\"price_gt_discounted_price\",\n         )\n+        \n+    def test_custom_violation_error_code(self):\n+        # Define a check constraint with a custom error message and code.\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"Price should be greater than discounted price.\",\n+            violation_error_code=\"price_discount_mismatch\",\n+        )\n+        # Create an invalid product instance to trigger validation error.\n+        invalid_product = Product(price=10, discounted_price=15)\n+        msg = \"Price should be greater than discounted price.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        # Assert that the custom code is attached to the raised ValidationError.\n+        self.assertEqual(cm.exception.code, \"price_discount_mismatch\")\n         self.assertEqual(\n             repr(constraint),\n             \"<CheckConstraint: check=(AND: ('price__gt', F(discounted_price))) \"\n             \"name='price_gt_discounted_price'>\",\n         )\n+        \n+    def test_custom_violation_error_code(self):\n+        # Define a check constraint with a custom error message and code.\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"Price should be greater than discounted price.\",\n+            violation_error_code=\"price_discount_mismatch\",\n+        )\n+        # Create an invalid product instance to trigger validation error.\n+        invalid_product = Product(price=10, discounted_price=15)\n+        msg = \"Price should be greater than discounted price.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        # Assert that the custom code is attached to the raised ValidationError.\n+        self.assertEqual(cm.exception.code, \"price_discount_mismatch\")\n \n     def test_repr_with_violation_error_message(self):\n         constraint = models.CheckConstraint(\n@@ -234,6 +353,23 @@ class CheckConstraintTests(TestCase):\n             invalid_product,\n             exclude={\"discounted_price\", \"price\"},\n         )\n+        \n+    def test_custom_violation_error_code(self):\n+        # Define a check constraint with a custom error message and code.\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"Price should be greater than discounted price.\",\n+            violation_error_code=\"price_discount_mismatch\",\n+        )\n+        # Create an invalid product instance to trigger validation error.\n+        invalid_product = Product(price=10, discounted_price=15)\n+        msg = \"Price should be greater than discounted price.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        # Assert that the custom code is attached to the raised ValidationError.\n+        self.assertEqual(cm.exception.code, \"price_discount_mismatch\")\n         # Valid product.\n         constraint.validate(Product, Product(price=10, discounted_price=5))\n \n@@ -245,6 +381,23 @@ class CheckConstraintTests(TestCase):\n             ),\n             name=\"price_neq_500_wrap\",\n         )\n+        \n+    def test_custom_violation_error_code(self):\n+        # Define a check constraint with a custom error message and code.\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"Price should be greater than discounted price.\",\n+            violation_error_code=\"price_discount_mismatch\",\n+        )\n+        # Create an invalid product instance to trigger validation error.\n+        invalid_product = Product(price=10, discounted_price=15)\n+        msg = \"Price should be greater than discounted price.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        # Assert that the custom code is attached to the raised ValidationError.\n+        self.assertEqual(cm.exception.code, \"price_discount_mismatch\")\n         msg = f\"Constraint \u201c{constraint.name}\u201d is violated.\"\n         with self.assertRaisesMessage(ValidationError, msg):\n             constraint.validate(Product, Product(price=500, discounted_price=5))\n@@ -280,6 +433,23 @@ class CheckConstraintTests(TestCase):\n             check=models.Q(price__gte=0) | models.Q(price__isnull=True),\n             name=\"positive_price\",\n         )\n+        \n+    def test_custom_violation_error_code(self):\n+        # Define a check constraint with a custom error message and code.\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"Price should be greater than discounted price.\",\n+            violation_error_code=\"price_discount_mismatch\",\n+        )\n+        # Create an invalid product instance to trigger validation error.\n+        invalid_product = Product(price=10, discounted_price=15)\n+        msg = \"Price should be greater than discounted price.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        # Assert that the custom code is attached to the raised ValidationError.\n+        self.assertEqual(cm.exception.code, \"price_discount_mismatch\")\n         constraint.validate(Product, Product())\n \n \n@@ -294,6 +464,23 @@ class UniqueConstraintTests(TestCase):\n             models.UniqueConstraint(fields=[\"foo\", \"bar\"], name=\"unique\"),\n             models.UniqueConstraint(fields=[\"foo\", \"bar\"], name=\"unique\"),\n         )\n+        \n+    def test_custom_violation_error_code(self):\n+        # Define a check constraint with a custom error message and code.\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"Price should be greater than discounted price.\",\n+            violation_error_code=\"price_discount_mismatch\",\n+        )\n+        # Create an invalid product instance to trigger validation error.\n+        invalid_product = Product(price=10, discounted_price=15)\n+        msg = \"Price should be greater than discounted price.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        # Assert that the custom code is attached to the raised ValidationError.\n+        self.assertEqual(cm.exception.code, \"price_discount_mismatch\")\n         self.assertEqual(\n             models.UniqueConstraint(fields=[\"foo\", \"bar\"], name=\"unique\"),\n             mock.ANY,\n@@ -341,6 +528,23 @@ class UniqueConstraintTests(TestCase):\n                 violation_error_message=\"custom error\",\n             ),\n         )\n+        \n+    def test_custom_violation_error_code(self):\n+        # Define a check constraint with a custom error message and code.\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"Price should be greater than discounted price.\",\n+            violation_error_code=\"price_discount_mismatch\",\n+        )\n+        # Create an invalid product instance to trigger validation error.\n+        invalid_product = Product(price=10, discounted_price=15)\n+        msg = \"Price should be greater than discounted price.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        # Assert that the custom code is attached to the raised ValidationError.\n+        self.assertEqual(cm.exception.code, \"price_discount_mismatch\")\n \n     def test_eq_with_condition(self):\n         self.assertEqual(\n@@ -660,6 +864,23 @@ class UniqueConstraintTests(TestCase):\n         non_unique_product = UniqueConstraintProduct(\n             name=self.p1.name, color=self.p1.color\n         )\n+        \n+    def test_custom_violation_error_code(self):\n+        # Define a check constraint with a custom error message and code.\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"Price should be greater than discounted price.\",\n+            violation_error_code=\"price_discount_mismatch\",\n+        )\n+        # Create an invalid product instance to trigger validation error.\n+        invalid_product = Product(price=10, discounted_price=15)\n+        msg = \"Price should be greater than discounted price.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        # Assert that the custom code is attached to the raised ValidationError.\n+        self.assertEqual(cm.exception.code, \"price_discount_mismatch\")\n         with self.assertRaisesMessage(ValidationError, msg):\n             constraint.validate(UniqueConstraintProduct, non_unique_product)\n         # Null values are ignored.\n@@ -685,6 +906,23 @@ class UniqueConstraintTests(TestCase):\n             non_unique_product,\n             exclude={\"name\", \"color\"},\n         )\n+        \n+    def test_custom_violation_error_code(self):\n+        # Define a check constraint with a custom error message and code.\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"Price should be greater than discounted price.\",\n+            violation_error_code=\"price_discount_mismatch\",\n+        )\n+        # Create an invalid product instance to trigger validation error.\n+        invalid_product = Product(price=10, discounted_price=15)\n+        msg = \"Price should be greater than discounted price.\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        # Assert that the custom code is attached to the raised ValidationError.\n+        self.assertEqual(cm.exception.code, \"price_discount_mismatch\")\n         # Validation on a child instance.\n         with self.assertRaisesMessage(ValidationError, msg):\n             constraint.validate(\n",
  "django__django-16569": "",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..84f0587 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,6 +43,39 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n+    def test_alterfield_reducing(self):\n+        # Tests that multiple AlterFields are reduced to the last one\n+        operations = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=256, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+            ),\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            ),\n+        ]\n+        expected = [\n+            migrations.AlterField(\n+                model_name=\"book\",\n+                name=\"title\",\n+                field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+            )\n+        ]\n+        self.assertOptimizesTo(operations, expected)\n+\n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..40740f6 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8456,6 +8456,44 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_custom_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Custom query string with multiple parameters\n+        response = self.client.get(\"%s?param1=value1&param2=value2\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?param1=value1&param2=value2\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_encoded_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Encoded query string\n+        response = self.client.get(f\"{known_url[:-1]}?next=%2Fdashboard%2F\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?next=%2Fdashboard%2F\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8463,6 +8501,44 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_custom_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Custom query string with multiple parameters\n+        response = self.client.get(\"%s?param1=value1&param2=value2\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?param1=value1&param2=value2\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_encoded_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Encoded query string\n+        response = self.client.get(f\"{known_url[:-1]}?next=%2Fdashboard%2F\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?next=%2Fdashboard%2F\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_script_name(self):\n         superuser = User.objects.create_user(\n@@ -8471,6 +8547,44 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_custom_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Custom query string with multiple parameters\n+        response = self.client.get(\"%s?param1=value1&param2=value2\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?param1=value1&param2=value2\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_encoded_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Encoded query string\n+        response = self.client.get(f\"{known_url[:-1]}?next=%2Fdashboard%2F\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?next=%2Fdashboard%2F\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n@@ -8481,6 +8595,44 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_custom_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Custom query string with multiple parameters\n+        response = self.client.get(\"%s?param1=value1&param2=value2\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?param1=value1&param2=value2\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_encoded_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Encoded query string\n+        response = self.client.get(f\"{known_url[:-1]}?next=%2Fdashboard%2F\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?next=%2Fdashboard%2F\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n     def test_missing_slash_append_slash_true_force_script_name(self):\n         superuser = User.objects.create_user(\n@@ -8489,6 +8641,44 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_custom_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Custom query string with multiple parameters\n+        response = self.client.get(\"%s?param1=value1&param2=value2\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?param1=value1&param2=value2\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_encoded_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Encoded query string\n+        response = self.client.get(f\"{known_url[:-1]}?next=%2Fdashboard%2F\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?next=%2Fdashboard%2F\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8499,6 +8689,44 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_custom_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Custom query string with multiple parameters\n+        response = self.client.get(\"%s?param1=value1&param2=value2\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?param1=value1&param2=value2\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_encoded_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Encoded query string\n+        response = self.client.get(f\"{known_url[:-1]}?next=%2Fdashboard%2F\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?next=%2Fdashboard%2F\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n@@ -8507,6 +8735,44 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"user@example.com\",\n             is_staff=False,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_custom_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Custom query string with multiple parameters\n+        response = self.client.get(\"%s?param1=value1&param2=value2\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?param1=value1&param2=value2\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_encoded_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Encoded query string\n+        response = self.client.get(f\"{known_url[:-1]}?next=%2Fdashboard%2F\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?next=%2Fdashboard%2F\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(user)\n         known_url = reverse(\"admin:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8622,6 +8888,44 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_custom_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Custom query string with multiple parameters\n+        response = self.client.get(\"%s?param1=value1&param2=value2\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?param1=value1&param2=value2\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_encoded_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Encoded query string\n+        response = self.client.get(f\"{known_url[:-1]}?next=%2Fdashboard%2F\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?next=%2Fdashboard%2F\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n@@ -8629,6 +8933,44 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_custom_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Custom query string with multiple parameters\n+        response = self.client.get(\"%s?param1=value1&param2=value2\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?param1=value1&param2=value2\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_encoded_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Encoded query string\n+        response = self.client.get(f\"{known_url[:-1]}?next=%2Fdashboard%2F\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?next=%2Fdashboard%2F\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=False)\n     def test_missing_slash_append_slash_false_without_final_catch_all_view(self):\n         superuser = User.objects.create_user(\n@@ -8637,6 +8979,44 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             email=\"staff@example.com\",\n             is_staff=True,\n         )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_custom_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Custom query string with multiple parameters\n+        response = self.client.get(\"%s?param1=value1&param2=value2\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?param1=value1&param2=value2\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_encoded_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        # Encoded query string\n+        response = self.client.get(f\"{known_url[:-1]}?next=%2Fdashboard%2F\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?next=%2Fdashboard%2F\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         self.client.force_login(superuser)\n         known_url = reverse(\"admin10:admin_views_article_changelist\")\n         response = self.client.get(known_url[:-1])\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..852d879 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,17 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        # Test for proper mime type handling for \".Z\" and \".br\" extensions\n+        test_tuples = (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..3555086 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,6 +922,35 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n+    def test_import_order_correct(self):\n+        \"\"\"\n+        Tests that imports in migration files are correctly ordered \n+        before from-imports, consistent with Django's style guide and isort.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(\n+                            default=time.time,\n+                        ),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        expected_import_order = (\n+            \"import datetime\\n\"\n+            \"import time\\n\"\n+            \"from django.db import migrations, models\\n\"\n+        )\n+        self.assertIn(expected_import_order, output)\n+\n     def test_migration_file_header_comments(self):\n         \"\"\"\n         Test comments at top of file.\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..3e0b0f0 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -328,6 +328,39 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n \n     PersonModel = Person\n \n+    def test_post_init_not_connected(self):\n+        \"\"\"\n+        Test to ensure the post_init signal is not connected when\n+        ImageField has no width or height fields.\n+        \"\"\"\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_connected_with_dimensions(self):\n+        \"\"\"\n+        Test to ensure the post_init signal is connected when\n+        ImageField has width and/or height fields.\n+        \"\"\"\n+        person_with_dimensions_model_id = id(PersonWithDimensions)\n+        self.assertIn(\n+            person_with_dimensions_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_connected_with_one_dimension(self):\n+        \"\"\"\n+        Test to ensure the post_init signal is connected when\n+        ImageField has only one dimension field.\n+        \"\"\"\n+        person_with_height_model_id = id(PersonWithHeight)\n+        self.assertIn(\n+            person_with_height_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers],\n+        )\n+\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..0ab82d1 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1148,6 +1148,28 @@ class OptimizerTests(SimpleTestCase):\n             ],\n             [migrations.RenameIndex(\"Pony\", new_name=\"new_name\", old_name=\"old_name\")],\n         )\n+        self.assertDoesNotOptimize(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\", \n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], \n+                        name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+                migrations.AddIndex(\n+                    \"Pony\", \n+                    models.Index(\n+                        fields=[\"weight\"], \n+                        name=\"idx_pony_weight\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight\"),\n+            ],\n+            []\n+        )\n+        \n         self.assertDoesNotOptimize(\n             [\n                 migrations.RenameIndex(\n@@ -1157,4 +1179,4 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..c54cdef 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -798,8 +798,9 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[1]' is not a callable, an attribute \"\n-                \"of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is \"\n+                \"not a callable, an attribute of 'SongAdmin', or an attribute of \"\n+                \"'admin_checks.Song'.\",\n                 obj=SongAdmin,\n                 id=\"admin.E035\",\n             )\n@@ -814,8 +815,9 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = CityInline(State, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[0]' is not a callable, an attribute \"\n-                \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is \"\n+                \"not a callable, an attribute of 'CityInline', or an attribute of \"\n+                \"'admin_checks.City'.\",\n                 obj=CityInline,\n                 id=\"admin.E035\",\n             )\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..181dafd 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -19,7 +20,28 @@ class XorLookupsTests(TestCase):\n             self.numbers[:3] + self.numbers[8:],\n         )\n \n-    def test_filter_negated(self):\n+    def test_filter_multiple_xor(self):\n+        qs = Number.objects.filter(\n+            Q(num__gte=1) ^\n+            Q(num__gte=3) ^\n+            Q(num__gte=5) ^\n+            Q(num__gte=7) ^\n+            Q(num__gte=9)\n+        )\n+        expected = [n.num for n in self.numbers if (n.num >= 1) ^ (n.num >= 3) ^ (n.num >= 5) ^ (n.num >= 7) ^ (n.num >= 9)]\n+        self.assertCountEqual(qs.values_list(\"num\", flat=True), expected)\n+\n+    def test_multiple_xor_edge_cases(self):\n+        # Test with an odd number of True conditions\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=0) ^ Q(num__lt=1) ^ Q(num__gte=9)),\n+            [self.numbers[0]] + self.numbers[9:],\n+        )\n+        # Test with an even number of True conditions\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=4) ^ Q(num__lt=6) ^ Q(num__gte=8) ^ Q(num__lt=10)),\n+            self.numbers[:4] + self.numbers[6:8] + self.numbers[10:],\n+        )\n         self.assertCountEqual(\n             Number.objects.filter(Q(num__lte=7) ^ ~Q(num__lt=3)),\n             self.numbers[:3] + self.numbers[8:],\n@@ -64,4 +86,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..1ae3952 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,7 +641,31 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n-    def test_failing_migration(self):\n+\n+    @override_settings(INSTALLED_APPS=['migrations', 'migrations2'])\n+    def test_makemigrations_respects_model_app_pair_in_router(self):\n+        \"\"\"\n+        Test that makemigrations uses correct app_label and model combinations\n+        when calling router.allow_migrate().\n+        \"\"\"\n+        allow_migrate_mock = mock.MagicMock(return_value=True)\n+\n+        with mock.patch.object(TestRouter, 'allow_migrate', allow_migrate_mock):\n+            call_command('makemigrations', 'migrations', verbosity=0)\n+\n+        # Check that allow_migrate() is called with the correct app_name/model_name pairs\n+        allowed_calls = [\n+            mock.call('default', 'migrations', model_name='UnicodeModel'),\n+            mock.call('default', 'migrations2', model_name='SomeOtherModel'),\n+        ]\n+        allow_migrate_mock.assert_any_call('default', 'migrations', model_name='UnicodeModel')\n+\n+        # Iterate over all calls to allow_migrate to check correctness\n+        for call in allow_migrate_mock.mock_calls:\n+            _, call_args, _ = call\n+            connection_alias, app_name = call_args\n+            self.assertIn(connection_alias, ['default', 'other'])\n+            apps.get_app_config(app_name).get_model(call.kwargs['model_name'])\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n \n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..3307acf 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -298,6 +298,11 @@ class PaginationTests(SimpleTestCase):\n             paginator.get_page(1)\n \n \n+from django.test import TestCase\n+from django.core.paginator import Paginator, EmptyPage\n+from myapp.models import Article  # Assuming there is an Article model in myapp.models\n+from datetime import datetime\n+\n class ModelPaginationTests(TestCase):\n     \"\"\"\n     Test pagination with Django model instances\n@@ -309,7 +314,27 @@ class ModelPaginationTests(TestCase):\n             a = Article(headline='Article %s' % x, pub_date=datetime(2005, 7, 29))\n             a.save()\n \n-    def test_first_page(self):\n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_paginator_with_more_pages(self):\n+        paginator = Paginator([1, 2, 3, 4, 5, 6, 7, 8], 3)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2, 3], [4, 5, 6], [7, 8]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+                \n+    def test_exhaust_iterator_raises_stop_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        next(page_iterator)\n+        next(page_iterator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n         paginator = Paginator(Article.objects.order_by('id'), 5)\n         p = paginator.page(1)\n         self.assertEqual(\"<Page 1 of 2>\", str(p))\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..2adb862 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,27 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_with_specified_bins_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), bins=5, range=(-1, 2), density=True)\n+    assert bins[0] == -1\n+    assert bins[-1] == 2\n+\n+def test_hist_without_range_and_density():\n+    # No range specified, but density=True\n+    data = np.random.rand(10) * 10 - 5  # data between -5 and 5\n+    _, bins, _ = plt.hist(data, bins=5, density=True)\n+    expected_min = np.floor(data.min())\n+    expected_max = np.ceil(data.max())\n+    assert bins[0] <= expected_min\n+    assert bins[-1] >= expected_max\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6387,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..81096af 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6961,6 +6961,26 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Create the reference figure without using clear\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Create the test figure using clear and verify\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..fba65cf 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -912,6 +912,35 @@ def test_proportional_colorbars():\n     extends = ['neither', 'both']\n     spacings = ['uniform', 'proportional']\n     fig, axs = plt.subplots(2, 2)\n+import pytest\n+import numpy as np\n+from matplotlib.colors import BoundaryNorm, from_levels_and_colors\n+from matplotlib.colorbar import Colorbar\n+import matplotlib.cm as cm\n+\n+@pytest.mark.parametrize(\"extend, coloroffset, res\", [\n+    ('both', 1, [np.array([[0., 0.], [0., 1.]]),\n+                 np.array([[1., 0.], [1., 1.]]),\n+                 np.array([[2., 0.], [2., 1.]])]),\n+    ('min', 0, [np.array([[0., 0.], [0., 1.]]),\n+                np.array([[1., 0.], [1., 1.]])]),\n+    ('max', 0, [np.array([[1., 0.], [1., 1.]]),\n+                np.array([[2., 0.], [2., 1.]])]),\n+    ('neither', -1, [np.array([[1., 0.], [1., 1.]])])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, res):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal',\n+                    drawedges=True)\n+    assert np.all(np.equal(cbar.dividers.get_segments(), res))\n+\n     for i in range(2):\n         for j in range(2):\n             CS3 = axs[i, j].contourf(X, Y, Z, levels, cmap=cmap, norm=norm,\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..d7357fd 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -495,6 +495,51 @@ def test_keymaps():\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+from matplotlib.testing.decorators import cleanup\n+\n+\n+@cleanup\n+def test_get_backend_rc_context_issue():\n+    \"\"\"\n+    Test to ensure that get_backend() does not clear figures from Gcf.figs \n+    if they were created under rc_context.\n+    \"\"\"\n+    with rc_context():\n+        fig1 = plt.figure()\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs}'\n+    assert before == after, f\"Gcf.figs changed: {before} -> {after}\"\n+\n+@cleanup\n+def test_get_backend_rc_context_with_initial_fig():\n+    \"\"\"\n+    Ensure that adding an initial figure outside rc_context prevents \n+    figures from being cleared.\n+    \"\"\"\n+    fig0 = plt.figure()\n+    with rc_context():\n+        fig1 = plt.figure()\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs}'\n+    assert before == after, f\"Gcf.figs changed: {before} -> {after}\"\n+\n+@cleanup\n+def test_get_backend_rc_context_with_ion():\n+    \"\"\"\n+    Test that plt.ion() prevents the clearing of figures created within rc_context.\n+    \"\"\"\n+    plt.ion()\n+    with rc_context():\n+        fig1 = plt.figure()\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs}'\n+    assert before == after, f\"Gcf.figs changed: {before} -> {after}\"\n+\n \n def test_rcparams_reset_after_fail():\n     # There was previously a bug that meant that if rc_context failed and\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..03ec9b4 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -12,8 +12,37 @@ from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n-\n import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_axes_visibility(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    \n+    # Set ax_test as invisible and ax_ref as default visible\n+    ax_test.set_visible(False)\n+    \n+    # Plot identical data on both axes to see the difference in visibility\n+    ax_test.scatter([1, 2], [1, 2], [1, 2])\n+    ax_ref.scatter([1, 2], [1, 2], [1, 2])\n+\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_axes_visibility_toggle(fig_test, fig_ref):\n+    ax1 = fig_test.add_subplot(121, projection='3d')\n+    ax2 = fig_test.add_subplot(122, projection='3d')\n+    \n+    ax1.set_visible(False)  # Hide first axes\n+\n+    ax3 = fig_ref.add_subplot(121, projection='3d')\n+    ax4 = fig_ref.add_subplot(122, projection='3d')\n+\n+    # Plot data on both sets for comparison\n+    ax1.scatter([1, 2], [1, 2], [1, 2])\n+    ax2.scatter([1, 2], [1, 2], [1, 2])\n+\n+    ax3.scatter([1, 2], [1, 2], [1, 2])\n+    ax4.scatter([1, 2], [1, 2], [1, 2])\n import numpy as np\n \n \n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..bc3c44d 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -156,9 +156,28 @@ def test_negative_rect():\n     neg_vertices = Rectangle((0, 0), -3, -2).get_verts()[:-1]\n     assert_array_equal(np.roll(neg_vertices, 2, 0), pos_vertices)\n \n+import matplotlib.pyplot as plt\n+import matplotlib.patches as mpatches\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_draw(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.2, 0.2)\n+    width, height = (0.6, 0.6)\n+    \n+    # Expected rendering using Line2D\n+    ax_ref.plot([loc[0], loc[0] + width], [loc[1], loc[1]], color='b', linewidth=3, linestyle=(0, (6, 6)))\n+    ax_ref.plot([loc[0] + width, loc[0] + width], [loc[1], loc[1] + height], color='r', linewidth=3, linestyle=(6, (6, 6)))\n \n-@image_comparison(['clip_to_bbox'])\n-def test_clip_to_bbox():\n+    # Testing the patch implementation\n+    rect_test = mpatches.Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, (6, 6)))\n+    rect_test2 = mpatches.Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(6, (6, 6)))\n+\n+    ax_test.add_patch(rect_test)\n+    ax_test.add_patch(rect_test2)\n     fig, ax = plt.subplots()\n     ax.set_xlim([-18, 20])\n     ax.set_ylim([-150, 100])\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..1fc1a45 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,35 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.patches import Rectangle\n+\n+def test_stackplot_color_cycler():\n+    # Verify the cycler behavior with stackplot\n+    fig, ax = plt.subplots()\n+\n+    # Use `C0` for a line plot\n+    ax.plot([1, 2], [1, 2], color='C0')\n+    # Use `C1` for a rectangle\n+    ax.add_patch(Rectangle((0.5, 0.5), 1, 1, facecolor='C1'))\n+\n+    # Use `C2`, `C3`, `C4` for a stackplot\n+    data = np.array([[1, 1, 1], [2, 2, 2], [3, 3, 3]])\n+    ax.stackplot([1, 2, 3], data, colors=['C2', 'C3', 'C4'])\n+\n+    # Plot another line to verify cycler is not affected\n+    ax.plot([1, 2], [2, 1], label='Check cycler', color='C0')\n+\n+    # Check the color order has not been disrupted\n+    lines = ax.get_lines()\n+    assert lines[0].get_color() == 'C0'\n+    assert lines[1].get_color() == 'C0'\n+\n+    # Display the plot (can also be checked visually or through image_comparison)\n+    plt.show()\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+# Existing test function\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..1dad8ae 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -5,7 +5,8 @@ import numpy as np\n from numpy.testing import assert_allclose\n import pytest\n \n-from matplotlib.testing.decorators import image_comparison\n+from matplotlib.offsetbox import HPacker, VPacker\n+from numpy.testing import assert_allclose\n import matplotlib.pyplot as plt\n import matplotlib.patches as mpatches\n import matplotlib.lines as mlines\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..7d8786f 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -576,7 +576,40 @@ def test_svg_font_string(font_str, include_generic):\n         rest = rest + [generic]\n     plt.rcParams[f\"font.{generic}\"] = rest\n     plt.rcParams[\"font.size\"] = size\n-    plt.rcParams[\"svg.fonttype\"] = \"none\"\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from io import BytesIO\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox\n+    # in output svg.\n+    fig = plt.figure()\n+    ax = fig.add_subplot()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"a test for issue 20044\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"a test for issue 20044\">'\n+    assert expected in buf\n \n     fig, ax = plt.subplots()\n     if generic == \"sans-serif\":\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..5ec2442 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,12 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+import warnings\n+import matplotlib.pyplot as plt\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n@@ -30,7 +36,21 @@ def test_create_lookup_table(N, result):\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n \n-def test_resampled():\n+@pytest.mark.parametrize(\"input_value, expected_warning\", [\n+    ((np.empty((0,), dtype=np.uint8)), None),\n+    ((np.array([257]), np.uint8), DeprecationWarning),\n+    ((np.array([256]), np.uint8), DeprecationWarning),\n+    ((np.array([258]), np.uint8), DeprecationWarning)\n+])\n+def test_colormap_with_edge_cases(input_value, expected_warning):\n+    cmap = plt.get_cmap()\n+    with warnings.catch_warnings(record=True) as w:\n+        warnings.simplefilter('always')\n+        cmap(input_value)\n+        if expected_warning:\n+            assert any(issubclass(warning.category, expected_warning) for warning in w)\n+        else:\n+            assert not w\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n     here we test the method for LinearSegmentedColormap as well.\n",
  "matplotlib__matplotlib-25122": "",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..a7ee3d4 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,27 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams.update({'xtick.labelcolor': 'blue'})\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams.update({'xtick.color': 'yellow', 'xtick.labelcolor': 'inherit'})\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams.update({'ytick.labelcolor': 'green'})\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams.update({'ytick.color': 'red', 'ytick.labelcolor': 'inherit'})\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..f057da2 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,28 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n \n @mpl.style.context(\"default\")\n+def test_pickle_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [10, 20, 15], label='sample data')\n+    legend = ax.legend(draggable=True)\n+    \n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Assert that there's no reference to FigureCanvasAgg in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    # Load the pickled figure and check properties\n+    loaded_fig = pickle.loads(pkl)\n+    loaded_canvas = loaded_fig.canvas\n+    assert loaded_canvas is not None\n+\n+    # Close the plot to clean up\n+    plt.close(fig)\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..4b84f16 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -34,7 +34,31 @@ def test_simple():\n #    pickle.dump(ax, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n     plt.figure()\n-    plt.bar(x=np.arange(10), height=np.arange(10))\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    \n+    # Sample data\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    \n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    \n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+    \n+    # Align the labels\n+    fig.align_labels()\n+    \n+    # Try pickling after aligning labels\n+    try:\n+        pickle_data = pickle.dumps(fig, protocol=pickle.HIGHEST_PROTOCOL)\n+        assert pickle_data is not None, \"Pickling failed after aligning labels!\"\n+    except Exception as e:\n+        assert False, f\"Pickling raised an exception: {e}\"\n     pickle.dump(plt.gca(), BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n     fig = plt.figure()\n@@ -44,6 +68,11 @@ def test_simple():\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n \n+import matplotlib.pyplot as plt\n+import pickle\n+from io import BytesIO\n+import numpy as np\n+\n def _generate_complete_test_figure(fig_ref):\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..866f871 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,6 +991,45 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n \n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..7e89ff3 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,38 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_with_transform(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # Create some contour data\n+    data = [[0, 1], [2, 3]]\n+\n+    # Generate contours on both figures\n+    cs_test = ax_test.contour(data)\n+    cs_ref = ax_ref.contour(data)\n+\n+    # Create a transform that just scales the original paths\n+    transform = matplotlib.transforms.Affine2D().scale(2)\n+\n+    # Apply the transform manually to the paths in cs_ref\n+    transformed_paths = [Path(p.vertices @ transform.get_matrix()[:2, :2] + transform.get_matrix()[:2, 2])\n+                         for p in cs_ref.get_paths()]\n+\n+    # Use the set_paths method to replace the existing paths with transformed paths\n+    cs_test.set_paths(transformed_paths)\n+\n+    # The cs_test should now look exactly like the transformed cs_ref\n+\n+from matplotlib import pyplot as plt\n+from matplotlib.path import Path\n+import matplotlib\n+import numpy as np\n+import pytest\n+\n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "diff --git a/tests/_core/test_plot.py b/tests/_core/test_plot.py\nindex 3d202bc..9209bca 100644\n--- a/tests/_core/test_plot.py\n+++ b/tests/_core/test_plot.py\n@@ -646,6 +646,13 @@ class TestScaling:\n             p.plot()\n \n \n+import pytest\n+import matplotlib as mpl\n+from seaborn._core.plot import Plot\n+from seaborn._core.scales import Nominal\n+from seaborn._statistics import MockMark\n+from seaborn._core.axis import PseudoAxis\n+\n class TestPlotting:\n \n     def test_matplotlib_object_creation(self):\n",
  "pallets__flask-5014": "",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..6d4d83c 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,7 +81,21 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n         ))\n+        \n+    @pytest.mark.parametrize(\n+        'exception, url', (\n+            (InvalidURL, 'http://.com'),\n+            (InvalidURL, 'http://..example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://example.-com'),\n+            (InvalidURL, 'http://-example.com'),\n+            (InvalidURL, 'http://example.com-'),\n+        ))\n+    def test_various_invalid_urls(self, exception, url):\n+        with pytest.raises(exception):\n+            requests.get(url)\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n             requests.get(url)\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..f3c5a53 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2314,8 +2314,39 @@ def test_raise_no_warning_for_nan_in_binary_ops():\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n \n+import numpy as np\n+import pytest\n+from xarray import DataArray, Variable\n+\n+# Adding test cases to verify the fix for the described issue\n+def test_variable_setitem_no_type_coercion_for_objects_with_values_property():\n+    # Type with `values` as an attribute (Issue example)\n+    class HasValues:\n+        values = 5\n+\n+    # Create DataArray instances\n+    good_indexed, bad_indexed = DataArray([None]), DataArray([None])\n+\n+    # Perform assignments\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+\n+    # Assertions\n+    # Expect the objects to be stored correctly without coercion\n+    assert isinstance(good_indexed.values[0], set)\n+    assert isinstance(bad_indexed.values[0], HasValues)\n+\n+def test_variable_setitem_custom_with_values_attr():\n+    # Type with data stored in values attribute\n+    class CustomWithValuesAttr:\n+        def __init__(self, array):\n+            self.values = array\n+\n+    array = CustomWithValuesAttr(np.arange(3))\n+    orig = Variable(dims=(), data=array)\n \n-class TestBackendIndexing:\n+    # Ensure the original functionality is maintained\n+    assert isinstance(orig._data.item(), CustomWithValuesAttr)\n     \"\"\"    Make sure all the array wrappers can be indexed. \"\"\"\n \n     @pytest.fixture(autouse=True)\n",
  "pydata__xarray-3095": "",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..c755fd6 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -611,6 +611,42 @@ class TestCombineAuto:\n         expected = Dataset({'x': 0, 'y': 1, 'z': 2})\n         assert_identical(expected, actual)\n \n+    def test_combine_leaving_bystander_dimensions(self):\n+        # Check non-monotonic bystander dimension coord doesn't raise\n+        # ValueError on combine (https://github.com/pydata/xarray/issues/3150)\n+        ycoord = ['a', 'c', 'b']\n+\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n+    def test_combine_with_identical_non_monotonic_coords(self):\n+        # This test checks if combine_by_coords correctly handles identical\n+        # and non-monotonic coordinates across multiple datasets.\n+        ycoord = ['x', 'z', 'y']\n+\n+        ds1 = Dataset({'data': (('x', 'y'), np.random.rand(2, 3))},\n+                      coords={'x': [10, 20], 'y': ycoord})\n+\n+        ds2 = Dataset({'data': (('x', 'y'), np.random.rand(3, 3))},\n+                      coords={'x': [30, 40, 50], 'y': ycoord})\n+\n+        expected = Dataset({'data': (('x', 'y'), np.concatenate([ds1.data.values, ds2.data.values], axis=0))},\n+                           coords={'x': [10, 20, 30, 40, 50], 'y': ycoord})\n+\n+        actual = combine_by_coords([ds1, ds2])\n+        assert_identical(expected, actual)\n+\n     def test_check_for_impossible_ordering(self):\n         ds0 = Dataset({'x': [0, 1, 5]})\n         ds1 = Dataset({'x': [2, 3]})\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..b4c82b4 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,8 +2309,22 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n-\n-    def test_reduce_keep_attrs(self):\n+    \n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        import numpy as np\n+        from collections import OrderedDict\n+        \n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        out = da.quantile(0.9, dim='x', keep_attrs=True)\n+        assert out.attrs == {'units': 'K'}\n+\n+        da_multi = xr.DataArray([[1, 2], [3, 4]], dims=[\"x\", \"y\"], attrs={'description': 'sample data'})\n+        out_multi = da_multi.quantile([0.25, 0.75], dim='x', keep_attrs=True)\n+        assert out_multi.attrs == {'description': 'sample data'}\n+\n+        out_no_attrs = da.quantile(0.9, dim='x', keep_attrs=False)\n+        assert out_no_attrs.attrs == {}\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..36ef8ed 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,8 +1,10 @@\n+\n import numpy as np\n import pytest\n \n import xarray as xr\n from xarray.core import dtypes, merge\n+from xarray.testing import assert_identical\n \n from . import raises_regex\n from .test_dataset import create_test_data\n@@ -159,7 +161,28 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n-    def test_merge_broadcast_equals(self):\n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+        assert_identical(ds.merge(da), xr.merge([ds, da]))\n+\n+    def test_merge_dataarray_with_existing_variable(self):\n+        ds = xr.Dataset({\"a\": 0, \"b\": 2})\n+        da = xr.DataArray(data=1, name=\"b\")\n+        with pytest.raises(xr.MergeError):\n+            ds.merge(da)\n+\n+    def test_merge_dataarray_with_coords(self):\n+        ds = xr.Dataset({\"a\": 0}, coords={\"x\": 5})\n+        da = xr.DataArray(data=1, name=\"b\", coords={\"x\": 5})\n+        expected = xr.Dataset({\"a\": 0, \"b\": 1}, coords={\"x\": 5})\n+        assert_identical(ds.merge(da), expected)\n+\n+    def test_merge_dataarray_mismatched_coords(self):\n+        ds = xr.Dataset({\"a\": 0}, coords={\"x\": 5})\n+        da = xr.DataArray(data=1, name=\"b\", coords={\"x\": 10})\n+        with pytest.raises(xr.MergeError):\n+            ds.merge(da)\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n         actual = ds1.merge(ds2)\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..989751c 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -604,6 +604,22 @@ def test_min_count_dataset(func):\n     assert_allclose(actual, expected)\n \n \n+@pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n+@pytest.mark.parametrize(\"dask\", [False, True])\n+@pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n+def test_min_count_multiple_dims(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+\n+    min_count = 3\n+    da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n+    # Test sum with min_count across multiple dimensions and ensure no ValueError.\n+    actual = getattr(da, func)(dim=[\"x\", \"y\", \"z\"], skipna=True, min_count=min_count)\n+    expected = getattr(da, func)(dim=..., skipna=True, min_count=min_count)\n+\n+    assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n+\n @pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n @pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..0b9b18a 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,22 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+\n+    def test_merge_attrs_override_independence(self):\n+        # Test if the attributes of the merged dataset are independent of the source datasets\n+        ds1 = xr.Dataset(attrs={\"a\": \"b\"})\n+        ds2 = xr.Dataset(attrs={\"a\": \"c\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs['a'] = 'd'\n+        assert ds1.attrs[\"a\"] == 'b'\n+        assert ds2.attrs[\"a\"] == 'c'\n+        assert ds3.attrs[\"a\"] == 'd'\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..6aebba7 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1922,6 +1922,20 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n+def test_where_attrs() -> None:\n+    # create DataArray with attributes\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    \n+    # perform xr.where operation with keep_attrs=True\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    \n+    # expect attributes from 'x' to be preserved\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    \n+    assert_identical(expected, actual)\n+\n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n",
  "pydata__xarray-4695": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 3a4b8ad..cbd7e71 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -64,7 +64,21 @@ class TestDataArray:\n         )\n         self.mda = DataArray([0, 1, 2, 3], coords={\"x\": self.mindex}, dims=\"x\")\n \n-    def test_repr(self):\n+    def test_loc_dim_name_collision_with_sel_params(self):\n+        da = DataArray(\n+            [[0, 0], [1, 1]],\n+            dims=[\"dim1\", \"method\"],\n+            coords={\"dim1\": [\"x\", \"y\"], \"method\": [\"a\", \"b\"]},\n+        )\n+        np.testing.assert_array_equal(\n+            da.loc[dict(dim1=[\"x\", \"y\"], method=[\"a\"])], [[0], [1]]\n+        )\n+\n+    def test_loc_with_method_dim(self):\n+        empty = np.zeros((2, 2))\n+        D2 = DataArray(empty, dims=[\"dim1\", \"method\"], coords={\"dim1\": [\"x\", \"y\"], \"method\": [\"a\", \"b\"]})\n+        result = D2.loc[dict(dim1=\"x\", method=\"a\")]\n+        assert result.item() == 0\n         v = Variable([\"time\", \"x\"], [[1, 2, 3], [4, 5, 6]], {\"foo\": \"bar\"})\n         coords = {\"x\": np.arange(3, dtype=np.int64), \"other\": np.int64(0)}\n         data_array = DataArray(v, coords, name=\"my_variable\")\n",
  "pydata__xarray-4966": "",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..56fce26 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1920,6 +1920,12 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n+def test_where_scalar_with_keep_attrs() -> None:\n+    cond = xr.DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)  # scalar as the second argument\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})\n+    assert_identical(expected, actual)\n+\n def test_where_attrs() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n     x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..7337ba8 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2000,6 +2000,53 @@ def test_where_attrs() -> None:\n             xr.Dataset({\"a\": (\"x\", [1, 2, 3]), \"b\": (\"y\", [3, 4, 5])}),\n             id=\"dataset-dataset\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array(\n+                    [\"2021-04-01T05:25:19.000000000\", \n+                     \"2021-04-01T05:25:29.000000000\", \n+                     \"2021-04-01T05:25:39.000000000\", \n+                     \"2021-04-01T05:25:49.000000000\", \n+                     \"2021-04-01T05:25:59.000000000\", \n+                     \"2021-04-01T05:26:09.000000000\"], \n+                    dtype=\"datetime64[ns]\"\n+                ),\n+                dims=\"azimuth_time\",\n+                coords={\"azimuth_time\": (np.array([1000, 2000, 3000, 4000, 5000, 6000], dtype=\"timedelta64[ns]\"))},\n+            ),\n+            xr.DataArray(\n+                [\n+                    [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],\n+                    [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],\n+                    [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],\n+                    [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],\n+                    [4.44739216e06, 1.45053974e06, 5.29960857e06],\n+                ],\n+                dims=(\"degree\", \"axis\"),\n+                coords={\"axis\": [0, 1, 2], \"degree\": [4, 3, 2, 1, 0]},\n+            ),\n+            xr.DataArray(\n+                [\n+                    [4447392.16, 1450539.74, 5299608.57],\n+                    [4505537.25, 1448882.82, 5250846.35],\n+                    [4563174.92, 1446979.12, 5201491.44],\n+                    [4620298.31, 1444829.59, 5151549.37],\n+                    [4676900.67, 1442435.23, 5101025.78],\n+                    [4732975.25, 1439797.08, 5049926.34],\n+                ],\n+                dims=(\"azimuth_time\", \"axis\"),\n+                coords={\"azimuth_time\": (np.array([1000, 2000, 3000, 4000, 5000, 6000], dtype=\"timedelta64[ns]\"))},\n+            ),\n+            id=\"timedelta_complex\",\n+        ),\n         pytest.param(\n             xr.DataArray(pd.date_range(\"1970-01-01\", freq=\"s\", periods=3), dims=\"x\"),\n             xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n@@ -2010,6 +2057,53 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array(\n+                    [\"2021-04-01T05:25:19.000000000\", \n+                     \"2021-04-01T05:25:29.000000000\", \n+                     \"2021-04-01T05:25:39.000000000\", \n+                     \"2021-04-01T05:25:49.000000000\", \n+                     \"2021-04-01T05:25:59.000000000\", \n+                     \"2021-04-01T05:26:09.000000000\"], \n+                    dtype=\"datetime64[ns]\"\n+                ),\n+                dims=\"azimuth_time\",\n+                coords={\"azimuth_time\": (np.array([1000, 2000, 3000, 4000, 5000, 6000], dtype=\"timedelta64[ns]\"))},\n+            ),\n+            xr.DataArray(\n+                [\n+                    [2.33333335e-43, 1.62499999e-43, 2.79166678e-43],\n+                    [-1.15316667e-30, 1.49518518e-31, 9.08833333e-31],\n+                    [-2.50272583e-18, -1.23851062e-18, -2.99098229e-18],\n+                    [5.83965193e-06, -1.53321770e-07, -4.84640242e-06],\n+                    [4.44739216e06, 1.45053974e06, 5.29960857e06],\n+                ],\n+                dims=(\"degree\", \"axis\"),\n+                coords={\"axis\": [0, 1, 2], \"degree\": [4, 3, 2, 1, 0]},\n+            ),\n+            xr.DataArray(\n+                [\n+                    [4447392.16, 1450539.74, 5299608.57],\n+                    [4505537.25, 1448882.82, 5250846.35],\n+                    [4563174.92, 1446979.12, 5201491.44],\n+                    [4620298.31, 1444829.59, 5151549.37],\n+                    [4676900.67, 1442435.23, 5101025.78],\n+                    [4732975.25, 1439797.08, 5049926.34],\n+                ],\n+                dims=(\"azimuth_time\", \"axis\"),\n+                coords={\"azimuth_time\": (np.array([1000, 2000, 3000, 4000, 5000, 6000], dtype=\"timedelta64[ns]\"))},\n+            ),\n+            id=\"timedelta_complex\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..1e9d727 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,6 +221,18 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # Verify that chunks property does not load data into memory for zarr backed datasets\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = xr.open_dataset(url, engine='zarr', chunks={})\n+        \n+        # Check the type of the backed data is lazy\n+        assert isinstance(ds['var1'].data, xr.backends.zarr.ZarrArray)\n+        \n+        # Ensure that accessing chunks does not load data into memory\n+        assert ds.chunks is not None\n+        assert isinstance(ds.chunks, dict)\n+\n     def test_repr(self) -> None:\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..e9c95e7 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -49,7 +49,18 @@ class TestDataArrayRolling:\n                     expected.values[expected.values.nonzero()],\n                 )\n \n-    @pytest.mark.parametrize(\"da\", (1,), indirect=True)\n+    @pytest.mark.parametrize(\"da\", (xr.DataArray(np.arange(1,10), dims=\"x\"),), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    @pytest.mark.parametrize(\"size\", [1, 2, 3, 7])\n+    def test_rolling_center_justification(self, da, center: bool, size: int) -> None:\n+        rolling_obj = da.rolling(x=size, center=center)\n+        rolling_obj_mean = rolling_obj.mean()\n+\n+        # Test manual iteration vs rolling.mean\n+        manual_results = [window.mean().item() for label, window in rolling_obj]\n+        auto_results = rolling_obj_mean.values.tolist()\n+\n+        assert manual_results == auto_results\n     def test_rolling_repr(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         assert repr(rolling_obj) == \"DataArrayRolling [time->7]\"\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..b59340a 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,21 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import numpy as np\n+import xarray as xr\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+def test_stack_int32_to_int64_fix():\n+    ds = xr.Dataset(coords={'a': np.array([0], dtype='int32')})\n+    assert ds['a'].values.dtype == ds.stack(b=('a',))['a'].values.dtype\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+def test_stack_float32_on_multiindex():\n+    ds = xr.Dataset(coords={'a': np.array([0.5], dtype='float32')})\n+    stacked_ds = ds.stack(b=('a',))\n+    assert stacked_ds['a'].values.dtype == ds['a'].values.dtype\n",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..1cde0fd 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -494,11 +494,27 @@ def test_get_map_data() -> None:\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n \n-    assert len(expected_linelists) == len(data)\n+import pytest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from similar import Run\n+\n+def test_no_duplicate_lines_when_set_to_zero():\n+    output = StringIO()\n+    # Assuming SIMILAR3 and SIMILAR4 represent files with identical content \n+    # that would normally be flagged as duplicates when min-similarity-lines > 0\n+    SIMILAR3 = \"file3.py\"\n+    SIMILAR4 = \"file4.py\"\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=0\", SIMILAR3, SIMILAR4])\n+    # Expect SystemExit code 0, indicating no errors (i.e., no duplicated code found)\n+    assert ex.value.code == 0\n+    # Expect empty output as no duplicates should be reported\n+    assert output.getvalue() == \"\"\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n     ):\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..5307953 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,38 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import pytest\n+from pylint.lint import Run\n+from pytest import CaptureFixture\n+from pathlib import Path\n+\n+EMPTY_MODULE = Path(__file__).parent / \"empty_module.py\"\n+\n+def test_short_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the -v flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_verbose_equivalence(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that -v and --verbose are equivalent.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    short_output = capsys.readouterr().err\n+    \n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    long_output = capsys.readouterr().err\n+    \n+    assert short_output == long_output\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex d5ccd91..cab63cb 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -863,8 +863,66 @@ def test_by_module_statement_value(initialized_linter: PyLinter) -> None:\n         # computed for that module\n         assert module_stats[\"statement\"] == linter2.stats.statement\n \n+import os\n+from pylint.lint import Run\n+from os.path import join\n+\n+def test_recursive_ignore():\n+    run = Run([\n+        \"--recursive\", \"y\",\n+        \"--ignore\", \"ignored_subdirectory\",\n+        join(\"tests/regrtest_data\", \"directory\"),\n+    ], exit=False)\n+\n+    linted_files = run.linter._iterate_file_descrs(\n+        tuple(run.linter._discover_files([join(\"tests/regrtest_data\", \"directory\")]))\n+    )\n+    linted_file_paths = [file_item.filepath for file_item in linted_files]\n+\n+    ignored_file = os.path.abspath(\n+        join(\"tests/regrtest_data\", \"directory\", \"ignored_subdirectory\", \"failing.py\")\n+    )\n+    \n+    # Ensure that the ignored file is not in the linted files\n+    assert ignored_file not in linted_file_paths\n+\n+def test_recursive_ignore_patterns():\n+    run = Run([\n+        \"--recursive\", \"y\",\n+        \"--ignore-patterns\", \"ignored_*\",\n+        join(\"tests/regrtest_data\", \"directory\"),\n+    ], exit=False)\n+\n+    linted_files = run.linter._iterate_file_descrs(\n+        tuple(run.linter._discover_files([join(\"tests/regrtest_data\", \"directory\")]))\n+    )\n+    linted_file_paths = [file_item.filepath for file_item in linted_files]\n \n-def test_import_sibling_module_from_namespace(initialized_linter: PyLinter) -> None:\n+    ignored_file = os.path.abspath(\n+        join(\"tests/regrtest_data\", \"directory\", \"ignored_subdirectory\", \"failing.py\")\n+    )\n+    \n+    # Ensure that the ignored file is not in the linted files\n+    assert ignored_file not in linted_file_paths\n+\n+def test_recursive_ignore_paths():\n+    run = Run([\n+        \"--recursive\", \"y\",\n+        \"--ignore-paths\", \".*ignored.*\",\n+        join(\"tests/regrtest_data\", \"directory\"),\n+    ], exit=False)\n+\n+    linted_files = run.linter._iterate_file_descrs(\n+        tuple(run.linter._discover_files([join(\"tests/regrtest_data\", \"directory\")]))\n+    )\n+    linted_file_paths = [file_item.filepath for file_item in linted_files]\n+\n+    ignored_file = os.path.abspath(\n+        join(\"tests/regrtest_data\", \"directory\", \"ignored_subdirectory\", \"failing.py\")\n+    )\n+    \n+    # Ensure that the ignored file is not in the linted files\n+    assert ignored_file not in linted_file_paths\n     \"\"\"If the parent directory above `namespace` is on sys.path, ensure that\n     modules under `namespace` can import each other without raising `import-error`.\"\"\"\n     linter = initialized_linter\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..82515b3 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,8 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n@@ -172,7 +174,28 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n \n-def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n+def test_caplog_get_records_consistency_after_clear(caplog) -> None:\n+    \"\"\"Test to ensure caplog.get_records() is consistent with caplog.records after caplog.clear().\"\"\"\n+    # Step 1: Verify initial consistency.\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    verify_consistency()\n+\n+    # Step 2: Log a warning and check consistency again.\n+    logging.warning(\"initial log\")\n+    verify_consistency()\n+\n+    # Step 3: Clear caplog and check consistency.\n+    caplog.clear()\n+    verify_consistency()\n+\n+    # Step 4: Log another warning and ensure consistency is restored.\n+    logging.warning(\"log after clear\")\n+    assert len(caplog.get_records(\"call\")) == 1\n+    assert len(caplog.records) == 1\n+    assert caplog.get_records(\"call\")[0].message == \"log after clear\"\n+    verify_consistency()\n     pytester.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_debugging.py b/testing/test_debugging.py\nindex 912abd7..9da11c6 100644\n--- a/testing/test_debugging.py\n+++ b/testing/test_debugging.py\n@@ -192,33 +192,60 @@ class TestPDB:\n         child.sendeof()\n         self.flush(child)\n \n-    def test_pdb_print_captured_stdout_and_stderr(self, pytester: Pytester) -> None:\n+    def test_unittest_teardown_skip_class_level(self, pytester: Pytester) -> None:\n+        \"\"\"Test for issue reported with unittest.TestCase.tearDown executed after skipping.\"\"\"\n         p1 = pytester.makepyfile(\n             \"\"\"\n-            def test_1():\n-                import sys\n-                sys.stderr.write(\"get\\\\x20rekt\")\n-                print(\"get\\\\x20rekt\")\n-                assert False\n+            import unittest\n \n-            def test_not_called_due_to_quit():\n-                pass\n+            @unittest.skip(\"skip this class\")\n+            class MyTestCase(unittest.TestCase):\n+\n+                def setUp(self):\n+                    self.addCleanup(self.cleanup_method)\n+\n+                def cleanup_method(self):\n+                    print(\"Running cleanup_method...\")\n+\n+                def tearDown(self):\n+                    print(\"Running tearDown...\")\n+\n+                def test_method(self):\n+                    assert False\n         \"\"\"\n         )\n         child = pytester.spawn_pytest(\"--pdb %s\" % p1)\n-        child.expect(\"captured stdout\")\n-        child.expect(\"get rekt\")\n-        child.expect(\"captured stderr\")\n-        child.expect(\"get rekt\")\n-        child.expect(\"traceback\")\n-        child.expect(\"def test_1\")\n-        child.expect(\"Pdb\")\n+        child.expect(\"skip this class\")\n+        child.expect_exact(\"= 1 skipped in\")\n+        child.sendeof()\n+        self.flush(child)\n+        \n+    def test_unittest_teardown_skip_method_level(self, pytester: Pytester) -> None:\n+        \"\"\"Test for issue reported with unittest.TestCase.tearDown executed after skipping.\"\"\"\n+        p1 = pytester.makepyfile(\n+            \"\"\"\n+            import unittest\n+\n+            class MyTestCase(unittest.TestCase):\n+\n+                @unittest.skip(\"skip this test\")\n+                def setUp(self):\n+                    self.addCleanup(self.cleanup_method)\n+\n+                def cleanup_method(self):\n+                    print(\"Running cleanup_method...\")\n+\n+                def tearDown(self):\n+                    print(\"Running tearDown...\")\n+\n+                def test_method(self):\n+                    assert False\n+        \"\"\"\n+        )\n+        child = pytester.spawn_pytest(\"--pdb %s\" % p1)\n+        child.expect(\"skip this test\")\n+        child.expect_exact(\"= 1 skipped in\")\n         child.sendeof()\n-        rest = child.read().decode(\"utf8\")\n-        assert \"Exit: Quitting debugger\" in rest\n-        assert \"= 1 failed in\" in rest\n-        assert \"def test_1\" not in rest\n-        assert \"get rekt\" not in rest\n         self.flush(child)\n \n     def test_pdb_dont_print_empty_captured_stdout_and_stderr(\n",
  "pytest-dev__pytest-5262": "",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 8c1c2d7..3ecf5fd 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1,5 +1,7 @@\n+\n import gc\n \n+import numpy as np\n import pytest\n from _pytest.main import ExitCode\n \n@@ -13,13 +15,30 @@ def test_simple_unittest(testdir):\n                 self.assertEqual('foo', 'foo')\n             def test_failing(self):\n                 self.assertEqual('foo', 'bar')\n-    \"\"\"\n+        \"\"\"\n     )\n     reprec = testdir.inline_run(testpath)\n     assert reprec.matchreport(\"testpassing\").passed\n     assert reprec.matchreport(\"test_failing\").failed\n \n \n+def test_patch_numpy_array(testdir):\n+    \"\"\"Test to ensure patching with numpy array works without ValueError.\"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        from unittest.mock import patch\n+        import numpy as np\n+\n+        class TestNumpyPatch:\n+            @patch('numpy.array', new=np.array([-5.5, 3.0]))\n+            def test_patch_array(self):\n+                assert np.array([-5.5, 3.0]).shape == (2,)\n+        \"\"\"\n+    )\n+    result = testdir.inline_run(p)\n+    result.assertoutcome(passed=1)\n+\n+\n def test_runTest_method(testdir):\n     testdir.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..a534dab 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -116,9 +116,25 @@ class TestPaste(object):\n             monkeypatch.setattr(urllib, \"urlopen\", mocked)\n         else:\n             import urllib.request\n+    import pytest\n \n-            monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n-        return calls\n+    @pytest.fixture\n+    def pastebin():\n+        return Pastebin()\n+\n+    @pytest.fixture\n+    def mocked_urlopen():\n+        calls = []\n+\n+        def mocked(url, data=None):\n+            calls.append((url, data))\n+            class MockResponse:\n+                def __init__(self, data):\n+                    self.data = data\n+\n+                def read(self):\n+                    return b'<a href=\"/raw/3c0c6750bd\">Link</a>'\n+            return MockResponse(data)\n \n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n@@ -130,4 +146,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..7f90329 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -201,6 +202,23 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n+\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n+\n+\n def test_dynamic_fixture_request(testdir):\n     p = testdir.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-7236": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 28ce115..91fbb4d 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -211,6 +211,9 @@ class TestCaseFunction(Function):\n         maybe_wrap_pytest_function_for_tracing(self)\n \n         # let the unittest framework handle async functions\n+        import pytest\n+        import unittest\n+\n         if is_async_function(self.obj):\n             self._testcase(self)\n         else:\n@@ -222,7 +225,11 @@ class TestCaseFunction(Function):\n             # when absolutely needed\n             if self.config.getoption(\"usepdb\"):\n                 self._explicit_tearDown = self._testcase.tearDown\n-                setattr(self._testcase, \"tearDown\", lambda *args: None)\n+                def dummy_tearDown(*args):\n+                    pytest.test_pdb_teardown_skipped.append(\"dummy_tearDown:\" + self._testcase.id())\n+                    \n+                self._explicit_tearDown = self._testcase.tearDown\n+                setattr(self._testcase, \"tearDown\", dummy_tearDown)\n \n             # we need to update the actual bound method with self.obj, because\n             # wrap_pytest_function_for_tracing replaces self.obj by a wrapper\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..bb12491 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -607,6 +607,19 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n \n+    def test_skip_location_reporting_with_runxfail(self, testdir):\n+        \"\"\"Test that --runxfail does not alter skip location reporting.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_skip_location_reporting_with_runxfail.py:4: unconditional skip\", \"*1 skipped*\"])\n+\n     def test_skip_with_reason(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..575b70c 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,4 +1,6 @@\n+\n import sys\n+from _pytest.pytester import Testdir\n \n import pytest\n from _pytest.runner import runtestprotocol\n@@ -154,7 +156,30 @@ class TestEvaluation:\n \n \n class TestXFail:\n-    @pytest.mark.parametrize(\"strict\", [True, False])\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Verify that dynamically adding an xfail marker during test execution results in xfail\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Verify that a dynamically added strict xfail marker during a passed test results in failure\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n             \"\"\"\n@@ -463,7 +488,30 @@ class TestXFail:\n         result.stdout.fnmatch_lines([\"*XFAIL*\", \"*unsupported feature*\"])\n         assert result.ret == 0\n \n-    @pytest.mark.parametrize(\"strict\", [True, False])\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Verify that dynamically adding an xfail marker during test execution results in xfail\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Verify that a dynamically added strict xfail marker during a passed test results in failure\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     def test_strict_xfail(self, testdir, strict):\n         p = testdir.makepyfile(\n             \"\"\"\n@@ -490,7 +538,30 @@ class TestXFail:\n         assert result.ret == (1 if strict else 0)\n         assert testdir.tmpdir.join(\"foo_executed\").isfile()\n \n-    @pytest.mark.parametrize(\"strict\", [True, False])\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Verify that dynamically adding an xfail marker during test execution results in xfail\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Verify that a dynamically added strict xfail marker during a passed test results in failure\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     def test_strict_xfail_condition(self, testdir, strict):\n         p = testdir.makepyfile(\n             \"\"\"\n@@ -506,7 +577,30 @@ class TestXFail:\n         result.stdout.fnmatch_lines([\"*1 passed*\"])\n         assert result.ret == 0\n \n-    @pytest.mark.parametrize(\"strict\", [True, False])\n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Verify that dynamically adding an xfail marker during test execution results in xfail\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Verify that a dynamically added strict xfail marker during a passed test results in failure\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n     def test_xfail_condition_keyword(self, testdir, strict):\n         p = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..7c71db1 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,7 +513,36 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n+import pytest\n+\n+@pytest.mark.parametrize(\"newline\", [\"\\n\", \"\\r\\n\", \"\\r\"])\n+def test_capfd_preserves_newlines(capfd, newline):\n+    print(\"test\", end=newline)\n+    out, err = capfd.readouterr()\n+    assert out.endswith(newline)\n+    assert err == \"\"\n \n+@pytest.mark.parametrize(\"newline\", [\"\\n\", \"\\r\\n\", \"\\r\"])\n+def test_capfd_combined_stdout_stderr_newlines(capfd, newline):\n+    print(\"out\", end=newline)\n+    print(\"err\", end=newline, file=sys.stderr)\n+    out, err = capfd.readouterr()\n+    assert out.endswith(newline)\n+    assert err.endswith(newline)\n+\n+@pytest.mark.parametrize(\"newline\", [\"\\n\", \"\\r\\n\", \"\\r\"])\n+def test_capfdbinary_preserves_newlines(capfdbinary, newline):\n+    # Encoding test strings to bytes to simulate binary output\n+    test_bytes_out = f\"test_out{newline}\".encode('ascii')\n+    test_bytes_err = f\"test_err{newline}\".encode('ascii')\n+    \n+    # Writing \"binary\" output\n+    os.write(1, test_bytes_out)\n+    os.write(2, test_bytes_err)\n+    \n+    out, err = capfdbinary.readouterr()\n+    assert out.endswith(test_bytes_out)\n+    assert err.endswith(test_bytes_err)\n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..f136062 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -27,7 +28,60 @@ def test_change_level(caplog):\n     assert \"CRITICAL\" in caplog.text\n \n \n-def test_change_level_undo(testdir):\n+def test_change_level_undos_handler_level(testdir: Testdir) -> None:\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\n+\n+    Issue #7569. Tests the handler level specifically.\n+    \"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n+def test_change_level_undos_logger_level(testdir: Testdir) -> None:\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (logger).\n+\n+    Similar to the previous test case but specifically checks logger levels.\n+    \"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            logger = logging.getLogger()\n+            assert logger.level == logging.NOTSET\n+            caplog.set_level(logging.INFO)\n+            assert logger.level == logging.INFO\n+\n+        def test2(caplog):\n+            logger = logging.getLogger()\n+            assert logger.level == logging.NOTSET\n+\n+        def test3(caplog):\n+            logger = logging.getLogger()\n+            assert logger.level == logging.NOTSET\n+            caplog.set_level(logging.WARNING)\n+            assert logger.level == logging.WARNING\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n     \"\"\"Ensure that 'set_level' is undone after the end of the test\"\"\"\n     testdir.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..06cc5db 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1175,6 +1176,30 @@ def test_collect_symlink_out_of_tree(testdir):\n             \"test_real.py::test_nodeid PASSED\"\n         ]\n     )\n+\n+def test_collect_symlink_dir_extended(pytester: Pytester) -> None:\n+    \"\"\"Test collecting symlinked directories, including nested and cross-directory symlinks.\"\"\"\n+    # Creating target directories and test file\n+    dir1 = pytester.mkdir(\"dir1\")\n+    dir1.joinpath(\"test_one.py\").write_text(\"def test_one(): pass\", \"utf-8\")\n+    \n+    dir2 = pytester.mkdir(\"dir2\")\n+    dir2.joinpath(\"test_two.py\").write_text(\"def test_two(): pass\", \"utf-8\")\n+\n+    # Creating a symlink directory pointing to dir1\n+    pytester.path.joinpath(\"symlink_to_dir1\").symlink_to(dir1)\n+\n+    # Nested symlink: symlink within dir2 pointing to dir1\n+    dir2.joinpath(\"nested_symlink\").symlink_to(dir1)\n+\n+    # Another symlink pointing to dir2 from the root of test directory\n+    pytester.path.joinpath(\"symlink_to_dir2\").symlink_to(dir2)\n+\n+    # Running pytest and checking whether all test files are collected including through symlinks\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=4)\n+\n+    # Clean up symlinks at the end of the test if needed (pytester handles cleanup typically)\n     assert result.ret == 0\n \n \n",
  "pytest-dev__pytest-8399": "",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..458bcd2 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,8 +597,26 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+from sklearn.linear_model import RidgeClassifierCV\n+from sklearn.utils._testing import assert_raises\n \n-def test_ridgecv_sample_weight():\n+def test_ridgeclassifiercv_store_cv_values():\n+    # Prepare a test to validate that RidgeClassifierCV does not accept\n+    # store_cv_values and raises a TypeError as described in the issue.\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-0.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+    \n+    # Attempt to initialize with the non-existent store_cv_values parameter\n+    assert_raises(TypeError, RidgeClassifierCV, alphas=[0.1, 1.0, 10.0], store_cv_values=True)\n+    \n+    # Building the RidgeClassifierCV without the problematic parameter\n+    r = RidgeClassifierCV(alphas=[0.1, 1.0, 10.0])\n+    r.fit(x, y)\n+    assert len(r.coef_) == x.shape[1]  # Verify coefficients length matches feature count\n+\n+    # Predict with the model\n+    assert_array_equal(r.predict([[-1.0, -1.0], [0.8, 1.0]]), np.array([1, 1]))\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..9de1746 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,20 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+import numpy as np\n+from sklearn.metrics import fowlkes_mallows_score\n+from sklearn.utils._testing import assert_all_finite\n+\n+def test_int_overflow_fowlkes_mallows_score():\n+    # Test for overflow in fowlkes_mallows_score with large input sizes\n+    x = np.array([0] * (52632 + 2529) + [1] * (14660 + 793) + [2] * (3271 +\n+                 204) + [3] * (814 + 39) + [4] * (316 + 20))\n+    y = np.array([1] * (52632 + 2529) + [2] * (14660 + 793) + [3] * (3271 +\n+                 204) + [4] * (814 + 39) + [5] * (316 + 20))\n+\n+    # Ensure no overflow or invalid values occur\n+    score = fowlkes_mallows_score(x, y)\n+    assert_all_finite(score)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..d7ce6e5 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,24 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n-\n-def test_vectorizer_max_features():\n+def test_countvectorizer_get_feature_names_with_custom_vocab():\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    vectorizer = CountVectorizer(vocabulary=vocab)\n+    \n+    # Ensure that calling get_feature_names() doesn't raise NotFittedError\n+    feature_names = vectorizer.get_feature_names()\n+    assert_array_equal(vocab, feature_names)\n+\n+    # Check that the transform method works without calling fit\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?'\n+    ]\n+    X = vectorizer.transform(corpus)\n+    assert_equal(X.shape, (4, 9))\n+    assert_equal(X.nnz, 19)\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..a24ba46 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -491,8 +491,40 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n-\n-def test_multinomial_logistic_regression_string_inputs():\n+from sklearn.metrics.scorer import get_scorer\n+import pytest\n+from sklearn.datasets import make_classification\n+from sklearn.utils import assert_array_almost_equal\n+from sklearn.linear_model.logistic import _log_reg_scoring_path\n+\n+\n+@pytest.mark.parametrize('scoring, multiclass_agg_list',\n+                         [('accuracy', ['']),\n+                          ('precision', ['_macro', '_weighted']),\n+                          ('f1', ['_macro', '_weighted']),\n+                          ('neg_log_loss', ['']),\n+                          ('recall', ['_macro', '_weighted'])])\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # test that LogisticRegressionCV uses the right score to compute its\n+    # cross-validation scores when using a multinomial scoring\n+    # see https://github.com/scikit-learn/scikit-learn/issues/8720\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    # we use lbfgs to support multinomial\n+    params = lr.get_params()\n+    # we store the params to set them further in _log_reg_scoring_path\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        assert_array_almost_equal(\n+            _log_reg_scoring_path(X, y, train, test, Cs=[1.],\n+                                  scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test])\n+        )\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..df55ad8 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,10 +154,22 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n+from sklearn.base import clone\n+from sklearn.preprocessing import StandardScaler\n+\n+class MyEstimator:\n+    def __init__(self, empty=None):\n+        self.empty = empty\n+\n+    def get_params(self, deep=False):\n+        return {\"empty\": self.empty}\n+\n+\n def test_clone_sparse_matrices():\n     sparse_matrix_classes = [\n         getattr(sp, name)\n-        for name in dir(sp) if name.endswith('_matrix')]\n+        for name in dir(sp) if name.endswith('_matrix')\n+    ]\n \n     for cls in sparse_matrix_classes:\n         sparse_matrix = cls(np.eye(5))\n@@ -167,6 +179,13 @@ def test_clone_sparse_matrices():\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n \n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    clf = MyEstimator(empty=StandardScaler)\n+    clf_cloned = clone(clf)\n+    assert clf.empty is clf_cloned.empty\n+\n+\n def test_repr():\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..7b337f5 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -7,6 +7,65 @@ from scipy import linalg\n \n import pytest\n \n+@pytest.mark.parametrize('copy_X', [True, False])\n+def test_lasso_lars_copyX_behaviour(copy_X):\n+    \"\"\"\n+    Test that user input regarding copy_X is not being overridden (it was until\n+    at least version 0.21)\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    lasso_lars.fit(X, y)\n+    assert copy_X == np.array_equal(X, X_copy)\n+\n+\n+@pytest.mark.parametrize('copy_X', [True, False])\n+def test_lasso_lars_fit_copyX_behaviour(copy_X):\n+    \"\"\"\n+    Test that user input to .fit for copy_X overrides default __init__ value\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    lasso_lars.fit(X, y, copy_X=copy_X)\n+    assert copy_X == np.array_equal(X, X_copy)\n+\n+\n+def test_lasso_lars_fit_default_behavior():\n+    \"\"\"\n+    Test default behavior when not specifying copy_X in fit.\n+    It should respect __init__ value.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=False, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    lasso_lars.fit(X, y)\n+    # Since copy_X is False by default in fit and in __init__, no copy should occur\n+    assert np.array_equal(X, X_copy)\n+\n+\n+def test_lasso_lars_fit_init_behavior():\n+    \"\"\"\n+    Test the behavior when setting copy_X in __init__ but not in fit.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=True, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    lasso_lars.fit(X, y)\n+    # Since copy_X is True by default in __init__, X and X_copy should be different\n+    assert not np.array_equal(X, X_copy)\n+\n+import pytest\n+\n from sklearn.model_selection import train_test_split\n from sklearn.utils.testing import assert_equal\n from sklearn.utils.testing import assert_array_almost_equal\n@@ -18,7 +77,8 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..da08994 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,6 +493,45 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n+def test_shuffle_stratifiedkfold_different_random_state():\n+    # Ensure that StratifiedKFold with shuffle=True and different random_state \n+    # yields different splits\n+\n+    # Small dataset with balanced classes\n+    X = np.arange(10)\n+    y = [0] * 5 + [1] * 5\n+\n+    # Initialize StratifiedKFold with shuffle enabled\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\n+\n+    # Collect the test indices for each fold\n+    test_indices_1 = sorted([tuple(s[1]) for s in kf1.split(X, y)])\n+    test_indices_2 = sorted([tuple(s[1]) for s in kf2.split(X, y)])\n+\n+    # Assert that the test indices are not the same for different random states\n+    assert test_indices_1 != test_indices_2\n+\n+\n+def test_shuffle_stratifiedkfold_same_random_state():\n+    # Ensure that StratifiedKFold with shuffle=True and the same random_state \n+    # yields the same splits\n+\n+    # Small dataset with balanced classes\n+    X = np.arange(10)\n+    y = [0] * 5 + [1] * 5\n+\n+    # Initialize StratifiedKFold with shuffle enabled\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\n+\n+    # Collect the test indices for each fold\n+    test_indices_1 = sorted([tuple(s[1]) for s in kf1.split(X, y)])\n+    test_indices_2 = sorted([tuple(s[1]) for s in kf2.split(X, y)])\n+\n+    # Assert that the test indices are the same for the same random states\n+    assert test_indices_1 == test_indices_2\n+\n \n def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n     # The digits samples are dependent: they are apparently grouped by authors\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..aa1e6d0 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..e10f27d 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,6 +598,16 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=42)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+\n def test_gaussian_mixture_fit():\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 4594f40..bff2bdb 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -199,6 +199,12 @@ class Pipeline(_BaseComposition):\n             if trans is not None and trans != 'passthrough':\n                 yield idx, name, trans\n \n+    def __len__(self):\n+        \"\"\"\n+        Return the number of steps in the pipeline.\n+        \"\"\"\n+        return len(self.steps)\n+        \n     def __getitem__(self, ind):\n         \"\"\"Returns a sub-pipeline or a single esimtator in the pipeline\n \n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..fa3ce1d 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -10,7 +11,11 @@ import pytest\n \n import numpy as np\n \n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils.testing import assert_equal\n+from sklearn.utils.testing import assert_greater\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..178b144 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -320,6 +320,32 @@ def test_export_text_errors():\n     assert_raise_message(ValueError,\n                          \"feature_names must contain 2 elements, got 1\",\n                          export_text, clf, feature_names=['a'])\n+\n+def test_export_text_single_feature():\n+    # Test for export_text when there is only a single feature\n+    X, y = load_iris(return_X_y=True)\n+    X = X[:, 0].reshape(-1, 1)  # use only one feature\n+\n+    clf = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf.fit(X, y)\n+\n+    expected_report = dedent(\"\"\"\n+    |--- feature_0 <= 5.45\n+    |   |--- class: 0\n+    |--- feature_0 >  5.45\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    assert export_text(clf) == expected_report\n+    \n+    expected_report = dedent(\"\"\"\n+    |--- sepal_length <= 5.45\n+    |   |--- class: 0\n+    |--- sepal_length >  5.45\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    assert export_text(clf, feature_names=['sepal_length']) == expected_report\n     assert_raise_message(ValueError,\n                          \"decimals must be >= 0, given -1\",\n                          export_text, clf, decimals=-1)\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..e9e612c 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1531,8 +1531,38 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_train) == gs.predict(X_train)).mean() >= .8\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n+import pytest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn.datasets import make_classification\n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit(penalty, multi_class):\n+    # Test LogisticRegressionCV attribute shapes when refit is False\n+\n+    n_classes = 3\n+    n_samples = 200\n+    n_features = 20\n+    X, y = make_classification(n_samples=n_samples, n_classes=n_classes,\n+                               n_informative=n_classes, n_features=n_features,\n+                               random_state=0)\n+\n+    Cs = np.logspace(-4, 4, 3)\n+    \n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver='saga',\n+                                l1_ratios=l1_ratios, random_state=0,\n+                                multi_class=multi_class, refit=False)\n+    lrcv.fit(X, y)\n+    assert lrcv.C_.shape == (n_classes,)\n+    if penalty == 'elasticnet':\n+        assert lrcv.l1_ratio_.shape == (n_classes,)\n+    assert lrcv.coef_.shape == (n_classes, n_features)\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..67e35ff 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -23,6 +23,17 @@ def test_get_deps_info():\n     assert 'Cython' in deps_info\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n+    assert 'joblib' in deps_info  # New check for joblib presence\n+    deps_info = _get_deps_info()\n+\n+    assert 'pip' in deps_info\n+    assert 'setuptools' in deps_info\n+    assert 'sklearn' in deps_info\n+    assert 'numpy' in deps_info\n+    assert 'scipy' in deps_info\n+    assert 'Cython' in deps_info\n+    assert 'pandas' in deps_info\n+    assert 'matplotlib' in deps_info\n \n \n def test_show_versions_with_blas(capsys):\n@@ -30,4 +41,10 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n+    assert 'joblib' in out  # Verifies that joblib is included in the output\n+    show_versions()\n+    out, err = capsys.readouterr()\n+    assert 'python' in out\n+    assert 'numpy' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..be034c7 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -101,6 +101,40 @@ def test_extract_xi():\n                    xi=0.4).fit(X)\n     assert_array_equal(clust.labels_, expected_labels)\n \n+def test_optics_float_min_samples():\n+    # Verify that min_samples as a float is handled correctly\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 10\n+\n+    C1 = [1, 2] + 0.3 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [5, 8] + 0.25 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, 0] + 0.2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3))\n+    min_samples_float = 0.1  # 10% of samples, should be converted to an integer\n+    expected_labels = np.r_[[0] * 10, [1] * 10, [2] * 10]  # Assuming three clusters\n+\n+    clust = OPTICS(min_samples=min_samples_float, min_cluster_size=0.1,\n+                   max_eps=10, cluster_method='xi',\n+                   xi=0.05).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+def test_optics_min_samples_edge_case():\n+    # Edge case for min_samples = 1\n+    rng = np.random.RandomState(1)\n+    n_points_per_cluster = 6\n+\n+    C1 = [-1, -4] + 0.5 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [5, 7] + 0.5 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2))\n+    expected_labels = np.r_[[0] * 6, [1] * 6]  # Two distinct clusters\n+\n+    clust = OPTICS(min_samples=1, min_cluster_size=0.05,\n+                   max_eps=15, cluster_method='xi',\n+                   xi=0.05).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n     X = np.vstack((C1, C2, C3, C4, C5, np.array([[100, 100]] * 2), C6))\n     expected_labels = np.r_[[1] * 5, [3] * 5, [2] * 5, [0] * 5, [2] * 5,\n                             -1, -1, [4] * 5]\n@@ -112,6 +146,40 @@ def test_extract_xi():\n     # this may fail if the predecessor correction is not at work!\n     assert_array_equal(clust.labels_, expected_labels)\n \n+def test_optics_float_min_samples():\n+    # Verify that min_samples as a float is handled correctly\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 10\n+\n+    C1 = [1, 2] + 0.3 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [5, 8] + 0.25 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, 0] + 0.2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3))\n+    min_samples_float = 0.1  # 10% of samples, should be converted to an integer\n+    expected_labels = np.r_[[0] * 10, [1] * 10, [2] * 10]  # Assuming three clusters\n+\n+    clust = OPTICS(min_samples=min_samples_float, min_cluster_size=0.1,\n+                   max_eps=10, cluster_method='xi',\n+                   xi=0.05).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+def test_optics_min_samples_edge_case():\n+    # Edge case for min_samples = 1\n+    rng = np.random.RandomState(1)\n+    n_points_per_cluster = 6\n+\n+    C1 = [-1, -4] + 0.5 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [5, 7] + 0.5 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2))\n+    expected_labels = np.r_[[0] * 6, [1] * 6]  # Two distinct clusters\n+\n+    clust = OPTICS(min_samples=1, min_cluster_size=0.05,\n+                   max_eps=15, cluster_method='xi',\n+                   xi=0.05).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n     C1 = [[0, 0], [0, 0.1], [0, -.1], [0.1, 0]]\n     C2 = [[10, 10], [10, 9], [10, 11], [9, 10]]\n     C3 = [[100, 100], [100, 90], [100, 110], [90, 100]]\n@@ -124,6 +192,40 @@ def test_extract_xi():\n                    xi=0.04).fit(X)\n     assert_array_equal(clust.labels_, expected_labels)\n \n+def test_optics_float_min_samples():\n+    # Verify that min_samples as a float is handled correctly\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 10\n+\n+    C1 = [1, 2] + 0.3 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [5, 8] + 0.25 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, 0] + 0.2 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2, C3))\n+    min_samples_float = 0.1  # 10% of samples, should be converted to an integer\n+    expected_labels = np.r_[[0] * 10, [1] * 10, [2] * 10]  # Assuming three clusters\n+\n+    clust = OPTICS(min_samples=min_samples_float, min_cluster_size=0.1,\n+                   max_eps=10, cluster_method='xi',\n+                   xi=0.05).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+def test_optics_min_samples_edge_case():\n+    # Edge case for min_samples = 1\n+    rng = np.random.RandomState(1)\n+    n_points_per_cluster = 6\n+\n+    C1 = [-1, -4] + 0.5 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [5, 7] + 0.5 * rng.randn(n_points_per_cluster, 2)\n+\n+    X = np.vstack((C1, C2))\n+    expected_labels = np.r_[[0] * 6, [1] * 6]  # Two distinct clusters\n+\n+    clust = OPTICS(min_samples=1, min_cluster_size=0.05,\n+                   max_eps=15, cluster_method='xi',\n+                   xi=0.05).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n \n def test_cluster_hierarchy_():\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "diff --git a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\nindex 7e8bccd..e62e26d 100644\n--- a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n@@ -414,4 +414,35 @@ def test_infinite_values_missing_values():\n                                                learning_rate=1, max_depth=2)\n \n     assert stump_clf.fit(X, y_isinf).score(X, y_isinf) == 1\n-    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+\n+\n+@pytest.mark.parametrize(\"scoring\", [None, 'loss'])\n+def test_string_target_early_stopping(scoring):\n+    # Regression tests for #14709 where the targets need to be encoded before\n+    # to compute the score\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10, scoring=scoring)\n+    gbrt.fit(X, y)\n+    # Simply check if it fits without raising an exception\n+    assert gbrt is not None\n+\n+def test_string_targets_multiple_classes():\n+    # Test with more than two categorical classes\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(150, 10)\n+    y = np.array(['a'] * 50 + ['b'] * 50 + ['c'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10)\n+    gbrt.fit(X, y)\n+    assert gbrt is not None\n+\n+def test_no_early_stopping_string_target():\n+    # Test to verify that the classifier works without early stopping\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=None)  # No early stopping\n+    gbrt.fit(X, y)\n+    assert gbrt is not None\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..c539a39 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,32 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for the issue that raised ZeroDivisionError\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_with_actual_data():\n+    # Test with a legitimate sparse input\n+    X_train = sparse.csr_matrix([[1, 0, 0],\n+                                 [0, 1, 1],\n+                                 [1, 0, 1]])\n+    y_train = np.array([1.0, 2.0, 3.0])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert model.support_vectors_.data.size > 0\n+    assert model.dual_coef_.data.size > 0\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..c84fae7 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -98,7 +98,34 @@ def test_strip_accents():\n     assert strip_accents_unicode(a) == expected\n \n \n-def test_to_ascii():\n+def test_strings_already_decomposed():\n+    # Test for strings already in decomposed (NFKD) form.\n+    \n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # combining grave, acute, circumflex, tilde\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"  # o with diaresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test for the issue example\n+    s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N + COMBINING TILDE\n+\n+    # Expected results\n+    expected = \"n\"\n+\n+    # Verify both give the same result\n+    assert strip_accents_unicode(s1) == expected\n+    assert strip_accents_unicode(s2) == expected\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..9432680 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -21,7 +21,11 @@ from sklearn.compose import (\n )\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n+from sklearn.feature_selection import VarianceThreshold\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+import pandas as pd\n+import pytest\n+import numpy as np\n \n \n class Trans(TransformerMixin, BaseEstimator):\n@@ -2177,11 +2181,111 @@ def test_raise_error_if_index_not_aligned():\n             (\"num2\", reset_index_transformer, [\"b\"]),\n         ],\n     )\n+\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for #26306.\n+    \"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    # Testing with remainder as a transformer\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n+    # Additional test case with different data and additional estimators\n+    df2 = pd.DataFrame({\"a\": [True, True, False], \"b\": [3, 2, 1]})\n+    ct2 = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct2.set_output(transform=\"pandas\")\n+\n+    out2 = ct2.fit_transform(df2)\n+    pd.testing.assert_frame_equal(out2, df2)\n+\n+    ct2.set_output(transform=\"default\")\n+    out2_default = ct2.fit_transform(df2)\n+    assert isinstance(out2_default, np.ndarray)\n+\n+    # Testing the correct behavior when remainder is not an estimator\n+    ct3 = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=\"passthrough\",\n+        verbose_feature_names_out=False,\n+    )\n+    ct3.set_output(transform=\"pandas\")\n+\n+    out3 = ct3.fit_transform(df)\n+    pd.testing.assert_frame_equal(out3, df)\n     ct.set_output(transform=\"pandas\")\n     msg = (\n         \"Concatenating DataFrames from the transformer's output lead to\"\n         \" an inconsistent number of samples. The output may have Pandas\"\n         \" Indexes that do not match.\"\n     )\n+\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for #26306.\n+    \"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    # Testing with remainder as a transformer\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n+    # Additional test case with different data and additional estimators\n+    df2 = pd.DataFrame({\"a\": [True, True, False], \"b\": [3, 2, 1]})\n+    ct2 = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct2.set_output(transform=\"pandas\")\n+\n+    out2 = ct2.fit_transform(df2)\n+    pd.testing.assert_frame_equal(out2, df2)\n+\n+    ct2.set_output(transform=\"default\")\n+    out2_default = ct2.fit_transform(df2)\n+    assert isinstance(out2_default, np.ndarray)\n+\n+    # Testing the correct behavior when remainder is not an estimator\n+    ct3 = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=\"passthrough\",\n+        verbose_feature_names_out=False,\n+    )\n+    ct3.set_output(transform=\"pandas\")\n+\n+    out3 = ct3.fit_transform(df)\n+    pd.testing.assert_frame_equal(out3, df)\n     with pytest.raises(ValueError, match=msg):\n         ct.fit_transform(X)\n",
  "scikit-learn__scikit-learn-9288": "",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..bd77e5a 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -8,6 +9,7 @@ from docutils import nodes\n from sphinx.config import Config\n from sphinx.directives.code import LiteralIncludeReader\n from sphinx.testing.util import etree_parse\n+from sphinx.util import docutils\n \n DUMMY_CONFIG = Config({}, {})\n \n@@ -250,8 +252,27 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n-\n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_indent_prepend_fix(literal_inc_path):\n+    # This test is specifically designed based on the issue described. It checks that\n+    # using prepend with intended lines retains the intended whitespace in the output.\n+    options = {'start-at': '<groupId>org.apache.maven.plugins</groupId>',\n+               'end-at': '</plugin>',\n+               'prepend': '      <plugin>'}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    expected = (\"      <plugin>\\n\"\n+                \"        <groupId>org.apache.maven.plugins</groupId>\\n\"\n+                \"        <artifactId>maven-compiler-plugin</artifactId>\\n\"\n+                \"        <version>3.8.0</version>\\n\"\n+                \"        <configuration>\\n\"\n+                \"          <source>1.8</source>\\n\"\n+                \"          <target>1.8</target>\\n\"\n+                \"          <debug>true</debug>\\n\"\n+                \"          <encoding>UTF-8</encoding>\\n\"\n+                \"        </configuration>\\n\"\n+                \"      </plugin>\\n\")\n+    assert content == expected\n def test_LiteralIncludeReader_tabwidth(testroot):\n     # tab-width: 4\n     options = {'tab-width': 4, 'pyobject': 'Qux'}\n",
  "sphinx-doc__sphinx-10449": "",
  "sphinx-doc__sphinx-10466": "",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..9e43b08 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -148,6 +148,29 @@ def test_glossary(app):\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n \n+def test_glossary_case_sensitivity(app, status, warning):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       description for MySQL\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       description for mysql\\n\")\n+\n+    # Parse the text\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    # Check entries for MySQL and mysql\n+    assert_node(doctree[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree[0][0][1][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+\n+    # Verify that both terms are considered distinct entries in the index\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n+\n def test_glossary_warning(app, status, warning):\n     # empty line between terms\n     text = (\".. glossary::\\n\"\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..f5c7807 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -331,6 +331,21 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n     assert sig.parameters['b'].default == Parameter.empty\n \n+def test_signature_from_str_positional_only_with_defaults():\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n+    assert list(sig.parameters.keys()) == ['a', 'b']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n+    assert sig.parameters['b'].default == Parameter.empty\n+\n \n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..151ce40 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -52,7 +53,22 @@ def test_MockObject():\n     assert isinstance(obj.other_method(), SubClass)\n \n \n-def test_mock():\n+from typing import TypeVar\n+\n+def test_mock_generic_typing():\n+    T = TypeVar('T')\n+\n+    class GenericClass(mock.SomeClass[T]):\n+        \"\"\"docstring of GenericClass\"\"\"\n+        \n+        def method(self):\n+            return \"generic method\"\n+\n+    obj = GenericClass()\n+    assert GenericClass.__doc__ == \"docstring of GenericClass\"\n+    assert isinstance(obj, GenericClass)\n+    assert obj.method() == \"generic method\"\n+    assert isinstance(obj.other_method(), GenericClass)\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n     assert modname not in sys.modules\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex 464108d..376a8e4 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -1272,9 +1272,13 @@ def test_automethod_for_decorated(app):\n         '',\n     ]\n \n-\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n-def test_abstractmethods(app):\n+def test_decorated_init_method(app):\n+    actual = do_autodoc(app, 'class', 'target.decoratedclass.SampleClass')\n+    assert \".. py:method:: SampleClass.__init__\" in actual\n+    assert \"A simple decorated __init__ method.\" in actual\n+    assert \"   :module: target.decoratedclass\" in actual\n+    assert \"\" in actual\n     options = {\"members\": None,\n                \"undoc-members\": None}\n     actual = do_autodoc(app, 'module', 'target.abstractmethods', options)\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..06b219a 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -8,6 +8,42 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import os\n+import shutil\n+\n+def setup_module(module):\n+    \"\"\" Set up test environment \"\"\"\n+    os.makedirs('test_local_links', exist_ok=True)\n+    # Create a valid local file for testing\n+    with open('test_local_links/valid_local_file.txt', 'w') as f:\n+        f.write('This is a test file.')\n+\n+def teardown_module(module):\n+    \"\"\" Clean up test environment \"\"\"\n+    shutil.rmtree('test_local_links', ignore_errors=True)\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    with open(app.srcdir / 'index.rst', 'a') as f:\n+        f.write(\"\"\"\n+            example valid local link: valid_ \n+            example invalid local link: invalid_\n+\n+            .. _valid: test_local_links/valid_local_file.txt\n+            .. _invalid: test_local_links/invalid_local_file.txt\n+        \"\"\")\n+\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    print(content)\n+    # locally valid should pass\n+    assert \"ok\" in content\n+    # locally invalid should be marked as broken\n+    assert \"broken\" in content\n+\n import json\n import re\n from unittest import mock\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..74fd042 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -11,7 +12,32 @@\n import pytest\n \n from test_ext_autodoc import do_autodoc\n+from sphinx.ext.autodoc import ALL, identity, members_option\n+\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_private_function1,_private_function2\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _private_function1(name)',\n+        '   :module: target.private',\n+        '',\n+        '   private_function1 is documented.',\n+        '',\n+        '..',\n+        '.. py:function:: _private_function2(name)',\n+        '   :module: target.private',\n+        '',\n+        '   private_function2 is also documented.',\n+        '',\n+    ]\n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_private_field(app):\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..26cfb0a 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1286,6 +1286,37 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n+from babel.messages.pofile import write_po\n+from sphinx import locale\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_customize_system_message_danish(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # Clear translators cache\n+        locale.translators.clear()\n+\n+        # Prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            write_po(f, catalog)\n+\n+        # Construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar' in content\n+        assert 'Whatever' in content\n+    finally:\n+        locale.translators.clear()\n \n def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..e4ac8ab 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,6 +515,23 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum_default():\n+    import enum\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    # Simulate a function signature\n+    def func_with_enum(e: MyEnum = MyEnum.ValueA):\n+        pass\n+\n+    # The expected description of the enum default value.\n+    expected_description = \"MyEnum.ValueA\"\n+    \n+    # Using object_description to check how the enum default is described\n+    description = inspect.object_description(func_with_enum.__defaults__[0])\n+    assert description == expected_description\n+\n \n def test_getslots():\n     class Foo:\n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..c4029c6 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -12,7 +12,7 @@ import time\n from io import StringIO\n \n import pytest\n-\n+import sys\n from sphinx import application\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n@@ -241,7 +241,21 @@ def test_default_filename(tempdir):\n     exec(conffile.read_text(), ns)\n \n \n-def test_extensions(tempdir):\n+def test_exits_when_existing_confpy(monkeypatch):\n+    \"\"\"Expect 'sphinx-quickstart' to exit when an existing 'conf.py' is found\n+    and the user presses 'Enter' to exit.\n+    \"\"\"\n+    # Mock path.isfile to always return True to simulate existing conf.py\n+    monkeypatch.setattr(path, 'isfile', lambda x: True)\n+\n+    # Mock input function to simulate user pressing 'Enter'\n+    monkeypatch.setattr(qs, 'do_prompt', lambda *args: '')\n+\n+    # Silence sys.exit(1) by intercepting it with pytest.raises\n+    with pytest.raises(SystemExit) as excinfo:\n+        qs.ask_user({})\n+\n+    assert excinfo.value.code == 1\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..253aaf2 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -55,6 +55,7 @@ from sphinx.pycode import ast\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n     (\"()\", \"()\"),                               # Tuple (empty)\n+    (\"(1,)\", \"(1,)\"),                           # Tuple (single element)\n ])\n def test_unparse(source, expected):\n     module = ast.parse(source)\n",
  "sphinx-doc__sphinx-9591": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 38aeecb..e80053b 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -861,7 +861,18 @@ class PyProperty(PyObject):\n \n         typ = self.options.get('type')\n         if typ:\n-            signode += addnodes.desc_annotation(typ, ': ' + typ)\n+            annotation = addnodes.desc_annotation('', ': ')\n+            pnode = addnodes.pending_xref(\n+                typ,\n+                refdomain='py',\n+                reftype='class',\n+                classname='',\n+                refexplicit=False,\n+                refwarn=True,\n+                reftarget=typ)\n+            pnode += nodes.Text(typ)\n+            annotation += pnode\n+            signode += annotation\n \n         return fullname, prefix\n \n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..554f50d 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -755,8 +755,9 @@ def test_pymethod_options(app):\n     assert domain.objects['Class.meth4'] == ('index', 'Class.meth4', 'method', False)\n \n     # :property:\n+    # :property: (updated expectation for the bug fix)\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..5d91d7a 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -235,8 +235,29 @@ def test_Point2D():\n     assert p1.distance(p2) == sqrt(61)/2\n     assert p2.distance(p3) == sqrt(17)/2\n \n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)  # 3D Point\n+    p2 = Point2D(2, 0)     # 2D Point\n \n-def test_issue_9214():\n+    # Expectation: correctly considers all coordinates in p1\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_issue_11617_additional():\n+    # Additional test cases to ensure correctness of dimension handling\n+    p3 = Point3D(0, 0, 0)  # Point at origin\n+    p4 = Point3D(0, 0, 5)  # Point along Z-axis\n+\n+    assert p3.distance(p4) == 5\n+\n+    p5 = Point3D(1, 1, 1)\n+    p6 = Point3D(4, 5, 6)\n+\n+    assert p5.distance(p6) == sqrt(27 + 16 + 25)  # Correct 3D distance check\n+\n+    p7 = Point2D(3, 4)\n+    p8 = Point3D(6, 8, 0)  # Effectively 2D distance\n+\n+    assert p7.distance(p8) == 5  # Distance considering only X, Y components\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n     p3 = Point3D(7, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..f75d4d5 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,16 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    assert f(2).evalf() == Float(4)\n+    assert g(2).evalf() == Float(4)\n+    assert f(g(2)).evalf() == Float(16)\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "",
  "sympy__sympy-12481": "",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..42ab86e 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -502,8 +502,20 @@ def test_sparse_zeros_sparse_eye():\n     assert SparseMatrix.zeros(3) == zeros(3, cls=SparseMatrix)\n     assert len(SparseMatrix.zeros(3)._smat) == 0\n \n-\n-def test_copyin():\n+def test_matrix_stacking_behavior():\n+    # Test hstack with 0 x n matrices\n+    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    result = SparseMatrix.hstack(*sparse_matrices)\n+    assert result.shape == (0, 6), f\"Expected shape (0, 6), got {result.shape}\"\n+\n+    # Test vstack with n x 0 matrices\n+    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    result = SparseMatrix.vstack(*sparse_matrices)\n+    assert result.shape == (6, 0), f\"Expected shape (6, 0), got {result.shape}\"\n+\n+    # Additional checks to ensure no elements are present in the matrices\n+    # since they have zero rows or columns\n+    assert result == SparseMatrix(6, 0, []), \"Resulting matrix should be empty\"\n     s = SparseMatrix(3, 3, {})\n     s[1, 0] = 1\n     assert s[:, 0] == SparseMatrix(Matrix([0, 1, 0]))\n",
  "sympy__sympy-13372": "",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..b64537e 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -200,8 +200,22 @@ def test_tanh():\n \n     assert tanh(k*pi*I) == 0\n     assert tanh(17*k*pi*I) == 0\n-\n-    assert tanh(k*pi*I/2) == tan(k*pi/2)*I\n+from sympy import coth, log, tan, Symbol\n+\n+def test_coth_log_tan_substitution():\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    # Testing previously failing substitutions\n+    for value in [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]:\n+        try:\n+            result = e.subs(x, value)\n+            print(result)  # For debugging, remove this line in actual tests\n+        except NameError as ne:\n+            assert False, f\"Failed with NameError for x = {value}: {ne}\"\n+\n+    # Check if original test cases are affected\n+    assert coth(log(tan(2))) == coth(log(-tan(2)))\n+    assert coth(1 + I*pi/2) == tanh(1)\n \n \n def test_tanh_series():\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..a387f1a 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -165,8 +165,23 @@ def test_difference():\n     assert -1 in S.Reals - S.Naturals\n \n \n+from sympy import Complement, FiniteSet, Interval, Symbol, S\n+\n def test_Complement():\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n+\n+    # Test case specific to issue 12712\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == \\\n+           Complement(FiniteSet(x, y), Interval(-10, 10))\n+    # Testing with different mix of numbers and symbols\n+    assert Complement(FiniteSet(x, y, 2, 5), Interval(-10, 3)) == \\\n+           Complement(FiniteSet(x, y, 5), Interval(-10, 3))\n+    assert Complement(FiniteSet(x, y, -5, 7), Interval(-10, 3)) == \\\n+           Complement(FiniteSet(x, y, 7), Interval(-10, 3))\n+    assert Complement(FiniteSet(x, y, 0), S.EmptySet) == FiniteSet(x, y, 0)  # Subtracting an empty set\n+    assert Complement(S.EmptySet, FiniteSet(x, y, 0)) == S.EmptySet  # Empty set should always remain empty\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n     assert Complement(Union(Interval(0, 2),\n                             FiniteSet(2, 3, 4)), Interval(1, 3)) == \\\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..fc595ee 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,6 +201,22 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n+def test_issue_13643():\n+    import sympy as sm\n+    M = sm.eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    # Testing col_insert(3, V) for correctness\n+    result = M.col_insert(3, V)\n+    expected = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1],\n+    ])\n+    assert result == expected, f\"Expected {expected}, got {result}\"\n+\n def test_extract():\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..75011f0 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -665,8 +665,24 @@ def test_Poly_sub():\n def test_Poly_mul():\n     assert Poly(0, x).mul(Poly(0, x)) == Poly(0, x)\n     assert Poly(0, x) * Poly(0, x) == Poly(0, x)\n-\n-    assert Poly(2, x).mul(Poly(4, x)) == Poly(8, x)\n+from sympy import Poly, S, x\n+\n+def test_issue_resolution():\n+    # Existing test cases from the patch\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+\n+    # Additional test cases for more thorough testing\n+    assert Poly(x + 1) * x == Poly(x**2 + x, x, domain='ZZ')\n+    assert x * Poly(x + 1) == Poly(x**2 + x, x, domain='ZZ')\n+    assert Poly(0, x) * x == Poly(0, x)\n+    assert x * Poly(0, x) == Poly(0, x)\n+    assert Poly(x, x) * 0 == Poly(0, x)\n+    assert 0 * Poly(x, x) == Poly(0, x)\n+    assert Poly(x*y, x, y) * x == Poly(x**2*y, x, y)\n     assert Poly(2, x, y) * Poly(4, x) == Poly(8, x, y)\n     assert Poly(4, x).mul(Poly(2, x, y)) == Poly(8, x, y)\n     assert Poly(4, x, y) * Poly(2, x, y) == Poly(8, x, y)\n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..4a662de 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -55,6 +55,17 @@ def test_printmethod():\n     assert latex(R(x)) == \"foo\"\n \n \n+def test_latex_mul_symbol_custom():\n+    x, y = symbols('x y')\n+\n+    # Test with custom thin space as multiplication symbol\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(3.5*x**2*y, mul_symbol='\\\\,') == r\"3.5\\,x^{2}\\,y\"\n+\n+    # Ensuring defaults still work when custom mul_symbol is not used\n+    assert latex(2*x*y) == \"2 x y\"\n+    assert latex(2*x*y, mul_symbol='dot') == r\"2 \\cdot x \\cdot y\"\n+\n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n     assert latex(x**2) == \"x^{2}\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..4b27bfb 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,8 +402,20 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n-\n-def test_det_LU_decomposition():\n+def test_issue_13835_matrix_determinant():\n+\n+    from sympy import Matrix, symbols\n+    a = symbols('a')\n+    f = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)]).det()\n+\n+    assert f(1) == 0\n+    assert f(2) == -a\n+    # Test cases for n=3 and above should ensure no NaN or invalid type errors occur\n+    assert f(3).expand() == 2*a*(a + 2) + 2*a*(2*a + 1) - 3*a*(2*a + 2)\n+    assert f(4) == 0\n+    assert f(5) == 0  # The patched behavior should have f(5) also return 0\n+    assert f(6) == 0  # Verify that determinants are zero instead of causing errors\n+    assert f(7) == 0  # Checks for additional sizes to ensure the fix is comprehensive\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert M.det(method=\"lu\") == 1\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..fb9cf88 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -710,6 +710,103 @@ def test_issue_10003():\n     assert P(G < -1) == S.Zero\n \n def test_precomputed_cdf():\n+    from sympy import asin, exp, Piecewise, simplify\n+    from sympy.functions.special.gamma_functions import lowergamma, uppergamma\n+    \n+    # Symbols definition\n+    x = symbols('x', real=True)\n+    a, b, mu, s, k, l, p, omega = symbols('a b mu s k l p omega', positive=True)\n+\n+    # Arcsin distribution\n+    X_arcsin = Arcsin(\"X\", 0, 3)\n+    expected_cdf_arcsin = Piecewise(\n+        (0, x < 0),\n+        (2 * asin(sqrt(x / 3)) / pi, x <= 3),\n+        (1, True)\n+    )\n+    assert simplify(cdf(X_arcsin)(x) - expected_cdf_arcsin) == 0\n+\n+    # Dagum distribution\n+    X_dagum = Dagum(\"X\", S(1)/3, S(1)/5, 2)\n+    expected_cdf_dagum = Piecewise(\n+        ((1 + (x/2)**(-S(1)/5))**(-S(1)/3), x >= 0),\n+        (0, True)\n+    )\n+    assert simplify(cdf(X_dagum)(x) - expected_cdf_dagum) == 0\n+\n+    # Erlang distribution\n+    X_erlang = Erlang(\"X\", 1, 1)\n+    expected_cdf_erlang = Piecewise(\n+        (lowergamma(1, x)/gamma(1), x > 0),\n+        (0, True)\n+    )\n+    assert simplify(cdf(X_erlang)(x) - expected_cdf_erlang) == 0\n+\n+    # Frechet distribution\n+    X_frechet = Frechet(\"X\", S(4)/3, 1, 2)\n+    expected_cdf_frechet = Piecewise(\n+        (exp(-((-2 + x))**(-4/3)), x >= 2),\n+        (0, True)\n+    )\n+    assert simplify(cdf(X_frechet)(x) - expected_cdf_frechet) == 0\n+\n+    # Gamma distribution\n+    X_gamma = Gamma(\"X\", 0.1, 2)\n+    expected_cdf_gamma = Piecewise(\n+        (lowergamma(0.1, x / 2) / gamma(0.1), x >= 0),\n+        (0, True)\n+    )\n+    assert simplify(cdf(X_gamma)(x) - expected_cdf_gamma) == 0\n+\n+    # GammaInverse distribution\n+    X_gammainv = GammaInverse(\"X\", S(5)/7, 2)\n+    expected_cdf_gammainv = Piecewise(\n+        (uppergamma(S(5)/7, 2 / x)/ gamma(S(5)/7), x > 0),\n+        (0, True)\n+    )\n+    assert simplify(cdf(X_gammainv)(x) - expected_cdf_gammainv) == 0\n+\n+    # Kumaraswamy distribution\n+    X_kumaraswamy = Kumaraswamy(\"X\", S(1)/123, 5)\n+    expected_cdf_kumaraswamy = Piecewise(\n+        (0, x < 0),\n+        (-(-x**(1/123) + 1)**5 + 1, x <= 1),\n+        (1, True) \n+    )\n+    assert simplify(cdf(X_kumaraswamy)(x) - expected_cdf_kumaraswamy) == 0\n+\n+    # Laplace distribution\n+    X_laplace = Laplace(\"X\", 2, 3)\n+    expected_cdf_laplace = Piecewise(\n+        (exp((x - 2) / 3)/2, x < 2),\n+        (1 - exp((2 - x) / 3)/2, x >= 2)\n+    )\n+    assert simplify(cdf(X_laplace)(x) - expected_cdf_laplace) == 0\n+\n+    # Logistic distribution\n+    X_logistic = Logistic(\"X\", 1, 0.1)\n+    expected_cdf_logistic = 1 / (1 + exp((1 - x) / 0.1))\n+    assert simplify(cdf(X_logistic)(x) - expected_cdf_logistic) == 0\n+\n+    # Nakagami distribution\n+    X_nakagami = Nakagami(\"X\", S(7)/3, 1)\n+    expected_cdf_nakagami = Piecewise(\n+        (lowergamma(7/3, 7/3*x**2)/gamma(7/3), x > 0),\n+        (0, True)\n+    )\n+    assert simplify(cdf(X_nakagami)(x) - expected_cdf_nakagami) == 0\n+\n+    # StudentT distribution\n+    X_studentt = StudentT(\"X\", 10)\n+    # The CDF for student's T distribution in terms of hypergeometric function\n+    # is compared numerically\n+    assert tn(diff(cdf(X_studentt)(x), x), density(X_studentt)(x), x)\n+    \n+    # UniformSum distribution\n+    X_uniformsum = UniformSum(\"X\", 5)\n+    cdf01 = cdf(X_uniformsum, evaluate=False)(x).subs(floor(x), 0).doit()  # cdf on (0, 1)\n+    pdf01 = density(X_uniformsum)(x).subs(floor(x), 0).doit()  # pdf on (0, 1)\n+    assert tn(diff(cdf01, x), pdf01, x, a=0, b=1)\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..945cd95 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -44,8 +44,19 @@ def test_tensor_product_commutator():\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n         TP(A, B)*TP(B, C) - TP(B, C)*TP(A, B)\n \n+from sympy import symbols\n+from sympy.physics.quantum import TensorProduct as TP\n+from sympy.physics.quantum import tensor_product_simp\n+from sympy.physics.paulialgebra import Pauli\n+\n+A, B, C, D = symbols('A B C D', commutative=False)\n \n def test_tensor_product_simp():\n+    assert tensor_product_simp(TP(A, B)**2) == TP(A**2, B**2)\n+    assert tensor_product_simp(TP(A, B)**3) == TP(A**3, B**3)\n+    assert tensor_product_simp(TP(1, Pauli(3))**2) == TP(1, Pauli(3)**2)\n+    assert tensor_product_simp(TP(1, Pauli(3))**3) == TP(1, Pauli(3)**3)\n+    assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n \n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 29c7fd2..bb83661 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -440,6 +440,11 @@ def test_sqrt():\n     assert str(1/x**(1/2)) == \"x**(-0.5)\"\n \n \n+def test_issue_handling():\n+    x = Symbol(\"x\")\n+    assert sstr(Eq(x, S(1)/2), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    assert sstr(Limit(x, x, S(1)/2), sympy_integers=True) == \"Limit(x, x, S(1)/2)\"\n+\n def test_Rational():\n     n1 = Rational(1, 4)\n     n2 = Rational(1, 3)\n",
  "sympy__sympy-14711": "",
  "sympy__sympy-14976": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex fbe0d75..46fc4b0 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import (absolute_import, division, print_function)\n \n@@ -38,6 +39,12 @@ def test_PythonCodePrinter():\n \n \n def test_MpmathPrinter():\n+    x = symbols('x')\n+    p = MpmathPrinter()\n+    # Test that Rational numbers are wrapped with mpmath\n+    assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n+    # Additional check for original issue-related expression\n+    assert p.doprint(Eq(rf(18, x), 77 + Rational(1, 3))) == 'Eq(mpmath.rf(18, x), mpmath.mpf(77) + mpmath.mpf(1)/mpmath.mpf(3))'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n \n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..c21aa99 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,14 +74,23 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    assert len(rank_zero_array) == 1\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n     raises(ValueError, lambda: rank_zero_array[0])\n \n+def test_rank_zero_array_len():\n+    import numpy as np\n+    from sympy import Array\n+\n+    # Check the len for a rank-0 array in sympy\n+    rank_zero_array_sympy = Array(1)\n+    assert len(rank_zero_array_sympy) == 1\n \n-def test_reshape():\n+    # Check the size for a rank-0 array in numpy\n+    rank_zero_array_numpy = np.asarray(1)\n+    assert rank_zero_array_numpy.size == 1\n     array = ImmutableDenseNDimArray(range(50), 50)\n     assert array.shape == (50,)\n     assert array.rank() == 1\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..909ffc5 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,28 @@\n+\n+def test_Max_Min():\n+    # Test case directly related to the issue\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"  # Ensure arbitrary order handling\n+  \n+    # Additional test cases\n+    assert mcode(Max(x, y, z)) == \"Max[x, y, z]\"  # Multiple variables\n+    assert mcode(Min(x, 1)) == \"Min[x, 1]\"  # Min should work similarly\n+\n+    # Combinations with other expressions\n+    assert mcode(Max(x + y, z - 2)) == \"Max[x + y, z - 2]\"\n+    assert mcode(Max(sin(x), cos(x))) == \"Max[Sin[x], Cos[x]]\"\n+    \n+    # Nested Max/Min\n+    assert mcode(Max(Max(x, y), Min(z, 3))) == \"Max[Max[x, y], Min[z, 3]]\"\n+\n+    # Ensure the original test is still intact\n+    assert mcode(Max(x, y, z) * Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..943ee0a 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,63 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_rotation_iss1593():\n+    \"\"\"\n+    Test case for issue 1593:\n+    There was a sign mistake in the definition of the rotation matrix.\n+    This tests the specific scenario to ensure the sign is correct.\n+    See: https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Quaternion-derived_rotation_matrix\n+    \"\"\"\n+\n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    assert trigsimp(q.to_rotation_matrix()) == Matrix([\n+        [1,      0,      0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x), cos(x)]])\n+\n+def test_quaternion_rotation_90_degrees():\n+    \"\"\"\n+    Test quaternion 90 degree rotation about z-axis.\n+    \"\"\"\n+\n+    angle = pi/2\n+    q = Quaternion(cos(angle/2), 0, 0, sin(angle/2))\n+    expected_matrix = Matrix([\n+        [0, -1,  0],\n+        [1,  0,  0],\n+        [0,  0,  1]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix\n+\n+def test_quaternion_rotation_180_degrees():\n+    \"\"\"\n+    Test quaternion 180 degree rotation about y-axis.\n+    \"\"\"\n+\n+    angle = pi\n+    q = Quaternion(cos(angle/2), 0, sin(angle/2), 0)\n+    expected_matrix = Matrix([\n+        [-1,  0,  0],\n+        [ 0,  1,  0],\n+        [ 0,  0, -1]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix\n+\n+def test_quaternion_rotation_270_degrees():\n+    \"\"\"\n+    Test quaternion 270 degree rotation about x-axis.\n+    \"\"\"\n+\n+    angle = 3*pi/2\n+    q = Quaternion(cos(angle/2), sin(angle/2), 0, 0)\n+    expected_matrix = Matrix([\n+        [1,  0,  0],\n+        [0,  0,  1],\n+        [0, -1,  0]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == expected_matrix\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +176,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..b963f81 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,17 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # Additional test cases for comprehensive testing\n+    assert Mod(6*i, 3) == 0       # Multiple of the divisor\n+    assert Mod(7*i, 3) == Mod(i, 3)  # Non-multiple of the divisor\n+    assert Mod(9*i, 6) == 3*Mod(i, 2)  # gcd of i and divisor\n+    assert Mod(15*i, 9) == 3*Mod(i, 3)  # non-trivial gcd of coefficients\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..6da2290 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -75,6 +75,11 @@ def test_Min():\n     assert Min(nn, oo) == nn\n     assert Min(oo, nn) == nn\n     assert Min(p, p) == p\n+    from sympy import S, oo, Symbol, Min, Max\n+\n+    assert Min() == S.Infinity\n+    assert Max() == S.NegativeInfinity\n+\n     assert Min(p, oo) == p\n     assert Min(oo, p) == p\n     assert Min(oo, oo) == oo\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..166194c 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,11 +1986,37 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n+def test_issue_15873():\n+    from sympy import I, simplify\n \n-def test_issue_14392():\n+    # Test case from the original issue\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+\n+    # Additional test cases\n+    e1 = (1 + I) - (1 + I)\n+    assert e1.is_zero is True\n+\n+    e2 = 1 + I - 1 - I\n+    assert e2.is_zero is True\n+\n+    e3 = (2 + 2*I) - 2 - 2*I\n+    assert e3.is_zero is True\n+\n+    e4 = simplify(-2*I + (1 + I)**2)\n+    assert e4.is_zero is True\n+\n+    e5 = (3 + 4*I) + (-3 - 4*I)\n+    assert e5.is_zero is True\n+\n+    e6 = ((1 + I)**2 + (2 + 2*I)**2) - ((2 + I*2)**2 + (1 + I)**2)\n+    assert e6.is_zero is None\n+\n+    e7 = 1 + I\n+    assert e7.is_zero is False\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..3c56978 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -511,8 +511,18 @@ def test_posify():\n     assert str(Sum(posify(1/x**n)[0], (n,1,3)).expand()) == \\\n         'Sum(_x**(-n), (n, 1, 3))'\n \n-\n-def test_issue_4194():\n+def test_issue_16438_finiteness_preservation():\n+    from sympy import Symbol, posify\n+\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['infinite'] == False\n+\n+    # Check that other specific assumptions related to numbers are preserved\n+    assert eq.assumptions0['positive'] == True\n+    assert eq.assumptions0['complex'] == True\n+    assert eq.subs(rep).is_finite is True\n     # simplify should call cancel\n     from sympy.abc import x, y\n     f = Function('f')\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..a103f06 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -8,6 +9,7 @@ from sympy.core.numbers import pi\n from sympy.functions import acos, Piecewise, sign\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol\n+from sympy.tensor import IndexedBase\n from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n@@ -36,7 +38,12 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n \n-def test_MpmathPrinter():\n+def test_Indexed_Printing():\n+    prntr = PythonCodePrinter()\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(p[x, y]) == 'p[x, y]'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n     assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..3869d4b 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -48,6 +48,17 @@ def test_cython_wrapper_scalar_function():\n     assert source == expected\n \n \n+def test_cython_autowrap_with_unused_array_arg():\n+    # Issue: autowrap with cython fails when array args do not appear in expr\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # x does not appear in output\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    \n+    # Test should confirm `f` returns 1.0 without raising TypeError\n+    result = f(np.array([[1.0, 2.0]]))\n+    assert result == 1.0\n+\n+\n def test_cython_wrapper_outarg():\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n@@ -67,6 +78,17 @@ def test_cython_wrapper_outarg():\n     assert source == expected\n \n \n+def test_cython_autowrap_with_unused_array_arg():\n+    # Issue: autowrap with cython fails when array args do not appear in expr\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # x does not appear in output\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    \n+    # Test should confirm `f` returns 1.0 without raising TypeError\n+    result = f(np.array([[1.0, 2.0]]))\n+    assert result == 1.0\n+\n+\n def test_cython_wrapper_inoutarg():\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..bccb0e5 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -238,7 +238,12 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n \n+from sympy.crypto.crypto import encode_morse, decode_morse\n+\n def test_encode_morse():\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('10') == '.----|-----'\n+    assert encode_morse('01') == '-----|.----'\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n     assert encode_morse('SMS\\n') == '...|--|...||'\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..8e43f8d 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,6 +1,8 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n from sympy.simplify.sqrtdenest import _subsets as subsets\n-from sympy.utilities.pytest import slow\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n                                           15, 29]]\n@@ -176,7 +178,13 @@ def test_subsets():\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n \n-def test_issue_5653():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert sqrtdenest(expr) == expr, \"Expression should be returned unchanged\"\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e, \"Expression should be returned unchanged\"\n+    assert _sqrt_match(4 + I) == [], \"Expected empty list when matching (4+I)\"\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..14a5ee1 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,6 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n+from sympy import sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -91,6 +93,9 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+    # Test for multiplication with sympified numbers and Points\n+    assert point1 + sympy.sympify(2.0) * point2 == Point(2, 2)\n+    assert point1 + point2 * sympy.sympify(2.0) == Point(2, 2)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..6a13446 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -501,7 +501,11 @@ def test_diophantine():\n     assert diophantine(eq, permute=True) == complete_soln\n \n     assert diophantine(x**2 + x*Rational(15, 14) - 3) == set()\n-    # test issue 11049\n+    # test issue 18186\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n     eq = 92*x**2 - 99*y**2 - z**2\n     coeff = eq.as_coefficients_dict()\n     assert _diop_ternary_quadratic_normal((x, y, z), coeff) == \\\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..7f2b7d0 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -672,9 +672,19 @@ def test_latex_derivatives():\n         r'\\frac{d^{\\max\\left(n_{1}, n_{2}\\right)}}{d x^{\\max\\left(n_{1}, n_{2}\\right)}} f{\\left(x \\right)}'\n \n \n+from sympy import Subs, latex\n+from sympy.abc import x, y\n+\n def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    # Original test case for the fixed issue\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+\n+    # Additional test cases to verify correct parenthesizing\n+    assert latex(2*Subs(x-y, (y,), (2,))) == r'2 \\left. \\left(x - y\\right) \\right|_{\\substack{ y=2 }}'\n+    assert latex(-Subs(2*x-y, (x,), (0,))) == r'- \\left. \\left(2 x - y\\right) \\right|_{\\substack{ x=0 }}'\n+    assert latex(4*Subs(x*y - y, (x, y), (1, 2))) == r'4 \\left. \\left(x y - y\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n \n def test_latex_integrals():\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..83fb3a1 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -514,7 +514,44 @@ def test_kernS():\n     assert one != 1 and one.expand() == 1\n \n \n-def test_issue_6540_6552():\n+def test_issue_kern_referenced_before_assignment():\n+    # Ensure the fix for `kern` referenced before assignment works correctly\n+    from sympy.abc import x, y\n+    from sympy import Add, Mul, Interval, Rational, Symbol, exp, sin, cos\n+\n+    # Original test case\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+\n+    # Additional test cases, covering diverse expressions\n+    assert kernS(\"(2*(x+y))\") == 2*(x+y)  # Simple case with addition\n+    assert kernS(\"2*(x+y)*y\") == 2*(x+y)*y  # Check multiplication precedence\n+    assert kernS(\"sin(x)**2 + cos(x)**2\") == sin(x)**2 + cos(x)**2  # Trigonometric identities\n+\n+    # Handling of negative values and parentheses\n+    assert kernS(\"-(x+1)\") == -(x+1)  # Ensure unary minus parsing\n+    assert kernS(\"-(2*x)/(2+1)\") == -(2*x)/3  # Division with negation\n+\n+    # Nested expressions and edge cases\n+    assert kernS(\"-(-(x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))\") == \\\n+           -(-(x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))\n+\n+    # Check correct interval parsing\n+    assert (kernS('Interval(-1,-2 - 4*(-3))') == Interval(-1, Add(-2, Mul(12, 1, evaluate=False), evaluate=False)))\n+\n+    # Addition of test case for special characters handling\n+    assert kernS('E**-(x)') == exp(-x)\n+\n+    # Complex expressions to test edge cases\n+    complex_expr = '(1 - x)/(1 - x*(1-y))'\n+    assert kernS(complex_expr) == kernS(complex_expr)\n+    assert kernS('(1-2**-(4+1)*(1-y)*x)') == (1 - x*(1 - y)/32)\n+\n+    # Test for implicit multiplication and power handling\n+    one = kernS('x - (x - 1)')\n+    assert one != 1 and one.expand() == 1\n+\n+    # Test for numeric constants within the expression\n+    assert kernS(\"2+(3*(4+x)-5)*y**2\") == 2+(3*(4+x)-5)*y**2\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..96c3451 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -13,6 +14,7 @@ from sympy.physics.quantum.represent import represent\n from sympy.core.trace import Tr\n from sympy.physics.quantum.spin import JzKet, JzBra\n from sympy.matrices import eye\n+from sympy.physics.quantum import qapply\n \n \n class CustomKet(Ket):\n@@ -106,7 +108,23 @@ def test_identity():\n         assert represent(IdentityOperator(n)) == eye(n)\n \n \n-def test_outer_product():\n+def test_dagger_identity_operator():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    D_O = Dagger(O)\n+\n+    # Test that O * I simplifies to O\n+    assert O * I == O\n+\n+    # Test that Dagger(O) * I simplifies to Dagger(O)\n+    assert D_O * I == D_O\n+\n+    # Test that I * Dagger(O) simplifies to Dagger(O)\n+    assert I * D_O == D_O\n+\n+    # Use qapply to ensure that the simplification happens when applied\n+    assert qapply(D_O * I) == D_O\n+    assert qapply(I * D_O) == D_O\n     k = Ket('k')\n     b = Bra('b')\n     op = OuterProduct(k, b)\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..c4e561c 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -905,8 +905,46 @@ def test_sylow_subgroup():\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 2 > 0\n \n+def test_issue_approach():\n+    from sympy.combinatorics import DihedralGroup\n \n-@slow\n+    # Test the specific case reported in the issue with DihedralGroup(18)\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4  # Expected order of 2-Sylow for DihedralGroup(18)\n+\n+    # Test the specific case reported in the issue with DihedralGroup(50)\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4  # Expected order of 2-Sylow for DihedralGroup(50)\n+\n+    # Additional edge case testing\n+    # Smallest Dihedral group that is non-trivial\n+    G = DihedralGroup(4)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 2  # Expected order of 2-Sylow for DihedralGroup(4)\n+\n+    # Test with a different prime\n+    G = DihedralGroup(9)\n+    S = G.sylow_subgroup(p=3)\n+    assert S.order() == 3  # Expected order of 3-Sylow (cyclic of order 3)\n+\n+    # Larger Dihedral group\n+    G = DihedralGroup(100)\n+    S = G.sylow_subgroup(p=5)\n+    assert S.order() == 5  # Expected order of 5-Sylow\n+\n+    # Non-Prime p (this should be treated like any non-divisor prime)\n+    G = DihedralGroup(22)\n+    S = G.sylow_subgroup(p=7)\n+    assert S.order() == 1  # Should be trivial as 7 doesn't divide the order\n+\n+    # p greater than group order\n+    S = G.sylow_subgroup(p=23)\n+    assert S.order() == 1  # Expect trivial subgroup as 23 > order of group\n+\n+    # Check order consistency\n+    assert G.sylow_subgroup(p=11).order() == 11  # DihedralGroup(22) has a sylow of 11\n def test_presentation():\n     def _test(P):\n         G = P.presentation()\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..c256453 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -513,8 +513,30 @@ def test_partitions():\n             i += 1\n         assert i == RGS_enum(n)\n \n-\n-def test_binary_partitions():\n+def test_partitions_uniqueness():\n+    # Set to hold the memory ids of partitions to test uniqueness\n+    ids = set()\n+    \n+    # Using the partitions generator to ensure no reused dictionaries\n+    for p in partitions(5):\n+        ids.add(id(p))\n+\n+    # There should be the same number of unique memory ids as there are partitions\n+    assert len(ids) == len(list(partitions(5)))\n+\n+    # Testing a specific case\n+    p_list = list(partitions(6, k=2))\n+    assert p_list == [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n+    ids = {id(p) for p in p_list}\n+    assert len(ids) == len(p_list)\n+\n+    # Modify a partition's copy and verify original is untouched\n+    p_first = p_list[0].copy()\n+    p_first[2] += 1\n+    assert p_list[0] != p_first\n+\n+    # Another test to ensure partitions are not reused\n+    assert all(p1 is not p2 for p1, p2 in zip(partitions(4), partitions(4)))\n     assert [i[:] for i in binary_partitions(10)] == [[8, 2], [8, 1, 1],\n         [4, 4, 2], [4, 4, 1, 1], [4, 2, 2, 2], [4, 2, 2, 1, 1],\n         [4, 2, 1, 1, 1, 1], [4, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2],\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..990e292 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,8 +583,13 @@ def test_Float():\n         assert Float(i) is a\n \n \n-\n-@conserve_mpmath_dps\n+def test_zero_not_false():\n+    # Test for issue: https://github.com/sympy/sympy/issues/20796\n+    from sympy import S\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..6c68874 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -8,7 +9,28 @@ from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n-def test_subs():\n+from sympy.functions.elementary.trigonometric import sinh\n+from sympy.functions.elementary.piecewise import Piecewise\n+\n+def test_issue_21373_subs_with_hyperbolic_expressions():\n+    # Reproducing the exact reported issue scenario\n+    x_r, y_r = symbols('x_r y_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr.subs({1: 1.0})  # Should not raise an error\n+\n+    # Additional cases reflecting issue findings:\n+    \n+    # Case testing with cosh\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr_cosh.subs({1: 1.0}) == expr_cosh.subs({1: 1.0})  # Should not raise an error\n+\n+    # Case testing removal of division by z\n+    expr_no_div_z = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    assert expr_no_div_z.subs({1: 1.0}) == expr_no_div_z.subs({1: 1.0})\n+\n+    # Case testing without exp\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z)\n+    assert expr_no_exp.subs({1: 1.0}) == expr_no_exp.subs({1: 1.0})\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..2c43530 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -161,6 +161,35 @@ def test_monomials():\n                     j**2*k**2, x*j, x**2*k, x**2*j**2*k, j, x**2*j*k,\n                     x*j**2, x*k**2, x*j*k, x**2*j**2*k**2, x*j*k**2, x**2, x**2*j*k**2\n             }\n+def test_monomials_issue_min_degrees():\n+    # Test issue with min_degrees when the values are equal\n+    x1, x2, x3 = symbols('x1, x2, x3')\n+    states = [x1, x2, x3]\n+    max_degrees = 3\n+    min_degrees = 3\n+    expected_monomials = {x1**3, x1*x2**2, x1*x3**2, x1**2*x2, x1**2*x3, x2**3, x2*x3**2, x2**2*x1, x2**2*x3, x3**3, x3**2*x1, x3**2*x2}\n+    assert set(itermonomials(states, max_degrees, min_degrees)) == expected_monomials\n+\n+    # Test when min_degrees is less than max_degrees\n+    min_degrees = 2\n+    expected_monomials_2 = {x1**3, x1*x2**2, x1*x3**2, x1**2*x2, x1**2*x3, x2**3, x2*x3**2, x2**2*x1, x2**2*x3, x3**3, x3**2*x1, x3**2*x2,\n+                            x1**2, x1*x2, x1*x3, x2**2, x2*x3, x3**2}\n+    assert set(itermonomials(states, max_degrees, min_degrees)) == expected_monomials_2\n+\n+    # Test when there are more complex cases with combinations and correct minimum and maximum degree usage\n+    states = [x1, x2]\n+    max_degrees = 3\n+    min_degrees = 2\n+    expected_monomials_3 = {x1**3, x2**3, x1**2, x1*x2, x2**2, x1*x2**2, x2*x1**2}\n+    assert set(itermonomials(states, max_degrees, min_degrees)) == expected_monomials_3\n+\n+    # Testing for non-commutative variables (i, j, k)\n+    i, j, k = symbols('i j k', commutative=False)\n+    # Check expected set with a particular degree setup (using a degree of 2 and checking 2 to 3)\n+    max_degrees = 3\n+    min_degrees = 2\n+    expected_monomials_nc = {i*j, i*k, j*k, i**2, j**2, k**2, i*j*k, j*i*k, k*i*j, j**2*i, j*i**2, k**2*j, k*j**2}\n+    assert set(itermonomials([i, j, k], max_degrees, min_degrees)) == expected_monomials_nc\n \n def test_monomial_count():\n     assert monomial_count(2, 2) == 6\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..aee01ee 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # Test for argument invariance using *args\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..5ad037d 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy.core.basic import Basic\n+\n+from sympy.core.parameters import evaluate\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n@@ -440,7 +441,12 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Previously raised an error when evaluate(False)\n+    with evaluate(False):\n+        assert Point(1, 2) == Point2D(1, 2)\n+    # Test without evaluate(False) to ensure normal behavior still holds\n+    assert Point(1, 2) == Point2D(1, 2)\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..5979eb3 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -27,7 +28,23 @@ p = IndexedBase(\"p\")\n def test_PythonCodePrinter():\n     prntr = PythonCodePrinter()\n \n-    assert not prntr.module_imports\n+    # Test for Min and Max\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+\n+    # Testing nested Min and Max\n+    assert prntr.doprint(Min(Min(x, y), z)) == \"min(min(x, y), z)\"\n+    assert prntr.doprint(Max(Max(x, y), z)) == \"max(max(x, y), z)\"\n+\n+    # Testing Min and Max with constants\n+    assert prntr.doprint(Min(3, x)) == \"min(3, x)\"\n+    assert prntr.doprint(Max(5, x)) == \"max(5, x)\"\n+\n+    # Testing Min and Max with more than two arguments\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+\n+    # Test for imports, make sure they are not added unexpectedly\n \n     assert prntr.doprint(x**y) == 'x**y'\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n@@ -35,7 +52,23 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(Mod(-x, y)) == '(-x) % y'\n     assert prntr.doprint(And(x, y)) == 'x and y'\n     assert prntr.doprint(Or(x, y)) == 'x or y'\n-    assert not prntr.module_imports\n+    # Test for Min and Max\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+\n+    # Testing nested Min and Max\n+    assert prntr.doprint(Min(Min(x, y), z)) == \"min(min(x, y), z)\"\n+    assert prntr.doprint(Max(Max(x, y), z)) == \"max(max(x, y), z)\"\n+\n+    # Testing Min and Max with constants\n+    assert prntr.doprint(Min(3, x)) == \"min(3, x)\"\n+    assert prntr.doprint(Max(5, x)) == \"max(5, x)\"\n+\n+    # Testing Min and Max with more than two arguments\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+\n+    # Test for imports, make sure they are not added unexpectedly\n \n     assert prntr.doprint(pi) == 'math.pi'\n     assert prntr.module_imports == {'math': {'pi'}}\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..21ed64c 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1174,8 +1174,12 @@ def test_scipy_polys():\n                     )\n \n \n-\n-def test_lambdify_inspect():\n+def test_issue_single_element_tuple():\n+    # Test lambdify with a tuple with a single element\n+    f_single = lambdify([], (1,))\n+    assert f_single() == (1,)\n+    # Ensure the generated source code includes the comma, indicating a tuple\n+    assert 'return (1,)' in inspect.getsource(f_single)\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..32942ee 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,7 +1,9 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n from sympy.testing.pytest import raises\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..b2e65b9 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -182,8 +182,37 @@ def execute_gamma_simplify_tests_for_function(tfunc, D):\n     st = tfunc(t)\n     assert _is_tensor_eq(st, t)\n \n+from sympy.physics.hep.gamma_matrices import GammaMatrix as G, kahane_simplify\n+from sympy.tensor.tensor import tensor_indices, LorentzIndex\n \n-def test_kahane_algorithm():\n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+\n+    # Test case from the issue\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # Additional cases testing other orders\n+    t = G(rho)*G(mu)*G(-mu)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(mu)*G(rho)*G(-mu)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(mu)*G(-mu)*G(sigma)*G(rho)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(sigma)*G(rho))\n+\n+    t = G(sigma)*G(rho)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(sigma)*G(rho))\n     # Wrap this function to convert to and from TIDS:\n \n     def tfunc(e):\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..92dc159 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,6 +30,8 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n+from sympy import Symbol, S, FiniteSet, Contains, raises, Integers, Reals\n+\n def test_binary_symbols():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -46,6 +48,18 @@ def test_as_set():\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n \n-def test_type_error():\n+def test_contains_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Test with a finite set\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    \n+    # Test with other known sets (if any instance allows)\n+    assert Contains(x, S.Integers).as_set() == S.Integers\n+    assert Contains(x, S.Reals).as_set() == S.Reals\n+    \n+    # Expecting NotImplementedError when calling as_set directly on Contains\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..6728091 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,7 +541,52 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+def test_dimensionless_exponent_with_more_units():\n+    from sympy.physics.units import charge, electric_potential, conductance, coulomb, volt, siemens\n+    from sympy import exp\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+\n+    Q = Quantity('Q')\n+    V = Quantity('V')\n+    G = Quantity('G')\n+    SI.set_quantity_dimension(Q, charge)\n+    SI.set_quantity_dimension(V, electric_potential)\n+    SI.set_quantity_dimension(G, conductance)\n+    Q.set_global_relative_scale_factor(1, coulomb)\n+    V.set_global_relative_scale_factor(1, volt)\n+    G.set_global_relative_scale_factor(1, siemens)\n+\n+    expr2 = Q / (V * G)\n+    dim2 = SI._collect_factor_and_dimension(expr2)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim2)\n+\n+    exp_expr2 = 1 + exp(expr2)\n+    assert SI._collect_factor_and_dimension(exp_expr2) == (1 + E, Dimension(1))\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..2241eb5 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -561,8 +561,47 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n-\n-def test_prefixed_property():\n+from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_24211():\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    try:\n+        factor, dim = SI._collect_factor_and_dimension(expr)\n+        assert dim == SI.get_quantity_dimension(V1)\n+    except ValueError:\n+        assert False, \"Unexpected ValueError: dimension mismatched\"\n+\n+def test_issue_24211_different_units():\n+    # Test with different scale factors\n+    V2 = Quantity('V2')\n+    SI.set_quantity_dimension(V2, velocity)\n+    SI.set_quantity_scale_factor(V2, 3 * meter / second)\n+    A2 = Quantity('A2')\n+    SI.set_quantity_dimension(A2, acceleration)\n+    SI.set_quantity_scale_factor(A2, -9.8 * meter / second**2)\n+    T2 = Quantity('T2')\n+    SI.set_quantity_dimension(T2, time)\n+    SI.set_quantity_scale_factor(T2, 10 * second)\n+\n+    expr2 = A2*T2 + V2\n+    # should not throw ValueError here\n+    try:\n+        factor, dim = SI._collect_factor_and_dimension(expr2)\n+        assert dim == SI.get_quantity_dimension(V2), f\"Dimension mismatch: {dim} != {SI.get_quantity_dimension(V2)}\"\n+    except ValueError:\n+        assert False, \"Unexpected ValueError: dimension mismatched\"\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..f31200a 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -106,4 +107,25 @@ def test_check_homomorphism():\n     a = Permutation(1,2,3,4)\n     b = Permutation(1,3)\n     G = PermutationGroup([a, b])\n-    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+\n+    # Additional tests for PermutationGroups\n+    # Test that the homomorphism is correctly identified for dihedral groups\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+    # Test with inverted generator in images\n+    a_inv, b = D3.generators\n+    a = a_inv**-1\n+    T2 = homomorphism(D3, D3, [a, b], [a_inv, b])\n+    assert T2.is_isomorphism()\n+\n+    # Test with identity element\n+    identity = D3.identity\n+    T_identity = homomorphism(D3, D3, [a, b], [identity, identity])\n+    assert not T_identity.is_isomorphism()\n+    assert T_identity.image().order() == 1\n+\n+    # Ensure incorrect mappings raise ValueError\n+    raises(ValueError, lambda: homomorphism(D3, D3, [a, b], [b, a]))\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..bb4fbc7 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -267,6 +267,25 @@ def test_PolyElement_as_expr():\n \n     raises(ValueError, lambda: f.as_expr(X))\n \n+    # Additional test cases for verifying symbol changes\n+    # Test when using different symbols and checking the output\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Test with mismatched number of symbols\n+    U, V = symbols(\"u,v\")\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test with empty ring (no generators) and expression with no symbols\n+    R_empty, = ring(\"\", ZZ)\n+    const_poly = R_empty(4)\n+    assert const_poly.as_expr() == 4\n+\n+    # Test with specifying no symbol and rely on default symbol usage\n+    h = f.as_expr()\n+    assert h == g.subs({U: X, V: Y, W: Z})   # Should match original variable expressions\n+\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..1a65820 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -268,6 +268,33 @@ def test_convert_equals_signs():\n                         (convert_equals_signs, )\n     x = Symbol('x')\n     y = Symbol('y')\n+\n+def test_issue_24288():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False),\n+        \n+        \"x < y\": Lt(x, y, evaluate=False),\n+        \"x <= y\": Le(x, y, evaluate=False),\n+        \"x > y\": Gt(x, y, evaluate=False),\n+        \"x >= y\": Ge(x, y, evaluate=False),\n+        \"x != y\": Ne(x, y, evaluate=False),\n+        \"x == y\": Eq(x, y, evaluate=False),\n+\n+        \"x + 1 < 2\": Lt(x + 1, 2, evaluate=False),\n+        \"2*x <= y\": Le(2*x, y, evaluate=False),\n+        \"x**2 > 1\": Gt(x**2, 1, evaluate=False),\n+        \"y >= x + 3\": Ge(y, x + 3, evaluate=False),\n+        \"x != x + y\": Ne(x, x + y, evaluate=False),\n+        \"x == y**2\": Eq(x, y**2, evaluate=False),\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+    y = Symbol('y')\n     assert parse_expr(\"1*2=x\", transformations=transformations) == Eq(2, x)\n     assert parse_expr(\"y = x\", transformations=transformations) == Eq(y, x)\n     assert parse_expr(\"(2*y = x) = False\",\n@@ -276,6 +303,33 @@ def test_convert_equals_signs():\n \n def test_parse_function_issue_3539():\n     x = Symbol('x')\n+    y = Symbol('y')\n+\n+def test_issue_24288():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False),\n+        \n+        \"x < y\": Lt(x, y, evaluate=False),\n+        \"x <= y\": Le(x, y, evaluate=False),\n+        \"x > y\": Gt(x, y, evaluate=False),\n+        \"x >= y\": Ge(x, y, evaluate=False),\n+        \"x != y\": Ne(x, y, evaluate=False),\n+        \"x == y\": Eq(x, y, evaluate=False),\n+\n+        \"x + 1 < 2\": Lt(x + 1, 2, evaluate=False),\n+        \"2*x <= y\": Le(2*x, y, evaluate=False),\n+        \"x**2 > 1\": Gt(x**2, 1, evaluate=False),\n+        \"y >= x + 3\": Ge(y, x + 3, evaluate=False),\n+        \"x != x + y\": Ne(x, x + y, evaluate=False),\n+        \"x == y**2\": Eq(x, y**2, evaluate=False),\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n     f = Function('f')\n     assert parse_expr('f(x)') == f(x)\n \n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..cf13ce3 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -35,6 +35,8 @@ from astropy.units.utils import is_effectively_unity\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n         ([\"dex(cm s**-2)\", \"dex(cm/s2)\"], u.DexUnit(u.cm / u.s**2)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n     ],\n )\n def test_unit_grammar(strings, unit):\n@@ -90,6 +92,8 @@ def test_unit_grammar_fail(string):\n         ([\"[cm/s2]\"], dex(u.cm / u.s**2)),\n         ([\"[K]\"], dex(u.K)),\n         ([\"[-]\"], dex(u.dimensionless_unscaled)),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.J / (u.m * u.s * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.J / (u.s * u.kpc**2))),\n     ],\n )\n def test_cds_grammar(strings, unit):\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "",
  "django__django-11477": "",
  "django__django-12273": "",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..42e3199 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -616,6 +616,16 @@ class FastDeleteTests(TestCase):\n         self.assertNumQueries(2, a.delete)\n         self.assertFalse(User.objects.exists())\n         self.assertFalse(Avatar.objects.exists())\n+    def test_fast_delete_all_no_subquery(self):\n+        \"\"\"\n+        Ensure that Model.objects.all().delete() does not generate a subquery,\n+        which is a performance regression and prevents proper table locking.\n+        \"\"\"\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Check that no subquery is used in the deletion SQL.\n+        self.assertNotIn('SELECT', sql)\n \n     def test_fast_delete_m2m(self):\n         t = M2MTo.objects.create()\n@@ -702,4 +712,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..c3a841e 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -24,8 +25,19 @@ class DecimalFieldTests(TestCase):\n         msg = '\u201cabc\u201d value must be a decimal number.'\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n-\n-    def test_default(self):\n+        # Test for non-decimal types to ensure ValidationError is raised instead of TypeError\n+        non_decimal_values = [\n+            {},       # dict\n+            [],       # list\n+            (),       # tuple\n+            set(),    # set\n+            object(), # generic object\n+            complex(1, 1), # complex number\n+        ]\n+        for value in non_decimal_values:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, '\u201c%s\u201d value must be a decimal number.' % value):\n+                    f.to_python(value)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "",
  "django__django-13449": "diff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py\nindex fb67168..6e3d202 100644\n--- a/tests/expressions_window/tests.py\n+++ b/tests/expressions_window/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from unittest import mock, skipIf\n \n@@ -13,6 +14,7 @@ from django.db.models.functions import (\n )\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n+from decimal import Decimal\n from .models import Employee\n \n \n",
  "django__django-13512": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex a61da37..7a14add 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -187,6 +187,9 @@ class UtilsTests(SimpleTestCase):\n             (['a', 'b'], '[\"a\", \"b\"]'),\n             ('a', '\"a\"'),\n             ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),  # Invalid JSON.\n+            ({'a': '\u4f60\u597d \u4e16\u754c'}, '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}'),\n+            ('\u4f60\u597d\uff0c\u4e16\u754c', '\"\u4f60\u597d\uff0c\u4e16\u754c\"'),\n+            ({'a': '\ud83d\ude00\ud83d\udc31'}, '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}'),\n         ]\n         for value, display_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..962bf01 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6616,6 +6616,30 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertRedirects(response, '/test_admin/admin/login/?next=/test_admin/admin/admin_views/article')\n \n     @override_settings(APPEND_SLASH=False)\n+    def test_missing_slash_append_slash_false_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/prefix/')\n+        self.assertEqual(response.status_code, 404)\n+\n+    @override_settings(APPEND_SLASH=False, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_missing_slash_append_slash_false_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertEqual(response.status_code, 404)\n     def test_missing_slash_append_slash_false(self):\n         superuser = User.objects.create_user(\n             username='staff',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..37eb162 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -658,7 +658,33 @@ class WriterTests(SimpleTestCase):\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n-    def test_simple_migration(self):\n+    def test_serialize_model_dependency(self):\n+        \"\"\"\n+        Ensure MigrationWriter correctly handles model dependencies\n+        requiring import of 'models'.\n+        \"\"\"\n+        fields = {\n+            'name': models.TextField(primary_key=True),\n+        }\n+\n+        bases = (app_models.MyMixin, models.Model)\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name='MyModel',\n+                    fields=tuple(fields.items()),\n+                    bases=bases\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Execute and check the migration output for import correctness\n+        result = self.safe_exec(output)\n+        self.assertIn(\"from django.db import models\", output)\n+        self.assertIn(\"Migration\", result)\n         \"\"\"\n         Tests serializing a simple migration.\n         \"\"\"\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..c3cfb42 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1630,7 +1630,22 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n \n-    def test_exists_none_with_aggregate(self):\n+    def test_aggregation_default_after_annotation_with_sum(self):\n+        # This directly tests the case noted in the issue.\n+        result = Book.objects.annotate(\n+            idx=F(\"id\"),\n+        ).aggregate(id_sum=Sum(\"id\", default=0))\n+\n+        # Assuming we know the expected sum of IDs in advance.\n+        self.assertEqual(result['id_sum'], 4560)\n+\n+    def test_aggregation_default_after_annotation_is_zero_when_no_records(self):\n+        # For an empty queryset, the default should return 0\n+        result = Book.objects.none().annotate(\n+            idx=F(\"id\"),\n+        ).aggregate(id_sum=Sum(\"id\", default=0))\n+\n+        self.assertEqual(result['id_sum'], 0)\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.none()),\n@@ -1642,4 +1657,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..357aafc 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2988,7 +2988,21 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n-        # Deconstruction.\n+        # Test moving the unnamed index backward and then forward again.\n+        # Initially rename the index\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n+        # Move the index backward\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, f\"{table_name}_weight_pink_uniq\")  # Assumes default name pattern\n+\n+        # Attempt to move forward again\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n         self.assertEqual(definition[1], [])\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..e15ab5b 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3496,6 +3496,47 @@ class FormFieldCallbackTests(SimpleTestCase):\n                 type(NewForm.base_fields[name].widget),\n             )\n \n+    def test_modelform_factory_uses_meta_callback(self):\n+        def callback(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            formfield.widget = forms.Textarea\n+            return formfield\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = \"__all__\"\n+                formfield_callback = callback\n+\n+        FactoryForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        for field in FactoryForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_factory_form_inherits_meta_callback(self):\n+        def callback(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            formfield.widget = forms.Textarea\n+            return formfield\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = \"__all__\"\n+                formfield_callback = callback\n+\n+        FactoryForm = modelform_factory(model=Person, form=BaseForm)\n+        \n+        class InheritedForm(FactoryForm):\n+            pass\n+\n+        for name, field in FactoryForm.base_fields.items():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+            self.assertEqual(\n+                type(field.widget),\n+                type(InheritedForm.base_fields[name].widget),\n+            )\n+\n \n class LocalizedModelFormTest(TestCase):\n     def test_model_form_applies_localize_to_some_fields(self):\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..c608742 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -5,7 +5,8 @@ import re\n \n from django.core import serializers\n from django.core.serializers.base import DeserializationError\n-from django.core.serializers.json import DjangoJSONEncoder\n+from django.core import serializers\n+from django.db import models\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..c2d7350 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -207,7 +207,25 @@ def test_cmap(cmap):\n     pickle.dumps(cmap)\n \n \n-def test_unpickle_canvas():\n+def test_dpi_on_m1_mac():\n+    # This test highlights the DPI doubling issue on M1 Mac; it should not happen\n+    initial_dpi = 200\n+    fig = mfigure.Figure(dpi=initial_dpi)\n+    system_platform = platform.system()\n+    architecture = platform.machine()\n+\n+    if system_platform == \"Darwin\" and \"arm\" in architecture:\n+        with open(\"test_fig.pickle\", \"wb\") as f:\n+            pickle.dump(fig, f)\n+\n+        with open(\"test_fig.pickle\", \"rb\") as f:\n+            for i in range(5):  # Try multiple times to capture repeated doubling\n+                fig_loaded = pickle.load(f)\n+                f.seek(0)  # Reset the pointer to the start\n+                assert fig_loaded.dpi == initial_dpi, (\n+                    f\"On iteration {i}, DPI should remain {initial_dpi}, \"\n+                    f\"but got {fig_loaded.dpi}\"\n+                )\n     fig = mfigure.Figure()\n     assert fig.canvas is not None\n     out = BytesIO()\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..3425915 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6586,6 +6586,14 @@ def test_integrate(dask):\n     assert isinstance(actual.data, type(da.data))\n \n     # along y\n+    # Test if using 'dim' with DataArray.integrate raises a FutureWarning\n+    with pytest.warns(FutureWarning, match=r\"use the 'coord' argument instead of 'dim'\"):\n+        da.integrate(dim=\"x\")\n+\n+    # Test if using 'coord' works without warnings and produces correct result\n+    actual_coord = da.integrate(coord=\"y\")\n+    assert_equal(actual_coord, ds.integrate(coord=\"y\")[\"var\"])\n+\n     actual = da.integrate(\"y\")\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..755e0c6 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3044,8 +3044,31 @@ class TestDataset:\n         x0 = y[0].to_unstacked_dataset(\"features\")\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n-\n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    \n+    def test_to_stacked_array_single_dimension(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n+\n+    def test_to_stacked_array_with_single_sample(self):\n+        # test with a single sample in the dataset\n+        arr = xr.DataArray([0], coords=[(\"x\", [0])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n+        \n+    def test_to_stacked_array_with_multiple_vars_single_dim(self):\n+        # multiple variables each with a single dimension\n+        arr1 = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        arr2 = xr.DataArray(np.arange(3, 6), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr1, \"b\": arr2})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..40cf306 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -107,6 +107,35 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_handling(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions without causing a crash.\n+    \"\"\"\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n+\n+from typing import Any\n+import re\n+import pytest\n+from pylint.lint import Run\n+from pylint.checkers.utils import EMPTY_MODULE\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..d363cb6 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -119,6 +119,7 @@ def test_syntax_errors(expr: str, column: int, message: str) -> None:\n         \"a+-b\",\n         \"\u05d0\u05d1\u05d2\u05d3\",\n         \"aa\u05d0\u05d1\u05d2\u05d3cc\",\n+        \"compile_invalid_identifiers\",\n         \"a[bcd]\",\n         \"1234\",\n         \"1234abcd\",\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..41e9457 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,34 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    # Test FeatureUnion with custom transformer using pandas output\n+\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import make_union\n+    from sklearn import set_config\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X, y=None):\n+            return self\n+\n+        def transform(self, X, y=None):\n+            return X[\"value\"].groupby(X[\"date\"]).sum().to_frame()\n+\n+    # This works with default transform output.\n+    set_config(transform_output=\"default\")\n+    result_default = make_union(MyTransformer()).fit_transform(data)\n+    assert isinstance(result_default, np.ndarray)\n+\n+    # Test with pandas output configuration.\n+    set_config(transform_output=\"pandas\")\n+    result_pandas = make_union(MyTransformer()).fit_transform(data)\n+    assert isinstance(result_pandas, pd.DataFrame)\n+    assert result_pandas.shape == (4, 1)  # Expect 4 dates after aggregation, each as separate column\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..98418f9 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -246,6 +246,20 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n+    # Test None type handling in both description and signature\n+    # None should be a pending_xref with reftype \"obj\" pointing to \"None\"\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n+    # Test 'Optional' hint with None\n+    doctree = _parse_annotation(\"Optional[None]\")\n+    assert_node(doctree, ([pending_xref, \"Optional\"],\n+                          [desc_sig_punctuation, \"[\"],\n+                          [pending_xref, \"None\"],\n+                          [desc_sig_punctuation, \"]\"]))\n+    assert_node(doctree[2], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n     doctree = _parse_annotation(\"Tuple[int, int]\")\n     assert_node(doctree, ([pending_xref, \"Tuple\"],\n                           [desc_sig_punctuation, \"[\"],\n@@ -254,6 +268,20 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n+    # Test None type handling in both description and signature\n+    # None should be a pending_xref with reftype \"obj\" pointing to \"None\"\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n+    # Test 'Optional' hint with None\n+    doctree = _parse_annotation(\"Optional[None]\")\n+    assert_node(doctree, ([pending_xref, \"Optional\"],\n+                          [desc_sig_punctuation, \"[\"],\n+                          [pending_xref, \"None\"],\n+                          [desc_sig_punctuation, \"]\"]))\n+    assert_node(doctree[2], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n     doctree = _parse_annotation(\"Callable[[int, int], int]\")\n     assert_node(doctree, ([pending_xref, \"Callable\"],\n                           [desc_sig_punctuation, \"[\"],\n@@ -266,6 +294,20 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n+    # Test None type handling in both description and signature\n+    # None should be a pending_xref with reftype \"obj\" pointing to \"None\"\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n+    # Test 'Optional' hint with None\n+    doctree = _parse_annotation(\"Optional[None]\")\n+    assert_node(doctree, ([pending_xref, \"Optional\"],\n+                          [desc_sig_punctuation, \"[\"],\n+                          [pending_xref, \"None\"],\n+                          [desc_sig_punctuation, \"]\"]))\n+    assert_node(doctree[2], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n+\n \n def test_pyfunction_signature(app):\n     text = \".. py:function:: hello(name: str) -> str\"\n@@ -742,4 +784,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..c334086 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,6 +1317,57 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters(self):\n+        # Test with non-optional parameters first\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        # Test with optional parameters\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`, *optional*\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`, *optional*\n+        \"\"\"\n+        self.assertEqual(expected.strip(), actual.strip())\n+\n     def test_parameters_with_class_reference(self):\n         docstring = \"\"\"\\\n Parameters\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..89f1f87 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -773,9 +773,52 @@ def test_pydecoratormethod_signature(app):\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n+import pytest\n+from sphinx.testing import restructuredtext\n+from docutils import nodes\n+from sphinx import addnodes\n+from sphinx.domains.python import PythonModuleIndex, IndexEntry\n \n-@pytest.mark.sphinx(freshenv=True)\n-def test_module_index(app):\n+@pytest.mark.sphinx('dummy', testroot='domain-py')\n+def test_type_and_rtype_xref_resolution(app, status, warning):\n+    text = \"\"\"\n+    .. py:module:: testmodule\n+\n+    .. py:class:: mod.A\n+    .. py:class:: mod.submod.A\n+\n+    .. py:function:: f()\n+\n+        :param mod.A a:\n+        :param mod.submod.A b:\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod\n+\n+    .. py:function:: f()\n+\n+        :param A a:\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+\n+    .. py:currentmodule:: mod.submod\n+\n+    .. py:function:: f()\n+\n+        :param A a: BUG\n+        :param mod.A b:\n+        :param mod.submod.A c:\n+        :rtype: A\n+        :rtype: mod.A\n+        :rtype: mod.submod.A\n+    \"\"\"\n+    restructuredtext.parse(app, text)\n+    warnings = warning.getvalue()\n+    assert \"more than one target found for cross-reference 'A': mod.A, mod.submod.A\" in warnings\n     text = (\".. py:module:: docutils\\n\"\n             \".. py:module:: sphinx\\n\"\n             \".. py:module:: sphinx.config\\n\"\n",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex fb15c70..7b13722 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -8,6 +8,24 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_meta_public_variable(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None, \"private-members\": None}\n+    actual = do_autodoc(app, 'module', 'example', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: example',\n+        '',\n+        '',\n+        '.. py:data:: _foo',\n+        '   :module: example',\n+        '   :value: None',\n+        '',\n+        '   :meta public:',\n+        '',\n+    ]\n+\n import pytest\n \n from .test_ext_autodoc import do_autodoc\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..9d06400 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -984,6 +984,48 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n+def test_param_dict_str_str_type(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: TestClass\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: An optional meta\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"TestClass\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, nodes.list_item, nodes.paragraph]))\n+\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"An optional meta\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"TestClass\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"TestClass\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"TestClass\"})\n+\n+\n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..e1dbd6a 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1009,6 +1009,81 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n+from sphinx.testing.util import assert_node\n+from sphinx import addnodes\n+from sphinx.domains.python import py_sig_re\n+\n+def test_info_field_list_piped_type(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param age: blah blah\\n\"\n+            \"   :type age: int | str\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree,\n+                (nodes.target,\n+                 addnodes.index,\n+                 addnodes.index,\n+                 [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                           [desc_addname, \"example.\"],\n+                                           [desc_name, \"Class\"])],\n+                         [desc_content, nodes.field_list, nodes.field, (nodes.field_name,\n+                                                                        nodes.field_body)])]))\n+    assert_node(doctree[3][1][0][0][1],\n+                ([nodes.paragraph, ([addnodes.literal_strong, \"age\"],\n+                                    \" (\",\n+                                    [pending_xref, addnodes.literal_emphasis, \"int\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                                    \")\",\n+                                    \" -- \",\n+                                    \"blah blah\")],))\n+    assert_node(doctree[3][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"int\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n+def test_info_field_list_piped_type_with_none(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param data: can be bytes, str or None\\n\"\n+            \"   :type data: bytes | str | None\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree,\n+                (nodes.target,\n+                 addnodes.index,\n+                 addnodes.index,\n+                 [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                           [desc_addname, \"example.\"],\n+                                           [desc_name, \"Class\"])],\n+                         [desc_content, nodes.field_list, nodes.field, (nodes.field_name,\n+                                                                        nodes.field_body)])]))\n+    assert_node(doctree[3][1][0][0][1],\n+                ([nodes.paragraph, ([addnodes.literal_strong, \"data\"],\n+                                    \" (\",\n+                                    [pending_xref, addnodes.literal_emphasis, \"bytes\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [addnodes.literal_emphasis, \"None\"],\n+                                    \")\",\n+                                    \" -- \",\n+                                    \"can be bytes, str or None\")],))\n+    assert_node(doctree[3][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"bytes\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"None\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..e5375ed 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1048,6 +1048,13 @@ def test__solveset_multi():\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n \n+def test_issue_18188():\n+    result1 = Eq(x*cos(x) - 3*sin(x), 0)\n+    assert result1.as_set() == ConditionSet(x, Eq(x*cos(x) - 3*sin(x), 0), Reals)\n+\n+    result2 = Eq(x**2 + sqrt(x*2) + sin(x), 0)\n+    assert result2.as_set() == ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), Reals)\n+\n def test_conditionset():\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..a646e0f 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3329,7 +3329,34 @@ def test_issue_17988():\n     p = poly(x - 1)\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n+from sympy import Symbol, sqf_list\n \n-def test_issue_18205():\n+def test_issue_8695():\n+    x = Symbol('x')\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == result\n+\n+def test_additional_sqf_list_cases():\n+    x = Symbol('x')\n+    # A case to ensure multiplicities are counted correctly\n+    p1 = (x - 1)**3 * (x - 2)**2\n+    result1 = (1, [(x - 1, 3), (x - 2, 2)])\n+    assert sqf_list(p1) == result1\n+\n+    # A case for a polynomial with no repeated factors\n+    p2 = x**3 - 3*x**2 + 3*x - 1  # This is (x - 1)^3\n+    result2 = (1, [(x - 1, 3)])\n+    assert sqf_list(p2) == result2\n+\n+    # A case with a higher degree polynomial with multiple distinct roots\n+    p3 = (x**2 - 4)*(x**3 - 1)\n+    result3 = (1, [(x - 2, 1), (x + 2, 1), (x - 1, 1), (x**2 + x + 1, 1)])\n+    assert sqf_list(p3) == result3\n+\n+    # A polynomial with only one factor\n+    p4 = x**4 + 4\n+    result4 = (1, [(x**4 + 4, 1)])\n+    assert sqf_list(p4) == result4\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..a437029 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3241,8 +3241,14 @@ def test_keep_coeff():\n     assert _keep_coeff(x, 1/x) == 1\n     assert _keep_coeff(x + 1, S(2)) == u\n \n+from sympy import expand, factor, I, symbols\n \n-def test_poly_matching_consistency():\n+x, y = symbols('x y')\n+\n+def test_factor_extension_issue():\n+    # Test for the issue: Factor with extension=True drops a factor of y-1\n+    z = expand((x-1)*(y-1))\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     # Test for this issue:\n     # https://github.com/sympy/sympy/issues/5514\n     assert I * Poly(x, x) == Poly(I*x, x)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..7f7b08c 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -34,7 +35,15 @@ def test_structure():\n     assert bool(b1)\n \n \n-def test_equality():\n+def test_symbol_no_dict():\n+    from sympy import Symbol\n+    s = Symbol('s')\n+    # Ensure that Symbol has __slots__ defined\n+    assert hasattr(s, '__slots__')\n+    # Ensure that __dict__ does not exist due to __slots__ use\n+    assert not hasattr(s, '__dict__'), \"Symbol should not have a __dict__ when __slots__ are used\"\n+    # Check __slots__ contains 'name'\n+    assert s.__slots__ == ('name',)\n     instances = [b1, b2, b3, b21, Basic(b1, b1, b1), Basic]\n     for i, b_i in enumerate(instances):\n         for j, b_j in enumerate(instances):\n",
  "sympy__sympy-24562": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..c233da0 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3189,6 +3189,22 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n \n         self.assertEqual(SomeForm()['field'].id_for_label, 'id_field')\n \n+    def test_boundfield_subwidget_id_for_label(self):\n+        \"\"\"\n+        If auto_id is provided when initializing the form, the generated ID in\n+        subwidgets must reflect that prefix.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n+\n     def test_boundfield_id_for_label_override_by_attrs(self):\n         \"\"\"\n         If an id is provided in `Widget.attrs`, it overrides the generated ID,\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..59ad824 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -301,8 +301,46 @@ def test_tool_line_handle():\n \n     assert tool_line_handle.positions == positions\n \n-\n-def check_lasso_selector(**kwargs):\n+import pytest\n+import matplotlib.pyplot as plt\n+from matplotlib import widgets\n+from matplotlib.testing.widgets import do_event\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]  # Updating selector is done in onmove\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], release_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n+\n+    # Additional check to ensure axis does not include 0 unless data does\n+    ax.plot([0, 25], [0, 50])  # Add data including 0\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    if direction == 'horizontal':\n+        assert ax.get_xbound()[0] != 0 or (0 in ax.get_xticks())\n+    else:\n+        assert ax.get_ybound()[0] != 0 or (0 in ax.get_yticks())\n     ax = get_ax()\n \n     def onselect(verts):\n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..278f6f4 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,104 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n+def test_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                          n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # check that the underlying model fails to converge\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # check that the underlying model converges w/o warnings\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n+def test_sparse_coder_default_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3\n+    n_components = resolution // subsampling\n+\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                          n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # check that the underlying model does not converge with the default max_iter\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm)\n+        model.fit_transform(X)\n+\n+    # custom max_iter larger than default\n+    max_iter = 5000\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=max_iter)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..1a69832 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -137,6 +137,28 @@ def test_multi_target_sample_weights():\n     w = [2., 1.]\n     rgr_w = MultiOutputRegressor(GradientBoostingRegressor(random_state=0))\n     rgr_w.fit(Xw, yw, w)\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+import pytest\n+\n+@pytest.mark.parametrize(\"method\", [\"predict\", \"predict_proba\"])\n+def test_cross_val_predict_multioutputclassifier(method):\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20,\n+                                          n_classes=3, n_labels=2,\n+                                          random_state=42)\n+\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    # Check that no exception is raised when using 'method'\n+    pred = cross_val_predict(mo_lda, X, Y, cv=5, method=method)\n+    # Ensure that predictions or probabilities have the same number of outputs\n+    assert len(pred) == len(Y)\n+    if method == \"predict_proba\":\n+        # Check that each predicted probability is a list of arrays for each output\n+        for output_proba in pred:\n+            assert isinstance(output_proba, list)\n+            assert len(output_proba) == Y.shape[1]\n \n     # unweighted, but with repeated samples\n     X = [[1, 2, 3], [1, 2, 3], [4, 5, 6]]\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..7a70df6 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -292,5 +292,21 @@ def test_stringify_type_union_operator():\n     assert stringify(int | str | None) == \"int | str | None\"  # type: ignore\n \n \n-def test_stringify_broken_type_hints():\n+def test_restify_mocked_base_class():\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        \n+        class MockedModule(nn.Module):\n+            pass\n+\n+        assert restify(MockedModule) == ':py:class:`torch.nn.Module`'\n+\n+def test_stringify_mocked_base_class():\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        \n+        class MockedModule(nn.Module):\n+            pass\n+\n+        assert stringify(MockedModule) == 'torch.nn.Module'\n     assert stringify(BrokenType) == 'tests.test_util_typing.BrokenType'\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..55542e9 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,21 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    # Additional test cases to thoroughly check the fix\n+    assert p.subs(n, 3).doit() == S(57)/8  # (3 + 2^0) * (3 + 2^(-1)) * (3 + 2^(-2))\n+    assert p.subs(n, 4).doit() == S(825)/64\n+    assert p.subs(n, 5).doit() == S(21375)/1024\n+\n+    # Test if simplify gives expected result with n=2\n+    p_simplified = simplify(Product(n + 1 / 2**k, (k, 0, n-1)).doit())\n+    assert p_simplified.subs(n, 2) == S(15)/2\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +372,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}