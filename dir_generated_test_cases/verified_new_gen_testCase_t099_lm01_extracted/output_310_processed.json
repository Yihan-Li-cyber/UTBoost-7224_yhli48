{
  "astropy__astropy-12907": "",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..39b8aa4 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,17 @@\n+\n+def test_identify_format_fits_extension():\n+    \"\"\"Test identify_format with a normal FITS extension to ensure no IndexError occurs.\"\"\"\n+    fmts = identify_format(\"write\", Table, \"bububu.fits\", None, [], {})\n+    assert fmts == [\"fits\"], \"Expected format should be ['fits'] for a valid FITS extension.\"\n+\n+def test_identify_format_no_args():\n+    \"\"\"Test identify_format with no '*args', should not raise IndexError.\"\"\"\n+    fmts = identify_format(\"write\", Table, \"bububu.ecsv\", None, [], {})\n+    assert isinstance(fmts, list), \"Expected fmts to be a list.\"\n+\n+from astropy.io.registry import identify_format\n+from astropy.table import Table\n+\n import gc\n import warnings\n \n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..a719283 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -136,9 +136,54 @@ class TestHeaderFunctions(FitsTestCase):\n             \"FLOATNUM= -4.6737463674763E+032\"\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n+    \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+    def test_floating_point_precision(self):\n+        \"\"\"\n+        Test cases for various floating point values to check precision handling and comment truncation\n+        \"\"\"\n+        key = \"HIERARCH KEYWORD\"\n+        comment = \"[units] describing the value\"\n+\n+        # Test with a typical small float\n+        c = fits.Card(key, 0.1234567890123456, comment)\n+        expected_str = f\"{key} = 0.1234567890123456 / {comment}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with a float that might cause rounding issues\n+        c = fits.Card(key, 1.234567890123456e-5, comment)\n+        expected_str = f\"{key} = 0.00001234567890123456 / {comment}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with negative float\n+        c = fits.Card(key, -98765.4321, comment)\n+        expected_str = f\"{key} = -98765.4321 / {comment}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n \n-    def test_complex_value_card(self):\n-        \"\"\"Test Card constructor with complex value\"\"\"\n+        # Test with float exactly at 20 characters\n+        c = fits.Card(key, 123456789012345.67, comment)\n+        expected_str = f\"{key} = 123456789012345.67 / {comment}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n \n         c = fits.Card(\"abc\", (1.2345377437887837487e88 + 6324767364763746367e-33j))\n         f1 = _pad(\"ABC     = (1.23453774378878E+88, 6.32476736476374E-15)\")\n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..78975a9 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,7 +601,22 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_vla_comparison_identical(self):\n+        \"\"\"Test that files with variable-length arrays are correctly compared for identity.\"\"\"\n+        \n+        # Create a FITS file with a VLA column\n+        col = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        hdu.writeto('test_vla_identical.fits', overwrite=True)\n+        \n+        # Use FITSDiff to compare the file to itself\n+        diff = FITSDiff('test_vla_identical.fits', 'test_vla_identical.fits')\n+        \n+        # Check if the files are identified as identical\n+        assert diff.identical, \"The file should be identical to itself.\"\n+        \n+        # Clean up created file\n+        os.remove('test_vla_identical.fits')\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..2d6e80e 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,20 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings_with_property():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"\"\"BAR\"\"\"\n+            return None\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 42\n \n-def test_set_locale():\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..e46748e 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -172,6 +172,9 @@ def test_multiple_solidus():\n         u.Unit(\"m/s/kg\", format=\"vounit\")\n \n \n+import pytest\n+from astropy import units as u\n+\n def test_unknown_unit3():\n     unit = u.Unit(\"FOO\", parse_strict='silent')\n     assert isinstance(unit, u.UnrecognizedUnit)\n@@ -181,6 +184,10 @@ def test_unknown_unit3():\n     assert unit == unit2\n     assert unit.is_equivalent(unit2)\n \n+    # Additional tests for issue with UnrecognizedUnit comparison with None\n+    assert unit != None\n+    assert unit not in (None, u.m)\n+\n     unit3 = u.Unit(\"BAR\", parse_strict='silent')\n     assert unit != unit3\n     assert not unit.is_equivalent(unit3)\n@@ -199,7 +206,21 @@ def test_unknown_unit3():\n \n \n @raises(TypeError)\n-def test_invalid_scale():\n+def test_unrecognized_unit_none_comparison():\n+    unit = u.Unit(\"asdf\", parse_strict='silent')\n+    \n+    # Test that comparison of UnrecognizedUnit with None does not raise an error and returns False\n+    try:\n+        result = unit == None\n+        assert result is False, \"Comparison with None should be False\"\n+    except TypeError:\n+        pytest.fail(\"Comparison with None raised TypeError\")\n+\n+    # Test that UnrecognizedUnit is not in a list containing None\n+    assert unit not in [None]\n+\n+    # Test that UnrecognizedUnit is not equal to None using 'is not' construct for clarity\n+    assert (unit is not None) is True\n     x = ['a', 'b', 'c'] * u.m\n \n \n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..6bf46ba 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -68,8 +68,22 @@ def test_minversion():\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n-    bad_versions = ['1', '1.2rc1']\n+    bad_versions = ['1', '1.2rc1', '1.14dev', '1.14.3dev']\n+\n+    # Test with versions that include mixed numeric and non-numeric components\n+    assert not minversion(test_module, '0.12.3dev')\n+    assert not minversion(test_module, '0.12.4')\n+    assert minversion(test_module, '0.12.0dev')\n+    assert minversion(test_module, '0.12.2')\n+\n+    # New test case to specifically address the issue described\n+    another_test_module = ModuleType(str(\"another_test_module\"))\n+    another_test_module.__version__ = '1.14.3'\n+    \n+    # Test specific case from the issue\n+    assert minversion(another_test_module, '1.14dev')\n+    assert not minversion(another_test_module, '1.15dev')\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..972d237 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -79,6 +79,33 @@ class TestHeaderFunctions(FitsTestCase):\n         assert header['B'] == 'B'\n         assert header.comments['B'] == 'C'\n \n+    def test_card_from_bytes_and_str(self):\n+        \"\"\"Test loading a `Card` from both `bytes` and `str`.\"\"\"\n+        # Test with bytes input\n+        c = fits.Card.fromstring(b\"TESTBYTE= 'value   '\")\n+        assert c.keyword == 'TESTBYTE'\n+        assert c.value == 'value'\n+\n+        # Test with str input\n+        c = fits.Card.fromstring(\"TESTSTR = 'value   '\")\n+        assert c.keyword == 'TESTSTR'\n+        assert c.value == 'value'\n+\n+    def test_header_fromstring_bytes_and_str(self):\n+        \"\"\"Test reading a `Header` from both `bytes` and `str` strings,\n+        corresponding to test cases similar to fromfile's handling of binary and text mode.\n+        \"\"\"\n+        # Simulate reading header from bytes\n+        header_data_bytes = b\"SIMPLE  = T / file does conform to FITS standard             END     \"\n+        header_from_bytes = fits.Header.fromstring(header_data_bytes)\n+\n+        # Simulate reading header from str\n+        header_data_str = \"SIMPLE  = T / file does conform to FITS standard             END     \"\n+        header_from_str = fits.Header.fromstring(header_data_str)\n+\n+        assert header_from_bytes['SIMPLE'] == header_from_str['SIMPLE']\n+        assert header_from_bytes.tostring() == header_from_str.tostring()\n+\n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n \n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..c187afc 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -31,6 +31,10 @@ try:\n except ImportError:\n     HAS_MATPLOTLIB = False\n \n+import numpy as np\n+import astropy.units as u\n+import pytest\n+import decimal\n \n \"\"\" The Quantity class will represent a number + unit + uncertainty \"\"\"\n \n",
  "django__django-10097": "",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..b654902 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n import re\n from decimal import Decimal\n \n from django.core.exceptions import FieldError\n+from django.db.models.expressions import Case, When\n from django.db import connection\n from django.db.models import (\n     Avg, Count, DecimalField, DurationField, F, FloatField, Func, IntegerField,\n@@ -389,7 +391,19 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_count_distinct_expression(self):\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_with_different_condition(self):\n+        # An additional test with a different condition to ensure robustness\n+        aggs = Book.objects.aggregate(\n+            distinct_high_rated_books=Count(Case(When(rating__gt=4, then='id')), distinct=True),\n+        )\n+        expected_count = len(set(Book.objects.filter(rating__gt=4).values_list('id', flat=True)))\n+        self.assertEqual(aggs['distinct_high_rated_books'], expected_count)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..dda7208 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1095,7 +1095,17 @@ class OverrideSettingsTests(SimpleTestCase):\n \n     def test_override_file_upload_permissions(self):\n         \"\"\"\n-        Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n+        Default FILE_UPLOAD_PERMISSIONS should be 0o644, and overriding this\n+        setting should be reflected in the file_permissions_mode attribute of\n+        django.core.files.storage.default_storage.\n+        \"\"\"\n+        self.assertEqual(default_storage.file_permissions_mode, 0o644)  # Check default\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=0o755):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o755)\n+\n+    def test_file_upload_permissions_with_tempfile(self):\n+        \"\"\"\n+        Test files uploaded using NamedTemporaryFile have correct permissions set.\n         the file_permissions_mode attribute of\n         django.core.files.storage.default_storage.\n         \"\"\"\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..da55346 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,3 +1,4 @@\n+\n import os\n import signal\n from unittest import mock\n@@ -29,6 +30,38 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n+    def _run_it_with_subprocess_run(self, dbinfo):\n+        \"\"\"\n+        This function invokes the runshell command, while mocking\n+        subprocess.run. It returns a 2-tuple with:\n+        - The command line list\n+        - The value of the PGPASSWORD environment variable, or None.\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.subprocess_args = list(*args)\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return mock.Mock()  # simulating CompletedProcess\n+\n+        self.subprocess_args = None\n+        self.pgpassword = None\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db(dbinfo)\n+        return self.subprocess_args, self.pgpassword\n+\n+    def test_pgpassword(self):\n+        self.assertEqual(\n+            self._run_it_with_subprocess_run({\n+                'database': 'dbname',\n+                'user': 'user',\n+                'password': 'pass',\n+                'host': 'localhost',\n+                'port': '5432',\n+            }), (\n+                ['psql', '-U', 'user', '-h', 'localhost', '-p', '5432', 'dbname'],\n+                'pass',\n+            )\n+        )\n+\n     def test_basic(self):\n         self.assertEqual(\n             self._run_it({\n@@ -113,4 +146,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..b74a3af 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -5,6 +5,7 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n+from django.contrib.contenttypes.models import ContentType\n \n \n @override_settings(\n@@ -55,7 +56,16 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_content_type_rename_conflict(self):\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         ContentType.objects.create(app_label='contenttypes_tests', model='renamedfoo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0)\n@@ -63,4 +73,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..d64f0cb 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,44 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inlines_various_requests(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = [AlternateInline, MediaInline]\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+        request = type('Request', (), {})()  # Creating a simple request mock\n+\n+        # Default case: no name attribute\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+        # When name is 'alternate'\n+        request.name = 'alternate'\n+        self.assertEqual(ma.get_inlines(request, None), (AlternateInline,))\n+        self.assertEqual(type(ma.get_inline_instances(request)[0]), AlternateInline)\n+\n+        # When name is 'media'\n+        request.name = 'media'\n+        self.assertEqual(ma.get_inlines(request, None), (MediaInline,))\n+        self.assertEqual(type(ma.get_inline_instances(request)[0]), MediaInline)\n+\n+        # Unexpected name\n+        request.name = 'unexpected'\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..9b464a5 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,6 +238,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            \"en\\u2013dash\", 'trailingnewline\\u000A', 'normalname\\n',\n         ]\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n@@ -250,7 +251,7 @@ class UsernameValidatorsTests(SimpleTestCase):\n \n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", 'trailingnewline\\n', 'normalname\\n']\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +259,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..135fef7 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -10,12 +10,26 @@ from .utils import ROOT, TEMPLATE_DIR\n OTHER_DIR = os.path.join(ROOT, 'other_templates')\n \n \n+import os\n+\n class RenderToStringTest(SimpleTestCase):\n \n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n-    def test_basic_context(self):\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+        \n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n         self.assertEqual(\n             self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n             'obj:test\\n',\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..26aff69 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -413,7 +413,9 @@ class HttpResponseTests(unittest.TestCase):\n         self.assertEqual(list(i), [b'abc'])\n         self.assertEqual(list(i), [])\n \n-    def test_lazy_content(self):\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview test'))\n+        self.assertEqual(r.content, b'memoryview test')\n         r = HttpResponse(lazystr('helloworld'))\n         self.assertEqual(r.content, b'helloworld')\n \n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..09d1946 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -501,6 +501,17 @@ class LoaderTests(TestCase):\n         self.assertEqual(plan, expected_plan)\n \n     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_private'})\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n     def test_ignore_files(self):\n         \"\"\"Files prefixed with underscore, tilde, or dot aren't loaded.\"\"\"\n         loader = MigrationLoader(connection)\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..8382f6d 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -752,6 +752,45 @@ class TestInlinePermissions(TestCase):\n             html=True\n         )\n \n+    def test_inline_add_m2m_view_only_perm(self):\n+        # Grant view permission only, no add/change/delete permissions\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        # In view-only mode, no inlines should be editable or deletable\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True\n+        )\n+\n+    def test_inline_change_m2m_view_only_perm(self):\n+        # Grant view permission only, no add/change/delete permissions\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        # Inline fields are read-only\n+        self.assertContains(response, '<p>%s</p>' % self.client.get(self.author_change_url).context['form'].instance.books.first())\n+        self.assertNotContains(response, '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" '\n+            'id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True\n+        )\n+\n     def test_inline_change_fk_change_del_perm(self):\n         permission = Permission.objects.get(codename='change_inner2', content_type=self.inner_ct)\n         self.user.user_permissions.add(permission)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..1fdf227 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2899,7 +2899,35 @@ class StrictAssignmentTests(SimpleTestCase):\n         })\n \n \n+from django.forms.models import model_to_dict\n+from django.test import TestCase\n+from .models import BetterWriter, Colour, ColourfulItem\n+\n class ModelToDictTests(TestCase):\n+    def test_empty_fields_should_return_empty_dict(self):\n+        \"\"\"Test model_to_dict with an empty fields list should return an empty dict.\"\"\"\n+        bw = BetterWriter.objects.create(name='Test Name', score=5)\n+        result = model_to_dict(bw, fields=[])\n+        self.assertEqual(result, {})\n+        \n+    def test_non_empty_fields(self):\n+        \"\"\"Test model_to_dict with specific fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Test Name', score=5)\n+        result = model_to_dict(bw, fields=['id', 'name'])\n+        self.assertEqual(sorted(result.keys()), ['id', 'name'])\n+        \n+    def test_all_fields_when_exclude_is_empty(self):\n+        \"\"\"Test model_to_dict with an empty exclude list should return all fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Test Name', score=5)\n+        result = model_to_dict(bw, exclude=[])\n+        self.assertEqual(sorted(result.keys()), ['id', 'name', 'score', 'writer_ptr'])\n+        \n+    def test_exclude_fields(self):\n+        \"\"\"Test model_to_dict excluding specific fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Test Name', score=5)\n+        result = model_to_dict(bw, exclude=['id', 'name'])\n+        self.assertEqual(sorted(result.keys()), ['score', 'writer_ptr'])\n+\n     def test_many_to_many(self):\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..2585a34 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,8 +1,10 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from django.db.models.deletion import Collector\n \n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..678eeed 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,13 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-201', 2, '0.00'),\n+            ('1e-180', 20, '0.' + '0' * 19 + '1'),\n+            ('5e-180', 20, '0.' + '0' * 19 + '5'),\n+            ('1e-190', 50, '0.' + '0' * 49 + '1'),\n+            ('9e-190', 50, '0.' + '0' * 49 + '9'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..68cb870 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,4 @@\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n@@ -195,8 +196,17 @@ class Comment(models.Model):\n     class Meta:\n         ordering = ['id']\n \n+import uuid\n+\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=100)\n \n-# Models for lookup ordering tests\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)\n+    foo_object_id = models.CharField(max_length=255)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+    description = models.CharField(max_length=255)\n \n class House(models.Model):\n     name = models.CharField(max_length=50)\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..586ff0a 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -81,7 +81,29 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_ssl_certificates_and_key(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None,  # No password being set in this test case.\n+            )\n+        )\n+        # Additionally, ensure that SSL environment variables are passed correctly\n+        self.assertDictEqual(self.pg_env, {\n+            'PGSSLMODE': 'verify-ca',\n+            'PGSSLROOTCERT': 'root.crt',\n+            'PGSSLCERT': 'client.crt',\n+            'PGSSLKEY': 'client.key',\n+        })\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..578add8 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -82,6 +82,40 @@ class FilteredRelationTests(TestCase):\n                     (self.book4, self.author1),\n                 ], lambda x: (x, x.author_join))\n \n+    def test_with_exclude(self):\n+        \"\"\"\n+        This test case validates that using exclude with FilteredRelation correctly excludes\n+        the authors who have written a book with the specified title.\n+        \"\"\"\n+        authors_with_alice_books_excluded = Author.objects.annotate(\n+            book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+        ).exclude(book_alice__isnull=False)\n+        self.assertSequenceEqual(authors_with_alice_books_excluded, [self.author2])\n+\n+    def test_exclude_nonexisting_condition(self):\n+        \"\"\"\n+        This test checks that excluding authors based on a non-existing book title\n+        results in no exclusion, returning all authors.\n+        \"\"\"\n+        all_authors = Author.objects.annotate(\n+            book_dummy=FilteredRelation('book', condition=Q(book__title__iexact='non-existent title')),\n+        ).exclude(book_dummy__isnull=False)\n+        self.assertSequenceEqual(all_authors, [self.author1, self.author2])\n+\n+    def test_exclude_with_join_and_complex_condition(self):\n+        \"\"\"\n+        This test examines using a complex condition in FilteredRelation and excludes those authors,\n+        ensuring the query does not produce errors with complex filters.\n+        \"\"\"\n+        authors_filtered = Author.objects.annotate(\n+            book_alice_rented=FilteredRelation(\n+                'book', condition=Q(\n+                    Q(book__title__iexact='poem by alice') | Q(book__state=Book.RENTED)\n+                )\n+            ),\n+        ).exclude(book_alice_rented__isnull=False)\n+        self.assertSequenceEqual(authors_filtered, [self.author2])\n+\n     def test_without_join(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..a53d828 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,6 +243,30 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n+    def test_skip_checks_with_checks(self):\n+        \"\"\"\n+        Test that when running the command without --skip-checks, \n+        the system checks are performed.\n+        \"\"\"\n+        # Create a settings file that would cause a system check to fail.\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',  # Incorrect setup to trigger a system check error.\n+        })\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn('System check identified some issues', err)  # Expecting error output.\n+\n+    def test_skip_checks_option_added(self):\n+        \"\"\"\n+        Test that --skip-checks actually skips the checks.\n+        \"\"\"\n+        # Create a settings file that would cause a system check to fail.\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',  # Incorrect setup to trigger a system check error.\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n     def test_disallowed_abbreviated_options(self):\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..f57ddc2 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,9 +1,34 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n from django.utils.translation import gettext_lazy as _\n \n \n-class RegexPatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_root_urlconf(self):\n+        # Initially, the resolver for a default URLconf and for the settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_before_and_after_request(self):\n+        # Emulates calling get_resolver before any request has been processed\n+        resolver_before_request = get_resolver(None)\n+        resolver_with_explicit_root = get_resolver('urlpatterns.path_urls')\n+\n+        # Ensure that before setting the URL conf, a call with None or explicit ROOT_URLCONF yields the same result\n+        self.assertIs(resolver_before_request, resolver_with_explicit_root)\n+\n+        # Emulates that set_urlconf has been called, such as by handling a request\n+        from django.urls.base import set_urlconf\n+        set_urlconf('urlpatterns.path_urls')\n+\n+        # After a request, the resolver using None should still reference the explicit ROOT_URLCONF resolver\n+        resolver_after_request = get_resolver(None)\n+        self.assertIs(resolver_after_request, resolver_with_explicit_root)\n+        self.assertIs(resolver_after_request, resolver_before_request)\n \n     def test_str(self):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n@@ -12,4 +37,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..6014e0d 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -226,6 +226,16 @@ class BaseModelBackendTest:\n         authenticate(username='no_such_user', password='test')\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n+from django.contrib.auth import authenticate\n+from django.test import TestCase, override_settings\n+from django.contrib.auth.models import User\n+\n+class CountingMD5PasswordHasher:\n+    calls = 0\n+\n+    def set_password(self, raw_password):\n+        CountingMD5PasswordHasher.calls += 1\n+        return f\"hashed_{raw_password}\"\n \n class ModelBackendTest(BaseModelBackendTest, TestCase):\n     \"\"\"\n@@ -242,7 +252,18 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n             password='test',\n         )\n \n-    def test_authenticate_inactive(self):\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_without_credentials(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        for credentials in (\n+            {},\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},\n+            {'password': 'test'},\n+        ):\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n         \"\"\"\n         An inactive user can't authenticate.\n         \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..666bba6 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,6 +124,19 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    def test_change_columns_in_values_list(self):\n+        # Test that we can change the list of columns in values_list for composed queries\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        \n+        # Initially get ('name', 'order') tuple\n+        reserved_name = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name, ('a', 2))\n+        \n+        # Change to only get 'order'\n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n+\n     def test_union_with_two_annotated_values_list(self):\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..c28bc0c 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -11,6 +11,7 @@ from email import charset, message_from_binary_file, message_from_bytes\n from email.header import Header\n from email.mime.text import MIMEText\n from email.utils import parseaddr\n+from unittest.mock import patch\n from io import StringIO\n from smtplib import SMTP, SMTPAuthenticationError, SMTPException\n from ssl import SSLError\n@@ -364,6 +365,22 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n+   \n+    @mock.patch('socket.getfqdn', return_value='\u6b63\u5b97')\n+    def test_non_ascii_dns_with_iso_8859_1_encoding(self, mocked_getfqdn):\n+        \"\"\"Test if the Message-ID is generated correctly with a non-ASCII hostname and iso-8859-1 encoding.\"\"\"\n+        delattr(DNS_NAME, '_fqdn')  # Clear any cached value\n+        email = EmailMessage('Subject', 'Body', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        self.assertIn('@xn--yfro4i67o>', email.message()['Message-ID'])\n+        \n+    @mock.patch('socket.getfqdn', return_value='\u6c49\u5b57')\n+    def test_non_ascii_dns_with_utf8_encoding(self, mocked_getfqdn):\n+        \"\"\"Test if the Message-ID is generated correctly with a non-ASCII hostname and utf-8 encoding.\"\"\"\n+        delattr(DNS_NAME, '_fqdn') \n+        email = EmailMessage('Subject', 'Body', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'utf-8'  # Even though utf-8 can handle these characters, the domain should still be in punycode\n+        self.assertIn('@xn--fsq>', email.message()['Message-ID'])\n \n     def test_encoding(self):\n         \"\"\"\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..3c447e5 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,59 @@\n+\n+class ListDisplayFieldAccessibleViaInstanceTests(CheckTestCase):\n+\n+    def test_valid_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_invalid_with_nonexistent_field(self):\n+        class TestModel(Model):\n+            pass\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' refers to 'non_existent_field', \"\n+            \"which is not a callable, an attribute of 'TestModelAdmin', or \"\n+            \"an attribute or method on 'app.TestModel'.\",\n+            'admin.E108'\n+        )\n+\n+    def test_invalid_with_many_to_many_field(self):\n+        class ManyToManyTestModel(Model):\n+            many_field = models.ManyToManyField(Band)\n+\n+        class ManyToManyTestModelAdmin(ModelAdmin):\n+            list_display = ('many_field',)\n+\n+        self.assertIsInvalid(\n+            ManyToManyTestModelAdmin, ManyToManyTestModel,\n+            \"The value of 'list_display[0]' must not be a ManyToManyField.\",\n+            'admin.E109'\n+        )\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..f6a3533 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,6 +1,6 @@\n from datetime import datetime\n from operator import attrgetter\n-\n+from datetime import datetime\n from django.core.exceptions import FieldError\n from django.db.models import (\n     CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n@@ -462,6 +462,47 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n+    def test_ordering_with_expression(self):\n+        # Testing that ordering expressions in Meta are handled correctly for inherited models\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n+    def test_complex_ordering_expression(self):\n+        # Additional test to verify complex ordering logic\n+        ca1 = ChildArticle.objects.create(\n+            headline='h4',\n+            pub_date=datetime(2005, 7, 26),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h5',\n+            pub_date=datetime(2005, 7, 28),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h6',\n+            pub_date=datetime(2005, 7, 29),\n+            author=self.author_2,\n+        )\n+        articles = ChildArticle.objects.order_by(F('author').desc(), 'pub_date')\n+        self.assertSequenceEqual(articles, [ca3, ca1, ca2])\n+\n     def test_deprecated_values_annotate(self):\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n@@ -469,5 +510,46 @@ class OrderingTests(TestCase):\n             \"descending=False), OrderBy(F(second_author__name), \"\n             \"descending=False)) to retain the current query.\"\n         )\n+\n+    def test_ordering_with_expression(self):\n+        # Testing that ordering expressions in Meta are handled correctly for inherited models\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n+    def test_complex_ordering_expression(self):\n+        # Additional test to verify complex ordering logic\n+        ca1 = ChildArticle.objects.create(\n+            headline='h4',\n+            pub_date=datetime(2005, 7, 26),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h5',\n+            pub_date=datetime(2005, 7, 28),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h6',\n+            pub_date=datetime(2005, 7, 29),\n+            author=self.author_2,\n+        )\n+        articles = ChildArticle.objects.order_by(F('author').desc(), 'pub_date')\n+        self.assertSequenceEqual(articles, [ca3, ca1, ca2])\n         with self.assertRaisesMessage(RemovedInDjango31Warning, msg):\n             list(Article.objects.values('author').annotate(Count('headline')))\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..18969ea 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -405,9 +405,35 @@ class AggregateTestCase(TestCase):\n \n     def test_non_grouped_annotation_not_in_group_by(self):\n         \"\"\"\n+        \n+    def test_avg_sum_distinct_aggregation(self):\n+        # This test checks if Avg and Sum support DISTINCT as intended.\n+        test_data = [\n+            (Avg, \"rating\", 4.125),\n+            (Sum, \"rating\", 16.5),\n+            (Min, \"rating\", 3.5),  # Testing Min with distinct though it's considered pointless\n+            (Max, \"rating\", 5.0),  # Testing Max with distinct though it's considered pointless\n+        ]\n+        for aggregate, field, expected_result in test_data:\n+            with self.subTest(aggregate=aggregate.__name__):\n+                result = Book.objects.aggregate(result=aggregate(field, distinct=True))\n+                self.assertEqual(result[\"result\"], expected_result)\n         An annotation not included in values() before an aggregate should be\n         excluded from the group by clause.\n         \"\"\"\n+        \n+    def test_avg_sum_distinct_aggregation(self):\n+        # This test checks if Avg and Sum support DISTINCT as intended.\n+        test_data = [\n+            (Avg, \"rating\", 4.125),\n+            (Sum, \"rating\", 16.5),\n+            (Min, \"rating\", 3.5),  # Testing Min with distinct though it's considered pointless\n+            (Max, \"rating\", 5.0),  # Testing Max with distinct though it's considered pointless\n+        ]\n+        for aggregate, field, expected_result in test_data:\n+            with self.subTest(aggregate=aggregate.__name__):\n+                result = Book.objects.aggregate(result=aggregate(field, distinct=True))\n+                self.assertEqual(result[\"result\"], expected_result)\n         qs = (\n             Book.objects.annotate(xprice=F('price')).filter(rating=4.0).values('rating')\n                 .annotate(count=Count('publisher_id', distinct=True)).values('count', 'rating').order_by('count')\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..c17079d 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -778,7 +778,33 @@ class AutodetectorTests(TestCase):\n \n     @mock.patch('django.db.migrations.questioner.MigrationQuestioner.ask_not_null_alteration',\n                 side_effect=AssertionError(\"Should not have prompted for not null addition\"))\n-    def test_alter_field_to_not_null_with_default(self, mocked_ask_method):\n+    def test_alter_uuid_field_to_fk_dependency_other_app(self):\n+        \"\"\"\n+        Test altering a UUIDField in one app to a ForeignKey pointing to\n+        a model in another app, checking that it creates correct dependencies.\n+        \"\"\"\n+        # Initial state with a UUIDField\n+        app1_with_uuid = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name=_('identifier'))),\n+            (\"text\", models.CharField(max_length=100, verbose_name=_('text'))),\n+            (\"another_app\", models.UUIDField(null=True, blank=True, verbose_name=_('another app'))),\n+        ])\n+        app2 = ModelState(\"testapp2\", \"App2\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name=_('identifier'))),\n+            (\"text\", models.CharField(max_length=100, verbose_name=_('text'))),\n+        ])\n+\n+        # Alter the UUIDField to a ForeignKey\n+        app1_with_fk = ModelState(\"testapp1\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False, verbose_name=_('identifier'))),\n+            (\"text\", models.CharField(max_length=100, verbose_name=_('text'))),\n+            (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL, verbose_name=_('another app'))),\n+        ])\n+\n+        changes = self.get_changes([app1_with_uuid, app2], [app1_with_fk, app2])\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n         \"\"\"\n         #23609 - Tests autodetection of nullable to non-nullable alterations.\n         \"\"\"\n@@ -2399,4 +2425,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..3d2bdb1 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,18 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_renders_max_length_attribute(self):\n+        \"\"\"\n+        Test that the maxlength HTML attribute is set correctly on the username field.\n+        \"\"\"\n+        # Test when max_length is 255\n+        form = AuthenticationForm()\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n+        # Test when max_length is 254 due to IntegerUsernameUser\n+        with override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser'):\n+            form = AuthenticationForm()\n+            self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..8d0437e 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -247,7 +247,23 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n \n-    def test_serialize_lazy_objects(self):\n+    def test_serialize_enum_with_translations(self):\n+        from django.utils.translation import gettext_lazy as _\n+\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.value, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        # Ensure the migration default uses the enum's name, which means ['GOOD'] instead of the translated value \n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('Good', migrations.test_writer.TranslatedEnum['GOOD']), \"\n+            \"('Bad', migrations.test_writer.TranslatedEnum['BAD'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..8766fa8 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n from datetime import datetime\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -308,7 +310,36 @@ class ETagProcessingTests(unittest.TestCase):\n \n \n class HttpDateProcessingTests(unittest.TestCase):\n-    def test_http_date(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_extended_cases(self, mocked_datetime):\n+        # Mock the datetime to control the \"current\" year\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Setup test cases with the mocked \"current\" year as 2019, 2020, 2048\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+\n+        extended_cases = [\n+            # Test for the year translations based on the mocked year\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),  # As in issue description\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+            # Additional edge case for year wrapping\n+            (utcnow_1, 'Saturday, 31-Dec-49 08:49:37 GMT', datetime(2049, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Saturday, 31-Dec-50 08:49:37 GMT', datetime(1950, 12, 31, 8, 49, 37)),\n+        ]\n+\n+        for utcnow, rfc850str, expected_date in extended_cases:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n \n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..c23d9dc 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,48 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+    def test_field_deep_copy_error_messages(self):\n+        import copy\n+        from django.forms import CharField\n+\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_field_deep_copy_integrity(self):\n+        import copy\n+        from django.forms import CharField\n+\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'required': 'This field is required.', 'invalid': 'Invalid input.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+\n+        # Check that deepcopy creates a separate instance\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy, field)\n+\n+        # Check that error_messages is deep-copied\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+        self.assertEqual(field_copy.error_messages, field.error_messages)\n+\n+        # Test that modifications to the copy do not affect the original\n+        field_copy.error_messages['invalid'] = 'Modified error message.'\n+        self.assertNotEqual(field_copy.error_messages, field.error_messages)\n+\n+        # Also check that widget and validator are copied correctly\n+        self.assertIsNot(field_copy.widget, field.widget)\n+        self.assertEqual(field_copy.validators, field.validators)\n+        self.assertIsNot(field_copy.validators, field.validators)\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..db8bd7f 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n@@ -203,6 +205,18 @@ class BulkCreateTests(TestCase):\n \n     def test_empty_model(self):\n         NoFields.objects.bulk_create([NoFields() for i in range(2)])\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        # Test case to verify that with a large batch_size parameter\n+        # bulk_create uses the compatible max_batch_size instead.\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        # Compute the expected number of queries using the ceiling of\n+        # the number of objects divided by the maximum batch size\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n         self.assertEqual(NoFields.objects.count(), 2)\n \n     @skipUnlessDBFeature('has_bulk_insert')\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..852603a 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -39,8 +39,20 @@ class Gender(models.TextChoices):\n \n     __empty__ = '(Undeclared)'\n \n-\n-class ChoicesTests(SimpleTestCase):\n+class EnumFieldTests(TestCase):\n+    def setUp(self):\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+    \n+    def test_created_instance_value_type(self):\n+        \"\"\"Test if the value of the created object is of the expected type.\"\"\"\n+        self.assertIsInstance(self.my_object.my_str_value, str)\n+        self.assertEqual(self.my_object.my_str_value, MyChoice.FIRST_CHOICE)\n+\n+    def test_retrieved_instance_value_type(self):\n+        \"\"\"Test if the value of the retrieved object is of the expected type.\"\"\"\n+        my_object_retrieved = MyObject.objects.get(id=self.my_object.id)\n+        self.assertIsInstance(my_object_retrieved.my_str_value, str)\n+        self.assertEqual(my_object_retrieved.my_str_value, MyChoice.FIRST_CHOICE)\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..3cfb705 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,8 +148,22 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+from django.db import models\n+from django.test import TestCase\n+\n+\n class GetFieldDisplayTests(SimpleTestCase):\n \n+    def test_overriding_get_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(choices=[(1, 'foo'), (2, 'bar')], max_length=10)\n+\n+            def get_foo_bar_display(self):\n+                return \"something\"\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n     def test_choices_and_field_display(self):\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..e48ad1d 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -11,6 +11,8 @@ from django.test import (\n )\n from django.test.utils import override_settings\n from django.utils import timezone\n+from django.db import connection\n+from django.db.models import Index\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n@@ -75,8 +77,45 @@ class SchemaIndexesTests(TestCase):\n         index_sql = connection.schema_editor()._model_indexes_sql(IndexTogetherSingleList)\n         self.assertEqual(len(index_sql), 1)\n \n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n \n-@skipIf(connection.vendor == 'postgresql', 'opclasses are PostgreSQL only')\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n class SchemaIndexesNotPostgreSQLTests(TransactionTestCase):\n     available_apps = ['indexes']\n \n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..1f307a7 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -107,7 +108,25 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_list_as_lookup_value(self):\n+        query = Query(Item)\n+        # Passing a list to the query, expect the list to remain intact\n+        where = query.build_where(Q(name=['a', 'b', 'c']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        # Assert that the right-hand side is still a list\n+        self.assertEqual(name_exact.rhs, ['a', 'b', 'c'])\n+        self.assertIsInstance(name_exact.rhs, list)\n+\n+    def test_tuple_as_lookup_value(self):\n+        query = Query(Item)\n+        # Passing a tuple should remain a tuple\n+        where = query.build_where(Q(name=('x', 'y', 'z')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        # Assert that the right-hand side is still a tuple\n+        self.assertEqual(name_exact.rhs, ('x', 'y', 'z'))\n+        self.assertIsInstance(name_exact.rhs, tuple)\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "",
  "django__django-12143": "",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/forms_tests/widget_tests/test_checkboxinput.py b/tests/forms_tests/widget_tests/test_checkboxinput.py\nindex 5c5e45d..3a555f5 100644\n--- a/tests/forms_tests/widget_tests/test_checkboxinput.py\n+++ b/tests/forms_tests/widget_tests/test_checkboxinput.py\n@@ -82,10 +82,15 @@ class CheckboxInputTest(WidgetTest):\n         \"\"\"\n         self.assertFalse(self.widget.value_from_datadict({}, {}, 'testing'))\n \n+    def test_split_array_field_boolean(self):\n+        boolean_widget = forms.CheckboxInput()\n+        self.assertFalse(boolean_widget.get_context('name', False, {})['widget']['attrs'].get('checked', False))\n+        self.assertTrue(boolean_widget.get_context('name', True, {})['widget']['attrs'].get('checked', True))\n+\n     def test_value_from_datadict_string_int(self):\n         value = self.widget.value_from_datadict({'testing': '0'}, {}, 'testing')\n         self.assertIs(value, True)\n \n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({'field': 'value'}, {}, 'field'), False)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n+        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..33e2e11 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -252,8 +252,11 @@ class SmallPKData(models.Model):\n # class TimePKData(models.Model):\n #    data = models.TimeField(primary_key=True)\n \n+import uuid\n+from django.db import models\n \n-class UUIDData(models.Model):\n+class UUIDDefaultData(models.Model):\n+    data = models.UUIDField(primary_key=True, default=uuid.uuid4)\n     data = models.UUIDField(primary_key=True)\n \n \n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..438b646 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -86,8 +86,13 @@ class SimpleTagTests(TagTestCase):\n         for entry in templates:\n             t = self.engine.from_string(\"%s as var %%}Result: {{ var }}\" % entry[0][0:-2])\n             self.assertEqual(t.render(c), \"Result: %s\" % entry[1])\n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1])\n \n-    def test_simple_tag_errors(self):\n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(\"%s as var %%}\" % entry[1][0:-2])\n         errors = [\n             (\"'simple_one_default' received unexpected keyword argument 'three'\",\n                 '{% load custom %}{% simple_one_default 99 two=\"hello\" three=\"foo\" %}'),\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..ea5bee5 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2427,7 +2428,7 @@ Password: <input type=\"password\" name=\"password\" required>\n         f = FileForm(auto_id=False)\n         self.assertHTMLEqual(\n             f.as_table(),\n-            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required /></td></tr>',\n         )\n \n         f = FileForm(data={}, files={}, auto_id=False)\n@@ -2485,8 +2486,23 @@ Password: <input type=\"password\" name=\"password\" required>\n         f = FileForm({})\n         self.assertEqual(f.errors, {})\n         self.assertEqual(f.cleaned_data['file1'], 'resume.txt')\n+    def test_filefield_unset_required_attribute_case(self):\n+        class FileForm(Form):\n+            file1 = FileField(widget=FileInput)\n \n-    def test_basic_processing_in_view(self):\n+        # Test with initial files provided\n+        f = FileForm(initial={'file1': 'test.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+        # Test without initial files\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n         class UserRegistration(Form):\n             username = CharField(max_length=10)\n             password1 = CharField(widget=PasswordInput)\n",
  "django__django-12304": "diff --git a/tests/template_tests/test_callables.py b/tests/template_tests/test_callables.py\nindex d71266b..8fe3a63 100644\n--- a/tests/template_tests/test_callables.py\n+++ b/tests/template_tests/test_callables.py\n@@ -1,6 +1,8 @@\n+\n from unittest import TestCase\n \n-from django.template import Context, Engine\n+from django.template import Context, Engine, Template\n+from tests.model_enums.tests import Suit\n \n \n class CallableVariablesTests(TestCase):\n@@ -38,6 +40,12 @@ class CallableVariablesTests(TestCase):\n         t = self.engine.from_string('{{ my_doodad.the_value }}')\n         self.assertEqual(t.render(c), '42')\n         self.assertEqual(my_doodad.num_calls, 2)\n+    def test_enum_choices(self):\n+        # Test the correct rendering of integer based enumeration choices in a template.\n+        template = Template('{{ Suit.DIAMOND.label }}|{{ Suit.DIAMOND.value }}')\n+        context = Context({'Suit': Suit})\n+        output = template.render(context)\n+        self.assertEqual(output, 'Diamond|1')\n \n     def test_alters_data(self):\n \n@@ -122,4 +130,4 @@ class CallableVariablesTests(TestCase):\n \n         # Double-check that the object was really never called during the\n         # template rendering.\n-        self.assertEqual(my_doodad.num_calls, 0)\n+        self.assertEqual(my_doodad.num_calls, 0)\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..e0faa51 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -176,7 +176,21 @@ class UtilsTests(SimpleTestCase):\n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n \n-    def test_number_formats_display_for_field(self):\n+    def test_jsonfield_display_for_field(self):\n+        tests = [\n+            ({'foo': 'bar'}, '{\"foo\": \"bar\"}'),\n+            ([1, 2, 3], '[1, 2, 3]'),\n+            ('simple string', '\"simple string\"'),\n+            ({'outer': {'inner': 'value'}}, '{\"outer\": {\"inner\": \"value\"}}'),\n+            # Testing handling of invalid JSON formatting which should not occur\n+            # but we want to ensure graceful handling rather than a crash.\n+            ({('tuple',): 'not valid'}, \"{('tuple',): 'not valid'}\"),  # Invalid JSON.\n+        ]\n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                field = models.JSONField()\n+                display_value = display_for_field(value, field, self.empty_value)\n+                self.assertEqual(display_value, expected_display)\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n \n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..656bfc3 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1005,8 +1005,23 @@ class OtherModelTests(SimpleTestCase):\n             from_country = models.ForeignKey(Country, models.CASCADE)\n \n         self.assertEqual(ShippingMethod.check(), [])\n+    def test_mti_with_multiple_onetoone_fields_order_sensitive(self):\n+        class Document(models.Model):\n+            pass\n+\n+        # Case where fields are ordered such that it was originally producing the error\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        self.assertEqual(Picking.check(), [])  # should pass without raising ImproperlyConfigured\n+\n+        # Reversing field definitions should also work without issue\n+        class PickingReversed(Document):\n+            origin = models.OneToOneField(Document, related_name='picking_reversed', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n \n-    def test_missing_parent_link(self):\n+        self.assertEqual(PickingReversed.check(), [])  # should pass without raising ImproperlyConfigured\n         msg = 'Add parent_link=True to invalid_models_tests.ParkingLot.parent.'\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             class Place(models.Model):\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..468ab0b 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -231,7 +231,13 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n \n-    def test_referrer_policy_on(self):\n+    @override_settings()\n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        Test that the default SECURE_REFERRER_POLICY is 'same-origin'.\n+        \"\"\"\n+        with self.settings():\n+            self.assertEqual(self.process_response().get('Referrer-Policy'), 'same-origin')\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to a valid value, the middleware adds a\n         \"Referrer-Policy\" header to the response.\n@@ -254,4 +260,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..2019a9f 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -22,9 +22,11 @@ from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n+from django.contrib.auth.models import User\n+from django.utils.functional import SimpleLazyObject\n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n-    Result, SimulationRun, Time,\n+    Manager, Result, SimulationRun, Time,\n )\n \n \n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..4d988fe 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n@@ -138,7 +138,18 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         self.assertEqual(f2.widget.attrs['maxlength'], '20')\n         self.assertEqual(f2.widget.attrs['size'], '10')\n \n-    def test_formfield_overrides_for_datetime_field(self):\n+    def test_formfield_overrides_m2m_widget(self):\n+        \"\"\"\n+        The widget parameter should be allowed to override\n+        ManyToManyFields by specifying a widget in formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_manytomany(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n         \"\"\"\n         Overriding the widget for DateTimeField doesn't overrides the default\n         form_class for that field (#26449).\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..dee6f0d 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,8 +2444,33 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n-\n-    def test_mti_inheritance_model_removal(self):\n+    def test_migrate_field_to_new_model_subclass(self):\n+        \"\"\"\n+        Test migrating a field from a base model to a new subclass model.\n+        \"\"\"\n+        # Before migration: 'title' is a field in the 'Readable' model.\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        \n+        # After migration: 'title' is moved to 'Book', a subclass of 'Readable'.\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        \n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n         Animal = ModelState('app', 'Animal', [\n             (\"id\", models.AutoField(primary_key=True)),\n         ])\n@@ -2453,4 +2478,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..6e1e300 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -8,7 +8,8 @@ from django.db import connection\n from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n-from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db import models\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -189,7 +190,43 @@ class LookupTests(TestCase):\n             }\n         )\n \n-    def test_in_bulk_non_unique_field(self):\n+    def test_in_bulk_meta_constraint(self):\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constaint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+\n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n         msg = \"in_bulk()'s field_name must be a unique field but 'author' isn't.\"\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..d3945be 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -883,6 +883,22 @@ class OtherModelTests(SimpleTestCase):\n             )\n         ])\n \n+    def test_ordering_with_nested_isnull_lookup(self):\n+        class Supply(models.Model):\n+            pass\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        # This would previously fail, ensuring the fix is verified:\n+        self.assertEqual(Stock.check(), [])\n+\n     def test_ordering_allows_registered_lookups(self):\n         class Model(models.Model):\n             test = models.CharField(max_length=100)\n",
  "django__django-13012": "",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..e50650a 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1211,8 +1211,34 @@ class Queries1Tests(TestCase):\n         )\n \n \n+from django.test import TestCase\n+from .models import ExtraInfo, Author, Report  # Add any other necessary imports here\n+\n class Queries2Tests(TestCase):\n     @classmethod\n+    def setUpTestData(cls):\n+        cls.n2 = Note.objects.create(note='n2', misc='bar', id=2)\n+        cls.e2 = ExtraInfo.objects.create(info='e2', note=cls.n2, value=41, filterable=False)\n+        cls.a3 = Author.objects.create(name='a3', num=3003, extra=cls.e2)\n+        cls.r2 = Report.objects.create(name='r2', creator=cls.a3)\n+\n+    def test_field_with_filterable(self):\n+        # This test will check if the filter behaves correctly with the filterable field\n+        filtered_authors = Author.objects.filter(extra=self.e2)\n+        self.assertSequenceEqual(\n+            list(filtered_authors),\n+            [self.a3],\n+            \"Filtering authors with a non-filterable ExtraInfo instance should not raise NotSupportedError.\"\n+        )\n+\n+    def test_filterable_error_scenario(self):\n+        # Attempt to filter with filterable=False to ensure no error is raised\n+        try:\n+            results = ProductMetaData.objects.filter(metadata_type=cls.e2, value='Dark Vador')\n+            print(\"Filter operation is successful. Returned:\", results)\n+        except NotSupportedError as e:\n+            self.fail(f\"A NotSupportedError was raised unexpectedly: {str(e)}\")\n+    @classmethod\n     def setUpTestData(cls):\n         Number.objects.create(num=4)\n         Number.objects.create(num=8)\n",
  "django__django-13033": "diff --git a/tests/ordering/models.py b/tests/ordering/models.py\nindex ec1f9e4..d202e88 100644\n--- a/tests/ordering/models.py\n+++ b/tests/ordering/models.py\n@@ -22,6 +22,17 @@ class Author(models.Model):\n     class Meta:\n         ordering = ('-pk',)\n \n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"self\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n \n class Article(models.Model):\n     author = models.ForeignKey(Author, models.SET_NULL, null=True)\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..a5e8e25 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -615,6 +615,30 @@ class BaseCacheTests:\n                 count += 1\n         self.assertEqual(count, final_count)\n \n+    def test_cull_when_no_data(self):\n+        \"\"\"\n+        Test _cull method when the cache is empty.\n+        Ensures that the _cull method does not throw an exception when\n+        there is no data to cull.\n+        \"\"\"\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+\n+        # Simulate a situation where the cache is empty\n+        cull_cache.clear()\n+        # Adjust _max_entries to trigger culling immediately\n+        old_max_entries = cull_cache._max_entries\n+        cull_cache._max_entries = -1\n+        try:\n+            # Set a dummy value to trigger the culling process\n+            # It should not throw an error even though the table is empty\n+            cull_cache.set('initial_value', 'value', 1000)\n+            self.assertIs(cull_cache.has_key('initial_value'), True)\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n+\n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n \n",
  "django__django-13109": "diff --git a/tests/model_forms/models.py b/tests/model_forms/models.py\nindex ff8ad74..d0ed08b 100644\n--- a/tests/model_forms/models.py\n+++ b/tests/model_forms/models.py\n@@ -38,6 +38,15 @@ class Writer(models.Model):\n         return self.name\n \n \n+class WriterManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().filter(archived=False)\n+\n+class Writer(models.Model):\n+    name = models.CharField(max_length=50, help_text='Use both first and last names.')\n+    archived = models.BooleanField(default=False)\n+    objects = WriterManager()\n+\n class Article(models.Model):\n     ARTICLE_STATUS = (\n         (1, 'Draft'),\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..11cb3ef 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,6 +867,38 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n+    from django.apps import Apps\n+    from django.db import models\n+    from django.db.migrations.state import ProjectState, ModelState\n+\n+    def test_reference_mixed_case_app_label_resolved(self):\n+        new_apps = Apps()\n+\n+        class Author(models.Model):\n+            class Meta:\n+                app_label = 'MiXeDCasE_App'\n+                apps = new_apps\n+\n+        class Book(models.Model):\n+            author = models.ForeignKey(Author, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXeDCasE_App'\n+                apps = new_apps\n+\n+        class Magazine(models.Model):\n+            authors = models.ManyToManyField(Author)\n+\n+            class Meta:\n+                app_label = 'MiXeDCasE_App'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Author))\n+        project_state.add_model(ModelState.from_model(Book))\n+        project_state.add_model(ModelState.from_model(Magazine))\n+        self.assertEqual(len(project_state.apps.get_models()), 3)\n+        \n     def test_real_apps(self):\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..8bd9df8 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1627,7 +1627,15 @@ class FTimeDeltaTests(TestCase):\n         for e in qs:\n             self.assertEqual(e.delta, delta)\n \n-    def test_duration_with_datetime(self):\n+    @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Assuming the models and data setup are available.\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.end - experiment.start\n+            self.assertEqual(experiment.delta, expected_delta)\n         # Exclude e1 which has very high precision so we can test this on all\n         # backends regardless of whether or not it supports\n         # microsecond_precision.\n",
  "django__django-13158": "",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..57303e6 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -34,6 +34,7 @@ from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -323,7 +324,12 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n-    def test_decode_failure_logged_to_security(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        with override_settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'a test key': 'a test value'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n             self.assertEqual({}, self.session.decode(bad_encode))\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..a49e877 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -590,7 +590,25 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering(self):\n+        class ArtistView(TemplateView):\n+            template_name = 'generic_views/about.html'\n+\n+            def get_context_data(self, *, artist_name, **kwargs):\n+                context = super().get_context_data(**kwargs)\n+                # Convert SimpleLazyObject to a string if necessary\n+                artist_name = str(artist_name)\n+                artist = Artist.objects.get(name=artist_name)\n+                return {**context, 'artist': artist}\n+\n+        artist = Artist.objects.create(name='Rene Magritte')\n+        # Simulate a SimpleLazyObject being passed in kwargs\n+        from django.utils.functional import SimpleLazyObject\n+        lazy_artist_name = SimpleLazyObject(lambda: artist.name)\n+        response = ArtistView.as_view()(self.rf.get('/'), artist_name=lazy_artist_name)\n+        self.assertEqual(response.context_data['artist'], artist)\n+        self.assertEqual(response.context_data['artist'].name, 'Rene Magritte')\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..db80963 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,7 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2819,7 +2820,66 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n-    def test_callable_called_each_time_form_is_instantiated(self):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        marley = Character.objects.create(username='marley', last_action='2023-01-01')\n+        threepwood = Character.objects.create(username='threepwood', last_action='2023-01-01')\n+        \n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+        \n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+        \n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True, \n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n             StumpJokeForm()\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..c0e058b 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -68,6 +68,26 @@ class GetStorageClassTests(SimpleTestCase):\n \n class FileSystemStorageTests(unittest.TestCase):\n \n+    def test_filefield_callable_storage_deconstruction(self):\n+        \"\"\"\n+        Ensure that a FileField with a callable storage returns the callable\n+        during deconstruction rather than the evaluated storage.\n+        \"\"\"\n+        obj = Storage()\n+        field = obj._meta.get_field('storage_callable')\n+        name, path, args, kwargs = field.deconstruct()\n+        self.assertEqual(kwargs['storage'], callable_storage)\n+\n+    def test_callable_storage_equality_after_deconstruction(self):\n+        \"\"\"\n+        Confirm that the callable storage remains the same after deconstruction and reconstruction.\n+        \"\"\"\n+        obj = Storage()\n+        field = obj._meta.get_field('storage_callable')\n+        name, path, args, kwargs = field.deconstruct()\n+        reconstructed_field = FileField(*args, **kwargs)\n+        self.assertEqual(reconstructed_field.storage, callable_storage)\n+\n     def test_deconstruction(self):\n         path, args, kwargs = temp_storage.deconstruct()\n         self.assertEqual(path, \"django.core.files.storage.FileSystemStorage\")\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..aaf93d5 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -632,7 +632,36 @@ class TestQuerying(TestCase):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)\n \n-    def test_key_icontains(self):\n+    def test_key_in_lookup_with_single_value(self):\n+        # Test cases for verifying the `__in` lookup on a JSONField key transforms\n+        tests = [\n+            ('value__somekey__in', [0], [self.objs[0]]),  # Assuming objs[0] has 'somekey': 0\n+            ('value__somekey__in', [1], [self.objs[1]]),  # Assuming objs[1] has 'somekey': 1\n+            ('value__otherkey__in', ['test'], [self.objs[2]]), # Assuming objs[2] has 'otherkey': 'test'\n+            ('value__otherkey__in', ['nonexistent'], []),  # No object should match\n+        ]\n+        \n+        for lookup, values, expected in tests:\n+            with self.subTest(lookup=lookup, values=values):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: values}),\n+                    expected\n+                )\n+\n+    def test_key_in_lookup_with_multiple_values(self):\n+        # Test cases for verifying the `__in` lookup with multiple values\n+        tests = [\n+            ('value__somekey__in', [0, 1], [self.objs[0], self.objs[1]]),  # Assuming objs[0] has 'somekey': 0 and objs[1] has 'somekey': 1\n+            ('value__otherkey__in', ['test', 'example'], [self.objs[2], self.objs[3]]), # Assuming objs[2] has 'otherkey': 'test' and objs[3]: 'example'\n+            ('value__otherkey__in', ['nonexistent', 'other'], [self.objs[4]]),  # Assuming objs[4] has 'otherkey': 'other', none with 'nonexistent'\n+        ]\n+        \n+        for lookup, values, expected in tests:\n+            with self.subTest(lookup=lookup, values=values):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: values}),\n+                    expected\n+                )\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n     def test_key_startswith(self):\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..e01b3f1 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -20,6 +20,10 @@ from django.test import (\n from django.utils import timezone\n \n from ..models import Author, DTModel, Fan\n+import pytz\n+from datetime import datetime\n+from django.db.models import Count\n+from django.utils import timezone\n \n \n def truncate_to(value, kind, tzinfo=None):\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..fbc6885 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -93,7 +93,62 @@ class BasicFieldTests(SimpleTestCase):\n     def test_field_instance_is_picklable(self):\n         \"\"\"Field instances can be pickled.\"\"\"\n         field = models.Field(max_length=100, default='a string')\n-        # Must be picklable with this cached property populated (#28188).\n+import pickle\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+class AbstractFieldEqualityTests(SimpleTestCase):\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        \n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+        \n+    def test_set_behavior_with_inherited_fields(self):\n+        \"\"\"Test set behavior with fields from inheriting abstract models.\"\"\"\n+        \n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        field_set = {\n+            InheritAbstractModel1._meta.get_field('field'), \n+            InheritAbstractModel2._meta.get_field('field')\n+        }\n+        self.assertEqual(len(field_set), 2)\n         field._get_default\n         pickle.dumps(field)\n \n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..c524542 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,42 @@\n+\n+class LockTestCase(unittest.TestCase):\n+    \"\"\"\n+    Test cases for file locking functionality.\n+    \"\"\"\n+\n+    def test_exclusive_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as temp:\n+            temp.write(\"Temporary content\")\n+\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as temp:\n+            temp.write(\"Temporary content\")\n+\n+        with open(file_path) as f1, open(file_path) as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def test_unlock_without_lock(self):\n+        \"\"\"\n+        Test that unlocking a file that wasn't locked returns True.\n+        \"\"\"\n+        file_path = Path(__file__).parent / 'test.png'\n+        with open(file_path, 'w') as temp:\n+            temp.write(\"Temporary content\")\n+\n+        with open(file_path) as f:\n+            self.assertIs(locks.unlock(f), True)\n+\n import errno\n import gzip\n import os\n@@ -8,7 +47,7 @@ from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n",
  "django__django-13417": "",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..f1a1aee 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -342,7 +342,20 @@ class CommandTests(SimpleTestCase):\n         self.assertEqual(parser.epilog, epilog)\n \n \n-class CommandRunTests(AdminScriptTestCase):\n+class CommandOutputFlushTests(SimpleTestCase):\n+    def test_outputwrapper_flush_stdout(self):\n+        out = io.StringIO()\n+        with mock.patch.object(out, 'flush') as mocked_flush:\n+            call_command('outputwrapper', stdout=out)\n+            self.assertIn('Working...', out.getvalue())\n+            self.assertIs(mocked_flush.called, True)\n+\n+    def test_outputwrapper_flush_stderr(self):\n+        err = io.StringIO()\n+        with mock.patch.object(err, 'flush') as mocked_flush:\n+            call_command('outputwrapper', stderr=err)\n+            self.assertIn('Working...', err.getvalue())\n+            self.assertIs(mocked_flush.called, True)\n     \"\"\"\n     Tests that need to run by simulating the command line, not by call_command.\n     \"\"\"\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..3cec6dd 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,10 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n-from django.test.utils import ignore_warnings\n+from .models.with_custom_email_field import CustomEmailField\n from django.utils.deprecation import RemovedInDjango40Warning\n \n \n@@ -36,8 +37,26 @@ class TokenGeneratorTest(TestCase):\n         tk1 = p0.make_token(user)\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n-\n-    def test_timeout(self):\n+                \n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    username='changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..81a0e32 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,6 +1,8 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n+from django.db.models import Q, UniqueConstraint\n from django.contrib.auth.models import AbstractBaseUser\n from django.core import checks\n from django.db import models\n@@ -138,7 +140,46 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    @override_settings(AUTH_USER_MODEL='auth_tests.UniqueConstraintUser')\n+    def test_username_field_with_unique_constraint(self):\n+        \"\"\"\n+        Test that auth.E003 is not raised when USERNAME_FIELD has a total UniqueConstraint.\n+        \"\"\"\n+        class UniqueConstraintUser(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='username_unique_constraint'),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.PartialUniqueConstraintUser')\n+    def test_username_field_with_partial_unique_constraint(self):\n+        \"\"\"\n+        Test that appropriate warning is raised when USERNAME_FIELD has a partial UniqueConstraint only.\n+        \"\"\"\n+        class PartialUniqueConstraintUser(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='partial_username_unique', condition=Q(password__isnull=False)),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Warning(\n+                \"'PartialUniqueConstraintUser.username' is named as the 'USERNAME_FIELD', but it is not unique.\",\n+                hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n+                obj=PartialUniqueConstraintUser,\n+                id='auth.W004',\n+            ),\n+        ])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..401619e 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1314,4 +1314,41 @@ class AggregateTestCase(TestCase):\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+\n+    def test_random_ordering_with_aggregation(self):\n+        \"\"\"Test that Random() in order_by doesn't break aggregation.\"\"\"\n+        things = Thing.objects.annotate(rc=Count('related')).order_by('?')\n+        self.assertEqual(len(things), 1)\n+        self.assertEqual(things[0].rc, 2)\n+\n+    def test_random_ordering_with_empty_aggregation(self):\n+        \"\"\"Test that Random() works correctly when there're no related objects.\"\"\"\n+        t = Thing.objects.create()\n+        things = Thing.objects.annotate(rc=Count('related')).order_by('?')\n+        self.assertQuerysetEqual(\n+            things,\n+            [\n+                (t.id, 0),\n+            ],\n+            lambda a: (a.id, a.rc),\n+            ordered=False\n+        )\n+\n+    def test_random_ordering_with_multiple_things(self):\n+        \"\"\"Test Random() does not interfere with aggregation across multiple objects.\"\"\"\n+        t1 = Thing.objects.create()\n+        t2 = Thing.objects.create()\n+        Related.objects.create(thing=t1)\n+        Related.objects.create(thing=t1)\n+        Related.objects.create(thing=t2)\n+        things = Thing.objects.annotate(rc=Count('related')).order_by('?')\n+        self.assertQuerysetEqual(\n+            things,\n+            [\n+                (t1.id, 2),\n+                (t2.id, 1),\n+            ],\n+            lambda a: (a.id, a.rc),\n+            ordered=False\n+        )\n",
  "django__django-13590": "",
  "django__django-13658": "",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..56f4fcd 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -56,8 +57,20 @@ class DateFormatTests(SimpleTestCase):\n         self.assertEqual(datetime.fromtimestamp(int(format(dt, 'U'))), dt.astimezone(ltz).replace(tzinfo=None))\n         self.assertEqual(datetime.fromtimestamp(int(format(dt, 'U')), tz).utctimetuple(), dt.utctimetuple())\n         self.assertEqual(datetime.fromtimestamp(int(format(dt, 'U')), ltz).utctimetuple(), dt.utctimetuple())\n-\n-    def test_epoch(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (999, '99'),\n+            (1000, '00'),\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         udt = datetime(1970, 1, 1, tzinfo=utc)\n         self.assertEqual(format(udt, 'U'), '0')\n \n@@ -164,4 +177,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "",
  "django__django-13786": "",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..aeca990 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,9 +1,12 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n from ..utils import setup\n+from django.utils.functional import lazy\n+from django.utils.translation import gettext_lazy\n \n \n class AddTests(SimpleTestCase):\n@@ -46,6 +49,27 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+    \n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n \n class FunctionTests(SimpleTestCase):\n \n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..5252350 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -18,10 +18,11 @@ from django.test import (\n     skipUnlessDBFeature,\n )\n \n+from django.db import connection, IntegrityError, transaction\n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n-    VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n+    VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ, SQLKeywordsModel\n )\n \n \n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..a2ea901 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1303,8 +1303,44 @@ class ManageRunserver(SimpleTestCase):\n         tested_connections = ConnectionHandler({})\n         with mock.patch('django.core.management.base.connections', new=tested_connections):\n             self.cmd.check_migrations()\n+from django.core.management import call_command\n+from django.core.management.base import BaseCommand\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from unittest import mock\n+from io import StringIO\n+\n+class ManageRunserverSkipChecks(TestCase):\n+\n+    def setUp(self):\n+        self.output = StringIO()\n \n-    def test_readonly_database(self):\n+    @mock.patch('django.core.management.commands.runserver.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check_migrations')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_skip_checks_enabled(self, mocked_check, *mocked_objects):\n+        # Test running runserver with --skip-checks=True\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertNotIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_not_called()\n+\n+    @mock.patch('django.core.management.commands.runserver.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check_migrations')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_skip_checks_disabled(self, mocked_check, *mocked_objects):\n+        # Test running runserver with --skip-checks=False\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=False,\n+            stdout=self.output,\n+        )\n+        self.assertIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_called()\n         \"\"\"\n         runserver.check_migrations() doesn't choke when a database is read-only.\n         \"\"\"\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..f9351b6 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -181,6 +182,51 @@ class MiddlewareNotUsedTests(SimpleTestCase):\n             with self.assertLogs('django.request', 'DEBUG'):\n                 self.client.get('/middleware_exceptions/view/')\n \n+    @override_settings(\n+        MIDDLEWARE=[\n+            'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+            'middleware_exceptions.tests.MyMiddleware',\n+        ]\n+    )\n+    async def test_async_and_sync_middleware_chain_async_call_public(self):\n+        \"\"\"\n+        Test combining async and sync middleware in an ASGI app.\n+        \n+        This test is added to ensure that when an async and sync middleware\n+        chain is used, the handler does not leave undesired side effects.\n+        \"\"\"\n+        with self.assertLogs('django.request', 'DEBUG') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.content, b'OK')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(\n+            cm.records[0].getMessage(),\n+            'Asynchronous middleware middleware_exceptions.tests.MyMiddleware '\n+            'adapted.',\n+        )\n+        self.assertEqual(\n+            cm.records[1].getMessage(),\n+            \"MiddlewareNotUsed: 'middleware_exceptions.tests.MyMiddleware'\",\n+        )\n+\n+    @override_settings(\n+        MIDDLEWARE=[\n+            'middleware_exceptions.middleware.DummyMiddleware',\n+        ]\n+    )\n+    def test_dummy_middleware_sync(self):\n+        \"\"\"\n+        Test DummyMiddleware's behavior in synchronous requests.\n+        \n+        This test checks that DummyMiddleware doesn't incorrectly process \n+        synchronous requests as async.\n+        \"\"\"\n+        response = self.client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 500)\n+        self.assertIn(\n+            'ImproperlyConfigured', str(response.content)\n+        )\n+\n \n @override_settings(\n     DEBUG=True,\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..17d346e 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -7,6 +8,7 @@ from django.db.migrations.exceptions import (\n )\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n+from importlib import import_module\n from django.test import TestCase, modify_settings, override_settings\n \n from .test_base import MigrationTestBase\n@@ -512,6 +514,37 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_without_file'},\n+    )\n+    def test_loading_package_without_file_attribute(self):\n+        \"\"\"\n+        To support frozen environments, MigrationLoader should load migrations\n+        from regular packages without the __file__ attribute.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations_without_file')\n+        loader = MigrationLoader(connection)\n+        \n+        module_file = getattr(test_module, '__file__', None)\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+        try:\n+            del test_module.__file__\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            \n+            loader.load_disk()\n+            migrations = [\n+                name for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            if module_file is not None:\n+                test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..2815a01 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -10,7 +10,8 @@ from unittest import mock\n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n-from django.db.utils import ConnectionHandler\n+from unittest import mock\n+from django.db.utils import ConnectionHandler, ImproperlyConfigured\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n )\n@@ -29,7 +30,12 @@ except ImproperlyConfigured:\n class Tests(TestCase):\n     longMessage = True\n \n-    def test_check_sqlite_version(self):\n+    def test_check_sqlite_version_older_than_3_9(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n         msg = 'SQLite 3.8.3 or later is required (found 3.8.2).'\n         with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 2)), \\\n                 mock.patch.object(dbapi2, 'sqlite_version', '3.8.2'), \\\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..da345c6 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -172,6 +172,13 @@ class TestChildArguments(SimpleTestCase):\n             autoreload.get_child_arguments(),\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        # Mock \"__main__\" to emulate the behavior of `python -m utils_tests.test_module runserver`\n+        with mock.patch.dict(sys.modules, {'__main__': test_main}):\n+            with mock.patch('sys.argv', [test_main.__file__, 'runserver']):\n+                expected_arguments = [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+                self.assertEqual(autoreload.get_child_arguments(), expected_arguments)\n \n     @mock.patch('sys.warnoptions', [])\n     def test_exe_fallback(self):\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..bf347c9 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -282,8 +282,19 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n         )\n \n \n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n+\n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n     def test_modelchoicefield(self):\n+        # Create an invalid choice to test if it appears in the error message\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.'\n+            },\n+        )\n+        self.assertFormErrors(['\"invalid\" is not one of the available choices.'], f.clean, 'invalid')\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n         ChoiceModel.objects.create(pk=2, name='b')\n@@ -307,4 +318,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..8dd97b1 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -61,37 +61,69 @@ class Second(models.Model):\n class Third(models.Model):\n     name = models.CharField(max_length=20)\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n \n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n \n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n \n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n \n class Child(models.Model):\n     name = models.CharField(max_length=20)\n     parent = models.ForeignKey(Parent, models.CASCADE)\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n \n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n \n class ChildNullableParent(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, null=True)\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n \n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n \n class ToFieldChild(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, to_field='name', related_name='to_field_children')\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n \n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n \n # Multiple paths to the same model (#7110, #7125)\n class Category(models.Model):\n     name = models.CharField(max_length=20)\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n \n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n     def __str__(self):\n         return self.name\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n \n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n \n class Record(models.Model):\n     category = models.ForeignKey(Category, models.CASCADE)\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n \n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n \n class Relation(models.Model):\n     left = models.ForeignKey(Record, models.CASCADE, related_name='left_set')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..3625c08 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from .fields import MyWrapper, MyAutoField\n+from .models import CustomAutoFieldModel\n+from django.test import TestCase, skipUnlessDBFeature\n \n from .models import Bar, Business, Employee, Foo\n \n",
  "django__django-14017": "",
  "django__django-14053": "",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..f12c419 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,10 +1,11 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n \n import copy\n import pickle\n-\n+import collections.abc\n from django.test import SimpleTestCase\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n@@ -18,6 +19,26 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        s = reversed(OrderedSet())\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n+    def test_reversed_multiple_elements(self):\n+        s = reversed(OrderedSet([10, 20, 30, 40, 50]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [50, 40, 30, 20, 10])\n+\n     def test_remove(self):\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n",
  "django__django-14122": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex b2ec8af..bf34b34 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -13,6 +14,7 @@ from django.test import TestCase\n from django.test.testcases import skipUnlessDBFeature\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n+from django.db.models import Subquery, OuterRef, DateTimeField\n \n from .models import Author, Book, Publisher, Store\n \n@@ -418,6 +420,27 @@ class AggregateTestCase(TestCase):\n                 books = Book.objects.aggregate(ratings=aggregate('rating', distinct=True))\n                 self.assertEqual(books['ratings'], expected_result)\n \n+    def test_meta_ordering_not_in_group_by(self):\n+        \"\"\"\n+        Meta.ordering fields must not be included in GROUP BY clause.\n+        Verifies that the aggregation is not affected by the ordering fields.\n+        \"\"\"\n+        # Annotate books by counting how many times each publisher has published with distinct names.\n+        books_qs = Book.objects.annotate(\n+            num_times_published=Count('publisher__name', distinct=True),\n+        ).order_by('publisher__name')  # This should not interfere with the GROUP BY\n+\n+        # Check that the number of times each publisher's name appears is correct.\n+        expected_results = {\n+            'Apress': 2,  # Books from Apress\n+            'Sams': 1,  # Books from Sams\n+            'Prentice Hall': 2,  # Books from Prentice Hall\n+            'Morgan Kaufmann': 1,  # Books from Morgan Kaufmann\n+        }\n+\n+        for book in books_qs:\n+            self.assertEqual(book.num_times_published, expected_results[book.publisher.name])\n+\n     def test_non_grouped_annotation_not_in_group_by(self):\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n@@ -1339,4 +1362,4 @@ class AggregateTestCase(TestCase):\n             ('Wesley J. Chun', 1),\n             ('Stuart Russell', 1),\n             ('Peter Norvig', 2),\n-        ], lambda a: (a.name, a.contact_count), ordered=False)\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n",
  "django__django-14140": "",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..a22c344 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -74,7 +75,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n     def test_app_default_auto_field(self):\n         class Model(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..9a0b50f 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -191,7 +191,18 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('sys.warnoptions', [])\n-    def test_exe_fallback(self):\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_dotted_module(self):\n+        \"\"\"\n+        Test the autoreload behavior when running a non-django module via `-m` with a dotted module path.\n+        Specifically, this tests the behavior described in the issue when using `-m foo.bar.baz`.\n+        \"\"\"\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n             exe_path.touch()\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..c80a041 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -228,6 +228,16 @@ TEST_DATA = [\n     (URLValidator(), 'no_scheme', ValidationError),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n+    # New test cases for LF, CR, and TAB within the URL\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.djangoproject.com\\t', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\t', ValidationError),\n+    # LF, CR, and TAB within the middle of the URL should also be invalid\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::ffff:\\t192.9.5.5]', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n     # Trailing junk does not take forever to reject\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..59e66f7 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,7 +1526,28 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+from django.db.models import Count, Q\n+from django.test import TestCase\n+from .models import Author, Book, PropertyGroup\n+\n class JoinPromotionTests(TestCase):\n+    def test_q_object_or_with_id_in(self):\n+        property_groups = PropertyGroup.objects.filter(name__startswith=\"A\")\n+        queryset = Book.objects.annotate(Count(\"authors\"))\n+        result = queryset.filter(\n+            Q(authors__id__in=property_groups.values_list(\"id\", flat=True))\n+            | Q(authors__count=0)\n+        ).distinct()\n+        self.assertTrue(result.exists()) # Ensure the query returns without error.\n+\n+    def test_q_object_or_with_in(self):\n+        property_groups = PropertyGroup.objects.filter(name__startswith=\"A\")\n+        queryset = Book.objects.annotate(Count(\"authors\"))\n+        result = queryset.filter(\n+            Q(authors__in=property_groups)\n+            | Q(authors__count=0)\n+        ).distinct()\n+        self.assertTrue(result.exists()) # Ensure the query returns without error.\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n",
  "django__django-14373": "",
  "django__django-14376": "",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..241efe5 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2199,6 +2199,23 @@ class SchemaTests(TransactionTestCase):\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n \n     @skipUnlessDBFeature('supports_expression_indexes')\n+    def test_references_column_with_table_arg(self):\n+        \"\"\"\n+        Test that passing a table as an argument to references_column logs an issue.\n+        As a table instance provided instead of a string is incorrect,\n+        this should fail to satisfy the references_column condition.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        # Intentionally incorrect: passing a table instance instead of a string.\n+        constraint = UniqueConstraint(fields=[Author], name='author_table_uq')\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        # Test that a table instance does not reference a particular column\n+        self.assertIs(sql.references_column(table, Author), False)\n+\n     def test_func_unique_constraint(self):\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-14493": "",
  "django__django-14500": "",
  "django__django-14539": "",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..f1c7bc3 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -125,7 +125,39 @@ class BulkUpdateTests(TestCase):\n \n     def test_empty_objects(self):\n         with self.assertNumQueries(0):\n-            Note.objects.bulk_update([], ['note'])\n+            rows_updated = Note.objects.bulk_update([], ['note'])\n+            self.assertEqual(rows_updated, 0)\n+\n+    def test_bulk_update_rows_matched(self):\n+        # Create initial notes and update them.\n+        Note.objects.bulk_create([\n+            Note(note='note1', misc='misc1'),\n+            Note(note='note2', misc='misc2'),\n+            Note(note='note3', misc='misc3'),\n+        ])\n+        notes = list(Note.objects.all())\n+        for note in notes:\n+            note.note = 'updated-' + note.note\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 3)\n+\n+    def test_bulk_update_duplicates(self):\n+        note = Note.objects.create(note='test-note', misc='test')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+        # Handles duplicates in different batches with batch size\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n+\n+    def test_bulk_update_batches(self):\n+        Note.objects.bulk_create(\n+            [Note(note=str(i), misc=str(i)) for i in range(100)]\n+        )\n+        notes = list(Note.objects.all())\n+        for note in notes:\n+            note.note = 'updated-' + note.note\n+        rows_updated = Note.objects.bulk_update(notes, ['note'], batch_size=10)\n+        self.assertEqual(rows_updated, 100)\n \n     def test_large_batch(self):\n         Note.objects.bulk_create([\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..1339252 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -336,7 +336,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        from django.forms.utils import ErrorList\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -358,7 +362,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        from django.forms.utils import ErrorList\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -982,7 +990,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         }\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n-        self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        from django.forms.utils import ErrorList\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..9166a02 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2122,7 +2122,34 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         self.assertEqual(form.errors, {})\n         self.assertEqual(form.cleaned_data, {'dt': now})\n \n-    def test_datetime_changed_data_callable_with_microseconds(self):\n+    def test_datetime_clean_fields_with_bound_field_access(self):\n+        \"\"\"\n+        Test that the _clean_fields method accesses the field value via BoundField.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        bf = form['dt']\n+        self.assertEqual(form.cleaned_data['dt'], bf.initial)\n+        self.assertEqual(form.cleaned_data['dt'], now)\n+\n+    def test_datetime_changed_data_with_bound_field(self):\n+        \"\"\"\n+        Test that changed_data uses the BoundField value to determine changes.\n+        \"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=False)\n+\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:46'})\n+        self.assertIn('dt', form.changed_data)\n+        \n+        form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n+        self.assertNotIn('dt', form.changed_data)\n         class DateTimeForm(forms.Form):\n             dt = DateTimeField(initial=lambda: datetime.datetime(2006, 10, 25, 14, 30, 45, 123456), disabled=True)\n \n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..21af47f 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -2,6 +2,8 @@ from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n from django.db import IntegrityError\n+from django.core.checks import Error\n+from django.db import models\n from django.test import TestCase\n \n from .models import (\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..0fe04c5 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -11,6 +12,7 @@ from django.http import Http404\n from django.test import RequestFactory, override_settings\n from django.urls import reverse, reverse_lazy\n \n+from django.utils import timezone\n from .admin import AnswerAdmin, QuestionAdmin\n from .models import (\n     Answer, Author, Authorship, Bonus, Book, Employee, Manager, Parent,\n@@ -293,9 +295,29 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'pagination': {'more': False},\n         })\n \n+    def test_serialize_result_with_extra_fields(self):\n+        class CustomAutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'notes': obj.notes,\n+                }\n+\n+        Question.objects.create(question='Question 1', posted=timezone.now().date(), notes=\"Note 1\")\n+        Question.objects.create(question='Question 2', posted=timezone.now().date(), notes=\"Note 2\")\n \n-@override_settings(ROOT_URLCONF='admin_views.urls')\n-class SeleniumTests(AdminSeleniumTestCase):\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = CustomAutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'notes': q.notes}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n     available_apps = ['admin_views'] + AdminSeleniumTestCase.available_apps\n \n     def setUp(self):\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..1563058 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -923,8 +923,25 @@ class StateTests(SimpleTestCase):\n             len([x for x in rendered_state.get_models() if x._meta.app_label == \"migrations\"]),\n             1,\n         )\n-\n-    def test_ignore_order_wrt(self):\n+    def test_real_apps_non_set(self):\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n+\n+    def test_real_apps_as_set(self):\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly for set input!\")\n+\n+    def test_real_apps_as_none(self):\n+        try:\n+            ProjectState(real_apps=None)\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly for None input!\")\n+\n+    def test_real_apps_as_tuple(self):\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=('contenttypes',))\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n         making from existing models.\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..446b226 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -476,7 +476,23 @@ class RestartWithReloaderTests(SimpleTestCase):\n         self.addCleanup(patch_call.stop)\n         return mock_call\n \n-    def test_manage_py(self):\n+    @mock.patch('sys._xoptions', {})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_empty(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, __file__, 'runserver'],\n+        )\n+\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_passed(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver'],\n+        )\n         with tempfile.TemporaryDirectory() as temp_dir:\n             script = Path(temp_dir) / 'manage.py'\n             script.touch()\n",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..1db5ca8 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5093,6 +5093,43 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin:admin_views_choice_change', args=(choice.pk,)))\n         self.assertContains(response, '<div class=\"readonly\">No opinion</div>', html=True)\n \n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper method to test ForeignKey readonly fields as links with different admin sites.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        remote_obj_url = reverse(f'{admin_site}:admin_views_language_change', args=(chapter.pk,))\n+        response = self.client.get(remote_obj_url)\n+        \n+        language_url = reverse(\n+            f'{admin_site}:admin_views_language_change',\n+            args=(quote(language.pk),),\n+        )\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_40</a></div>' % language_url,\n+            html=True,\n+        )\n+        # Related ForeignKey object not registered in admin.\n+        self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test readonly foreignkey links using the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test readonly foreignkey links using the custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('custom-admin')\n+\n     def test_readonly_foreignkey_links(self):\n         \"\"\"\n         ForeignKey readonly fields render as links if the target model is\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..d70edde 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,23 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_model_choice_iterator_value_is_hashable(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        \n+        # Test if ModelChoiceIteratorValue instances are hashable and can be used in sets\n+        values_set = {value_1, value_2}\n+        self.assertEqual(len(values_set), 2)\n+        \n+        # Test if ModelChoiceIteratorValue can be used as dictionary keys\n+        test_dict = {value_1: \"choice1\", value_2: \"choice2\"}\n+        self.assertEqual(test_dict[value_1], \"choice1\")\n+        self.assertEqual(test_dict[value_2], \"choice2\")\n+\n+        # Test hash consistency with equality\n+        value_1_duplicate = ModelChoiceIteratorValue(self.c1.pk, None)\n+        self.assertIn(value_1_duplicate, values_set)\n+        self.assertEqual(test_dict[value_1_duplicate], \"choice1\")\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..7a3a9bc 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -153,7 +153,47 @@ class ChangeListTests(TestCase):\n         cl = ia.get_changelist_instance(request)\n         self.assertEqual(cl.queryset.query.select_related, {'player': {}, 'band': {}})\n \n-    def test_result_list_empty_changelist_value(self):\n+from django.contrib.admin.views.main import SEARCH_VAR\n+from .admin import site as custom_site\n+from .models import Client, ClientOffice\n+\n+class ClientAdminTest(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.superuser = User.objects.create_superuser('admin', 'admin@test.com', 'password')\n+        self.client_admin = ClientAdmin(Client, custom_site)\n+    \n+    def test_search_with_multiple_words_results_in_single_join(self):\n+        client = Client.objects.create(name='Test Client')\n+        ClientOffice.objects.create(name='Test Office', client=client)\n+\n+        # Simulate a search request with multiple terms\n+        request = self.factory.get('/admin/', data={SEARCH_VAR: 'Test Office Client'})\n+        request.user = self.superuser\n+\n+        with CaptureQueriesContext(connection) as context:\n+            cl = self.client_admin.get_changelist_instance(request)\n+            object_count = cl.queryset.count()\n+\n+        self.assertEqual(object_count, 1)\n+        # Check that only one JOIN is created\n+        self.assertEqual(context.captured_queries[-1]['sql'].count('JOIN'), 1)\n+\n+    def test_search_multiple_terms_no_results_zero_joins(self):\n+        client = Client.objects.create(name='Another Client')\n+        ClientOffice.objects.create(name='Another Office', client=client)\n+\n+        # Simulate a search with multiple terms that yield no results\n+        request = self.factory.get('/admin/', data={SEARCH_VAR: 'Nonexistent Term'})\n+        request.user = self.superuser\n+\n+        with CaptureQueriesContext(connection) as context:\n+            cl = self.client_admin.get_changelist_instance(request)\n+            object_count = cl.queryset.count()\n+\n+        self.assertEqual(object_count, 0)\n+        # Ensure that additional terms don't cause unnecessary joins\n+        self.assertEqual(context.captured_queries[-1]['sql'].count('JOIN'), 1)\n         \"\"\"\n         Regression test for #14982: EMPTY_CHANGELIST_VALUE should be honored\n         for relationship fields\n",
  "django__django-15037": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 19402bb..9a73df2 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -203,8 +203,19 @@ class InspectDBTestCase(TestCase):\n             'people_unique = models.OneToOneField(InspectdbPeople, models.DO_NOTHING)',\n             output,\n         )\n-\n-    def test_digits_column_name_introspection(self):\n+    @skipUnlessDBFeature('can_introspect_foreign_keys')\n+    def test_foreign_key_to_specific_field(self):\n+        \"\"\"\n+        Test that inspectdb handles foreign keys to a specific field.\n+        \"\"\"\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_foreignkeytofield', stdout=out)\n+        output = out.getvalue()\n+        self.assertIn(\n+            \"to_field_fk = models.ForeignKey('InspectdbPeoplemoredata', models.CASCADE, to_field='people_unique')\",\n+            output,\n+            msg=\"inspectdb did not generate a ForeignKey to the specified 'to_field'.\"\n+        )\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n         out = StringIO()\n",
  "django__django-15103": "",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..e4ea5a5 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2835,7 +2835,34 @@ class AutodetectorTests(TestCase):\n                 )\n \n \n-class MigrationSuggestNameTests(SimpleTestCase):\n+class TestCustomFKField(TestCase):\n+    def test_custom_fk_with_hardcoded_to(self):\n+        class CustomFKField(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.HardcodedModel'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs[\"to\"]\n+                return name, path, args, kwargs\n+\n+        # Initial project state without the TestModel\n+        before = ProjectState()\n+        before.add_model(ModelState('testapp', 'HardcodedModel', []))\n+\n+        # New project state with the TestModel using CustomFKField\n+        after = ProjectState()\n+        after.add_model(ModelState('testapp', 'HardcodedModel', []))\n+        after.add_model(ModelState('testapp', 'TestModel', [('custom', CustomFKField(on_delete=models.CASCADE))]))\n+\n+        # Run migration autodetector and check for changes\n+        autodetector = MigrationAutodetector(before, after)\n+        changes = autodetector._detect_changes()\n+\n+        # Ensure that a migration change is detected for the TestModel addition\n+        self.assertEqual(len(changes['testapp']), 1)\n+        self.assertEqual(changes['testapp'][0].operations[0].name, 'TestModel')\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n             operations = []\n",
  "django__django-15127": "diff --git a/tests/messages_tests/tests.py b/tests/messages_tests/tests.py\nindex 8a3ca75..d69b684 100644\n--- a/tests/messages_tests/tests.py\n+++ b/tests/messages_tests/tests.py\n@@ -1,12 +1,38 @@\n+\n from unittest import mock\n \n from django.contrib.messages import constants\n+from django.contrib.messages.storage import base\n from django.contrib.messages.storage.base import Message\n from django.test import SimpleTestCase\n \n \n class MessageTests(SimpleTestCase):\n-    def test_eq(self):\n+    @override_settings(MESSAGE_TAGS={\n+        constants.INFO: 'info_test',\n+        constants.DEBUG: 'debug_test',\n+        constants.WARNING: 'warn',\n+        constants.ERROR: 'error_test',\n+    })\n+    def test_override_settings_with_message_tags(self):\n+        original_level_tags = base.LEVEL_TAGS.copy()\n+        self.assertEqual(base.LEVEL_TAGS[constants.INFO], 'info_test')\n+        self.assertEqual(base.LEVEL_TAGS[constants.ERROR], 'error_test')\n+        # Verify original LEVEL_TAGS are restored after test\n+        self.assertEqual(original_level_tags[constants.INFO], 'info')\n+        self.assertEqual(original_level_tags[constants.ERROR], 'error')\n+\n+    @override_settings(MESSAGE_TAGS={\n+        constants.SUCCESS: 'win',\n+        7: 'lucky_number',\n+    })\n+    def test_custom_tags_with_new_tags(self):\n+        storage = default_storage(self.get_response())\n+        storage.add(constants.SUCCESS, 'You have succeeded!')\n+        storage.add(7, 'Lucky number message!')\n+        tags = [msg.tags for msg in storage]\n+        self.assertIn('win', tags)\n+        self.assertIn('lucky_number', tags)\n         msg_1 = Message(constants.INFO, 'Test message 1')\n         msg_2 = Message(constants.INFO, 'Test message 2')\n         msg_3 = Message(constants.WARNING, 'Test message 1')\n@@ -14,4 +40,4 @@ class MessageTests(SimpleTestCase):\n         self.assertEqual(msg_1, mock.ANY)\n         self.assertNotEqual(msg_1, msg_2)\n         self.assertNotEqual(msg_1, msg_3)\n-        self.assertNotEqual(msg_2, msg_3)\n+        self.assertNotEqual(msg_2, msg_3)\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..7b9ccdd 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -30,7 +30,7 @@ from .models import (\n     SharedConnection, SimpleCategory, SingleObject, SpecialCategory, Staff,\n     StaffUser, Student, Tag, Task, Teacher, Ticket21203Child,\n     Ticket21203Parent, Ticket23605A, Ticket23605B, Ticket23605C, TvChef, Valid,\n-    X,\n+    X, BaseUser,\n )\n \n \n@@ -2095,13 +2095,51 @@ class QuerySetBitwiseOperationTests(TestCase):\n         cls.room_3 = Classroom.objects.create(school=cls.school, has_blackboard=True, name='Room 3')\n         cls.room_4 = Classroom.objects.create(school=cls.school, has_blackboard=False, name='Room 4')\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    def test_conflicting_aliases_during_combine(self):\n+        tag = Tag.objects.create()\n+        annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = annotation_1.notes.create(tag=tag)\n+        base_user_1 = BaseUser.objects.create(annotation=annotation_1)\n+        base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        task = Task.objects.create(\n+            owner=base_user_2, creator=base_user_2, note=note,\n+        )\n+        \n+        qs1 = annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=annotation_1.notes.all()) |\n+            Q(creator__note__in=annotation_1.notes.all())\n+        )\n+        self.assertSequenceEqual(qs1, [base_user_1])\n+        self.assertSequenceEqual(qs2, [base_user_2])\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [base_user_1, base_user_2])\n     def test_or_with_rhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)\n         qs2 = Classroom.objects.filter(has_blackboard=False)[:1]\n         self.assertCountEqual(qs1 | qs2, [self.room_1, self.room_2, self.room_3])\n \n-    @skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    def test_conflicting_aliases_during_combine(self):\n+        tag = Tag.objects.create()\n+        annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = annotation_1.notes.create(tag=tag)\n+        base_user_1 = BaseUser.objects.create(annotation=annotation_1)\n+        base_user_2 = BaseUser.objects.create(annotation=annotation_2)\n+        task = Task.objects.create(\n+            owner=base_user_2, creator=base_user_2, note=note,\n+        )\n+        \n+        qs1 = annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=annotation_1.notes.all()) |\n+            Q(creator__note__in=annotation_1.notes.all())\n+        )\n+        self.assertSequenceEqual(qs1, [base_user_1])\n+        self.assertSequenceEqual(qs2, [base_user_2])\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [base_user_1, base_user_2])\n     def test_or_with_lhs_slice(self):\n         qs1 = Classroom.objects.filter(has_blackboard=True)[:1]\n         qs2 = Classroom.objects.filter(has_blackboard=False)\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..db08949 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1755,6 +1755,20 @@ class ValueTests(TestCase):\n         Time.objects.update(time=Value(datetime.time(1), output_field=TimeField()))\n         self.assertEqual(Time.objects.get().time, datetime.time(1))\n \n+    def test_deconstruct_F(self):\n+        f = F('field_name')\n+        path, args, kwargs = f.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, (f.name,))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_ExpressionWrapper(self):\n+        ew = ExpressionWrapper(Value('test'), output_field=IntegerField())\n+        path, args, kwargs = ew.deconstruct()\n+        self.assertEqual(path, 'django.db.models.ExpressionWrapper')\n+        self.assertEqual(args, (Value('test'),))\n+        self.assertEqual(kwargs['output_field'], IntegerField())\n+\n     def test_update_UUIDField_using_Value(self):\n         UUID.objects.create()\n         UUID.objects.update(uuid=Value(uuid.UUID('12345678901234567890123456789012'), output_field=UUIDField()))\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..79df808 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1627,7 +1627,29 @@ class AutodetectorTests(TestCase):\n             ['CreateModel', 'AddField', 'AlterUniqueTogether', 'AlterIndexTogether']\n         )\n \n-    def test_remove_field_and_foo_together(self):\n+    def test_foo_together_optimization(self):\n+        \"\"\"\n+        Consecutive AlterFooTogether operations can be optimized into a single operation.\n+        \"\"\"\n+        # Simulate a case where a constraint is removed and then added again\n+        initial_state = [self.author_empty, self.book_foo_together]\n+        target_state = [self.author_empty, self.book_foo_together_optimized]\n+        \n+        changes = self.get_changes(initial_state, target_state)\n+        # Ensure the changes are optimized to a single AlterUniqueTogether and AlterIndexTogether\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book',\n+            unique_together={('author', 'title')},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book',\n+            index_together={('author', 'title')},\n+        )\n         \"\"\"\n         Removed fields will be removed after updating index/unique_together.\n         \"\"\"\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..a41d36c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1852,8 +1852,38 @@ class ValueTests(TestCase):\n         with self.assertRaisesMessage(FieldError, msg):\n             Value(object()).output_field\n \n-\n-class ExistsTests(TestCase):\n+    def test_output_field_does_not_create_invalid_validators(self):\n+        \"\"\"\n+        Test that the output field created for a Value object does not \n+        instantiate any invalid validators, particularly MaxLengthValidator\n+        for CharFields without max_length.\n+        \"\"\"\n+        value_cases = [\n+            ('test', fields.CharField),\n+            (True, fields.BooleanField),\n+            (42, fields.IntegerField),\n+            (3.14, fields.FloatField),\n+            (datetime.date(2019, 5, 15), fields.DateField),\n+            (datetime.datetime(2019, 5, 15), fields.DateTimeField),\n+            (datetime.time(3, 16), fields.TimeField),\n+            (datetime.timedelta(1), fields.DurationField),\n+            (Decimal('3.14'), fields.DecimalField),\n+            (b'', fields.BinaryField),\n+            (uuid.uuid4(), fields.UUIDField),\n+        ]\n+        for value, expected_field in value_cases:\n+            with self.subTest(value=value):\n+                resolved_field = Value(value)._resolve_output_field()\n+                self.assertIsInstance(resolved_field, expected_field)\n+                # Verify no MaxLengthValidator exists without max_length\n+                max_length_validators = [\n+                    v for v in resolved_field.validators \n+                    if isinstance(v, validators.MaxLengthValidator)\n+                ]\n+                if isinstance(resolved_field, fields.CharField):\n+                    self.assertTrue(resolved_field.max_length is not None)\n+                else:\n+                    self.assertEqual(len(max_length_validators), 0)\n     def test_optimizations(self):\n         with CaptureQueriesContext(connection) as context:\n             list(Experiment.objects.values(exists=Exists(\n",
  "django__django-15278": "",
  "django__django-15315": "",
  "django__django-15368": "",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..2374fce 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,6 +1049,30 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n+    def test_rename_field_with_renamed_model(self):\n+        \"\"\"\n+        New test case to check simultaneous renaming of a model and a field.\n+        Simulates the previously reported crash scenario.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState('testapp', 'RenamedAuthor', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n+\n     def test_rename_model(self):\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..a4f7351 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1905,8 +1905,38 @@ class ExistsTests(TestCase):\n         )\n         self.assertNotIn('ORDER BY', captured_sql)\n \n-\n-class FieldTransformTests(TestCase):\n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+from myapp.models import Manager  # Replace 'myapp' with the actual app name\n+\n+class ExistSubqueryTests(TestCase):\n+    def test_negated_empty_exists(self):\n+        manager = Manager.objects.create(name='test')\n+        qs = Manager.objects.filter(~Exists(Manager.objects.none()), pk=manager.pk)\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_non_negated_empty_exists(self):\n+        \"\"\"Test a non-negated Exists with an empty queryset should not find any records.\"\"\"\n+        manager = Manager.objects.create(name='test')\n+        qs = Manager.objects.filter(Exists(Manager.objects.none()), pk=manager.pk)\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_negated_non_empty_exists(self):\n+        \"\"\"Test a negated Exists with a non-empty queryset should not find any records.\"\"\"\n+        target_manager = Manager.objects.create(name='target')\n+        Manager.objects.create(name='another')\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.filter(name='another')), pk=target_manager.pk\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_combined_filters_with_exists(self):\n+        \"\"\"Test combining Exists with other Q objects.\"\"\"\n+        manager = Manager.objects.create(name='test')\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=manager.pk, name='test')\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..ea88cac 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -25,6 +25,9 @@ from django.db.models import (\n     UUIDField,\n )\n from django.test import SimpleTestCase, TestCase, override_settings\n+from django.contrib import admin\n+from django.db.models import ForeignKey\n+from .models import Inventory\n from django.urls import reverse\n from django.utils import translation\n \n@@ -132,6 +135,18 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n             raw_id_fields=[\"main_band\"],\n         )\n \n+    def test_radio_fields_foreignkey_formfield_custom_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"main_band\": admin.VERTICAL}\n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == \"main_band\":\n+                    kwargs[\"empty_label\"] = \"Custom empty label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+        \n+        ma = MyModelAdmin(Event, admin.site)\n+        formfield = ma.formfield_for_dbfield(Event._meta.get_field(\"main_band\"))\n+        self.assertEqual(formfield.empty_label, \"Custom empty label\")\n+\n     def test_radio_fields_ForeignKey(self):\n         ff = self.assertFormfield(\n             Event,\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..0ec588f 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -128,8 +128,94 @@ class OptimizerTests(SimpleTestCase):\n                 ),\n             ],\n         )\n+    def test_create_model_and_alter_managers_no_additional_fields(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default_manager\", models.Manager()),\n+                    ],\n+                )\n+            ],\n+        )\n+\n+    def test_optimize_create_model_with_fields_and_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                    ],\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n \n-    def test_create_model_and_remove_model_options(self):\n+    def test_create_model_with_multiple_operations(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Qux\",\n+                    fields=[\n+                        (\"name\", models.CharField(max_length=100)),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[\n+                        (\"custom_manager\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AddField(\n+                    model_name=\"Qux\",\n+                    name=\"description\",\n+                    field=models.TextField(null=True),\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Qux\",\n+                    fields=[\n+                        (\"name\", models.CharField(max_length=100)),\n+                        (\"description\", models.TextField(null=True)),\n+                    ],\n+                    managers=[\n+                        (\"custom_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n         self.assertOptimizesTo(\n             [\n                 migrations.CreateModel(\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/models.py b/tests/fixtures_regress/models.py\nindex 6245d2f..6c3eebc 100644\n--- a/tests/fixtures_regress/models.py\n+++ b/tests/fixtures_regress/models.py\n@@ -15,6 +15,35 @@ class Animal(models.Model):\n         return self.name\n \n \n+from django.db import models\n+from django.contrib.auth.models import User\n+\n+class Person(models.Model):\n+    name = models.CharField(max_length=255, unique=True)\n+\n+    def natural_key(self):\n+        return (self.name,)\n+\n+\n+class NaturalKeyWithFKDependencyManager(models.Manager):\n+    def get_by_natural_key(self, name, author):\n+        return self.get(name=name, author__name=author)\n+\n+\n+class NaturalKeyWithFKDependency(models.Model):\n+    name = models.CharField(max_length=255)\n+    author = models.ForeignKey(Person, models.CASCADE)\n+\n+    objects = NaturalKeyWithFKDependencyManager()\n+\n+    class Meta:\n+        unique_together = ['name', 'author']\n+\n+    def natural_key(self):\n+        return (self.name,) + self.author.natural_key()\n+\n+    natural_key.dependencies = ['fixtures_regress.Person']\n+\n class Plant(models.Model):\n     name = models.CharField(max_length=150)\n \n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..04e95c1 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3960,6 +3960,48 @@ class SchemaTests(TransactionTestCase):\n             editor.alter_field(Book, old_field, new_field, strict=True)\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n+    \n+    def test_alter_field_choices_noop_new_choice_set(self):\n+        \"\"\"Test alteration with a different set of choices.\"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        \n+        # Define a new field with a different set of choices\n+        new_field = CharField(\n+            choices=((\"Alice\", \"Alice\"), (\"Bob\", \"Bob\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        \n+        # Check that altering the field generates no SQL on SQLite\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        \n+        # Reverse the change and verify no SQL during revert as well\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_choices_noop_same_choice_set(self):\n+        \"\"\"Test alteration with the same set of choices (should be no-op).\"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        \n+        # Define a new field with the same set of choices\n+        new_field = CharField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        \n+        # Check that altering the field generates no SQL on SQLite\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        \n+        # Reverse the change and verify no SQL during revert as well\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n \n     def test_add_textfield_unhashable_default(self):\n         # Create the table\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..42b986c 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -324,8 +324,20 @@ class LookupTests(TestCase):\n             # getting the lookups again should re-cache\n             self.assertIn(\"exactly\", field.get_lookups())\n \n+    def test_unregistration_busts_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        # Ensure the lookup is not registered initially\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n \n-class BilateralTransformTests(TestCase):\n+        # Register the lookup\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n+        # Unregister the lookup and verify the cache is cleared appropriately\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        field.get_lookups.cache_clear()  # Ensure manual cache clear for testing\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n     def test_bilateral_upper(self):\n         with register_lookup(models.CharField, UpperBilateralTransform):\n             author1 = Author.objects.create(name=\"Doe\")\n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..3ba7783 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,4 +1,6 @@\n+\n import threading\n+import inspect\n from datetime import datetime, timedelta\n from unittest import mock\n \n",
  "django__django-15741": "",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..265f5df 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -399,6 +399,36 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n+from django.test import TestCase\n+from django.db import models\n+\n+# Models definition\n+\n+class CustomModel(models.Model):\n+    name = models.CharField(max_length=16)\n+\n+class ProxyCustomModel(CustomModel):\n+    class Meta:\n+        proxy = True\n+\n+class AnotherModel(models.Model):\n+    custom = models.ForeignKey(\n+        ProxyCustomModel,\n+        on_delete=models.SET_NULL,\n+        null=True,\n+        blank=True,\n+    )\n+\n+# Test case to reproduce the issue with QuerySet.only() and select_related() with proxy models\n+\n+class ProxyModelQuerySetTests(TestCase):\n+    def test_select_related_only_with_proxy(self):\n+        custom_instance = ProxyCustomModel.objects.create(name=\"Sample\")\n+        another_instance = AnotherModel.objects.create(custom=custom_instance)\n+        # This will raise an error if the issue is not fixed\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        self.assertEqual(qs.get().id, another_instance.id)\n+\n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..4e485cd 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,7 +157,11 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n-    @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n+    def test_proper_order_of_parameters(self):\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n \n",
  "django__django-15863": "",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..52bc059 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -405,7 +405,16 @@ class CaseExpressionTests(TestCase):\n             [1, 4, 3, 3, 3, 2, 2],\n         )\n \n-    def test_annotate_with_empty_when(self):\n+    def test_annotate_with_full_when(self):\n+        # Test that the issue with ~Q(pk__in=[]) is fixed and works correctly\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n         objects = CaseTestModel.objects.annotate(\n             selected=Case(\n                 When(pk__in=[], then=Value(\"selected\")),\n",
  "django__django-15987": "",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..0828964 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,36 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_direct_in_subquery(self):\n+        # This is similar to the original issue description test\n+        awarded_publishers_qs = (\n+            Publisher.objects.filter(num_awards__gt=4)\n+            .annotate(publisher_annotate=Value(1))\n+            .alias(publisher_alias=Value(1))\n+        )\n+        qs = Publisher.objects.filter(pk__in=awarded_publishers_qs)\n+        self.assertCountEqual(qs, [self.p3, self.p4])\n+\n+    def test_annotation_and_alias_filter_related_in_subquery(self):\n+        # Reproduces the exact problematic scenario described in the issue\n+        long_books_qs = (\n+            Book.objects.filter(pages__gt=400)\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = Publisher.objects.filter(\n+            book__in=long_books_qs,\n+        ).values(\"name\")\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {\"name\": \"Apress\"},\n+                {\"name\": \"Sams\"},\n+                {\"name\": \"Prentice Hall\"},\n+                {\"name\": \"Morgan Kaufmann\"},\n+            ],\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..13aaebc 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2406,6 +2406,31 @@ class CombinableTests(SimpleTestCase):\n             object() ^ Combinable()\n \n \n+from django.db.models import DecimalField, FloatField, IntegerField, F\n+from django.test import SimpleTestCase\n+from django.db.models.expressions import CombinedExpression, Expression, Combinable\n+\n+class ModOperatorTests(SimpleTestCase):\n+    def test_mod_operator_with_decimal_and_integer(self):\n+        lhs = DecimalField()\n+        rhs = IntegerField()\n+        expr = CombinedExpression(\n+            Expression(lhs),\n+            Combinable.MOD,\n+            Expression(rhs),\n+        )\n+        self.assertIsInstance(expr.output_field, DecimalField)\n+\n+    def test_mod_operator_with_integer_and_decimal(self):\n+        lhs = IntegerField()\n+        rhs = DecimalField()\n+        expr = CombinedExpression(\n+            Expression(lhs),\n+            Combinable.MOD,\n+            Expression(rhs),\n+        )\n+        self.assertIsInstance(expr.output_field, DecimalField)\n+\n class CombinedExpressionTests(SimpleTestCase):\n     def test_resolve_output_field_number(self):\n         tests = [\n@@ -2416,7 +2441,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..a98e90b 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,62 @@\n+\n+class TestAdminChangelistTransactions(TestCase):\n+\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        # Create instances for testing.\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        # Login as superuser to access the admin.\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+\n+        # Data for list_editable form submission.\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+\n+        # Mock an error when logging change for the first object and assert atomicity.\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Verify original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        # Mock an error during logging for the second object and assert atomicity.\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Verify original values are preserved.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+    # Additional tests can be added here to further ensure atomicity under different scenarios\n+\n import datetime\n \n from django.contrib import admin\n@@ -16,7 +75,9 @@ from django.contrib.admin.views.main import (\n from django.contrib.auth.models import User\n from django.contrib.contenttypes.models import ContentType\n from django.contrib.messages.storage.cookie import CookieStorage\n-from django.db import connection, models\n+from unittest import mock\n+from django.db import connection, models, DatabaseError\n+from django.test import override_settings, skipUnlessDBFeature\n from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..9faba4f 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,27 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_no_changes(self):\n+        \"\"\"\n+        makemigrations --check should not create migration files and should exit successfully\n+        if there are no changes requiring a migration.\n+        \"\"\"\n+        with self.temporary_migration_module(module=\"migrations.test_migrations_no_changes\"):\n+            try:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            except SystemExit as e:\n+                self.fail(\"makemigrations --check exited with SystemExit unexpectedly: %s\" % e)\n+    \n+    def test_makemigrations_check_with_changes(self):\n+        \"\"\"\n+        makemigrations --check should exit with a non-zero status when there are changes\n+        requiring migrations. It should not generate any migration file.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            self.assertFalse(os.path.exists(tmpdir))\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            self.assertFalse(os.path.exists(tmpdir))\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..9278b6c 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,7 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory\n+import asyncio\n from django.test import SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n@@ -119,6 +122,28 @@ class ViewTests(SimpleTestCase):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n+    def test_http_method_not_allowed_responds_correctly(self):\n+        \"\"\"\n+        Test that http_method_not_allowed responds as expected for both async and sync views.\n+        \"\"\"\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.post(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n+\n     def test_base_view_class_is_sync(self):\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..6815a1d 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,6 +25,7 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+from django.urls import reverse\n from django.utils.translation import gettext as _\n \n from .models.custom_user import (\n@@ -892,6 +894,46 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.create(username=\"testclient2\", password=\"password\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_with_missing_to_field(self):\n+        user = User.objects.create(username=\"testclient3\", password=\"password\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # Ensure that without the to_field, the URL constructs correctly.\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.pk,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16145": "",
  "django__django-16255": "",
  "django__django-16315": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex 3559126..764ef0f 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -768,6 +768,41 @@ class BulkCreateTests(TestCase):\n     def test_update_conflicts_unique_fields(self):\n         self._test_update_conflicts(unique_fields=[\"number\"])\n \n+    @skipUnlessDBFeature(\n+        \"supports_update_conflicts\", \"supports_update_conflicts_with_target\"\n+    )\n+    def test_bulk_create_with_mixed_case_db_columns(self):\n+        class FieldsWithDbColumns(models.Model):\n+            rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+            name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n+        FieldsWithDbColumns.objects.bulk_create(\n+            [\n+                FieldsWithDbColumns(rank=1, name=\"a\"),\n+                FieldsWithDbColumns(rank=2, name=\"b\"),\n+            ]\n+        )\n+        self.assertEqual(FieldsWithDbColumns.objects.count(), 2)\n+\n+        conflicting_objects = [\n+            FieldsWithDbColumns(rank=1, name=\"c\"),\n+            FieldsWithDbColumns(rank=2, name=\"d\"),\n+        ]\n+        FieldsWithDbColumns.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"rank\"],\n+            update_fields=[\"name\"],\n+        )\n+        self.assertEqual(FieldsWithDbColumns.objects.count(), 2)\n+        self.assertCountEqual(\n+            FieldsWithDbColumns.objects.values(\"rank\", \"name\"),\n+            [\n+                {\"rank\": 1, \"name\": \"c\"},\n+                {\"rank\": 2, \"name\": \"d\"},\n+            ],\n+        )\n+\n     @skipUnlessDBFeature(\"supports_update_conflicts\")\n     @skipIfDBFeature(\"supports_update_conflicts_with_target\")\n     def test_update_conflicts_no_unique_fields(self):\n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..afbcd3e 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -252,7 +254,55 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n-    def test_password_whitespace_not_stripped(self):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_many_to_many_field_invalid(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [\"non_existent_pk\"],  # Invalid organization PK\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertFalse(form.is_valid())\n+\n+    def test_custom_form_saves_without_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [])\n         data = {\n             \"username\": \"testuser\",\n             \"password1\": \"   testpassword   \",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..5025de0 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -236,7 +237,27 @@ class TimesinceTests(TestCase):\n             with self.subTest():\n                 self.assertEqual(timesince(t, value), expected)\n \n-    def test_depth_invalid(self):\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz_aware(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        d = timezone.make_aware(d, timezone.get_default_timezone())\n+        result = timesince(d)\n+        self.assertIn('month', result)\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_mixed_aware_and_naive(self):\n+        now = timezone.now()\n+        naive_past = now - datetime.timedelta(days=31)\n+        aware_past = timezone.make_aware(naive_past, timezone.get_default_timezone())\n+        \n+        with self.assertRaises(TypeError):\n+            timesince(aware_past, naive_past)\n+        \n+        with self.assertRaises(TypeError):\n+            timesince(naive_past, aware_past)\n         msg = \"depth must be greater than 0.\"\n         with self.assertRaisesMessage(ValueError, msg):\n             timesince(self.t, self.t, depth=0)\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..7872c9a 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -468,6 +468,23 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), \"Set foo\")\n \n+class ManagementCommandSubparserTests(SimpleTestCase):\n+    def test_missing_subcommand(self):\n+        \"\"\"Test that missing subcommands produce a friendly error.\"\"\"\n+        out, err = self.run_manage([\"cheeses\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertIn(\"manage.py cheeses: error: the following arguments are required: {create}\", err_lines)\n+\n+    def test_missing_argument_in_subcommand(self):\n+        \"\"\"Test that missing arguments in subcommands are reported correctly.\"\"\"\n+        out, err = self.run_manage([\"cheeses\", \"create\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertIn(\"manage.py cheeses create: error: the following arguments are required: name\", err_lines)\n+\n \n class UtilsTests(SimpleTestCase):\n     def test_no_existent_external_program(self):\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..aaad04e 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -104,6 +104,12 @@ class FunctionTests(SimpleTestCase):\n             # Invalid suffix.\n             self.assertEqual(floatformat(66666.666, \"u2\"), \"66666.666\")\n \n+    def test_floatformat_on_zero_string_decimal(self):\n+        # Test for issue where \"0.00\" was causing a ValueError\n+        from decimal import Decimal\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+\n     def test_zero_values(self):\n         self.assertEqual(floatformat(0, 6), \"0.000000\")\n         self.assertEqual(floatformat(0, 7), \"0.0000000\")\n",
  "django__django-16493": "diff --git a/tests/file_storage/models.py b/tests/file_storage/models.py\nindex 3513a6b..9c5ce49 100644\n--- a/tests/file_storage/models.py\n+++ b/tests/file_storage/models.py\n@@ -18,8 +18,12 @@ class CustomValidNameStorage(FileSystemStorage):\n         # mark the name to show that this was called\n         return name + \"_valid\"\n \n+from django.core.files.storage import default_storage\n \n temp_storage_location = tempfile.mkdtemp()\n+\n+def callable_default_storage():\n+    return default_storage\n temp_storage = FileSystemStorage(location=temp_storage_location)\n \n \n@@ -62,6 +66,10 @@ class Storage(models.Model):\n     storage_callable_class = models.FileField(\n         storage=CallableStorage, upload_to=\"storage_callable_class\"\n     )\n+    storage_callable_default = models.FileField(\n+        storage=callable_default_storage, upload_to=\"storage_callable_default\"\n+    )\n+    \n     default = models.FileField(\n         storage=temp_storage, upload_to=\"tests\", default=\"tests/default.txt\"\n     )\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..42d91df 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -13,7 +14,44 @@ from .models import Article, Question\n from .tests import AdminViewBasicTestCase\n \n \n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n+\n class AdminTemplateTagsTest(AdminViewBasicTestCase):\n+    def test_submit_row_save_as_new_requires_add_permission(self):\n+        \"\"\" \n+        Test that 'show_save_as_new' is False without add permission\n+        and True with both add and change permissions.\n+        \"\"\"\n+        # Create a user with only change permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # Create a user with add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n     request_factory = RequestFactory()\n \n     def test_submit_row(self):\n",
  "django__django-16560": "",
  "django__django-16569": "",
  "django__django-16595": "",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..52fbc09 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8463,6 +8463,59 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_script_name_with_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_non_staff_user_with_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_script_name(self):\n         superuser = User.objects.create_user(\n@@ -8629,6 +8682,59 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             response, known_url, status_code=301, target_status_code=403\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_with_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_script_name_with_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_non_staff_user_with_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n     @override_settings(APPEND_SLASH=False)\n     def test_missing_slash_append_slash_false_without_final_catch_all_view(self):\n         superuser = User.objects.create_user(\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..629c17d 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,21 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        \n+    def test_mime_type_br_and_z(self):\n+        \"\"\"\n+        Test the MIME type guessing for .br and .Z file extensions.\n+        \"\"\"\n+        test_tuples = (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..ba26146 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,30 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_import_order(self):\n+        \"\"\"\n+        Test that imports are generated in the correct order.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield\",\n+                        models.FloatField(\n+                            default=time.time,\n+                        ),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Ensuring 'import datetime' and 'import time' come before 'from django.db import migrations, models'\n+        expected_imports = \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\"\n+        self.assertIn(expected_imports, output)\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..7e1edf8 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -328,6 +328,14 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n \n     PersonModel = Person\n \n+    def test_post_init_not_connected(self):\n+        person_model_id = id(self.PersonModel)\n+        # Check that there is no post_init signal handler connected for ImageField without dimensions\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id) in signals.post_init.receivers],\n+        )\n+\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..3e152b3 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -791,7 +791,36 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         self.assertEqual(errors, [])\n \n-    def test_nonexistent_field(self):\n+    def test_readonly_field_includes_field_name(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"title\", \"nonexistent_field\")\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent_field', which is not a callable, an attribute \"\n+                \"of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n+\n+    def test_readonly_field_on_inline_includes_field_name(self):\n+        class CityInline(admin.TabularInline):\n+            model = City\n+            readonly_fields = [\"nonexistent_attribute\"]  # Missing attribute\n+\n+        errors = CityInline(State, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'nonexistent_attribute', which is not a callable, an attribute \"\n+                \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                obj=CityInline,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = (\"title\", \"nonexistent\")\n \n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..010397a 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -53,8 +54,41 @@ class XorLookupsTests(TestCase):\n             numbers.filter(num__gt=0) ^ numbers.filter(num__lt=11),\n             [self.numbers[0]],\n         )\n+    \n+    def test_filter_multiple(self):\n+        qs = Number.objects.filter(\n+            Q(num__gte=1)\n+            ^ Q(num__gte=3)\n+            ^ Q(num__gte=5)\n+            ^ Q(num__gte=7)\n+            ^ Q(num__gte=9)\n+        )\n+        self.assertCountEqual(\n+            qs,\n+            self.numbers[1:3] + self.numbers[5:7] + self.numbers[9:],\n+        )\n+        self.assertCountEqual(\n+            qs.values_list(\"num\", flat=True),\n+            [\n+                i\n+                for i in range(10)\n+                if (i >= 1) ^ (i >= 3) ^ (i >= 5) ^ (i >= 7) ^ (i >= 9)\n+            ],\n+        )\n \n-    def test_pk_q(self):\n+    def test_filter_with_id(self):\n+        self.assertEqual(\n+            Number.objects.filter(Q(num=0) ^ Q(num=0) ^ Q(num=0)).count(),\n+            1\n+        )\n+        self.assertEqual(\n+            Number.objects.filter(Q(num=0) ^ Q(num=0) ^ Q(num=0) ^ Q(num=0)).count(),\n+            0\n+        )\n+        self.assertEqual(\n+            Number.objects.filter(Q(num=0) ^ Q(num=0) ^ Q(num=0) ^ Q(num=0) ^ Q(num=0)).count(),\n+            1\n+        )\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk=self.numbers[0].pk) ^ Q(pk=self.numbers[1].pk)),\n             self.numbers[:2],\n@@ -64,4 +98,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..cdcc776 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -24,6 +24,11 @@ SOME_INSTALLED_APPS = [\n     \"django.contrib.staticfiles\",\n ]\n \n+from django.test import override_settings\n+from django.apps import apps\n+from django.contrib.auth.models import LogEntry\n+from django.utils.functional import cached_property\n+\n SOME_INSTALLED_APPS_NAMES = [\n     \"django.contrib.admin\",\n     \"django.contrib.auth\",\n@@ -328,7 +333,22 @@ class AppsTests(SimpleTestCase):\n             apps.apps_ready = True\n \n     @isolate_apps(\"apps\", kwarg_name=\"apps\")\n-    def test_lazy_model_operation(self, apps):\n+    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache_complete(self):\n+        \"\"\"\n+        Test that apps.clear_cache() clears all relevant caches including\n+        get_swappable_settings_name\n+        \"\"\"\n+        # Access the cache to set it\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        apps.get_models()\n+\n+        # Clear the cache\n+        apps.clear_cache()\n+\n+        # Ensure all relevant caches are cleared\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n         \"\"\"\n         Tests apps.lazy_model_operation().\n         \"\"\"\n",
  "django__django-17084": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1e0d80c..e59fe00 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -42,6 +42,9 @@ from django.db.models.functions import (\n     TruncDate,\n     TruncHour,\n )\n+from django.db.models import F, Avg, Count\n+from django.db.models.functions import Coalesce\n+from django.db.models import Window\n from django.test import TestCase\n from django.test.testcases import skipUnlessDBFeature\n from django.test.utils import Approximate, CaptureQueriesContext\n@@ -2204,6 +2207,28 @@ class AggregateAnnotationPruningTests(TestCase):\n                     sum_total_books=Sum(\"total_books\"),\n                 )\n             )\n+        \n+    @skipUnlessDBFeature(\"supports_over_clause\")\n+    def test_aggregate_over_window_function(self):\n+        # Test to verify aggregate functions over window functions\n+        queryset = Book.objects.annotate(\n+            cumul_DJR=Coalesce(\n+                Window(Sum(\"DJR\"), order_by=F(\"date\").asc()),\n+                0.0,\n+            )\n+        )\n+        with self.assertNumQueries(1) as ctx:\n+            aggregate = queryset.aggregate(\n+                DJR_total=Sum(\"DJR\"),\n+                cumul_DJR_total=Sum(\"cumul_DJR\"),\n+            )\n+        sql = ctx.captured_queries[0][\"sql\"].lower()\n+        self.assertEqual(sql.count(\"select\"), 2, \"Subquery wrapping required for aggregates over window functions\")\n+        self.assertEqual(\n+            aggregate,\n+            # Expected values might need adjustment based on actual test database contents\n+            {\"DJR_total\": 1100.0, \"cumul_DJR_total\": 1100.0},  \n+        )\n         sql = ctx.captured_queries[0][\"sql\"].lower()\n         self.assertEqual(sql.count(\"select\"), 3, \"Subquery wrapping required\")\n         self.assertEqual(aggregate, {\"sum_total_books\": 3})\n",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..85148aa 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,7 +641,26 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n-    def test_failing_migration(self):\n+    @override_settings(INSTALLED_APPS=['migrations', 'migrations2'])\n+    def test_makemigrations_router_allow_migrate_calls(self):\n+        \"\"\"\n+        Ensure makemigrations calls allow_migrate() with correct (app_label, model)\n+        pairs, corresponding to the models in each app.\n+        \"\"\"\n+        # Mocking the router's allow_migrate method\n+        with mock.patch('migrations.routers.TestRouter.allow_migrate', return_value=True) as allow_migrate:\n+            call_command('makemigrations', 'migrations', verbosity=0)\n+            # Ensure allow_migrate is called with the correct parameters\n+            allow_migrate.assert_any_call('default', 'migrations', model_name='UnicodeModel')\n+            allow_migrate.assert_any_call('other', 'migrations', model_name='UnicodeModel')\n+            # Validate no invalid (app_label, model) pairs are passed\n+            for mock_call in allow_migrate.mock_calls:\n+                _, call_args, call_kwargs = mock_call\n+                connection_alias, app_label = call_args\n+                model_name = call_kwargs['model_name']\n+                self.assertIn(connection_alias, ['default', 'other'])\n+                # Raises error if invalid app_label/model combination occurs\n+                apps.get_app_config(app_label).get_model(model_name)\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n \n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..d63daa9 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -298,7 +298,36 @@ class PaginationTests(SimpleTestCase):\n             paginator.get_page(1)\n \n \n-class ModelPaginationTests(TestCase):\n+from django.core.paginator import Paginator, EmptyPage\n+from django.test import TestCase\n+\n+class PaginatorTests(TestCase):\n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_empty_paginator_iteration(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_exact_fit_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3, 4], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3, 4]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_multiple_full_pages_iteration(self):\n+        paginator = Paginator([1, 2, 3, 4, 5, 6], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3, 4], [5, 6]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n     \"\"\"\n     Test pagination with Django model instances\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..433edd8 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,41 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    # Test basic functionality\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+    # Test with more data points\n+    data = np.linspace(0, 1, 100)\n+    _, bins, _ = plt.hist(data, bins=10, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+    # Test with data outside the range\n+    data = np.concatenate([np.linspace(-0.1, 0.5, 50), np.linspace(0.5, 1.1, 50)])\n+    _, bins, _ = plt.hist(data, bins=10, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+    # Test with density=False for control\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+    # Additional checks for different range values\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0.2, 0.8), density=True)\n+    assert bins[0] == 0.2\n+    assert bins[-1] == 0.8\n+\n+    # Edge case with empty data\n+    _, bins, _ = plt.hist([], bins=10, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6401,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..a875e24 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -940,7 +940,21 @@ def test_inverted_limits():\n \n \n @image_comparison(baseline_images=['nonfinite_limits'])\n-def test_nonfinite_limits():\n+def test_invert_axis_limits_log_and_linear():\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+    \n+    y = np.linspace(1000e2, 1, 100)\n+    x = np.exp(-np.linspace(0, 1, y.size))\n+\n+    for yscale in ('linear', 'log'):\n+        fig, ax = plt.subplots()\n+        ax.plot(x, y)\n+        ax.set_yscale(yscale)\n+        ax.set_ylim(y.max(), y.min())\n+        assert ax.get_ylim() == (y.max(), y.min()), f\"Inversion failed for yscale={yscale}\"\n+\n+    plt.close()\n     x = np.arange(0., np.e, 0.01)\n     # silence divide by zero warning from log(0)\n     with np.errstate(divide='ignore'):\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..c556227 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6959,9 +6959,36 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[2].step([1, 2], [1, 2], c=color.reshape((1, -1)))\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n+from matplotlib.testing.decorators import check_figures_equal\n \n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+def test_shared_axes_visibility_after_clear():\n+    fig, axs = plt.subplots(2, 2, sharex=True, sharey=True)\n+    # Initial plot\n+    for ax in axs.flat:\n+        ax.plot([0, 1], [0, 1])\n+\n+    # Clear the axes\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot([0, 1], [0, 1])\n \n-def test_shared_axes_retick():\n+    # Check if ticks are shared and plotted correctly\n+    assert not any(ax.xaxis.get_visible() and ax is not axs[-1, 0] for ax in axs[:, -1])\n+    assert not any(ax.yaxis.get_visible() and ax is not axs[0, -1] for ax in axs[-1, :])\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n     for ax in axs.flat:\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..a1828ca 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -912,6 +912,34 @@ def test_proportional_colorbars():\n     extends = ['neither', 'both']\n     spacings = ['uniform', 'proportional']\n     fig, axs = plt.subplots(2, 2)\n+from matplotlib import pyplot as plt\n+import matplotlib.colors as mcolors\n+import numpy as np\n+from matplotlib.colorbar import Colorbar\n+\n+@pytest.mark.parametrize(\"extend, coloroffset, res\", [\n+    ('both', 1, [np.array([[0., 0.], [0., 1.]]),\n+                 np.array([[1., 0.], [1., 1.]]),\n+                 np.array([[2., 0.], [2., 1.]])]),\n+    ('min', 0, [np.array([[0., 0.], [0., 1.]]),\n+                np.array([[1., 0.], [1., 1.]])]),\n+    ('max', 0, [np.array([[1., 0.], [1., 1.]]),\n+                np.array([[2., 0.], [2., 1.]])]),\n+    ('neither', -1, [np.array([[1., 0.], [1., 1.]])])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, res):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal',\n+                    drawedges=True)\n+    assert np.all(np.equal(cbar.dividers.get_segments(), res))\n+\n     for i in range(2):\n         for j in range(2):\n             CS3 = axs[i, j].contourf(X, Y, Z, levels, cmap=cmap, norm=norm,\n",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..6af3e73 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -17,11 +17,24 @@ import matplotlib.pyplot as plt\n import numpy as np\n \n \n+from matplotlib.testing.decorators import check_figures_equal\n+\n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_3d_axes_visibility(fig_test, fig_ref):\n+    # Create a figure with one visible 3D subplot\n+    ax1 = fig_test.add_subplot(121, projection='3d')\n+    ax1.scatter([1], [1], [1], c='b')\n+\n+    # Create a figure with one invisible 3D subplot\n+    ax2 = fig_ref.add_subplot(121, projection='3d')\n+    ax2.scatter([1], [1], [1], c='b')\n+    ax2.set_visible(False)\n+\n+    plt.subplots_adjust(wspace=0.5)\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..05edfff 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -148,8 +148,42 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_test.set_angle(angle)\n     assert rect_test.get_angle() == angle\n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.patches import Rectangle\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_behaviour(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.2, 0.2)\n+    width, height = (0.6, 0.6)\n+\n+    # Expected behaviour rect\n+    rect_ref1 = Rectangle(loc, width, height, linewidth=3, edgecolor='b',\n+                          linestyle=(0, [10, 5]))\n+    rect_ref2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r',\n+                          linestyle=(5, [10, 5]))\n+\n+    ax_ref.add_patch(rect_ref1)\n+    ax_ref.add_patch(rect_ref2)\n+\n+    assert rect_ref1.get_linestyle() == (0, [10, 5])\n+    assert rect_ref2.get_linestyle() == (5, [10, 5])\n+\n+    # Actual test rectangles with the same style\n+    rect_test1 = Rectangle(loc, width, height, linewidth=3, edgecolor='b',\n+                           linestyle=(0, [10, 5]))\n+    rect_test2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r',\n+                           linestyle=(5, [10, 5]))\n+\n+    ax_test.add_patch(rect_test1)\n+    ax_test.add_patch(rect_test2)\n \n-def test_negative_rect():\n+    assert rect_test1.get_linestyle() == (0, [10, 5])\n+    assert rect_test2.get_linestyle() == (5, [10, 5])\n     # These two rectangles have the same vertices, but starting from a\n     # different point.  (We also drop the last vertex, which is a duplicate.)\n     pos_vertices = Rectangle((-3, -2), 3, 2).get_verts()[:-1]\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..3b11e87 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,25 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n-\n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.patches import Rectangle\n+\n+def test_stackplot_color_cycler():\n+    \"\"\"Test to ensure stackplot does not modify the color cycler.\"\"\"\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    \n+    # Use a color from the cycler with plot and Rectangle\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    \n+    # Check if exception is raised from stackplot using cycler reference\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+\n+    # Assert color cycle is not modified after stackplot call\n+    assert ax._get_lines.prop_cycler['color'] == ['C0', 'C1']  # Colors used before stackplot\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..7190419 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -11,6 +11,7 @@ import matplotlib.patches as mpatches\n import matplotlib.lines as mlines\n from matplotlib.backend_bases import MouseButton, MouseEvent\n \n+from matplotlib.patches import Rectangle\n from matplotlib.offsetbox import (\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n     OffsetImage, TextArea, _get_packed_offsets)\n",
  "matplotlib__matplotlib-24627": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 35bc6ec..8b69c66 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -8370,6 +8370,51 @@ def test_extent_units():\n         im.set_extent([2, 12, date_first, date_last], clip=False)\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n+\n+def test_cla_unsets_axes_and_fig():\n+    fig, ax = plt.subplots()\n+    line, = ax.plot([1, 2], [1, 2], 'ko-')\n+    img = ax.imshow([[1, 2], [2, 3]])\n+    \n+    # Verify initial state\n+    assert line.axes is ax\n+    assert line.figure is fig\n+    assert img.axes is ax\n+    assert img.figure is fig\n+\n+    # Clear the Axes using ax.cla()\n+    ax.cla()\n+\n+    # Verify .axes and .figure are unset\n+    assert line.axes is None\n+    assert line.figure is None\n+    assert img.axes is None\n+    assert img.figure is None\n+\n+def test_clf_unsets_axes_and_fig():\n+    fig, ax = plt.subplots()\n+    line, = ax.plot([1, 2], [1, 2], 'ko-')\n+    img = ax.imshow([[1, 2], [2, 3]])\n+\n+    # Verify initial state\n+    assert line.axes is ax\n+    assert line.figure is fig\n+    assert img.axes is ax\n+    assert img.figure is fig\n+\n+    # Clear the Figure using fig.clf()\n+    fig.clf()\n+\n+    # Verify .axes and .figure are unset\n+    assert line.axes is None\n+    assert line.figure is None\n+    assert img.axes is None\n+    assert img.figure is None\n+\n+\n def test_scatter_color_repr_error():\n \n     def get_next_color():\n",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..3b8324a 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,20 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+import matplotlib as mpl\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.int32, np.int64])\n+def test_colormap_no_deprecation(dtype):\n+    \"\"\"Test that no deprecation warnings are raised for certain dtypes.\"\"\"\n+    cm = mpl.colormaps[\"viridis\"]\n+    indexes = np.array([0, 1, 256], dtype=dtype)\n+    # Ensure there's no deprecation warning with these indexes\n+    colors = cm(indexes)\n+    assert colors.shape[0] == len(indexes)\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..7a3deba 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,49 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+\n+def test_combined_axis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'purple'\n+    plt.rcParams['ytick.labelcolor'] = 'orange'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'purple'\n+    assert ax.yaxis.offsetText.get_color() == 'orange'\n+\n+    plt.rcParams['xtick.color'] = 'black'\n+    plt.rcParams['ytick.color'] = 'black'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'black'\n+    assert ax.yaxis.offsetText.get_color() == 'black'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+import matplotlib.font_manager as mfont_manager\n+import matplotlib as mpl\n+import numpy as np\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..ddb0596 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,22 @@\n+\n+import pickletools\n+\n+def test_pickle_figure_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([1, 2, 3], label='test')\n+    leg = ax.legend()\n+    leg.set_draggable(True)\n+    \n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Ensure no reference to FigureCanvasAgg\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    # Load the pickled figure to verify it can be unpickled\n+    loaded_fig = pickle.loads(pkl)\n+    assert loaded_fig is not None\n+\n from io import BytesIO\n import ast\n import pickle\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..556be37 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -44,6 +44,37 @@ def test_simple():\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n \n+def test_pickle_with_aligned_labels():\n+    from io import BytesIO\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    import pickle\n+\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()\n+\n+    # Check if figure can be pickled\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+\n+    # Load the pickled figure to ensure it was successful\n+    loaded_fig = pickle.loads(pkl.getvalue())\n+    assert isinstance(loaded_fig, plt.Figure)\n+\n+    plt.close(fig)\n+    plt.close(loaded_fig)\n+\n+\n def _generate_complete_test_figure(fig_ref):\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..8ebce82 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,6 +991,81 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_zero(fig_test, fig_ref):\n+    # Check behavior with mincnt=0 parameter\n+    datapoints = [\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=0,\n+    )\n+    ax_ref.set_facecolor(\"lightgray\")\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=0,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"lightgray\")\n \n def test_hexbin_log_clim():\n     x, y = np.arange(200).reshape((2, 100))\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..83c78d7 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,46 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    cs_test = fig_test.subplots().contour([[0, 1], [1, 2]])\n+    cs_ref = fig_ref.subplots().contour([[1, 0], [2, 1]])\n+\n+    # Replace paths using the new method\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+# Additional test case to verify set_paths with identity transformation\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_identity_transform(fig_test, fig_ref):\n+    cs_test = fig_test.subplots().contour([[0, 2], [1, 3]])\n+    cs_ref = fig_ref.subplots().contour([[0, 2], [1, 3]])\n+\n+    # Test setting the same paths to see if the output remains identical.\n+    cs_test.set_paths(cs_ref.get_paths())\n+\n+# Additional test case to verify set_paths with an empty path list\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_empty(fig_test, fig_ref):\n+    cs_test = fig_test.subplots().contour([[0, 1], [1, 2]])\n+    cs_ref = fig_ref.subplots().contour([[1, 0], [2, 1]])\n+\n+    # Test setting empty paths\n+    cs_test.set_paths([])\n+\n+# Additional test case to verify set_paths with example transformation\n+@image_comparison(['contour_paths_transform.png'])\n+def test_contour_paths_transformation():\n+    fig, ax = plt.subplots()\n+    cs = ax.contour([[0, 1], [1, 2]])\n+    # Apply an example transformation to paths (dummy test for structural purposes)\n+    transformed_paths = [p.transformed(ax.transData) for p in cs.get_paths()]\n+    cs.set_paths(transformed_paths)\n+    ax.figure.savefig('contour_paths_transform.png')\n+\n+from matplotlib import pyplot as plt\n+import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..a81005b 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,14 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+\n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "diff --git a/requests/api.py b/requests/api.py\nindex 66d7f21..3f3f6d0 100644\n--- a/requests/api.py\n+++ b/requests/api.py\n@@ -12,9 +12,48 @@ This module implements the Requests API.\n \"\"\"\n \n from . import sessions\n-\n-\n-def request(method, url, **kwargs):\n+import requests\n+import unittest\n+import os\n+\n+class TestUnicodeMethodName(unittest.TestCase):\n+\n+    def setUp(self):\n+        # Create a temporary file for testing\n+        self.file_path = 'test_requests_data.txt'\n+        with open(self.file_path, 'w') as f:\n+            f.write('dummy content')\n+\n+    def tearDown(self):\n+        # Remove the temporary file after tests\n+        os.remove(self.file_path)\n+\n+    def test_unicode_method_name(self):\n+        files = {'file': open(self.file_path, 'rb')}\n+        try:\n+            r = requests.request(method=u'POST', url='http://httpbin.org/post', files=files)\n+            self.assertEqual(r.status_code, 200, \"Expected HTTP status code 200\")\n+        finally:\n+            files['file'].close()\n+\n+    def test_non_unicode_method_name(self):\n+        files = {'file': open(self.file_path, 'rb')}\n+        try:\n+            r = requests.request(method='POST', url='http://httpbin.org/post', files=files)\n+            self.assertEqual(r.status_code, 200, \"Expected HTTP status code 200\")\n+        finally:\n+            files['file'].close()\n+\n+    def test_unicode_url(self):\n+        files = {'file': open(self.file_path, 'rb')}\n+        try:\n+            r = requests.request(method='POST', url=u'http://httpbin.org/post', files=files)\n+            self.assertEqual(r.status_code, 200, \"Expected HTTP status code 200\")\n+        finally:\n+            files['file'].close()\n+\n+if __name__ == '__main__':\n+    unittest.main()\n     \"\"\"Constructs and sends a :class:`Request <Request>`.\n     Returns :class:`Response <Response>` object.\n \n",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..9dfd1e2 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,12 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n+            (InvalidURL, 'http://..example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://-.example.com'),\n+            (InvalidURL, 'http://example.-com'),\n+            (InvalidURL, 'http://ex..ample.com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..d650a11 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,24 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+def test_variable_setitem_with_values_property():\n+    import xarray as xr\n+    import numpy as np\n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+    class HasValues:\n+        def __init__(self):\n+            self.values = 5\n+\n+    good_indexed = xr.DataArray([None], dims=[\"dim_0\"])\n+    bad_indexed = xr.DataArray([None], dims=[\"dim_0\"])\n+\n+    # Perform the assignments as specified in the issue description\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+\n+    # Verify the expected behavior\n+    assert isinstance(good_indexed.values[0], set), \"Expected good_indexed to store a set\"\n+    assert isinstance(bad_indexed.values[0], HasValues), \"Expected bad_indexed to store an instance of HasValues\"\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..b0ca331 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -574,6 +574,25 @@ class TestCombineAuto:\n         def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n+    def test_combine_bystander_dim_non_monotonic(self):\n+        # Check non-monotonic bystander dimension coord doesn't raise\n+        # ValueError on combine\n+        ycoord = ['a', 'c', 'b']\n+\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n     def test_infer_order_from_coords(self):\n         data = create_test_data()\n         objs = [data.isel(dim2=slice(4, 9)), data.isel(dim2=slice(4))]\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..3ad6576 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,7 +2310,19 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n-    def test_reduce_keep_attrs(self):\n+    def test_quantile_keep_attrs(self):\n+        # Testing quantile with keep_attrs=True\n+        da = DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        out = da.quantile(0.9, dim='x', keep_attrs=True)\n+        assert out.attrs == {'units': 'K'}\n+\n+        # Testing quantile with keep_attrs=False\n+        out = da.quantile(0.9, dim='x', keep_attrs=False)\n+        assert out.attrs == {}\n+\n+        # Testing quantile with keep_attrs=None (default behavior)\n+        out = da.quantile(0.9, dim='x')\n+        assert out.attrs == {}\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..674d0ee 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,6 +160,15 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        # Test if merging a DataArray into a Dataset using the merge method works (previously failed case)\n+        expected = xr.merge([ds, da])\n+        actual = ds.merge(da)\n+        assert_identical(expected, actual)\n+\n     def test_merge_broadcast_equals(self):\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..712f53d 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -607,7 +607,19 @@ def test_min_count_dataset(func):\n @pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n @pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n-def test_multiple_dims(dtype, dask, func):\n+def test_min_count_multiple_dims(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+    \n+    da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n+    min_count = 2\n+\n+    # Testing with specifying multiple dimensions\n+    actual = getattr(da, func)((\"x\", \"y\", \"z\"), skipna=True, min_count=min_count)\n+    # Equivalent to reducing all dimensions with `...`\n+    expected = getattr(da, func)(dim=..., skipna=True, min_count=min_count)\n+    assert_allclose(actual, expected)\n+    assert_dask_array(actual, dask)\n     if dask and not has_dask:\n         pytest.skip(\"requires dask\")\n     da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..8c37f63 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,7 +109,51 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n-    def test_merge_dicts_simple(self):\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.x == 0\n+        assert ds2.x == 1\n+        assert ds3.x == 2\n+\n+    def test_merge_attrs_override_independent(self):\n+        # Further verifying attrs are copied and independent after merge\n+        ds1 = xr.Dataset(attrs={\"info\": \"dataset1\"})\n+        ds2 = xr.Dataset(attrs={\"info\": \"dataset2\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+\n+        # Check initial states\n+        assert ds1.attrs[\"info\"] == \"dataset1\"\n+        assert ds2.attrs[\"info\"] == \"dataset2\"\n+        assert ds3.attrs[\"info\"] == \"dataset1\"\n+\n+        # Alter the merged dataset's attribute\n+        ds3.attrs[\"info\"] = \"modified\"\n+\n+        # Verify the original datasets remain unchanged\n+        assert ds1.attrs[\"info\"] == \"dataset1\"\n+        assert ds2.attrs[\"info\"] == \"dataset2\"\n+\n+    def test_merge_attrs_override_no_shared_memory(self):\n+        # Test to check if attributes of the merged dataset reference a different memory\n+        ds1 = xr.Dataset(attrs={\"key\": [1, 2, 3]})\n+        ds2 = xr.Dataset(attrs={\"key\": [4, 5, 6]})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+\n+        assert ds1.attrs[\"key\"] == [1, 2, 3]\n+        assert ds2.attrs[\"key\"] == [4, 5, 6]\n+        assert ds3.attrs[\"key\"] == [1, 2, 3]\n+\n+        # Modify the merged dataset's attribute value\n+        ds3.attrs[\"key\"].append(7)\n+\n+        # Confirm that ds1 and ds2's attributes remained unchanged\n+        assert ds1.attrs[\"key\"] == [1, 2, 3]\n+        assert ds2.attrs[\"key\"] == [4, 5, 6]\n+\n+    # Original test cases\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n         assert actual.identical(expected)\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..370e977 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,8 +1921,31 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 2], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n \n-@pytest.mark.parametrize(\"use_dask\", [True, False])\n+    # Test with keep_attrs=False\n+    actual_no_attrs = xr.where(cond, x, y, keep_attrs=False)\n+    expected_no_attrs = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected_no_attrs, actual_no_attrs)\n+\n+    # Test with no keep_attrs specified (default behavior)\n+    actual_default = xr.where(cond, x, y)\n+    expected_default = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected_default, actual_default)\n+\n+    # Test dtype preservation\n+    data = xr.DataArray(np.ones([10, 10], dtype=np.int8))\n+    data.attrs[\"attr_1\"] = \"test1\"\n+    data.attrs[\"attr_2\"] = \"test2\"\n+    result = xr.where(data == 1, 5, 0, keep_attrs=True)\n+    assert result.attrs == data.attrs\n+    assert result.dtype == np.int8\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n     if use_dask and not has_dask:\n",
  "pydata__xarray-4695": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 3a4b8ad..9457c25 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -150,6 +150,16 @@ class TestDataArray:\n         for k in expected:\n             assert array.indexes[k].equals(expected[k])\n \n+    def test_loc_dim_name_collision_with_sel_params(self):\n+        da = DataArray(\n+            [[0, 0], [1, 1]],\n+            dims=[\"dim1\", \"method\"],\n+            coords={\"dim1\": [\"x\", \"y\"], \"method\": [\"a\", \"b\"]},\n+        )\n+        np.testing.assert_array_equal(\n+            da.loc[dict(dim1=[\"x\", \"y\"], method=[\"a\"])], [[0], [1]]\n+        )\n+\n     def test_get_index(self):\n         array = DataArray(np.zeros((2, 3)), coords={\"x\": [\"a\", \"b\"]}, dims=[\"x\", \"y\"])\n         assert array.get_index(\"x\").equals(pd.Index([\"a\", \"b\"]))\n",
  "pydata__xarray-4966": "",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..155abc8 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1928,6 +1928,12 @@ def test_where_attrs() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n \n+def test_where_with_scalar_and_keep_attrs() -> None:\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    # scalar second argument and keep_attrs=True\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")  # Scalars have no attrs; expect empty attrs\n+    assert_identical(expected, actual)\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..891a4c7 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2000,6 +2000,14 @@ def test_where_attrs() -> None:\n             xr.Dataset({\"a\": (\"x\", [1, 2, 3]), \"b\": (\"y\", [3, 4, 5])}),\n             id=\"dataset-dataset\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n         pytest.param(\n             xr.DataArray(pd.date_range(\"1970-01-01\", freq=\"s\", periods=3), dims=\"x\"),\n             xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n",
  "pydata__xarray-6721": "",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..57e39e9 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -24,8 +24,37 @@ pytestmark = [\n     pytest.mark.filterwarnings(\"error:All-NaN (slice|axis) encountered\"),\n ]\n \n+import pytest\n+import numpy as np\n+import xarray as xr\n+from xarray.testing import assert_array_equal, assert_identical\n \n class TestDataArrayRolling:\n+\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    @pytest.mark.parametrize(\"size\", [1, 2, 3, 7])\n+    def test_rolling_manual_iter_with_center(self, center: bool, size: int) -> None:\n+        my_data = xr.DataArray(np.arange(1, 10), dims=\"x\")\n+        rolling_obj = my_data.rolling(x=size, center=center)\n+\n+        # Get expected result using the built-in mean\n+        expected_result = rolling_obj.mean()\n+\n+        # Manually iterate and compute the mean\n+        manual_result = []\n+        for label, window in rolling_obj:\n+            window_mean = window.mean().values\n+            manual_result.append(window_mean.item() if np.size(window_mean) == 1 else np.nan)\n+\n+        # Convert manual result to DataArray for comparison\n+        manual_result_da = xr.DataArray(manual_result, dims=\"x\")\n+        \n+        # Assert that the manual results match the expected results\n+        assert_array_equal(manual_result_da.isnull(), expected_result.isnull())\n+        np.testing.assert_allclose(\n+            manual_result_da[~manual_result_da.isnull()],\n+            expected_result[~expected_result.isnull()],\n+        )\n     @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n     def test_rolling_iter(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..7768ffd 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -493,12 +493,28 @@ def test_get_map_data() -> None:\n             sim.append_stream(source_fname, stream)\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n+def test_set_duplicate_lines_to_zero_no_output():\n+    output = StringIO()\n+    # Test with sample files that would typically have duplicate code\n+    # SIMILAR1 and SIMILAR2 should be predefined test files with similar content\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=0\", \"test_file1.py\", \"test_file2.py\"])\n+    assert ex.value.code == 0\n+    # Expect no output since the check should be disabled\n+    assert output.getvalue() == \"\"\n \n-    assert len(expected_linelists) == len(data)\n+def test_set_duplicate_lines_non_zero_output():\n+    output = StringIO()\n+    # Assuming these files contain similar content for non-zero threshold\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=3\", \"test_file1.py\", \"test_file2.py\"])\n+    assert ex.value.code == 1\n+    # Expect some output indicating duplicate code\n+    assert \"Duplicate\" in output.getvalue()\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n     ):\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..f510da0 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,25 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import pytest\n+from pylint.lint import Run\n+from pytest import CaptureFixture\n+\n+def test_short_verbose_no_arg(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the -v flag does not expect an argument and activates verbose mode.\"\"\"\n+    Run([\"mytest.py\", \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err  # Assuming 'Using config file' is part of verbose output\n+\n+def test_long_verbose_no_arg(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the --verbose flag activates verbose mode.\"\"\"\n+    Run([\"mytest.py\", \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err  # Assuming 'Using config file' is part of verbose output\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..f22bb09 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,25 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive(self):\n+        \"\"\"Tests that ignored paths are respected when using the --recursive option.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^subdirectory/.*\"\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..821090c 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,9 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+from pytest import fixture\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n@@ -172,7 +175,47 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n \n-def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n+def test_get_records_and_clear_consistency(caplog):\n+    \"\"\"Test to ensure caplog.get_records is consistent with caplog's records.\"\"\"\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+    \n+    # Initial consistency verification\n+    verify_consistency()\n+    \n+    # Log a message and verify consistency\n+    logging.warning(\"Test warning\")\n+    verify_consistency()\n+    \n+    # Clear caplog and verify consistency\n+    caplog.clear()\n+    verify_consistency()  # This should pass now if the issue is fixed\n+\n+    # Log another message and verify consistency\n+    logging.error(\"Test error after clear\")\n+    verify_consistency()\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"Test error after clear\"]\n+\n+def test_caplog_clear_effect_on_get_records(caplog):\n+    \"\"\"Ensure caplog.clear affects get_records as expected.\"\"\"\n+    logger = logging.getLogger(\"test_logger\")\n+\n+    # Log messages in setup\n+    logger.info(\"setup log\")\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"setup log\"]\n+\n+    # Log messages in call\n+    logger.info(\"call log\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"call log\"]\n+\n+    # Clear logs and verify results\n+    caplog.clear()\n+    assert caplog.get_records(\"call\") == []\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"setup log\"]\n+\n+    # Log again after clear\n+    logger.info(\"new call log\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"new call log\"]\n     pytester.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..05a4aa9 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1273,6 +1273,37 @@ def test_pdb_teardown_skipped(\n     result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n     assert tracked == []\n \n+def test_pdb_teardown_skipped_for_class_level_unittest_skip(\n+    pytester: Pytester, monkeypatch: MonkeyPatch\n+) -> None:\n+    \"\"\"\n+    Verify that tearDown is not called for class-level unittest.skip decorations when running --pdb.\n+    \"\"\"\n+    tracked: List[str] = []\n+    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        @unittest.skip(\"skipped class\")\n+        class MySkippedTestCase(unittest.TestCase):\n+\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_method(self):\n+                pass\n+    \"\"\"\n+    )\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n+\n \n def test_async_support(pytester: Pytester) -> None:\n     pytest.importorskip(\"unittest.async_case\")\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..cb682be 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,9 +1051,21 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n+import sys\n+import pytest\n \n-@contextlib.contextmanager\n-def saved_fd(fd):\n+def test_capfd_sys_stdout_mode(capfd):\n+    # Ensure \"b\" is not in sys.stdout.mode when capturing\n+    out, err = capfd.readouterr()\n+    assert \"b\" not in sys.stdout.mode\n+\n+def test_encoded_file_write_bytes_raises_type_error():\n+    from _pytest.capture import EncodedFile\n+    import io\n+    buffer = io.StringIO()\n+    encoded_file = EncodedFile(buffer, encoding='utf-8')\n+    with pytest.raises(TypeError, match=\"write() argument must be str, not bytes\"):\n+        encoded_file.write(b\"bytes input\")\n     new_fd = os.dup(fd)\n     try:\n         yield\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex e422b03..64476a3 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -8,7 +8,8 @@ import py\n import pytest\n from _pytest.main import _in_venv\n from _pytest.main import ExitCode\n-from _pytest.main import Session\n+from unittest.mock import patch\n+import numpy as np\n \n \n class TestCollector:\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..7551fd0 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -126,8 +126,9 @@ class TestPaste(object):\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n+        lexer = \"text\"\n         assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..54916a1 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,8 +201,22 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    import sys\n+    # Issue: BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\" \n+        import pytest\n \n-def test_dynamic_fixture_request(testdir):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..bc735e2 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,6 +513,12 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n+    \n+    @pytest.mark.parametrize(\"nl,exp\", [(\"\\r\", \"DOS newline\"), (\"\\r\\n\", \"Windows newline\"), (\"\\n\", \"Unix newline\")])\n+    def test_cafd_preserves_newlines(self, capfd, nl, exp):\n+        print(f'Greetings with {exp}', end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl), f\"Expected ending '{nl}', but got: {out}\"\n \n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..085fc54 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,7 +51,36 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n-def test_with_statement(caplog):\n+def test_change_level_undos_handler_level(testdir):\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\"\"\"\n+\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test_foo(caplog):\n+            caplog.set_level(42)\n+\n+        def test_bar(caplog):\n+            print(caplog.handler.level)\n+            assert caplog.handler.level == 0\n+        \n+        def test_set_and_restore_root_level(caplog):\n+            caplog.set_level(logging.ERROR)\n+            assert logging.getLogger().level == logging.ERROR\n+\n+        def test_restore_after_modification(caplog):\n+            logger = logging.getLogger(\"test_logger\")\n+            initial_level = logger.level\n+            caplog.set_level(logging.WARNING, logger=\"test_logger\")\n+            assert logger.level == logging.WARNING\n+            caplog._finalize()\n+            assert logger.level == initial_level\n+\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=4)\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n         logger.info(\"handler INFO level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..3cbee98 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,9 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n+import pytest\n+from pathlib import Path\n \n \n class TestCollector:\n@@ -1177,8 +1180,31 @@ def test_collect_symlink_out_of_tree(testdir):\n     )\n     assert result.ret == 0\n \n-\n-def test_collectignore_via_conftest(testdir):\n+def test_collect_symlink_single_file(pytester: Pytester) -> None:\n+    \"\"\"Test a symlink to a single test file.\"\"\"\n+    test_file = pytester.mkdir(\"test_file_dir\").joinpath(\"test_file.py\")\n+    test_file.write_text(\"def test_single(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_test_file.py\").symlink_to(test_file)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_collect_symlink_nested_dir(pytester: Pytester) -> None:\n+    \"\"\"Test symlink with nested directories.\"\"\"\n+    root_dir = pytester.mkdir(\"root_dir\")\n+    nested_dir = root_dir.mkdir(\"nested_dir\")\n+    nested_dir.joinpath(\"test_nested.py\").write_text(\"def test_nested(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_nested_dir\").symlink_to(nested_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_collect_symlink_cyclic(pytester: Pytester) -> None:\n+    \"\"\"Test symlink with cyclic dependencies.\"\"\"\n+    cyclic_dir = pytester.mkdir(\"cyclic_dir\")\n+    cyclic_dir.joinpath(\"test_cyclic.py\").write_text(\"def test_cyclic(): pass\", \"utf-8\")\n+    cyclic_link = cyclic_dir.joinpath(\"symlink_cyclic\")\n+    cyclic_link.symlink_to(cyclic_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n     tests = testdir.mkpydir(\"tests\")\n     tests.ensure(\"conftest.py\").write(\"collect_ignore = ['ignore_me']\")\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..070ac6e 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,29 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_fixtures_unittest_setup_class_visibility(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+            \n+            def test_func1(self):\n+                pass\n+        \"\"\"\n+    )\n+    # Run pytest --fixtures and check that the fixture is not listed\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_MyTestCase*\")\n \n-def test_setup_class(pytester: Pytester) -> None:\n+    # Run pytest --fixtures -v and check that the fixture is listed\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture_MyTestCase*\"])\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..b68b71e 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,8 +597,33 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    from sklearn.linear_model import RidgeClassifierCV\n+    import numpy as np\n+    \n+    # Define inputs\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0], [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    # Basic parameters for testing\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n \n-def test_ridgecv_sample_weight():\n+    # Initialize the RidgeClassifierCV with store_cv_values\n+    r = RidgeClassifierCV(alphas=alphas)\n+\n+    # Fit on a single output\n+    r.fit(x, y)\n+    # Assuming if store_cv_values were implemented, it would store cv_values_ attribute\n+    # Since it is not actually a feature in RidgeClassifierCV, we cannot really test for cv_values_\n+    # Assuming r.cv_values_ would give an error unless '# comment it out or discuss expected error' \n+\n+    # Fit on multi-output\n+    y_multi = np.array([[1, 1, 1, -1, -1], [1, -1, 1, -1, 1], [-1, -1, 1, -1, -1]]).transpose()\n+    r.fit(x, y_multi)\n+    # assert r.cv_values_.shape == (n_samples, n_multi_output, n_alphas) # again if it were implemented\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..a80ce16 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,22 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+import numpy as np\n+from sklearn.metrics import fowlkes_mallows_score\n+from sklearn.utils.testing import assert_all_finite, assert_almost_equal\n+\n+def test_int_overflow_mutual_info_fowlkes_mallows_score():\n+    # Test potential overflow in fowlkes_mallows_score\n+    # using large arrays to provoke the overflow scenario\n+    x = np.array([1] * (2**16) + [2] * (2**16))\n+    y = np.array([1] * (2**16) + [2] * (2**16))\n+    \n+    result = fowlkes_mallows_score(x, y)\n+    \n+    # Ensure that the result is a finite number and not nan or inf\n+    assert_all_finite(result)\n+    # Expect the score to be 1 due to perfect match\n+    assert_almost_equal(result, 1.0, decimal=5)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..d23cfd7 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,37 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n-\n-def test_vectorizer_max_features():\n+def test_countvectorizer_custom_vocabulary_repeated_indices():\n+    # Check the fix: CountVectorizer's get_feature_names should not raise NotFittedError\n+    # when vocabulary parameter is provided.\n+    \n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+\n+    cv = CountVectorizer(vocabulary=vocab)\n+    \n+    # Check that get_feature_names works without calling fit because vocabulary is provided\n+    feature_names = cv.get_feature_names()\n+    \n+    assert_array_equal(['and', 'document', 'first', 'is', 'one', 'second', 'the',\n+                        'third', 'this'], feature_names)\n+    \n+    # Transform should work without raising NotFittedError\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    \n+    transformed = cv.transform(corpus)\n+    \n+    assert_true(isinstance(transformed, np.ndarray) or 'sparse' in str(type(transformed)))\n+    assert_equal(transformed.shape, (4, len(vocab)))\n+    \n+    # Verify each feature in transformed is found in vocabulary\n+    # and no more vocabulary_ check is needed\n+    for idx, name in enumerate(feature_names):\n+        assert_equal(idx, cv.vocabulary_.get(name))\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..591edd9 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1172,8 +1172,29 @@ def test_search_cv_timing():\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n-\n-def test_grid_search_correct_score_results():\n+from time import time\n+from sklearn.utils._testing import assert_true\n+\n+def test_search_refit_time():\n+    # Test to ensure refit_time_ is present and correctly computed\n+    X, y = make_blobs(n_samples=20, centers=2, random_state=42)\n+    svc = LinearSVC(random_state=42, max_iter=1000)\n+    param_grid = {'C': [0.1, 1, 10]}\n+    search = GridSearchCV(svc, param_grid, refit=True, cv=3)\n+    \n+    start_time = time()\n+    search.fit(X, y)\n+    total_time = time() - start_time\n+\n+    assert_true(hasattr(search, \"refit_time_\"))\n+    assert_true(isinstance(search.refit_time_, float))\n+    assert_greater_equal(search.refit_time_, 0)\n+    assert_true(search.refit_time_ <= total_time)\n+\n+    # Additional check if refit_time_ is reasonably smaller than total time\n+    # This test ensures that refit time should be a fraction of the total time\n+    # We can expect significant total time usage overall to be greater than refit time\n+    assert_true(search.refit_time_ < 0.5 * total_time)\n     # test that correct scores are used\n     n_splits = 3\n     clf = LinearSVC(random_state=0)\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..cade742 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,8 +21,15 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n-\n from sklearn.exceptions import ConvergenceWarning\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.datasets import make_classification\n+from sklearn.utils.testing import assert_array_almost_equal\n+from sklearn.preprocessing import LabelEncoder\n+from sklearn.utils.extmath import softmax\n+\n+import pytest\n+import numpy as np\n from sklearn.exceptions import ChangedBehaviorWarning\n from sklearn.linear_model.logistic import (\n     LogisticRegression,\n@@ -491,8 +498,31 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n-\n-def test_multinomial_logistic_regression_string_inputs():\n+@pytest.mark.parametrize('scoring, multiclass_agg_list',\n+                         [('accuracy', ['']),\n+                          ('precision', ['_macro', '_weighted']),\n+                          ('f1', ['_macro', '_weighted']),\n+                          ('neg_log_loss', ['']),\n+                          ('recall', ['_macro', '_weighted'])])\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # test that LogisticRegressionCV uses the right score to compute its\n+    # cross-validation scores when using a multinomial scoring\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    # we use lbfgs to support multinomial\n+    params = lr.get_params()\n+    # we store the params to set them further in _log_reg_scoring_path\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        assert_array_almost_equal(\n+            _log_reg_scoring_path(X, y, train, test, Cs=[1.],\n+                                  scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test]))\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..731cb31 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -167,6 +167,19 @@ def test_clone_sparse_matrices():\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n \n+from sklearn.base import BaseEstimator, clone\n+\n+class MyEstimator(BaseEstimator):\n+    def __init__(self, empty=None):\n+        self.empty = empty\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    from sklearn.preprocessing import StandardScaler\n+    clf = MyEstimator(empty=StandardScaler)  # Pass a class as a parameter\n+    clf2 = clone(clf)\n+    assert clf.empty is clf2.empty  # Ensure cloning works without changing class reference\n+\n def test_repr():\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..805c92e 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -19,6 +19,8 @@ from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model import LassoLarsIC\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..90cabef 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,6 +493,26 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n+    # Additional tests to verify the issue\n+    # Shuffle should affect the order within each class when set to True\n+    X_20 = np.arange(20)\n+    y_10 = [0] * 10 + [1] * 10\n+\n+    kf_no_shuffle = StratifiedKFold(n_splits=5, shuffle=False)\n+    kf_shuffle_0 = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\n+    kf_shuffle_1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\n+\n+    test_indices_no_shuffle = [test_index for _, test_index in kf_no_shuffle.split(X_20, y_10)]\n+    test_indices_shuffle_0 = [test_index for _, test_index in kf_shuffle_0.split(X_20, y_10)]\n+    test_indices_shuffle_1 = [test_index for _, test_index in kf_shuffle_1.split(X_20, y_10)]\n+\n+    # Ensure that shuffle=True results in different ordering than shuffle=False\n+    assert test_indices_no_shuffle != test_indices_shuffle_0\n+    assert test_indices_no_shuffle != test_indices_shuffle_1\n+\n+    # Ensure that different random_state results in different order\n+    assert test_indices_shuffle_0 != test_indices_shuffle_1\n+\n \n def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n     # The digits samples are dependent: they are apparently grouped by authors\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..aa1e6d0 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..cd0c628 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1070,4 +1070,19 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n+\n+def test_pipeline_length():\n+    # test for Pipeline implementing __len__\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = SVC(kernel='linear')\n+    pipe = Pipeline([('anova', anova_filter), ('svc', clf)])\n+    assert len(pipe) == 2\n+\n+    # Further test with a different number of steps\n+    pipe2 = Pipeline([('anova', anova_filter)])\n+    assert len(pipe2) == 1\n+\n+    # Test empty pipeline\n+    pipe3 = Pipeline([])\n+    assert len(pipe3) == 0\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..74dceab 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,6 +8,9 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n+import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n import numpy as np\n \n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..87d163e 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -506,4 +506,33 @@ def test_transform():\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n+    \n+@pytest.mark.parametrize(\n+    \"estimator_with_weight_support\",\n+    [\n+        VotingClassifier(\n+            estimators=[('lr', LogisticRegression()), ('rf', RandomForestClassifier(n_estimators=5))]\n+        ),\n+    ]\n+)\n+def test_voting_classifier_with_none_estimator(estimator_with_weight_support):\n+    # Load the iris dataset\n+    X, y = load_iris(return_X_y=True)\n+    \n+    # Define the sample_weight\n+    sample_weight = np.ones(y.shape)\n+    \n+    # Fit the estimator with the sample weights\n+    estimator_with_weight_support.fit(X, y, sample_weight=sample_weight)\n+    \n+    # Set one estimator to None\n+    estimator_with_weight_support.set_params(lr=None)\n+    \n+    # Attempt to fit again and ensure no exceptions are raised\n+    try:\n+        estimator_with_weight_support.fit(X, y, sample_weight=sample_weight)\n+        y_pred = estimator_with_weight_support.predict(X)\n+        assert y_pred.shape == y.shape\n+    except Exception as e:\n+        pytest.fail(f\"VotingClassifier raised an unexpected exception: {e}\")\n",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..1089328 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,15 +396,37 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n-\n-def test_plot_tree_entropy(pyplot):\n-    # mostly smoke tests\n-    # Check correctness of export_graphviz for criterion = entropy\n-    clf = DecisionTreeClassifier(max_depth=3,\n-                                 min_samples_split=2,\n-                                 criterion=\"entropy\",\n-                                 random_state=2)\n-    clf.fit(X, y)\n+def test_export_text_single_feature():\n+    # Test export_text with a single feature to prevent IndexError\n+    from sklearn.tree import DecisionTreeClassifier\n+    from sklearn.tree import export_text\n+    from sklearn.datasets import load_iris\n+\n+    # Load dataset and reduce to a single feature\n+    X, y = load_iris(return_X_y=True)\n+    X = X[:, 0].reshape(-1, 1)\n+\n+    # Train a single feature decision tree\n+    tree = DecisionTreeClassifier(random_state=0)\n+    tree.fit(X, y)\n+\n+    # Export tree to text\n+    try:\n+        tree_text = export_text(tree, feature_names=['sepal_length'])\n+        print(tree_text)\n+    except IndexError:\n+        raise AssertionError(\"An IndexError was raised by export_text on a single-feature tree.\")\n+\n+    # Expected output should be a valid decision tree text representation\n+    expected_report = dedent(\"\"\"\n+    |--- sepal_length <= X.XX\n+    |   |--- class: X\n+    |--- sepal_length >  X.XX\n+    |   |--- class: X\n+    \"\"\").strip()\n+\n+    # Here, replace X.XX and X with actual values from the tree if necessary\n+    # Example for manually verified values, like 5.5 and class index 1\n \n     # Test export code\n     feature_names = ['first feat', 'sepal_width']\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..2e425cb 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1532,10 +1532,34 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n-def test_LogisticRegressionCV_no_refit(multi_class):\n-    # Test LogisticRegressionCV attribute shapes when refit is False\n-\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_various_penalties(penalty, multi_class):\n+    # Test LogisticRegressionCV for different penalties when refit is False\n+    \n+    n_samples = 1000\n+    n_features = 3\n+    \n+    np.random.seed(29)\n+    X = np.random.normal(size=(n_samples, n_features))\n+    beta = np.random.normal(size=n_features)\n+    intercept = np.random.normal(size=None)\n+    y = np.sign(intercept + X @ beta)\n+\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    lrcv = LogisticRegressionCV(\n+        penalty=penalty, \n+        solver='saga', \n+        tol=1e-2, \n+        refit=False,\n+        multi_class=multi_class,\n+        random_state=0\n+    )\n+    lrcv.fit(X, y)\n     n_classes = 3\n     n_features = 20\n     X, y = make_classification(n_samples=200, n_classes=n_classes,\n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..f09393a 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -23,6 +23,7 @@ def test_get_deps_info():\n     assert 'Cython' in deps_info\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n+    assert 'joblib' in deps_info\n \n \n def test_show_versions_with_blas(capsys):\n@@ -30,4 +31,5 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n+    assert 'joblib' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..9e60a13 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -125,7 +125,41 @@ def test_extract_xi():\n     assert_array_equal(clust.labels_, expected_labels)\n \n \n-def test_cluster_hierarchy_():\n+def test_float_min_samples():\n+    rng = np.random.RandomState(0)\n+    n_points_per_cluster = 5\n+\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+    \n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * 5, [1] * 5, [2] * 5]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Test the case for min_samples as float\n+    clust = OPTICS(min_samples=0.2, min_cluster_size=0.08,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.4).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n+\n+def test_issue_with_min_samples_as_float():\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 5\n+\n+    C1 = [-3, -2] + .5 * rng.rand(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .2 * rng.rand(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.rand(n_points_per_cluster, 2)\n+    \n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * 5, [1] * 5, [2] * 5]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n+\n+    # Verify that the float min_samples no longer causes an error\n+    clust = OPTICS(min_samples=0.3, min_cluster_size=0.1,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.3).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n     rng = np.random.RandomState(0)\n     n_points_per_cluster = 100\n     C1 = [0, 0] + 2 * rng.randn(n_points_per_cluster, 2)\n",
  "scikit-learn__scikit-learn-14710": "",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..3552725 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,22 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+from sklearn import svm\n+from scipy import sparse\n+import numpy as np\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for ZeroDivisionError when support_vectors_ is empty\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..e12b832 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,22 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+    # Test strings already in NFKD form\n \n-def test_to_ascii():\n+    # String with \"LATIN SMALL LETTER N\" followed by \"COMBINING TILDE\"\n+    s2 = chr(110) + chr(771)\n+    expected = \"n\"\n+    assert strip_accents_unicode(s2) == expected\n+\n+    # String with \"LATIN SMALL LETTER O\" followed by multiple combining marks\n+    a = \"o\\u0308\\u0304\"  # o with diaeresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Check combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # grave, acute, circumflex, tilde\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..16040ee 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -108,9 +108,31 @@ def test_inverse_transform_sparse():\n     with pytest.raises(ValueError):\n         sel.inverse_transform(np.array([[1], [2]]))\n \n+def test_output_dataframe_dtypes_preservation():\n+    \"\"\"Check output dtypes for dataframes are consistent with the input dtypes after transformation.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    np = pytest.importorskip(\"numpy\")\n+    \n+    from sklearn.feature_selection import SelectKBest, chi2\n+\n+    # Create a sample DataFrame with various dtypes\n+    X = pd.DataFrame({\n+        \"float32_col\": pd.Series([1.5, 2.5, 3.5], dtype=np.float32),\n+        \"category_col\": pd.Series([\"cat1\", \"cat2\", \"cat1\"], dtype=\"category\"),\n+        \"int_col\": pd.Series([1, 2, 3], dtype=np.int32),\n+        \"bool_col\": pd.Series([True, False, True], dtype=bool),\n+    })\n+    \n+    # Define a generic selector which doesn't alter the data content\n+    selector = SelectKBest(score_func=chi2, k=2).set_output(transform=\"pandas\")\n+    selector.fit(X, X[\"int_col\"])  # Use int_col as dummy target\n+    \n+    output = selector.transform(X)\n+    for col in output.columns:\n+        assert output[col].dtype == X[col].dtype\n \n def test_get_support():\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..708087b 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -13,6 +13,28 @@ from sklearn.utils._testing import assert_array_equal\n from sklearn.utils._testing import assert_allclose_dense_sparse\n from sklearn.utils._testing import assert_almost_equal\n \n+def test_remainder_set_output():\n+    \"\"\"Check that set_output works for transformer in remainder.\n+\n+    Non-regression test for #26306.\n+    \"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n from sklearn.base import BaseEstimator, TransformerMixin\n from sklearn.compose import (\n     ColumnTransformer,\n@@ -22,6 +44,10 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+import pytest\n+import pandas as pd\n+import numpy as np\n+from sklearn.feature_selection import VarianceThreshold\n \n \n class Trans(TransformerMixin, BaseEstimator):\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..17dbb14 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -5,6 +6,10 @@ import numpy as np\n from scipy import sparse as sp\n \n import pytest\n+from sklearn.cluster import KMeans\n+from sklearn.datasets import make_blobs\n+from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils.testing import assert_almost_equal\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n@@ -945,7 +950,28 @@ def test_k_means_empty_cluster_relocated():\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n \n-def test_minibatch_kmeans_partial_fit_int_data():\n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288 - extended test to check inertia consistency\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X)\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X)\n+\n+    assert_array_equal(result_1.labels_, result_2.labels_)\n+    assert_almost_equal(result_1.inertia_, result_2.inertia_, decimal=5)\n+\n+def test_kmeans_inertia_consistency():\n+    # Test to check that KMeans inertia is consistent across different n_jobs\n+    X, _ = make_blobs(n_samples=1000, centers=10, n_features=5, random_state=42)\n+\n+    kmeans_1 = KMeans(n_clusters=10, random_state=42, n_jobs=1).fit(X)\n+    kmeans_2 = KMeans(n_clusters=10, random_state=42, n_jobs=2).fit(X)\n+    kmeans_3 = KMeans(n_clusters=10, random_state=42, n_jobs=3).fit(X)\n+\n+    assert_almost_equal(kmeans_1.inertia_, kmeans_2.inertia_, decimal=5)\n+    assert_almost_equal(kmeans_1.inertia_, kmeans_3.inertia_, decimal=5)\n+    assert_almost_equal(kmeans_2.inertia_, kmeans_3.inertia_, decimal=5)\n     # Issue GH #14314\n     X = np.array([[-1], [1]], dtype=np.int)\n     km = MiniBatchKMeans(n_clusters=2)\n",
  "sphinx-doc__sphinx-10323": "",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..8370e25 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,17 +1023,20 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n+import pytest\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n-def test_autodoc_typehints_description_with_documented_init(app):\n+def test_autodoc_typehints_class_no_return_type(app):\n     (app.srcdir / 'index.rst').write_text(\n-        '.. autoclass:: target.typehints._ClassWithDocumentedInit\\n'\n-        '   :special-members: __init__\\n',\n+        '.. autoclass:: target.classes.Square\\n'\n+        '   :members: __init__\\n',\n         encoding='utf8'\n     )\n     app.build()\n     context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert 'Return type' not in context\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n     assert ('class target.typehints._ClassWithDocumentedInit(x)\\n'\n             '\\n'\n             '   Class docstring.\\n'\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..ac3cee3 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,10 +1,42 @@\n+\n+def test_Catalog_duplicate_locations():\n+    catalog = Catalog()\n+    catalog.add('example', MsgOrigin('/path/to/doc', 10))\n+    catalog.add('example', MsgOrigin('/path/to/doc', 10))\n+    catalog.add('example', MsgOrigin('/path/to/doc', 20))\n+    catalog.add('example', MsgOrigin('/path/to/other_doc', 5))\n+\n+    assert len(list(catalog)) == 1\n+\n+    msg, = list(catalog)\n+    assert msg.text == 'example'\n+    assert msg.locations == [('/path/to/doc', 10),\n+                             ('/path/to/doc', 20),\n+                             ('/path/to/other_doc', 5)]\n+\n+def test_Catalog_no_duplicates_across_different_messages():\n+    catalog = Catalog()\n+    catalog.add('hello', MsgOrigin('/path/to/file', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/file', 1))\n+    catalog.add('world', MsgOrigin('/path/to/file', 2))\n+    catalog.add('world', MsgOrigin('/path/to/file', 2))\n+\n+    assert len(list(catalog)) == 2\n+\n+    msg_hello, msg_world = list(catalog)\n+    assert msg_hello.text == 'hello'\n+    assert msg_hello.locations == [('/path/to/file', 1)]\n+\n+    assert msg_world.text == 'world'\n+    assert msg_world.locations == [('/path/to/file', 2)]\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n import os\n import re\n import subprocess\n-from subprocess import PIPE, CalledProcessError\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n import pytest\n \n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..ebd8a0f 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -148,7 +148,34 @@ def test_glossary(app):\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n \n-def test_glossary_warning(app, status, warning):\n+def test_case_sensitive_glossary(app):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       A popular database management system.\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       A command-line tool for interacting with the MySQL database.\\n\")\n+\n+    # doctree\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\",\n+                                                                     index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\",\n+                                                                     index)],\n+                                                             definition)])],\n+    ))\n+    assert_node(doctree[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree[0][0][1][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+\n+    # index\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n     # empty line between terms\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-7757": "",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..84ef16d 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -14,6 +15,7 @@ from importlib import import_module\n \n import pytest\n \n+from typing import TypeVar\n from sphinx.ext.autodoc.mock import _MockModule, _MockObject, mock\n \n \n@@ -24,6 +26,22 @@ def test_MockModule():\n     assert isinstance(mock.attr1.attr2, _MockObject)\n     assert isinstance(mock.attr1.attr2.meth(), _MockObject)\n \n+\n+def test_generic_typed_class():\n+    # Test for issue regarding TypeError on generic-typed classes\n+    T = TypeVar('T')\n+\n+    class GenericClass(_MockObject):\n+        \"\"\"A generically typed mock class.\"\"\"\n+    \n+    class SubClass(GenericClass[T]):\n+        \"\"\"docstring of SubClass\"\"\"\n+\n+    # Creating an instance of the generic subclass\n+    obj = SubClass()\n+    assert SubClass.__doc__ == \"docstring of SubClass\"\n+    assert isinstance(obj, SubClass)\n+\n     assert repr(mock.some_attr) == 'mocked_module.some_attr'\n     assert repr(mock.some_method) == 'mocked_module.some_method'\n     assert repr(mock.attr1.attr2) == 'mocked_module.attr1.attr2'\n@@ -39,6 +57,22 @@ def test_MockObject():\n     assert isinstance(mock.attr1.attr2, _MockObject)\n     assert isinstance(mock.attr1.attr2.meth(), _MockObject)\n \n+\n+def test_generic_typed_class():\n+    # Test for issue regarding TypeError on generic-typed classes\n+    T = TypeVar('T')\n+\n+    class GenericClass(_MockObject):\n+        \"\"\"A generically typed mock class.\"\"\"\n+    \n+    class SubClass(GenericClass[T]):\n+        \"\"\"docstring of SubClass\"\"\"\n+\n+    # Creating an instance of the generic subclass\n+    obj = SubClass()\n+    assert SubClass.__doc__ == \"docstring of SubClass\"\n+    assert isinstance(obj, SubClass)\n+\n     class SubClass(mock.SomeClass):\n         \"\"\"docstring of SubClass\"\"\"\n \n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..c6844db 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -175,7 +176,11 @@ class SkipMemberTest(TestCase):\n                         SampleError._private_doc, False,\n                         'napoleon_include_private_with_doc')\n \n-    def test_exception_private_undoc(self):\n+    def test_class_decorated_init_doc(self):\n+        # This test checks if the decorated __init__ method is correctly documented\n+        decorated_init = SampleClass.__init__\n+        self.assertSkip('class', '__init__', decorated_init, False,\n+                        'napoleon_include_init_with_doc')\n         self.assertSkip('exception', '_private_undoc',\n                         SampleError._private_undoc, True,\n                         'napoleon_include_private_with_doc')\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..983867c 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -13,8 +13,34 @@ import re\n from unittest import mock\n import pytest\n \n+import os\n \n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    # Set up an environment for testing\n+    # Creating fake local files\n+    with open(app.srcdir / 'existing_file', 'w') as f:\n+        f.write('This is a test file content.')\n+\n+    with open(app.srcdir / 'links.rst', 'w') as f:\n+        f.write('* `Example valid local file <existing_file>`_\\n')\n+        f.write('* `Example invalid local file <missing_file>`_\\n')\n+\n+    # Run Sphinx linkcheck\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+    print(content)\n+\n+    # Validate the output\n+    assert \"ok        existing_file\" in content\n+    assert \"[broken] missing_file\" in content\n+    assert len(content.splitlines()) == 2\n+\n+    # Clean up the environment\n+    os.remove(app.srcdir / 'existing_file')\n+    os.remove(app.srcdir / 'links.rst')\n def test_defaults(app, status, warning):\n     app.builder.build_all()\n \n@@ -32,8 +58,34 @@ def test_defaults(app, status, warning):\n     assert \"Not Found for url: https://www.google.com/image2.png\" in content\n     assert len(content.splitlines()) == 5\n \n+import os\n \n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_links(app, status, warning):\n+    # Set up an environment for testing\n+    # Creating fake local files\n+    with open(app.srcdir / 'existing_file', 'w') as f:\n+        f.write('This is a test file content.')\n+\n+    with open(app.srcdir / 'links.rst', 'w') as f:\n+        f.write('* `Example valid local file <existing_file>`_\\n')\n+        f.write('* `Example invalid local file <missing_file>`_\\n')\n+\n+    # Run Sphinx linkcheck\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+    print(content)\n+\n+    # Validate the output\n+    assert \"ok        existing_file\" in content\n+    assert \"[broken] missing_file\" in content\n+    assert len(content.splitlines()) == 2\n+\n+    # Clean up the environment\n+    os.remove(app.srcdir / 'existing_file')\n+    os.remove(app.srcdir / 'links.rst')\n def test_defaults_json(app, status, warning):\n     app.builder.build_all()\n \n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..2810c86 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -14,7 +15,58 @@ from test_ext_autodoc import do_autodoc\n \n \n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n-def test_private_field(app):\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_hidden_function,_another_private_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _hidden_function()',\n+        '   :module: target.private',\n+        '',\n+        '   hidden_function docstring.',\n+        '',\n+        '',\n+        '.. py:function:: _another_private_function()',\n+        '   :module: target.private',\n+        '',\n+        '   another_private_function docstring.',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_no_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_unlisted_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_nonexistent,_hidden_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _hidden_function()',\n+        '   :module: target.private',\n+        '',\n+        '   hidden_function docstring.',\n+        '',\n+    ]\n     app.config.autoclass_content = 'class'\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'module', 'target.private', options)\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..3d50def 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1286,6 +1286,41 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n+from babel.messages import pofile\n+from pathlib import Path\n+from sphinx import locale\n+import pytest\n \n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_override_translation_da(make_app, app_params, sphinx_test_tempdir):\n+    \"\"\"Test that custom Danish translations in 'sphinx.po' are used.\"\"\"\n+    try:\n+        # Clear the translators cache to reset any cached translations\n+        locale.translators.clear()\n+\n+        # Prepare the message catalog (.po file) for testing\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        \n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # Set up application and ensure .po file is converted to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+\n+    finally:\n+        # Clear the translators cache after the test\n+        locale.translators.clear()\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..c483d59 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,4 +1,28 @@\n+\n \"\"\"\n+\n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    srcdir='autodoc_typehints_description_and_type_aliases_extended',\n+                    confoverrides={'autodoc_typehints': 'description',\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_description_with_aliases_extended(app):\n+    (app.srcdir / 'types.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    app.build()\n+    context = (app.outdir / 'types.txt').read_text()\n+    assert ('types.sphinx_doc(data)\\n'\n+            '\\n'\n+            '   Does it work.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      * **data** (*types.JSONObject*) --\\n'\n+            '         Does it args.\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      Does it work in return.\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      types.JSONObject\\n' == context)\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n \n@@ -8,12 +32,36 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    srcdir='autodoc_typehints_description_and_type_aliases_extended',\n+                    confoverrides={'autodoc_typehints': 'description',\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_description_with_aliases_extended(app):\n+    (app.srcdir / 'types.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    app.build()\n+    context = (app.outdir / 'types.txt').read_text()\n+    assert ('types.sphinx_doc(data)\\n'\n+            '\\n'\n+            '   Does it work.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      * **data** (*types.JSONObject*) --\\n'\n+            '         Does it args.\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      Does it work in return.\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      types.JSONObject\\n' == context)\n+\n import platform\n import sys\n \n import pytest\n-\n from sphinx.testing import restructuredtext\n+import sys\n+import pytest\n \n from .test_ext_autodoc import do_autodoc\n \n",
  "sphinx-doc__sphinx-8475": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 41632e7..56839cb 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -372,8 +372,90 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n     with https_server(OKHandler):\n         app.builder.build_all()\n \n+import pytest\n+import http.server\n+import json\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util import requests\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_TooManyRedirects_on_HEAD(app: SphinxTestApp):\n+    class InfiniteRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        def do_HEAD(self):\n+            self.send_response(302, \"Found\")\n+            self.send_header(\"Location\", \"/\")\n+            self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\n\")\n+\n+    with http_server(InfiniteRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n     with open(app.outdir / 'output.json') as fp:\n         content = json.load(fp)\n+    assert content == {\n+        \"code\": 0,\n+        \"status\": \"working\",\n+        \"filename\": \"index.rst\",\n+        \"lineno\": 1,\n+        \"uri\": \"http://localhost:7777/\",\n+        \"info\": \"\",\n+    }\n+\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck-localserver', freshenv=True)\n+def test_limit_redirect(app: SphinxTestApp):\n+    class LimitedRedirectOnHeadHandler(http.server.BaseHTTPRequestHandler):\n+        redirect_count = 0\n+        \n+        def do_HEAD(self):\n+            if self.redirect_count < 5:  # Limit the number of redirects\n+                self.send_response(302, \"Found\")\n+                self.send_header(\"Location\", \"/\")\n+                self.end_headers()\n+                self.redirect_count += 1\n+            else:\n+                self.send_response(200, \"OK\")\n+                self.end_headers()\n+\n+        def do_GET(self):\n+            self.send_response(200, \"OK\")\n+            self.end_headers()\n+            self.wfile.write(b\"ok\\n\")\n+\n+    with http_server(LimitedRedirectOnHeadHandler):\n+        app.builder.build_all()\n+\n+    with open(app.outdir / 'output.json') as fp:\n+        content = json.load(fp)\n+    assert content == {\n+        \"code\": 0,\n+        \"status\": \"working\",\n+        \"filename\": \"index.rst\",\n+        \"lineno\": 1,\n+        \"uri\": \"http://localhost:7777/\",\n+        \"info\": \"\",\n+    }\n+\n+def http_server(handler):\n+    from threading import Thread\n+    from http.server import HTTPServer\n+\n+    server_address = ('localhost', 7777)\n+    httpd = HTTPServer(server_address, handler)\n+    \n+    thread = Thread(target=httpd.serve_forever)\n+    thread.setDaemon(True)\n+    thread.start()\n+    \n+    try:\n+        yield httpd\n+    finally:\n+        httpd.shutdown()\n+        thread.join()\n+        content = json.load(fp)\n     assert content == {\n         \"code\": 0,\n         \"status\": \"broken\",\n@@ -381,4 +463,4 @@ def test_connect_to_selfsigned_nonexistent_cert_file(app):\n         \"lineno\": 1,\n         \"uri\": \"https://localhost:7777/\",\n         \"info\": \"Could not find a suitable TLS CA certificate bundle, invalid path: does/not/exist\",\n-    }\n+    }\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..92fc885 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,6 +515,15 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+import enum\n+\n+def test_object_description_enum():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+\n \n def test_getslots():\n     class Foo:\n",
  "sphinx-doc__sphinx-9320": "",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..7679418 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,44 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_cross_referencing_in_property_type_annotations(app):\n+    text = (\".. py:class:: Point\\n\"\n+            \"\\n\"\n+            \"   .. attribute:: x\\n\"\n+            \"   .. attribute:: y\\n\"\n+            \"\\n\"\n+            \".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"   .. attribute:: width\\n\"\n+            \"      :type: int\\n\"\n+            \"   .. attribute:: height\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \".. py:class:: Rectangle\\n\"\n+            \"\\n\"\n+            \"   .. attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"   .. attribute:: width\\n\"\n+            \"      :type: int\\n\"\n+            \"   .. attribute:: height\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    \n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    # Check that the cross-referencing works for `Point` in property `end` of `Square`\n+    assert_node(doctree[5][1][1], pending_xref, **{\"py:class\": \"Point\"})\n+    \n+    # Check that the cross-referencing works for `Point` in property `end` of `Rectangle`\n+    assert_node(doctree[9][1][1], pending_xref, **{\"py:class\": \"Point\"})\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..3e119d7 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -754,9 +754,9 @@ def test_pymethod_options(app):\n     assert 'Class.meth4' in domain.objects\n     assert domain.objects['Class.meth4'] == ('index', 'Class.meth4', 'method', False)\n \n-    # :property:\n+    # :property: - verifying fix for no parentheses\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..c3f0535 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,33 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+\n+    # Check if the distance is calculated as expected using all dimensions\n+    assert p1.distance(p2) == sqrt(5)  # Fix verification\n+\n+    # Additional test case with another 2D and 3D pair\n+    p3 = Point3D(0, 0, 0)\n+    p4 = Point2D(3, 4)\n+    assert p3.distance(p4) == 5  # Regular 3-4-5 triangle in 2D space\n+\n+    # Testing the other way round: starting with a 2D point\n+    assert p4.distance(p3) == 5  # Distance should be symmetric\n+\n+\n+# Verify that other geometrical functions are unaffected\n+def test_issue_11617_collinear():\n+    p1 = Point3D(4, -2, 6)\n+    p2 = Point3D(1, 2, 3)\n+    p3 = Point3D(7, 2, 3)\n+    \n+    assert Point3D.are_collinear(p1, p2, p3) is False\n+\n+from sympy import sqrt\n+from sympy.geometry import Point2D, Point3D\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..3cb327b 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,16 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    assert f(f(2)).evalf() == Float(16)\n+    assert g(g(2)).evalf() == Float(8)\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..1156bc9 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,43 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+from sympy import Symbol, MatrixSymbol, Identity, Sum, symbols\n+from sympy.assumptions.assume import assuming\n+from sympy.assumptions.ask import Q as Query\n+from sympy.assumptions.ask import ask\n \n-def test_Identity_doit():\n+def test_Identity_sum_elements():\n+    n = Symbol('n', integer=True, positive=True)\n+    In = Identity(n)\n+\n+    # Summing all the elements of an identity matrix should equal n\n+    total_sum = Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+    assert total_sum == n\n+\n+def test_Identity_with_orthogonal_assumption():\n+    n = Symbol('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    M = MatrixSymbol('M', n, n)\n+\n+    with assuming(Query.orthogonal(M)):\n+        e = (M.T * M).doit()\n+\n+    # Assert element-wise properties of identity matrix\n+    assert e[0, 0] == 1\n+    assert e[1, 1] == 1\n+    assert e[0, 1] == 0\n+    assert e[1, 0] == 0\n+\n+    # Verify the assumptions are returning expected results\n+    assert ask(Query.diagonal(e)) is True\n+    assert ask(Query.integer_elements(e)) is True\n+\n+    # Assert sum of elements is n, the length of the diagonal\n+    diag_sum = Sum(e[i, i], (i, 0, n-1)).doit()\n+    assert diag_sum == n\n+\n+    total_sum = Sum(Sum(e[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+    assert total_sum == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..328a6ef 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -335,6 +335,16 @@ def test_args():\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n         Permutation(((0, ), [1]))\n     assert Permutation([[1, 2]]) == Permutation([0, 2, 1])\n+    \n+    # Test for non-disjoint cycles handled in left-to-right order\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Identity permutation\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1])  # Results in no changes\n+    assert Permutation([[0, 1], [0, 2]]) == Permutation([0, 2, 1])  # From original test patch\n+    assert Permutation([[0, 2], [0, 1], [2, 0]]) == Permutation([1, 0, 2])  # Complex chaining\n+\n+    # Ensure permutations beyond a basic cycle form as expected\n+    assert Permutation([[1, 0], [0, 2], [1, 2]]) == Permutation([0, 2, 1])\n+    assert Permutation([[0, 1, 2], [2, 1, 0]]) == Permutation([0, 1, 2])  # Complex but should return idempotent permutation\n     assert Permutation([[1], [4, 2]]) == Permutation([0, 1, 4, 3, 2])\n     assert Permutation([[1], [4, 2]], size=1) == Permutation([0, 1, 4, 3, 2])\n     assert Permutation(\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..52103e7 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -489,8 +489,26 @@ def test_errors():\n     raises(ShapeError,\n         lambda: SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))\n \n-\n-def test_len():\n+def test_sparse_hstack_vstack():\n+    # Sparse hstack with varying column sizes\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(0, 1)\n+    M3 = SparseMatrix.zeros(0, 2)\n+    M4 = SparseMatrix.zeros(0, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+\n+    M1 = SparseMatrix.zeros(1, 0)\n+    M2 = SparseMatrix.zeros(1, 1)\n+    M3 = SparseMatrix.zeros(1, 2)\n+    M4 = SparseMatrix.zeros(1, 3)\n+    assert SparseMatrix.hstack(M1, M2, M3, M4).shape == (1, 6)\n+\n+    # Sparse vstack with varying row sizes\n+    M1 = SparseMatrix.zeros(0, 0)\n+    M2 = SparseMatrix.zeros(1, 0)\n+    M3 = SparseMatrix.zeros(2, 0)\n+    M4 = SparseMatrix.zeros(3, 0)\n+    assert SparseMatrix.vstack(M1, M2, M3, M4).shape == (6, 0)\n     assert not SparseMatrix()\n     assert SparseMatrix() == SparseMatrix([])\n     assert SparseMatrix() == SparseMatrix([[]])\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..d15af1d 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -229,6 +229,12 @@ def test_evalf_bugs():\n \n     #issue 11518\n     assert NS(2*x**2.5, 5) == '2.0000*x**2.5000'\n+    \n+    #issue 13076 - Test cases for evalf with Mul and Max\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(Max(0, y), Max(1, y), evaluate=False).evalf()) == 'Max(1, y)*Max(0, y)'\n+    assert NS(Mul(Max(1, y), Max(0, x), Max(2, x), evaluate=False).evalf()) == 'Max(2, x)*Max(0, x)*Max(1, y)'\n \n \n def test_evalf_integer_parts():\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..d918c3e 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -273,6 +273,22 @@ def test_coth():\n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n \n+def test_coth_subs_issue():\n+    x = Symbol('x')\n+    expr = coth(log(tan(x)))\n+    \n+    # Test with integers that previously caused a 'NameError'\n+    assert expr.subs(x, 2)  # Should not raise an error\n+    assert expr.subs(x, 3)  # Should not raise an error\n+    assert expr.subs(x, 5)  # Should not raise an error\n+    assert expr.subs(x, 6)  # Should not raise an error\n+    assert expr.subs(x, 8)  # Should not raise an error\n+    assert expr.subs(x, 9)  # Should not raise an error\n+    assert expr.subs(x, 11) # Should not raise an error\n+    assert expr.subs(x, 12) # Should not raise an error\n+    assert expr.subs(x, 13) # Should not raise an error\n+    assert expr.subs(x, 15) # Should not raise an error\n+\n def test_coth_series():\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..0bb9f0d 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -165,6 +165,9 @@ def test_difference():\n     assert -1 in S.Reals - S.Naturals\n \n \n+from sympy import FiniteSet, Interval, Complement, symbols\n+x, y = symbols('x y')\n+\n def test_Complement():\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n@@ -188,6 +191,11 @@ def test_Complement():\n     assert S.Reals - Union(S.Naturals, FiniteSet(pi)) == \\\n             Intersection(S.Reals - S.Naturals, S.Reals - FiniteSet(pi))\n \n+def test_mixed_symbols_and_numbers_complement():\n+    a = FiniteSet(x, y, 2)\n+    b = Interval(-10, 10)\n+    assert Complement(a, b) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+\n def test_complement():\n     assert Interval(0, 1).complement(S.Reals) == \\\n         Union(Interval(-oo, 0, True, True), Interval(1, oo, True, True))\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..7518c57 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,62 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643():\n+    import sympy as sm\n+\n+    # Test the issue example\n+    M = sm.eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1],\n+    ])\n+    assert result == expected\n+\n+    # Test additional cases for thoroughness\n+    # Case 1: Inserting a single column into a 3x3 identity matrix\n+    M = sm.eye(3)\n+    V = sm.Matrix([5, 5, 5])\n+    result = M.col_insert(1, V)\n+    expected = sm.Matrix([\n+        [1, 5, 0, 0],\n+        [0, 5, 1, 0],\n+        [0, 5, 0, 1],\n+    ])\n+    assert result == expected\n+\n+    # Case 2: Inserting multiple columns into a 2x2 zero matrix\n+    M = sm.zeros(2, 2)\n+    V = sm.Matrix([[1, 2], [3, 4]])\n+    result = M.col_insert(1, V)\n+    expected = sm.Matrix([\n+        [0, 1, 2, 0],\n+        [0, 3, 4, 0],\n+    ])\n+    assert result == expected\n+\n+    # Case 3: Negative index insertion\n+    M = sm.eye(3)\n+    V = sm.Matrix([5, 6, 7])\n+    result = M.col_insert(-1, V)\n+    expected = sm.Matrix([\n+        [1, 0, 5, 0],\n+        [0, 1, 6, 0],\n+        [0, 0, 7, 1],\n+    ])\n+    assert result == expected\n+\n+    # Case 4: Inserting a column into an empty matrix\n+    M = sm.zeros(0, 0)\n+    V = sm.Matrix([])\n+    result = M.col_insert(0, V)\n+    expected = sm.Matrix([])\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..5712cae 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -671,8 +671,15 @@ def test_Poly_mul():\n     assert Poly(4, x).mul(Poly(2, x, y)) == Poly(8, x, y)\n     assert Poly(4, x, y) * Poly(2, x, y) == Poly(8, x, y)\n \n-    assert Poly(1, x) * x == Poly(x, x)\n-    assert Poly(1, x) * sin(x) == sin(x)\n+from sympy import Poly, symbols, S\n+\n+def test_issue_13079():\n+    x = symbols('x')\n+    assert Poly(x) * x == Poly(x**2, x, domain='ZZ')\n+    assert x * Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2 * Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2) * Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x) * S(-2) == Poly(-2*x, x, domain='ZZ')\n \n     assert Poly(x, x) * 2 == Poly(2*x, x)\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..e008618 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,24 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_custom():\n+    from sympy import symbols, latex\n+\n+    x, y = symbols('x y')\n+    # Original test cases that we should preserve\n+    assert latex(3*x**2*y, mul_symbol='\\\\\\\\,') == r\"3\\\\,x^{2}\\\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\\\\\,') == r\"1.5 \\\\cdot 3^{x}\"\n+\n+    # New test cases to thoroughly test the mul_symbol behavior\n+    # Testing with an empty string as a multiplication symbol\n+    assert latex(3*x**2*y, mul_symbol='') == r\"3x^{2}y\"\n+    \n+    # Testing with a non-standard custom symbol\n+    assert latex(3*x**2*y, mul_symbol='\\\\ast') == r\"3 \\ast x^{2} \\ast y\"\n+    \n+    # Testing with unusual characters to see how it behaves\n+    assert latex(3*x**2*y, mul_symbol='@') == r\"3 @ x^{2} @ y\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..e39ba6e 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,8 +402,17 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n-\n-def test_det_LU_decomposition():\n+def test_issue_13835():\n+    # Test cases for the issue related to matrix determinant with symbolic entries\n+    from sympy import symbols, Matrix\n+\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a * j for i in range(n)] for j in range(n)])\n+    \n+    # Ensuring no NaN comparison error and correct determinant computation\n+    assert M(5).det() == 0, \"Determinant of M(5) should be 0\"\n+    assert M(6).det() == 0, \"Determinant of M(6) should be 0\"\n+    assert M(7).det() == 0, \"Determinant of M(7) should be 0\"\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert M.det(method=\"lu\") == 1\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..c2fba17 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -710,6 +710,42 @@ def test_issue_10003():\n     assert P(G < -1) == S.Zero\n \n def test_precomputed_cdf():\n+    from sympy import S, diff, symbols, integrate, simplify\n+    from sympy.stats import (\n+        Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse, \n+        Kumaraswamy, Laplace, Logistic, Nakagami, StudentT, UniformSum, cdf, density\n+    )\n+    from sympy.utilities.randtest import verify_numerically as tn\n+    \n+    x = symbols(\"x\", real=True, finite=True)\n+    \n+    # Add tests for distributions needing improved CDF calculations.\n+    test_cases = [\n+        (Arcsin(\"A\", 0, 3), 1),\n+        (Dagum(\"D\", S(1)/3, S(1)/5, 2), 3),\n+        (Erlang(\"E\", 1, 1), 1),\n+        (Frechet(\"F\", S(4)/3, 1, 2), 3),\n+        (Gamma(\"G\", 0.1, 2), 3),\n+        (GammaInverse(\"GI\", S(5)/7, 2), 3),\n+        (Kumaraswamy(\"K\", S(1)/123, 5), S(1)/3),\n+        (Laplace(\"LA\", 2, 3), 5),\n+        (Logistic(\"L\", 1, 0.1), 2),\n+        (Nakagami(\"N\", S(7)/3, 1), 2),\n+        (StudentT(\"S\", 10), 2),\n+        (UniformSum(\"US\", 5), 2),\n+    ]\n+    \n+    for distr, val in test_cases:\n+        # Verify the differentiation of CDF gives back the PDF\n+        assert tn(diff(cdf(distr)(x), x), density(distr)(x), x)\n+\n+        # Verify the CDF at specific points (analytic/numeric check)\n+        computed_cdf = cdf(distr)(val)\n+        if isinstance(computed_cdf, S.NaN):\n+            # Some CDF might not directly return a plug&play result\n+            # depending on implementation, ensure they don't error out.\n+            continue\n+        # Optionally, you can add more specific numeric checks here if closed form known\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "",
  "sympy__sympy-14531": "",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..cf4851d 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,6 +4,24 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+def test_vector_addition_with_zero():\n+    N = ReferenceFrame('N')\n+    v = N.x + 0 * N.x\n+    assert v == N.x\n+\n+def test_vector_zero_in_sum():\n+    N = ReferenceFrame('N')\n+    v_sum = sum([N.x, 0 * N.x])\n+    assert v_sum == N.x\n+\n+def test_vector_zero_multiplication():\n+    N = ReferenceFrame('N')\n+    v = 0 * N.x\n+    assert v == Vector(0)  # This tests whether multiplying a vector by zero results in a zero vector instance\n+\n+from sympy import symbols\n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n",
  "sympy__sympy-14976": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex fbe0d75..02f326d 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import (absolute_import, division, print_function)\n \n@@ -36,6 +37,9 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n+    # Test for mpmath Rational printing\n+    assert p.doprint(Rational(232, 3)) == 'mpmath.mpf(232)/mpmath.mpf(3)'\n+\n \n def test_MpmathPrinter():\n     p = MpmathPrinter()\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..9f04775 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,7 +74,7 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    assert len(rank_zero_array) == 1\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7eaf694 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..5df30e7 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,44 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_to_rotation_matrix_issue_1593():\n+    \"\"\"Tests specific edge cases for the Quaternion to_rotation_matrix issue.\"\"\"\n+    from sympy import Quaternion, symbols, cos, sin, pi, trigsimp, Matrix\n+\n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    correct_matrix_x = Matrix([\n+        [1,      0,      0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]\n+    ])\n+    assert trigsimp(q.to_rotation_matrix()) == correct_matrix_x\n+\n+    # Additional test cases to verify correctness with known results\n+    q_90 = Quaternion(cos(pi/4), sin(pi/4), 0, 0)\n+    correct_matrix_90 = Matrix([\n+        [1,         0,       0],\n+        [0,  0, -1],\n+        [0,  1,       0]\n+    ])\n+    assert trigsimp(q_90.to_rotation_matrix()) == correct_matrix_90\n+\n+    q_180 = Quaternion(cos(pi/2), sin(pi/2), 0, 0)\n+    correct_matrix_180 = Matrix([\n+        [1,  0,  0],\n+        [0, -1,  0],\n+        [0,  0, -1]\n+    ])\n+    assert trigsimp(q_180.to_rotation_matrix()) == correct_matrix_180\n+\n+    q_0 = Quaternion(1, 0, 0, 0)\n+    correct_matrix_0 = Matrix([\n+        [1, 0, 0],\n+        [0, 1, 0],\n+        [0, 0, 1]\n+    ])\n+    assert trigsimp(q_0.to_rotation_matrix()) == correct_matrix_0\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +157,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..8ae5844 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,6 +1625,15 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+    assert Mod(5*i, 2) == Mod(i, 2)\n+    assert Mod(6*i, 3) == 0\n+    assert Mod(9*i + j, 6) == Mod(i + j, 6)\n+\n     # issue 8677\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..0cf23fb 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -75,6 +75,8 @@ def test_Min():\n     assert Min(nn, oo) == nn\n     assert Min(oo, nn) == nn\n     assert Min(p, p) == p\n+    from sympy import S\n+\n     assert Min(p, oo) == p\n     assert Min(oo, p) == p\n     assert Min(oo, oo) == oo\n@@ -84,6 +86,10 @@ def test_Min():\n     assert Min(np, np_).func is Min\n     assert Min(p, p_).func is Min\n \n+    # test zero-argument cases\n+    assert Min() == S.Infinity\n+    assert Max() == S.NegativeInfinity\n+\n     # lists\n     raises(ValueError, lambda: Min())\n     assert Min(x, y) == Min(y, x)\n@@ -154,6 +160,10 @@ def test_Max():\n \n     assert Max(5, 4) == 5\n \n+    # test zero-argument cases\n+    assert Min() == S.Infinity\n+    assert Max() == S.NegativeInfinity\n+\n     # lists\n \n     raises(ValueError, lambda: Max())\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..b94fd1e 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1987,10 +1987,31 @@ def test_Add_is_zero():\n     assert (x + y).is_zero\n \n \n-def test_issue_14392():\n+def test_issue_15873():\n+    from sympy import I, simplify\n+    # Original test case from the issue\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+    assert simplify(e).is_zero is True\n+\n+    # Additional test cases for complex expressions\n+    e2 = 3*I - (1 - I)**2 - 2*I\n+    assert e2.is_zero is None\n+\n+    e3 = (1 + I)*(1 - I) - 1 - I**2\n+    assert e3.is_zero is None\n+    assert simplify(e3).is_zero is True\n+\n+    e4 = (2 + 3*I) - (2 + 3*I)\n+    assert e4.is_zero is True\n+    assert simplify(e4).is_zero is True\n+\n+    e5 = (x + 1 + I) + (0 - x - 1 - I)\n+    assert e5.is_zero is True\n+    assert simplify(e5).is_zero is True\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..598466e 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -486,9 +486,41 @@ def test_issue_5950():\n         log(Rational(3,4), evaluate=False)\n \n \n+from sympy import Symbol, posify, symbols, sqrt\n+\n def test_posify():\n     from sympy.abc import x\n \n+    # Issue 16438: verify correct behavior when posifying symbols with assumptions\n+    # Specifically check if finite assumption is preserved.\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] == True\n+    assert eq.assumptions0['infinite'] == False\n+\n+    # Check integer and rational assumptions\n+    m = Symbol('m', integer=True)\n+    eq, rep = posify(m)\n+    assert eq.assumptions0['integer'] == True\n+\n+    n = Symbol('n', rational=True)\n+    eq, rep = posify(n)\n+    assert eq.assumptions0['rational'] == True\n+\n+    # Check a combination of assumptions: integer, odd, finite, positive\n+    a = Symbol('a', integer=True, odd=True, finite=True, positive=True)\n+    eq, rep = posify(a)\n+    assert eq.assumptions0['integer'] == True\n+    assert eq.assumptions0['odd'] == True\n+    assert eq.assumptions0['positive'] == True\n+    assert eq.assumptions0['finite'] == True\n+\n+    # Check the posification of more complex expressions\n+    b = Symbol('b', real=True, positive=True)\n+    expr = sqrt(a**2 + b**2)\n+    expr_posified, replacements = posify(expr)\n+    assert expr_posified.subs(replacements) == expr\n+\n     assert str(posify(\n         x +\n         Symbol('p', positive=True) +\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..50f152b 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -35,8 +36,16 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n-\n-def test_MpmathPrinter():\n+def test_Indexed_PythonCodePrinter():\n+    prntr = PythonCodePrinter()\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    # Test with symbols as indices\n+    i, j = symbols('i j')\n+    assert prntr.doprint(p[i, j]) == 'p[i, j]'\n+    # Test with mixed symbols and integers\n+    assert prntr.doprint(p[i, 1]) == 'p[i, 1]'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n     assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..04f637f 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -31,6 +31,28 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n     return source\n \n \n+def test_cython_backend_unused_array_argument():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    \n+    # We expect this to return 1.0 without error\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n+\n+def test_cython_backend_array_argument_used():\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = x[0, 0]\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    \n+    # Now the expression depends on x, expect the results to reflect the input\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n+\n+from sympy.utilities.autowrap import autowrap\n+from sympy import MatrixSymbol\n+import numpy as np\n+\n def test_cython_wrapper_scalar_function():\n     x, y, z = symbols('x,y,z')\n     expr = (x + y)*z\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..0166574 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -238,6 +238,18 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n \n+from sympy.crypto.crypto import encode_morse\n+\n+def test_encode_morse_numbers():\n+    # Test the encoding of numbers to ensure fix is applied\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('12345') == '.----|..---|...--|....-|.....'\n+    assert encode_morse('67890') == '-....|--...|---..|----.|-----'\n+    # Add negative test case to check if incorrect mapping is not there\n+    assert encode_morse('-') == '-....-'\n+\n+test_encode_morse_numbers()\n+\n def test_encode_morse():\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..36bb46c 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -800,8 +800,26 @@ def test_nc_simplify():\n     assert nc_simplify(expr) == (1-c)**-1\n     # commutative expressions should be returned without an error\n     assert nc_simplify(2*x**2) == 2*x**2\n+from sympy import sin, cos, I, symbols, simplify\n \n-def test_issue_15965():\n+def test_issue_17137():\n+    x = symbols('x')\n+    \n+    # Original test cases\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    \n+    # Additional test cases\n+    assert simplify(sin(x)**I) == sin(x)**I\n+    assert simplify((sin(x)**2) ** I) == (sin(x)**2) ** I\n+    assert simplify((cos(x)*sin(x))**I) == (cos(x)*sin(x))**I\n+    \n+    # More complex expression\n+    expr = (cos(x) + sin(x))**I\n+    assert simplify(expr) == expr\n+\n+    # Verifying behavior with purely imaginary powers\n+    assert simplify(cos(x)**(2*I)) == cos(x)**(2*I)\n     A = Sum(z*x**y, (x, 1, a))\n     anew = z*Sum(x**y, (x, 1, a))\n     B = Integral(x*y, x)\n@@ -814,4 +832,4 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..cdafbc5 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,5 +1,7 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n-from sympy.simplify.sqrtdenest import _subsets as subsets\n+from sympy.simplify.sqrtdenest import _subsets as subsets, _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.utilities.pytest import slow\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n@@ -174,9 +176,15 @@ def test_subsets():\n         [1, 0, 0, 0], [0, 1, 0, 0], [1, 1, 0, 0], [0, 0, 1, 0], [1, 0, 1, 0],\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n-\n-\n-def test_issue_5653():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    # verify _sqrt_match does not raise an IndexError and returns an empty list\n+    assert _sqrt_match(4 + I) == []\n+    # verify sqrtdenest returns the expression unchanged for complex nested square roots\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert sqrtdenest(expr) == expr\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..41b2012 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,8 +1,10 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n+from sympy import geometry as ge, sympify\n from sympy.utilities.pytest import raises, warns\n \n \n@@ -46,6 +48,11 @@ def test_point():\n     assert p1.distance(line) == line.distance(p1)\n     assert p4.distance(line) == line.distance(p4)\n \n+    # Test multiplication between Point and number sympify order\n+    point1 = ge.Point(0, 0)\n+    point2 = ge.Point(1, 1)\n+    assert point1 + point2 * sympify(2.0) == point1 + sympify(2.0) * point2\n+\n     assert Point.taxicab_distance(p4, p3) == 2\n \n     assert Point.canberra_distance(p4, p5) == 1\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..1858baa 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -473,8 +473,20 @@ def test_descent():\n     # supposed to be square-free\n     raises(TypeError, lambda: descent(4, 3))\n \n-\n-def test_diophantine():\n+from sympy.abc import m, n\n+from sympy.solvers.diophantine import diophantine\n+\n+def test_diophantine_issue_18186():\n+    # Test case to verify fix for issue 18186\n+    eq = n**4 + m**4 - 2**4 - 3**4\n+    \n+    # Ensuring both orders of 'syms' give the same comprehensive result\n+    solutions_sym_mn = diophantine(eq, syms=(m, n), permute=True)\n+    solutions_sym_nm = diophantine(eq, syms=(n, m), permute=True)\n+    expected_solutions = {(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)}\n+    \n+    assert solutions_sym_mn == expected_solutions\n+    assert solutions_sym_nm == expected_solutions\n     assert check_solutions((x - y)*(y - z)*(z - x))\n     assert check_solutions((x - y)*(x**2 + y**2 - z**2))\n     assert check_solutions((x - 3*y + 7*z)*(x**2 + y**2 - z**2))\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..aaa505f 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -676,8 +676,14 @@ def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n-\n-def test_latex_integrals():\n+    # Test to check correct parenthesizing in latex output of Subs\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # Additional tests for comprehensive coverage\n+    assert latex(Subs(x - y, (x,), (1,))) == r'\\left. \\left(x - y\\right) \\right|_{\\substack{ x=1 }}'\n+    assert latex(Subs(x*y, (x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    assert latex(2*Subs(x**2 - y, (x,), (y,))) == r'2 \\left. \\left(x^{2} - y\\right) \\right|_{\\substack{ x=y }}'\n+    assert latex(Subs(1/(x+y), (x,), (0,))) == r'\\left. \\left(\\frac{1}{x + y}\\right) \\right|_{\\substack{ x=0 }}'\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n         r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..c3ed577 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,3 +1,4 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n     EmptySet, Union, Contains)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n@@ -93,6 +94,21 @@ def test_subs_CondSet():\n     # you can only replace sym with a symbol that is not in\n     # the free symbols\n     assert c.subs(x, 1) == c\n+    \n+    # Test for issue with ConditionSet / ImageSet substitution\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    cond_set = ConditionSet(x, Contains(y, Interval(-1, 1)), img1)\n+    \n+    # Substitute y with 1/3 and assert the expected result\n+    assert cond_set.subs(y, S.One/3).dummy_eq(img2)\n+    \n+    # Check that the replacement works correctly using xreplace\n+    assert cond_set.xreplace({y: S.One/3}) == img2\n+    \n+    # Check substitution on ConditionSet with ImageSet results in intuitive evaluation\n+    assert cond_set.subs(y, S.One/3) == ConditionSet(x, Contains(S.One/3, Interval(-1, 1)), img2)\n     assert c.subs(x, y) == ConditionSet(y, y < 2, s)\n \n     # double subs needed to change dummy if the base set\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..1ea5dc5 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -514,7 +514,40 @@ def test_kernS():\n     assert one != 1 and one.expand() == 1\n \n \n-def test_issue_6540_6552():\n+def test_issue_kernS_unboundlocal():\n+    from sympy import symbols\n+    from sympy.core.sympify import kernS\n+\n+    x, y = symbols('x y')\n+\n+    # Original test case from patch to verify behavior\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+\n+    # Test case to catch potential regression on unbound usage\n+    text = \"(3*x + y)/(y - y**2)\"\n+    expr = kernS(text)\n+    assert expr == (3*x + y)/(y - y**2)\n+\n+    # Check with single variable\n+    single_var_expr = kernS(\"x + 1\")\n+    assert single_var_expr == x + 1\n+\n+    # Nested expressions\n+    nested_expr = kernS(\"((x + 1)*(y - 2))/(x - y)\")\n+    assert nested_expr == ((x + 1)*(y - 2))/(x - y)\n+\n+    # Expressions containing negatives and multiplication\n+    complex_expr = kernS(\"-(x - y)*(x + y)\")\n+    assert complex_expr == -(x - y)*(x + y)\n+\n+    # Another complex expression with powers\n+    power_expr = kernS(\"x**2 - (y**2 + x)\")\n+    assert power_expr == x**2 - (y**2 + x)\n+\n+    # Ensure no issues with differing brackets and spacing\n+    bracket_expr = kernS(\" ( x * y + z ) - x \")\n+    z = symbols('z')\n+    assert bracket_expr == (x * y + z) - x\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..26ea68a 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -84,7 +85,14 @@ def test_unitary():\n     assert Dagger(U).is_commutative is False\n \n \n-def test_identity():\n+def test_dagger_identity():\n+    I = IdentityOperator()\n+    A = Operator('A')\n+    D = Dagger(A)\n+\n+    # Issue case: Ensuring that Dagger(A) * Identity simplifies to Dagger(A)\n+    assert D * I == D\n+    assert I * D == D  # Also ensure commutativity still holds\n     I = IdentityOperator()\n     O = Operator('O')\n     x = Symbol(\"x\")\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..a20f5f7 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -905,8 +905,31 @@ def test_sylow_subgroup():\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 2 > 0\n \n-\n-@slow\n+def test_sylow_subgroup_dihedral():\n+    # Test case for DihedralGroup(18), expecting the order of the 2-Sylow subgroup to be 4\n+    G = DihedralGroup(18)\n+    S2 = G.sylow_subgroup(p=2)\n+    assert S2.order() == 4\n+\n+    # Test case for DihedralGroup(50), expecting the order of the 2-Sylow subgroup to be 4\n+    G = DihedralGroup(2*25)\n+    S2 = G.sylow_subgroup(p=2)\n+    assert S2.order() == 4\n+\n+    # Edge case: Check DihedralGroup(1), should handle gracefully and return a subgroup with order 1\n+    G = DihedralGroup(1)\n+    S2 = G.sylow_subgroup(p=2)\n+    assert S2.order() == 1\n+\n+    # Check DihedralGroup with odd order (e.g., 15), expecting the order of the 2-Sylow subgroup to be 2\n+    G = DihedralGroup(15)\n+    S2 = G.sylow_subgroup(p=2)\n+    assert S2.order() == 2\n+\n+    # Check if sylow_subgroup of DihedralGroup with a prime number order (17) handles correctly\n+    G = DihedralGroup(17)\n+    S2 = G.sylow_subgroup(p=2)\n+    assert S2.order() == 2\n def test_presentation():\n     def _test(P):\n         G = P.presentation()\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..2610f11 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -471,7 +471,20 @@ def test_multiset_permutations():\n         6\\n''')\n \n \n+from sympy.utilities.iterables import partitions, uniq, binary_partitions\n+\n def test_partitions():\n+    # New test case to ensure the dictionaries are not reused\n+    for partition_func in [\n+        lambda: partitions(6, k=2),\n+        lambda: partitions(6, k=3),\n+        lambda: partitions(8, k=4, m=3),\n+        lambda: partitions(4)\n+    ]:\n+        seen_ids = set()\n+        for p in partition_func():\n+            assert id(p) not in seen_ids, \"Dictionary was reused in partitions.\"\n+            seen_ids.add(id(p))\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20801": "",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..4aa91a2 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -19,6 +20,45 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+    # Test for issue with unexpected PolynomialError in subs\n+    from sympy.functions.elementary.hyperbolic import sinh, cosh, tanh\n+\n+    # Verify the reported issue\n+    x_r, y_r = symbols('x_r y_r', real=True)\n+    z = Symbol('z')\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    try:\n+        expr.subs({1: 1.0})\n+    except Exception as e:\n+        assert False, f\"Unexpected exception raised: {e}\"\n+\n+    # Test different hyperbolic functions and removal of division\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    try:\n+        expr_cosh.subs({1: 1.0})\n+    except Exception as e:\n+        assert False, f\"Unexpected exception raised with cosh: {e}\"\n+\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    try:\n+        expr_tanh.subs({1: 1.0})\n+    except Exception as e:\n+        assert False, f\"Unexpected exception raised with tanh: {e}\"\n+\n+    # Without division by 'z'\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    try:\n+        expr_no_div.subs({1: 1.0})\n+    except Exception as e:\n+        assert False, f\"Unexpected exception raised without division: {e}\"\n+\n+    # Without 'exp'\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z)\n+    try:\n+        expr_no_exp.subs({1: 1.0})\n+    except Exception as e:\n+        assert False, f\"Unexpected exception raised without exp: {e}\"\n+\n \n def test_subs_Matrix():\n     z = zeros(2)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..1af6b7d 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -161,8 +161,27 @@ def test_monomials():\n                     j**2*k**2, x*j, x**2*k, x**2*j**2*k, j, x**2*j*k,\n                     x*j**2, x*k**2, x*j*k, x**2*j**2*k**2, x*j*k**2, x**2, x**2*j*k**2\n             }\n-\n-def test_monomial_count():\n+    # Issue Test Cases\n+    # Testing with three variables x1, x2, x3 and specific min_degrees and max_degrees.\n+    \n+    # Test 1: Both min_degrees and max_degrees are 3, expect all combinations of monomials with total degree = 3.\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    monomials_3_3 = {x1**3, x1**2*x2, x1**2*x3, x1*x2**2, x1*x3**2, x1*x2*x3, x2**3, x2**2*x3, x2*x3**2, x3**3}\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == monomials_3_3\n+\n+    # Test 2: min_degrees = 2 and max_degrees = 3, expect combinations with total degree = 2 or 3.\n+    monomials_3_2 = {x1*x2, x1*x3, x2*x3, x1**2, x2**2, x3**2, x1**3, x2**3, x3**3, x1**2*x2, x1**2*x3, x2**2*x1, x2**2*x3, x3**2*x1, x3**2*x2, x1*x2**2, x1*x3**2, x2*x3**2, x1*x2*x3}\n+    assert set(itermonomials([x1, x2, x3], 3, 2)) == monomials_3_2\n+\n+    # Test 3: Differentiate between commutative variables and non-commutative variables\n+    a, b, c = symbols('a b c', commutative=False)\n+    non_commutative_2_2 = {\n+        a**2, a*b, a*c, b**2, b*a, b*c, c**2, c*a, c*b,\n+        a*b*a, a*b*c, a*c*a, a*c*b, a*c*c,\n+        b*a*b, b*a*c, b*c*b, b*c*c,\n+        c*a*b, c*b*a, c*b*c, c*a*a\n+    }\n+    assert set(itermonomials([a, b, c], 2, 2)) == non_commutative_2_2\n     assert monomial_count(2, 2) == 6\n     assert monomial_count(2, 3) == 10\n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..e7099cb 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # Verifying argument invariance\n \n \n     class Signifier(String):\n@@ -274,6 +275,7 @@ def test_String():\n \n     si = Signifier('foobar')\n     assert si != st\n+    assert si.func(*si.args) == si  # Verifying argument invariance for subclass\n     assert si.text == st.text\n     s = String('foo')\n     assert str(s) == 'foo'\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..68ca243 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,10 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n+from sympy.core.numbers import Integer\n+from sympy.sympify import S\n+from sympy.geometry import Point, Point2D\n from sympy.testing.pytest import raises, warns\n \n \n@@ -440,7 +445,39 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Test case to ensure no error when using Point2D with evaluate(False)\n+    with evaluate(False):\n+        p = Point2D(Integer(1), Integer(2))\n+        assert isinstance(p, Point2D)\n+\n+    # Additional test cases to cover various scenarios\n+    with evaluate(False):\n+        p = Point(1, 2)\n+        assert isinstance(p, Point2D)\n+\n+    with evaluate(False):\n+        p3d = Point(1, 2, 3)\n+        assert isinstance(p3d, Point3D)\n+\n+    # Check behavior of eval=False in S() and Point instantiation\n+    p_manual = Point2D(1, 2, evaluate=False)\n+    p_auto = S('Point2D(Integer(1),Integer(2))', evaluate=False)\n+    assert p_manual == p_auto\n+\n+    # Ensure no imaginary error is raised\n+    try:\n+        with evaluate(False):\n+            Point2D(1 + 0*I, 2)\n+    except ValueError as e:\n+        assert 'Imaginary coordinates are not permitted' not in str(e)\n+\n+    # Standard tests without evaluate context manager\n+    p = S('Point2D(Integer(1),Integer(2))')\n+    assert p == Point2D(Integer(1), Integer(2))\n+\n+    p_noeval = S('Point2D(Integer(1),Integer(2))', evaluate=False)\n+    assert p_noeval == Point2D(Integer(1), Integer(2), evaluate=False)\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..f2fac52 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -52,6 +53,18 @@ def test_PythonCodePrinter():\n                         (3, Gt(x, 0)), evaluate=False)) == '((2) if (x <= 0) else'\\\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n+\n+    # Test cases for Min and Max printing\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    # Test Min/Max with constants\n+    assert prntr.doprint(Min(1, 2)) == \"min(1, 2)\"\n+    assert prntr.doprint(Max(4, 3)) == \"max(4, 3)\"\n+    # Test nested Min/Max\n+    assert prntr.doprint(Min(Max(x, y), z)) == \"min(max(x, y), z)\"\n+    assert prntr.doprint(Max(Min(x, y), z)) == \"max(min(x, y), z)\"\n     assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n     assert prntr.doprint(KroneckerDelta(x,y)) == '(1 if x == y else 0)'\n \n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..dcd843f 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1197,6 +1197,14 @@ def test_issue_14941():\n     f3 = lambdify([x, y], [y, x], 'sympy')\n     assert f3(2, 3) == [3, 2]\n \n+def test_single_element_tuple_issue():\n+    # Verify lambdify correctly returns a single-element tuple\n+    f2b = lambdify([], (1,))\n+    # Use inspect to verify the source code retains the single-element tuple\n+    source_code = inspect.getsource(f2b)\n+    assert \"return (1,)\" in source_code\n+    assert f2b() == (1,)\n+\n \n def test_lambdify_Derivative_arg_issue_16468():\n     f = Function('f')(x)\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..5b33ef3 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n+from sympy.core.function import Function, UndefinedFunction\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n@@ -295,7 +297,22 @@ def test_symbols():\n     assert symbols(('aa:d','x:z')) == ((aa, ab, ac, ad), (x, y, z))\n \n \n-    # issue 6675\n+def test_symbols_with_parentheses_and_function_class():\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) == UndefinedFunction\n+    assert type(u[1]) == UndefinedFunction\n+    \n+    # Test tuple unpacking with additional parentheses\n+    (a, b), (c,) = symbols((('a', 'b'), ('c',)), cls=Function)\n+    assert type(a) == UndefinedFunction\n+    assert type(b) == UndefinedFunction\n+    assert type(c) == UndefinedFunction\n+\n+    # Ensure multiple layers of tuple unpacking work with function class\n+    (x, (y, z)) = symbols((('x', ('y', 'z'))), cls=Function)\n+    assert type(x) == UndefinedFunction\n+    assert type(y) == UndefinedFunction\n+    assert type(z) == UndefinedFunction\n     def sym(s):\n         return str(symbols(s))\n     assert sym('a0:4') == '(a0, a1, a2, a3)'\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..444a777 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -256,9 +256,51 @@ def test_kahane_simplify1():\n     # Expressions with free indices:\n     t = (G(mu)*G(nu)*G(rho)*G(sigma)*G(-mu))\n     r = kahane_simplify(t)\n+\n+def test_kahane_leading_gamma_matrix_order():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    # Verify that leading uncontracted gamma matrices are not reversed\n+    t1 = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r1 = kahane_simplify(t1)\n+    assert r1.equals(4 * G(rho) * G(sigma)), f\"Unexpected ordering in result: {r1}\"\n+\n+    t2 = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r2 = kahane_simplify(t2)\n+    assert r2.equals(4 * G(rho) * G(sigma)), f\"Unexpected ordering in result: {r2}\"\n+\n+    # Additional tests with more gamma matrices at the start\n+    t3 = G(mu)*G(nu)*G(-nu)*G(-mu)*G(rho)\n+    r3 = kahane_simplify(t3)\n+    assert r3.equals(4 * G(rho)), f\"Unexpected result: {r3}\"\n+\n+    t4 = G(rho)*G(sigma)*G(tau)*G(mu)*G(-mu)\n+    r4 = kahane_simplify(t4)\n+    assert r4.equals(4 * G(rho) * G(sigma) * G(tau)), f\"Unexpected ordering in result: {r4}\"\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n     t = (G(mu)*G(nu)*G(rho)*G(sigma)*G(-mu))\n     r = kahane_simplify(t)\n+\n+def test_kahane_leading_gamma_matrix_order():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    # Verify that leading uncontracted gamma matrices are not reversed\n+    t1 = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r1 = kahane_simplify(t1)\n+    assert r1.equals(4 * G(rho) * G(sigma)), f\"Unexpected ordering in result: {r1}\"\n+\n+    t2 = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r2 = kahane_simplify(t2)\n+    assert r2.equals(4 * G(rho) * G(sigma)), f\"Unexpected ordering in result: {r2}\"\n+\n+    # Additional tests with more gamma matrices at the start\n+    t3 = G(mu)*G(nu)*G(-nu)*G(-mu)*G(rho)\n+    r3 = kahane_simplify(t3)\n+    assert r3.equals(4 * G(rho)), f\"Unexpected result: {r3}\"\n+\n+    t4 = G(rho)*G(sigma)*G(tau)*G(mu)*G(-mu)\n+    r4 = kahane_simplify(t4)\n+    assert r4.equals(4 * G(rho) * G(sigma) * G(tau)), f\"Unexpected ordering in result: {r4}\"\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n \n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..795e2ae 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,6 +30,9 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n+from sympy import Symbol, S, Contains, FiniteSet\n+from sympy.testing.pytest import raises\n+\n def test_binary_symbols():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -46,6 +49,17 @@ def test_as_set():\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n \n-def test_type_error():\n+def test_contains_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    z = Symbol('z')\n+\n+    # Test cases adapted from the issue\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    assert Contains(x, S.Integers).as_set() == S.Integers\n+    assert Contains(x, S.Reals).as_set() == S.Reals\n+\n+    # Test that NotImplementedError is raised as expected, for cases not defined\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y, z)).as_set())\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..d6a086b 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,31 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy import exp\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.core.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..66782b4 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,29 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import Quantity, acceleration, time, velocity, second, meter\n+from sympy.physics.units.systems.si import SI\n+\n+def test_collect_factor_and_dimension_equivalent_dimensions():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1 * t1 + v1\n+    \n+    # Ensure no ValueError is raised and dimensions are equivalent\n+    factor, dim = SI._collect_factor_and_dimension(expr1)\n+    assert factor == (-9.8 * 5 + 2) * meter / second\n+    assert dim == velocity\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..c7ea8dc 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -42,7 +43,15 @@ def test_homomorphism():\n     T = homomorphism(F, G, F.generators, G.generators)\n     assert T.invert(a**-1*b**-1*a**2) == a*b**-1\n \n-    # PermutationGroup -> PermutationGroup\n+    # Test for issue in _check_homomorphism with PermutationGroups\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+    # Additional test for inversed generators case\n+    inv_gens = [gen**-1 for gen in D3.generators]\n+    T_inv = homomorphism(D3, D3, D3.generators, inv_gens)\n+    assert T_inv.is_homomorphism()\n     D = DihedralGroup(8)\n     p = Permutation(0, 1, 2, 3, 4, 5, 6, 7)\n     P = PermutationGroup(p)\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..34db2d6 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -249,7 +249,27 @@ def test_PolyElement_copy():\n     g[(1, 1, 1)] = 7\n     assert f != g\n \n+from sympy import symbols\n+from sympy.polys.rings import ring\n+\n def test_PolyElement_as_expr():\n+    # Additional test cases\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+\n+    # Test with correct number of symbols\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Test with fewer symbols than required, expecting ValueError\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test with more symbols than required, expecting ValueError\n+    U2, V2, W2, T = symbols(\"u2,v2,w2,t\")\n+    raises(ValueError, lambda: f.as_expr(U2, V2, W2, T))\n+\n+    # Existing original test cases follow\n     R, x, y, z = ring(\"x,y,z\", ZZ)\n     f = 3*x**2*y - x*y*z + 7*z**3 + 1\n \n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..99ab3c7 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -267,6 +267,25 @@ def test_convert_equals_signs():\n     transformations = standard_transformations + \\\n                         (convert_equals_signs, )\n     x = Symbol('x')\n+\n+def test_parse_expr_evaluate_false_for_relationals():\n+    inputs = {\n+        \"3 < 5\": Lt(3, 5, evaluate=False),\n+        \"5 >= 2\": Ge(5, 2, evaluate=False),\n+        \"7 != 8\": Ne(7, 8, evaluate=False),\n+        \"3 == 3\": Eq(3, 3, evaluate=False),\n+        \"0 > -1\": Gt(0, -1, evaluate=False),\n+        \"5 <= 5\": Le(5, 5, evaluate=False),\n+        # Edge cases with negative and zero\n+        \"-3 < -2\": Lt(-3, -2, evaluate=False),\n+        \"-5 >= 0\": Ge(-5, 0, evaluate=False),\n+        \"0 != 0\": Ne(0, 0, evaluate=False),\n+        \"-1 == -1\": Eq(-1, -1, evaluate=False),\n+        \"0 > -0\": Gt(0, 0, evaluate=False),  # interesting case with 0\n+        \"10 <= 20\": Le(10, 20, evaluate=False),\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n     y = Symbol('y')\n     assert parse_expr(\"1*2=x\", transformations=transformations) == Eq(2, x)\n     assert parse_expr(\"y = x\", transformations=transformations) == Eq(y, x)\n@@ -276,6 +295,25 @@ def test_convert_equals_signs():\n \n def test_parse_function_issue_3539():\n     x = Symbol('x')\n+\n+def test_parse_expr_evaluate_false_for_relationals():\n+    inputs = {\n+        \"3 < 5\": Lt(3, 5, evaluate=False),\n+        \"5 >= 2\": Ge(5, 2, evaluate=False),\n+        \"7 != 8\": Ne(7, 8, evaluate=False),\n+        \"3 == 3\": Eq(3, 3, evaluate=False),\n+        \"0 > -1\": Gt(0, -1, evaluate=False),\n+        \"5 <= 5\": Le(5, 5, evaluate=False),\n+        # Edge cases with negative and zero\n+        \"-3 < -2\": Lt(-3, -2, evaluate=False),\n+        \"-5 >= 0\": Ge(-5, 0, evaluate=False),\n+        \"0 != 0\": Ne(0, 0, evaluate=False),\n+        \"-1 == -1\": Eq(-1, -1, evaluate=False),\n+        \"0 > -0\": Gt(0, 0, evaluate=False),  # interesting case with 0\n+        \"10 <= 20\": Le(10, 20, evaluate=False),\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n     f = Function('f')\n     assert parse_expr('f(x)') == f(x)\n \n",
  "astropy__astropy-14369": "",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..a2d60a2 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1898,6 +1898,26 @@ class OperationTests(OperationTestBase):\n         author = Author.objects.create(name='Albert', rebate='10%')\n         self.assertEqual(Author.objects.get(), author)\n \n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_check_constraint_with_or_and(self):\n+        app_label = 'test_checkconstraint_or_and'\n+        constraint_name = 'field_1_has_value_if_flag_set'\n+        from_state = self.set_up_test_model(app_label)\n+        check = models.Q(flag__exact=True, field_1__isnull=False) | models.Q(flag__exact=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(flag=True, field_1=None)\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(flag=True, field_1=0)\n+        TestConstraint.objects.create(flag=False, field_1=None)\n+        TestConstraint.objects.create(flag=False, field_1=0)\n+\n     @skipUnlessDBFeature('supports_table_check_constraints')\n     def test_remove_constraint(self):\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\n",
  "django__django-11477": "",
  "django__django-12273": "",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..e45a76f 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -604,8 +604,28 @@ class DeletionTests(TestCase):\n                 signal.disconnect(receiver, sender=Referrer)\n \n \n+from django.db import connection\n+from django.test import TestCase\n+from .models import User, Avatar\n+\n class FastDeleteTests(TestCase):\n \n+    def test_fast_delete_all_with_no_subquery(self):\n+        User.objects.bulk_create([User() for _ in range(100)])\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        self.assertNotIn('SELECT', sql, \"DELETE query should not contain a subquery.\")\n+\n+    def test_fast_delete_all_execution_time(self):\n+        import time\n+        User.objects.bulk_create([User() for _ in range(100000)])\n+        start_time = time.monotonic()\n+        User.objects.all().delete()\n+        end_time = time.monotonic()\n+        execution_time = end_time - start_time\n+        self.assertLess(execution_time, 5, \"DELETE operation took too long.\")\n+\n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n@@ -702,4 +722,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..b2559d5 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -24,8 +25,24 @@ class DecimalFieldTests(TestCase):\n         msg = '\u201cabc\u201d value must be a decimal number.'\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n-\n-    def test_default(self):\n+    def test_invalid_types_to_python(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        invalid_values = [\n+            {},  # dictionary\n+            (),  # tuple\n+            [],  # list\n+            set(),  # set\n+            object(),  # generic object\n+            complex(1, 1),  # complex number\n+            'non-numeric string',  # string\n+            b'non-numeric byte-string',  # byte-string\n+            None,  # already handled, but included for completeness\n+        ]\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        for value in invalid_values:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.to_python(value)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..b6821f9 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -253,7 +254,25 @@ class PickleabilityTestCase(TestCase):\n         with self.assertRaisesMessage(RuntimeWarning, msg):\n             pickle.loads(pickle.dumps(qs))\n \n-    def test_order_by_model_with_abstract_inheritance_and_meta_ordering(self):\n+    def test_pickle_values_and_annotate(self):\n+        \"\"\"\n+        Test that a queryset using values() and annotate() can be\n+        correctly pickled and unpickled without crashing.\n+        \"\"\"\n+        from django.db.models import Sum\n+        \n+        # Initialize test data\n+        h1 = Happening.objects.create(name='Event A')\n+        h2 = Happening.objects.create(name='Event B')\n+\n+        # Create a queryset with values() and annotate()\n+        qs = Happening.objects.values('name').annotate(max_when=models.Max('when'))\n+\n+        # Ensure the queryset can be pickled and unpickled correctly\n+        reloaded = Happening.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+        \n+        self.assertEqual(list(reloaded), list(qs))\n         group = Group.objects.create(name='test')\n         event = MyEvent.objects.create(title='test event', group=group)\n         event.edition_set.create()\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..292f501 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,6 +30,15 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n+    def test_unicode_in_jsonfield(self):\n+        field = JSONField()\n+        # Test Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d \u4e16\u754c'}), '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}')\n+        # Test Unicode emojis\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        # Test mixed languages and characters\n+        self.assertEqual(field.prepare_value([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]')\n+\n     def test_widget(self):\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..af6675f 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6629,7 +6629,23 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertEqual(response.status_code, 404)\n \n     @override_settings(APPEND_SLASH=True)\n-    def test_single_model_no_append_slash(self):\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/custom_prefix/')\n+    def test_missing_slash_with_force_script_name_set(self):\n+        superuser = User.objects.create_user(\n+            username='admin',\n+            password='top_secret',\n+            email='admin@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])  # Remove the trailing slash\n+        self.assertRedirects(\n+            response,\n+            '/custom_prefix' + known_url,\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n         superuser = User.objects.create_user(\n             username='staff',\n             password='secret',\n",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..c0da29d 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -690,6 +690,32 @@ class WriterTests(SimpleTestCase):\n         # Just make sure it runs for now, and that things look alright.\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n+    \n+    def test_missing_models_import_in_migration(self):\n+        \"\"\"\n+        Test to ensure models import statement is present in generated migration files.\n+        \"\"\"\n+        fields = {\n+            'name': models.TextField(primary_key=True),\n+        }\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"MyModel\",\n+                    fields=list(fields.items()),\n+                    bases=(models.Model,)\n+                )\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+\n+        # Execute the generated migration code to ensure no NameError occurs.\n+        result = self.safe_exec(output)\n+        self.assertIn(\"models\", output)\n+        self.assertIn(\"from django.db import models\", output)\n \n     def test_migration_path(self):\n         test_apps = [\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..a76b57d 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1624,6 +1624,14 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal.from_float(math.pi), places=6)\n \n+    def test_aggregation_default_after_annotation(self):\n+        # Reproducing the issue described, using annotation followed by aggregation with default.\n+        result = Book.objects.annotate(\n+            idx=F(\"id\")\n+        ).aggregate(Sum(\"id\", default=0))\n+        # Since the exact value isn't our concern, we're just checking for no exceptions.\n+        self.assertIn('id__sum', result)\n+\n     def test_aggregation_default_passed_another_aggregate(self):\n         result = Book.objects.aggregate(\n             value=Sum('price', filter=Q(rating__lt=3.0), default=Avg('pages') / 10.0),\n@@ -1642,4 +1650,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..14c524b 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2978,7 +2978,37 @@ class OperationTests(OperationTestBase):\n             \"rename_pony_weight_pink_new_pony_test_idx\",\n         )\n \n+        from django.db import connection, migrations\n+\n+        # Initial setup and state.\n         new_state = project_state.clone()\n+\n+        table_name = \"pony\"\n+        unnamed_index_name = None\n+\n+        # Set up a migration operation for RenameIndex.\n+        operation = migrations.RenameIndex(\n+            model_name=\"Pony\",\n+            old_fields=(\"weight\", \"pink\"),\n+            new_name=\"new_pony_test_idx\",\n+        )\n+\n+        # Create the unnamed index that will be auto-generated.\n+        with connection.schema_editor() as editor:\n+            editor.add_index(new_state.apps.get_model('migrations', 'Pony'), migrations.Index(\n+                name=\"\",\n+                fields=[\"weight\", \"pink\"],\n+                condition=None,\n+            ))\n+\n+        unnamed_index_name = editor._create_index_name(\n+            table_name, (\"weight\", \"pink\"), suffix=\"_idx\"\n+        )\n+        \n+        # Confirm that the unnamed index exists.\n+        self.assertIndexNameExists(table_name, unnamed_index_name)\n+\n+        # Rename index.\n         operation.state_forwards(app_label, new_state)\n         # Rename index.\n         with connection.schema_editor() as editor:\n@@ -2988,6 +3018,17 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n+        # Reverse operation should restore or preserve the unnamed index.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, unnamed_index_name)\n+\n+        # Test reapplying the rename operation and ensure it doesn't crash when the unnamed index is moved back and forth.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n         # Deconstruction.\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..17a831b 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3497,7 +3497,37 @@ class FormFieldCallbackTests(SimpleTestCase):\n             )\n \n \n-class LocalizedModelFormTest(TestCase):\n+from django.test import TestCase\n+from django import forms\n+from django.forms.models import modelform_factory\n+from .models import Person  # Ensure this model exists with similar structure as used in tests.\n+\n+class ModelFormFieldCallbackTest(TestCase):\n+    def test_modelform_factory_uses_meta_formfield_callback(self):\n+        class PersonForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = [\"id\", \"name\"]\n+                formfield_callback = lambda db_field, **kwargs: forms.CharField(widget=forms.Textarea)\n+        \n+        FactoryForm = modelform_factory(model=Person, form=PersonForm)\n+        \n+        for field in FactoryForm.base_fields.values():\n+            self.assertIsInstance(field.widget, forms.Textarea)\n+\n+    def test_modelform_factory_custom_callback_applied(self):\n+        def custom_callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea(attrs={'rows': 5}))\n+\n+        FactoryForm = modelform_factory(\n+            model=Person,\n+            fields=[\"id\", \"name\"],\n+            formfield_callback=custom_callback,\n+        )\n+\n+        for field in FactoryForm.base_fields.values():\n+            self.assertIsInstance(field.widget, forms.Textarea)\n+            self.assertEqual(field.widget.attrs.get('rows'), 5)\n     def test_model_form_applies_localize_to_some_fields(self):\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n             class Meta:\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..d77448d 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -9,7 +9,11 @@ from django.core.serializers.json import DjangoJSONEncoder\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n-from django.utils.translation import gettext_lazy, override\n+from django.db import models\n+from django.core import serializers\n+from django.core.serializers.base import DeserializationError\n+from django.test import TestCase\n+from django.contrib.auth.models import Manager\n \n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n@@ -223,7 +227,33 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             for obj in serializers.deserialize(\"json\", test_string):\n                 obj.save()\n \n-    def test_helpful_error_message_for_many2many_natural2(self):\n+    def test_m2m_custom_manager_with_select_related(self):\n+        class TagManager(models.Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().select_related(\"master\")\n+        \n+        class TagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+        \n+        class Tag(models.Model):\n+            objects = TagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TagMaster, on_delete=models.SET_NULL, null=True)\n+        \n+        class TestModel(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(Tag, blank=True)\n+\n+        # Creating objects\n+        tag_master = TagMaster.objects.create(name=\"master\")\n+        tag = Tag.objects.create(name=\"tag\", master=tag_master)\n+        test_instance = TestModel.objects.create(name=\"test\")\n+        test_instance.tags.add(tag)\n+        test_instance.save()\n+\n+        # Serializing should not raise an exception\n+        with self.assertRaisesMessage(FieldError, \"cannot be both deferred and traversed using select_related\"):\n+            serializers.serialize(\"json\", [test_instance])\n         \"\"\"\n         Invalid many-to-many keys should throw a helpful error message. This\n         tests the code path where a natural many-to-many key has only a single\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_backend_macosx.py b/lib/matplotlib/tests/test_backend_macosx.py\nindex 06d044f..29225ea 100644\n--- a/lib/matplotlib/tests/test_backend_macosx.py\n+++ b/lib/matplotlib/tests/test_backend_macosx.py\n@@ -4,6 +4,28 @@ import pytest\n \n import matplotlib as mpl\n import matplotlib.pyplot as plt\n+import pickle\n+from matplotlib.figure import Figure\n+@pytest.mark.backend('macosx')\n+def test_dpi_unpickle_issue():\n+    # Initial Figure with specific DPI\n+    original_dpi = 200\n+    fig = plt.figure(dpi=original_dpi)\n+    \n+    # Make a loop to simulate the issue\n+    for i in range(5):\n+        # Save current figure DPI\n+        current_dpi = fig.get_dpi()\n+        \n+        # Pickle and unpickle the figure\n+        buf = pickle.dumps(fig)\n+        fig = pickle.loads(buf)\n+        \n+        # Assert that DPI remains the same after pickling\n+        assert fig.get_dpi() == current_dpi, f\"On iteration {i}, DPI changed from {current_dpi} to {fig.get_dpi()}\"\n+\n+    # Verify the final DPI is the same as the original\n+    assert fig.get_dpi() == original_dpi, f\"Final DPI {fig.get_dpi()} is not equal to original DPI {original_dpi}\"\n try:\n     from matplotlib.backends import _macosx\n except ImportError:\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..a237310 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6586,6 +6586,12 @@ def test_integrate(dask):\n     assert isinstance(actual.data, type(da.data))\n \n     # along y\n+    # Test using 'coord' argument for integrate on DataArray\n+    actual_with_coord = da.integrate(coord=\"y\")\n+    assert_allclose(expected_y, actual_with_coord.compute())\n+    assert_equal(actual_with_coord, ds.integrate(coord=\"y\")[\"var\"])\n+    \n+    # Existing test using 'dim' argument, should also verify 'coord', still check if works\n     actual = da.integrate(\"y\")\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n@@ -6597,6 +6603,11 @@ def test_integrate(dask):\n     assert_equal(ds[\"var\"].integrate(\"y\"), ds.integrate(\"y\")[\"var\"])\n \n     # along x and y\n+    # Test integrating over multiple dimensions using 'coord' \n+    actual_with_coord_multiple = da.integrate(coord=(\"y\", \"x\"))\n+    assert actual_with_coord_multiple.ndim == 0\n+    \n+    # Existing test remains\n     actual = da.integrate((\"y\", \"x\"))\n     assert actual.ndim == 0\n \n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..4c5c891 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -107,6 +107,27 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),\n+    (\"foo\\\\,bar\", [\"foo,bar\"]),  # Test for escaped comma handling\n+    (\"foo\\\\,bar,bar\", [\"foo,bar\", \"bar\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_handling(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Test correct handling of commas in regex lists, including within quantifiers.\"\"\"\n+    \n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run([str(EMPTY_MODULE), rf\"--bad-names-rgxs={in_string}\"], exit=False)\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..aef6c53 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1155,8 +1155,26 @@ def test_summary_list_after_errors(testdir):\n         ]\n     )\n \n+def test_does_not_eagerly_collect_packages(testdir):\n+    # Create a test file that should pass\n+    testdir.makepyfile(\"def test(): pass\")\n+    # Create a package with an __init__.py that should not be collected\n+    pydir = testdir.mkpydir(\"foopkg\")\n+    pydir.join(\"__init__.py\").write(\"assert False\")\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n \n-def test_importorskip():\n+def test_does_not_put_src_on_path(testdir):\n+    # `src` is not on sys.path so it should not be importable\n+    testdir.tmpdir.join(\"src/nope/__init__.py\").ensure()\n+    testdir.makepyfile(\n+        \"import pytest\\n\",\n+        \"def test():\\n\",\n+        \"    with pytest.raises(ImportError):\\n\",\n+        \"        import nope\\n\",\n+    )\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n     with pytest.raises(\n         pytest.skip.Exception,\n         match=\"^could not import 'doesnotexist': No module named .*\",\n@@ -1184,4 +1202,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..eac23f3 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,22 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"input_str\",\n+    (\n+        \"None\",\n+        \"True\",\n+        \"False\",\n+    ),\n+)\n+def test_expression_compile_no_assertion_error(input_str: str) -> None:\n+    try:\n+        Expression.compile(input_str)\n+        succeeded = True\n+    except AssertionError:\n+        succeeded = False\n+    assert succeeded, f\"Expression.compile({input_str!r}) should not raise AssertionError.\"\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..077395a 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -268,6 +268,9 @@ def test_parse_annotation():\n \n \n def test_pyfunction_signature(app):\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n     text = \".. py:function:: hello(name: str) -> str\"\n     doctree = restructuredtext.parse(app, text)\n     assert_node(doctree, (addnodes.index,\n@@ -742,4 +745,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..51eec7f 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,7 +1317,54 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n-    def test_parameters_with_class_reference(self):\n+    def test_multiple_parameters(self):\n+        # Test case for parameters in the same line without \"optional\"\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test case for parameters in the same line with \"optional\"\n+        docstring_optional = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring_optional, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring_optional, config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`, *optional*\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`, *optional*\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..f58edd9 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -774,7 +774,64 @@ def test_pydecoratormethod_signature(app):\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n \n+from sphinx.testing.util import assert_node\n+from sphinx import addnodes\n+from sphinx.testing import restructuredtext\n+from docutils import nodes\n+\n @pytest.mark.sphinx(freshenv=True)\n+def test_ambiguous_class_lookup(app):\n+    text = (\n+        \".. py:class:: mod.A\\n\"\n+        \".. py:class:: mod.submod.A\\n\"\n+        \"\\n\"\n+        \".. py:function:: f()\\n\"\n+        \"\\n\"\n+        \"    - :py:class:`mod.A`\\n\"\n+        \"    - :py:class:`mod.submod.A`\\n\"\n+        \"\\n\"\n+        \"    :param mod.A a:\\n\"\n+        \"    :param mod.submod.A b:\\n\"\n+        \"    :rtype: mod.A\\n\"\n+        \"    :rtype: mod.submod.A\\n\"\n+        \"\\n\"\n+        \".. py:currentmodule:: mod\\n\"\n+        \"\\n\"\n+        \".. py:function:: f()\\n\"\n+        \"\\n\"\n+        \"    - :py:class:`A`\\n\"\n+        \"    - :py:class:`mod.A`\\n\"\n+        \"    - :py:class:`mod.submod.A`\\n\"\n+        \"\\n\"\n+        \"    :param A a:\\n\"\n+        \"    :param mod.A b:\\n\"\n+        \"    :param mod.submod.A c:\\n\"\n+        \"    :rtype: A\\n\"\n+        \"    :rtype: mod.A\\n\"\n+        \"    :rtype: mod.submod.A\\n\"\n+        \"\\n\"\n+        \".. py:currentmodule:: mod.submod\\n\"\n+        \"\\n\"\n+        \".. py:function:: f()\\n\"\n+        \"\\n\"\n+        \"    - :py:class:`A`\\n\"\n+        \"    - :py:class:`mod.A`\\n\"\n+        \"    - :py:class:`mod.submod.A`\\n\"\n+        \"\\n\"\n+        \"    :param A a: BUG: links to mod.A instead of mod.submod.A\\n\"\n+        \"    :param mod.A b:\\n\"\n+        \"    :param mod.submod.A c:\\n\"\n+        \"    :rtype: A\\n\"\n+        \"    :rtype: mod.A\\n\"\n+        \"    :rtype: mod.submod.A\\n\"\n+    )\n+\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree[4][1][0][1], pending_xref, reftarget='mod.A')\n+    assert_node(doctree[4][1][0][2], pending_xref, reftarget='mod.submod.A')\n+    assert_node(doctree[8][1][0][1], pending_xref, reftarget='mod.A')\n+    assert_node(doctree[12][1][0][1], pending_xref, reftarget='mod.submod.A')\n def test_module_index(app):\n     text = (\".. py:module:: docutils\\n\"\n             \".. py:module:: sphinx\\n\"\n",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..7f9e855 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -922,7 +922,8 @@ def test_info_field_list(app):\n             \"   :param age: blah blah\\n\"\n             \"   :type age: int\\n\"\n             \"   :param items: blah blah\\n\"\n-            \"   :type items: Tuple[str, ...]\\n\")\n+            \"   :type items: Tuple[str, ...]\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n     doctree = restructuredtext.parse(app, text)\n     print(doctree)\n \n@@ -939,7 +940,28 @@ def test_info_field_list(app):\n                                                         [nodes.list_item, nodes.paragraph],\n                                                         [nodes.list_item, nodes.paragraph])]))\n \n-    # :param str name:\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][3][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][3][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][3][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][3][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     assert_node(doctree[3][1][0][0][1][0][0][0],\n                 ([addnodes.literal_strong, \"name\"],\n                  \" (\",\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..a2bc58b 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1008,6 +1008,45 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+import sphinx.addnodes as addnodes\n+from sphinx.testing.util import assert_node\n+from docutils import nodes\n+from sphinx.testing.restructuredtext import parse\n+\n+def test_info_field_list_piped_type(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param age: blah blah\\n\"\n+            \"   :type age: int | str\\n\")\n+    doctree = parse(app, text)\n+\n+    # Checking the structure of the parsed doctree\n+    assert_node(doctree, \n+                (nodes.target,\n+                 addnodes.index,\n+                 addnodes.index,\n+                 [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                           [desc_addname, \"example.\"],\n+                                           [desc_name, \"Class\"])],\n+                         [desc_content, nodes.field_list, nodes.field, (nodes.field_name,\n+                                                                        nodes.field_body)])]))\n+    assert_node(doctree[3][1][0][0][1],\n+                ([nodes.paragraph, ([addnodes.literal_strong, \"age\"],\n+                                    \" (\",\n+                                    [pending_xref, addnodes.literal_emphasis, \"int\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                                    \")\",\n+                                    \" -- \",\n+                                    \"blah blah\")],))\n+    # Checking the cross-references\n+    assert_node(doctree[3][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"int\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "",
  "sympy__sympy-18698": "",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..a567fc0 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3242,7 +3242,15 @@ def test_keep_coeff():\n     assert _keep_coeff(x + 1, S(2)) == u\n \n \n-def test_poly_matching_consistency():\n+from sympy import symbols, expand, factor, I\n+\n+def test_issue_18895_factor_with_extension():\n+    x, y = symbols('x y')\n+    z = expand((x - 1) * (y - 1))\n+    # Verify that factoring without extension gives the original factors\n+    assert factor(z) == (x - 1) * (y - 1)\n+    # Verifying bug fix: factoring with complex extension should retain both factors\n+    assert factor(z, extension=[I]) == (x - 1) * (y - 1)\n     # Test for this issue:\n     # https://github.com/sympy/sympy/issues/5514\n     assert I * Poly(x, x) == Poly(I*x, x)\n",
  "sympy__sympy-20590": "",
  "sympy__sympy-24562": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..d92c30f 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,37 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_checkboxselectmultiple_id_for_label_override(self):\n+        \"\"\"\n+        Test that id_for_label in CheckboxSelectMultiple subwidgets reflects the\n+        specified 'id' in ChoiceWidget.options when auto_id is provided.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'Option A'), ('b', 'Option B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id_%s'})\n+            )\n+\n+        form = SomeForm(auto_id='custom_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n+\n+    def test_checkboxselectmultiple_id_for_label_auto_id(self):\n+        \"\"\"\n+        Test that id_for_label in CheckboxSelectMultiple subwidgets correctly uses\n+        auto-generated values when no 'id' is explicitly set in attrs.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'Option A'), ('b', 'Option B')],\n+                widget=CheckboxSelectMultiple()\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "",
  "scikit-learn__scikit-learn-12682": "",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..edb1def 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -147,6 +147,31 @@ def test_multi_target_sample_weights():\n     X_test = [[1.5, 2.5, 3.5], [3.5, 4.5, 5.5]]\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n+def test_multi_output_classifier_predict_proba():\n+    from sklearn.datasets import make_multilabel_classification\n+    from sklearn.multioutput import MultiOutputClassifier\n+    from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+    from sklearn.model_selection import cross_val_predict\n+    \n+    # Create a multilabel classification dataset\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, \n+                                          n_classes=3, n_labels=2, random_state=42)\n+    \n+    # Create a MultiOutputClassifier with LinearDiscriminantAnalysis as the estimator\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    \n+    # This should not raise an AttributeError if the issue is resolved\n+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')\n+    \n+    # Check that the output is a list with the correct length corresponding to the number of outputs\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]\n+\n+    # Verify that each element in the list is a (n_samples, n_classes) ndarray\n+    for proba in pred_proba:\n+        assert proba.shape[0] == X.shape[0]\n+        assert proba.shape[1] == 3  # since n_classes is set to 3\n+\n \n # Import the data\n iris = datasets.load_iris()\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..09c201f 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -158,6 +158,10 @@ def test_restify_pep_585():\n                                                    \"[:py:class:`int`, ...]]\")\n \n \n+import pytest\n+from sphinx.util.typing import restify, stringify\n+import sys\n+\n @pytest.mark.skipif(sys.version_info < (3, 10), reason='python 3.10+ is required.')\n def test_restify_type_union_operator():\n     assert restify(int | None) == \":py:class:`int` | :py:obj:`None`\"  # type: ignore\n@@ -166,7 +170,31 @@ def test_restify_type_union_operator():\n                                          \":py:obj:`None`\")\n \n \n-def test_restify_broken_type_hints():\n+def test_restify_mocked_inherited_classes():\n+    with mock(['torch']):\n+        import torch.mock_module as torch  # Mocking the `torch` module\n+        class MockedModule:\n+            def __init__(self):\n+                pass\n+              \n+        class DerivedModule(MockedModule):\n+            pass\n+\n+        torch.nn.Module = MockedModule\n+        assert restify(DerivedModule) == \":py:class:`__main__.DerivedModule`\"\n+\n+def test_stringify_mocked_inherited_classes():\n+    with mock(['torch']):\n+        import torch.mock_module as torch  # Mocking the `torch` module\n+        class MockedModule:\n+            def __init__(self):\n+                pass\n+              \n+        class DerivedModule(MockedModule):\n+            pass\n+\n+        torch.nn.Module = MockedModule\n+        assert stringify(DerivedModule) == \"__main__.DerivedModule\"\n     assert restify(BrokenType) == ':py:class:`tests.test_util_typing.BrokenType`'\n \n \n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..051c28b 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -354,7 +354,16 @@ def test_issue_9983():\n     assert p.is_convergent() is S.false\n     assert product(1 + 1/n**(S(2)/3), (n, 1, oo)) == p.doit()\n \n-\n-def test_rewrite_Sum():\n+def test_issue_13546():\n+    n = Symbol('n', integer=True)\n+    k = Symbol('k', integer=True)\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    assert p.subs(n, 3).doit() == S(63)/8\n+    assert p.subs(n, 4).doit() == S(595)/48\n+    assert p.subs(n, 1).doit() == S(3)\n+\n+    # Verify edge case n=0, product should be 1 as there are no terms to multiply\n+    assert p.subs(n, 0).doit() == S(1)\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}