{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..a41c0e3 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -142,6 +142,28 @@ def test_custom_model_separable():\n \n     assert model_a().separable\n \n+\n+def test_separability_matrix_nested_compoundmodels():\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    sep_matrix_1 = separability_matrix(m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5))\n+    expected_1 = np.array([[True, True, False, False],\n+                           [True, True, False, False],\n+                           [False, False, True, False],\n+                           [False, False, False, True]])\n+    np.testing.assert_allclose(sep_matrix_1, expected_1)\n+\n+    sep_matrix_2 = separability_matrix(m.Pix2Sky_TAN() & cm)\n+    expected_2 = np.array([[True, True, False, False],\n+                           [True, True, False, False],\n+                           [False, False, True, False],\n+                           [False, False, False, True]])  # Expected correct behavior\n+    np.testing.assert_allclose(sep_matrix_2, expected_2)\n+\n+    # Assert the issue before the fix: change expected_2 if behavior is fixed\n+\n     @custom_model\n     def model_c(x, y):\n         return x + y\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..b3eaa07 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,7 +601,30 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_vla_diff_bugs(self):\n+        \"\"\"\n+        Test for issue where FITSDiff reports differences in VLAs when files are identical.\n+        \"\"\"\n+\n+        from astropy.io import fits\n+        from astropy.io.fits import Column, BinTableHDU\n+\n+        # Create a variable-length array column\n+        col_vla = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu_vla = fits.BinTableHDU.from_columns([col_vla])\n+        \n+        # Write to a FITS file\n+        hdu_vla.writeto('vla_test.fits', overwrite=True)\n+        \n+        # Compare the file with itself\n+        diff_vla = fits.FITSDiff('vla_test.fits', 'vla_test.fits')\n+        \n+        # Assert that they are identical\n+        assert diff_vla.identical == True, f\"Expected files to be identical, but found differences: {diff_vla.report()}\"\n+\n+        # Clean up the created file if needed\n+        import os\n+        os.remove('vla_test.fits')\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..e63f63b 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -172,7 +172,19 @@ def test_multiple_solidus():\n         u.Unit(\"m/s/kg\", format=\"vounit\")\n \n \n+import pytest\n+import astropy.units as u\n+\n def test_unknown_unit3():\n+\n+    # New test cases to verify the fix for comparison with None\n+    unit_unrecognized = u.Unit('asdf', parse_strict='silent')\n+    \n+    # Test equality comparison with None should be False without TypeError\n+    assert unit_unrecognized != None\n+    \n+    # Test unit is not in a collection with None\n+    assert unit_unrecognized not in (None, u.m)\n     unit = u.Unit(\"FOO\", parse_strict='silent')\n     assert isinstance(unit, u.UnrecognizedUnit)\n     assert unit.name == \"FOO\"\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..3bdecaf 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -68,8 +68,27 @@ def test_minversion():\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n-    bad_versions = ['1', '1.2rc1']\n+    bad_versions = ['1', '1.2rc1', '0.14dev', '0.13.1.dev']\n+    \n+    # Specific test for issue where '1.14.3' >= '1.14dev' fails\n+    test_module.__version__ = '1.14.3'\n+    assert not minversion(test_module, '1.14dev')\n+    \n+    # Additional test cases to cover more version number comparisons\n+    test_module.__version__ = '1.14.0.dev'\n+    assert minversion(test_module, '1.14dev')\n+    assert not minversion(test_module, '1.14.1')\n+\n+    test_module.__version__ = '1.14'\n+    assert minversion(test_module, '1.14dev')\n+    assert not minversion(test_module, '1.15')\n+\n+    test_module.__version__ = '1.14.3'\n+    assert minversion(test_module, '1.14dev')\n+\n+    test_module.__version__ = '1.15.0'\n+    assert minversion(test_module, '1.14dev')\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..2fe5c3f 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -79,6 +79,30 @@ class TestHeaderFunctions(FitsTestCase):\n         assert header['B'] == 'B'\n         assert header.comments['B'] == 'C'\n \n+    def test_card_fromstring_str(self):\n+        \"\"\"Test loading a Card from a `str` object.\"\"\"\n+        c = fits.Card.fromstring(\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_card_fromstring_bytes(self):\n+        \"\"\"Test loading a Card from a `bytes` object (assuming latin-1 encoding).\"\"\"\n+        c = fits.Card.fromstring(b\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_header_fromstring_str(self):\n+        \"\"\"Test reading a Header from a `str` string.\"\"\"\n+        header_str = \"SIMPLE  = T / file written by CFITSIO\\nEND\"\n+        header = fits.Header.fromstring(header_str)\n+        assert header['SIMPLE'] is True\n+\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"Test reading a Header from a `bytes` string.\"\"\"\n+        header_bytes = b\"SIMPLE  = T / file written by CFITSIO\\nEND\"\n+        header = fits.Header.fromstring(header_bytes)\n+        assert header['SIMPLE'] is True\n+\n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n \n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..ae2a4c7 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -149,8 +149,30 @@ class TestQuantityCreation:\n \n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n-\n-    def test_copy(self):\n+    def test_preserve_float_dtype(self):\n+        \"\"\"Test that float16 values remain float16 when converted to Quantity.\"\"\"\n+        \n+        a_float16 = np.array([1., 2.], dtype=np.float16)\n+        q_float16 = u.Quantity(a_float16, u.km)\n+        assert q_float16.dtype == a_float16.dtype\n+\n+        # Already present test cases in the original patch\n+        a3_32 = np.array([1., 2.], dtype=np.float32)\n+        q3_32 = u.Quantity(a3_32, u.yr)\n+        assert q3_32.dtype == a3_32.dtype\n+\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n+\n+        # Add checks for float64 and float128 for consistency\n+        a3_64 = np.array([1., 2.], dtype=np.float64)\n+        q3_64 = u.Quantity(a3_64, u.yr)\n+        assert q3_64.dtype == a3_64.dtype\n+\n+        a3_128 = np.array([1., 2.], dtype=np.float128)\n+        q3_128 = u.Quantity(a3_128, u.yr)\n+        assert q3_128.dtype == a3_128.dtype\n \n         # By default, a new quantity is constructed, but not if copy=False\n \n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..f321b3d 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,6 +218,14 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n+    # Test invalid URLs with special characters in username/password\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://-.~_!$&\\'()*+,;=%40:80%2f@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    \n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..b01a866 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -9,6 +10,7 @@ from django.db.models import (\n     Max, Min, Sum, Value,\n )\n from django.test import TestCase\n+from django.db.models.expressions import Case, When\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n@@ -389,6 +391,27 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n+    def test_count_distinct_expression(self):\n+        # Original test case provided to check the fix for the issue.\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_no_match(self):\n+        # Additional test case to verify behavior when condition does not match any rows.\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=1000, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 0)\n+\n+    def test_count_distinct_expression_partial_match(self):\n+        # Additional test case to verify behavior with partial match.\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__lt=400, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 3)\n+\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..527a82f 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1090,6 +1090,42 @@ class OverrideSettingsTests(SimpleTestCase):\n         base_url attribute of django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertEqual(default_storage.base_location, '')\n+\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Test if the default file upload permissions are set to 0o644\n+        when FILE_UPLOAD_PERMISSIONS is not explicitly set.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=None):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n+    def test_custom_file_upload_permissions(self):\n+        \"\"\"\n+        Verify that custom file upload permissions can be set and are applied correctly.\n+        \"\"\"\n+        with self.settings(FILE_UPLOAD_PERMISSIONS=0o600):\n+            self.assertEqual(default_storage.file_permissions_mode, 0o600)\n+\n+    def test_temporary_file_permission(self):\n+        \"\"\"\n+        Test the permission of a temporary file, ensuring it defaults to 0o644\n+        if no specific FILE_UPLOAD_PERMISSIONS setting is used.\n+        \"\"\"\n+        storage = FileSystemStorage(location=MEDIA_ROOT)\n+        file = tempfile.NamedTemporaryFile(delete=False)\n+        file.close()  # Close the file to ensure it can be safely opened again.\n+\n+        # Save a new file to invoke the permission setting.\n+        with open(file.name, 'rb') as content:\n+            uploaded_file_name = storage.save('temp_test_file.txt', content)\n+        \n+        saved_file_path = storage.path(uploaded_file_name)\n+        # Check permission of the saved file\n+        file_stat = os.stat(saved_file_path)\n+        self.assertEqual(oct(file_stat.st_mode & 0o777), '0o644')\n+\n+        # Clean up\n+        os.remove(saved_file_path)\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..dcf411d 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -101,7 +103,28 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_pgpassword_env_variable(self):\n+        \"\"\"Test that PGPASSWORD is set correctly in the subprocess environment.\"\"\"\n+        password = \"mysecretpassword\"\n+\n+        def _mock_subprocess_run(*args, env=None, **kwargs):\n+            self.assertIn(\"PGPASSWORD\", env)\n+            self.assertEqual(env[\"PGPASSWORD\"], password)\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        with mock.patch(\"subprocess.run\", new=_mock_subprocess_run):\n+            self.assertEqual(\n+                self._run_it({\n+                    \"database\": \"dbname\",\n+                    \"user\": \"someuser\",\n+                    \"password\": password,\n+                    \"host\": \"somehost\",\n+                    \"port\": \"444\",\n+                }), (\n+                    ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                    None,  # No need for actual file content as we're focusing on env\n+                )\n+            )\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_call(*args):\n             handler = signal.getsignal(signal.SIGINT)\n@@ -113,4 +136,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..25d95bc 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -2,6 +2,7 @@ from django.apps.registry import apps\n from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n+from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n@@ -63,4 +64,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..7b40057 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -428,4 +428,44 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+    def test_get_inlines_with_various_requests(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n+\n+        class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+\n+        # Simulate request with no 'name' attribute\n+        request = Mock()\n+        self.assertEqual(ma.get_inlines(request, None), [])  # Expecting no inlines\n+\n+        # Simulate request with 'name' set to 'alternate'\n+        request.name = 'alternate'\n+        self.assertEqual(ma.get_inlines(request, None), (AlternateInline,))\n+\n+        # Simulate request with 'name' set to 'media'\n+        request.name = 'media'\n+        self.assertEqual(ma.get_inlines(request, None), (MediaInline,))\n+\n+        # Verify that get_inline_instances calls get_inlines correctly\n+        self.assertEqual(type(ma.get_inline_instances(request)[0]), MediaInline)\n+\n+        # Use AnonymousUser request (simulate no permissions scenario)\n+        request.user = AnonymousUser()\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..3347ba2 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -233,6 +233,13 @@ class NumericPasswordValidatorTest(SimpleTestCase):\n \n class UsernameValidatorsTests(SimpleTestCase):\n     def test_unicode_validator(self):\n+        # Add test case for trailing newline character\n+        trailing_newline_usernames = ['username_with_newline\\n', 'Ren\u00e9\\n']\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in trailing_newline_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['joe', 'Ren\u00e9', '\u1d2e\u1d35\u1d33\u1d2e\u1d35\u1d3f\u1d30', '\u0623\u062d\u0645\u062f']\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n@@ -249,6 +256,13 @@ class UsernameValidatorsTests(SimpleTestCase):\n                     v(invalid)\n \n     def test_ascii_validator(self):\n+        # Add test case for trailing newline character\n+        trailing_newline_usernames = ['username\\n', 'glenn\\n']\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in trailing_newline_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +272,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..3230747 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -10,12 +10,20 @@ from .utils import ROOT, TEMPLATE_DIR\n OTHER_DIR = os.path.join(ROOT, 'other_templates')\n \n \n+import os\n+from django.template import Template\n+\n class RenderToStringTest(SimpleTestCase):\n \n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n-    def test_basic_context(self):\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',  # Expect the script tag to be escaped\n+        )\n         self.assertEqual(\n             self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n             'obj:test\\n',\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..f20255e 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -284,10 +284,37 @@ class QueryDictTests(SimpleTestCase):\n     def test_fromkeys_noniterable(self):\n         with self.assertRaises(TypeError):\n             QueryDict.fromkeys(0)\n+from django.http import HttpResponse  # Add necessary import\n \n \n class HttpResponseTests(unittest.TestCase):\n \n+    def test_memoryview_content(self):\n+        # Test case to verify HttpResponse can handle memoryview content correctly\n+        r = HttpResponse(memoryview(b'memoryview_test_content'))\n+        self.assertEqual(r.content, b'memoryview_test_content')\n+\n+    def test_empty_memoryview_content(self):\n+        # Test handling of an empty memoryview\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_large_memoryview_content(self):\n+        # Test with a larger content\n+        large_content = b'a' * 10**6  # 1 MB content\n+        r = HttpResponse(memoryview(large_content))\n+        self.assertEqual(r.content, large_content)\n+\n+    def test_multiple_memoryviews(self):\n+        # Test concatenation of multiple memoryview objects\n+        r = HttpResponse(memoryview(b'part1') + memoryview(b'part2'))\n+        self.assertEqual(r.content, b'part1part2')\n+\n+    def test_memoryview_with_other_content(self):\n+        # Test memoryview content with other types of content\n+        r = HttpResponse(b'bytes_' + memoryview(b'memoryview_content') + b'_suffix')\n+        self.assertEqual(r.content, b'bytes_memoryview_content_suffix')\n+\n     def test_headers_type(self):\n         r = HttpResponse()\n \n",
  "django__django-11141": "",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..4594787 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -772,8 +772,26 @@ class TestInlinePermissions(TestCase):\n             html=True\n         )\n         self.assertContains(response, 'id=\"id_inner2_set-0-DELETE\"')\n-\n-    def test_inline_change_fk_all_perms(self):\n+    def test_inline_view_m2m_noperm(self):\n+        # Add \"view\" permission only for books\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # We expect that only view permission is set, hence it should be a read-only inline\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response, \n+            '<input type=\"hidden\" id=\"id_Author_books-TOTAL_FORMS\" value=\"1\" name=\"Author_books-TOTAL_FORMS\">', \n+            html=True\n+        )\n+        # There should be no option to delete\n+        self.assertNotContains(response, 'Add another Author-book relationship')\n+        self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n+        # Check that the permission settings correctly reflect the view-only setup\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n         permission = Permission.objects.get(codename='add_inner2', content_type=self.inner_ct)\n         self.user.user_permissions.add(permission)\n         permission = Permission.objects.get(codename='change_inner2', content_type=self.inner_ct)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..569941a 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1820,6 +1820,20 @@ class ModelOneToOneFieldTests(TestCase):\n         bw2 = form.save()\n         self.assertEqual(bw2.score, 12)\n \n+    class ModelToDictEmptyFieldsTests(TestCase):\n+        def test_model_to_dict_empty_fields(self):\n+            \"\"\"Test model_to_dict returns empty dict when fields is an empty list.\"\"\"\n+            bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+            self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n+        def test_model_to_dict_specified_fields(self):\n+            \"\"\"Test model_to_dict on specified fields.\"\"\"\n+            bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+            expected_fields = ['id', 'name']\n+            result = model_to_dict(bw, fields=expected_fields)\n+            # Ensure the result only contains the specified fields\n+            self.assertEqual(sorted(result.keys()), sorted(expected_fields))\n+\n     def test_onetoonefield(self):\n         class WriterProfileForm(forms.ModelForm):\n             class Meta:\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..5135005 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,8 +1,10 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from django.db.models.deletion import Collector\n \n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n@@ -464,7 +466,16 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Create a User instance\n+        u = User.objects.create()\n+        # User can be fast-deleted, assert the condition\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        # Delete the User instance\n+        u.delete()\n+        # Assert that the primary key is set to None after deletion\n+        self.assertIsNone(u.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..5f98613 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -93,6 +93,8 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-9', 8, '0.00000000'),\n             ('1e-10', 8, '0.00000000'),\n             ('1e-11', 8, '0.00000000'),\n+            ('1e-200', 2, '0.00'),  # Verify the fix for extremely small decimals\n+            ('1e-199', 2, '0.00'),  # Boundary case that was behaving correctly\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n         ]\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..daa59a8 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,4 @@\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n@@ -196,7 +197,17 @@ class Comment(models.Model):\n         ordering = ['id']\n \n \n-# Models for lookup ordering tests\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=20)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n \n class House(models.Model):\n     name = models.CharField(max_length=50)\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..1fff94a 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,6 @@\n import os\n+import os\n+\n import signal\n import subprocess\n from unittest import mock\n@@ -24,7 +26,26 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpassword\n \n-    def test_basic(self):\n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                'somepassword',\n+            )\n+        )\n+        self.assertIn('PGSSLCERT', os.environ)\n+        self.assertIn('PGSSLKEY', os.environ)\n+        self.assertIn('PGSSLMODE', os.environ)\n+        self.assertIn('PGSSLROOTCERT', os.environ)\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..317acbe 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -98,6 +98,14 @@ class FilteredRelationTests(TestCase):\n             [self.author1]\n         )\n \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2]\n+        )\n+\n     def test_with_join_and_complex_condition(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..8977eb1 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -28,6 +28,12 @@ class TestUtilsHtml(SimpleTestCase):\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n             (\"'\", '&#39;'),\n+            (\"'\", '&#x27;'),   # Checking for &#x27; instead of &#39; now\n+        )\n+        additional_tests = (\n+            (\"'Hello'\", '&#x27;Hello&#x27;'),  # Simple test case for single quotes\n+            ('john\\'s quote', 'john&#x27;s quote'),  # String with an apostrophe\n+            ('\"double quotes\"', '&quot;double quotes&quot;')\n         )\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n@@ -36,6 +42,8 @@ class TestUtilsHtml(SimpleTestCase):\n                 for pattern in patterns:\n                     with self.subTest(value=value, output=output, pattern=pattern):\n                         self.check_output(escape, pattern % value, pattern % output)\n+                for value, output in additional_tests:\n+                        self.check_output(escape, pattern % value, pattern % output)\n                         self.check_output(escape, lazystr(pattern % value), pattern % output)\n                 # Check repeated values.\n                 self.check_output(escape, value * 2, output * 2)\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..b35c683 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,6 +243,30 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n+    def test_skip_checks(self):\n+        \"\"\"\n+        Test the --skip-checks option to ensure system checks are skipped.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # Setting that would cause a check to fail\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+    def test_without_skip_checks(self):\n+        \"\"\"\n+        Test a command without --skip-checks to ensure system checks are run and errors are reported.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # Setting that would cause a check to fail\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        # Assuming 'django.core.management.base' raises an error for invalid checks\n+        self.assertIn('SystemCheckError', err)\n+\n     def test_disallowed_abbreviated_options(self):\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..a676fdd 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -9,7 +11,26 @@ class RegexPatternTests(SimpleTestCase):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n \n \n-class RoutePatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default_root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    def test_resolver_cache_before_set_urlconf(self):\n+        # Call get_resolver before ROOT_URLCONF is set and after\n+        initial_resolver = get_resolver()  # Should use the default (None)\n+\n+        with override_settings(ROOT_URLCONF='urlpatterns.path_urls'):\n+            with self.subTest(\"After setting ROOT_URLCONF\"):\n+                self.assertIs(initial_resolver, get_resolver())\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_different_urlconf_after_set(self):\n+        # Ensure different URLconf results in different resolver even after setting ROOT_URLCONF\n+        self.assertIsNot(get_resolver('urlpatterns.path_dynamic_urls'), get_resolver())\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..57dc1ff 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -241,8 +241,36 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n             email='test2@example.com',\n             password='test',\n         )\n+    from django.contrib.auth import get_user_model\n+    from django.test import override_settings, TestCase\n+    from django.contrib.auth import authenticate\n \n-    def test_authenticate_inactive(self):\n+    class CountingMD5PasswordHasher:\n+        calls = 0\n+\n+        @classmethod\n+        def set_password(cls, raw_password):\n+            cls.calls += 1\n+            # Simulate hashing by doing nothing\n+\n+    def test_authenticate_no_username_or_password(self):\n+        \"\"\"\n+        authenticate() should not make a database query if either username or password is None.\n+        \"\"\"\n+        with self.subTest(\"No username and no password\"):\n+            with self.assertNumQueries(0):\n+                self.assertIsNone(authenticate(username=None, password=None))\n+            self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+        with self.subTest(\"Username is None\"):\n+            with self.assertNumQueries(0):\n+                self.assertIsNone(authenticate(username=None, password='test'))\n+            self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+        with self.subTest(\"Password is None\"):\n+            with self.assertNumQueries(0):\n+                self.assertIsNone(authenticate(username='test', password=None))\n+            self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n         \"\"\"\n         An inactive user can't authenticate.\n         \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..6f369f5 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -115,7 +115,14 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__gte=2, num__lte=3)\n         self.assertNumbersEqual(qs1.union(qs2).order_by(F('num').desc()), [3, 2, 1, 0])\n \n-    def test_union_with_values(self):\n+    def test_can_change_columns_in_values_list(self):\n+        # Setup an initial object\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        \n+        # Ensure columns can be changed when using values_list\n+        reserved_name = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_name, (2,))\n         ReservedName.objects.create(name='a', order=2)\n         qs1 = ReservedName.objects.all()\n         reserved_name = qs1.union(qs1).values('name', 'order', 'id').get()\n",
  "django__django-11532": "",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..378e0c6 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..d4521aa 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,8 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n+from datetime import datetime\n \n \n class OrderingTests(TestCase):\n@@ -462,6 +463,24 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n+    def test_order_by_with_expressions_in_meta_ordering(self):\n+        # Test case for an issue where Meta ordering uses an expression\n+        oba1 = OrderedByFArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        oba2 = OrderedByFArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=None,\n+        )\n+        \n+        articles = OrderedByFArticle.objects.all()\n+        # Since ordering is (F('author').asc(nulls_first=True), 'id'),\n+        # articles without an author (i.e., oba2) should come first\n+        self.assertSequenceEqual(articles, [oba2, oba1])\n+\n     def test_deprecated_values_annotate(self):\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n",
  "django__django-11603": "",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..dc5622c 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -718,7 +718,28 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, 'testapp', 0, [\"RemoveField\"])\n         self.assertOperationAttributes(changes, \"testapp\", 0, 0, name=\"name\")\n \n-    def test_alter_field(self):\n+    def test_alter_field_uuid_to_fk(self):\n+        \"\"\"Test that altering a UUIDField to a ForeignKey properly sets migration dependencies.\"\"\"\n+        app1_before = ModelState(\"testapp\", \"Item\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+            (\"name\", models.CharField(max_length=100)),\n+            (\"related_uuid\", models.UUIDField(null=True, blank=True)),\n+        ])\n+        app2 = ModelState(\"testapp2\", \"RelatedModel\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+            (\"description\", models.CharField(max_length=100)),\n+        ])\n+        app1_after = ModelState(\"testapp\", \"Item\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+            (\"name\", models.CharField(max_length=100)),\n+            (\"related_uuid\", models.ForeignKey(\"testapp2.RelatedModel\", models.SET_NULL, null=True, blank=True)),\n+        ])\n+        changes = self.get_changes([app1_before, app2], [app1_after, app2])\n+        # Check that there is one migration for `testapp`.\n+        self.assertNumberMigrations(changes, \"testapp\", 1)\n+        # Now, this should detect AlterField and have the proper dependencies.\n+        self.assertOperationTypes(changes, \"testapp\", 0, [\"AlterField\"])\n+        self.assertMigrationDependencies(changes, \"testapp\", 0, [(\"testapp2\", \"__first__\")])\n         \"\"\"Tests autodetection of new fields.\"\"\"\n         changes = self.get_changes([self.author_name], [self.author_name_longer])\n         # Right number/type of migrations?\n@@ -2399,4 +2420,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..b5de189 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -224,7 +224,29 @@ class CommandTests(SimpleTestCase):\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n \n-    def test_subparser_dest_required_args(self):\n+    def test_mutually_exclusive_group_required_options(self):\n+        out = StringIO()\n+        management.call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+        management.call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n+    def test_mutually_exclusive_group_no_argument(self):\n+        \"\"\"Test error when no argument is provided.\"\"\"\n+        out = StringIO()\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', stdout=out)\n+\n+    def test_mutually_exclusive_group_multiple_arguments(self):\n+        \"\"\"Test error when multiple mutually exclusive arguments are provided.\"\"\"\n+        out = StringIO()\n+        msg = 'argument --foo-name: not allowed with argument --foo-id'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            management.call_command('mutually_exclusive_required', foo_id=1, foo_name='foo', stdout=out)\n         out = StringIO()\n         management.call_command('subparser_required', 'foo_1', 'foo_2', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..9dec371 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -414,6 +414,9 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n \n     @override_settings(AUTH_USER_MODEL='auth_tests.CustomEmailField')\n     def test_username_field_max_length_matches_user_model(self):\n+        form = AuthenticationForm()\n+        # Assert the maxlength attribute on the widget\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n         self.assertEqual(CustomEmailField._meta.get_field('username').max_length, 255)\n         data = {\n             'username': 'u' * 255,\n@@ -425,9 +428,13 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 255)\n         self.assertEqual(form.errors, {})\n \n+\n     @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n     def test_username_field_max_length_defaults_to_254(self):\n         self.assertIsNone(IntegerUsernameUser._meta.get_field('username').max_length)\n+        form = AuthenticationForm()\n+        # Assert the maxlength attribute on the widget defaults to 254\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n         data = {\n             'username': '0123456',\n             'password': 'password',\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..531414a 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -252,7 +252,23 @@ class WriterTests(SimpleTestCase):\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n \n-    def test_serialize_enums(self):\n+    def test_serialize_enum_with_translations(self):\n+        from django.utils.translation import gettext_lazy as _\n+\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        # Ensure that the serialization uses the enum name, not the translated value\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m.value, m) for m in TranslatedEnum])\n+        serialized_field = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            serialized_field,\n+            \"models.CharField(choices=[\"\n+            \"('Good', migrations.test_writer.TranslatedEnum('Good')), \"\n+            \"('Bad', migrations.test_writer.TranslatedEnum('Bad'))], \"\n+            \"default=migrations.test_writer.TranslatedEnum('GOOD'))\"\n+        )\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..9a73137 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,7 @@\n+\n import unittest\n from datetime import datetime\n+from unittest import mock\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -312,7 +314,41 @@ class HttpDateProcessingTests(unittest.TestCase):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n \n-    def test_parsing_rfc1123(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_two_digit_year_edge_cases(self, mocked_datetime):\n+        \"\"\"\n+        Test cases for parsing RFC 850 format dates with two-digit years.\n+        The goal is to ensure dates within 50 years into the future are\n+        handled correctly, adhering to RFC 7231 standard.\n+        \"\"\"\n+        # We use mocked datetime to control the current year for testing\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Set up test dates and expected results\n+        utcnow_test_years = [\n+            datetime(2019, 11, 6, 8, 49, 37),\n+            datetime(2020, 11, 6, 8, 49, 37),\n+            datetime(2048, 11, 6, 8, 49, 37),\n+            datetime(2069, 11, 6, 8, 49, 37)\n+        ]\n+\n+        test_cases = [\n+            ('Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            ('Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            ('Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            ('Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            ('Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            ('Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            ('Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        ]\n+\n+        for utcnow in utcnow_test_years:\n+            for rfc850str, expected_date in test_cases:\n+                with self.subTest(rfc850str=rfc850str, current_year=utcnow.year):\n+                    mocked_datetime.utcnow.return_value = utcnow\n+                    parsed = parse_http_date(rfc850str)\n+                    self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..b241836 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,37 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_field_deep_copy_independent_error_message_modifications(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Original error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        \n+        # Modify the error message in the original field\n+        field.error_messages['invalid'] = 'Modified original error message.'\n+        \n+        # Ensure that the copied field's error message has not changed\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Original error message.')\n+        \n+        # Modify the error message in the copied field\n+        field_copy.error_messages['invalid'] = 'Modified copied error message.'\n+        \n+        # Ensure that the original field's error message has not changed\n+        self.assertEqual(field.error_messages['invalid'], 'Modified original error message.')\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n@@ -3686,6 +3716,10 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertIsInstance(p.files, MultiValueDict)\n \n \n+import copy\n+from django.forms import CharField, Form\n+from django.test import SimpleTestCase\n+\n class CustomRenderer(DjangoTemplates):\n     pass\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..6bb97a8 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,4 @@\n+\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n@@ -205,6 +206,28 @@ class BulkCreateTests(TestCase):\n         NoFields.objects.bulk_create([NoFields() for i in range(2)])\n         self.assertEqual(NoFields.objects.count(), 2)\n \n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_less_than_max(self):\n+        objs = [Country() for i in range(100)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        # Calculate max_batch_size based on fields and objs\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        # Use a batch size less than max_batch_size\n+        explicit_batch_size = max_batch_size - 1\n+        with self.assertNumQueries(ceil(len(objs) / explicit_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=explicit_batch_size)\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_greater_than_max(self):\n+        objs = [Country() for i in range(100)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        # Calculate max_batch_size based on fields and objs\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        # Use a batch size greater than max_batch_size\n+        explicit_batch_size = max_batch_size + 10\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=explicit_batch_size)\n+\n     @skipUnlessDBFeature('has_bulk_insert')\n     def test_explicit_batch_size_efficiency(self):\n         objs = [TwoFields(f1=i, f2=i) for i in range(0, 100)]\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..c00a6d0 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -39,8 +39,19 @@ class Gender(models.TextChoices):\n \n     __empty__ = '(Undeclared)'\n \n+from django.test import SimpleTestCase\n \n class ChoicesTests(SimpleTestCase):\n+\n+    def test_str_representation_textchoices(self):\n+        for member in YearInSchool:\n+            with self.subTest(member=member):\n+                self.assertEqual(str(member), member.value)\n+\n+    def test_str_representation_integerchoices(self):\n+        for member in Suit:\n+            with self.subTest(member=member):\n+                self.assertEqual(str(member), str(member.value))\n     def test_integerchoices(self):\n         self.assertEqual(Suit.choices, [(1, 'Diamond'), (2, 'Spade'), (3, 'Heart'), (4, 'Club')])\n         self.assertEqual(Suit.labels, ['Diamond', 'Spade', 'Heart', 'Club'])\n",
  "django__django-11999": "",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..b2f7c3a 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,12 +9,16 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db import connection\n+from django.db.models import Index\n from django.test.utils import override_settings\n from django.utils import timezone\n \n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n+from django.db import connection\n+from django.db.models import Index\n \n \n class SchemaIndexesTests(TestCase):\n@@ -22,7 +26,45 @@ class SchemaIndexesTests(TestCase):\n     Test index handling by the db.backends.schema infrastructure.\n     \"\"\"\n \n-    def test_index_name_hash(self):\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_list_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n         \"\"\"\n         Index names should be deterministic.\n         \"\"\"\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..4062cdf 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,7 +1,8 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n-from django.db.models import CharField, F, Q\n+from django.db.models import CharField, F, Q, LookUp\n from django.db.models.expressions import SimpleCol\n from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n@@ -107,7 +108,21 @@ class TestQuery(SimpleTestCase):\n         self.assertIsInstance(b_isnull.lhs, SimpleCol)\n         self.assertEqual(b_isnull.lhs.target, ObjectC._meta.get_field('objectb'))\n \n-    def test_clone_select_related(self):\n+    def test_list_input_preserved_in_exact(self):\n+        # Check that a list input remains a list for Exact lookups\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n+        \n+    def test_tuple_input_preserved_in_exact(self):\n+        # Check that a tuple input remains a tuple for Exact lookups\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('a', 'b'))\n         query = Query(Item)\n         query.add_select_related(['creator'])\n         clone = query.clone()\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..492b2ff 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -733,6 +733,35 @@ class WriterTests(SimpleTestCase):\n         string = MigrationWriter.serialize(models.CharField(default=DeconstructibleInstances))[0]\n         self.assertEqual(string, \"models.CharField(default=migrations.test_writer.DeconstructibleInstances)\")\n \n+    def test_nested_class_serialization(self):\n+        \"\"\"\n+        Test case for verifying correct path resolution for nested classes in migrations.\n+        This ensures that inner classes are correctly referenced in migrations.\n+        \"\"\"\n+\n+        class Outer:\n+            class Inner(models.CharField):\n+                def __init__(self, *args, **kwargs):\n+                    super().__init__(*args, **kwargs)\n+\n+        class A(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        # Simulate migration operation serialization\n+        migration = migrations.CreateModel(\n+            name='A',\n+            fields=[\n+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n+                ('field', Outer.Inner(max_length=20)),\n+            ],\n+        )\n+\n+        writer = MigrationWriter(migration)\n+        migration_string = writer.as_string()\n+\n+        # Check if the string correctly refers to test1.models.Outer.Inner\n+        self.assertIn(\"test1.models.Outer.Inner\", migration_string)\n+\n     def test_register_serializer(self):\n         class ComplexSerializer(BaseSerializer):\n             def serialize(self):\n@@ -746,4 +775,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..d5f6fbe 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -844,6 +844,27 @@ class ChangeListTests(TestCase):\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 2)\n \n+    def test_get_list_editable_queryset_with_special_chars_in_prefix(self):\n+        # Additional test case for prefixes with special regex characters\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'f^rm*-TOTAL_FORMS': '2',\n+            'f^rm*-INITIAL_FORMS': '2',\n+            'f^rm*-MIN_NUM_FORMS': '0',\n+            'f^rm*-MAX_NUM_FORMS': '1000',\n+            'f^rm*-0-uuid': str(a.pk),\n+            'f^rm*-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='f^rm*')\n+        self.assertEqual(queryset.count(), 1)\n+\n     def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/forms_tests/widget_tests/test_checkboxinput.py b/tests/forms_tests/widget_tests/test_checkboxinput.py\nindex 5c5e45d..737969b 100644\n--- a/tests/forms_tests/widget_tests/test_checkboxinput.py\n+++ b/tests/forms_tests/widget_tests/test_checkboxinput.py\n@@ -81,6 +81,21 @@ class CheckboxInputTest(WidgetTest):\n         result for unchecked checkboxes).\n         \"\"\"\n         self.assertFalse(self.widget.value_from_datadict({}, {}, 'testing'))\n+    def test_get_context_does_not_mutate_attrs(self):\n+        attrs = {'checked': False}\n+        self.widget.get_context('name', True, attrs)\n+        self.assertIs(attrs['checked'], False)\n+\n+    def test_checkbox_get_context_attrs(self):\n+        context = SplitArrayWidget(\n+            forms.CheckboxInput(),\n+            size=2,\n+        ).get_context('name', [True, False])\n+        self.assertEqual(context['widget']['value'], '[True, False]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {}]\n+        )\n \n     def test_value_from_datadict_string_int(self):\n         value = self.widget.value_from_datadict({'testing': '0'}, {}, 'testing')\n@@ -88,4 +103,4 @@ class CheckboxInputTest(WidgetTest):\n \n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({'field': 'value'}, {}, 'field'), False)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n+        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..f0a3a04 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -256,6 +256,9 @@ class SmallPKData(models.Model):\n class UUIDData(models.Model):\n     data = models.UUIDField(primary_key=True)\n \n+class UUIDDefaultData(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4)\n+    name = models.CharField(blank=True, max_length=100)\n \n class FKToUUID(models.Model):\n     data = models.ForeignKey(UUIDData, models.CASCADE)\n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..37e6b43 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -77,6 +77,22 @@ class SimpleTagTests(TagTestCase):\n                 'simple_only_unlimited_args - Expected result: 37, 42, 56, 89'),\n             ('{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+             'simple_keyword_only_default - Expected result: 37'),\n+        ]\n+        \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+    def test_simple_tag_errors(self):\n+        errors = [\n+            (\"'simple_unlimited_args_kwargs' received some positional argument(s) after some keyword argument(s)\",\n+             '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n+            (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n+             '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+             '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n         ]\n \n         for entry in templates:\n@@ -101,6 +117,22 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+             'simple_keyword_only_default - Expected result: 37'),\n+        ]\n+        \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+    def test_simple_tag_errors(self):\n+        errors = [\n+            (\"'simple_unlimited_args_kwargs' received some positional argument(s) after some keyword argument(s)\",\n+             '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n+            (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n+             '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+             '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n         ]\n \n         for entry in errors:\n@@ -190,13 +222,58 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_only_unlimited_args - Expected result: 37, 42, 56, 89\\n'),\n             ('{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+             'simple_keyword_only_default - Expected result: 37'),\n+        ]\n+        \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+    def test_simple_tag_errors(self):\n+        errors = [\n+            (\"'simple_unlimited_args_kwargs' received some positional argument(s) after some keyword argument(s)\",\n+             '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n+            (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n+             '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+             '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n         ]\n \n         for entry in templates:\n             t = self.engine.from_string(entry[0])\n             self.assertEqual(t.render(c), entry[1])\n \n+        \n     def test_inclusion_tag_errors(self):\n+        errors = [\n+            (\"'inclusion_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+             '{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 kwarg=42 %}'),\n+            ('{% load custom %}{% simple_keyword_only_default kwarg=37 %}',\n+             'simple_keyword_only_default - Expected result: 37'),\n+        ]\n+        \n+        for entry in templates:\n+            t = self.engine.from_string(entry[0])\n+            self.assertEqual(t.render(c), entry[1])\n+\n+    def test_simple_tag_errors(self):\n+        errors = [\n+            (\"'simple_unlimited_args_kwargs' received some positional argument(s) after some keyword argument(s)\",\n+             '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n+            (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n+             '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+             '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n+        ]\n+\n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(entry[1])\n+\n+        for entry in errors:\n+            with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n+                self.engine.from_string(\"%s as var %%}\" % entry[1][0:-2])\n         errors = [\n             (\"'inclusion_one_default' received unexpected keyword argument 'three'\",\n                 '{% load inclusion %}{% inclusion_one_default 99 two=\"hello\" three=\"foo\" %}'),\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..c9379ce 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2412,6 +2413,27 @@ Password: <input type=\"password\" name=\"password\" required>\n <option value=\"false\">No</option>\n </select>\"\"\")\n         p = Person({'name': 'Joe', 'is_cool': 'false'}, auto_id=False)\n+\n+    def test_fileinput_with_initial_data(self):\n+        # Test FileInput's behavior with and without initial data.\n+        class FileForm(Form):\n+            file1 = FileField(widget=forms.FileInput)\n+\n+        # File field without initial data should have 'required' attribute\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+        # File field with initial data should not have 'required' attribute\n+        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+    def test_forms_with_file_fields(self):\n         self.assertHTMLEqual(str(p['is_cool']), \"\"\"<select name=\"is_cool\">\n <option value=\"unknown\">Unknown</option>\n <option value=\"true\">Yes</option>\n",
  "django__django-12304": "diff --git a/tests/template_tests/test_callables.py b/tests/template_tests/test_callables.py\nindex d71266b..6859455 100644\n--- a/tests/template_tests/test_callables.py\n+++ b/tests/template_tests/test_callables.py\n@@ -1,6 +1,7 @@\n+\n from unittest import TestCase\n \n-from django.template import Context, Engine\n+from django.template import Context, Engine, Template\n \n \n class CallableVariablesTests(TestCase):\n@@ -10,7 +11,17 @@ class CallableVariablesTests(TestCase):\n         cls.engine = Engine()\n         super().setUpClass()\n \n-    def test_callable(self):\n+    def test_enumeration_in_templates(self):\n+        class YearInSchool(models.TextChoices):\n+            FRESHMAN = 'FR', 'Freshman'\n+            SOPHOMORE = 'SO', 'Sophomore'\n+            JUNIOR = 'JR', 'Junior'\n+            SENIOR = 'SR', 'Senior'\n+\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}Freshman{% endif %}')\n+        context = Context({'student': {'year_in_school': YearInSchool.FRESHMAN}, 'YearInSchool': YearInSchool})\n+        output = template.render(context)\n+        self.assertEqual(output, 'Freshman')\n \n         class Doodad:\n             def __init__(self, value):\n@@ -122,4 +133,4 @@ class CallableVariablesTests(TestCase):\n \n         # Double-check that the object was really never called during the\n         # template rendering.\n-        self.assertEqual(my_doodad.num_calls, 0)\n+        self.assertEqual(my_doodad.num_calls, 0)\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..72fe318 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -176,6 +176,31 @@ class UtilsTests(SimpleTestCase):\n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n \n+    def test_json_display_for_field(self):\n+        \"\"\"\n+        Tests that JSONField values are correctly displayed\n+        as JSON when the field is readonly in the admin.\n+        \"\"\"\n+        tests = [\n+            # Valid JSON\n+            ({\"foo\": \"bar\"}, '{\"foo\": \"bar\"}'),\n+            ([1, 2, 3], '[1, 2, 3]'),\n+            # String values should be quoted as JSON strings\n+            (\"a\", '\"a\"'),\n+            # JSON's behaviour on types not supported by JSON\n+            ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),  # This is expected to show invalid JSON as is\n+            (2.5, '2.5'),  # Float value\n+            (True, 'true'),  # Boolean value\n+            (None, 'null'),  # None should be converted to \"null\"\n+        ]\n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                actual_display = display_for_field(\n+                    value, models.JSONField(), self.empty_value\n+                )\n+                self.assertEqual(actual_display, expected_display)\n+        self.assertEqual(display_value, self.empty_value)\n+\n     def test_number_formats_display_for_field(self):\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..b9fe338 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1015,6 +1015,25 @@ class OtherModelTests(SimpleTestCase):\n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n \n+    def test_onetoone_with_multiple_references(self):\n+        class Document(models.Model):\n+            pass\n+\n+        # Test with correct order - should not raise any exception\n+        class PickingCorrect(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        self.assertEqual(PickingCorrect.check(), [])\n+\n+        # Swap order, which was causing issues\n+        class PickingIncorrect(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        # This should pass if the issue is resolved\n+        self.assertEqual(PickingIncorrect.check(), [])\n+\n     def test_m2m_table_name_clash(self):\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n",
  "django__django-12419": "",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..4925068 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -13,11 +13,46 @@ from django.db.models import (\n     Func, IntegerField, Max, Min, Model, OrderBy, OuterRef, Q, StdDev,\n     Subquery, Sum, TimeField, UUIDField, Value, Variance, When,\n )\n+class SimpleLazyObjectSubqueryTests(TestCase):\n+    def setUp(self):\n+        # Create initial data required for the tests\n+        self.owner_user = User.objects.create_user(\"testuser\")\n+        self.max = Employee.objects.create(firstname=\"Max\", lastname=\"Mustermann\", salary=1000)\n+        self.manager = Manager.objects.create(name=\"Manager\")\n+        self.max.manager = self.manager\n+        self.max.save()\n+\n+    def test_subquery_with_simple_lazy_object(self):\n+        # Test subquery with SimpleLazyObject against actual user object\n+        user_lazy_object = SimpleLazyObject(lambda: User.objects.get(username=\"testuser\"))\n+        owner_user_subquery = Subquery(\n+            C.objects.filter(\n+                owner=OuterRef(\"pk\")\n+            ).values(\"owner\")\n+        )\n+        qs = A.objects.annotate(owner_user=owner_user_subquery).filter(owner_user=user_lazy_object)\n+        self.assertEqual(qs.count(), 0)  # Assuming there are no matches\n+\n+    def test_manager_subquery_with_simple_lazy_object(self):\n+        # Test structure based on the original patch, expanded to check consistency\n+        max_manager_lazy = SimpleLazyObject(lambda: Manager.objects.get(pk=self.manager.pk))\n+        qs = Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    lastname=OuterRef('ceo__lastname')\n+                ).values('manager')\n+            )\n+        ).filter(ceo_manager=max_manager_lazy)\n+\n+        # Check to ensure there's a single expected company associated\n+        self.assertEqual(qs.first(), self.example_inc)\n+\n from django.db.models.expressions import Col, Combinable, Random, RawSQL, Ref\n from django.db.models.functions import (\n     Coalesce, Concat, Left, Length, Lower, Substr, Upper,\n )\n from django.db.models.sql import constants\n+from django.utils.functional import SimpleLazyObject\n from django.db.models.sql.datastructures import Join\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..3dbd39b 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -4,9 +4,62 @@ import re\n from datetime import datetime, timedelta\n from importlib import import_module\n \n-import pytz\n+class TestFormfieldForManyToMany(TestCase):\n+    def test_override_widget_with_checkbox_select_multiple(self):\n+        \"\"\"\n+        Test that formfield_for_manytomany allows overriding the widget\n+        to CheckboxSelectMultiple.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n \n+    def test_preserve_filter_horizontal_overrides(self):\n+        \"\"\"\n+        Test that setting filter_horizontal doesn't prevent overriding the widget.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_horizontal = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n+\n+    def test_preserve_raw_id_fields_overrides(self):\n+        \"\"\"\n+        Test that setting raw_id_fields doesn't prevent overriding the widget.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            raw_id_fields = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n+\n+    def test_preserve_autocomplete_fields_overrides(self):\n+        \"\"\"\n+        Test that setting autocomplete_fields doesn't prevent overriding the widget.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            autocomplete_fields = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n+\n+import pytz\n from django import forms\n+from django.db.models import ManyToManyField\n from django.conf import settings\n from django.contrib import admin\n from django.contrib.admin import widgets\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..d7896a8 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -8,7 +8,8 @@ from django.db import connection\n from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n-from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db import models\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -194,7 +195,43 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    def test_in_bulk_meta_constraint(self):\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint(self):\n+        class Model(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(\n+                        fields=['ean'],\n+                        name='partial_ean_unique',\n+                        condition=models.Q(is_active=True)\n+                    ),\n+                    models.UniqueConstraint(\n+                        fields=['brand', 'name'],\n+                        name='together_brand_name_unique',\n+                    ),\n+                ]\n+        \n+        msg = \"in_bulk()'s field_name must be a unique field but '%s' isn't.\"\n+        for field_name in ['brand', 'ean']:\n+            with self.subTest(field_name=field_name):\n+                with self.assertRaisesMessage(ValueError, msg % field_name):\n+                    Model.objects.in_bulk(field_name=field_name)\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..1b169ab 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -893,7 +893,22 @@ class OtherModelTests(SimpleTestCase):\n         with register_lookup(models.CharField, Lower):\n             self.assertEqual(Model.check(), [])\n \n-    def test_ordering_pointing_to_related_model_pk(self):\n+    def test_ordering_with_isnull_lookup(self):\n+        class Supply(models.Model):\n+            pass\n+\n+        class Product(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE, null=True)\n+            parent = models.ForeignKey('self', models.SET_NULL, null=True)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        # Ensure that the Model checks do not raise any errors or warnings.\n+        self.assertEqual(Stock.check(), [])\n         class Parent(models.Model):\n             pass\n \n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..9d11e20 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,24 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n-        with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() & Combinable()\n-\n-    def test_reversed_or(self):\n-        with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_constant_expression_not_in_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        # Simulate the framework's use-case scenario to ensure constants are not in GROUP BY\n+        # Assumes a custom method or utility to check SQL generation behavior is available (mocking SQL generation)\n+        group_by_cols = expr.get_group_by_cols(alias=None)\n+        self.assertNotIn(3, group_by_cols)\n+        self.assertEqual(group_by_cols, [])\n+\n+    def test_non_constant_expression_in_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('test')), output_field=IntegerField())\n+        group_by_cols = expr.get_group_by_cols(alias=None)\n+        self.assertIn(expr.expression, group_by_cols)\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..9f998c6 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1210,8 +1210,34 @@ class Queries1Tests(TestCase):\n             [],\n         )\n \n+from django.test import TestCase\n+from .models import ExtraInfo, Author, Report, ProductMetaData, ProductMetaDataType\n+from django.db.utils import NotSupportedError\n \n-class Queries2Tests(TestCase):\n+class FilterableFieldTests(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        # Create a ProductMetaDataType instance with filterable set to False\n+        filterable_type = ProductMetaDataType.objects.create(label='Test Type', filterable=False)\n+        \n+        # Create ProductMetaData linked to filterable_type\n+        cls.metadata = ProductMetaData.objects.create(\n+            id=1,\n+            product_id=1,  # Assuming `Produit` model instance exists with id=1\n+            value='Dark Vador',\n+            marketplace_id=1,  # Assuming `Plateforme` model instance exists with id=1\n+            date_created=timezone.now(),\n+            metadata_type=filterable_type\n+        )\n+    \n+    def test_filter_with_non_filterable_field(self):\n+        # Attempt to filter ProductMetaData using metadata_type which has filterable=False\n+        try:\n+            result = ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=self.metadata.metadata_type)\n+            self.assertEqual(list(result), [self.metadata])\n+        except NotSupportedError:\n+            self.fail(\"NotSupportedError was raised unexpectedly when using a field with filterable=False.\")\n     @classmethod\n     def setUpTestData(cls):\n         Number.objects.create(num=4)\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..bbe1b4d 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,38 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_fk(self):\n+        # Setup data similar to the issue description\n+        author_1 = Author.objects.create(name='Author 1')\n+        author_2 = Author.objects.create(name='Author 2')\n+\n+        article_1 = Article.objects.create(\n+            headline='Article 1', pub_date='2023-10-01', author=author_1\n+        )\n+        article_2 = Article.objects.create(\n+            headline='Article 2', pub_date='2023-10-02', author=author_2\n+        )\n+\n+        # Test ordering by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__name'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n+        # Test ordering by self-referential foreign key id\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n+        # Test ordering with reverse order\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__name'),\n+            ['Article 2', 'Article 1'],\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +385,38 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_order_by_self_referential_fk(self):\n+        # Setup data similar to the issue description\n+        author_1 = Author.objects.create(name='Author 1')\n+        author_2 = Author.objects.create(name='Author 2')\n+\n+        article_1 = Article.objects.create(\n+            headline='Article 1', pub_date='2023-10-01', author=author_1\n+        )\n+        article_2 = Article.objects.create(\n+            headline='Article 2', pub_date='2023-10-02', author=author_2\n+        )\n+\n+        # Test ordering by self-referential foreign key\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__name'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n+        # Test ordering by self-referential foreign key id\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+\n+        # Test ordering with reverse order\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__name'),\n+            ['Article 2', 'Article 1'],\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "",
  "django__django-13109": "",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..f86b2a7 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,6 +867,37 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n+    def test_reference_mixed_case_app_label(self):\n+        \"\"\"\n+        Test for ForeignKey with mixed-case app label.\n+        \"\"\"\n+        new_apps = Apps()\n+\n+        class Author(models.Model):\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Book(models.Model):\n+            author = models.ForeignKey(Author, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        class Magazine(models.Model):\n+            authors = models.ManyToManyField(Author)\n+\n+            class Meta:\n+                app_label = 'MiXedCase_migrations'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Author))\n+        project_state.add_model(ModelState.from_model(Book))\n+        project_state.add_model(ModelState.from_model(Magazine))\n+        self.assertEqual(len(project_state.apps.get_models()), 3)\n+\n     def test_real_apps(self):\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..d66b932 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1584,6 +1584,35 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_wrapper(self):\n+        \"\"\"Ensure temporal subtraction now works without ExpressionWrapper.\"\"\"\n+        # Example test cases for datetime subtraction\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        first_obj = queryset.first()\n+        self.assertIsInstance(first_obj.delta, datetime.timedelta)\n+        self.assertEqual(first_obj.delta, first_obj.end - first_obj.start)\n+\n+        # Edge case: end equals start\n+        Experiment.objects.create(name='e_empty', start=datetime.datetime.now(), end=datetime.datetime.now())\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        ).filter(name='e_empty')\n+        self.assertEqual(queryset.first().delta, datetime.timedelta())\n+\n+        # Maximum precision\n+        delta = datetime.timedelta(microseconds=999999)\n+        exp = Experiment.objects.create(\n+            name='e_microseconds', \n+            start=datetime.datetime.now(), \n+            end=datetime.datetime.now() + delta\n+        )\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        ).filter(name='e_microseconds')\n+        self.assertEqual(queryset.first().delta, delta)\n+\n     def test_datetime_subtraction(self):\n         under_estimate = [\n             e.name for e in Experiment.objects.filter(estimated_time__gt=F('end') - F('start'))\n",
  "django__django-13158": "",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..ead91dc 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -34,15 +34,30 @@ from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n \n class SessionTestsMixin:\n-    # This does not inherit from TestCase to avoid any tests being run with this\n-    # class, which wouldn't work, and to allow different TestCase subclasses to\n+    # This does not inherit from TestCase to avoid any tests being run with this \n+    # class, which wouldn't work, and to allow different TestCase subclasses to \n     # be used.\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_default_hashing_algorithm_with_legacy_decode(self):\n+        with override_settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'key': 'value'}\n+            encoded = self.session._legacy_encode(data)\n+            decoded = self.session._legacy_decode(encoded)\n+            self.assertEqual(decoded, data)\n+\n+    def _legacy_encode(self, data):\n+        # Simulates the old encoding process for legacy Django sessions.\n+        serialized = self.serializer().dumps(data)\n+        hash_value = self._hash(serialized)\n+        return base64.b64encode(f\"{hash_value}:{serialized}\".encode('ascii')).decode('ascii')\n+\n     backend = None  # subclasses must specify\n \n     def setUp(self):\n",
  "django__django-13297": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..9420e2a 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -4,6 +4,7 @@ from decimal import Decimal\n from unittest import mock, skipUnless\n \n from django import forms\n+from django.db.models import Q\n from django.core.exceptions import (\n     NON_FIELD_ERRORS, FieldError, ImproperlyConfigured, ValidationError,\n )\n@@ -2830,7 +2831,52 @@ class LimitChoicesToTests(TestCase):\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n \n-class FormFieldCallbackTests(SimpleTestCase):\n+class TestLimitChoicesToRemoveDuplicates(TestCase):\n+    def setUp(self):\n+        self.marley = Character.objects.create(username='Marley', last_action='2023-01-01T12:00:00Z')\n+        self.threepwood = Character.objects.create(username='Threepwood', last_action='2023-01-01T12:00:00Z')\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_with_single_condition(self):\n+        class SimpleCharacterDetails(models.Model):\n+            character = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=Q(jokes__funny=True),\n+                related_name='simple_details',\n+            )\n+        \n+        class SimpleCharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = SimpleCharacterDetails\n+                fields = '__all__'\n+        \n+        form = SimpleCharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character'].queryset,\n+            [self.marley, self.threepwood]\n+        )\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_with_no_matches(self):\n+        class NoMatchCharacterDetails(models.Model):\n+            character = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=Q(jokes__funny=False),\n+                related_name='nomatch_details',\n+            )\n+        \n+        class NoMatchCharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = NoMatchCharacterDetails\n+                fields = '__all__'\n+        \n+        form = NoMatchCharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character'].queryset,\n+            []\n+        )\n \n     def test_baseform_with_widgets_in_meta(self):\n         \"\"\"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\"\"\"\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..cc9d556 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -906,6 +906,15 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         obj = FileField(storage=GetStorage)\n         self.assertIsInstance(obj.storage, BaseStorage)\n \n+    def test_callable_storage_deconstructs_correctly(self):\n+        \"\"\"\n+        Test that a FileField with a callable storage deconstructs correctly.\n+        \"\"\"\n+        storage_field = Storage._meta.get_field('storage_callable')\n+        name, path, args, kwargs = storage_field.deconstruct()\n+        # Ensure that the 'storage' kwarg is the callable itself, not the evaluated result.\n+        self.assertIs(kwargs['storage'], callable_storage)\n+\n     def test_callable_storage_file_field_in_model(self):\n         obj = Storage()\n         self.assertEqual(obj.storage_callable.storage, temp_storage)\n",
  "django__django-13346": "",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..752d2fd 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -17,7 +17,10 @@ from django.db.models.functions import (\n from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from datetime import datetime\n+import pytz\n from django.utils import timezone\n+from django.db.models import Count\n \n from ..models import Author, DTModel, Fan\n \n@@ -1133,7 +1136,43 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_trunc_date_with_timezone(self):\n+        melb = pytz.timezone('Australia/Melbourne')\n+        new_york = pytz.timezone('America/New_York')\n+        \n+        start_datetime = datetime(2023, 3, 26, 15, 0, 0)  # Assume some arbitrary datetime\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+        \n+        self.create_model(start_datetime)\n+        \n+        model = DTModel.objects.annotate(\n+            utc_date=TruncDate('start_datetime', tzinfo=timezone.utc),\n+            melb_date=TruncDate('start_datetime', tzinfo=melb),\n+            new_york_date=TruncDate('start_datetime', tzinfo=new_york),\n+        ).first()\n+\n+        self.assertEqual(model.utc_date, start_datetime.astimezone(timezone.utc).date())\n+        self.assertEqual(model.melb_date, start_datetime.astimezone(melb).date())\n+        self.assertEqual(model.new_york_date, start_datetime.astimezone(new_york).date())\n+    \n+    def test_trunc_time_with_timezone(self):\n+        melb = pytz.timezone('Australia/Melbourne')\n+        new_york = pytz.timezone('America/New_York')\n+\n+        start_datetime = datetime(2023, 3, 26, 15, 0, 0)  # Assume some arbitrary datetime\n+        start_datetime = timezone.make_aware(start_datetime, timezone.utc)\n+        \n+        self.create_model(start_datetime)\n+\n+        model = DTModel.objects.annotate(\n+            utc_time=TruncTime('start_datetime', tzinfo=timezone.utc),\n+            melb_time=TruncTime('start_datetime', tzinfo=melb),\n+            new_york_time=TruncTime('start_datetime', tzinfo=new_york),\n+        ).first()\n+\n+        self.assertEqual(model.utc_time, start_datetime.astimezone(timezone.utc).time())\n+        self.assertEqual(model.melb_time, start_datetime.astimezone(melb).time())\n+        self.assertEqual(model.new_york_time, start_datetime.astimezone(new_york).time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..912f2ea 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -102,8 +102,30 @@ class BasicFieldTests(SimpleTestCase):\n         name, path, args, kwargs = Nested.Field().deconstruct()\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n+class AbstractModelFieldTests(SimpleTestCase):\n+    def test_abstract_inherited_field_equality_and_hashing(self):\n+        \"\"\"Inherited fields from abstract models in different models are not equal and have distinct hashes.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n \n-class ChoicesTests(SimpleTestCase):\n+            class Meta:\n+                abstract = True\n+\n+        class ConcreteModel1(AbstractModel):\n+            pass\n+\n+        class ConcreteModel2(AbstractModel):\n+            pass\n+\n+        field_concrete1 = ConcreteModel1._meta.get_field('field')\n+        field_concrete2 = ConcreteModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(field_concrete1, field_concrete2, \"Fields from different models should not be equal.\")\n+        self.assertNotEqual(hash(field_concrete1), hash(field_concrete2), \"Hashes of fields from different models should not match.\")\n+\n+        # Ensure ordering comparison takes model into account\n+        self.assertLess(field_concrete1.creation_counter, field_concrete2.creation_counter)\n+        self.assertLess(field_concrete2, field_concrete1)\n \n     @classmethod\n     def setUpClass(cls):\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..dd160ab 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -8,7 +9,7 @@ from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..268e77e 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2085,7 +2085,19 @@ class QuerysetOrderedTests(unittest.TestCase):\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n \n-@skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+from django.db.models import Count\n+from .models import Tag, Foo\n+\n+class AnnotateOrderingTests(TestCase):\n+    def test_annotated_default_ordering_on_foo(self):\n+        qs = Foo.objects.annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_annotated_values_default_ordering_on_foo(self):\n+        qs = Foo.objects.values('name').annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n class SubqueryTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..11a409b 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -342,7 +342,25 @@ class CommandTests(SimpleTestCase):\n         self.assertEqual(parser.epilog, epilog)\n \n \n-class CommandRunTests(AdminScriptTestCase):\n+from django.core.management import call_command\n+from io import StringIO\n+import mock\n+from django.test import SimpleTestCase\n+\n+class CommandOutputFlushTests(SimpleTestCase):\n+    def test_flush_in_migration_command(self):\n+        out = StringIO()\n+        with mock.patch('django.core.management.base.OutputWrapper.flush') as mocked_flush, \\\n+             mock.patch('django.core.management.commands.migrate.Command.handle', return_value=None):\n+            \n+            # Call a mocked migrate command\n+            call_command('migrate', stdout=out)\n+            output = out.getvalue()\n+        \n+        # Ensure the output is generated and flush is called\n+        self.assertIn('Operations to perform:', output)\n+        self.assertIn('Running migrations:', output)\n+        self.assertTrue(mocked_flush.called, \"Output flush was not called during the command execution.\")\n     \"\"\"\n     Tests that need to run by simulating the command line, not by call_command.\n     \"\"\"\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..d9b97fe 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,10 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n-from django.test import TestCase\n+from .with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +38,28 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_invalid_after_email_change(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                # Change the email address\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                # After saving the new email, the token should now be invalid\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..1ddcb5e 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,9 +1,11 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n from django.core import checks\n from django.db import models\n+from django.db.models import Q, UniqueConstraint\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n )\n@@ -137,8 +139,41 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n                 id='auth.E005',\n             ),\n         ])\n+    @override_settings(AUTH_USER_MODEL='auth_tests.UserWithConditionalUniqueConstraint')\n+    def test_username_conditional_unique_constraint(self):\n+        \"\"\"\n+        Test to ensure auth.E003 is skipped when there is a conditional unique constraint\n+        on the USERNAME_FIELD.\n+        \"\"\"\n+        class UserWithConditionalUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n \n-    def test_non_clashing_custom_permissions(self):\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=['username'],\n+                        name='username_conditional_unique',\n+                        condition=Q(is_active=True),\n+                    ),\n+                ]\n+\n+        # With a conditional unique constraint, there should be no errors\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n+        # Test to ensure warnings are shown if a non-default authentication backend is used\n+        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n+            errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+            self.assertEqual(errors, [\n+                checks.Warning(\n+                    \"'UserWithConditionalUniqueConstraint.username' is named as the 'USERNAME_FIELD', \"\n+                    \"but it is not unique.\",\n+                    hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n+                    obj=UserWithConditionalUniqueConstraint,\n+                    id='auth.W004',\n+                ),\n+            ])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..d5b8d12 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1310,8 +1310,18 @@ class AggregateTestCase(TestCase):\n             contact_publisher__isnull=False,\n         ).annotate(count=Count('authors'))\n         self.assertSequenceEqual(books_qs, [book])\n+\n+    def test_aggregation_random_ordering_does_not_affect_count(self):\n+        \"\"\"\n+        Testing the issue where using order_by('?') would break the aggregation\n+        by including RANDOM() in the GROUP BY clause.\n+        \"\"\"\n+        things = Thing.objects.annotate(rc=Count('related')).order_by('?')\n+        self.assertQuerysetEqual(things, [\n+            (1, 2),\n+        ], lambda t: (t.id, t.rc), ordered=False)\n         # FIXME: GROUP BY doesn't need to include a subquery with\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..2a96315 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -802,6 +803,8 @@ class BasicExpressionsTests(TestCase):\n         )\n \n \n+from collections import namedtuple\n+\n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n@@ -815,7 +818,12 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..e578b24 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -28,6 +28,7 @@ from django.core.management.commands.testserver import (\n )\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n+from django.test.utils import captured_stderr, captured_stdout\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n@@ -1865,9 +1866,39 @@ class ArgumentOrder(AdminScriptTestCase):\n             \"('settings', 'alternate_settings'), ('traceback', False), \"\n             \"('verbosity', 1)]\" % option_b\n         )\n+class ExecuteFromCommandLineTestCase(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_when_sys_argv_is_none(self):\n+        \"\"\"\n+        Test that execute_from_command_line works correctly when sys.argv[0] is None.\n+        \"\"\"\n+        args = ['check']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['custom-django-admin'] + args)\n+        self.assertIn('usage: custom-django-admin check', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n \n-\n-@override_settings(ROOT_URLCONF='admin_scripts.urls')\n+    def test_program_name_with_different_executable(self):\n+        \"\"\"\n+        Test that exec_from_command_line applies the correct program name when argv has a different executable.\n+        \"\"\"\n+        args = ['runserver', '--noreload']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['/usr/bin/python3'] + args):\n+                execute_from_command_line(['my-django-admin'] + args)\n+        self.assertIn('usage: my-django-admin runserver [options] [args]', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n class StartProject(LiveServerTestCase, AdminScriptTestCase):\n \n     available_apps = [\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..d9821e8 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -75,8 +76,34 @@ class DateFormatTests(SimpleTestCase):\n         # Regression test for #18951\n         dt = datetime(2009, 5, 16, microsecond=123)\n         self.assertEqual(dateformat.format(dt, 'u'), '000123')\n-\n-    def test_date_formats(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n+\n+    def test_edge_cases_year_format(self):\n+        # Add edge case tests\n+        tests = [\n+            (100, '00'),  # year 100 should be formatted as '00'\n+            (999, '99'),  # year 999 should be formatted as '99'\n+            (1000, '00'), # year 1000 should be considered as a new century and '00'\n+            (2000, '00'), # year 2000 should be '00' as exactly a century\n+            (123, '23')   # additional regression test\n+        ]\n+        for year, expected in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected,\n+                )\n         my_birthday = datetime(1979, 7, 8, 22, 00)\n         timestamp = datetime(2008, 5, 19, 11, 45, 23, 123456)\n \n@@ -164,4 +191,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "",
  "django__django-13786": "",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..ac51a08 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,9 +1,12 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n from ..utils import setup\n+from django.utils.functional import lazy\n+from django.utils.translation import gettext_lazy\n \n \n class AddTests(SimpleTestCase):\n@@ -45,9 +48,26 @@ class AddTests(SimpleTestCase):\n     def test_add07(self):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n \n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n \n-class FunctionTests(SimpleTestCase):\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n \n     def test_add(self):\n         self.assertEqual(add('1', '2'), 3)\n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..1e9292f 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -11,18 +11,46 @@ from django.db import (\n )\n from django.db.backends.base.base import BaseDatabaseWrapper\n from django.db.backends.signals import connection_created\n+class SQLKeywordsModel(models.Model):\n+    id = models.AutoField(primary_key=True, db_column='select')\n+    reporter = models.ForeignKey(Reporter, models.CASCADE, db_column='where')\n+\n+    class Meta:\n+        db_table = 'order'\n+\n+class ConstraintChecksTest(TransactionTestCase):\n+    available_apps = ['backends']\n+\n+    def setUp(self):\n+        self.r = Reporter.objects.create(first_name='John', last_name='Doe', email='john@example.com')\n+\n+    def test_check_constraints_sql_keywords(self):\n+        with transaction.atomic():\n+            obj = SQLKeywordsModel.objects.create(reporter=self.r)\n+            obj.refresh_from_db()\n+            obj.reporter_id = 30\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n+\n from django.db.backends.utils import CursorWrapper\n from django.db.models.sql.constants import CURSOR\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n     skipUnlessDBFeature,\n+    IntegrityError, connection, transaction\n )\n+from django.db import models\n \n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n     VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n+    IntegrityError, connection, transaction\n )\n+from django.db import models\n \n \n class DateQuotingTest(TestCase):\n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..fa3ba26 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,11 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+import mock\n+from io import StringIO\n+from django.core.management import call_command\n+from django.test import TestCase\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n",
  "django__django-13810": "",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..43afb30 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -7,6 +8,7 @@ from django.db.migrations.exceptions import (\n )\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n+from importlib import import_module\n from django.test import TestCase, modify_settings, override_settings\n \n from .test_base import MigrationTestBase\n@@ -512,6 +514,44 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_frozen'},\n+    )\n+    def test_loading_frozen_environment_package(self):\n+        \"\"\"MigrationLoader loads migrations from regular packages with no __file__ attribute.\"\"\"\n+        test_module = import_module('migrations.test_migrations_frozen')\n+        loader = MigrationLoader(connection)\n+        module_file = test_module.__file__\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+        try:\n+            del test_module.__file__\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            loader.load_disk()\n+            migrations = [\n+                name for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n+\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_no__path__'},\n+    )\n+    def test_loading_module_without__path__(self):\n+        \"\"\"Modules without __path__ should be treated as unmigrated.\"\"\"\n+        loader = MigrationLoader(connection)\n+        loader.load_disk()\n+        migrations = [\n+            name for app, name in loader.disk_migrations\n+            if app == 'migrations'\n+        ]\n+        self.assertEqual(migrations, [])\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..d00e6fd 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -15,6 +15,8 @@ from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n )\n from django.test.utils import isolate_apps\n+from django.core.exceptions import ImproperlyConfigured\n+from unittest import mock\n \n from ..models import Author, Item, Object, Square\n \n@@ -36,7 +38,11 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_below_390(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch('django.db.backends.sqlite3.base.Database', return_value=mock.Mock(sqlite_version_info=(3, 8, 11, 1), sqlite_version='3.8.11.1')), \\\n+             self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..f5f8fca 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -156,7 +156,20 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                 )\n \n \n+from django.utils import autoreload\n+from unittest import mock\n+import sys\n+\n class TestChildArguments(SimpleTestCase):\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n+        )\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_module(self):\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..fd383a1 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -296,7 +296,14 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         }\n         f = ModelChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n+        \n+        # Test with invalid choice for ModelChoiceField and check if 'value' is included\n         self.assertFormErrors(['INVALID CHOICE'], f.clean, '4')\n+        f_with_value = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(), \n+            error_messages={'invalid_choice': 'Select a valid choice. \"%(value)s\" is not one of the available choices.'}\n+        )\n+        self.assertFormErrors(['Select a valid choice. \"4\" is not one of the available choices.'], f_with_value.clean, '4')\n \n         # ModelMultipleChoiceField\n         e = {\n@@ -307,4 +314,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..8031800 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,13 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..b3890a5 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .models import CustomAutoFieldModel\n+from .fields import MyWrapper\n \n from .models import Bar, Business, Employee, Foo\n \n@@ -175,8 +178,21 @@ class BasicCustomPKTests(TestCase):\n             str\n         )\n \n-\n class CustomPKTests(TestCase):\n+    \"\"\"Tests for custom primary key behavior including MyAutoField with from_db_value usage.\"\"\"\n+\n+    def test_my_auto_field_creation(self):\n+        \"\"\"Test that a newly created instance has its id wrapped in MyWrapper.\"\"\"\n+        instance = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(instance.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_my_auto_field_bulk_create(self):\n+        \"\"\"Test that the bulk_create method also wraps ids in MyWrapper.\"\"\"\n+        instances = [CustomAutoFieldModel() for _ in range(5)]\n+        CustomAutoFieldModel.objects.bulk_create(instances)\n+        for instance in instances:\n+            self.assertIsInstance(instance.id, MyWrapper)\n     def test_custom_pk_create(self):\n         \"\"\"\n         New objects can be created both with pk and the custom name\n",
  "django__django-14017": "",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..129d986 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,25 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_files_post_processed(self):\n+        \"\"\"\n+        Test that no file is yielded twice during post processing.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(\n+            clear=False,\n+            dry_run=False,\n+            post_process=True\n+        )\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Check for duplicates in post-processed file list\n+        post_processed_files = stats['post_processed']\n+        duplicate_files = [\n+            file for file in post_processed_files if post_processed_files.count(file) > 1\n+        ]\n+        self.assertEqual(len(duplicate_files), 0, \"Some files were post-processed more than once\")\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +233,25 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_files_post_processed(self):\n+        \"\"\"\n+        Test that no file is yielded twice during post processing.\n+        \"\"\"\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(\n+            clear=False,\n+            dry_run=False,\n+            post_process=True\n+        )\n+        stats = collectstatic_cmd.collect()\n+        \n+        # Check for duplicates in post-processed file list\n+        post_processed_files = stats['post_processed']\n+        duplicate_files = [\n+            file for file in post_processed_files if post_processed_files.count(file) > 1\n+        ]\n+        self.assertEqual(len(duplicate_files), 0, \"Some files were post-processed more than once\")\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..02b4469 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -5,6 +6,7 @@ Tests for stuff in django.utils.datastructures.\n import copy\n import pickle\n \n+from collections.abc import Iterator\n from django.test import SimpleTestCase\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n@@ -13,8 +15,20 @@ from django.utils.datastructures import (\n \n \n class OrderedSetTests(SimpleTestCase):\n-\n-    def test_init_with_iterable(self):\n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        s = reversed(OrderedSet([]))\n+        self.assertIsInstance(s, Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, Iterator)\n+        self.assertEqual(list(s), [42])\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n",
  "django__django-14122": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex b2ec8af..63ad724 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,9 +1,10 @@\n+\n import datetime\n import re\n from decimal import Decimal\n \n from django.core.exceptions import FieldError\n-from django.db import connection\n+from django.db import connection, models\n from django.db.models import (\n     Avg, Case, Count, DecimalField, DurationField, Exists, F, FloatField,\n     IntegerField, Max, Min, OuterRef, Subquery, Sum, Value, When,\n@@ -112,7 +113,50 @@ class AggregateTestCase(TestCase):\n         with self.assertRaisesMessage(FieldError, msg):\n             Author.objects.values('age').order_by(Avg('book__rating'))\n \n-    def test_single_aggregate(self):\n+    def test_meta_ordering_not_in_group_by_aggregate(self):\n+        \"\"\"\n+        Test that Meta.ordering fields are not incorrectly included in the\n+        GROUP BY clause when performing aggregations.\n+        \"\"\"\n+        # Set up any Meta.ordering in Author model to simulate the issue.\n+        # Assuming `Meta.ordering = ['name']` or similar exists in the Author model.\n+        \n+        # Add Meta.ordering to trigger the potential issue\n+        books = Book.objects.values('publisher').annotate(count=Count('pk'))\n+        self.assertCountEqual(books, [\n+            {'publisher': self.p1.id, 'count': 2},\n+            {'publisher': self.p2.id, 'count': 1},\n+            {'publisher': self.p3.id, 'count': 2},\n+            {'publisher': self.p4.id, 'count': 1},\n+        ])\n+\n+        # Check that no ordering fields are present in the SQL GROUP BY clause\n+        with CaptureQueriesContext(connection) as captured_queries:\n+            books = Book.objects.values('publisher').annotate(count=Count('pk')).order_by()\n+            list(books)\n+        \n+        # Extract the actual SQL performed\n+        executed_sql = captured_queries[0]['sql']\n+        \n+        # Ensure 'ORDER BY' is not in GROUP BY clause\n+        # This is a simplification, as normally you'd inspect/extract the GROUP BY section\n+        # of the performed query and confirm `ordering` field isn't present.\n+        \n+        self.assertNotIn('name', executed_sql.lower())\n+\n+        # Similarly test using another model or situation where Meta.ordering could affect\n+        authors = Author.objects.values('id').annotate(count=Count('book'))\n+        self.assertCountEqual(authors, [\n+            {'id': self.a1.id, 'count': 1},\n+            {'id': self.a2.id, 'count': 1},\n+            {'id': self.a3.id, 'count': 1},\n+            {'id': self.a4.id, 'count': 1},\n+            {'id': self.a5.id, 'count': 1},\n+            {'id': self.a6.id, 'count': 1},\n+            {'id': self.a7.id, 'count': 1},\n+            {'id': self.a8.id, 'count': 2},\n+            {'id': self.a9.id, 'count': 1},\n+        ])\n         vals = Author.objects.aggregate(Avg(\"age\"))\n         self.assertEqual(vals, {\"age__avg\": Approximate(37.4, places=1)})\n \n@@ -1339,4 +1383,4 @@ class AggregateTestCase(TestCase):\n             ('Wesley J. Chun', 1),\n             ('Stuart Russell', 1),\n             ('Peter Norvig', 2),\n-        ], lambda a: (a.name, a.contact_count), ordered=False)\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n",
  "django__django-14140": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex 7e095fe..98e8d68 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,4 +1,6 @@\n-from django.db.models import F, Q\n+\n+from django.db.models import Exists, OuterRef, F, Q\n+from .models import Tag, Company, Employee\n from django.test import SimpleTestCase\n \n \n@@ -93,7 +95,13 @@ class QTests(SimpleTestCase):\n         path, args, kwargs = q.deconstruct()\n         self.assertEqual(Q(*args, **kwargs), q)\n \n-    def test_reconstruct_negated(self):\n+    def test_boolean_expression_in_Q_with_Exists(self):\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        q = Q(Exists(is_poc))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(is_poc),))\n+        self.assertEqual(kwargs, {})\n         q = ~Q(price__gt=F('discounted_price'))\n         path, args, kwargs = q.deconstruct()\n         self.assertEqual(Q(*args, **kwargs), q)\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..10b35e1 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,11 +1,34 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n \n+from django.test.utils import isolate_apps\n+\n+class MyBigAutoField(models.BigAutoField):\n+    pass\n+\n+class MySmallAutoField(models.SmallAutoField):\n+    pass\n+\n \n @isolate_apps('model_options')\n class TestDefaultPK(SimpleTestCase):\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.NonexistentAutoField')\n     def test_default_auto_field_setting_nonexistent(self):\n         msg = (\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..e5f779a 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -166,6 +166,14 @@ class TestIterModulesAndFiles(SimpleTestCase):\n class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_dotted(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_module(self):\n         self.assertEqual(\n@@ -175,6 +183,14 @@ class TestChildArguments(SimpleTestCase):\n \n     @mock.patch.dict(sys.modules, {'__main__': test_main})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_dotted(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_non_django_module(self):\n         self.assertEqual(\n@@ -190,6 +206,14 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_dotted(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n@@ -201,6 +225,14 @@ class TestChildArguments(SimpleTestCase):\n                     [exe_path, 'runserver']\n                 )\n \n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package_dotted(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..2997a16 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -229,6 +229,13 @@ TEST_DATA = [\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n+    # Newlines and tabs are not accepted.\n+    (URLValidator(), 'http://www.djangoproject.com\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     # Trailing junk does not take forever to reject\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br ', ValidationError),\n     (URLValidator(), 'http://www.asdasdasdasdsadfm.com.br z', ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..387d92c 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1525,8 +1525,44 @@ class AggregationTests(TestCase):\n             allow_distinct = True\n         DistinctAggregate('foo', distinct=True)\n \n-\n-class JoinPromotionTests(TestCase):\n+from django.db.models import Count, Q\n+from .models import Author, Book, PropertyGroup, ManagementAgent, ManagerTicketRatingCumulativeMovingAverage\n+\n+class SubqueryInGroupByTests(TestCase):\n+    def setUp(self):\n+        # Setup objects with necessary relationships\n+        self.management_agent = ManagementAgent.objects.create(name='Agent1')\n+        # Create PropertyGroups\n+        self.pg1 = PropertyGroup.objects.create(name='PG1')\n+        self.pg2 = PropertyGroup.objects.create(name='PG2')\n+        # Link them with the management agent\n+        self.management_agent.property_groups.add(self.pg1, self.pg2)\n+        self.moving_average = ManagerTicketRatingCumulativeMovingAverage.objects.create(\n+            agent=self.management_agent,\n+            average=50.0,\n+            data_points=10\n+        )\n+\n+    def test_q_object_or_with_select_related(self):\n+        # Directly referencing property_group instances should trigger the issue\n+        queryset = ManagerTicketRatingCumulativeMovingAverage.objects.annotate(\n+            property_group_count=Count('agent__property_groups')\n+        )\n+        results = queryset.filter(\n+            Q(agent__property_groups__in=[self.pg1, self.pg2]) | Q(property_group_count=0)\n+        ).distinct()\n+        # This would have raised the error before the fix\n+        self.assertListEqual(list(results), [self.moving_average])\n+\n+    def test_fixed_behavior_using_ids(self):\n+        queryset = ManagerTicketRatingCumulativeMovingAverage.objects.annotate(\n+            property_group_count=Count('agent__property_groups')\n+        )\n+        # Using ID based filtering should work as it is the workaround mentioned\n+        results = queryset.filter(\n+            Q(agent__property_groups__id__in=[self.pg1.id, self.pg2.id]) | Q(property_group_count=0)\n+        ).distinct()\n+        self.assertListEqual(list(results), [self.moving_average])\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..f905bae 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,7 +38,65 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n-    def test_options_override_settings_proper_values(self):\n+    def test_deprecated_and_non_deprecated_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args_deprecated = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env_deprecated = {'MYSQL_PWD': 'optionpassword'}\n+\n+        expected_args_non_deprecated = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'nondeprecateddbname',\n+        ]\n+        expected_env_non_deprecated = {'MYSQL_PWD': 'nondeprecatedoptionpassword'}\n+\n+        # Deprecated keys test\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'db': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'passwd': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args_deprecated, expected_env_deprecated),\n+        )\n+\n+        # Non-deprecated keys test\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'nondeprecateddbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'nondeprecateddbname',\n+                    'user': 'optionuser',\n+                    'password': 'nondeprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args_non_deprecated, expected_env_non_deprecated),\n+        )\n         settings_port = 444\n         options_port = 555\n         self.assertNotEqual(settings_port, options_port, 'test pre-req')\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..2925caa 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2199,7 +2199,37 @@ class SchemaTests(TransactionTestCase):\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n \n     @skipUnlessDBFeature('supports_expression_indexes')\n-    def test_func_unique_constraint(self):\n+    def test_unique_constraint(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name'], name='name_uq')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        self.assertIs(sql.references_table(table), True)\n+        self.assertIs(sql.references_column(table, 'name'), True)\n+        # Remove constraint.\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        self.assertNotIn(constraint.name, self.get_constraints(table))\n+    \n+    def test_unique_constraint_with_expressions(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(Upper(F('name')), name='u_name_uq')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        self.assertIs(sql.references_table(table), True)\n+        self.assertIs(sql.references_column(table, 'name'), True)\n+        # Remove constraint.\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        self.assertNotIn(constraint.name, self.get_constraints(table))\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n         constraint = UniqueConstraint(Upper('name').desc(), name='func_upper_uq')\n",
  "django__django-14493": "",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..8aaeb63 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -653,6 +653,46 @@ class ExecutorTests(MigrationTestBase):\n             recorder.applied_migrations(),\n         )\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_squashed_and_replaced_migrations_unapplied_properly(self):\n+        \"\"\"Test squashed and its replaced migrations are unapplied properly.\"\"\"\n+        executor = MigrationExecutor(connection)\n+        # Apply squashed migration to be in an applied state\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        try:\n+            # Ensure the squashed migration is marked as applied\n+            self.assertIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+            # Ensure that the replaced migrations are not marked as applied\n+            self.assertNotIn(\n+                ('migrations', '0001_initial'),\n+                executor.recorder.applied_migrations(),\n+            )\n+            self.assertNotIn(\n+                ('migrations', '0002_second'),\n+                executor.recorder.applied_migrations(),\n+            )\n+        finally:\n+            # Unapply the squashed migration\n+            executor.loader.build_graph()\n+            executor.migrate([('migrations', None)])\n+            # Ensure the squashed migration is marked as unapplied\n+            self.assertNotIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+            # Ensure that the replaced migrations are marked as unapplied\n+            self.assertNotIn(\n+                ('migrations', '0001_initial'),\n+                executor.recorder.applied_migrations(),\n+            )\n+            self.assertNotIn(\n+                ('migrations', '0002_second'),\n+                executor.recorder.applied_migrations(),\n+            )\n+\n     # When the feature is False, the operation and the record won't be\n     # performed in a transaction and the test will systematically pass.\n     @skipUnlessDBFeature('can_rollback_ddl')\n",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..b886339 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -255,6 +255,28 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n             ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n+            # Test case from the original issue\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            # Additional test cases\n+            (\n+                'Visit http://example.com/path/to/page&gt;!',\n+                'Visit <a href=\"http://example.com/path/to/page%3E\">http://example.com/path/to/page&gt;</a>!'\n+            ),\n+            (\n+                'Check ftp://ftp.example.com/resource&lt?param=value.',\n+                'Check <a href=\"ftp://ftp.example.com/resource%3C?param=value\">ftp://ftp.example.com/resource&lt?param=value</a>.'\n+            ),\n+            (\n+                'HTML escape &amp; URLs like https://example.com/&amp;#anchor.',\n+                'HTML escape &amp; URLs like <a href=\"https://example.com/&\">https://example.com/&</a>#anchor.'\n+            ),\n+            (\n+                'Contact at mailto:name@domain.com;',\n+                'Contact at <a href=\"mailto:name@domain.com\">name@domain.com</a>;'\n+            ),\n         )\n         for value, output in tests:\n             with self.subTest(value=value):\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..d00e56a 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -127,6 +127,29 @@ class BulkUpdateTests(TestCase):\n         with self.assertNumQueries(0):\n             Note.objects.bulk_update([], ['note'])\n \n+    def test_bulk_update_empty(self):\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_bulk_update_successful(self):\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i)) \n+            for i in range(0, 2000)\n+        ])\n+        notes = list(Note.objects.all())\n+        for note in notes:\n+            note.note += '_updated'\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_updated_rows_when_passing_duplicates(self):\n+        note = Note.objects.create(note='test-note', misc='test')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+        # Duplicates in different batches.\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n+\n     def test_large_batch(self):\n         Note.objects.bulk_create([\n             Note(note=str(i), misc=str(i))\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..66cb32c 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -316,6 +316,28 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertTrue(formset.is_valid())\n         self.assertEqual([form.cleaned_data for form in formset.forms], [{'votes': 100, 'choice': 'Calexico'}, {}, {}])\n \n+    def test_formset_non_form_errors_with_css_class(self):\n+        \"\"\"\n+        Ensure that non-form errors in a FormSet have the 'nonform' CSS class applied.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '2',  \n+            'choices-INITIAL_FORMS': '0',  \n+            'choices-MIN_NUM_FORMS': '0',  \n+            'choices-MAX_NUM_FORMS': '1',  \n+            'choices-0-choice': 'Zero',\n+            'choices-0-votes': '0',\n+            'choices-1-choice': 'One',\n+            'choices-1-votes': '1',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, max_num=1, validate_max=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n+\n     def test_formset_validate_max_flag(self):\n         \"\"\"\n         If validate_max is set and max_num is less than TOTAL_FORMS in the\n@@ -338,6 +360,28 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n \n+    def test_formset_non_form_errors_with_min_flag_css_class(self):\n+        \"\"\"\n+        Ensure that non-form errors with min_flag in a FormSet have the 'nonform' CSS class applied.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '2',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '3',\n+            'choices-MAX_NUM_FORMS': '0',\n+            'choices-0-choice': 'Zero',\n+            'choices-0-votes': '0',\n+            'choices-1-choice': 'One',\n+            'choices-1-votes': '1',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, min_num=3, validate_min=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n+\n     def test_formset_validate_min_flag(self):\n         \"\"\"\n         If validate_min is set and min_num is more than TOTAL_FORMS in the\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..3b2f6ea 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2128,8 +2128,32 @@ Password: <input type=\"password\" name=\"password\" required></li>\n \n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n+    def test_datetime_clean_initial_bound_via_boundfield(self):\n+        \"\"\"Test that _clean_fields uses initial from BoundField\"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n+        \n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+        \n+        form = DateTimeForm({})\n+        cleaned = form.cleaned_data['dt']\n+        bf = form['dt']\n+        # Ensure that the cleaned data is the same as that from the BoundField\n+        self.assertEqual(cleaned, bf.initial)\n+\n+    def test_changed_data_logic_via_boundfield(self):\n+        \"\"\"Test that changed_data determination uses BoundField logic correctly\"\"\"\n+        \n+        class ExampleForm(forms.Form):\n+            name = forms.CharField(initial='InitialValue', disabled=False)\n+\n+        form = ExampleForm({'name': 'InitialValue'})\n+        # Since the value in form data matches the initial, changed_data should be empty.\n+        self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+        form = ExampleForm({'name': 'NewValue'})\n+        # Since the value in form data differs from the initial, name should be in changed_data.\n+        self.assertIn('name', form.changed_data)\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..18ae64f 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -1,8 +1,9 @@\n from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n-from django.db import IntegrityError\n+from django.db import models, IntegrityError\n from django.test import TestCase\n+from django.core.checks import Error\n \n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..91033ea 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -8,7 +9,11 @@ from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import PermissionDenied\n from django.http import Http404\n-from django.test import RequestFactory, override_settings\n+import datetime\n+import json\n+from django.test import RequestFactory, override_settings, TestCase\n+from django.http import JsonResponse\n+from django.urls import path\n from django.urls import reverse, reverse_lazy\n \n from .admin import AnswerAdmin, QuestionAdmin\n@@ -294,7 +299,56 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n         })\n \n \n-@override_settings(ROOT_URLCONF='admin_views.urls')\n+class AutocompleteJsonViewTestCase(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+        self.url = reverse('admin:myapp_mymodel_autocomplete')\n+        self.opts = {'app_label': 'myapp', 'model_name': 'mymodel', 'field_name': 'myfield'}\n+\n+    def test_serialize_result_with_extra_field(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        # Setup test data\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view()(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n+\n+    def test_serialize_result_without_extra_fields(self):\n+        # Setup test data\n+        Question.objects.create(question='Question 3', posted=datetime.date(2021, 8, 10))\n+\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonView.as_view()(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question}\n+                for q in Question.objects.order_by('-pk')\n+            ],\n+            'pagination': {'more': False},\n+        })\n class SeleniumTests(AdminSeleniumTestCase):\n     available_apps = ['admin_views'] + AdminSeleniumTestCase.available_apps\n \n",
  "django__django-14765": "",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..3b97d31 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -234,9 +234,17 @@ class TestChildArguments(SimpleTestCase):\n         msg = 'Script does-not-exist does not exist.'\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n-\n+    \n+    @mock.patch.dict('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('__main__.__spec__', None)\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_passed_to_child(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+    @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n         module = types.ModuleType('test_module')\n         del module.__spec__\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..f39fcb1 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -199,6 +199,31 @@ class MethodDecoratorTests(SimpleTestCase):\n     \"\"\"\n     Tests for method_decorator\n     \"\"\"\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        from functools import wraps\n+\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n     def test_preserve_signature(self):\n         class Test:\n             @simple_dec_m\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..b6457f3 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5131,6 +5131,45 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         )\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper function to test ForeignKey readonly fields render as links\n+        in the specified admin site.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='EN', name='English')\n+\n+        chapter_url = reverse(\n+            f'{admin_site}:admin_views_chapter_change',\n+            args=(quote(chapter.pk),),\n+        )\n+        language_url = reverse(\n+            f'{admin_site}:admin_views_language_change',\n+            args=(quote(language.pk),),\n+        )\n+\n+        response = self.client.get(chapter_url)\n+        self.assertContains(\n+            response,\n+            f'<div class=\"readonly\"><a href=\"{language_url}\">EN</a></div>',\n+            html=True,\n+        )\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links for the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test readonly ForeignKey links for a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('custom_admin')\n \n     def test_readonly_manytomany_backwards_ref(self):\n         \"\"\"\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..b7670ab 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,28 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_choice_value_in_dict(self):\n+        choice_value = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        # Use choice_value as a key in a dict\n+        test_dict = {choice_value: \"value1\"}\n+        self.assertIn(choice_value, test_dict)\n+        self.assertEqual(test_dict[choice_value], \"value1\")\n+\n+    def test_choice_value_in_set(self):\n+        choice_value = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        # Add choice_value in a set\n+        test_set = {choice_value}\n+        self.assertIn(choice_value, test_set)\n+        # Check uniqueness (adding another with same primary key shouldn't change set size)\n+        another_choice_value = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        test_set.add(another_choice_value)\n+        self.assertEqual(len(test_set), 1)\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..9fd4fb9 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -790,6 +790,95 @@ class OperationTests(OperationTestBase):\n         rider = Rider.objects.create()\n         pony.riders.add(rider)\n         self.assertEqual(Pony.objects.count(), 2)\n+\n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn_noop'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Ensure no database operations are performed\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_and_constraints(self):\n+        app_label = 'test_rmwdbtn_constraints'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Horse', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'horse'}),\n+            migrations.CreateModel('Jockey', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('horse', models.ForeignKey('%s.Horse' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Horse', 'Stallion')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Verify that no foreign key constraints are affected when renaming with db_table present\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_unique_constraint(self):\n+        app_label = 'test_rmwdbtn_unique'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Driver', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('name', models.CharField(max_length=255, unique=True)),\n+            ], options={'db_table': 'driver'}),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Driver', 'Pilot')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Ensure unique constraints are not affected by rename\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n+    def test_rename_model_with_db_table_noop_with_data(self):\n+        # This test ensures renaming doesn't impact existing data\n+        app_label = 'test_rmwdbtn_noop_data'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Cyclist', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('bike', models.CharField(max_length=255)),\n+            ], options={'db_table': 'cyclist'}),\n+        ])\n+        Cyclist = project_state.apps.get_model(app_label, 'Cyclist')\n+        Cyclist.objects.create(bike='Road Bike')\n+        \n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Cyclist', 'Speedster')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Ensure no database operations are performed\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertEqual(Cyclist.objects.count(), 1)\n+        self.assertEqual(Cyclist.objects.first().bike, 'Road Bike')\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..93e4391 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -144,12 +144,48 @@ class ChangeListTests(TestCase):\n         class GetListSelectRelatedAdmin(admin.ModelAdmin):\n             list_display = ('band', 'player')\n \n-            def get_list_select_related(self, request):\n-                return ('band', 'player')\n+from django.test.utils import CaptureQueriesContext\n+from django.db import connection\n \n-        ia = GetListSelectRelatedAdmin(Invitation, custom_site)\n-        request = self.factory.get('/invitation/')\n+...\n+\n+class ParentAdminTwoSearchFields(admin.ModelAdmin):\n+    list_filter = ['child__name']\n+    search_fields = ['child__name', 'child__age']\n+    list_select_related = ['child']\n+\n+...\n+\n+# Add the new test cases below the existing tests\n+\n+class AdminQueryTest(TestCase):\n+\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.superuser = User.objects.create_superuser('admin', 'admin@test.com', 'password')\n+        self.site = admin.site\n+\n+    def test_search_with_multiple_terms_reduces_joins(self):\n+        \"\"\"\n+        Ensure that searching with multiple terms does not result in excessive \n+        JOIN statements, confirming the optimization is working.\n+        \"\"\"\n+        # Setting up the data\n+        client = Client.objects.create(name='Test Client')\n+        office1 = ClientOffice.objects.create(name='Office 1', client=client)\n+        office2 = ClientOffice.objects.create(name='Office 2', client=client)\n+\n+        client_admin = ClientAdmin(Client, self.site)\n+        request = self.factory.get('/admin/changelist/', data={SEARCH_VAR: 'Office ' * 5})\n         request.user = self.superuser\n+\n+        cl = client_admin.get_changelist_instance(request)\n+        with CaptureQueriesContext(connection) as context:\n+            list(cl.get_queryset(request))\n+        \n+        # Check that the optimization ensures only necessary JOINs\n+        join_count = sum('JOIN' in query['sql'] for query in context.captured_queries)\n+        self.assertLessEqual(join_count, 2, \"More JOINs executed than necessary\")\n         cl = ia.get_changelist_instance(request)\n         self.assertEqual(cl.queryset.query.select_related, {'player': {}, 'band': {}})\n \n",
  "django__django-15037": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 19402bb..f767b7f 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -204,7 +204,17 @@ class InspectDBTestCase(TestCase):\n             output,\n         )\n \n-    def test_digits_column_name_introspection(self):\n+    def test_foreign_key_to_specific_field(self):\n+        \"\"\"\n+        Test that inspectdb correctly handles foreign keys to specific fields rather than the primary key.\n+        \"\"\"\n+        out = StringIO()\n+        call_command('inspectdb', 'inspectdb_bartable', stdout=out)\n+        output = out.getvalue()\n+        self.assertIn(\n+            \"other_id = models.ForeignKey('InspectdbFootable', on_delete=models.DO_NOTHING, to_field='other_id')\",\n+            output,\n+        )\n         \"\"\"Introspection of column names consist/start with digits (#16536/#17676)\"\"\"\n         char_field_type = connection.features.introspected_field_types['CharField']\n         out = StringIO()\n",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..8b67fc8 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,11 +1,14 @@\n+\n from django.test import SimpleTestCase\n \n from ..utils import setup\n \n \n class JsonScriptTests(SimpleTestCase):\n-\n-    @setup({'json-tag01': '{{ value|json_script:\"test_id\" }}'})\n+    @setup({'json-tag02': '{{ value|json_script }}'})\n+    def test_without_id(self):\n+        output = self.engine.render_to_string('json-tag02', {'value': {}})\n+        self.assertEqual(output, '<script type=\"application/json\">{}</script>')\n     def test_basic(self):\n         output = self.engine.render_to_string(\n             'json-tag01',\n@@ -16,4 +19,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..9dc8fa5 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -368,6 +369,26 @@ class BaseTests:\n         tags = [msg.level_tag for msg in storage]\n         self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n \n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'info',\n+        constants.DEBUG: 'debug',\n+        constants.WARNING: 'warn',\n+        constants.ERROR: 'error',\n+        constants.SUCCESS: 'success',\n+        20: 'extra',\n+    })\n+    def test_override_settings_applies_correctly(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        storage.add(constants.INFO, 'Info message')\n+        storage.add(constants.DEBUG, 'Debug message')\n+        storage.add(constants.WARNING, 'Warning message')\n+        storage.add(constants.ERROR, 'Error message')\n+        storage.add(constants.SUCCESS, 'Success message')\n+        storage.add(20, 'Extra message')\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info', 'debug', 'warn', 'error', 'success', 'extra'])\n+\n     @override_settings_tags(MESSAGE_TAGS={\n         constants.INFO: 'info',\n         constants.DEBUG: '',\n",
  "django__django-15128": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a7bb7e8..2b66adc 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -613,10 +613,14 @@ class OrderItem(models.Model):\n \n \n class BaseUser(models.Model):\n-    pass\n+    annotation = models.ForeignKey('Annotation', models.CASCADE, null=True, blank=True)\n+\n \n+class Annotation(models.Model):\n+    tag = models.ForeignKey('Tag', models.CASCADE, related_name='annotations')\n \n-class Task(models.Model):\n+class Note(models.Model):\n+    tag = models.ForeignKey('Tag', models.CASCADE, related_name='notes')\n     title = models.CharField(max_length=10)\n     owner = models.ForeignKey(BaseUser, models.CASCADE, related_name='owner')\n     creator = models.ForeignKey(BaseUser, models.CASCADE, related_name='creator')\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..f7dbcff 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1760,6 +1760,13 @@ class ValueTests(TestCase):\n         UUID.objects.update(uuid=Value(uuid.UUID('12345678901234567890123456789012'), output_field=UUIDField()))\n         self.assertEqual(UUID.objects.get().uuid, uuid.UUID('12345678901234567890123456789012'))\n \n+    def test_deconstruct_F_expression(self):\n+        f_expression = F('field_name')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, (f_expression.name,))\n+        self.assertEqual(kwargs, {})\n+\n     def test_deconstruct(self):\n         value = Value('name')\n         path, args, kwargs = value.deconstruct()\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..476e579 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1762,7 +1762,30 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'newfield2')},\n         )\n \n-    def test_proxy(self):\n+    def test_optimize_foo_together_operations(self):\n+        \"\"\"\n+        Test that multiple AlterFooTogether operations are optimized into one.\n+        \"\"\"\n+        initial_state = [self.author_empty, self.book_foo_together]\n+        optimized_state = [self.author_empty, self.book_foo_together_2]\n+\n+        changes = self.get_changes(initial_state, optimized_state)\n+        \n+        # Ensure only one migration is applied\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        \n+        # Ensure the operations are optimized\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether'\n+        ])\n+        \n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book', unique_together={('title', 'author')},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book', index_together={('title', 'author')},\n+        )\n         \"\"\"The autodetector correctly deals with proxy models.\"\"\"\n         # First, we test adding a proxy model\n         changes = self.get_changes([self.author_empty], [self.author_empty, self.author_proxy])\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..ea51b58 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,6 +1847,21 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n+    def test_output_field_no_incorrect_max_length_validator(self):\n+        \"\"\"\n+        Ensure CharField created by _resolve_output_field doesn't have\n+        a MaxLengthValidator with NoneType max_length.\n+        \"\"\"\n+        x = Value('test')\n+        field = x._resolve_output_field()\n+        validators = [validator for validator in field.validators if isinstance(validator, validators.MaxLengthValidator)]\n+        for validator in validators:\n+            self.assertIsNotNone(validator.limit_value)\n+            self.assertTrue(isinstance(validator.limit_value, int))\n+            with self.subTest(type=type(value)):\n+                expr = Value(value)\n+                self.assertIsInstance(expr.output_field, output_field_type)\n+\n     def test_resolve_output_field_failure(self):\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..c7f45f8 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -618,7 +618,62 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n         # Ensure the field is there\n+from django.db import connection\n+from django.db.models import Model, CASCADE, OneToOneField\n+from django.test import TestCase\n+\n+class Author(Model):\n+    pass\n+\n+class Note(Model):\n+    pass\n+\n+class SchemaTests(TestCase):\n+    def test_add_field_o2o_nullable(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])  # Check nullable constraint\n+\n+    def test_add_nullable_one_to_one_field_crash(self):\n+        \"\"\"\n+        Test for the issue where adding a nullable OneToOneField would crash on SQLite.\n+        Specifically tests for the migration described in the issue where a UNIQUE constraint is involved.\n+        \"\"\"\n+        class AccessToken(Model):\n+            pass\n+\n+        class RefreshToken(Model):\n+            pass\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(RefreshToken)\n+            editor.create_model(AccessToken)\n+\n+        new_field = OneToOneField(\n+            RefreshToken,\n+            CASCADE,\n+            null=True,\n+            unique=True,\n+            related_name=\"refreshed_access_token\",\n+        )\n+        new_field.set_attributes_from_name('source_refresh_token')\n+\n+        with connection.schema_editor() as editor:\n+            # This operation used to crash with OperationalError on SQLite.\n+            editor.add_field(AccessToken, new_field)\n+\n+        columns = self.column_classes(AccessToken)\n+        self.assertIn('source_refresh_token_id', columns)\n+        # The column should be nullable and have a UNIQUE constraint.\n+        self.assertTrue(columns['source_refresh_token_id'][1][6])  # Check nullable constraint\n+        self.assertTrue(columns['source_refresh_token_id'][1][5])  # Check unique constraint\n         field_type, field_info = columns['thing']\n         self.assertEqual(field_type, connection.features.introspected_field_types['IntegerField'])\n         # Make sure the values were transformed correctly\n@@ -636,7 +691,62 @@ class SchemaTests(TransactionTestCase):\n         new_field.set_attributes_from_name(\"bits\")\n         with connection.schema_editor() as editor:\n             editor.add_field(Author, new_field)\n+from django.db import connection\n+from django.db.models import Model, CASCADE, OneToOneField\n+from django.test import TestCase\n+\n+class Author(Model):\n+    pass\n+\n+class Note(Model):\n+    pass\n+\n+class SchemaTests(TestCase):\n+    def test_add_field_o2o_nullable(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])  # Check nullable constraint\n+\n+    def test_add_nullable_one_to_one_field_crash(self):\n+        \"\"\"\n+        Test for the issue where adding a nullable OneToOneField would crash on SQLite.\n+        Specifically tests for the migration described in the issue where a UNIQUE constraint is involved.\n+        \"\"\"\n+        class AccessToken(Model):\n+            pass\n+\n+        class RefreshToken(Model):\n+            pass\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(RefreshToken)\n+            editor.create_model(AccessToken)\n+\n+        new_field = OneToOneField(\n+            RefreshToken,\n+            CASCADE,\n+            null=True,\n+            unique=True,\n+            related_name=\"refreshed_access_token\",\n+        )\n+        new_field.set_attributes_from_name('source_refresh_token')\n+\n+        with connection.schema_editor() as editor:\n+            # This operation used to crash with OperationalError on SQLite.\n+            editor.add_field(AccessToken, new_field)\n+\n+        columns = self.column_classes(AccessToken)\n+        self.assertIn('source_refresh_token_id', columns)\n+        # The column should be nullable and have a UNIQUE constraint.\n+        self.assertTrue(columns['source_refresh_token_id'][1][6])  # Check nullable constraint\n+        self.assertTrue(columns['source_refresh_token_id'][1][5])  # Check unique constraint\n         # MySQL annoyingly uses the same backend, so it'll come back as one of\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..6d3edda 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -61,7 +61,33 @@ class BasicFieldTests(SimpleTestCase):\n \n         self.assertEqual(m._meta.get_field('id').verbose_name, 'verbose pk')\n \n-    def test_choices_form_class(self):\n+    def test_hash_immutability(self):\n+        \"\"\"\n+        Test that the hash value of a field remains the same\n+        before and after it's assigned to a model field.\n+        \"\"\"\n+        field = models.IntegerField()\n+        field_hash_before = hash(field)\n+\n+        class MyModel(models.Model):\n+            rank = field\n+\n+        self.assertEqual(field_hash_before, hash(field))\n+\n+    def test_field_hash_in_dictionary(self):\n+        \"\"\"\n+        Ensure that a field can be reliably used as a key in a dictionary\n+        and remains accessible after being assigned to a model.\n+        \"\"\"\n+        field = models.CharField(max_length=50)\n+        field_dict = {field: 'value'}\n+\n+        class AnotherModel(models.Model):\n+            name = field\n+\n+        # Field should still be accessible as a key\n+        self.assertIn(field, field_dict)\n+        self.assertEqual(field_dict[field], 'value')\n         \"\"\"Can supply a custom choices form class to Field.formfield()\"\"\"\n         choices = [('a', 'a')]\n         field = models.CharField(choices=choices)\n",
  "django__django-15368": "",
  "django__django-15380": "",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..fdf49df 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1905,8 +1905,37 @@ class ExistsTests(TestCase):\n         )\n         self.assertNotIn('ORDER BY', captured_sql)\n \n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+from .models import Manager\n \n-class FieldTransformTests(TestCase):\n+class ExistSubqueryTests(TestCase):\n+    \n+    def test_negated_empty_exists_removes_where(self):\n+        # Create a test instance.\n+        manager = Manager.objects.create()\n+\n+        # Test the behavior with an empty exists subquery.\n+        # This is a negated EXISTS() which should not remove the entire WHERE clause.\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+\n+        # We expect the manager we created to be in the result set.\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_empty_exists_non_negated(self):\n+        # Create a test instance.\n+        manager = Manager.objects.create()\n+\n+        # Test the behavior with a non-negated EXISTS() subquery that is empty.\n+        # This should result in an empty result set since EXISTS() will never be true.\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+\n+        # We expect an empty queryset since the subquery returns no rows.\n+        self.assertSequenceEqual(qs, [])\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..17a54e3 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -26,6 +26,9 @@ from django.db.models import (\n )\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n+from django.contrib.admin import ModelAdmin\n+from django.db.models import ForeignKey\n+from django.utils.translation import gettext_lazy as _\n from django.utils import translation\n \n from .models import (\n",
  "django__django-15499": "",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..7459ce7 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -789,11 +789,32 @@ class NaturalKeyFixtureTests(TestCase):\n             ],\n             transform=repr,\n         )\n+from django.core.management import call_command\n+from django.test import TestCase\n+from fixtures_regress.models import Author, Book\n \n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {'default', 'other'}\n \n-class M2MNaturalKeyFixtureTests(TestCase):\n-    \"\"\"Tests for ticket #14426.\"\"\"\n-\n+    def test_natural_key_dependencies(self):\n+        \"\"\"\n+        Natural keys with foreign keys in dependencies work in a multiple\n+        database setup.\n+        \"\"\"\n+        # Load the data into the 'other' database\n+        call_command(\n+            \"loaddata\",\n+            \"books.json\",\n+            database=\"other\",\n+            verbosity=0,\n+        )\n+        # Enter a context manager to query 'other' database\n+        with self.assertNumQueries(1, using='other'):\n+            book = Book.objects.using(\"other\").get()\n+            author = Author.objects.using(\"other\").get()\n+            self.assertEqual(book.title, \"The Ring\")\n+            self.assertEqual(object.author.name, \"JR Tolkien\")\n+            self.assertEqual(author.name, \"JR Tolkien\")\n     def test_dependency_sorting_m2m_simple(self):\n         \"\"\"\n         M2M relations without explicit through models SHOULD count as dependencies\n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..3583d34 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,7 +3961,27 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n-    def test_add_textfield_unhashable_default(self):\n+    def test_alter_field_choices_noop(self):\n+        if connection.vendor != 'sqlite':\n+            self.skipTest(\"This test is specific to SQLite backend.\")\n+\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        \n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+\n+        # SQL operations should be a no-op for altering choices\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+\n+        # Revert back and ensure it's still a no-op\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n         # Create the table\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..f64aacc 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -308,7 +308,12 @@ class LookupTests(TestCase):\n         with register_lookup(models.ForeignObject, Exactly):\n             self.assertIs(field.get_lookup(\"exactly\"), Exactly)\n \n-        # ForeignObject should ignore regular Field lookups\n+        # Test unregistering lookup clears the cache\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIs(field.get_lookup(\"exactly\"), Exactly)\n+            models.ForeignObject._unregister_lookup(Exactly)\n+            field.get_lookups.cache_clear()\n+            self.assertNotIn(\"exactly\", field.get_lookups())\n         with register_lookup(models.Field, Exactly):\n             self.assertIsNone(field.get_lookup(\"exactly\"))\n \n@@ -325,6 +330,10 @@ class LookupTests(TestCase):\n             self.assertIn(\"exactly\", field.get_lookups())\n \n \n+from django.db.models.query_utils import RegisterLookupMixin\n+from django.db.models.functions import Lower\n+from django.db.models import CharField\n+\n class BilateralTransformTests(TestCase):\n     def test_bilateral_upper(self):\n         with register_lookup(models.CharField, UpperBilateralTransform):\n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..84fb194 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -6,6 +7,8 @@ from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n from django.db.models.manager import BaseManager\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n+import inspect\n+from functools import wraps\n from django.test import (\n     SimpleTestCase,\n     TestCase,\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..fdc6698 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,6 +1,8 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n+from django.utils.translation import gettext_lazy\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n \n@@ -77,7 +79,18 @@ class FunctionTests(SimpleTestCase):\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n-    def test_no_args(self):\n+    def test_lazy_string_format(self):\n+        lazy_format = gettext_lazy(\"DATE_FORMAT\")\n+        self.assertEqual(get_format(lazy_format), \"N j, Y\")\n+\n+    @setup({\"date_lazy_test\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_lazy_filter(self):\n+        output = self.engine.render_to_string(\"date_lazy_test\", {\"t\": time(12, 30)})\n+        self.assertEqual(output, \"12:30\")\n+\n+    def test_lazy_scenario_incorrect_format(self):\n+        with self.assertRaises(TypeError):\n+            get_format(object())  # Non-string-like object as format\n         self.assertEqual(date(\"\"), \"\")\n         self.assertEqual(date(None), \"\")\n \n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..068108f 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -390,7 +390,20 @@ class ProxyModelTests(TestCase):\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n \n-    def test_proxy_load_from_fixture(self):\n+    def test_select_related_only_on_proxy(self):\n+        # Test setup\n+        custom_model = CustomModel.objects.create(name=\"Test Name\")\n+        proxy_custom_model = ProxyCustomModel.objects.get(pk=custom_model.pk)\n+        another_model = AnotherModel.objects.create(custom=proxy_custom_model)\n+\n+        # Test the query using select_related and only on proxy model\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        \n+        # Fetch results\n+        result = qs.get(pk=another_model.pk)\n+        \n+        # Verify the results match the expected instances\n+        self.assertEqual(result.custom.name, \"Test Name\")\n         management.call_command(\"loaddata\", \"mypeople.json\", verbosity=0)\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n@@ -399,6 +412,8 @@ class ProxyModelTests(TestCase):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n \n+from django.test import TestCase\n+\n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n",
  "django__django-15851": "",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..d3378c4 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -74,7 +74,16 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n-    def test_force_grouping(self):\n+    def test_decimal_precision(self):\n+        # Test cases for Decimal precision with specific digits\n+        self.assertEqual(floatformat(Decimal(\"42.12345678901234567890\"), 20), \"42.12345678901234567890\")\n+        self.assertEqual(floatformat(Decimal(\"12345.67890123456789012345\"), 25), \"12345.6789012345678901234500\")\n+        self.assertEqual(floatformat(Decimal(\"0.0000000000000000000001\"), 22), \"0.0000000000000000000001\")\n+        # Ensure that floatformat does not convert Decimal to float internally by checking precision\n+        self.assertEqual(floatformat(Decimal(\"1.00000000000000000000005\"), 20), \"1.00000000000000000000\")\n+        self.assertEqual(floatformat(Decimal(\"-234234234234234.234234234234234\"), 15), \"-234234234234234.234234234234234\")\n+        # Test round-half-up specific case when last digit is 5\n+        self.assertEqual(floatformat(Decimal(\"42.1234550\"), 7), \"42.1234550\")\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n             self.assertEqual(floatformat(66666.666, \"1g\"), \"66,666.7\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..141e9d7 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -414,8 +414,29 @@ class CaseExpressionTests(TestCase):\n         )\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n+    def test_annotate_with_full_when(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        # Ensure all objects are annotated as 'selected'\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n \n-    def test_combined_expression(self):\n+    def test_annotate_negation_with_empty_q(self):\n+        \"\"\"\n+        Test ~Q(pk__in=[]) doesn't crash and logically matches everything.\n+        \"\"\"\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n         self.assertQuerysetEqual(\n             CaseTestModel.objects.annotate(\n                 test=Case(\n",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..d063ead 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -569,6 +570,18 @@ class TestFixtures(TestCase):\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n+    @override_settings(FIXTURE_DIRS=[Path(_cur_dir), Path(_cur_dir) / \"fixtures\"])\n+    def test_fixture_dirs_with_path_instances(self):\n+        \"\"\"\n+        Ensure that when FIXTURE_DIRS contains Path instances, duplicates are detected.\n+        \"\"\"\n+        msg = (\n+            \"'%s' is a duplicate fixture directory and cannot be listed in settings.FIXTURE_DIRS.\"\n+            % Path(_cur_dir)\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n+\n     @override_settings(\n         FIXTURE_DIRS=[\n             os.path.join(_cur_dir, \"fixtures_1\"),\n",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..fdfec38 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -988,6 +988,26 @@ class NonAggregateAnnotationTestCase(TestCase):\n         self.assertCountEqual(\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n+    \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        # Verifying that the query doesn't raise an OperationalError\n+        # and returns the correct number of columns in the sub-query\n+        self.assertCountEqual(\n+            publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n+        )\n \n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n@@ -1001,6 +1021,26 @@ class NonAggregateAnnotationTestCase(TestCase):\n             .values_list(\"max_pubdate\", flat=True)\n             .order_by(\"max_pubdate\")\n         )\n+        self.assertCountEqual(\n+            publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n+        )\n+    \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        # Verifying that the query doesn't raise an OperationalError\n+        # and returns the correct number of columns in the sub-query\n         self.assertCountEqual(\n             qs,\n             [\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..efe5b0e 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n@@ -2428,6 +2428,12 @@ class CombinedExpressionTests(SimpleTestCase):\n                         Expression(rhs()),\n                     )\n                     self.assertIsInstance(expr.output_field, combined)\n+                    expr = CombinedExpression(\n+                        Expression(lhs()),\n+                        connector,\n+                        Expression(rhs()),\n+                    )\n+                    self.assertIsInstance(expr.output_field, combined)\n \n     def test_resolve_output_field_with_null(self):\n         def null():\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..bcec536 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,10 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.urls import reverse\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,6 +404,60 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        # Create test objects\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        # Authenticate a superuser\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+\n+        # Define post data\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+\n+        # Test scenario where DatabaseError is raised during log_change\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Ensure original values are preserved\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        # Test partial failure scenario: first log_change succeeds, second raises DatabaseError\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        # Ensure original values are preserved\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n     def test_custom_paginator(self):\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..5a435a1 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2399,8 +2399,19 @@ class MakeMigrationsTests(MigrationTestBase):\n             module=\"migrations.test_migrations_no_changes\"\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+    def test_makemigrations_check_no_changes(self):\n+        \"\"\"Ensure makemigrations --check exits with status 0 when there are no changes.\"\"\"\n+        with self.temporary_migration_module(module=\"migrations.test_migrations_no_changes\"):\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            self.assertEqual(cm.exception.code, 0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_with_dry_run(self):\n+        \"\"\"Ensure makemigrations --check --dry-run exits with non-zero status.\"\"\"\n+        with self.temporary_migration_module():\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", \"--dry-run\", \"migrations\", verbosity=0)\n+            self.assertEqual(cm.exception.code, 1)\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..19448d9 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,7 +7,8 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+import asyncio\n from django.test import SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n@@ -119,7 +121,36 @@ class ViewTests(SimpleTestCase):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n-    def test_base_view_class_is_sync(self):\n+    def test_http_method_not_allowed_responds_correctly(self):\n+        \"\"\"\n+        Test that the http_method_not_allowed method responds correctly for both \n+        synchronous and asynchronous views.\n+        \"\"\"\n+        class SyncView(View):\n+            def post(self, request):\n+                return HttpResponse(\"ok\")\n+\n+        class AsyncView(View):\n+            async def post(self, request):\n+                return HttpResponse(\"ok\")\n+\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.post(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n         sync.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..690e104 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,6 +25,8 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+import urllib.parse\n+from django.urls import reverse\n from django.utils.translation import gettext as _\n \n from .models.custom_user import (\n",
  "django__django-16145": "",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..27c1914 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,9 +507,29 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+    def test_callable_sitemod_no_items_lastmod(self):\n+        \"\"\"\n+        Test sitemaps with callable lastmod and no items, ensuring \n+        ValueError from max() is handled correctly.\n+        \"\"\"\n+        response = self.client.get(\"/callable-lastmod-no-items/sitemap.xml\")\n+        expected_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"/>\\n\"\"\"\n+        self.assertEqual(response.status_code, 200)\n+        self.assertXMLEqual(response.content.decode(), expected_content)\n \n-# RemovedInDjango50Warning\n-class DeprecatedTests(SitemapTestsBase):\n+    def test_callable_sitemod_no_items_lastmod_index(self):\n+        \"\"\"\n+        Test sitemaps index with callable lastmod and no items, ensuring \n+        ValueError from max() is handled correctly.\n+        \"\"\"\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        expected_content_index = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/callable-lastmod-no-items/sitemap.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertEqual(response.status_code, 200)\n+        self.assertXMLEqual(response.content.decode(), expected_content_index)\n     @override_settings(\n         TEMPLATES=[\n             {\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..2b5dcf9 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,11 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n@@ -79,6 +84,11 @@ class NoFields(models.Model):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n+\n class SmallAutoFieldModel(models.Model):\n     id = models.SmallAutoField(primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..459920a 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -22,7 +23,7 @@ from django.core.exceptions import ValidationError\n from django.core.mail import EmailMultiAlternatives\n from django.forms import forms\n from django.forms.fields import CharField, Field, IntegerField\n-from django.test import SimpleTestCase, TestCase, override_settings\n+from django.test import SimpleTestCase, TestCase, override_settings, TransactionTestCase\n from django.urls import reverse\n from django.utils import translation\n from django.utils.text import capfirst\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -252,6 +254,31 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n+class CustomUserCreationFormTests(TransactionTestCase):\n+    def test_custom_user_creation_form_saves_m2m(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + ('orgs',)\n+\n+        # Create an instance of Organization to link with the custom user\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        # Data for the form, including the ManyToManyField\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [organization.pk],  # ManyToManyField input\n+        }\n+        \n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid(), \"Form should be valid with the correct data\")\n+        \n+        # Save the form and verify that the many-to-many relationship is established\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization], \"The user's organizations should include the specified organization\")\n+\n     def test_password_whitespace_not_stripped(self):\n         data = {\n             \"username\": \"testuser\",\n@@ -260,6 +287,31 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         }\n         form = UserCreationForm(data)\n         self.assertTrue(form.is_valid())\n+\n+class CustomUserCreationFormTests(TransactionTestCase):\n+    def test_custom_user_creation_form_saves_m2m(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + ('orgs',)\n+\n+        # Create an instance of Organization to link with the custom user\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        # Data for the form, including the ManyToManyField\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [organization.pk],  # ManyToManyField input\n+        }\n+        \n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid(), \"Form should be valid with the correct data\")\n+        \n+        # Save the form and verify that the many-to-many relationship is established\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization], \"The user's organizations should include the specified organization\")\n         self.assertEqual(form.cleaned_data[\"password1\"], data[\"password1\"])\n         self.assertEqual(form.cleaned_data[\"password2\"], data[\"password2\"])\n \n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..d71b36b 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,6 @@\n+\n+import datetime\n+\n import datetime\n \n from django.test import TestCase\n@@ -236,6 +239,22 @@ class TimesinceTests(TestCase):\n             with self.subTest():\n                 self.assertEqual(timesince(t, value), expected)\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_aware_datetime_greater_than_one_month(self):\n+        \"\"\"Test timesince with aware datetime objects and interval > 1 month.\"\"\"\n+        now = timezone.now()\n+        past_date = now - datetime.timedelta(days=31)  # A bit more than a month\n+        self.assertEqual(timesince(past_date, now), \"1\\xa0month\")\n+        \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_aware_datetime_far_past(self):\n+        \"\"\"Test timesince with aware datetime objects far in the past.\"\"\"\n+        now = timezone.now()\n+        past_date = now - datetime.timedelta(days=400)  # More than a year\n+        self.assertEqual(timesince(past_date, now), \"1\\xa0year, 1\\xa0month, 3\\xa0days\")\n+        \n     def test_depth_invalid(self):\n         msg = \"depth must be greater than 0.\"\n         with self.assertRaisesMessage(ValueError, msg):\n",
  "django__django-16454": "",
  "django__django-16485": "",
  "django__django-16493": "",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..59d5c72 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -33,6 +34,41 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Ensure 'show_save_as_new' is only true if the user has both add and change permissions, along with other necessary conditions.\n+        \"\"\"\n+        # Create user with only change permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # Create user with both add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request.user = add_user\n+        admin = UserAdmin(User, site)\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_show_save_and_add_another(self):\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..3e2d20f 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -107,8 +107,18 @@ class BaseConstraintTests(SimpleTestCase):\n         c = BaseConstraint(\"name\", \"custom %(name)s message\")\n         self.assertEqual(c.get_violation_error_message(), \"custom name message\")\n \n+from django.core.exceptions import ValidationError\n \n-class CheckConstraintTests(TestCase):\n+class BaseConstraintTests(TestCase):\n+    def test_custom_violation_error_code(self):\n+        constraint = BaseConstraint(\n+            name=\"base_name\",\n+            violation_error_message=\"custom %(name)s message\",\n+            violation_error_code=\"custom_code\",\n+        )\n+        self.assertEqual(\n+            constraint.violation_error_code, \"custom_code\"\n+        )\n     def test_eq(self):\n         check1 = models.Q(price__gt=models.F(\"discounted_price\"))\n         check2 = models.Q(price__lt=models.F(\"discounted_price\"))\n@@ -149,7 +159,20 @@ class CheckConstraintTests(TestCase):\n             ),\n         )\n \n-    def test_repr(self):\n+    def test_validate_with_violation_error_code(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_message=\"custom error message\",\n+            violation_error_code=\"custom_code\",\n+        )\n+        # Invalid product.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        msg = \"custom error message\"\n+        with self.assertRaisesMessage(ValidationError, msg) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"custom_code\")\n         constraint = models.CheckConstraint(\n             check=models.Q(price__gt=models.F(\"discounted_price\")),\n             name=\"price_gt_discounted_price\",\n@@ -332,13 +355,15 @@ class UniqueConstraintTests(TestCase):\n         self.assertEqual(\n             models.UniqueConstraint(\n                 fields=[\"foo\", \"bar\"],\n-                name=\"unique\",\n+                name=\"unique_violation\",\n                 violation_error_message=\"custom error\",\n+                violation_error_code=\"custom_code\",\n             ),\n             models.UniqueConstraint(\n                 fields=[\"foo\", \"bar\"],\n-                name=\"unique\",\n+                name=\"unique_violation\",\n                 violation_error_message=\"custom error\",\n+                violation_error_code=\"custom_code\",\n             ),\n         )\n \n",
  "django__django-16569": "",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..c28cfe0 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,6 +43,35 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n+    def test_alter_alter_field(self):\n+        \"\"\"Test consecutive AlterField operations collapse.\"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, null=True),\n+                ),\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+                ),\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+                ),\n+            ],\n+            [\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+                ),\n+            ]\n+        )\n+    \n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..dba08aa 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8481,6 +8481,59 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n     @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n     def test_missing_slash_append_slash_true_force_script_name(self):\n         superuser = User.objects.create_user(\n@@ -8499,6 +8552,59 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_query_string(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1], SCRIPT_NAME=\"/prefix/\")\n+        self.assertRedirects(\n+            response,\n+            f\"/prefix{known_url}?id=1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_non_staff_user_query_string(self):\n+        user = User.objects.create_user(\n+            username=\"user\",\n+            password=\"secret\",\n+            email=\"user@example.com\",\n+            is_staff=False,\n+        )\n+        self.client.force_login(user)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?id=1\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            \"/test_admin/admin/login/?next=/test_admin/admin/admin_views/article\"\n+            \"%3Fid%3D1\",\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..a109945 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,16 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        additional_test_tuples = (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in additional_test_tuples:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..4f2a798 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,34 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_import_ordering_conforms_to_style(self):\n+        \"\"\"\n+        Test that migration imports are sorted according to Django's style guide.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield3\",\n+                        models.IntegerField(default=42),\n+                    ),\n+                ],\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..c3d570b 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1148,6 +1148,58 @@ class OptimizerTests(SimpleTestCase):\n             ],\n             [migrations.RenameIndex(\"Pony\", new_name=\"new_name\", old_name=\"old_name\")],\n         )\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"speed\"], name=\"idx_pony_speed\"\n+                    ),\n+                ),\n+            ],\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"speed\"], name=\"idx_pony_speed\"\n+                    ),\n+                ),\n+            ],\n+        )\n+\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"height\"], name=\"idx_pony_height\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_height\"),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"height\"], name=\"idx_pony_height\"\n+                    ),\n+                ),\n+            ],\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"height\"], name=\"idx_pony_height\"\n+                    ),\n+                ),\n+            ],\n+        )\n+\n         self.assertDoesNotOptimize(\n             [\n                 migrations.RenameIndex(\n@@ -1157,4 +1209,4 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..4bd8997 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -787,9 +787,20 @@ class SystemChecksTestCase(SimpleTestCase):\n     def test_readonly_method_on_model(self):\n         class SongAdmin(admin.ModelAdmin):\n             readonly_fields = (\"readonly_method_on_model\",)\n+    def test_nonexistent_readonly_field_name_in_error(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"nonexistent_field\",)\n \n         errors = SongAdmin(Song, AdminSite()).check()\n-        self.assertEqual(errors, [])\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'nonexistent_field', which is \"\n+                \"not a callable, an attribute of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n \n     def test_nonexistent_field(self):\n         class SongAdmin(admin.ModelAdmin):\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..e5b2b1c 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -54,7 +55,18 @@ class XorLookupsTests(TestCase):\n             [self.numbers[0]],\n         )\n \n-    def test_pk_q(self):\n+    def test_xor_multiple_arguments(self):\n+        qs = Number.objects.filter(\n+            Q(num__gte=1)\n+            ^ Q(num__gte=3)\n+            ^ Q(num__gte=5)\n+            ^ Q(num__gte=7)\n+            ^ Q(num__gte=9)\n+        )\n+        self.assertCountEqual(\n+            qs.values_list(\"num\", flat=True),\n+            [i for i in range(10) if (i >= 1) ^ (i >= 3) ^ (i >= 5) ^ (i >= 7) ^ (i >= 9)],\n+        )\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk=self.numbers[0].pk) ^ Q(pk=self.numbers[1].pk)),\n             self.numbers[:2],\n@@ -64,4 +76,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..6ee8fba 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -24,6 +24,10 @@ SOME_INSTALLED_APPS = [\n     \"django.contrib.staticfiles\",\n ]\n \n+from django.test import SimpleTestCase, override_settings\n+from django.apps import apps\n+from unittest.mock import patch\n+\n SOME_INSTALLED_APPS_NAMES = [\n     \"django.contrib.admin\",\n     \"django.contrib.auth\",\n@@ -31,8 +35,33 @@ SOME_INSTALLED_APPS_NAMES = [\n \n HERE = os.path.dirname(__file__)\n \n-\n-class AppsTests(SimpleTestCase):\n+@override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+def test_clear_cache_additional(self):\n+    \"\"\"\n+    Extended tests for apps.clear_cache() to ensure all relevant caches are cleared.\n+    \"\"\"\n+\n+    # This is to simulate setting the cache using get_swappable_settings_name\n+    with patch('django.apps.registry.Apps.get_swappable_settings_name', return_value=None) as mocked_get_swappable, \\\n+         patch('django.apps.registry.Apps.get_models') as mocked_get_models:\n+        \n+        # Set up dummy cache values\n+        mocked_get_swappable.cache_clear = lambda: None\n+        mocked_get_swappable.cache_info = lambda: type('CacheInfo', (object,), {'currsize': 1})\n+\n+        mocked_get_models.cache_clear = lambda: None\n+        mocked_get_models.cache_info = lambda: type('CacheInfo', (object,), {'currsize': 1})\n+\n+        # Trigger the cache\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        apps.get_models()\n+\n+        # Clear all caches\n+        apps.clear_cache()\n+\n+        # Assert caches are cleared\n+        self.assertEqual(mocked_get_swappable.cache_info().currsize, 0)\n+        self.assertEqual(mocked_get_models.cache_info().currsize, 0)\n     def test_singleton_main(self):\n         \"\"\"\n         Only one main registry can exist.\n",
  "django__django-17084": "",
  "django__django-17087": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex a812969..e631435 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -243,7 +243,32 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(value.null, new_value.null)\n         self.assertEqual(value.unique, new_value.unique)\n \n-    def test_serialize_numbers(self):\n+    def test_serialize_nested_class_method_as_default(self):\n+        \"\"\"\n+        Test that a class method from a nested class can be serialized correctly when used as a default.\n+        \"\"\"\n+\n+        class Profile(models.Model):\n+            class Capability(models.TextChoices):\n+                BASIC = \"BASIC\", \"Basic\"\n+                PROFESSIONAL = \"PROFESSIONAL\", \"Professional\"\n+\n+                @classmethod\n+                def default(cls) -> list[str]:\n+                    return [cls.BASIC]\n+\n+            capabilities = models.JSONField(\n+                default=Capability.default,\n+                null=True,\n+            )\n+\n+        self.assertSerializedResultEqual(\n+            Profile.Capability.default,\n+            (\n+                \"migrations.test_writer.Profile.Capability.default\",\n+                {\"import migrations.test_writer\"},\n+            ),\n+        )\n         self.assertSerializedEqual(1)\n         self.assertSerializedEqual(1.2)\n         self.assertTrue(math.isinf(self.serialize_round_trip(float(\"inf\"))))\n@@ -1032,4 +1057,4 @@ class WriterTests(SimpleTestCase):\n         with self.assertRaisesMessage(\n             ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"\n         ):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-7530": "",
  "django__django-9296": "",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..40adcf1 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,28 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import matplotlib.pyplot as plt\n+import numpy as np\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0, f\"First bin should start at 0, but got {bins[0]}\"\n+    assert bins[-1] == 1, f\"Last bin should end at 1, but got {bins[-1]}\"\n+\n+def test_hist_density_with_specific_bins():\n+    # Testing with a specified number of bins and density\n+    _, bins, _ = plt.hist(np.random.rand(10), bins=5, range=(0, 1), density=True)\n+    assert bins[0] == 0, f\"First bin should start at 0, but got {bins[0]}\"\n+    assert bins[-1] == 1, f\"Last bin should end at 1, but got {bins[-1]}\"\n+    assert len(bins) == 6, f\"There should be 5 bins, indicating 6 bin edges but got {len(bins)-1}\"\n+\n+def test_hist_density_outside_range():\n+    # Test histogram with density=True where data lies outside the range\n+    data = [1.5, 2.0]\n+    _, bins, _ = plt.hist(data, bins=5, range=(0, 1), density=True)\n+    # Expect no bars in range (0, 1), all data is outside of range\n+    assert bins[0] == 0, f\"First bin should start at 0, but got {bins[0]}\"\n+    assert bins[-1] == 1, f\"Last bin should end at 1, but got {bins[-1]}\"\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6388,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..ca58ea8 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -938,8 +938,36 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    # Test whether a log scale axis can be inverted using its limits\n \n-@image_comparison(baseline_images=['nonfinite_limits'])\n+    fig, ax = plt.subplots()\n+    # Set log scale for y-axis\n+    ax.set_yscale(\"log\")\n+    # Invert y-axis using limits\n+    ax.set_ylim(1000, 1)\n+    # This should successfully invert the log scale axis\n+    assert ax.get_ylim() == (1000, 1)\n+\n+    # Add additional check for the x-axis\n+    ax.set_xscale(\"log\")\n+    ax.set_xlim(100, 1)\n+    assert ax.get_xlim() == (100, 1)\n+    plt.close()\n+\n+    # Check if plot displays correctly in log scale after inverting\n+    fig, ax = plt.subplots()\n+    x = np.linspace(0.1, 10, 100)\n+    y = np.linspace(1, 1000, 100)\n+    ax.plot(x, y)\n+    ax.set_xscale(\"log\")\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(1000, 1)\n+    ax.set_xlim(10, 0.1)\n+\n+    assert ax.get_ylim() == (1000, 1)\n+    assert ax.get_xlim() == (10, 0.1)\n+    plt.close()\n def test_nonfinite_limits():\n     x = np.arange(0., np.e, 0.01)\n     # silence divide by zero warning from log(0)\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..a53bdc2 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6961,6 +6961,24 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    import numpy as np\n+    import matplotlib.pyplot as plt\n+\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    axs = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    axs = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+\n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n \n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..5180654 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -307,8 +307,34 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n         assert y_units is ax.yaxis.units\n \n \n-def test_hist():\n+import matplotlib.pyplot as plt\n+import pytest\n+\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Smoke test to check that no deprecation warning is emitted. See #22640.\n+    \"\"\"\n+    with pytest.warns(None) as record:\n+        f, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.plot([], [])\n+    \n+    # Ensure no deprecation warnings were raised\n+    assert all(not issubclass(w.category, MatplotlibDeprecationWarning) for w in record)\n+\n+def test_no_conversion_error_on_empty_data():\n+    \"\"\"\n+    Test to ensure no ConversionError is raised when empty data is used. See #22640.\n+    \"\"\"\n+    try:\n+        f, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.plot([], [])\n+    except Exception as e:\n+        pytest.fail(f\"ConversionError was raised unexpectedly: {e}\")\n+\n+# Existing test\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..8325f3b 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -912,11 +912,34 @@ def test_proportional_colorbars():\n     extends = ['neither', 'both']\n     spacings = ['uniform', 'proportional']\n     fig, axs = plt.subplots(2, 2)\n-    for i in range(2):\n-        for j in range(2):\n-            CS3 = axs[i, j].contourf(X, Y, Z, levels, cmap=cmap, norm=norm,\n-                                     extend=extends[i])\n-            fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib.colors as mcolors\n+from matplotlib.colorbar import Colorbar\n+\n+@pytest.mark.parametrize(\"extend, coloroffset, res\", [\n+    ('both', 1, [np.array([[0., 0.], [0., 1.]]),\n+                 np.array([[1., 0.], [1., 1.]]),\n+                 np.array([[2., 0.], [2., 1.]])]),\n+    ('min', 0, [np.array([[0., 0.], [0., 1.]]),\n+                np.array([[1., 0.], [1., 1.]])]),\n+    ('max', 0, [np.array([[1., 0.], [1., 1.]]),\n+                np.array([[2., 0.], [2., 1.]])]),\n+    ('neither', -1, [np.array([[1., 0.], [1., 1.]])])\n+])\n+def test_colorbar_extend_drawedges(extend, coloroffset, res):\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(3)\n+    nb_colors = len(bounds) + coloroffset\n+    colors = cmap(np.linspace(0, 1, nb_colors))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend=extend)\n+\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal',\n+                    drawedges=True)\n+    assert np.all(np.equal(cbar.dividers.get_segments(), res))\n \n \n def test_negative_boundarynorm():\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..47dffb2 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -495,8 +495,34 @@ def test_keymaps():\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n \n-\n-def test_rcparams_reset_after_fail():\n+import matplotlib.pyplot as plt\n+import matplotlib\n+from matplotlib import get_backend\n+\n+def test_no_backend_reset_rccontext():\n+    assert mpl.rcParams['backend'] != 'module://aardvark'\n+    with mpl.rc_context():\n+        mpl.rcParams['backend'] = 'module://aardvark'\n+    assert mpl.rcParams['backend'] == 'module://aardvark'\n+\n+def test_get_backend_does_not_clear_gcf_figs():\n+    # Ensure that get_backend() does not clear Gcf.figs when figures are created in an rc_context.\n+    \n+    # Create a figure within an rc_context\n+    with plt.rc_context():\n+        fig1 = plt.figure()\n+\n+    # Capture the current state of Gcf.figs\n+    before = dict(plt._pylab_helpers.Gcf.figs)\n+    \n+    # Call get_backend, which should not modify Gcf.figs\n+    get_backend()\n+\n+    # Capture the state after calling get_backend\n+    after = dict(plt._pylab_helpers.Gcf.figs)\n+\n+    # Assert that the state of Gcf.figs has not changed\n+    assert before == after, f'Gcf.figs changed from {before} to {after}'\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n     # global rc parameters were left in a modified state.\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 0e7274f..2e4ed71 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -39,7 +39,9 @@ from numpy.testing import (\n from matplotlib.testing.decorators import (\n     image_comparison, check_figures_equal, remove_ticks_and_titles)\n \n-# Note: Some test cases are run twice: once normally and once with labeled data\n+# Additional imports for new test cases\n+from mpl_toolkits.mplot3d import Axes3D\n+import pytest\n #       These two must be defined in the same test function or need to have\n #       different baseline images to prevent race conditions when pytest runs\n #       the tests with multiple threads.\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..38bedc7 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -156,8 +156,34 @@ def test_negative_rect():\n     neg_vertices = Rectangle((0, 0), -3, -2).get_verts()[:-1]\n     assert_array_equal(np.roll(neg_vertices, 2, 0), pos_vertices)\n \n+from matplotlib.patches import Rectangle\n+from matplotlib.testing.decorators import check_figures_equal\n \n-@image_comparison(['clip_to_bbox'])\n+@check_figures_equal(extensions=['png'])\n+def test_patch_dash_offset_effect(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.1, 0.1)\n+    width, height = (0.8, 0.8)\n+\n+    rect_test = Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, [6, 6]))\n+    rect_test_offset = Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(6, [6, 6]))\n+\n+    rect_ref = Rectangle(loc, width, height, linewidth=3, edgecolor='b', linestyle=(0, [6, 6]))\n+    # Mimicking the second rectangle with an offset using an equivalent pattern\n+    rect_ref_offset = Rectangle(loc, width, height, linewidth=3, edgecolor='r', linestyle=(6, [6, 6]))\n+\n+    ax_test.add_patch(rect_test)\n+    ax_test.add_patch(rect_test_offset)\n+\n+    ax_ref.add_patch(rect_ref)\n+    with cbook._setattr_cm(rect_ref_offset, _dash_pattern=rect_ref_offset.get_linestyle()):\n+        ax_ref.add_patch(rect_ref_offset)\n+\n+    # Add comparisons for both test and reference figures to ensure they match\n+    ax_test.set_title('Test Figure with Dash Offsets')\n+    ax_ref.set_title('Reference Figure with Dash Offsets')\n def test_clip_to_bbox():\n     fig, ax = plt.subplots()\n     ax.set_xlim([-18, 20])\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..b9adbfb 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,9 +2866,37 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.patches import Rectangle\n+import pytest\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n-def test_stackplot_baseline():\n+def test_stackplot_color_cycle():\n+    # Testing that stackplot does not alter the axes color cycle\n+    x = np.array([1, 2, 3])\n+    y1 = np.array([1, 2, 3])\n+    y2 = np.array([2, 3, 1])\n+    y3 = np.array([3, 1, 2])\n+    \n+    fig, ax = plt.subplots()\n+    initial_color_cycle = [c['color'] for c in ax._get_lines.prop_cycler]\n+    assert len(initial_color_cycle) > 0, \"Initial color cycle is empty\"\n+    \n+    ax.plot(x, y1, color='C0')\n+    ax.add_patch(Rectangle((1.5, 1.5), 0.5, 0.5, facecolor='C1'))\n+    \n+    # Performing the stackplot should not change the initial color cycle\n+    ax.stackplot(x, y1, y2, y3, colors=['C2', 'C3', 'C4'])\n+    \n+    # Re-check the color cycle\n+    final_color_cycle = [c['color'] for c in ax._get_lines.prop_cycler]\n+    assert initial_color_cycle == final_color_cycle, \"Color cycle has been changed by stackplot\"\n+\n+    # Ensure no exceptions raised for using 'C0', 'C1', etc., in stackplot\n+    try:\n+        ax.stackplot(x, y1, y2, y3, colors=['C0', 'C1', 'C2'])\n+    except ValueError as e:\n+        pytest.fail(f\"Stackplot raised an unexpected ValueError: {e}\")\n     np.random.seed(0)\n \n     def layers(n, m):\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..20851ff 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -576,7 +576,33 @@ def test_svg_font_string(font_str, include_generic):\n         rest = rest + [generic]\n     plt.rcParams[f\"font.{generic}\"] = rest\n     plt.rcParams[\"font.size\"] = size\n-    plt.rcParams[\"svg.fonttype\"] = \"none\"\n+def test_annotationbbox_gid_with_varied_data():\n+    # Additional test to ensure gid is correctly added to SVG for varied data\n+    fig, ax = plt.subplots()\n+    arr_img = np.random.rand(10, 10)\n+    xy = (0.5, 0.5)\n+    \n+    imagebox = OffsetImage(arr_img, zoom=0.5)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(100., -50.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.3,\n+                        arrowprops=dict(\n+                            arrowstyle=\"-|>\",\n+                            connectionstyle=\"arc3,rad=0.2\")\n+                        )\n+    ab.set_gid(\"test-unique-gid\")\n+    ax.add_artist(ab)\n+\n+    with io.BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"test-unique-gid\">'\n+    assert expected in buf\n \n     fig, ax = plt.subplots()\n     if generic == \"sans-serif\":\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..96145d2 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,24 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import numpy as np\n+import matplotlib as mpl\n+from numpy.testing import assert_array_equal\n+import matplotlib.colors as mcolors\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.int16, np.int32, np.float16, float])\n+def test_get_cmap_dtype(dtype):\n+    \"\"\"\n+    This test ensures that using different numerical data types with \n+    colormaps does not produce any deprecation warnings or errors.\n+    \"\"\"\n+    cm = mpl.cm.get_cmap(\"viridis\")\n+    # Ensure no warnings or errors occur for colormap usage\n+    assert_array_equal(cm(dtype(0)), cm(0))\n+    assert_array_equal(cm(dtype(128)), cm(128))\n+    assert_array_equal(cm(dtype(255)), cm(255))\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..4fcd5b8 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -578,6 +578,29 @@ class TestSpectral:\n         assert_array_equal(fsp_b, fsp_c)\n         assert_allclose(spec_g, spec_c, atol=1e-08)\n         # these should not be almost equal\n+\n+    def test_psd_window_flattop(self):\n+        # Test for flattop window correction\n+        if self.NFFT_density is None:\n+            return\n+        window = signal.windows.flattop(self.NFFT_density_real)\n+        spec, fsp = mlab.psd(x=self.y,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=window,\n+                             scale_by_freq=True)\n+        spec_c, fsp_c = mlab.psd(x=self.y,\n+                                 NFFT=self.NFFT_density,\n+                                 Fs=self.Fs,\n+                                 noverlap=0,\n+                                 sides=self.sides,\n+                                 window=window)\n+        # Correct the scale using the sum of the window\n+        assert_allclose(spec*window.sum()**2,\n+                        spec_c*self.Fs*(window**2).sum(),\n+                        atol=1e-08)\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n@@ -620,6 +643,29 @@ class TestSpectral:\n         assert_array_equal(fsp_b, fsp_c)\n         assert_allclose(spec_g, spec_c, atol=1e-08)\n         # these should not be almost equal\n+\n+    def test_psd_window_flattop(self):\n+        # Test for flattop window correction\n+        if self.NFFT_density is None:\n+            return\n+        window = signal.windows.flattop(self.NFFT_density_real)\n+        spec, fsp = mlab.psd(x=self.y,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=window,\n+                             scale_by_freq=True)\n+        spec_c, fsp_c = mlab.psd(x=self.y,\n+                                 NFFT=self.NFFT_density,\n+                                 Fs=self.Fs,\n+                                 noverlap=0,\n+                                 sides=self.sides,\n+                                 window=window)\n+        # Correct the scale using the sum of the window\n+        assert_allclose(spec*window.sum()**2,\n+                        spec_c*self.Fs*(window**2).sum(),\n+                        atol=1e-08)\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n@@ -667,6 +713,29 @@ class TestSpectral:\n         assert_array_equal(fsp_b, fsp_c)\n         assert_allclose(spec_g, spec_c, atol=1e-08)\n         # these should not be almost equal\n+\n+    def test_psd_window_flattop(self):\n+        # Test for flattop window correction\n+        if self.NFFT_density is None:\n+            return\n+        window = signal.windows.flattop(self.NFFT_density_real)\n+        spec, fsp = mlab.psd(x=self.y,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=window,\n+                             scale_by_freq=True)\n+        spec_c, fsp_c = mlab.psd(x=self.y,\n+                                 NFFT=self.NFFT_density,\n+                                 Fs=self.Fs,\n+                                 noverlap=0,\n+                                 sides=self.sides,\n+                                 window=window)\n+        # Correct the scale using the sum of the window\n+        assert_allclose(spec*window.sum()**2,\n+                        spec_c*self.Fs*(window**2).sum(),\n+                        atol=1e-08)\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..d23689f 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,33 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..857ac30 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,20 @@\n+\n+def test_pickle_figure_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [0, 1, 4], label=\"Quadratic\")\n+    legend = ax.legend()\n+    legend.set_draggable(True)\n+\n+    # Pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Verify no reference to GUI canvas is in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Unpickle to ensure it succeeds without errors\n+    loaded_fig = pickle.loads(pkl)\n+    assert loaded_fig is not None\n+\n from io import BytesIO\n import ast\n import pickle\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..d776905 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -44,6 +44,46 @@ def test_simple():\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+import pickle\n+from io import BytesIO\n+\n+def test_pickle_figure_with_align_labels():\n+    \"\"\"Test pickling a figure after calling align_labels().\"\"\"\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+    \n+    # Align the labels\n+    fig.align_labels()\n+    \n+    # Try to pickle the figure\n+    pkl = BytesIO()\n+    try:\n+        pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+        success = True\n+    except (TypeError, pickle.PickleError) as e:\n+        print(f\"Pickling failed: {e}\")\n+        success = False\n+    \n+    # Assert that the pickling was successful\n+    assert success, \"Pickling the figure after align_labels() should not fail.\"\n+\n+    # Also ensure that the pickled figure can be loaded back without error\n+    loaded = pickle.loads(pkl.getvalue())\n+    assert loaded is not None, \"Loading the pickled figure failed.\"\n+\n+    plt.close(fig)\n+    plt.close(loaded)\n+\n def _generate_complete_test_figure(fig_ref):\n     fig_ref.set_size_inches((10, 6))\n     plt.figure(fig_ref)\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..997739a 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,83 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib import pyplot as plt\n+import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # See: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # Without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # With C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n \n-def test_hexbin_log_clim():\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_equals_zero_with_C_parameter(fig_test, fig_ref):\n+    datapoints = [\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # Using C parameter with mincnt=0\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=np.sum,\n+        mincnt=0,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor('green')\n+\n+    # Without mincnt, should default to show hexagons with at least one data\n+    ax_ref.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=np.sum,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_ref.set_facecolor('green')\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..5c25f9c 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -88,8 +88,19 @@ def test_contour_no_valid_levels():\n     # no warning if z is uniform.\n     ax.contour(np.ones((9, 9)))\n \n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n \n-def test_contour_Nlevels():\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    ax_test, ax_ref = fig_test.subplots(), fig_ref.subplots()\n+    cs_ref = ax_ref.contour([[0, 1], [1, 2]])\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+\n+    transformed_paths = cs_ref.get_paths()\n+    cs_test.collections[0].set_paths(transformed_paths)\n+\n+    # Ensure that the paths in cs_test are now the transformed_paths\n+    assert cs_test.collections[0].get_paths() == transformed_paths\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n     z = np.arange(12).reshape((3, 4))\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..487fd99 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -243,8 +243,9 @@ def test_default_static_max_age(app):\n     finally:\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n-\n-def test_templates_list(test_apps):\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError, match=\"empty\"):\n+        flask.Blueprint(\"\", __name__)\n     from blueprintapp import app\n \n     templates = sorted(app.jinja_env.list_templates())\n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..731e981 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,12 +81,22 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n             requests.get(url)\n \n-    def test_basic_building(self):\n+    @pytest.mark.parametrize(\n+        'exception, url', (\n+            (InvalidURL, 'http://..example.com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://.'),\n+            (InvalidURL, 'http://.example.com'),\n+        ))\n+    def test_additional_invalid_urls(self, exception, url):\n+        with pytest.raises(exception):\n+            requests.get(url)\n         req = requests.Request()\n         req.url = 'http://kennethreitz.org/'\n         req.data = {'life': '42'}\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..bb30bef 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2309,7 +2309,27 @@ class TestAsCompatibleData:\n         assert isinstance(orig._data, CustomIndexable)\n \n \n-def test_raise_no_warning_for_nan_in_binary_ops():\n+def test_issue_setitem_handling_objects_with_values():\n+    import xarray as xr\n+    import numpy as np\n+\n+    array_with_values_attr = xr.DataArray([None])\n+    array_without_values_attr = xr.DataArray([None])\n+    \n+    class HasValues:\n+        values = 5\n+\n+    class NoValues:\n+        pass\n+    \n+    # Assign an object with a `values` attribute\n+    array_with_values_attr.loc[{'dim_0': 0}] = HasValues()\n+    # Assign an object without a `values` attribute\n+    array_without_values_attr.loc[{'dim_0': 0}] = NoValues()\n+\n+    # Expected: should not coerce the object into its `values`.\n+    assert isinstance(array_with_values_attr.values[0], HasValues)\n+    assert isinstance(array_without_values_attr.values[0], NoValues)\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 274cb25..95aa815 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -3480,7 +3480,17 @@ class TestDataArray:\n \n         assert_identical(da['a'], expected_orig)\n \n-    def test_real_and_imag(self):\n+    @pytest.mark.parametrize('deep', [True, False])\n+    def test_copy_unicode_index(self, deep):\n+        da = xr.DataArray(\n+            np.ones([2]),\n+            coords={'u': ('u', np.array(['foo', 'bar'], dtype='<U3'))},\n+            dims=['u'])\n+        da_cp = da.copy(deep=deep)\n+\n+        assert da_cp.indexes['u'].dtype.kind == 'U'\n+        assert_identical(da['u'], da_cp['u'])\n+        assert_identical(da['u'], xr.IndexVariable('u', np.array(['foo', 'bar'], dtype='<U3')))\n         array = DataArray(1 + 2j)\n         assert_identical(array.real, DataArray(1))\n         assert_identical(array.imag, DataArray(2))\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..e493b52 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -574,7 +574,32 @@ class TestCombineAuto:\n         def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n-    def test_infer_order_from_coords(self):\n+    def test_combine_by_coords_with_identical_non_monotonic_coords(self):\n+        # Test that combine_by_coords handles identical non-monotonic coordinates\n+        # without raising a ValueError.\n+        \n+        y_coord_non_mono = ['a', 'c', 'b']\n+        data1 = np.random.rand(3, 3)\n+        data2 = np.random.rand(4, 3)\n+\n+        ds1 = xr.Dataset(\n+            data_vars=dict(data=(['x', 'y'], data1)),\n+            coords=dict(x=[1, 2, 3], y=y_coord_non_mono)\n+        )\n+\n+        ds2 = xr.Dataset(\n+            data_vars=dict(data=(['x', 'y'], data2)),\n+            coords=dict(x=[4, 5, 6, 7], y=y_coord_non_mono)\n+        )\n+\n+        expected_data = np.concatenate([data1, data2], axis=0)\n+        expected = xr.Dataset(\n+            data_vars=dict(data=(['x', 'y'], expected_data)),\n+            coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=y_coord_non_mono)\n+        )\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n         data = create_test_data()\n         objs = [data.isel(dim2=slice(4, 9)), data.isel(dim2=slice(4))]\n         actual = combine_by_coords(objs)\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..32aa9d0 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,6 +2309,22 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        import numpy as np\n+        from collections import OrderedDict\n+\n+        # Setting up a DataArray with attributes\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units': 'K'})\n+        # Computing quantile with keep_attrs=True\n+        out = da.quantile(0.9, dim='x', keep_attrs=True)\n+\n+        # Assert to check if attributes are kept\n+        assert out.attrs == OrderedDict([('units', 'K')])\n+\n+        # Now check with keep_attrs=False, should not keep attributes\n+        out_no_attrs = da.quantile(0.9, dim='x', keep_attrs=False)\n+        assert out_no_attrs.attrs == OrderedDict()\n \n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n",
  "pydata__xarray-3677": "",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..470aacd 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,6 +109,25 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds3.attrs[\"x\"] == 2\n+\n+    def test_merge_attrs_override_no_side_effects(self):\n+        ds1 = xr.Dataset(attrs={\"a\": \"b\"})\n+        ds2 = xr.Dataset(attrs={\"a\": \"c\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        assert ds3.attrs[\"a\"] == \"b\"\n+        ds3.attrs[\"a\"] = \"d\"\n+        assert ds1.attrs[\"a\"] == \"b\"\n+        assert ds2.attrs[\"a\"] == \"c\"\n+        assert ds3.attrs[\"a\"] == \"d\"\n+\n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..bc6d167 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,8 +1921,32 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n-\n-@pytest.mark.parametrize(\"use_dask\", [True, False])\n+def test_where_attrs_preservation() -> None:\n+    # Testing the preservation of attributes\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr_cond\": \"test_cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr_x\": \"test_x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr_y\": \"test_y\"})\n+\n+    # Test with keep_attrs=True\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected_attrs = {\"attr_cond\": \"test_cond\", \"attr_x\": \"test_x\", \"attr_y\": \"test_y\"}\n+    assert actual.attrs == expected_attrs\n+\n+    # Test with keep_attrs=False (default behavior)\n+    actual_default = xr.where(cond, x, y)\n+    assert actual_default.attrs == {}  # Expected no attributes\n+\n+    # Test when only one argument has attributes and keep_attrs=True\n+    x_no_attrs = xr.DataArray([1, 1], dims=\"x\")\n+    y_with_attrs = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr_y\": \"test_y\"})\n+    actual_partial = xr.where(cond, x_no_attrs, y_with_attrs, keep_attrs=True)\n+    assert actual_partial.attrs == {\"attr_y\": \"test_y\"}\n+\n+    # Test dtype conservation\n+    data = xr.DataArray(np.ones([10, 10], dtype=np.int8), attrs={\"attr\": \"preserve_test\"})\n+    result = xr.where(data == 1, 5, 0, keep_attrs=True)\n+    assert result.dtype == np.int8  # Ensures dtype conservation\n+    assert result.attrs == {\"attr\": \"preserve_test\"}  # Ensures attribute conservation\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n     if use_dask and not has_dask:\n",
  "pydata__xarray-4695": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 3a4b8ad..a28d919 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -64,6 +64,16 @@ class TestDataArray:\n         )\n         self.mda = DataArray([0, 1, 2, 3], coords={\"x\": self.mindex}, dims=\"x\")\n \n+    def test_loc_dim_name_collision_with_sel_params(self):\n+        da = DataArray(\n+            [[0, 0], [1, 1]],\n+            dims=[\"dim1\", \"method\"],\n+            coords={\"dim1\": [\"x\", \"y\"], \"method\": [\"a\", \"b\"]},\n+        )\n+        np.testing.assert_array_equal(\n+            da.loc[dict(dim1=[\"x\", \"y\"], method=[\"a\"])], [[0], [1]]\n+        )\n+\n     def test_repr(self):\n         v = Variable([\"time\", \"x\"], [[1, 2, 3], [4, 5, 6]], {\"foo\": \"bar\"})\n         coords = {\"x\": np.arange(3, dtype=np.int64), \"other\": np.int64(0)}\n",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..91e50df 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -3,6 +3,7 @@ from contextlib import suppress\n import numpy as np\n import pandas as pd\n import pytest\n+import numpy as np\n \n import xarray as xr\n from xarray.coding import variables\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..503a2a1 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1920,7 +1920,30 @@ def test_where() -> None:\n     assert_identical(expected, actual)\n \n \n-def test_where_attrs() -> None:\n+def test_where_scalar_with_keep_attrs() -> None:\n+    # Test using xr.where with a scalar second argument and keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    # Since scalars have no attributes, expected attrs should be {}\n+    assert_identical(expected, actual)\n+    assert actual.attrs == {}\n+\n+    # Test with more complex condition and check no errors are raised\n+    cond = xr.DataArray([True, False, True, False], dims=\"x\")\n+    actual = xr.where(cond, 5, -5, keep_attrs=True)\n+    expected = xr.DataArray([5, -5, 5, -5], dims=\"x\")\n+    assert_identical(expected, actual)\n+    assert actual.attrs == {}\n+\n+    # Make sure using actual DataArrays with attrs still gets tested, as these should preserve attrs\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+    assert actual.attrs == {\"attr\": \"x\"}\n     cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n     x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n     y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n",
  "pydata__xarray-6599": "",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..9989b36 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -218,9 +218,43 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n             return Variable(v.dims, data, v.attrs)\n \n         return {k: lazy_inaccessible(k, v) for k, v in self._variables.items()}\n-\n+import xarray as xr\n+import pytest\n+from xarray.core.dataarray import DataArray\n+from xarray.core.dataset import Dataset\n+from xarray.tests.mocked_store import InaccessibleArray, InaccessibleVariableDataStore\n+from xarray.backends.api import open_dataset\n \n class TestDataset:\n+    def test_chunks_does_not_load_data(self) -> None:\n+        # regression test for related issue\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        ds = xr.open_dataset(url, engine='zarr')\n+        \n+        try:\n+            ds.chunks\n+            assert True, \"Accessing chunks did not trigger whole array read\"\n+        except Exception:\n+            assert False, \"Accessing chunks triggered whole array read\"\n+\n+    @pytest.mark.slow\n+    def test_chunks_checking(self):\n+        # This test mocks InaccessibleVariableDataStore behavior\n+        store = InaccessibleVariableDataStore()\n+        create_test_data().dump_to_store(store)\n+        ds = open_dataset(store)\n+\n+        with pytest.raises(UnexpectedDataAccess):\n+            ds.chunks\n+\n+    def test_exposed_callable_data(self):\n+        # Ensures accessing data through callable doesn't trigger loads\n+        store = InaccessibleVariableDataStore()\n+        create_test_data().dump_to_store(store)\n+        ds = open_dataset(store)\n+        \n+        for var in ds.variables.values():\n+            assert callable(var.data)\n     def test_repr(self) -> None:\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n",
  "pydata__xarray-6744": "",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..c5bd4c1 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,20 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import xarray as xr\n+import numpy as np\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"int64\", \"float32\", \"float64\"])\n+def test_dtype_preservation_on_stack(dtype):\n+    # Create a dataset with a coordinate of the specified dtype\n+    ds = xr.Dataset(coords={'a': np.array([0, 1], dtype=dtype)})\n+    # Stack the coordinate into a MultiIndex and check dtype preservation\n+    stacked_ds = ds.stack(b=('a',))\n+    assert stacked_ds['a'].values.dtype == ds['a'].values.dtype\n+\n+@pytest.mark.parametrize(\"initial_dtype, expected_dtype\", [(\"int32\", \"int32\"), (\"float32\", \"float32\")])\n+def test_restore_dtype_on_multiindexes(initial_dtype, expected_dtype):\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=initial_dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == expected_dtype\n",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..1cf46cc 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,21 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pylint.lint import Run\n+import pytest\n+from _pytest.capture import CaptureFixture\n+\n+EMPTY_MODULE = \"path/to/empty_module.py\"\n+\n+def test_short_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the short verbose flag -v does not require an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..ea64d4b 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,7 +1233,38 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n-    def test_recursive(self):\n+    @pytest.mark.parametrize(\n+        \"ignore_parameter,ignore_parameter_value\",\n+        [\n+            (\"--ignore\", \".a\"),\n+            (\"--ignore-patterns\", \"^\\\\.a\"),\n+            (\"--ignore-paths\", \"\\\\.a/\"),\n+        ],\n+    )\n+    def test_recursive_ignore_respects_ignores(self, ignore_parameter, ignore_parameter_value):\n+        \"\"\"Test that recursive mode respects ignore options.\"\"\"\n+        run = Run(\n+            [\n+                \"--recursive=y\",\n+                ignore_parameter,\n+                ignore_parameter_value,\n+                join(HERE, \"regrtest_data\"),\n+            ],\n+            exit=False,\n+        )\n+        linted_files = run.linter._iterate_file_descrs(\n+            tuple(run.linter._discover_files([join(HERE, \"regrtest_data\")]))\n+        )\n+        linted_file_paths = [file_item.filepath for file_item in linted_files]\n+\n+        ignored_file = os.path.abspath(\n+            join(HERE, \"regrtest_data\", \".a\", \"foo.py\")\n+        )\n+        assert ignored_file not in linted_file_paths\n+\n+        # Ensure other files are linted\n+        bar_file = os.path.abspath(join(HERE, \"regrtest_data\", \"bar.py\"))\n+        assert bar_file in linted_file_paths\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n             code=0,\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..5bb44bb 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -765,8 +765,33 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n \n-            paths = [cwd, \"/custom_pythonpath\", *default_paths]\n+            paths = [\"/do_not_remove\", *default_paths]\n             sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths\n+\n+            # New test cases to verify the fix\n+            paths = [\"\", \"/another_path\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]  # First empty path should be removed\n+\n+            paths = [\"something\", \"/yet_another_path\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths  # Should not alter sys.path as the first element is not \"\", \".\", or cwd\n+\n+            with patch(\"os.getcwd\") as mock_getcwd:\n+                mock_getcwd.return_value = \"/current_directory\"\n+                paths = [\"/current_directory\", *default_paths]\n+                sys.path = copy(paths)\n+                with _test_environ_pythonpath():\n+                    modify_sys_path()\n+                mock_getcwd.assert_called_once()\n+                assert sys.path == paths[1:]  # First cwd path should be removed\n             with _test_environ_pythonpath(\"/custom_pythonpath\"):\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..1761401 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -168,6 +168,20 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n \n     assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n \n+def test_caplog_get_records_after_clear(caplog):\n+    logger = logging.getLogger()\n+    logger.info(\"initial_log\")\n+    assert [r.message for r in caplog.get_records(\"call\")] == [\"initial_log\"]\n+    \n+    caplog.clear()\n+    assert caplog.get_records(\"call\") == []\n+    \n+    logger.info(\"log_after_clear\")\n+    assert [r.message for r in caplog.get_records(\"call\")] == [\"log_after_clear\"]\n+\n+    logger.info(\"another_log_after_clear\")\n+    assert [r.message for r in caplog.get_records(\"call\")] == [\"log_after_clear\", \"another_log_after_clear\"]\n+\n     # This reaches into private API, don't use this type of thing in real tests!\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_debugging.py b/testing/test_debugging.py\nindex 912abd7..27721fd 100644\n--- a/testing/test_debugging.py\n+++ b/testing/test_debugging.py\n@@ -175,22 +175,31 @@ class TestPDB:\n         assert \"debug.me\" in rest\n         self.flush(child)\n \n-    def test_pdb_unittest_skip(self, pytester: Pytester) -> None:\n-        \"\"\"Test for issue #2137\"\"\"\n+    def test_pdb_unittest_skip_class_teardown(self, pytester: Pytester) -> None:\n+        \"\"\"Test case for issue regarding unittest skip with class-level decorator and --pdb.\"\"\"\n         p1 = pytester.makepyfile(\n             \"\"\"\n             import unittest\n-            @unittest.skipIf(True, 'Skipping also with pdb active')\n-            class MyTestCase(unittest.TestCase):\n-                def test_one(self):\n+\n+            @unittest.skip(\"Skipping this test class\")\n+            class TestClassLevelSkip(unittest.TestCase):\n+                def setUp(self):\n+                    self.var = \"setup\"\n+                \n+                def test_method(self):\n                     assert 0\n-        \"\"\"\n+                \n+                def tearDown(self):\n+                    self.var = \"teardown\"\n+                    raise RuntimeError(\"teardown should not be called\")\n+\n+            \"\"\"\n         )\n-        child = pytester.spawn_pytest(f\"-rs --pdb {p1}\")\n-        child.expect(\"Skipping also with pdb active\")\n-        child.expect_exact(\"= 1 skipped in\")\n-        child.sendeof()\n-        self.flush(child)\n+        result = pytester.runpytest_subprocess(\"--pdb\", p1)\n+        result.stdout.fnmatch_lines([\n+            \"collected 1 item\",\n+            \"*= 1 skipped in *\"\n+        ])\n \n     def test_pdb_print_captured_stdout_and_stderr(self, pytester: Pytester) -> None:\n         p1 = pytester.makepyfile(\n",
  "pytest-dev__pytest-5262": "",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 8c1c2d7..5925d4b 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1,6 +1,8 @@\n+\n import gc\n \n import pytest\n+import numpy as np\n from _pytest.main import ExitCode\n \n \n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..49d269b 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -119,8 +119,32 @@ class TestPaste(object):\n \n             monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n+    import sys\n \n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n+        # Ensure the lexer used is \"text\", per issue resolution.\n+        result = pastebin.create_new_paste(b\"full-paste-contents\")\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=full-paste-contents\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n+\n+    def test_create_new_paste_with_complex_content(self, pastebin, mocked_urlopen):\n+        # Simulate some complex content similar to the problematic data.txt mentioned in the issue.\n+        complex_content = b\"line1\\nline2\\nsome_special_chars_!@#$%^&*()\\nend_of_content\"\n+        result = pastebin.create_new_paste(complex_content)\n+        assert result == \"https://bpaste.net/show/3c0c6750bd\"\n+        assert len(mocked_urlopen) == 1\n+        url, data = mocked_urlopen[0]\n+        assert type(data) is bytes\n+        assert url == \"https://bpaste.net\"\n+        assert \"lexer=text\" in data.decode()\n+        assert \"code=line1\\nline2\\nsome_special_chars_!@#$%^&*()\\nend_of_content\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n         assert result == \"https://bpaste.net/show/3c0c6750bd\"\n         assert len(mocked_urlopen) == 1\n@@ -130,4 +154,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..777bfae 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -703,6 +703,23 @@ class Test_genitems:\n         assert items[2].name == \"testmethod_one\"\n \n         # let's also test getmodpath here\n+\n+    def test_parametrize_square_brackets(self, testdir):\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+\n+            class TestY:\n+                @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+                def testmethod_two(self, arg0):\n+                    pass\n+            \"\"\"\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 1\n+        assert items[0].name == \"testmethod_two[.[]\"\n+        # Verify the getmodpath includes the correct test method and parameter\n+        assert items[0].getmodpath() == \"TestY.testmethod_two[.[]\"\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..022944c 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -199,9 +200,21 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n     assert result.ret == 0\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n \n-\n-def test_dynamic_fixture_request(testdir):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..862182a 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -595,6 +595,30 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*testing stuff*\", \"*1 skipped*\"])\n \n+    def test_skip_location_reporting_without_runxfail(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_check_skip_location():\n+                assert 0\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\")\n+        result.stdout.fnmatch_lines([\"*SKIPPED*test_check_skip_location*:*unconditional skip*\", \"*1 skipped*\"])\n+\n+    def test_skip_location_reporting_with_runxfail(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_check_skip_location():\n+                assert 0\n+        \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"*SKIPPED*test_check_skip_location*:*unconditional skip*\", \"*1 skipped*\"])\n+\n     def test_skip_no_reason(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..46301c0 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,7 +1,9 @@\n+\n import sys\n \n import pytest\n from _pytest.runner import runtestprotocol\n+from _pytest.pytester import Testdir\n from _pytest.skipping import evaluate_skip_marks\n from _pytest.skipping import evaluate_xfail_marks\n from _pytest.skipping import pytest_runtest_setup\n@@ -235,6 +237,31 @@ class TestXFail:\n             [\"*def test_func():*\", \"*assert 0*\", \"*1 failed*1 pass*\"]\n         )\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        \"\"\"Test case to verify dynamically adding xfail during runtime.\"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        \"\"\"Test case to verify xfail with strict=True during runtime.\"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     @pytest.mark.parametrize(\n         \"test_input,expected\",\n         [\n@@ -411,7 +438,7 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*NOTRUN*\"])\n \n-    def test_dynamic_xfail_set_during_funcarg_setup(self, testdir):\n+    def test_dynamic_xfail_set_during_funcarg_setup(self, testdir: Testdir):\n         p = testdir.makepyfile(\n             \"\"\"\n             import pytest\n@@ -425,6 +452,31 @@ class TestXFail:\n         result = testdir.runpytest(p)\n         result.stdout.fnmatch_lines([\"*1 xfailed*\"])\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        \"\"\"Test case to verify dynamically adding xfail during runtime.\"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        \"\"\"Test case to verify xfail with strict=True during runtime.\"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     @pytest.mark.parametrize(\n         \"expected, actual, matchline\",\n         [\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..7a974cd 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -511,7 +511,13 @@ class TestCaptureFixture:\n                 assert out.startswith(\"42\")\n                 capfd.close()\n             \"\"\"\n-        )\n+        )        \n+\n+    @pytest.mark.parametrize(\"nl\", (\"\\\\n\", \"\\\\r\\\\n\", \"\\\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test end\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec.assertoutcome(passed=1)\n \n     def test_capfdbinary(self, testdir):\n@@ -525,7 +531,13 @@ class TestCaptureFixture:\n                 assert out == b'\\\\xfe\\\\x98\\\\x20'\n                 assert err == b''\n             \"\"\"\n-        )\n+        )        \n+\n+    @pytest.mark.parametrize(\"nl\", (\"\\\\n\", \"\\\\r\\\\n\", \"\\\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test end\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec.assertoutcome(passed=1)\n \n     def test_capsysbinary(self, testdir):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..53bd8bf 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,6 +51,32 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n+def test_change_level_undos_handler_level(testdir: Testdir) -> None:\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\n+\n+    Issue #7569. Tests the handler level specifically.\n+    \"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n+\n def test_with_statement(caplog):\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..434b32b 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1178,6 +1179,27 @@ def test_collect_symlink_out_of_tree(testdir):\n     assert result.ret == 0\n \n \n+def test_symlinked_dir_collected_with_tests(pytester: Pytester) -> None:\n+    \"\"\"Test if symlinked directory containing test files is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_symlink.py\").write_text(\"def test_symlink(): pass\", \"utf-8\")\n+    symlink_path = pytester.path.joinpath(\"symlink_to_dir\")\n+    symlink_path.symlink_to(dir)\n+    \n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)  # Both the original and symlinked tests should pass\n+\n+\n+def test_symlink_to_empty_dir(pytester: Pytester) -> None:\n+    \"\"\"Ensure an empty symlinked directory does not cause test collection issues.\"\"\"\n+    dir = pytester.mkdir(\"empty_dir\")\n+    symlink_path = pytester.path.joinpath(\"symlink_to_empty_dir\")\n+    symlink_path.symlink_to(dir)\n+    \n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=0)  # No tests should run\n+\n+\n def test_collectignore_via_conftest(testdir):\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n     tests = testdir.mkpydir(\"tests\")\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..b13ac02 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,6 +301,31 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_unittest_setupclass_fixture_visibility(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+\n+            def test_func1(self):\n+                pass\n+        \"\"\"\n+    )\n+\n+    # Check default --fixtures output, expecting not to see the setUpClass\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture*\")\n+\n+    # Check verbose --fixtures output, expecting to see the setUpClass\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*unittest_setUpClass_fixture*\"])\n+\n \n def test_setup_class(pytester: Pytester) -> None:\n     testpath = pytester.makepyfile(\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..4d4cca4 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,8 +597,34 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values functionality.\n+    from sklearn.linear_model import RidgeClassifierCV\n+    rng = np.random.RandomState(42)\n+\n+    n_samples = 8\n+    n_features = 5\n+    x = rng.randn(n_samples, n_features)\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n \n-def test_ridgecv_sample_weight():\n+    # with len(y.shape) == 1\n+    y = rng.choice([-1, 1], size=n_samples)\n+    r.fit(x, y)\n+    # RidgeClassifierCV does not support sample_weight with len(y.shape) == 2\n+    assert r.cv_values_.shape == (n_samples, n_alphas), \"Shape of cv_values does not match expectation\"\n+    \n+    # Test multi-output response, should raise an error as it's not supported\n+    y_multi = np.vstack([y, -y]).T\n+    try:\n+        r.fit(x, y_multi)\n+        cv_values_shape = r.cv_values_.shape\n+    except ValueError as e:\n+        cv_values_shape = 'error'\n+    \n+    assert cv_values_shape == 'error', \"RidgeClassifierCV should raise an error for multi-output targets\"\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..107f4bd 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,22 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+import numpy as np\n+from sklearn.metrics import fowlkes_mallows_score\n+from sklearn.utils.testing import assert_all_finite\n+\n+def test_int_overflow_fowlkes_mallows_score():\n+    # Test overflow in fowlkes_mallows_score by creating large labels array\n+    # This test ensures that no RuntimeWarning or overflow errors occur\n+    labels_true = np.array([1] * (52632 + 2529) + [2] * (14660 + 793) + \n+                           [3] * (3271 + 204) + [4] * (814 + 39) + \n+                           [5] * (316 + 20))\n+    labels_pred = np.array([0] * 52632 + [1] * 2529 + [0] * 14660 + \n+                           [1] * 793 + [0] * 3271 + [1] * 204 + \n+                           [0] * 814 + [1] * 39 + [0] * 316 + [1] * 20)\n+\n+    # We want to ensure that the value returned is finite\n+    assert_all_finite(fowlkes_mallows_score(labels_true, labels_pred))\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..364dc32 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,8 +558,27 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n+def test_countvectorizer_custom_vocabulary_get_feature_names():\n+    from sklearn.feature_extraction.text import CountVectorizer\n+    from sklearn.utils.testing import assert_array_equal\n+\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    vectorizer = CountVectorizer(vocabulary=vocab)\n+\n+    # Check get_feature_names does not raise an exception\n+    feature_names = vectorizer.get_feature_names()\n+    assert_array_equal(vocab, feature_names)\n+\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n \n-def test_vectorizer_max_features():\n+    # `transform` should not raise an error and should transform using vocabulary\n+    X = vectorizer.transform(corpus)\n+    assert X.shape[1] == len(vocab)  # Ensure the shape matches the vocabulary size\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..77424b9 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1167,11 +1167,21 @@ def test_search_cv_timing():\n             assert_true(np.all(search.cv_results_[key] >= 0))\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n+        # Check that refit_time_ attribute exists and is valid\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n+\n         for key in ['mean_score_time', 'std_score_time']:\n             assert_true(search.cv_results_[key][1] >= 0)\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n+        # Check that refit_time_ attribute exists and is valid\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n+\n \n def test_grid_search_correct_score_results():\n     # test that correct scores are used\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..e541892 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,6 +21,7 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n+from sklearn.metrics.scorer import get_scorer\n \n from sklearn.exceptions import ConvergenceWarning\n from sklearn.exceptions import ChangedBehaviorWarning\n",
  "scikit-learn__scikit-learn-12585": "",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..b506a00 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -18,7 +18,8 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..317462d 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -481,6 +481,34 @@ def test_shuffle_kfold_stratifiedkfold_reproducibility():\n                     np.testing.assert_array_equal(test_a, test_b)\n \n \n+def test_stratifiedkfold_shuffling():\n+    # Test whether StratifiedKFold shuffles the data correctly\n+    X = np.arange(20)\n+    y = np.array([0] * 10 + [1] * 10)\n+\n+    # Test with shuffle=False\n+    skf_no_shuffle = StratifiedKFold(n_splits=5, shuffle=False, random_state=42)\n+    test_sets_no_shuffle = [test for _, test in skf_no_shuffle.split(X, y)]\n+\n+    # With shuffle=False, test sets should be deterministic and equal\n+    skf_no_shuffle_2 = StratifiedKFold(n_splits=5, shuffle=False, random_state=42)\n+    test_sets_no_shuffle_2 = [test for _, test in skf_no_shuffle_2.split(X, y)]\n+    for test_a, test_b in zip(test_sets_no_shuffle, test_sets_no_shuffle_2):\n+        np.testing.assert_array_equal(test_a, test_b)\n+\n+    # Test with shuffle=True\n+    skf_shuffle_1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n+    skf_shuffle_2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=43)\n+\n+    test_sets_shuffle_1 = [test for _, test in skf_shuffle_1.split(X, y)]\n+    test_sets_shuffle_2 = [test for _, test in skf_shuffle_2.split(X, y)]\n+\n+    # With different random states, the test indices should differ\n+    for test_a, test_b in zip(test_sets_shuffle_1, test_sets_shuffle_2):\n+        with pytest.raises(AssertionError):\n+            np.testing.assert_array_equal(test_a, test_b)\n+\n+\n def test_shuffle_stratifiedkfold():\n     # Check that shuffling is happening when requested, and for proper\n     # sample coverage\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..de7a8ed 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,27 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+\n+    # with 2 bins\n+    est = KBinsDiscretizer(n_bins=2, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_2bins, Xt.ravel())\n+\n+    # with 3 bins\n+    est = KBinsDiscretizer(n_bins=3, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_3bins, Xt.ravel())\n+    \n+    # with 5 bins\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_5bins, Xt.ravel())\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..18a43ea 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,6 +597,17 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n+import numpy as np\n+from sklearn.mixture import GaussianMixture\n+from sklearn.utils.testing import assert_array_equal\n+\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Ensure that fit_predict and fit().predict are consistent with n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n \n def test_gaussian_mixture_fit():\n     # recover the ground truth\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..4c7d2ec 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,8 +396,37 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n-\n-def test_plot_tree_entropy(pyplot):\n+def test_export_text_single_feature():\n+    # Prepare data with a single feature.\n+    X, y = load_iris(return_X_y=True)\n+    X_single_feature = X[:, 0].reshape(-1, 1)\n+\n+    # Train DecisionTreeClassifier with a single feature.\n+    tree = DecisionTreeClassifier(random_state=42)\n+    tree.fit(X_single_feature, y)\n+\n+    # Expectation: export_text should work without raising IndexError.\n+    expected_report = dedent(\"\"\"\\\n+    |--- sepal_length <= 5.55\n+    |   |--- sepal_length <= 4.95\n+    |   |   |--- sepal_length <= 2.45\n+    |   |   |   |--- class: 0\n+    |   |   |--- sepal_length >  2.45\n+    |   |   |   |--- class: 0\n+    |   |--- sepal_length >  4.95\n+    |   |   |--- sepal_length <= 5.45\n+    |   |   |   |--- class: 1\n+    |   |   |--- sepal_length >  5.45\n+    |   |   |   |--- class: 1\n+    |--- sepal_length >  5.55\n+    |   |--- sepal_length <= 6.15\n+    |   |   |--- class: 2\n+    |   |--- sepal_length >  6.15\n+    |   |   |--- class: 2\n+    \"\"\").lstrip()  # This example output may vary based on the dataset split.\n+\n+    # Run export_text and check output.\n+    assert export_text(tree, feature_names=['sepal_length']) == expected_report\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..3686c5b 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1553,8 +1553,30 @@ def test_LogisticRegressionCV_no_refit(multi_class):\n     assert lrcv.l1_ratio_.shape == (n_classes,)\n     assert lrcv.coef_.shape == (n_classes, n_features)\n \n+import pytest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn.datasets import make_classification\n \n-def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n+@pytest.mark.parametrize('solver', ('saga', 'liblinear'))\n+def test_LogisticRegressionCV_no_refit_issue(solver):\n+    # Test to ensure no IndexError is thrown when refit=False\n+\n+    # Generate synthetic data\n+    n_samples, n_features, n_classes = 1000, 3, 2\n+    X, y = make_classification(n_samples=n_samples, n_features=n_features,\n+                               n_classes=n_classes, n_informative=3, \n+                               random_state=29, n_clusters_per_class=1)\n+    \n+    # Initialize LogisticRegressionCV with refit=False\n+    model = LogisticRegressionCV(cv=5, solver=solver, tol=1e-2, refit=False, random_state=0)\n+    \n+    # Fit the model\n+    model.fit(X, y)\n+\n+    # Check attributes shapes to assure the model works correctly\n+    assert model.C_.shape == (n_classes,)\n+    assert model.coef_.shape == (n_classes, n_features)\n     # Make sure the shapes of scores_ and coefs_paths_ attributes are correct\n     # when using elasticnet (added one dimension for l1_ratios)\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..2fa48d3 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -24,10 +24,14 @@ def test_get_deps_info():\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n \n+def test_joblib_in_deps_info():\n+    deps_info = _get_deps_info()\n+\n+    assert 'joblib' in deps_info\n \n def test_show_versions_with_blas(capsys):\n     show_versions()\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..d9f57bb 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -125,7 +125,16 @@ def test_extract_xi():\n     assert_array_equal(clust.labels_, expected_labels)\n \n \n-def test_cluster_hierarchy_():\n+def test_optics_min_samples_float():\n+    # Test that using a float for min_samples does not raise an error\n+    rng = np.random.RandomState(42)\n+    X = rng.random_sample((10, 2))  # small random dataset\n+\n+    clust = OPTICS(min_samples=0.2, min_cluster_size=0.2,\n+                   max_eps=20, cluster_method='xi',\n+                   xi=0.05).fit(X)\n+    # Check that the algorithm runs without error and produces labels\n+    assert len(clust.labels_) == len(X)\n     rng = np.random.RandomState(0)\n     n_points_per_cluster = 100\n     C1 = [0, 0] + 2 * rng.randn(n_points_per_cluster, 2)\n",
  "scikit-learn__scikit-learn-14710": "diff --git a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\nindex 7e8bccd..dc673c5 100644\n--- a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n@@ -414,4 +414,28 @@ def test_infinite_values_missing_values():\n                                                learning_rate=1, max_depth=2)\n \n     assert stump_clf.fit(X, y_isinf).score(X, y_isinf) == 1\n-    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+\n+\n+@pytest.mark.parametrize(\"scoring\", [None, 'loss'])\n+def test_string_target_early_stopping(scoring):\n+    # Regression tests for #14709 where the targets need to be encoded before\n+    # to compute the score\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+\n+    # Test case with binary string labels\n+    y_binary = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\n+    gbrt_binary = HistGradientBoostingClassifier(n_iter_no_change=10, scoring=scoring)\n+    gbrt_binary.fit(X, y_binary)\n+\n+    # Test case with multiclass string labels\n+    y_multiclass = np.array(['x'] * 33 + ['y'] * 33 + ['z'] * 34, dtype=object)\n+    gbrt_multiclass = HistGradientBoostingClassifier(n_iter_no_change=10, scoring=scoring)\n+    gbrt_multiclass.fit(X, y_multiclass)\n+\n+    # Test case with scoring as accuracy and string targets\n+    gbrt_with_accuracy = HistGradientBoostingClassifier(n_iter_no_change=10, scoring='accuracy')\n+    gbrt_with_accuracy.fit(X, y_binary)\n+\n+    # Ensure that fitting does not throw any errors\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..5f703c1 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,47 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+import numpy as np\n+import scipy.sparse as sp\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for zero division error when support vectors are empty\n+    X_train = sp.csr_matrix([[0, 1, 0, 0],\n+                             [0, 0, 0, 1],\n+                             [0, 0, 1, 0],\n+                             [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_multiple_types():\n+    # Additional test to ensure no error with different sparse inputs\n+    X_train_dense = np.array([[0, 1, 0, 0],\n+                              [0, 0, 0, 1],\n+                              [0, 0, 1, 0],\n+                              [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+\n+    # Test with CSR matrix\n+    X_train_csr = sp.csr_matrix(X_train_dense)\n+    model_csr = svm.SVR(kernel='linear')\n+    model_csr.fit(X_train_csr, y_train)\n+    assert model_csr.dual_coef_ is not None\n+\n+    # Test with CSC matrix\n+    X_train_csc = sp.csc_matrix(X_train_dense)\n+    model_csc = svm.SVR(kernel='linear')\n+    model_csc.fit(X_train_csc, y_train)\n+    assert model_csc.dual_coef_ is not None\n+\n+    # Test with COO matrix\n+    X_train_coo = sp.coo_matrix(X_train_dense)\n+    model_coo = svm.SVR(kernel='linear')\n+    model_coo.fit(X_train_coo, y_train)\n+    assert model_coo.dual_coef_ is not None\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..18f3fd7 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,8 +97,29 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+def test_strip_accents_nfkd():\n+    from sklearn.feature_extraction.text import strip_accents_unicode\n \n-def test_to_ascii():\n+    # Verify original issue example for NFKD forms.\n+    s1 = chr(241)  # \"\u00f1\", LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # \"n\u0303\", LATIN SMALL LETTER N + COMBINING TILDE\n+    assert strip_accents_unicode(s1) == \"n\"  # Confirm stripping from NFC form.\n+    assert strip_accents_unicode(s2) == \"n\"  # Ensure stripping from NFKD form.\n+\n+    # Test with other decomposed and combining forms\n+    decomposed_char = \"o\\u0308\"  # \"o\u0308\", LATIN SMALL LETTER O + COMBINING DIAERESIS\n+    assert strip_accents_unicode(decomposed_char) == \"o\"  # Should result in \"o\"\n+\n+    combined_marks = \"\\u0300\\u0301\\u0302\\u0303\"  # Combining grave, acute, circumflex, tilde\n+    assert strip_accents_unicode(combined_marks) == \"\"  # Should result in empty string\n+\n+    multiple_comb_marks = \"o\\u0308\\u0304\"  # \"o\u0308\u0304\", LATIN SMALL LETTER O + COMBINING DIAERESIS + COMBINING MACRON\n+    assert strip_accents_unicode(multiple_comb_marks) == \"o\"  # Should result in \"o\"\n+\n+    # Test with strings that contain mixed characters and combining marks\n+    mixed_string = \"t\u00ebst o\\u0308k!\"\n+    expected_result = \"test ok!\"\n+    assert strip_accents_unicode(mixed_string) == expected_result  # Should strip to \"test ok!\"\n     # check some classical latin accentuated symbols\n     a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n     expected = 'aaaaaaceeee'\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_feature_select.py b/sklearn/feature_selection/tests/test_feature_select.py\nindex 1bc044a..16eb10f 100644\n--- a/sklearn/feature_selection/tests/test_feature_select.py\n+++ b/sklearn/feature_selection/tests/test_feature_select.py\n@@ -939,8 +939,36 @@ def test_mutual_info_regression():\n         .fit(X, y)\n         .transform(X)\n     )\n+\n+def test_output_dataframe_dtypes_preservation():\n+    \"\"\"Check that output DataFrame dtypes are preserved after transformation.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    # Generate a sample DataFrame with varied dtypes\n+    X = pd.DataFrame(\n+        {\n+            \"int_col\": pd.Series([1, 2, 3], dtype=np.int32),\n+            \"float_col\": pd.Series([1.0, 2.4, 3.5], dtype=np.float32),\n+            \"cat_col\": pd.Series(['x', 'y', 'z'], dtype='category'),\n+        }\n+    )\n+    \n+    y = pd.Series([0, 1, 0], dtype='int')\n+\n+    # Define a dummy selector transformer that selects all features\n+    def dummy_selector(X, y):\n+        return np.arange(X.shape[1])\n+\n+    # Apply SelectKBest with the dummy selector\n+    selector = SelectKBest(dummy_selector, k='all').set_output(transform=\"pandas\")\n+    selector.fit(X, y)\n+    output = selector.transform(X)\n+\n+    # Assert the dtypes are preserved\n+    for name, dtype in output.dtypes.items():\n+        assert dtype == X.dtypes[name]\n     assert_array_equal(X_r, X_r2)\n     support = univariate_filter.get_support()\n     gtruth = np.zeros(10)\n     gtruth[:2] = 1\n-    assert_array_equal(support, gtruth)\n+    assert_array_equal(support, gtruth)\n",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..66d0241 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1524,6 +1524,41 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     assert_allclose(X_imputed[:, 1], 0)\n \n \n+def test_iterative_imputer_constant_fill_value_with_float():\n+    \"\"\"Test IterativeImputer with fill_value set to a float.\"\"\"\n+    X = np.array([[np.nan, 1], [2, np.nan], [np.nan, 3]])\n+    fill_value = 10.5\n+    imputer = IterativeImputer(\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert_allclose(imputer.initial_imputer_.statistics_, [fill_value, fill_value])\n+\n+def test_iterative_imputer_constant_fill_value_with_nan():\n+    \"\"\"Test IterativeImputer with fill_value set to np.nan.\"\"\"\n+    X = np.array([[np.nan, 1], [2, np.nan], [np.nan, 3]])\n+    fill_value = np.nan\n+    imputer = IterativeImputer(\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    nan_statistics = np.isnan(imputer.initial_imputer_.statistics_)\n+    assert np.all(nan_statistics), \"Expected NaN statistics when fill_value is NaN\"\n+    X = np.array([[1, np.nan, 2], [3, np.nan, np.nan]])\n+\n+    imputer = IterativeImputer(\n+        initial_strategy=initial_strategy, keep_empty_features=True\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    assert_allclose(X_imputed[:, 1], 0)\n+    X_imputed = imputer.transform(X)\n+    assert_allclose(X_imputed[:, 1], 0)\n+\n+\n @pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n def test_knn_imputer_keep_empty_features(keep_empty_features):\n     \"\"\"Check the behaviour of `keep_empty_features` for `KNNImputer`.\"\"\"\n",
  "scikit-learn__scikit-learn-25931": "",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..5597f67 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -14,6 +14,10 @@ from sklearn.utils._testing import assert_allclose_dense_sparse\n from sklearn.utils._testing import assert_almost_equal\n \n from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn.feature_selection import VarianceThreshold\n+import pandas as pd\n+import pytest\n+import numpy as np\n from sklearn.compose import (\n     ColumnTransformer,\n     make_column_transformer,\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..7c3bac8 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -6,7 +7,8 @@ from scipy import sparse as sp\n \n import pytest\n \n-from sklearn.utils.testing import assert_array_equal\n+import pytest\n+from sklearn.utils.testing import assert_array_equal, assert_almost_equal\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_allclose\n from sklearn.utils.testing import assert_almost_equal\n@@ -943,9 +945,27 @@ def test_k_means_empty_cluster_relocated():\n \n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n-\n-\n-def test_minibatch_kmeans_partial_fit_int_data():\n+def test_result_of_kmeans_equal_in_diff_n_jobs_on_large_data():\n+    # Test on larger datasets with different seeds\n+    rnd = np.random.RandomState(1)\n+    X = rnd.randn(1000, 50)\n+\n+    # Use a larger dataset\n+    result_1_large = KMeans(n_clusters=5, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2_large = KMeans(n_clusters=5, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1_large, result_2_large)\n+\n+def test_result_of_kmeans_multiple_runs_diff_n_jobs():\n+    # Check consistency over multiple independent runs with subtle variations\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(100, 20))\n+\n+    # Different seeds and datasets\n+    for random_seed in range(5):\n+        small_X = rnd.normal(size=(50, 10))\n+        result_1 = KMeans(n_clusters=3, random_state=random_seed, n_jobs=1).fit(small_X).inertia_\n+        result_2 = KMeans(n_clusters=3, random_state=random_seed, n_jobs=2).fit(small_X).inertia_\n+        assert_almost_equal(result_1, result_2, decimal=3)\n     # Issue GH #14314\n     X = np.array([[-1], [1]], dtype=np.int)\n     km = MiniBatchKMeans(n_clusters=2)\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..ed5e065 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,6 +251,26 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_prepend_indentation(literal_inc_path):\n+    # Set up options to test prepend with indentation\n+    options = {\n+        'start-after': '<groupId>com.github.ekryd.sortpom</groupId>',\n+        'end-at': '</plugin>',\n+        'prepend': '      <plugin>',\n+        'dedent': None\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    expected_content = (\"      <plugin>\\n\"\n+                        \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                        \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                        \"        <version>2.15.0</version>\\n\"\n+                        \"        <configuration>\\n\"\n+                        \"          <verifyFailOn>strict</verifyFailOn>\\n\"\n+                        \"        </configuration>\\n\"\n+                        \"      </plugin>\\n\")\n+    assert content == expected_content\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..7ad13da 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,6 +1023,32 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n+                    \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_without_return_type_for_classes(app):\n+    \"\"\"\n+    Test for ensuring that classes do not show a 'Return type' when\n+    autodoc_typehints is set to 'description'.\n+    \"\"\"\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints.Square\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints.Square\\n'\n+            '\\n'\n+            '   A class representing a square figure.\\n'\n+            '\\n'\n+            '   __init__(width, height)\\n'\n+            '\\n'\n+            '      Parameters:\\n'\n+            '         **width** (*int*) --\\n'\n+            '\\n'\n+            '         **height** (*int*) --\\n'\n+            '\\n'\n+            == context)\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..2d03267 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,10 +1,34 @@\n+\n+def test_Catalog_duplicated_message():\n+    # Set up a catalog and add messages with duplicate locations\n+    catalog = Catalog()\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 2))\n+    catalog.add('hello', MsgOrigin('/path/to/yetanother', 1))\n+    catalog.add('world', MsgOrigin('/path/to/filename', 1))\n+\n+    # Ensure there are only two unique messages\n+    assert len(list(catalog)) == 2\n+\n+    # Test messages and their unique locations\n+    msg1, msg2 = list(catalog)\n+    assert msg1.text == 'hello'\n+    assert sorted(msg1.locations) == sorted([\n+        ('/path/to/filename', 1),\n+        ('/path/to/filename', 2),\n+        ('/path/to/yetanother', 1)\n+    ])\n+    assert msg2.text == 'world'\n+    assert msg2.locations == [('/path/to/filename', 1)]\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n import os\n import re\n import subprocess\n-from subprocess import PIPE, CalledProcessError\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n import pytest\n \n",
  "sphinx-doc__sphinx-10673": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\nindex d3bf6a2..fd7d595 100644\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -337,6 +337,20 @@ def test_get_toctree_for_includehidden(app):\n                  [list_item, compact_paragraph, reference, \"foo.1\"],\n                  [list_item, compact_paragraph, reference, \"foo.2\"]))\n \n+@pytest.mark.sphinx('html', testroot='toctree-index')\n+def test_toctree_references(app):\n+    app.build()\n+    toctree = app.env.tocs['index']\n+\n+    # Check that the toctree includes entries for genindex, modindex, and search\n+    assert_node(toctree[1][0][1],\n+                addnodes.toctree,\n+                caption=\"Indices\",\n+                entries=[(None, 'genindex'), (None, 'modindex'), (None, 'search')])\n+\n+    # Additionally, ensure there are no warnings about missing documents\n+    assert not any(\"nonexisting document\" in warning for warning in app._warning.getvalue().splitlines())\n+\n     assert_node(toctree[1][0][0][0], reference, refuri=\"foo\", secnumber=[1])\n     assert_node(toctree[1][0][1][0][0][0], reference, refuri=\"quux\", secnumber=[1, 1])\n     assert_node(toctree[1][0][1][1][0][0], reference, refuri=\"foo#foo-1\", secnumber=[1, 2])\n@@ -345,4 +359,4 @@ def test_get_toctree_for_includehidden(app):\n     assert_node(toctree[1][2][0][0], reference, refuri=\"http://sphinx-doc.org/\")\n \n     assert_node(toctree[2],\n-                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..152330f 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -148,7 +148,28 @@ def test_glossary(app):\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n \n-def test_glossary_warning(app, status, warning):\n+def test_glossary_case_sensitivity(app):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       Description for MySQL\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       Description for mysql\\n\")\n+\n+    # Parse the doctree\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [glossary, definition_list, ([definition_list_item, ([term, (\"MySQL\", index)],\n+                                                             definition)],\n+                                     [definition_list_item, ([term, (\"mysql\", index)],\n+                                                             definition)])],\n+    ))\n+\n+    # Check the entries to see if both terms are treated separately\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n     # empty line between terms\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..38962c0 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -332,6 +332,9 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].default == Parameter.empty\n \n \n+from sphinx.util.inspect import signature_from_str\n+from inspect import Parameter\n+\n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n def test_signature_from_str_positionaly_only_args():\n@@ -341,7 +344,15 @@ def test_signature_from_str_positionaly_only_args():\n     assert sig.parameters['b'].kind == Parameter.POSITIONAL_OR_KEYWORD\n \n \n-def test_signature_from_str_invalid():\n+def test_signature_with_positional_only_defaults():\n+    sig = signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty  # No default\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n     with pytest.raises(SyntaxError):\n         inspect.signature_from_str('')\n \n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..929aeb8 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -14,6 +15,7 @@ from importlib import import_module\n \n import pytest\n \n+from typing import TypeVar\n from sphinx.ext.autodoc.mock import _MockModule, _MockObject, mock\n \n \n@@ -51,6 +53,16 @@ def test_MockObject():\n     assert obj.method() == \"string\"\n     assert isinstance(obj.other_method(), SubClass)\n \n+    # Test for issue with generic-typed classes\n+    T = TypeVar('T')\n+\n+    class GenericSubClass(mock.SomeClass[T]):\n+        \"\"\"docstring of GenericSubClass\"\"\"\n+\n+    obj_generic = GenericSubClass()\n+    assert GenericSubClass.__doc__ == \"docstring of GenericSubClass\"\n+    assert isinstance(obj_generic, GenericSubClass)\n+\n \n def test_mock():\n     modname = 'sphinx.unknown'\n",
  "sphinx-doc__sphinx-7910": "",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..665abec 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -32,6 +32,19 @@ def test_defaults(app, status, warning):\n     assert \"Not Found for url: https://www.google.com/image2.png\" in content\n     assert len(content.splitlines()) == 5\n \n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck_local_links', freshenv=True)\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    print(content)\n+    # Check for valid local link\n+    assert \"ok        conf.py\" in content\n+    # Check for invalid local link\n+    assert \"broken    path/to/notfound\" in content\n+\n \n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n def test_defaults_json(app, status, warning):\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..8e08997 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -16,6 +17,43 @@ from test_ext_autodoc import do_autodoc\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_selective_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_private_function_a,_private_function_b\"}\n+    actual = do_autodoc(app, 'module', 'target.private_module', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private_module',\n+        '',\n+        '',\n+        '.. py:function:: _private_function_a(param)',\n+        '   :module: target.private_module',\n+        '',\n+        '   Documentation for _private_function_a.',\n+        '',\n+        '.. py:function:: _private_function_b(param)',\n+        '   :module: target.private_module',\n+        '',\n+        '   Documentation for _private_function_b.',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_no_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": None}\n+    actual = do_autodoc(app, 'module', 'target.private_module', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private_module',\n+        '',\n+        '',\n+        # Expected output without private functions\n+    ]\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'module', 'target.private', options)\n     assert list(actual) == [\n",
  "sphinx-doc__sphinx-8120": "",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..fb014bf 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,9 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import pytest\n+import sys\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..7de630c 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -61,7 +61,12 @@ def test_linkcode(app, status, warning):\n     assert 'http://foobar/cpp/' in stuff\n \n \n-@pytest.mark.sphinx(testroot='ext-viewcode-find')\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled(app, status, warning):\n+    app.builder.build_all()\n+\n+    # Ensure that module pages are not created in the epub output\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n def test_local_source_files(app, status, warning):\n     def find_source(app, modname):\n         if modname == 'not_a_package':\n",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..477b1f6 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,17 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum_for_signature():\n+    import enum\n \n-def test_getslots():\n+    class MyEnum(enum.Enum):\n+        VALUEA = 10\n+\n+    def dummy_function(e: MyEnum = MyEnum.VALUEA) -> None:\n+        pass\n+\n+    description = inspect.object_description(dummy_function.__defaults__[0])\n+    assert description == \"MyEnum.VALUEA\", f\"Expected 'MyEnum.VALUEA', but got {description}\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..bf2f246 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -17,6 +17,8 @@ from sphinx import application\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n \n+import sys\n+from unittest.mock import patch\n warnfile = StringIO()\n \n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..9a511fb 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -811,6 +811,28 @@ def test_pyattribute(app):\n \n \n def test_pyproperty(app):\n+    # Adding testcase to check if cross-references work for custom types in property type annotations\n+    text = (\".. py:class:: Point\\n\"\n+            \"   :members:\\n\"\n+            \"\\n\"\n+            \".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"      :classmethod:\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree[1][1][1], addnodes.index,\n+                entries=[('single', 'end (Square property)', 'Square.end', '', None)])\n+    assert_node(doctree[1][1][3], ([desc_signature, ([desc_annotation, \"class property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [pending_xref, [desc_annotation, \": Point\"]])],\n+                                   [desc_content, ()]))\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   .. py:property:: prop1\\n\"\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..bf3ae6c 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -755,8 +755,10 @@ def test_pymethod_options(app):\n     assert domain.objects['Class.meth4'] == ('index', 'Class.meth4', 'method', False)\n \n     # :property:\n+    # :property:\n+    # Check if the index entry for the property is without parentheses\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..496333f 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,7 +236,29 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n-def test_issue_9214():\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_distance_with_mixed_dimensions():\n+    p1 = Point(2, 0)  # Default to Point2D\n+    p2 = Point(1, 0, 2)  # Default to Point3D\n+    p3 = Point3D(1, 3, 2)\n+    p4 = Point2D(2, 4)\n+    \n+    # 2D to 3D point\n+    assert Point2D(*p1).distance(Point3D(*p2)) == sqrt(5)\n+    \n+    # 3D to 2D point\n+    assert Point3D(*p2).distance(Point2D(*p1)) == sqrt(5)\n+\n+    # Mixed tests with additional cases\n+    assert p2.distance(p3) == sqrt((1-1)**2 + (0-3)**2 + (2-2)**2)\n+    \n+    assert p3.distance(p4) == sqrt((1-2)**2 + (3-4)**2 + (2-0)**2)\n+\n+    assert p1.distance(p4) == sqrt((2-2)**2 + (0-4)**2)\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n     p3 = Point3D(7, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..1402c7e 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,32 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy import Float\n+from sympy.utilities.lambdify import implemented_function\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2*x)\n+    \n+    # Original test case\n+    assert f(f(2)).evalf() == Float(16)\n+    \n+    # New test cases\n+    # Test the function evaluates when composed directly\n+    assert f(g(2)).evalf() == Float(16)\n+    assert g(f(2)).evalf() == Float(8)\n+    \n+    # Test deeper composition\n+    assert f(g(f(2))).evalf() == Float(64) # f(g(f(2))) => f(g(4)) => f(8) => 64\n+    assert g(f(g(2))).evalf() == Float(32) # g(f(g(2))) => g(f(4)) => g(16) => 32\n+\n+    # Test with zero\n+    assert f(g(0)).evalf() == Float(0)\n+    assert g(f(0)).evalf() == Float(0)\n+\n+    # Test evaluating at a negative number\n+    assert f(g(-2)).evalf() == Float(16)\n+    assert g(f(-2)).evalf() == Float(8)\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..71938a9 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -84,7 +84,15 @@ def test_Identity():\n     assert In.inverse() == In\n     assert In.conjugate() == In\n \n-def test_Identity_doit():\n+def test_Identity_element_sum():\n+    from sympy import symbols, Identity, Sum  # Ensure necessary imports\n+    n = symbols('n', integer=True, positive=True)\n+    In = Identity(n)\n+    i, j = symbols('i j', integer=True)\n+    \n+    # Expect the sum of all elements to be n\n+    total_sum = Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+    assert total_sum == n\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..50e26ee 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -330,6 +330,27 @@ def test_args():\n     assert p._array_form == [3, 2, 0, 1, 5, 4]\n     p = Permutation((0, 3, 1, 2))\n     assert p._cyclic_form is None\n+\n+    # Test issue regarding non-disjoint cycles in Permutation constructor.\n+    # Original test patch\n+    assert Permutation([[0, 1], [0, 2]]) == Permutation(0, 1, 2)\n+\n+    # Additional test cases to ensure the issue is thoroughly tested\n+    # Identity permutation from repeated identical cycle\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    \n+    # Applying a cycle that moves elements, then another cycle reversing some\n+    assert Permutation([[0, 1, 2], [1, 2]]) == Permutation([1, 2, 0])\n+    \n+    # A single element cycle applied multiple times\n+    assert Permutation([[0], [0]]) == Permutation([0])\n+\n+    # A more complex example with overlapping cycles\n+    assert Permutation([[0, 1, 2], [0, 2, 3], [2, 3]]) == Permutation([1, 3, 0, 2])\n+    \n+    # Cases where cycles are trivially overlapping and should resolve correctly\n+    assert Permutation([[0, 1, 2], [2, 1]]) == Permutation([0, 2, 1])\n+    assert Permutation([[0, 1], [1, 2], [2, 0]]) == Permutation([1, 2, 0])\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..1ec1507 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -489,6 +489,13 @@ def test_errors():\n     raises(ShapeError,\n         lambda: SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))\n \n+def test_zero_sized_hstack_vstack():\n+    # Verify correct hstack behavior for 0x0, 0x1, 0x2, 0x3 matrices\n+    sparse_matrices = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices).shape == (0, 6)\n+    \n+    sparse_matrices = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices).shape == (6, 0)\n \n def test_len():\n     assert not SparseMatrix()\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..7bab229 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -231,7 +231,40 @@ def test_evalf_bugs():\n     assert NS(2*x**2.5, 5) == '2.0000*x**2.5000'\n \n \n-def test_evalf_integer_parts():\n+def test_evalf_issue_13076():\n+    # Original test to catch UnboundLocalError in evalf\n+    from sympy import Mul, Max, Symbol, NS\n+\n+    # Create symbols\n+    x = Symbol('x')\n+    y = Symbol('y')\n+\n+    # Test case to verify that evalf works properly with the combination\n+    expr1 = Mul(Max(0, y), x, evaluate=False).evalf()\n+    assert NS(expr1) == 'x*Max(0, y)'\n+\n+    # Additional similar test cases\n+    expr2 = Mul(x, Max(y, 0), evaluate=False).evalf()\n+    assert NS(expr2) == 'x*Max(0, y)'\n+\n+    expr3 = Mul(Max(1, y), x, evaluate=False).evalf()\n+    assert NS(expr3) == 'x*Max(1, y)'\n+\n+    expr4 = Mul(x, Max(1, y), evaluate=False).evalf()\n+    assert NS(expr4) == 'x*Max(1, y)'\n+\n+    expr5 = Mul(Max(y, 0), x, evaluate=False).evalf()\n+    assert NS(expr5) == 'x*Max(y, 0)'\n+\n+    expr6 = Mul(Max(2, y, 3), x, evaluate=False).evalf()\n+    assert NS(expr6) == 'x*Max(2, 3, y)'\n+\n+    # Other mixed cases\n+    expr7 = Mul(x, y, Max(y, 5), evaluate=False).evalf()\n+    assert NS(expr7) == 'x*y*Max(5, y)'\n+\n+    expr8 = Mul(Max(5, y), y, x, evaluate=False).evalf()\n+    assert NS(expr8) == 'x*y*Max(5, y)'\n     a = floor(log(8)/log(2) - exp(-1000), evaluate=False)\n     b = floor(log(8)/log(2), evaluate=False)\n     assert a.evalf() == 3\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..03b9b14 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -268,10 +268,38 @@ def test_coth():\n     assert coth(x*I) == -cot(x)*I\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n+\n+    # Test cases for the issue with coth(log(tan(x)))\n+    e = coth(log(tan(x)))\n+    assert e.subs(x, 2) == coth(log(tan(2)))\n+    assert e.subs(x, 3) == coth(log(tan(3)))\n+    assert e.subs(x, 5) == coth(log(tan(5)))\n+    assert e.subs(x, 6) == coth(log(tan(6)))\n+    assert e.subs(x, 8) == coth(log(tan(8)))\n+    assert e.subs(x, 9) == coth(log(tan(9)))\n+    assert e.subs(x, 11) == coth(log(tan(11)))\n+    assert e.subs(x, 12) == coth(log(tan(12)))\n+    assert e.subs(x, 13) == coth(log(tan(13)))\n+    assert e.subs(x, 15) == coth(log(tan(15)))\n+    assert e.subs(x, 18) == coth(log(tan(18)))\n     assert coth(17*k*pi*I) == -cot(17*k*pi)*I\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n+    # Test cases for the issue with coth(log(tan(x)))\n+    e = coth(log(tan(x)))\n+    assert e.subs(x, 2) == coth(log(tan(2)))\n+    assert e.subs(x, 3) == coth(log(tan(3)))\n+    assert e.subs(x, 5) == coth(log(tan(5)))\n+    assert e.subs(x, 6) == coth(log(tan(6)))\n+    assert e.subs(x, 8) == coth(log(tan(8)))\n+    assert e.subs(x, 9) == coth(log(tan(9)))\n+    assert e.subs(x, 11) == coth(log(tan(11)))\n+    assert e.subs(x, 12) == coth(log(tan(12)))\n+    assert e.subs(x, 13) == coth(log(tan(13)))\n+    assert e.subs(x, 15) == coth(log(tan(15)))\n+    assert e.subs(x, 18) == coth(log(tan(18)))\n+\n \n def test_coth_series():\n     x = Symbol('x')\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..d060695 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -165,8 +165,22 @@ def test_difference():\n     assert -1 in S.Reals - S.Naturals\n \n \n+from sympy import Symbol, Interval, FiniteSet, Complement, oo, S, pi, Union\n+\n def test_Complement():\n-    assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n+    x, y = Symbol('x'), Symbol('y')\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+\n+    # Additional tests for thoroughness\n+    assert Complement(FiniteSet(x, 2, 5), Interval(0, 3)) == FiniteSet(x, 5)  # Number within, symbol outside\n+    assert Complement(FiniteSet(1, 3, y), Interval(2, 4)) == FiniteSet(1, y)  # Some numbers within, some outside\n+    assert Complement(FiniteSet(1, y), Interval(2, 4)) == FiniteSet(1, y)  # No numbers within range\n+\n+    assert Complement(FiniteSet(x, -1, 0, 1), Interval(-2, 2)) == FiniteSet(x)  # Symbol should remain\n+    assert Complement(FiniteSet(x, y, 5, 6), Interval(4, 8)) == Complement(FiniteSet(x, y), Interval(4, 8)) # Both symbols should remain\n+\n+    assert Complement(FiniteSet(x, pi, 4, 3), Interval(0, 5)) == FiniteSet(x, pi)  # pi should remain as it's indefinite\n+    assert Complement(FiniteSet(oo, 2, 3), Interval(1, 4)) == FiniteSet(oo) # Infinity should remain\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n     assert Complement(Union(Interval(0, 2),\n                             FiniteSet(2, 3, 4)), Interval(1, 3)) == \\\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..16b3ba4 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -194,7 +194,66 @@ def test_row_insert():\n         l.insert(i, 4)\n         assert flatten(eye_Shaping(3).row_insert(i, r4).col(0).tolist()) == l\n \n+from sympy import Matrix, eye, ones\n+\n def test_col_insert():\n+    # Original test case for issue 13643\n+    m = eye(6)\n+    v = 2 * ones(6, 2)\n+    result = m.col_insert(3, v)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n+\n+    # Test inserting at the start\n+    n = eye(3)\n+    v_start = ones(3, 1)\n+    result_start = n.col_insert(0, v_start)\n+    expected_start = Matrix([\n+        [1, 1, 0, 0],\n+        [1, 0, 1, 0],\n+        [1, 0, 0, 1]\n+    ])\n+    assert result_start == expected_start\n+\n+    # Test inserting at the end\n+    p = eye(3)\n+    v_end = ones(3, 1)\n+    result_end = p.col_insert(3, v_end)\n+    expected_end = Matrix([\n+        [1, 0, 0, 1],\n+        [0, 1, 0, 1],\n+        [0, 0, 1, 1]\n+    ])\n+    assert result_end == expected_end\n+\n+    # Test inserting into an empty matrix\n+    empty = Matrix()\n+    v_empty = Matrix([1, 2, 3])\n+    result_empty = empty.col_insert(0, v_empty)\n+    expected_empty = Matrix([\n+        [1],\n+        [2],\n+        [3]\n+    ])\n+    assert result_empty == expected_empty\n+\n+    # Test zero column insertion\n+    a = eye(3)\n+    zero_col = Matrix.zeros(3, 1)\n+    result_zero = a.col_insert(1, zero_col)\n+    expected_zero = Matrix([\n+        [1, 0, 0, 0],\n+        [0, 0, 1, 0],\n+        [0, 0, 0, 1]\n+    ])\n+    assert result_zero == expected_zero\n     c4 = Matrix([4, 4, 4])\n     for i in range(-4, 5):\n         l = [0, 0, 0]\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..4443b87 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -677,8 +677,12 @@ def test_Poly_mul():\n     assert Poly(x, x) * 2 == Poly(2*x, x)\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n-\n-def test_Poly_sqr():\n+def test_issue_13079():\n+    assert Poly(x) * x == Poly(x**2, x, domain='ZZ')\n+    assert x * Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2 * Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2) * Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x) * S(-2) == Poly(-2*x, x, domain='ZZ')\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..5160af7 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,24 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_custom():\n+    # Original test case\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+\n+    # Custom test cases\n+    assert latex(2*x*y*z, mul_symbol='\\\\times') == r\"2 \\times x \\times y \\times z\"\n+    assert latex(2*x*y*z, mul_symbol=None) == r\"2 x y z\"\n+    assert latex(0.5*x, mul_symbol='ldot') == r\"0.5 \\,.\\, x\"\n+    assert latex(5*x**3*y/2, mul_symbol='dot') == r\"\\frac{5 \\cdot x^{3} \\cdot y}{2}\"\n+\n+    # Verify default behavior is not affected\n+    assert latex(2*x*y) == \"2 x y\"\n+    assert latex(2*x*y, mul_symbol='dot') == r\"2 \\cdot x \\cdot y\"\n+\n+    # Testing with integrals\n+    assert latex(Integral(2*x**2*y, x), mul_symbol='\\\\,') == r\"\\int 2 x^{2} y\\, dx\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..cc1f72d 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -307,8 +307,25 @@ def test_tolist():\n     m = Matrix(lst)\n     assert m.tolist() == lst\n \n-\n-def test_as_mutable():\n+def test_issue_13835():\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n+    assert M(7).det() == 0\n+    \n+    # Additional test cases for other matrix sizes mentioned in the issue\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a   \n+    det_3 = M(3).det()\n+    assert isinstance(det_3, Expr)  # det(3) should return an expression\n+    assert det_3.subs(a, 0) == 0    # Check a particular symbolic substitution\n+\n+    assert M(4).det() == 0\n+\n+    # Testing larger size matrices\n+    assert M(8).det() == 0\n+    assert M(9).det() == 0\n     assert zeros(0, 3).as_mutable() == zeros(0, 3)\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..f45946e 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -708,8 +708,54 @@ def test_issue_10003():\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n+def test_precomputed_cdf_issue():\n+    x = symbols(\"x\", real=True, finite=True)\n+    \n+    # Test for Arcsin distribution\n+    a, b = 0, 3\n+    X = Arcsin('x', a, b)\n+    computed_cdf = cdf(X)(1)\n+    expected_cdf = 2*asin(sqrt((-a + 1)/(-a + b)))/pi\n+    assert tn(diff(computed_cdf, x), density(X)(1), x)\n+    assert simplify(computed_cdf) == simplify(expected_cdf)\n+\n+    # Test for Dagum distribution\n+    X = Dagum(\"x\", S(1)/3, S(1)/5, 2)\n+    assert cdf(X)(3).is_number and not cdf(X)(3).has(Integral)\n+\n+    # Additional CDF tests for other distributions\n+    X = Erlang(\"x\", 1, 1)\n+    assert not isinstance(cdf(X)(1), float)\n+\n+    X = Frechet(\"x\", S(4)/3, 1, 2)\n+    assert cdf(X)(3).is_number and not cdf(X)(3).has(Integral)\n+\n+    X = Gamma(\"x\", 0.1, 2)\n+    computed_cdf = cdf(X)(3)\n+    expected_cdf = (0.0980745505327516 * lowergamma(0.1, 3/2) / gamma(0.1))\n+    assert tn(diff(computed_cdf, x), density(X)(3), x)\n+    assert simplify(computed_cdf) == simplify(expected_cdf)\n+\n+    X = GammaInverse(\"x\", S(5)/7, 2)\n+    assert cdf(X)(3).is_number and not cdf(X)(3).has(Integral)\n+\n+    X = Kumaraswamy(\"x\", S(1)/123, 5)\n+    assert cdf(X)(S(1)/3).is_number and not cdf(X)(S(1)/3).has(Integral)\n+\n+    X = Laplace(\"x\", 2, 3)\n+    assert cdf(X)(5).is_number and not cdf(X)(5).has(Integral)\n+\n+    X = Logistic(\"x\", 1, 0.1)\n+    assert cdf(X)(2).is_number and not cdf(X)(2).has(Integral)\n+\n+    X = Nakagami(\"x\", S(7)/3, 1)\n+    assert cdf(X)(2).is_number and not cdf(X)(2).has(Integral)\n+\n+    X = StudentT(\"x\", 10)\n+    assert cdf(X)(2).is_number and not cdf(X)(2).has(Integral)\n \n-def test_precomputed_cdf():\n+    X = UniformSum(\"x\", 5)\n+    assert cdf(X)(2).is_number and not cdf(X)(2).has(Integral)\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..ae3a123 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -37,6 +37,30 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n+def test_tensor_product_powers():\n+    # Test for powers of tensor products\n+    assert tensor_product_simp(TP(A, B)**2) == TP(A**2, B**2)\n+    assert tensor_product_simp(TP(A, B)**x) == TP(A**x, B**x)\n+\n+    # Test multiplying a tensor product power by a scalar\n+    assert tensor_product_simp(x*TP(A, B)**2) == x*TP(A**2, B**2)\n+\n+    # Test product of a tensor product power with another tensor product\n+    assert tensor_product_simp(x*(TP(A, B)**2)*TP(C, D)) == x*TP(A**2*C, B**2*D)\n+\n+    # Test subtraction involving a tensor product power\n+    assert tensor_product_simp(TP(A, B) - TP(C, D)**x) == TP(A, B) - TP(C**x, D**x)\n+\n+    # Additional test cases with actual values\n+    from sympy import Matrix\n+    P3 = Matrix([[1, 0], [0, -1]])\n+    t1 = TP(1, 1)*TP(1, 1)\n+    t2 = TP(1, P3)*TP(1, P3)\n+    assert tensor_product_simp(t1) == TP(1, 1)\n+    assert tensor_product_simp(t2) == TP(1, 1)\n+    assert (t1.expand(tensorproduct=True)) == TP(1, 1)\n+    assert (t2.expand(tensorproduct=True)) == TP(1, 1)\n+\n \n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..20d5519 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -79,7 +79,24 @@ def test_python_keyword_function_name_escaping():\n         5*Function(\"for\")(8)) == \"for_ = Function('for')\\ne = 5*for_(8)\"\n \n \n-def test_python_relational():\n+from sympy import Symbol, Eq, Ne, Rational\n+from sympy.printing.python import python\n+\n+def test_python_issue_cases():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+\n+    # Test modified behavior after the fix\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n+    assert python(Ne(x/(y + 1), y**2)) in [\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(1 + y), y**2)\",\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(y + 1), y**2)\"\n+    ]\n+    \n+    # Ensure unexpected behavior is fixed\n+    assert sstr(Eq(x, Rational(1, 2)), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    assert sstr(Limit(x, x, Rational(7, 2)), sympy_integers=True) == \"Limit(x, x, S(7)/2)\"\n+    assert sstr(x + S(1)/2, sympy_integers=True) == \"x + S(1)/2\"\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..ce9a5c5 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,6 +4,39 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n+def test_zero_multiplication_with_vectors():\n+    # Create a reference frame\n+    N = ReferenceFrame('N')\n+    \n+    # Original test that checks the problem\n+    assert A.x + 0 == A.x  # Original test patch\n+    \n+    # New test: Adding 0 multiplied by a vector and verify it's handled correctly\n+    v1 = N.x\n+    v2 = 0 * N.x\n+    assert sum([v1, v2]) == v1\n+\n+    # Additional tests for more cases\n+    assert sum([v1, 0]) == v1\n+    assert sum([0, v1, 0]) == v1\n+    assert v1 + v2 == v1\n+\n+    # Special case to check if zero vector addition doesn't affect result\n+    zero_vector = 0 * N.x + 0 * N.y + 0 * N.z\n+    v3 = x*N.x + y*N.y + z*N.z\n+    assert v3 + zero_vector == v3\n+\n+    # Ensure no TypeError is thrown anymore\n+    try:\n+        _ = sum([v1, v2])\n+    except TypeError:\n+        assert False, \"sum([v1, v2]) raised TypeError unexpectedly!\"\n+\n+    # Verify behavior with non-zero scalars\n+    assert sum([v1, 2 * v1]) == 3 * v1\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..2d83a13 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -134,6 +135,17 @@ def test_math_lambda():\n \n \n @conserve_mpmath_dps\n+def test_lambdify_rational_mpmath():\n+    x = symbols('x')\n+    eqn = Eq(Rational(1, 3) + 77, RisingFactorial(18, x))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source_code = inspect.getsource(f)\n+    assert 'mpmath.mpf' in source_code, \"Rational numbers should be wrapped with mpmath.mpf\"\n+\n+    # Ensure that nsolve uses the precision correctly\n+    x0 = nsolve(eqn, mpf('1.5'), prec=64)\n+    calc_value = RisingFactorial(18, x0).evalf(64)\n+    assert str(calc_value).startswith('77.3333333333333'), \"The calculation should maintain high precision\"\n def test_mpmath_lambda():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n@@ -145,6 +157,17 @@ def test_mpmath_lambda():\n \n \n @conserve_mpmath_dps\n+def test_lambdify_rational_mpmath():\n+    x = symbols('x')\n+    eqn = Eq(Rational(1, 3) + 77, RisingFactorial(18, x))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source_code = inspect.getsource(f)\n+    assert 'mpmath.mpf' in source_code, \"Rational numbers should be wrapped with mpmath.mpf\"\n+\n+    # Ensure that nsolve uses the precision correctly\n+    x0 = nsolve(eqn, mpf('1.5'), prec=64)\n+    calc_value = RisingFactorial(18, x0).evalf(64)\n+    assert str(calc_value).startswith('77.3333333333333'), \"The calculation should maintain high precision\"\n def test_number_precision():\n     mpmath.mp.dps = 50\n     sin02 = mpmath.mpf(\"0.19866933079506121545941262711838975037020672954020\")\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..01f6890 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -71,7 +72,7 @@ def test_ndim_array_initiation():\n     assert vector_with_long_shape.rank() == 1\n     raises(ValueError, lambda: vector_with_long_shape[long(5)])\n \n-    from sympy.abc import x\n+    from sympy.abc import x, y\n     rank_zero_array = ImmutableDenseNDimArray(x)\n     assert len(rank_zero_array) == 0\n     assert rank_zero_array.shape == ()\n@@ -79,6 +80,25 @@ def test_ndim_array_initiation():\n     assert rank_zero_array[()] == x\n     raises(ValueError, lambda: rank_zero_array[0])\n \n+    # New test cases for rank-0 arrays\n+    scalar_array = ImmutableDenseNDimArray(42)\n+    assert len(scalar_array) == 1\n+    assert scalar_array.shape == ()\n+    assert scalar_array.rank() == 0\n+    assert scalar_array[()] == 42\n+\n+    float_scalar_array = ImmutableDenseNDimArray(3.14)\n+    assert len(float_scalar_array) == 1\n+    assert float_scalar_array.shape == ()\n+    assert float_scalar_array.rank() == 0\n+    assert float_scalar_array[()] == 3.14\n+\n+    symbolic_scalar_array = ImmutableDenseNDimArray(y)\n+    assert len(symbolic_scalar_array) == 1\n+    assert symbolic_scalar_array.shape == ()\n+    assert symbolic_scalar_array.rank() == 0\n+    assert symbolic_scalar_array[()] == y\n+\n \n def test_reshape():\n     array = ImmutableDenseNDimArray(range(50), 50)\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..7eaf694 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..a98664e 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,41 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_rotation_iss1593():\n+    \"\"\"\n+    There was a sign mistake in the definition\n+    of the rotation matrix. This tests that particular sign mistake.\n+    See issue 1593 for reference.\n+    See wikipedia\n+    https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Quaternion-derived_rotation_matrix\n+    for the correct definition\n+    \"\"\"\n+    from sympy import symbols, trigsimp, cos, sin\n+    from sympy.algebras.quaternion import Quaternion\n+\n+    # Original test patch for specific quaternion rotation\n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    assert(trigsimp(q.to_rotation_matrix()) == Matrix([\n+                [1,      0,      0],\n+                [0, cos(x), -sin(x)],\n+                [0, sin(x), cos(x)]]))\n+\n+    # Additional test cases for more quaternion configurations\n+    # Test case for a quaternion rotating around the y-axis\n+    q_y = Quaternion(cos(x/2), 0, sin(x/2), 0)\n+    assert(trigsimp(q_y.to_rotation_matrix()) == Matrix([\n+                [ cos(x), 0, sin(x)],\n+                [      0, 1,      0],\n+                [-sin(x), 0, cos(x)]]))\n+\n+    # Test case for a quaternion rotating around the z-axis\n+    q_z = Quaternion(cos(x/2), 0, 0, sin(x/2))\n+    assert(trigsimp(q_z.to_rotation_matrix()) == Matrix([\n+                [cos(x), -sin(x), 0],\n+                [sin(x),  cos(x), 0],\n+                [     0,       0, 1]]))\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +154,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..632be4d 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,6 +1625,12 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n     # issue 8677\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..050d25b 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,7 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +156,7 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..3a31cd8 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1987,10 +1987,31 @@ def test_Add_is_zero():\n     assert (x + y).is_zero\n \n \n-def test_issue_14392():\n+from sympy import I, simplify  # Required imports for the test cases\n+\n+def test_issue_15873():\n+    # Test case from the original patch\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+    \n+    # Additional test cases for more coverage\n+    e1 = (3 + 4*I) + (-3 - 4*I)\n+    assert e1.is_zero is True  # This should correctly recognize as zero\n+\n+    e2 = I*(1 - I) + (I - 1)\n+    assert e2.is_zero is None  # This is non-zero but should be undecidable by is_zero\n+\n+    e3 = simplify(e)\n+    assert e3.is_zero is True  # Simplified form is zero\n+    \n+    e4 = (1 + I)**2 - 2*I\n+    assert e4.is_zero is None  # Equivalent to e, should still be undecidable\n+\n+    e5 = simplify(e4)\n+    assert e5.is_zero is True  # Simplified should be zero\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..11d5d1c 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -511,8 +511,47 @@ def test_posify():\n     assert str(Sum(posify(1/x**n)[0], (n,1,3)).expand()) == \\\n         'Sum(_x**(-n), (n, 1, 3))'\n \n-\n-def test_issue_4194():\n+def test_issue_16438():\n+    # issue 16438\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0 == {\n+        'positive': True, \n+        'zero': False, \n+        'imaginary': False,\n+        'nonpositive': False, \n+        'commutative': True, \n+        'hermitian': True, \n+        'real': True, \n+        'nonzero': True,\n+        'nonnegative': True, \n+        'negative': False, \n+        'complex': True, \n+        'finite': True, \n+        'infinite': False\n+    }\n+    assert eq.is_finite  # Check if is_finite is preserved and evaluates True\n+\n+    # Additional tests for other assumptions\n+    j = Symbol('j', integer=True)\n+    eq2, rep2 = posify(j)\n+    assert 'integer' in eq2.assumptions0 and eq2.assumptions0['integer'] == True\n+\n+    r = Symbol('r', rational=True)\n+    eq3, rep3 = posify(r)\n+    assert 'rational' in eq3.assumptions0 and eq3.assumptions0['rational'] == True\n+\n+    p = Symbol('p', prime=True)\n+    eq4, rep4 = posify(p)\n+    assert 'prime' in eq4.assumptions0 and eq4.assumptions0['prime'] == True\n+\n+    ev = Symbol('ev', even=True)\n+    eq5, rep5 = posify(ev)\n+    assert 'even' in eq5.assumptions0 and eq5.assumptions0['even'] == True\n+\n+    od = Symbol('od', odd=True)\n+    eq6, rep6 = posify(od)\n+    assert 'odd' in eq6.assumptions0 and eq6.assumptions0['odd'] == True\n     # simplify should call cancel\n     from sympy.abc import x, y\n     f = Function('f')\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..ca1b8f6 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -13,6 +14,8 @@ from sympy.printing.pycode import (\n )\n from sympy.utilities.pytest import raises\n \n+from sympy.tensor import IndexedBase\n+\n x, y, z = symbols('x y z')\n \n \n@@ -20,7 +23,19 @@ def test_PythonCodePrinter():\n     prntr = PythonCodePrinter()\n     assert not prntr.module_imports\n     assert prntr.doprint(x**y) == 'x**y'\n+    # Original test case for verifying the indexed support in PythonCodePrinter\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+\n+    # Additional test cases to thoroughly test the fix\n+    q = IndexedBase(\"q\")\n+    assert prntr.doprint(q[2]) == 'q[2]'  # Single index test\n+    assert prntr.doprint(q[0, y, 3 + z]) == 'q[0, y, 3 + z]'  # Mixed index test with expression\n+\n+    # Test with different data types for indices\n+    r = IndexedBase(\"r\")\n+    assert prntr.doprint(r[x, 1.5, z/2]) == 'r[x, 1.5, z/2]'  # Indices with symbol, float, and division\n     assert prntr.doprint(And(x, y)) == 'x and y'\n     assert prntr.doprint(Or(x, y)) == 'x or y'\n     assert not prntr.module_imports\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..4a52c5c 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -31,7 +31,23 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n     return source\n \n \n-def test_cython_wrapper_scalar_function():\n+def test_cython_unused_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    try:\n+        # Wrap the expression with the Cython backend\n+        f = autowrap(expr, args=(x,), backend='cython')\n+        # Evaluate the wrapped function\n+        result = f(np.array([[1.0, 2.0]]))\n+        # Check that the result is correct\n+        assert result == 1.0\n+    except Exception as e:\n+        # Fail the test if any exception occurs\n+        assert False, f\"An unexpected exception occurred: {e}\"\n     x, y, z = symbols('x,y,z')\n     expr = (x + y)*z\n     routine = make_routine(\"test\", expr)\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..4a1add0 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,6 +248,10 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n+def test_encode_morse_issue_fix():\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('10') == '.----|-----'\n+    assert encode_morse('0') == '-----'\n \n def test_decode_morse():\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..66e7ff1 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -807,6 +807,23 @@ def test_issue_15965():\n     B = Integral(x*y, x)\n     bnew = y*Integral(x, x)\n     assert simplify(A + B) == anew + bnew\n+\n+def test_issue_17137():\n+    from sympy import Symbol, cos, simplify, I\n+    x = Symbol('x')\n+\n+    # Original test cases to verify fix\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+\n+    # Additional test cases\n+    # Test simplifying other complex powers\n+    assert simplify(cos(x + 1)**I) == cos(x + 1)**I\n+    assert simplify((1 + cos(x))**I) == (1 + cos(x))**I\n+\n+    # Test more complex expressions\n+    assert simplify((cos(x) + sin(x))**I) == (cos(x) + sin(x))**I\n+    assert simplify((cos(x)**3 + sin(x)**3)**I) == (cos(x)**3 + sin(x)**3)**I\n     assert simplify(A) == anew\n     assert simplify(B) == bnew\n \n@@ -814,4 +831,4 @@ def test_issue_15965():\n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..b191ebf 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,5 +1,7 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n-from sympy.simplify.sqrtdenest import _subsets as subsets\n+from sympy.simplify.sqrtdenest import _subsets as subsets, _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.utilities.pytest import slow\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n@@ -176,7 +178,34 @@ def test_subsets():\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n \n-def test_issue_5653():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    # Test based on the provided original patch case\n+    assert _sqrt_match(4 + I) == []\n+    assert sqrtdenest((3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2) == 3/2 - sqrt(2)*sqrt(4 + 3*I)/2 + 3*I/2\n+    \n+    # Additional asserted test for sqrtdenest with an unchanged scenario\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n+\n+    # Edge case: Input is already a simple number\n+    assert sqrtdenest(5) == 5\n+\n+    # Attempting to denest a trivial nested sqrt that does not change\n+    expr = sqrt(2 + sqrt(3 + S.ImaginaryUnit))\n+    assert sqrtdenest(expr) == expr\n+\n+    # Check behavior on zero\n+    assert sqrtdenest(0) == 0\n+\n+    # More complex expression which should not raise an error and be unchanged\n+    comp_expr = sqrt((3 + 4*I) * (3 - 4*I))\n+    assert sqrtdenest(comp_expr) == 5\n+\n+    # Ensure that an integral's `sqrtdenest` won't error out\n+    x = Symbol('x')\n+    integral_expr = Integral(sqrt(x) + sqrt(x + 1), (x, 0, 1))\n+    assert unchanged(sqrtdenest, integral_expr)\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..86a35ad 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -5,8 +6,15 @@ from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n+from sympy import sympify  # Add sympify import for new test cases\n \n def test_point():\n+    # Test multiplication with scalar on both sides\n+    p1 = Point(0, 0)\n+    p2 = Point(1, 1)\n+\n+    assert p1 + p2 * sympify(2.0) == Point(2.0, 2.0)\n+    assert p1 + sympify(2.0) * p2 == Point(2.0, 2.0)  # This is the primary test case from the issue\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..77451f4 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -553,8 +553,19 @@ def test_diophantine():\n     assert diophantine((x**2-y), t) == set([(t, t**2)])\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n-\n-def test_general_pythagorean():\n+from sympy import diophantine, symbols\n+\n+def test_issue_18186():\n+    x, y = symbols('x y', integer=True)\n+    expected_solutions = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), \n+                              (2, -3), (2, 3), (3, -2), (3, 2)])\n+    \n+    # Testing both symbol orders\n+    result1 = diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True)\n+    result2 = diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True)\n+    \n+    assert result1 == expected_solutions, f\"Unexpected result for syms=(x,y): {result1}\"\n+    assert result2 == expected_solutions, f\"Unexpected result for syms=(y,x): {result2}\"\n     from sympy.abc import a, b, c, d, e\n \n     assert check_solutions(a**2 + b**2 + c**2 - d**2)\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..34aec67 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -672,12 +672,26 @@ def test_latex_derivatives():\n         r'\\frac{d^{\\max\\left(n_{1}, n_{2}\\right)}}{d x^{\\max\\left(n_{1}, n_{2}\\right)}} f{\\left(x \\right)}'\n \n \n+from sympy import Subs, latex\n+from sympy.abc import x, y\n+\n def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n \n-def test_latex_integrals():\n+def test_latex_subs_parenthesizing():\n+    # Confirm the fix with a simple expression\n+    assert latex(3*Subs(-x + y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # Check with a more complex expression inside Subs\n+    assert latex(2*Subs(x**2 + y**2, (x,y), (3, 4))) == r'2 \\left. \\left(x^{2} + y^{2}\\right) \\right|_{\\substack{ x=3\\\\ y=4 }}'\n+    \n+    # Confirm it works with nested Subs expressions\n+    assert latex(Subs(Subs(x + y, (x,), (1,)) + y, (y,), (2,))) == r'\\left. \\left(\\left. \\left(x + y\\right) \\right|_{\\substack{ x=1 }} + y\\right) \\right|_{\\substack{ y=2 }}'\n+    \n+    # Test with no multiplication in front\n+    assert latex(Subs(-x + y, (x,), (1,))) == r'\\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n         r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..c3ab172 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,7 +1,10 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n     EmptySet, Union, Contains)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n     And, Mod, oo, Function)\n+from sympy import (imageset, asin, solveset_real, Rational)\n+from sympy.sets import S\n from sympy.testing.pytest import raises, XFAIL, warns_deprecated_sympy\n \n \n@@ -86,6 +89,24 @@ def test_free_symbols():\n     assert ConditionSet(x, Eq(x, 0), FiniteSet(x, z)\n         ).free_symbols == {x, z}\n \n+def test_issue_with_conditionset_and_imageset_subs():\n+    # Test that substituting in a ConditionSet with an ImageSet works correctly\n+\n+    # Creating an imageset and a conditionset containing it\n+    k = Symbol('k')\n+    y = Symbol('y')\n+    img1 = imageset(Lambda(k, 2 * k * pi + asin(y)), S.Integers)\n+    condset = ConditionSet(x, Contains(y, Interval(-1, 1)), img1)\n+\n+    # Substitute y with 1/3 in the conditionset\n+    result = condset.subs(y, Rational(1, 3))\n+\n+    expected_imageset = imageset(Lambda(k, 2 * k * pi + asin(S.One / 3)), S.Integers)\n+    expected_condset = ConditionSet(x, Contains(Rational(1, 3), Interval(-1, 1)), expected_imageset)\n+\n+    # Checking if the ConditionSet substitution works as expected\n+    assert result == expected_condset\n+\n \n def test_subs_CondSet():\n     s = FiniteSet(z, y)\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..ce12df4 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -513,8 +513,31 @@ def test_kernS():\n     one = kernS('x - (x - 1)')\n     assert one != 1 and one.expand() == 1\n \n-\n-def test_issue_6540_6552():\n+def test_issue_kernS():\n+    from sympy.core.sympify import kernS\n+    from sympy.abc import x\n+\n+    # Test the original expression for consistency (no UnboundLocalError)\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x - 1)\n+\n+    # Additional test cases for varied input expressions\n+    assert kernS(\"5*(x + 1)\") == 5*(x + 1)\n+    assert kernS(\"3/5 + 2*x\") == 3/5 + 2*x\n+    assert kernS(\"x*x + 1\") == x**2 + 1\n+    assert kernS(\"z - (2*(y + z))\") == z - 2*(y + z)\n+\n+    # Ensure it handles spaces and negatives correctly\n+    assert kernS(\"- (x + x*x)\") == -(x + x**2)\n+    assert kernS(\" - 1 *(x + x)\") == -1*(x + x)\n+    assert kernS(\"2 * (x + y)\") == 2*(x + y)\n+\n+    # Ensure invalid expressions raise errors\n+    import pytest\n+    with pytest.raises(Exception):\n+        kernS(\"((2*x)\")\n+\n+    with pytest.raises(Exception):\n+        kernS(\"2 * (x +\")\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n     assert S('[[2/6,2], (2/4,)]') == [[Rational(1, 3), 2], (S.Half,)]\n     assert S('[[[2*(1)]]]') == [[[2]]]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_dagger.py b/sympy/physics/quantum/tests/test_dagger.py\nindex ad97a01..3d5103e 100644\n--- a/sympy/physics/quantum/tests/test_dagger.py\n+++ b/sympy/physics/quantum/tests/test_dagger.py\n@@ -1,7 +1,8 @@\n+\n from sympy import I, Matrix, symbols, conjugate, Expr, Integer\n \n from sympy.physics.quantum.dagger import adjoint, Dagger\n-from sympy.external import import_module\n+from sympy.physics.quantum.operator import Operator, IdentityOperator\n from sympy.testing.pytest import skip\n \n \n@@ -28,8 +29,15 @@ def test_matrix():\n     m = Matrix([[I, x*I], [2, 4]])\n     assert Dagger(m) == m.H\n \n-\n-class Foo(Expr):\n+def test_dagger_identity_operator_simplification():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    \n+    DaggerO = Dagger(O)\n+    # Test that DaggerO * I simplifies to DaggerO\n+    assert DaggerO * I == DaggerO\n+    # Test that I * DaggerO simplifies to DaggerO\n+    assert I * DaggerO == DaggerO\n \n     def _eval_adjoint(self):\n         return I\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..c36b398 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -905,8 +905,27 @@ def test_sylow_subgroup():\n     assert G.order() % S.order() == 0\n     assert G.order()/S.order() % 2 > 0\n \n-\n-@slow\n+def test_sylow_subgroup_index_error():\n+    # Test cases for the issue where sylow_subgroup() causes an IndexError\n+\n+    # DihedralGroup(18)\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4  # Expect the order to be 4 for p-Sylow subgroup with p=2\n+\n+    # DihedralGroup(50)\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4  # Expect the order to be 4 for p-Sylow subgroup with p=2\n+\n+    # Test with other prime numbers and group sizes\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=5)\n+    assert S.order() == 25  # Expect the order to be 25 for p-Sylow subgroup with p=5\n+\n+    G = DihedralGroup(30)\n+    S = G.sylow_subgroup(p=3)\n+    assert S.order() == 3  # Expect different orders for different primes\n def test_presentation():\n     def _test(P):\n         G = P.presentation()\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..2df0c37 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,22 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n+from sympy.utilities.iterables import partitions\n \n def test_partitions():\n+    # Test to ensure partitions() does not reuse dictionary objects\n+    # such that list of partitions() results in incorrect outputs\n+    # due to shared state.\n+    def get_partitions_list(n, **kwargs):\n+        return [p.copy() for p in partitions(n, **kwargs)]\n+\n+    list1 = get_partitions_list(6, k=2)\n+    list2 = get_partitions_list(6, k=2)\n+\n+    # Check that each result is equal but distinct object\n+    for p1, p2 in zip(list1, list2):\n+        assert p1 == p2\n+        assert p1 is not p2\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..62cfc61 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -571,25 +571,140 @@ def test_Float():\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=10))\n     raises(ValueError, lambda: Float(\"1.23\", dps=3, precision=\"\"))\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=\"\"))\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # Test against issue https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+    \n+def test_zero_false_symmetry():\n+    # Ensure symmetric equality comparison with zero and false\n+    zero = S(0)\n+    zero_float = S(0.0)\n+    false = S.false\n+\n+    # Compare zero and false\n+    assert (zero == false) == (false == zero)\n+    assert (zero_float == false) == (false == zero_float)\n+\n+    # These should be false by design\n+    assert (zero == false) is False\n+    assert (false == zero) is False\n+    assert (zero_float == false) is False\n+    assert (false == zero_float) is False\n     # from NumberSymbol\n     assert same_and_same_prec(Float(pi, 32), pi.evalf(32))\n     assert same_and_same_prec(Float(Catalan), Catalan.evalf())\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # Test against issue https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+    \n+def test_zero_false_symmetry():\n+    # Ensure symmetric equality comparison with zero and false\n+    zero = S(0)\n+    zero_float = S(0.0)\n+    false = S.false\n+\n+    # Compare zero and false\n+    assert (zero == false) == (false == zero)\n+    assert (zero_float == false) == (false == zero_float)\n+\n+    # These should be false by design\n+    assert (zero == false) is False\n+    assert (false == zero) is False\n+    assert (zero_float == false) is False\n+    assert (false == zero_float) is False\n     # oo and nan\n     u = ['inf', '-inf', 'nan', 'iNF', '+inf']\n     v = [oo, -oo, nan, oo, oo]\n     for i, a in zip(u, v):\n         assert Float(i) is a\n-\n-\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # Test against issue https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+    \n+def test_zero_false_symmetry():\n+    # Ensure symmetric equality comparison with zero and false\n+    zero = S(0)\n+    zero_float = S(0.0)\n+    false = S.false\n+\n+    # Compare zero and false\n+    assert (zero == false) == (false == zero)\n+    assert (zero_float == false) == (false == zero_float)\n+\n+    # These should be false by design\n+    assert (zero == false) is False\n+    assert (false == zero) is False\n+    assert (zero_float == false) is False\n+    assert (false == zero_float) is False\n+\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # Test against issue https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+    \n+def test_zero_false_symmetry():\n+    # Ensure symmetric equality comparison with zero and false\n+    zero = S(0)\n+    zero_float = S(0.0)\n+    false = S.false\n+\n+    # Compare zero and false\n+    assert (zero == false) == (false == zero)\n+    assert (zero_float == false) == (false == zero_float)\n+\n+    # These should be false by design\n+    assert (zero == false) is False\n+    assert (false == zero) is False\n+    assert (zero_float == false) is False\n+    assert (false == zero_float) is False\n @conserve_mpmath_dps\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n     mp_pi = mpmath.pi()\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # Test against issue https://github.com/sympy/sympy/issues/20796\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+    \n+def test_zero_false_symmetry():\n+    # Ensure symmetric equality comparison with zero and false\n+    zero = S(0)\n+    zero_float = S(0.0)\n+    false = S.false\n+\n+    # Compare zero and false\n+    assert (zero == false) == (false == zero)\n+    assert (zero_float == false) == (false == zero_float)\n+\n+    # These should be false by design\n+    assert (zero == false) is False\n+    assert (false == zero) is False\n+    assert (zero_float == false) is False\n+    assert (false == zero_float) is False\n     assert Float(mp_pi, 100) == Float(mp_pi._mpf_, 100) == pi.evalf(100)\n \n     mpmath.mp.dps = 15\n",
  "sympy__sympy-21379": "",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..bf96818 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -13,6 +13,8 @@ from sympy.polys.polyerrors import ExactQuotientFailed\n \n from sympy.abc import a, b, c, x, y, z\n from sympy.core import S, symbols\n+from sympy import itermonomials\n+from sympy.polys.orderings import monomial_key\n from sympy.testing.pytest import raises\n \n \n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..b73b1a1 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # Test for argument invariance\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..7537100 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -11,8 +12,31 @@ from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n from sympy.testing.pytest import raises, warns\n \n+from sympy.core.parameters import evaluate\n+from sympy import Integer\n+\n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        assert Point(1, 2) == Point2D(1, 2)\n+\n+    # Testing with S and Integer objects to match the reported issue\n+    with evaluate(False):\n+        assert Point2D(Integer(1), Integer(2)) == Point(1, 2)\n+\n+    # Ensure imaginary numbers still raise a ValueError even with evaluate=False\n+    with raises(ValueError, match=\"Imaginary coordinates are not permitted\"):\n+        with evaluate(False):\n+            Point(1 + I, 2)\n+\n+    with raises(ValueError, match=\"Imaginary coordinates are not permitted\"):\n+        with evaluate(False):\n+            Point2D(1 + I, 2)\n \n-def test_point():\n+    # Testing mixed real and imaginary coordinates\n+    with raises(ValueError, match=\"Imaginary coordinates are not permitted\"):\n+        with evaluate(False):\n+            Point2D(1, 2 + I)\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..540f6e2 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -31,6 +32,17 @@ def test_PythonCodePrinter():\n \n     assert prntr.doprint(x**y) == 'x**y'\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n+    assert prntr.doprint(Min(x, y)) == 'min(x, y)'\n+    assert prntr.doprint(Max(x, y)) == 'max(x, y)'\n+    # Additional test cases for Min and Max\n+    assert prntr.doprint(Min(x, y, z)) == 'min(x, y, z)'\n+    assert prntr.doprint(Max(x, y, z)) == 'max(x, y, z)'\n+    assert prntr.doprint(Min(Min(x, y), z)) == 'min(min(x, y), z)'\n+    assert prntr.doprint(Max(Max(x, y), z)) == 'max(max(x, y), z)'\n+    assert prntr.doprint(Min(3, x, y)) == 'min(3, x, y)'\n+    assert prntr.doprint(Max(5, x, y)) == 'max(5, x, y)'\n+    assert prntr.doprint(Min(x, 0)) == 'min(x, 0)'\n+    assert prntr.doprint(Max(x, 0)) == 'max(x, 0)'\n     assert prntr.doprint(-Mod(x, y)) == '-(x % y)'\n     assert prntr.doprint(Mod(-x, y)) == '(-x) % y'\n     assert prntr.doprint(And(x, y)) == 'x and y'\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..40b2994 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,25 @@ def test_scipy_polys():\n \n \n \n+def test_lambdify_tuple_single_element():\n+    # Test for tuple with single element\n+    f2b = lambdify([], (1,))  # Based on issue gh-23224\n+    assert f2b() == (1,)\n+    # Extract and inspect the source code of the lambdified function\n+    source = inspect.getsource(f2b)\n+    assert 'return (1,)' in source\n+\n+def test_lambdify_tuple_multiple_elements():\n+    # Test for tuple with multiple elements\n+    f2c = lambdify([], (1, 2)) \n+    assert f2c() == (1, 2)\n+    # Ensure source code is correct\n+    source = inspect.getsource(f2c)\n+    assert 'return (1, 2)' in source\n+\n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..2a4b8a6 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -182,6 +182,32 @@ def execute_gamma_simplify_tests_for_function(tfunc, D):\n     st = tfunc(t)\n     assert _is_tensor_eq(st, t)\n \n+def test_kahane_leading_gamma_matrix_bug():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    # Original buggy case\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    print(r)\n+    assert r.equals(4*G(rho)*G(sigma))\n+    \n+    # Reverse order case\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    print(r)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # New test case: different index combination that should remain unaffected\n+    t = G(mu)*G(rho)*G(-rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    print(r)\n+    assert r.equals(4*G(mu)*G(sigma))\n+\n+    # New test case: multiple free indices in different orders\n+    t = G(mu)*G(sigma)*G(rho)*G(-sigma)*G(-rho)*G(-mu)\n+    r = kahane_simplify(t)\n+    print(r)\n+    assert r.equals(4*eye(4))\n \n def test_kahane_algorithm():\n     # Wrap this function to convert to and from TIDS:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..2999bcc 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -45,7 +45,21 @@ def test_as_set():\n     # containment in a Set -- rewriting as a Set is not yet implemented\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n+from sympy import S, Contains, Reals, Integers, FiniteSet, Symbol\n+from sympy.testing.pytest import raises\n+\n+def test_as_set():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+\n+    # Test cases to ensure Contains.as_set returns the appropriate set\n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    assert Contains(x, S.Integers).as_set() == S.Integers\n+    assert Contains(x, S.Reals).as_set() == S.Reals\n \n-def test_type_error():\n+    # Test to ensure it works in Piecewise without raising an exception\n+    from sympy import Piecewise\n+    assert Piecewise((6, Contains(x, Reals).as_set()), (7, True)).subs(x, 0) == 6\n+    assert Piecewise((6, Contains(x, Reals).as_set()), (7, True)).subs(x, S.ImaginaryUnit) == 7\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..9c77914 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,40 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy import exp\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units import Quantity\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    # This is checking the expression within an exponential function\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+    # Verifying that exponent and other algebraic operations maintain expected dimensions\n+    complex_expr = exp(expr) * (2 * expr + 3)\n+    factor, d = SI._collect_factor_and_dimension(complex_expr)\n+    assert d == Dimension(1), \"The computed dimension should be dimensionless.\"\n+    assert factor.is_polynomial()\n+\n+    # This should not raise any error\n+    assert isinstance(factor, Quantity) or factor.is_polynomial()\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..d87e12b 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,30 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_collect_factor_and_dimension_equivalence():\n+    from sympy.physics.units import Quantity, velocity, acceleration, time, meter, second\n+    from sympy.physics.units.systems.si import SI\n+\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    # expression that should not raise ValueError\n+    expr1 = a1 * t1 + v1\n+\n+    # The following call should not raise a ValueError\n+    factor, dimension = SI._collect_factor_and_dimension(expr1)\n+    assert dimension == velocity\n+\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..3ecedbc 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -43,6 +44,10 @@ def test_homomorphism():\n     assert T.invert(a**-1*b**-1*a**2) == a*b**-1\n \n     # PermutationGroup -> PermutationGroup\n+    # Test for DihedralGroup(3) homomorphism\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n     D = DihedralGroup(8)\n     p = Permutation(0, 1, 2, 3, 4, 5, 6, 7)\n     P = PermutationGroup(p)\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..f0cacb7 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -267,6 +267,23 @@ def test_PolyElement_as_expr():\n \n     raises(ValueError, lambda: f.as_expr(X))\n \n+    # Test additional cases for as_expr with custom symbols\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Test with improper number of custom symbols\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test with the same number of symbols but different naming\n+    P, Q, R = symbols(\"p,q,r\")\n+    g = 3*P**2*Q - P*Q*R + 7*R**3 + 1\n+    assert f.as_expr(P, Q, R) == g\n+    \n+    # Ensure that using no symbols gives the default conversion\n+    default_expr = 3*x**2*y - x*y*z + 7*z**3 + 1\n+    assert f.as_expr() == default_expr\n+\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..4692835 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -274,6 +274,25 @@ def test_convert_equals_signs():\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n \n+def test_relationals_evaluate_false():\n+    from sympy.parsing.sympy_parser import parse_expr\n+    from sympy.core import Eq, Lt, Le, Gt, Ge, Ne\n+\n+    # Test cases for issue #24288 where evaluate=False should be respected\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+\n+    for text, expected in inputs.items():\n+        result = parse_expr(text, evaluate=False)\n+        assert result == expected, f\"Failed for {text}: {result} != {expected}\"\n+\n+\n def test_parse_function_issue_3539():\n     x = Symbol('x')\n     f = Function('f')\n",
  "astropy__astropy-14369": "",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..4eebeb5 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1897,8 +1897,38 @@ class OperationTests(OperationTestBase):\n             Author.objects.create(name='Albert', rebate='10$')\n         author = Author.objects.create(name='Albert', rebate='10%')\n         self.assertEqual(Author.objects.get(), author)\n+    from django.db import connection, transaction, IntegrityError\n+    from django.test import skipUnlessDBFeature\n+    from django.db import models, migrations\n+    from django.db.models import Q\n \n     @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_check_constraint_with_or_and(self):\n+        app_label = 'test_check_constraint'\n+        constraint_name = 'test_constraint_or_and'\n+        from_state = self.set_up_test_model(app_label)\n+        check = models.Q(field_1__isnull=False, flag=True) | models.Q(flag=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        \n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        \n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        \n+        # Check that constraint works as expected\n+        with transaction.atomic():\n+            TestConstraint.objects.create(field_1=1, flag=True)  # Should work\n+        with transaction.atomic():\n+            TestConstraint.objects.create(flag=False)  # Should work\n+\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)  # Should fail\n+            \n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=2, flag=False)  # Should fail\n     def test_remove_constraint(self):\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\n             models.CheckConstraint(check=models.Q(pink__gt=2), name=\"test_remove_constraint_pony_pink_gt_2\"),\n",
  "django__django-11477": "",
  "django__django-12273": "",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..05366ed 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -604,6 +604,15 @@ class DeletionTests(TestCase):\n                 signal.disconnect(receiver, sender=Referrer)\n \n \n+    def test_fast_delete_all(self):\n+        # Verify that a deletion of all objects does not produce a subquery\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Ensure that no subqueries are used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+\n+\n class FastDeleteTests(TestCase):\n \n     def test_fast_delete_fk(self):\n@@ -702,4 +711,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..5f3b1c0 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,6 +26,24 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n+    def test_invalid_value(self):\n+        field = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [\n+            (),\n+            [],\n+            {},\n+            set(),\n+            object(),\n+            complex(),\n+            'non-numeric string',\n+            b'non-numeric byte-string',\n+        ]\n+        for value in tests:\n+            with self.subTest(value=value):\n+                with self.assertRaisesMessage(ValidationError, msg % (value,)):\n+                    field.clean(value, None)\n+\n     def test_default(self):\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..f4d5892 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -5,10 +6,26 @@ import django\n from django.db import models\n from django.test import TestCase\n \n-from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n-\n+from .models import Container, Event, Group, Happening, M2MModel, MyEvent, Toy\n+from django.db.models import Sum\n+import pickle\n \n-class PickleabilityTestCase(TestCase):\n+class ToyPickleTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+    \n+    def test_pickle_values_annotation(self):\n+        prices = Toy.objects.values('material').annotate(total_price=Sum('price'))\n+        self.assertEqual(type(prices[0]), dict, \"Expected dict type for prices[0]\")\n+        \n+        # Test pickling and unpickling\n+        reloaded_prices = Toy.objects.all()\n+        reloaded_prices.query = pickle.loads(pickle.dumps(prices.query))\n+        self.assertEqual(type(reloaded_prices[0]), dict, \"Expected dict type for reloaded_prices[0] after unpickling\")\n+        self.assertEqual(list(reloaded_prices), list(prices), \"Expected unpickled query to match original results\")\n     @classmethod\n     def setUpTestData(cls):\n         Happening.objects.create()  # make sure the defaults are working (#20158)\n",
  "django__django-13449": "diff --git a/tests/expressions_window/tests.py b/tests/expressions_window/tests.py\nindex fb67168..ef89b6b 100644\n--- a/tests/expressions_window/tests.py\n+++ b/tests/expressions_window/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from unittest import mock, skipIf\n \n@@ -13,6 +14,7 @@ from django.db.models.functions import (\n )\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n+from decimal import Decimal\n from .models import Employee\n \n \n@@ -21,7 +23,7 @@ class WindowFunctionTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n         Employee.objects.bulk_create([\n-            Employee(name=e[0], salary=e[1], department=e[2], hire_date=e[3], age=e[4])\n+            Employee(name=e[0], salary=e[1], department=e[2], hire_date=e[3], age=e[4], bonus=Decimal(e[1]) / 400)\n             for e in [\n                 ('Jones', 45000, 'Accounting', datetime.datetime(2005, 11, 1), 20),\n                 ('Williams', 37000, 'Accounting', datetime.datetime(2009, 6, 1), 20),\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..c3c6011 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,6 +30,19 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n+    def test_unicode_json(self):\n+        field = JSONField()\n+        # Test with Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4e2d\u56fd'}), '{\"a\": \"\u4e2d\u56fd\"}')\n+        self.assertEqual(field.prepare_value('\u4f60\u597d'), '\"\u4f60\u597d\"')\n+\n+        # Test with emojis\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        self.assertEqual(field.prepare_value(['\ud83d\ude00', '\ud83d\udc31']), '[\"\ud83d\ude00\", \"\ud83d\udc31\"]')\n+\n+        # Test with mixed Unicode characters\n+        self.assertEqual(field.prepare_value(['\u4f60\u597d', '\ud83d\ude00']), '[\"\u4f60\u597d\", \"\ud83d\ude00\"]')\n+\n     def test_widget(self):\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..fd58d06 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6602,6 +6602,32 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_script_name_combined(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1], SCRIPT_NAME='/prefix/')\n+        self.assertRedirects(response, '/prefix' + known_url, status_code=301, fetch_redirect_response=False)\n+\n+    @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME='/prefix2/')\n+    def test_missing_slash_append_slash_true_force_script_name_combined(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(response, '/prefix2' + known_url, status_code=301, fetch_redirect_response=False)\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n",
  "django__django-14580": "",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..f6cd5a8 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1637,9 +1637,37 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(len(qs), 6)\n \n+    def test_aggregate_with_default_after_annotation(self):\n+        # This test verifies that using 'default' with aggregation after 'annotate' doesn't crash.\n+        result = Book.objects.annotate(idx=F(\"id\")).aggregate(Sum(\"id\", default=0))\n+        # Ensure that the result is not causing an SQL syntax error and returns correctly.\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregate_with_default_zero(self):\n+        # Test aggregation with the default set to zero, ensuring it works as intended.\n+        result = Publisher.objects.annotate(\n+            total_awards=Sum('num_awards')\n+        ).aggregate(value=Sum('total_awards', default=0))\n+        # Assert the result is correct when no records might cause a missing value.\n+        self.assertEqual(result['value'], 40)\n+\n     def test_exists_extra_where_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n+\n+    def test_aggregate_with_default_after_annotation(self):\n+        # This test verifies that using 'default' with aggregation after 'annotate' doesn't crash.\n+        result = Book.objects.annotate(idx=F(\"id\")).aggregate(Sum(\"id\", default=0))\n+        # Ensure that the result is not causing an SQL syntax error and returns correctly.\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregate_with_default_zero(self):\n+        # Test aggregation with the default set to zero, ensuring it works as intended.\n+        result = Publisher.objects.annotate(\n+            total_awards=Sum('num_awards')\n+        ).aggregate(value=Sum('total_awards', default=0))\n+        # Assert the result is correct when no records might cause a missing value.\n+        self.assertEqual(result['value'], 40)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..915e9e0 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2981,6 +2981,29 @@ class OperationTests(OperationTestBase):\n         new_state = project_state.clone()\n         operation.state_forwards(app_label, new_state)\n         # Rename index.\n+        \n+        # Test moving an unnamed index backward and forward\n+        with connection.schema_editor() as editor:\n+            # First, move index forward\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Check that the index with new name exists\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        \n+        with connection.schema_editor() as editor:\n+            # Now, move index backward\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        \n+        # Check that the unnamed auto-generated index is restored successfully\n+        self.assertTrue(\n+            any(index_exists(table_name, idx) for idx in self.get_auto_generated_index_names(project_state, ('weight', 'pink')))\n+        )\n+\n+        # Reverse back to forwards and assert no issue arises\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n",
  "django__django-15732": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..a91a898 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -595,6 +595,138 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         )\n \n \n+from django.test import TestCase\n+from django.db import connection, models\n+from django.db.migrations.state import ProjectState\n+from django.db import migrations\n+from django.test.utils import skipUnlessDBFeature\n+\n+class UniqueTogetherConstraintTests(TestCase):\n+\n+    @skipUnlessDBFeature(\"allows_multiple_constraints_on_same_fields\")\n+    def test_remove_unique_together_on_pk_field(self):\n+        app_label = \"test_rutopkf\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Pony\",\n+                    fields=[(\"id\", models.AutoField(primary_key=True))],\n+                    options={\"unique_together\": {(\"id\",)}},\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_pony\"\n+        pk_constraint_name = f\"{table_name}_pkey\"\n+        unique_together_constraint_name = f\"{table_name}_id_fb61f881_uniq\"\n+        self.assertConstraintExists(table_name, pk_constraint_name, value=False)\n+        self.assertConstraintExists(\n+            table_name, unique_together_constraint_name, value=False\n+        )\n+\n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"Pony\", set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertConstraintExists(table_name, pk_constraint_name, value=False)\n+        self.assertConstraintNotExists(table_name, unique_together_constraint_name)\n+\n+    @skipUnlessDBFeature(\"allows_multiple_constraints_on_same_fields\")\n+    def test_remove_unique_together_on_unique_field(self):\n+        app_label = \"test_rutouf\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Pony\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"name\", models.CharField(max_length=30, unique=True)),\n+                    ],\n+                    options={\"unique_together\": {(\"name\",)}},\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_pony\"\n+        unique_constraint_name = f\"{table_name}_name_key\"\n+        unique_together_constraint_name = f\"{table_name}_name_694f3b9f_uniq\"\n+        self.assertConstraintExists(table_name, unique_constraint_name, value=False)\n+        self.assertConstraintExists(\n+            table_name, unique_together_constraint_name, value=False\n+        )\n+\n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"Pony\", set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertConstraintExists(table_name, unique_constraint_name, value=False)\n+        self.assertConstraintNotExists(table_name, unique_together_constraint_name)\n+\n+    # Additional tests to further verify fixes and edge cases.\n+    @skipUnlessDBFeature(\"allows_multiple_constraints_on_same_fields\")\n+    def test_remove_unique_together_on_non_unique_field(self):\n+        app_label = \"test_rutounf\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Pony\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"age\", models.IntegerField()),\n+                    ],\n+                    options={\"unique_together\": {(\"age\",)}},\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_pony\"\n+        unique_together_constraint_name = f\"{table_name}_age_uniq\"\n+        self.assertConstraintExists(\n+            table_name, unique_together_constraint_name, value=False\n+        )\n+\n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"Pony\", set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertConstraintNotExists(table_name, unique_together_constraint_name)\n+\n+    @skipUnlessDBFeature(\"allows_multiple_constraints_on_same_fields\")\n+    def test_no_constraints_after_migration_on_unique_field(self):\n+        app_label = \"test_rutonc\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Pony\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"color\", models.CharField(max_length=30)),\n+                    ],\n+                    options={\"unique_together\": {(\"color\",)}},\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_pony\"\n+        unique_together_constraint_name = f\"{table_name}_color_uniq\"\n+        self.assertConstraintExists(\n+            table_name, unique_together_constraint_name, value=False\n+        )\n+\n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"Pony\", set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertConstraintNotExists(table_name, unique_together_constraint_name)\n+\n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n     Change the value of unique_together to the target one.\n",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..c33fd7a 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3490,7 +3490,46 @@ class FormFieldCallbackTests(SimpleTestCase):\n         class InheritedForm(NewForm):\n             pass\n \n-        for name in NewForm.base_fields:\n+        for field in NewForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.Textarea)\n+\n+    def test_model_form_factory_uses_meta_formfield_callback(self):\n+        def callback(db_field, **kwargs):\n+            formfield = db_field.formfield(**kwargs)\n+            formfield.required = True\n+            return formfield\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+                formfield_callback = callback\n+\n+        FactoryForm = modelform_factory(model=Person, form=BaseForm)\n+        for field in FactoryForm.base_fields.values():\n+            self.assertTrue(field.required)\n+\n+    def test_factory_overrides_meta_formfield_callback(self):\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+                formfield_callback = callback\n+\n+        def override_callback(db_field, **kwargs):\n+            return db_field.formfield(**kwargs)\n+\n+        FactoryForm = modelform_factory(\n+            model=Person,\n+            form=BaseForm,\n+            formfield_callback=override_callback\n+        )\n+\n+        for field in FactoryForm.base_fields.values():\n+            self.assertNotEqual(type(field.widget), forms.Textarea)\n             self.assertEqual(\n                 type(InheritedForm.base_fields[name].widget),\n                 type(NewForm.base_fields[name].widget),\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..0686182 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -10,12 +10,42 @@ from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n from django.utils.translation import gettext_lazy, override\n-\n-from .models import Score\n+from django.db import models\n+from django.core import serializers\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n \n \n class JsonSerializerTestCase(SerializersTestBase, TestCase):\n+    def test_serialization_of_m2m_with_custom_manager(self):\n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+\n+        class TestTagManager(models.Manager):\n+            def get_queryset(self):\n+                qs = super().get_queryset()\n+                qs = qs.select_related(\"master\")\n+                return qs\n+\n+        class TestTag(models.Model):\n+            objects = TestTagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test_instance = Test.objects.create(name=\"test\")\n+        test_instance.tags.add(tag)\n+\n+        # Test serialization\n+        try:\n+            serialized_data = serializers.serialize(\"json\", [test_instance])\n+            self.assertIn('\"model\": \"test\"', serialized_data)\n+        except Exception as e:\n+            self.fail(f\"Serialization raised an exception: {e}\")\n     serializer_name = \"json\"\n     pkless_str = \"\"\"[\n     {\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..b3cdac6 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,4 +1,5 @@\n-import copy\n+\n+import pickle\n from datetime import datetime\n import io\n from pathlib import Path\n@@ -1379,4 +1380,33 @@ def test_deepcopy():\n     fig2.draw_without_rendering()\n \n     assert ax.get_xlim() == (1e-1, 1e2)\n-    assert fig2.axes[0].get_xlim() == (0, 1)\n+    assert fig2.axes[0].get_xlim() == (0, 1)\n+\n+\n+def test_dpi_after_unpickling_m1_mac():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    import platform\n+\n+    if platform.system() != \"Darwin\" or \"arm\" not in platform.platform():\n+        pytest.skip(\"This test is specific for macOS M1 systems\")\n+\n+    initial_dpi = 200\n+    fig = plt.figure(dpi=initial_dpi)\n+    \n+    # Pickling and unpickling multiple times to check for DPI stability\n+    for _ in range(5):\n+        fig = pickle.loads(pickle.dumps(fig))\n+        assert fig.dpi == initial_dpi, f\"Expected DPI to remain {initial_dpi}, got {fig.dpi}\"\n+\n+def test_dpi_unaffected_on_regular_system():\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+\n+    initial_dpi = 200\n+    fig = plt.figure(dpi=initial_dpi)\n+\n+    # Pickling and unpickling multiple times to check for DPI stability\n+    for _ in range(5):\n+        fig = pickle.loads(pickle.dumps(fig))\n+        assert fig.dpi == initial_dpi, f\"Expected DPI to remain {initial_dpi}, got {fig.dpi}\"\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..acad395 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6603,6 +6603,19 @@ def test_integrate(dask):\n     with pytest.raises(ValueError):\n         da.integrate(\"x2d\")\n \n+    # Test the warning for deprecated 'dim' argument\n+    with pytest.warns(FutureWarning, match=\"dim argument is deprecated\"):\n+        result_with_dim = da.integrate(dim=\"x\")\n+\n+    # Test the updated 'coord' argument\n+    result_with_coord = da.integrate(coord=\"x\")\n+    assert_equal(result_with_dim, result_with_coord)\n+\n+    # Ensure the correct usage doesn't produce a warning\n+    with pytest.warns(None) as record:\n+        result_no_warning = da.integrate(coord=\"y\")\n+    assert len(record) == 0\n+\n \n @pytest.mark.parametrize(\"dask\", [True, False])\n @pytest.mark.parametrize(\"which_datetime\", [\"np\", \"cftime\"])\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..ef89598 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3029,8 +3029,13 @@ class TestDataset:\n         y = D.to_stacked_array(\"features\", sample_dims)\n         assert y.indexes[\"features\"].levels[1].dtype == D.y.dtype\n         assert y.dims == (\"x\", \"features\")\n-\n-    def test_to_stacked_array_to_unstacked_dataset(self):\n+    def test_to_unstacked_dataset_single_dimension(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # make a two dimensional dataset\n         a, b = create_test_stacked_array()\n         D = xr.Dataset({\"a\": a, \"b\": b})\n",
  "pylint-dev__pylint-8898": "",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..9e48a0d 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,29 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.pytester import Testdir\n+from _pytest.main import ExitCode\n+\n+def test_does_not_eagerly_collect_packages(testdir: Testdir):\n+    testdir.makepyfile(\"def test(): pass\")\n+    pydir = testdir.mkpydir(\"foopkg\")\n+    pydir.join(\"__init__.py\").write(\"assert False\")\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n+\n+def test_does_not_put_src_on_path(testdir: Testdir):\n+    # `src` is not on sys.path so it should not be importable\n+    testdir.tmpdir.join(\"src/nope/__init__.py\").ensure()\n+    testdir.makepyfile(\n+        \"import pytest\\n\"\n+        \"def test():\\n\"\n+        \"    with pytest.raises(ImportError):\\n\"\n+        \"        import nope\\n\"\n+    )\n+    result = testdir.runpytest()\n+    assert result.ret == ExitCode.OK\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1207,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..49d94a9 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,18 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"ident\",\n+    (\n+        \"None\",\n+        \"True\",\n+        \"False\",\n+    ),\n+)\n+def test_assertion_failure_idents(ident: str) -> None:\n+    with pytest.raises(AssertionError):\n+        Expression.compile(ident)\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..57e9acd 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,35 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas output.\"\"\"\n+    import pandas as pd\n+    from sklearn.pipeline import FeatureUnion\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn import set_config\n+    from numpy.testing import assert_array_equal\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X, y=None):\n+            return self\n+\n+        def transform(self, X):\n+            return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    # Test configuration set to 'pandas'.\n+    set_config(transform_output=\"pandas\")\n+\n+    # Applying FeatureUnion with transformer and checking for no errors.\n+    union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+    result = union.fit_transform(data)\n+\n+    # Expecting result to be of type DataFrame since transform_output is set to 'pandas'.\n+    assert isinstance(result, pd.DataFrame)\n+    # And check the shape or specific aggregates if necessary.\n+    assert result.shape[0] == data['date'].nunique()\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..4bac069 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -12,8 +12,29 @@ import pytest\n \n from sphinx import addnodes\n \n+import sphinx\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.builders.dummy import DummyBuilder\n+from sphinx.testing.path import path\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_none_type_hint_link(app: SphinxTestApp, status, warning):\n+    # Prepare the configuration\n+    app.config.intersphinx_mapping = {\"python\": (\"https://docs.python.org/3\", None)}\n+    \n+    # Set `autodoc_typehints` to 'description' and test\n+    app.config.autodoc_typehints = 'description'\n+    app.builder.build_all()\n+\n+    content = (app.outdir / 'index.html').read_text()\n+    assert '<a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\"' in content\n+\n+    # Set `autodoc_typehints` to 'signature' and test\n+    app.config.autodoc_typehints = 'signature'\n+    app.builder.build_all()\n \n-@pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n+    content = (app.outdir / 'index.html').read_text()\n+    assert '<a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#None\"' in content\n def test_autodoc(app, status, warning):\n     app.builder.build_all()\n \n@@ -30,4 +51,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..c473f30 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1317,6 +1317,32 @@ class NumpyDocstringTest(BaseDocstringTest):\n             expected = dedent(expected)\n             self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_combined(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like\n+    Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        # Test with napoleon_use_param set to False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param set to True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of `x1`, `x2`.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of `x1`, `x2`.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n     def test_parameters_with_class_reference(self):\n         docstring = \"\"\"\\\n Parameters\n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..33980f8 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -769,10 +769,126 @@ def test_pydecoratormethod_signature(app):\n                                   desc_content)]))\n     assert_node(doctree[1], addnodes.desc, desctype=\"method\",\n                 domain=\"py\", objtype=\"method\", noindex=False)\n+from sphinx.testing.util import assert_node\n+import pytest\n+from sphinx import addnodes\n+from sphinx.testing.restructuredtext import parse\n+from sphinx.domains.python import PythonDomain, PyTypedField\n+from docutils import nodes\n \n+@pytest.mark.sphinx('html', testroot='basic')\n+def test_type_and_rtype_warning_resolution(app):\n+    text = (\"\"\"\n+.. py:class:: mod.A\n+.. py:class:: mod.submod.A\n+\n+.. py:currentmodule:: mod\n+\n+.. py:function:: f()\n+\n+    :param A a: should link to mod.A\n+    :param mod.A b:\n+    :param mod.submod.A c:\n+    :rtype: A\n+    :rtype: mod.A\n+    :rtype: mod.submod.A\n+\n+.. py:currentmodule:: mod.submod\n+\n+.. py:function:: f()\n+\n+    :param A a: should link to mod.submod.A\n+    :param mod.A b:\n+    :param mod.submod.A c:\n+    :rtype: A\n+    :rtype: mod.A\n+    :rtype: mod.submod.A\n+    \"\"\")\n+    \n+    warnings = []\n+    def warning_handler(type, value, traceback):\n+        nonlocal warnings\n+        warnings.append(str(value))\n+\n+    app.builder.warning = warning_handler\n+    \n+    doctree = parse(app, text)\n+    \n+    # Ensure no warnings are emitted\n+    assert len(warnings) == 0, f\"Unexpected warnings: {warnings}\"\n+\n+    # Validate cross-reference correctness in first function under mod\n+    param_field = doctree[1][1][0][0][0][1][0]\n+    assert_node(param_field, ([addnodes.literal_strong, \"a\"], \" (\", \n+                              [nodes.pending_xref, addnodes.literal_emphasis, \"A\"], \")\"))\n+    assert param_field[2]['reftarget'] == 'A'\n+    \n+    # Validate cross-reference correctness in second function under mod.submod\n+    param_field_submod = doctree[2][1][0][0][0][1][0]\n+    assert_node(param_field_submod, ([addnodes.literal_strong, \"a\"], \" (\", \n+                                     [nodes.pending_xref, addnodes.literal_emphasis, \"A\"], \")\"))\n+    assert param_field_submod[2]['reftarget'] == 'A'\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n+from sphinx.testing.util import assert_node\n+import pytest\n+from sphinx import addnodes\n+from sphinx.testing.restructuredtext import parse\n+from sphinx.domains.python import PythonDomain, PyTypedField\n+from docutils import nodes\n \n+@pytest.mark.sphinx('html', testroot='basic')\n+def test_type_and_rtype_warning_resolution(app):\n+    text = (\"\"\"\n+.. py:class:: mod.A\n+.. py:class:: mod.submod.A\n+\n+.. py:currentmodule:: mod\n+\n+.. py:function:: f()\n+\n+    :param A a: should link to mod.A\n+    :param mod.A b:\n+    :param mod.submod.A c:\n+    :rtype: A\n+    :rtype: mod.A\n+    :rtype: mod.submod.A\n+\n+.. py:currentmodule:: mod.submod\n+\n+.. py:function:: f()\n+\n+    :param A a: should link to mod.submod.A\n+    :param mod.A b:\n+    :param mod.submod.A c:\n+    :rtype: A\n+    :rtype: mod.A\n+    :rtype: mod.submod.A\n+    \"\"\")\n+    \n+    warnings = []\n+    def warning_handler(type, value, traceback):\n+        nonlocal warnings\n+        warnings.append(str(value))\n+\n+    app.builder.warning = warning_handler\n+    \n+    doctree = parse(app, text)\n+    \n+    # Ensure no warnings are emitted\n+    assert len(warnings) == 0, f\"Unexpected warnings: {warnings}\"\n+\n+    # Validate cross-reference correctness in first function under mod\n+    param_field = doctree[1][1][0][0][0][1][0]\n+    assert_node(param_field, ([addnodes.literal_strong, \"a\"], \" (\", \n+                              [nodes.pending_xref, addnodes.literal_emphasis, \"A\"], \")\"))\n+    assert param_field[2]['reftarget'] == 'A'\n+    \n+    # Validate cross-reference correctness in second function under mod.submod\n+    param_field_submod = doctree[2][1][0][0][0][1][0]\n+    assert_node(param_field_submod, ([addnodes.literal_strong, \"a\"], \" (\", \n+                                     [nodes.pending_xref, addnodes.literal_emphasis, \"A\"], \")\"))\n+    assert param_field_submod[2]['reftarget'] == 'A'\n \n @pytest.mark.sphinx(freshenv=True)\n def test_module_index(app):\n",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..ec4b94e 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,3 +1,6 @@\n+\n+_foo = None  #: :meta public:\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n \n@@ -8,4 +11,4 @@ def _public_function(name):\n     \"\"\"public_function is a docstring().\n \n     :meta public:\n-    \"\"\"\n+    \"\"\"\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..d2cb17c 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -984,7 +984,46 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n-def test_info_field_list_var(app):\n+def test_rendering_with_dict_str_str(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, [nodes.list_item, nodes.paragraph]]))\n+\n+    # :param dict(str, str) opc_meta: (optional)\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..516b154 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1009,7 +1009,76 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n-def test_info_field_list_var(app):\n+def test_info_field_list_piped_type_with_more_complex_types(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param data: complex data types\\n\"\n+            \"   :type data: List[int] | Dict[str, Any] | None\\n\")\n+            \n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree,\n+                (nodes.target,\n+                 addnodes.index,\n+                 addnodes.index,\n+                 [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                           [desc_addname, \"example.\"],\n+                                           [desc_name, \"Class\"])],\n+                         [desc_content, nodes.field_list, nodes.field, (nodes.field_name,\n+                                                                         nodes.field_body)])]))\n+    assert_node(doctree[3][1][0][0][1],\n+                ([nodes.paragraph, ([addnodes.literal_strong, \"data\"],\n+                                    \" (\",\n+                                    [pending_xref, addnodes.literal_emphasis, \"List[int]\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"Dict[str, Any]\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [addnodes.literal_emphasis, \"None\"],\n+                                    \")\",\n+                                    \" -- \",\n+                                    \"complex data types\")],))\n+\n+    assert_node(doctree[3][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"List\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"Dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"None\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n+\n+def test_info_field_list_piped_type_with_non_trivial_types(app):\n+    text = (\".. py:function:: process(value)\\n\"\n+            \"\\n\"\n+            \"   :param value: can be a file or a connection\\n\"\n+            \"   :type value: IO | Connection\\n\")\n+\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree,\n+                (nodes.target,\n+                 addnodes.index,\n+                 [desc, ([desc_signature, ([desc_annotation, \"function \"],\n+                                           [desc_name, \"process\"])],\n+                         [desc_content, nodes.field_list, nodes.field, (nodes.field_name,\n+                                                                         nodes.field_body)])]))\n+    assert_node(doctree[2][1][0][0][1],\n+                ([nodes.paragraph, ([addnodes.literal_strong, \"value\"],\n+                                    \" (\",\n+                                    [pending_xref, addnodes.literal_emphasis, \"IO\"],\n+                                    [addnodes.literal_emphasis, \" | \"],\n+                                    [pending_xref, addnodes.literal_emphasis, \"Connection\"],\n+                                    \")\",\n+                                    \" -- \",\n+                                    \"can be a file or a connection\")],))\n+\n+    assert_node(doctree[2][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"IO\")\n+    assert_node(doctree[2][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"Connection\")\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..e75c753 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1048,7 +1048,24 @@ def test__solveset_multi():\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n \n-def test_conditionset():\n+def test_issue_18188():\n+    # Test case for solving an equation where previous implementation raised NotImplementedError\n+    n = Symbol('n', real=True)\n+    eq = Eq(n*cos(n) - 3*sin(n), 0)\n+    result = ConditionSet(n, eq, Reals)\n+    assert eq.as_set() == result\n+\n+    # Additional test case with different function to ensure ConditionSet is returned\n+    eq2 = Eq(n**2 + sqrt(n*2) + sin(n), 0)\n+    result2 = ConditionSet(n, Eq(sqrt(2)*sqrt(n) + n**2 + sin(n), 0), Reals)\n+    assert eq2.as_set() == result2\n+\n+    # Additional complex test case\n+    complex_eq = Eq(exp(n) + sin(n), 0)\n+    complex_result = ConditionSet(n, complex_eq, Reals)\n+    assert complex_eq.as_set() == complex_result\n+\n+    # Ensure it does not break existing test cases\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n \n",
  "sympy__sympy-18698": "",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..ff8fa2a 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3248,9 +3248,10 @@ def test_poly_matching_consistency():\n     assert I * Poly(x, x) == Poly(I*x, x)\n     assert Poly(x, x) * I == Poly(I*x, x)\n \n-\n-@XFAIL\n-def test_issue_5786():\n+def test_issue_18895():\n+    # This test is for issue #18895, where the factor function drops (y - 1) when extension=True\n+    z = expand((x - 1) * (y - 1))\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     assert expand(factor(expand(\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..50c102e 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,6 @@\n+\n+from sympy.core.symbol import Symbol\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..7414860 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -370,6 +370,8 @@ def test_Rational_new():\n     assert n.p == -2\n \n \n+from sympy import Rational\n+\n def test_Number_new():\n     \"\"\"\"\n     Test for Number constructor\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..ff5b1cf 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3201,8 +3201,29 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         form = SomeForm()\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n+    def test_boundwidget_id_for_label_with_custom_id(self):\n+        \"\"\"\n+        Test that BoundWidget.id_for_label uses the ID specified in attrs['id']\n+        when it is provided by a custom widget.\n+        \"\"\"\n+        class CustomChoiceSelect(CheckboxSelectMultiple):\n+            def subwidgets(self, name, value, attrs=None):\n+                options = super().subwidgets(name, value, attrs)\n+                for i, option in enumerate(options):\n+                    # Simulating the override of `id` by the ChoiceWidget\n+                    option.attrs['id'] = f'custom_id_{i}'\n+                return options\n+\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CustomChoiceSelect,\n+            )\n \n-    def test_boundfield_widget_type(self):\n+        form = SomeForm(auto_id='different_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..d44c641 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -299,6 +299,51 @@ def test_tool_line_handle():\n         assert artist.get_animated()\n         assert artist.get_visible()\n \n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tool = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    bound = x_bound if direction == 'horizontal' else y_bound\n+    assert tool._edge_handles.positions == list(bound)\n+\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]  # Updating selector is done in onmove\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+\n+    assert ax.get_xbound() == x_bound\n+    assert ax.get_ybound() == y_bound\n+\n+    index = 0 if direction == 'horizontal' else 1\n+    handle_positions = [press_data[index], release_data[index]]\n+    assert tool._edge_handles.positions == handle_positions\n+\n+\n+def test_span_selector_no_zero_inclusion():\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [10, 30])\n+    initial_xlim = ax.get_xlim()\n+\n+    tool = widgets.SpanSelector(ax, print, \"horizontal\", interactive=True)\n+    ax.figure.canvas.draw()\n+\n+    # Simulate a press and release event to initiate the span\n+    do_event(tool, 'press', xdata=11, ydata=15, button=1)\n+    do_event(tool, 'release', xdata=19, ydata=25, button=1)\n+\n+    # Check if limits haven't been expanded to include zero\n+    assert ax.get_xlim() == initial_xlim\n+\n     assert tool_line_handle.positions == positions\n \n \n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..a32d665 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,11 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import numpy as np\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..df54d5c 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,7 +148,33 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.utils.testing import assert_array_equal\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.ensemble import RandomForestClassifier\n+from sklearn.linear_model import Ridge\n+from sklearn.utils import shuffle\n+from sklearn.metrics import jaccard_score, mean_squared_error\n+from sklearn.base import clone\n+\n # Import the data\n+\n+@pytest.mark.parametrize(\n+    'estimator',\n+    [MultiOutputClassifier(RandomForestClassifier(n_estimators=2)),\n+     MultiOutputClassifier(LinearDiscriminantAnalysis())])\n+def test_cross_val_predict_proba(estimator):\n+    # Test cross_val_predict with predict_proba method for MultiOutputClassifier\n+    X, Y = make_multilabel_classification(n_samples=100, n_classes=5, n_labels=2, random_state=0)\n+    pred_proba = cross_val_predict(estimator, X, Y, cv=5, method='predict_proba')\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]  # Must have as many arrays as outputs\n+    for idx, proba in enumerate(pred_proba):\n+        assert proba.shape == (X.shape[0],)  # Each one must match the number of samples\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n X = iris.data\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..964dd1e 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -179,6 +179,28 @@ def test_stringify():\n     assert stringify(TracebackType) == \"types.TracebackType\"\n     assert stringify(Any) == \"Any\"\n \n+def test_restify_mock_inherited():\n+    \"\"\"Test restify on a class inheriting from a mocked module class.\"\"\"\n+    with mock(['torch.nn']):\n+        # Mock a module 'torch.nn' with class 'Module'.\n+        class MockModule:\n+            pass\n+        module_class = type('DeepKernel', (MockModule,), {})\n+        result = restify(module_class)\n+\n+    assert result == ':py:class:`torch.nn.DeepKernel`'\n+\n+def test_stringify_mock_inherited():\n+    \"\"\"Test stringify on a class inheriting from a mocked module class.\"\"\"\n+    with mock(['torch.nn']):\n+        # Mock a module 'torch.nn' with class 'Module'.\n+        class MockModule:\n+            pass\n+        module_class = type('DeepKernel', (MockModule,), {})\n+        result = stringify(module_class)\n+\n+    assert result == 'torch.nn.DeepKernel'\n+\n \n def test_stringify_type_hints_containers():\n     assert stringify(List) == \"List\"\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..540b6bf 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -354,7 +354,23 @@ def test_issue_9983():\n     assert p.is_convergent() is S.false\n     assert product(1 + 1/n**(S(2)/3), (n, 1, oo)) == p.doit()\n \n+def test_issue_13546():\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    from sympy import S, Product\n+    # Check for n=2 from the issue statement\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+    # Additional test cases for different n values\n+    assert p.subs(n, 3).doit() == S(175)/12  # Calculate manually: (3 + 1) * (3 + 1/2) * (3 + 1/4)\n+    assert p.subs(n, 1).doit() == S(1)  # Only the term (1 + 1) = 2\n+    assert p.subs(n, 0).doit() == S(1)  # Product of zero terms is 1\n+\n+    # Test where the correction involves any series transformation or special functions\n+    # Given the note about the q-Pochhammer symbol, investigate if such usage is implemented in the sympy correction.\n+    # Note: For an accurate assertion for special function usage, sympy implementation introspection might be required\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}