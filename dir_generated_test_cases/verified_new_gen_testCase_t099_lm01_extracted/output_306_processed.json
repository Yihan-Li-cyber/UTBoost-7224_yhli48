{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..a8ff0cc 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -142,6 +142,19 @@ def test_custom_model_separable():\n \n     assert model_a().separable\n \n+def test_separability_matrix_nested_compound_model():\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+    \n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    complex_model = m.Pix2Sky_TAN() & cm\n+    expected_matrix = np.array([[True, True, False, False],\n+                                [True, True, False, False],\n+                                [False, False, True, True],\n+                                [False, False, True, True]])\n+                                \n+    assert_allclose(separability_matrix(complex_model), expected_matrix)\n+\n     @custom_model\n     def model_c(x, y):\n         return x + y\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..dd13ef7 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,35 @@\n+\n+def test_is_fits_gh_14305():\n+    \"\"\"Regression test for https://github.com/astropy/astropy/issues/14305\"\"\"\n+    assert not connect.is_fits(\"\", \"foo.bar\", None)\n+\n+def test_identify_format_with_empty_args():\n+    \"\"\"Test identify_format with empty args to ensure no IndexError.\"\"\"\n+    from astropy.io.registry import identify_format\n+    from astropy.table import Table\n+\n+    # This should not raise an IndexError\n+    formats = identify_format(\"write\", Table, \"testfile.ecsv\", None, [], {})\n+    assert isinstance(formats, list)  # Expect an empty list if no format matches\n+\n+def test_identify_format_with_args_filled():\n+    \"\"\"Test identify_format with valid args.\"\"\"\n+    from astropy.io.registry import identify_format\n+    from astropy.table import Table\n+\n+    # Use a hypothetical valid format (e.g. FITS) that should exist\n+    formats = identify_format(\"write\", Table, \"testfile.fits\", None, [], {})\n+    assert \"fits\" in formats\n+\n+@pytest.mark.parametrize(\"path\", [\"test.ecsv\", \"test.txt\", \"test.jpeg\"])\n+def test_identify_format_with_various_paths(path):\n+    \"\"\"Test identify_format with various file paths.\"\"\"\n+    from astropy.io.registry import identify_format\n+    from astropy.table import Table\n+\n+    formats = identify_format(\"write\", Table, path, None, [], {})\n+    assert isinstance(formats, list)\n+\n import gc\n import warnings\n \n@@ -8,6 +40,8 @@ from numpy.testing import assert_allclose, assert_array_equal\n from astropy import units as u\n from astropy.io import fits\n from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import connect\n+import pytest\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..e8836b9 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,6 +137,49 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+    def test_floating_point_string_representation_edge_cases(self):\n+        \"\"\"\n+        Test edge cases for floating point precision to avoid comment truncation\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        long_comment = \"[m] abcdef ghijklm nopqrstu vw xyzabcdefghijk\"\n+\n+        # Test case with exact representation within limits\n+        c = fits.Card(k, 3.141592653589793, long_comment)\n+        expected_str = f\"{k} = 3.141592653589793 / {long_comment}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test case with max precision\n+        c = fits.Card(k, 2.718281828459045, long_comment)\n+        expected_str = f\"{k} = 2.718281828459045 / {long_comment}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Check that a number like 0.1 is not expanded unnecessarily\n+        c = fits.Card(k, 0.1, long_comment)\n+        expected_str = f\"{k} = 0.1 / {long_comment}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..1a40675 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,7 +601,24 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_vla_identical(self):\n+        \"\"\"\n+        Test that FITSDiff does not report differences in identical files \n+        with VLA columns (variable-length arrays).\n+        \"\"\"\n+        col = fits.Column('a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        with fits.HDUList([hdu]) as hdul:\n+            hdul.writeto('test_vla.fits', overwrite=True)\n+        \n+        diff = fits.FITSDiff('test_vla.fits', 'test_vla.fits')\n+        assert diff.identical, \"FITSDiff erroneously found differences in identical files with VLA.\"\n+\n+        report = diff.report()\n+        assert \"1 different table data element(s) found\" not in report\n+\n+        # Clean up the created test file\n+        os.remove('test_vla.fits')\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..e44fb0f 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,20 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings_properties():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            pass\n+\n+    class Subclass(Base):\n+        @property\n+        def bar(self):\n+            return 42\n \n-def test_set_locale():\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..c569ca9 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -172,6 +172,9 @@ def test_multiple_solidus():\n         u.Unit(\"m/s/kg\", format=\"vounit\")\n \n \n+import astropy.units as u\n+import pytest\n+\n def test_unknown_unit3():\n     unit = u.Unit(\"FOO\", parse_strict='silent')\n     assert isinstance(unit, u.UnrecognizedUnit)\n@@ -197,8 +200,10 @@ def test_unknown_unit3():\n     with pytest.raises(TypeError):\n         unit5 = u.Unit(None)\n \n-\n-@raises(TypeError)\n+    # Test comparing UnrecognizedUnit with None should return False\n+    assert (unit == None) is False  # noqa\n+    assert (unit != None) is True  # noqa\n+    assert unit not in [None, u.m]\n def test_invalid_scale():\n     x = ['a', 'b', 'c'] * u.m\n \n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..7fee684 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -71,5 +71,15 @@ def test_minversion():\n     bad_versions = ['1', '1.2rc1']\n     for version in good_versions:\n         assert minversion(test_module, version)\n-    for version in bad_versions:\n-        assert not minversion(test_module, version)\n+    # This is the added test case for the issue mentioned with minversion\n+    additional_good_versions = ['1.14dev', '1.14.0.dev', '1.14.0']\n+    additional_bad_versions = ['1.14.3']\n+    \n+    for version in additional_good_versions:\n+        test_module.__version__ = '1.14.0'\n+        assert minversion(test_module, version)\n+    \n+    for version in additional_bad_versions:\n+        test_module.__version__ = '1.14.0'\n+        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..7828959 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -79,7 +79,47 @@ class TestHeaderFunctions(FitsTestCase):\n         assert header['B'] == 'B'\n         assert header.comments['B'] == 'C'\n \n-    def test_card_constructor_default_args(self):\n+    def test_card_from_bytes(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object (assuming latin-1 encoding).\n+        \"\"\"\n+\n+        c = fits.Card.fromstring(b\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string.\n+\n+        See https://github.com/astropy/astropy/issues/8706\n+        \"\"\"\n+\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n+\n+    def test_card_from_unicode(self):\n+        \"\"\"\n+        Test loading a Card from a `str` object containing unicode characters.\n+        \"\"\"\n+\n+        c = fits.Card.fromstring(\"DEF     = 'def'\")\n+        assert c.keyword == 'DEF'\n+        assert c.value == 'def'\n+\n+    def test_header_fromstring_unicode(self):\n+        \"\"\"\n+        Test reading a Header from a `str` containing unicode characters.\n+        \"\"\"\n+\n+        header_data = \"NAXIS   =                    1\"\n+        header = fits.Header.fromstring(header_data)\n+        assert header['NAXIS'] == 1\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n \n         c = fits.Card()\n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..11f3439 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -143,6 +143,30 @@ class TestQuantityCreation:\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n         # items stored as objects by numpy should be converted to float\n+\n+        # Test preserving np.float16 dtype\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n+\n+        # Ensure np.float32 dtype is preserved\n+        a3_32 = np.array([1., 2.], dtype=np.float32)\n+        q3_32 = u.Quantity(a3_32, u.yr)\n+        assert q3_32.dtype == a3_32.dtype\n+\n+        # Ensure np.float64 dtype is preserved\n+        a3_64 = np.array([1., 2.], dtype=np.float64)\n+        q3_64 = u.Quantity(a3_64, u.yr)\n+        assert q3_64.dtype == a3_64.dtype\n+\n+        # Ensure np.float128 dtype is preserved if available\n+        try:\n+            a3_128 = np.array([1., 2.], dtype=np.float128)\n+            q3_128 = u.Quantity(a3_128, u.yr)\n+            assert q3_128.dtype == a3_128.dtype\n+        except TypeError:\n+            # np.float128 might not be available on all platforms\n+            pass\n         # by default\n         q4 = u.Quantity(decimal.Decimal('10.25'), u.m)\n         assert q4.dtype == float\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..08915b1 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,7 +218,13 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n-    # Trailing newlines not accepted\n+    # Test invalid characters in userinfo\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://username:password@host.com/?query=foo@example.com', ValidationError),\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n     # Trailing junk does not take forever to reject\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..94c9d13 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -9,6 +10,7 @@ from django.db.models import (\n     Max, Min, Sum, Value,\n )\n from django.test import TestCase\n+from django.db.models.expressions import Case, When\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n@@ -395,7 +397,36 @@ class AggregateTestCase(TestCase):\n         sql = ctx.captured_queries[0]['sql']\n         self.assertIn('SELECT COUNT(*) ', sql)\n \n-    def test_non_grouped_annotation_not_in_group_by(self):\n+    def test_count_distinct_expression(self):\n+        \"\"\"\n+        Test that a Count annotation with both a Case condition and distinct=True\n+        does not produce a query syntax error, verifying the fix for the issue.\n+        \"\"\"\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_without_condition(self):\n+        \"\"\"\n+        Test with Count and distinct=True but without a Case condition to ensure\n+        relevant original functionality isn't impacted.\n+        \"\"\"\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count('rating', distinct=True),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_different_condition(self):\n+        \"\"\"\n+        Test that a different Case condition in the Count annotation with distinct=True\n+        produces correct results and no syntax errors.\n+        \"\"\"\n+        aggs = Book.objects.aggregate(\n+            distinct_publisher=Count(Case(When(price__gt=20, then='publisher')), distinct=True),\n+        )\n+        # Assuming there are three distinct publishers with books priced over 20\n+        self.assertEqual(aggs['distinct_publisher'], 3)\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n         excluded from the group by clause.\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..9630a61 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1093,7 +1093,15 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n-    def test_override_file_upload_permissions(self):\n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        Uploaded files should have default permissions set to 0o644.\n+        \"\"\"\n+        file = SimpleUploadedFile(\"file.txt\", b\"file_content\")\n+        with open(default_storage.save(\"file.txt\", file), 'rb') as f:\n+            file_path = f.name\n+        self.assertEqual(oct(os.stat(file_path).st_mode & 0o777), '0o644')\n+        os.remove(file_path)\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n         the file_permissions_mode attribute of\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..3d5644e 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,3 +1,4 @@\n+\n import os\n import signal\n from unittest import mock\n@@ -29,7 +30,27 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n-    def test_basic(self):\n+    def test_pgpassword(self):\n+        \"\"\"\n+        Test that PGPASSWORD is set when password is provided.\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return mock.Mock()  # Assuming the process completes okay.\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            self.assertEqual(\n+                self._run_it({\n+                    'database': 'dbname',\n+                    'user': 'someuser',\n+                    'password': 'somepassword',\n+                    'host': 'somehost',\n+                    'port': '444',\n+                }), (\n+                    ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                    'somepassword',\n+                )\n+            )\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +134,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..e46983f 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -5,6 +5,7 @@ from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n+from django.contrib.contenttypes.models import ContentType\n \n \n @override_settings(\n@@ -38,7 +39,20 @@ class ContentTypeOperationsTests(TransactionTestCase):\n                     self.assertEqual(next_operation.old_model, operation.old_name_lower)\n                     self.assertEqual(next_operation.new_model, operation.new_name_lower)\n \n-    def test_existing_content_type_rename(self):\n+    class TestRouter:\n+        def db_for_write(self, model, **hints):\n+            return 'default'\n+\n+    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n+    def test_existing_content_type_rename_other_database(self):\n+        ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+        other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+        call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+        self.assertFalse(other_content_types.filter(model='foo').exists())\n+        self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+        call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+        self.assertTrue(other_content_types.filter(model='foo').exists())\n+        self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n@@ -63,4 +77,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..95bfb78 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -426,6 +426,35 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n                 AlternateInline, MediaInline\n             ]\n         ma = EpisodeAdmin(Episode, self.site)\n+\n+        # Test verification for existing functionality\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+\n+        # New test cases to verify the get_inlines hook\n+        def test_get_inlines_hook(self):\n+            class Request:\n+                pass\n+\n+            request = Request()\n+\n+            # Initialize EpisodeAdmin\n+            ma = EpisodeAdmin(Episode, self.site)\n+\n+            # Test when no attributes set\n+            self.assertEqual(ma.get_inlines(request, None), [])\n+\n+            # Test with 'alternate' attribute\n+            request.name = 'alternate'\n+            self.assertEqual(ma.get_inlines(request, None), (ma.inlines[0],))\n+            self.assertEqual(type(ma.get_inline_instances(request)[0]), type(ma.inlines[0](None, None)))\n+\n+            # Test with 'media' attribute\n+            request.name = 'media'\n+            self.assertEqual(ma.get_inlines(request, None), (ma.inlines[1],))\n+            self.assertEqual(type(ma.get_inline_instances(request)[0]), type(ma.inlines[1](None, None)))\n+\n+            # Assert no inlines if name is not 'alternate' or 'media'\n+            request.name = 'other'\n+            self.assertEqual(ma.get_inlines(request, None), [])\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..5c9b78b 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -248,7 +248,31 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_unicode_validator_trailing_newline(self):\n+        invalid_usernames = [\n+            \"username\\n\",\n+            \"username\\r\\n\",\n+            \"user\\nname\",\n+            \"new\\n\"\n+        ]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+\n+    def test_ascii_validator_trailing_newline(self):\n+        invalid_usernames = [\n+            \"username\\n\",\n+            \"username\\r\\n\",\n+            \"user\\nname\",\n+            \"new\\n\"\n+        ]\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +282,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..f5f00c1 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -10,8 +10,27 @@ from .utils import ROOT, TEMPLATE_DIR\n OTHER_DIR = os.path.join(ROOT, 'other_templates')\n \n \n+import os\n+from django.template import Engine\n+\n class RenderToStringTest(SimpleTestCase):\n \n+    def test_autoescape_off(self):\n+        # Testing when autoescape is set to False\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n+    def test_autoescape_on(self):\n+        # Testing when autoescape is set to True\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',  # Expecting escaped output\n+        )\n+\n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..53068d5 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -278,6 +278,19 @@ class QueryDictTests(SimpleTestCase):\n         expected['\u028e\u01dd\u029e'] = '\u01ddnl\u0250\u028c'\n         self.assertEqual(q, expected)\n \n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_memoryview_empty(self):\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_memoryview_with_other_methods(self):\n+        r = HttpResponse()\n+        r.write(memoryview(b'write-with-memoryview'))\n+        self.assertEqual(r.content, b'write-with-memoryview')\n+\n     def test_fromkeys_empty_iterable(self):\n         self.assertEqual(QueryDict.fromkeys([]), QueryDict(''))\n \n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..8a9d953 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -508,6 +508,54 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, ['0001_initial'])\n \n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n+    )\n+    def test_loading_namespace_package(self):\n+        \"\"\"Migration directories without an __init__.py file are loaded.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.empty_namespace_package'},\n+    )\n+    def test_empty_namespace_package(self):\n+        \"\"\"Empty namespace packages don't cause migration loading failures.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertFalse(\n+            migration_loader.migrated_apps,\n+            \"Expected no migrated apps, found: %s\" % migration_loader.migrated_apps,\n+        )\n+\n+    @override_settings(\n+        MIGRATION_MODULES={\n+            'migrations': 'migrations.test_migrations_namespace_with_subdirs',\n+        },\n+    )\n+    def test_namespace_with_subdirectories(self):\n+        \"\"\"Namespace migration directories with subdirectories are handled.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n+    @override_settings(\n+        MIGRATION_MODULES={\n+            'migrations': 'migrations.test_migrations_namespace_with_init_file',\n+        },\n+    )\n+    def test_namespace_with_init_file(self):\n+        \"\"\"Namespace migration directories with __init__.py file is still valid.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        self.assertEqual(\n+            migration_loader.graph.forwards_plan(('migrations', '0001_initial')),\n+            [('migrations', '0001_initial')],\n+        )\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..14b18f7 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -701,8 +701,32 @@ class TestInlinePermissions(TestCase):\n             '<input type=\"hidden\" id=\"id_inner2_set-0-id\" value=\"%i\" name=\"inner2_set-0-id\">' % self.inner2.id,\n             html=True\n         )\n+    def test_inline_view_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        # View-only inlines should not allow add/change/delete.\n+        self.assertContains(response, '<h2>Author-book relationships</h2>', count=1)\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" id=\"id_Author_books-TOTAL_FORMS\" value=\"1\" '\n+            'name=\"Author_books-TOTAL_FORMS\">',\n+            html=True\n+        )\n+        self.assertContains(response, '<p>The inline Book</p>', html=True)\n+        self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n \n-    def test_inline_change_fk_change_perm(self):\n+    def test_inline_change_m2m_permissions_overview(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        # Ensure has_view_permission is True, others are False.\n+        response = self.client.get(self.author_change_url)\n+        inline_admin_formset = response.context['inline_admin_formset']\n+        self.assertIs(inline_admin_formset.has_view_permission, True)\n+        self.assertIs(inline_admin_formset.has_add_permission, False)\n+        self.assertIs(inline_admin_formset.has_change_permission, False)\n+        self.assertIs(inline_admin_formset.has_delete_permission, False)\n         permission = Permission.objects.get(codename='change_inner2', content_type=self.inner_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.holder_change_url)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..65c334c 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,25 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_empty_fields_list(self):\n+        \"\"\"model_to_dict should return an empty dict for an empty fields list.\"\"\"\n+        bw = BetterWriter.objects.create(name='Test Writer', score=20)\n+        self.assertEqual(model_to_dict(bw, fields=[]), {})\n+\n+    def test_specific_fields_list(self):\n+        \"\"\"model_to_dict should return a dict with only the specified fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Specific Writer', score=30)\n+        self.assertEqual(sorted(model_to_dict(bw, fields=['id', 'name'])), ['id', 'name'])\n+\n+    def test_exclude_empty_fields_list(self):\n+        \"\"\"model_to_dict with exclude=[] should return all fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Exclude Test Writer', score=40)\n+        self.assertEqual(sorted(model_to_dict(bw, exclude=[])), ['id', 'name', 'score', 'writer_ptr'])\n+\n+    def test_exclude_specific_fields_list(self):\n+        \"\"\"model_to_dict should exclude the specified fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Exclude Specific Writer', score=50)\n+        self.assertEqual(sorted(model_to_dict(bw, exclude=['id', 'name'])), ['score', 'writer_ptr'])\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..74aae71 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,8 +1,10 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from django.db.models.deletion import Collector\n \n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n@@ -464,7 +466,16 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Create a User instance\n+        u = User.objects.create()\n+        # Ensure User can be fast-deleted.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        # Delete the user instance\n+        u.delete()\n+        # Assert the primary key is None after deletion\n+        self.assertIsNone(u.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..a1dd55c 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,14 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            # Testing smaller values that should not trigger scientific notation\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n+            ('1e-201', 10, '0.0000000000'),\n+            # Include original test case\n+            ('0.{}1234'.format('0' * 299), 3, '0.000'),\n+            # Additional edge case\n+            ('0.{}5678'.format('0' * 299), 4, '0.0000'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..4784296 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,4 @@\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n@@ -188,9 +189,10 @@ class Comment(models.Model):\n     comment = models.TextField()\n \n     # Content-object field\n-    content_type = models.ForeignKey(ContentType, models.CASCADE)\n+    content_type_uuid = models.ForeignKey(ContentType, models.CASCADE, related_name='comments', null=True)\n     object_pk = models.TextField()\n-    content_object = GenericForeignKey(ct_field=\"content_type\", fk_field=\"object_pk\")\n+    object_pk_uuid = models.TextField()\n+    content_object_uuid = GenericForeignKey(ct_field='content_type_uuid', fk_field='object_pk_uuid')\n \n     class Meta:\n         ordering = ['id']\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..e31dce9 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -81,7 +81,28 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                {\n+                    'PGSSLCERT': 'client.crt',\n+                    'PGSSLKEY': 'client.key',\n+                    'PGSSLMODE': 'verify-ca',\n+                    'PGSSLROOTCERT': 'root.crt',\n+                },\n+                None  # Assuming no password for this test case\n+            )\n+        )\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..a6b46a2 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -98,7 +98,13 @@ class FilteredRelationTests(TestCase):\n             [self.author1]\n         )\n \n-    def test_with_join_and_complex_condition(self):\n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n                 book_alice=FilteredRelation(\n",
  "django__django-11276": "",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..b53385a 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,7 +243,34 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n-    def test_disallowed_abbreviated_options(self):\n+    def test_skip_checks_runs_without_checks(self):\n+        \"\"\"\n+        Test that the command runs without performing checks when --skip-checks is provided.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['user_commands'])\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+    def test_runs_with_checks_by_default(self):\n+        \"\"\"\n+        Test that the command runs with checks by default.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['user_commands'])\n+\n+        # Mock the check method to monitor if it's called\n+        original_check = BaseCommand.check\n+\n+        def mocked_check(self, *args, **kwargs):\n+            self.check_called = True\n+            return original_check(self, *args, **kwargs)\n+\n+        BaseCommand.check = mocked_check\n+        try:\n+            command_instance = self.run_manage(['set_option', '--set', 'foo'])\n+            self.assertTrue(getattr(command_instance, \"check_called\", False))\n+        finally:\n+            BaseCommand.check = original_check\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n         abbreviated forms of the --setting and --pythonpath options.\n",
  "django__django-11333": "",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..f7ca58c 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -242,7 +242,22 @@ class ModelBackendTest(BaseModelBackendTest, TestCase):\n             password='test',\n         )\n \n-    def test_authenticate_inactive(self):\n+    def test_authentication_without_credentials(self):\n+        \"\"\"\n+        Test that authenticate does not perform any database queries or\n+        password hashing when username or password is None.\n+        \"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        credentials_list = [\n+            {},\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},\n+            {'password': 'test'},\n+        ]\n+        for credentials in credentials_list:\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n         \"\"\"\n         An inactive user can't authenticate.\n         \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..a77e69c 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -115,6 +115,24 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__gte=2, num__lte=3)\n         self.assertNumbersEqual(qs1.union(qs2).order_by(F('num').desc()), [3, 2, 1, 0])\n \n+    def test_composed_query_column_change(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        \n+        # Test changing columns using values_list.\n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n+        \n+        reserved_name = qs1.union(qs1).values_list('name').get()\n+        self.assertEqual(reserved_name, ('a',))\n+        \n+        # Test using values with different combinations of column selections.\n+        reserved_dict = qs1.union(qs1).values('name').get()\n+        self.assertEqual(reserved_dict, {'name': 'a'})\n+        \n+        reserved_dict_full = qs1.union(qs1).values('name', 'order').get()\n+        self.assertEqual(reserved_dict_full, {'name': 'a', 'order': 2})\n+\n     def test_union_with_values(self):\n         ReservedName.objects.create(name='a', order=2)\n         qs1 = ReservedName.objects.all()\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..d6d687a 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -363,6 +363,30 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n     def test_none_body(self):\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n+\n+    @mock.patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        \"\"\"\n+        Test that the Message-ID header is correctly created with Punycode\n+        for non-ASCII domain names when email encoding is non-unicode.\n+        \"\"\"\n+        delattr(DNS_NAME, '_fqdn')  # Clear cached DNS name to simulate FQDN call\n+        email = EmailMessage('subject', '', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@xn--p8s937b>', message['Message-ID'])\n+\n+    @mock.patch('socket.getfqdn', return_value='\u6b63\u5b97')\n+    def test_non_ascii_dns_different_unicode_email(self, mocked_getfqdn):\n+        \"\"\"\n+        Test with another non-ASCII domain to ensure robustness of Punycode\n+        conversion across different non-ASCII characters.\n+        \"\"\"\n+        delattr(DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', '', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        message = email.message()\n+        self.assertIn('@xn--fiq228c>', message['Message-ID'])\n         self.assertEqual(msg.message().get_payload(), '')\n \n     def test_encoding(self):\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..61b32e7 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n@@ -510,7 +511,41 @@ class ListDisplayTests(CheckTestCase):\n         self.assertIsValid(TestModelAdmin, ValidationTestModel)\n \n \n-class ListDisplayLinksCheckTests(CheckTestCase):\n+class PositionFieldTestCase(CheckTestCase):\n+\n+    def test_valid_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+        \n+        class TestModel(Model):\n+            field = PositionField()\n+        \n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+        \n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_invalid_field_not_in_model(self):\n+        class TestModel(Model):\n+            field = models.CharField(max_length=100)\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel, (\n+                \"The value of 'list_display[0]' refers to \"\n+                \"'non_existent_field', which is not a callable, an attribute of \"\n+                \"'TestModelAdmin', or an attribute or method on 'tests.testmodel'.\"\n+            ), 'admin.E108'\n+        )\n \n     def test_not_iterable(self):\n         class TestModelAdmin(ModelAdmin):\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..33c2ba9 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -13,6 +13,9 @@ from .models import Article, Author, OrderedByFArticle, Reference\n \n \n class OrderingTests(TestCase):\n+    from datetime import datetime\n+    from django.db.models import OrderBy\n+    from .models import ChildArticle\n \n     @classmethod\n     def setUpTestData(cls):\n@@ -462,7 +465,51 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_expression_with_inheritance(self):\n+        # Adding test to verify behavior when ordering with expressions using multi-table inheritance\n+        ca1 = ChildArticle.objects.create(\n+            headline=\"inheritance 1\",\n+            pub_date=datetime(2023, 9, 25),\n+            author=self.author_1,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline=\"inheritance 2\",\n+            pub_date=datetime(2023, 9, 26),\n+            author=self.author_2,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline=\"inheritance 3\",\n+            pub_date=datetime(2023, 9, 26),\n+            author=self.author_1,\n+        )\n+        \n+        # Initializing query set with order_by defined as default by expression\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        \n+        # Validate if query set ordering does not cause errors and follows expected order\n+        self.assertSequenceEqual(list(articles), [ca1, ca2, ca3])\n+\n+    def test_ordering_with_direct_expression_call(self):\n+        # Testing direct expression orders in query and ensuring compatibility\n+        ca1 = ChildArticle.objects.create(\n+            headline=\"direct expression 1\",\n+            pub_date=datetime(2023, 9, 25),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline=\"direct expression 2\",\n+            pub_date=datetime(2023, 9, 26),\n+            author=self.author_2,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline=\"direct expression 3\",\n+            pub_date=datetime(2023, 9, 26),\n+            author=self.author_1,\n+        )\n+\n+        articles = ChildArticle.objects.order_by(OrderBy(F('author_id').asc()))\n+        \n+        self.assertSequenceEqual(list(articles), [ca3, ca1, ca2])\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..c8cff8c 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -397,7 +397,35 @@ class AggregateTestCase(TestCase):\n         sql = ctx.captured_queries[0]['sql']\n         self.assertIn('SELECT COUNT(*) ', sql)\n \n-    def test_count_distinct_expression(self):\n+    def test_avg_sum_aggregates_with_distinct(self):\n+        books = Book.objects.create(title=\"Book 1\", pages=100, rating=4.0)\n+        books = Book.objects.create(title=\"Book 2\", pages=200, rating=5.0)\n+        books = Book.objects.create(title=\"Book 3\", pages=100, rating=3.5)\n+        books = Book.objects.create(title=\"Book 4\", pages=300, rating=4.5)\n+\n+        avg_result = Book.objects.aggregate(average_rating=Avg('rating', distinct=True))\n+        self.assertAlmostEqual(avg_result['average_rating'], 4.125, places=3)\n+\n+        sum_result = Book.objects.aggregate(sum_rating=Sum('rating', distinct=True))\n+        self.assertAlmostEqual(sum_result['sum_rating'], 16.5, places=3)\n+\n+    def test_avg_no_distinct(self):\n+        books = Book.objects.create(title=\"Book 1\", pages=100, rating=4.0)\n+        books = Book.objects.create(title=\"Book 2\", pages=200, rating=5.0)\n+        books = Book.objects.create(title=\"Book 3\", pages=100, rating=3.5)\n+        books = Book.objects.create(title=\"Book 4\", pages=300, rating=4.5)\n+\n+        avg_result = Book.objects.aggregate(average_rating=Avg('rating'))\n+        self.assertEqual(avg_result['average_rating'], 4.25)\n+\n+    def test_sum_no_distinct(self):\n+        books = Book.objects.create(title=\"Book 1\", pages=100, rating=4.0)\n+        books = Book.objects.create(title=\"Book 2\", pages=200, rating=5.0)\n+        books = Book.objects.create(title=\"Book 3\", pages=100, rating=3.5)\n+        books = Book.objects.create(title=\"Book 4\", pages=300, rating=4.5)\n+\n+        sum_result = Book.objects.aggregate(sum_rating=Sum('rating'))\n+        self.assertEqual(sum_result['sum_rating'], 17.0)\n         aggs = Book.objects.aggregate(\n             distinct_ratings=Count(Case(When(pages__gt=300, then='rating')), distinct=True),\n         )\n",
  "django__django-11740": "",
  "django__django-11749": "",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..70eef03 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,7 +437,22 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n-    def test_username_field_label(self):\n+    def test_username_field_max_length_in_widget(self):\n+        data = {\n+            'username': 'user_with_max_length',\n+            'password': 'password',\n+        }\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n+    def test_username_field_max_length_in_widget_default(self):\n+        data = {\n+            'username': 'shortname',\n+            'password': 'password',\n+        }\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..1e95f90 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -252,7 +252,28 @@ class WriterTests(SimpleTestCase):\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n \n-    def test_serialize_enums(self):\n+    def test_serialize_translated_enums(self):\n+        from django.utils.translation import gettext_lazy as _\n+\n+        class TranslatedEnum(enum.Enum):\n+            HELLO = _('Hello')\n+            GOODBYE = _('Goodbye')\n+\n+        # Test that the serialized result is using the enum name, not the translated value.\n+        self.assertSerializedResultEqual(\n+            TranslatedEnum.HELLO,\n+            (\"migrations.test_writer.TranslatedEnum['HELLO']\", {'import migrations.test_writer'})\n+        )\n+\n+        field = models.CharField(default=TranslatedEnum.HELLO, choices=[(m.value, m) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('Hello', migrations.test_writer.TranslatedEnum['HELLO']), \"\n+            \"('Goodbye', migrations.test_writer.TranslatedEnum['GOODBYE'])], \"\n+            \"default=migrations.test_writer.TranslatedEnum['HELLO'])\"\n+        )\n         class TextEnum(enum.Enum):\n             A = 'a-value'\n             B = 'value-b'\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..41be45e 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,6 +1,8 @@\n+\n import unittest\n from datetime import datetime\n \n+from unittest import mock\n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -324,9 +326,29 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_year_less_than_70(self):\n-        parsed = parse_http_date('Sun Nov  6 08:49:37 0037')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(2037, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_two_digit_year(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        # Define current UTC dates for the context of parsing timestamps\n+        utcnow_2023 = datetime(2023, 1, 1, 0, 0, 0)\n+        utcnow_1970 = datetime(1970, 1, 1, 0, 0, 0)\n+\n+        tests = [\n+            # Front of the 50-year window from 2023: interpreting '72' as 1972, within 50 years back from 2023\n+            (utcnow_2023, 'Friday, 01-Jan-72 00:00:00 GMT', datetime(1972, 1, 1, 0, 0, 0)),\n+            # Beyond the 50-year window: interpreting '73' as 2073 since 1973 is 50 years back from 2023\n+            (utcnow_2023, 'Monday, 01-Jan-73 00:00:00 GMT', datetime(2073, 1, 1, 0, 0, 0)),\n+            # Checking beginning and end of the 1970 split\n+            (utcnow_1970, 'Thursday, 01-Jan-70 00:00:00 GMT', datetime(1970, 1, 1, 0, 0, 0)),\n+            (utcnow_1970, 'Friday, 01-Jan-71 00:00:00 GMT', datetime(1971, 1, 1, 0, 0, 0)),\n+        ]\n+\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n \n class EscapeLeadingSlashesTests(unittest.TestCase):\n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..53038ca 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3680,7 +3680,33 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertTrue(f.is_valid())\n         self.assertEqual(f.cleaned_data, {'data': 'xyzzy'})\n \n-    def test_empty_data_files_multi_value_dict(self):\n+    def test_field_deep_copy_error_messages(self):\n+        import copy\n+        from django.forms import CharField\n+        \n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        \n+        # Assert that the field copy is a separate instance\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        \n+        # Check that error_messages dictionaries are indeed separate instances\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+        \n+        # Modify the copied field's error messages and ensure it doesn't affect the original\n+        field_copy.error_messages['invalid'] = 'Modified error message.'\n+        self.assertNotEqual(field.error_messages['invalid'], field_copy.error_messages['invalid'])\n+        self.assertEqual(field.error_messages['invalid'], 'Form custom error message.')\n+        \n+        # Modify the original field's error messages and ensure it doesn't affect the copied field\n+        field.error_messages['invalid'] = 'Original error message changed.'\n+        self.assertNotEqual(field_copy.error_messages['invalid'], field.error_messages['invalid'])\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Modified error message.')\n         p = Person()\n         self.assertIsInstance(p.data, MultiValueDict)\n         self.assertIsInstance(p.files, MultiValueDict)\n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..1956ae1 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n@@ -206,6 +208,28 @@ class BulkCreateTests(TestCase):\n         self.assertEqual(NoFields.objects.count(), 2)\n \n     @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_implicit_batch_size_uses_max_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs)\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_zero_batch_size_defaults_to_max_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=0)\n     def test_explicit_batch_size_efficiency(self):\n         objs = [TwoFields(f1=i, f2=i) for i in range(0, 100)]\n         with self.assertNumQueries(2):\n@@ -215,6 +239,28 @@ class BulkCreateTests(TestCase):\n             TwoFields.objects.bulk_create(objs, len(objs))\n \n     @skipUnlessDBFeature('has_bulk_insert')\n+    def test_explicit_batch_size_respects_max_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=max_batch_size + 1)\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_implicit_batch_size_uses_max_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs)\n+\n+    @skipUnlessDBFeature('has_bulk_insert')\n+    def test_zero_batch_size_defaults_to_max_batch_size(self):\n+        objs = [Country() for i in range(1000)]\n+        fields = ['name', 'iso_two_letter', 'description']\n+        max_batch_size = max(connection.ops.bulk_batch_size(fields, objs), 1)\n+        with self.assertNumQueries(ceil(len(objs) / max_batch_size)):\n+            Country.objects.bulk_create(objs, batch_size=0)\n     def test_bulk_insert_expressions(self):\n         Restaurant.objects.bulk_create([\n             Restaurant(name=\"Sam's Shake Shack\"),\n",
  "django__django-11964": "",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..4023906 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -150,7 +150,18 @@ class ChoicesTests(SimpleTestCase):\n \n class GetFieldDisplayTests(SimpleTestCase):\n \n-    def test_choices_and_field_display(self):\n+    def test_overriding_FIELD_display(self):\n+        \"\"\"\n+        Test that get_FIELD_display can be overridden in the model.\n+        \"\"\"\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+            \n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n         \"\"\"\n         get_choices() interacts with get_FIELD_display() to return the expected\n         values.\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..08c84fb 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -15,9 +15,50 @@ from django.utils import timezone\n from .models import (\n     Article, ArticleTranslation, IndexedArticle2, IndexTogetherSingleList,\n )\n+from django.db import connection\n+from django.db.models import Index, ForeignKey, CASCADE\n \n \n class SchemaIndexesTests(TestCase):\n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+        \n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n     \"\"\"\n     Test index handling by the db.backends.schema infrastructure.\n     \"\"\"\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..555aa15 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -6,6 +7,7 @@ from django.db.models.expressions import SimpleCol\n from django.db.models.fields.related_lookups import RelatedIsNull\n from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n+from django.db.models.lookups import Exact\n from django.db.models.sql.query import Query\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n@@ -15,7 +17,13 @@ from .models import Author, Item, ObjectC, Ranking\n \n \n class TestQuery(SimpleTestCase):\n-    def test_simple_query(self):\n+    def test_iterable_lookup_value(self):\n+        # Verify that list inputs remain as lists in the Exact lookup type.\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])\n         query = Query(Author)\n         where = query.build_where(Q(num__gt=2))\n         lookup = where.children[0]\n",
  "django__django-12125": "",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..3c1da5e 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -838,7 +838,31 @@ class ChangeListTests(TestCase):\n         request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 1)\n-        data['form-0-uuid'] = 'INVALD_PRIMARY_KEY'\n+        data['form-0-uuid'] = 'INVALID_PRIMARY_KEY'\n+        # Test with special regex characters in prefix\n+        data_special_chars = {\n+            'form[0]-TOTAL_FORMS': '2',\n+            'form[0]-INITIAL_FORMS': '2',\n+            'form[0]-MIN_NUM_FORMS': '0',\n+            'form[0]-MAX_NUM_FORMS': '1000',\n+            'form[0]-0-uuid': str(a.pk),\n+            'form[0]-0-load': '5',\n+        }\n+        request = self.factory.post(changelist_url, data=data_special_chars)\n+        queryset = m._get_list_editable_queryset(request, prefix='form[0]')\n+        self.assertEqual(queryset.count(), 1)\n+\n+        data_special_chars2 = {\n+            'form.bar-0-TOTAL_FORMS': '2',\n+            'form.bar-0-INITIAL_FORMS': '2',\n+            'form.bar-0-MIN_NUM_FORMS': '0',\n+            'form.bar-0-MAX_NUM_FORMS': '1000',\n+            'form.bar-0-0-uuid': str(a.pk),\n+            'form.bar-0-0-load': '6',\n+        }\n+        request = self.factory.post(changelist_url, data=data_special_chars2)\n+        queryset = m._get_list_editable_queryset(request, prefix='form.bar-0')\n+        self.assertEqual(queryset.count(), 1)\n         # The unfiltered queryset is returned if there's invalid data.\n         request = self.factory.post(changelist_url, data=data)\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..718dfba 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n \n from django.contrib.admindocs.utils import (\n@@ -95,6 +96,31 @@ class TestUtils(AdminDocsSimpleTestCase):\n         output = parse_rst(header, 'header')\n         self.assertIn('<h3>Header</h3>', output)\n \n+    def test_trim_docstring_with_non_empty_first_line(self):\n+        \"\"\"Test docstring trimming with non-empty first line.\"\"\"\n+        docstring = \"\"\"Example function.\n+\n+        This function demonstrates a docstring with a non-empty first line.\n+        \"\"\"\n+        expected_title = \"Example function.\"\n+\n+        title, body, _ = parse_docstring(docstring)\n+        self.assertEqual(title, expected_title)\n+        self.assertTrue(body.startswith(\"This function demonstrates a\"))\n+\n+    def test_parse_docstring_with_non_empty_first_line(self):\n+        \"\"\"Test parse_docstring for docstring with non-empty first line.\"\"\"\n+        docstring = \"\"\"Title.\n+\n+        This is the body of the docstring. It provides more details.\n+        \"\"\"\n+        expected_title = \"Title.\"\n+        expected_body_start = \"This is the body of the docstring.\"\n+\n+        title, body, _ = parse_docstring(docstring)\n+        self.assertEqual(title, expected_title)\n+        self.assertTrue(body.startswith(expected_body_start))\n+\n     def test_parse_rst(self):\n         \"\"\"\n         parse_rst() should use `cmsreference` as the default role.\n",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..7f565c9 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1111,8 +1111,41 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             <input name=\"array_1\" type=\"text\">\n             \"\"\"\n         )\n+    def test_boolean_split_array_widget_initial_data(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('my_array_field', [True, False, True, False], {})\n+        subwidgets = context['widget']['subwidgets']\n+        self.assertEqual(\n+            [{'checked': True}, {}, {'checked': True}, {}],\n+            [subwidget['attrs'] for subwidget in subwidgets]\n+        )\n+\n+    def test_boolean_split_array_widget_all_true(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('my_array_field', [True, True, True], {})\n+        subwidgets = context['widget']['subwidgets']\n+        self.assertEqual(\n+            [{'checked': True}, {'checked': True}, {'checked': True}],\n+            [subwidget['attrs'] for subwidget in subwidgets]\n+        )\n \n-    def test_render_attrs(self):\n+    def test_boolean_split_array_widget_all_false(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('my_array_field', [False, False, False], {})\n+        subwidgets = context['widget']['subwidgets']\n+        self.assertEqual(\n+            [{}, {}, {}],\n+            [subwidget['attrs'] for subwidget in subwidgets]\n+        )\n+\n+    def test_boolean_split_array_widget_mixed_initial(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=5)\n+        context = widget.get_context('my_array_field', [True, False, False, True, False], {})\n+        subwidgets = context['widget']['subwidgets']\n+        self.assertEqual(\n+            [{'checked': True}, {}, {}, {'checked': True}, {}],\n+            [subwidget['attrs'] for subwidget in subwidgets]\n+        )\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2),\n             'array', ['val1', 'val2'], attrs={'id': 'foo'},\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..4888472 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -256,6 +256,10 @@ class SmallPKData(models.Model):\n class UUIDData(models.Model):\n     data = models.UUIDField(primary_key=True)\n \n+import uuid\n+\n+class UUIDDefaultData(models.Model):\n+    data = models.UUIDField(primary_key=True, default=uuid.uuid4)\n \n class FKToUUID(models.Model):\n     data = models.ForeignKey(UUIDData, models.CASCADE)\n",
  "django__django-12262": "",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..40e85cd 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,30 @@\n+\n+from django.forms import FileInput, Form, FileField\n+from django.test import SimpleTestCase\n+\n+class FileInputTest(SimpleTestCase):\n+    def test_fileinput_required_attribute_with_initial_data(self):\n+        \"\"\"\n+        Test that the 'required' attribute is not present on file input\n+        fields with initial data.\n+        \"\"\"\n+        class FileForm(Form):\n+            file1 = FileField(widget=FileInput, required=True)\n+\n+        # No initial data: should have 'required' attribute.\n+        form = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n+\n+        # With initial data: should not have 'required' attribute.\n+        form = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            form.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n import copy\n import datetime\n import json\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..ec95e19 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import decimal\n import ipaddress\n import uuid\n \n from django.db import models\n+from django.template import Context, Template\n from django.test import SimpleTestCase\n from django.utils.functional import Promise\n from django.utils.translation import gettext_lazy as _\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..8b5edef 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -131,6 +131,27 @@ class UtilsTests(SimpleTestCase):\n         )\n \n         mock_admin = MockModelAdmin()\n+\n+    def test_json_field_display(self):\n+        \"\"\"\n+        Test that JSONField renders correctly in admin when marked as readonly.\n+        \"\"\"\n+        tests = [\n+            # Valid JSON cases\n+            ({\"key\": \"value\"}, '{\"key\": \"value\"}'),\n+            ({\"list\": [\"a\", \"b\", \"c\"]}, '{\"list\": [\"a\", \"b\", \"c\"]}'),\n+            ({\"nested\": {\"a\": 1}}, '{\"nested\": {\"a\": 1}}'),\n+            # Single value should be quoted as valid JSON\n+            ('single_string', '\"single_string\"'),\n+            # Edge cases\n+            ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),\n+            # Invalid JSON input case: intended to mirror the issue described\n+            ({(\"a\", \"b\"): \"c\"}, str({(\"a\", \"b\"): \"c\"})),  # Invalid JSON will be converted to a string representation\n+        ]\n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                display_value = display_for_field(value, models.JSONField(), self.empty_value)\n+                self.assertEqual(display_value, expected_display)\n         for name, value in verifications:\n             field, attr, resolved_value = lookup_field(name, article, mock_admin)\n \n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..fea6a2e 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1015,7 +1015,56 @@ class OtherModelTests(SimpleTestCase):\n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n \n-    def test_m2m_table_name_clash(self):\n+    def test_one_to_one_fields_order_dependency(self):\n+        \"\"\"\n+        Test ordering of OneToOneField with parent_link behavior is consistent.\n+        \"\"\"\n+        class Document(models.Model):\n+            pass\n+\n+        class PickingIncorrect(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        # The incorrect way should not raise any errors initially.\n+        with self.assertRaises(ImproperlyConfigured):\n+            PickingIncorrect.check()\n+\n+        class PickingCorrect(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+\n+        # The correct way should pass without errors.\n+        self.assertEqual(PickingCorrect.check(), [])\n+\n+    def test_clashing_onetoone_reverse_relations(self):\n+        \"\"\"\n+        Test multiple OneToOneFields clashing and needing distinct related_names.\n+        \"\"\"\n+        class Parent(models.Model):\n+            pass\n+\n+        class Child(Parent):\n+            one_parent_link = models.OneToOneField(Parent, models.CASCADE, parent_link=True)\n+            another_parent_link = models.OneToOneField(Parent, models.CASCADE, related_name='another_child')\n+\n+        errors = [\n+            Error(\n+                \"Reverse accessor for 'Child.another_parent_link' clashes with reverse accessor for 'Child.one_parent_link'.\",\n+                hint=(\"Add or change a related_name argument to the definition \"\n+                      \"for 'Child.another_parent_link' or 'Child.one_parent_link'.\"),\n+                obj=Child._meta.get_field('another_parent_link'),\n+                id='fields.E304',\n+            ),\n+            Error(\n+                \"Reverse query name for 'Child.another_parent_link' clashes with reverse query name for 'Child.one_parent_link'.\",\n+                hint=(\"Add or change a related_name argument to the definition \"\n+                      \"for 'Child.another_parent_link' or 'Child.one_parent_link'.\"),\n+                obj=Child._meta.get_field('another_parent_link'),\n+                id='fields.E305',\n+            ),\n+        ]\n+        self.assertEqual(Child.check(), errors)\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n \n",
  "django__django-12419": "diff --git a/tests/project_template/test_settings.py b/tests/project_template/test_settings.py\nindex 1edab47..4e68b27 100644\n--- a/tests/project_template/test_settings.py\n+++ b/tests/project_template/test_settings.py\n@@ -35,9 +35,12 @@ class TestStartProjectSettings(SimpleTestCase):\n         ):\n             response = self.client.get('/empty/')\n             headers = sorted(response.serialize_headers().split(b'\\r\\n'))\n+            # Ensuring the Referrer-Policy header is set to 'same-origin' by default\n+            self.assertIn(b'Referrer-Policy: same-origin', headers)\n+            \n             self.assertEqual(headers, [\n                 b'Content-Length: 0',\n                 b'Content-Type: text/html; charset=utf-8',\n                 b'X-Content-Type-Options: nosniff',\n                 b'X-Frame-Options: DENY',\n-            ])\n+            ])\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..712d60b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -19,6 +19,8 @@ from django.db.models.functions import (\n )\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n+from django.utils.functional import SimpleLazyObject\n+from django.contrib.auth.models import User\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n@@ -30,6 +32,44 @@ from .models import (\n \n class BasicExpressionsTests(TestCase):\n     @classmethod\n+    def setUpTestData(cls):\n+        super().setUpTestData()\n+        cls.manager = Manager.objects.create(name=\"Manager\")\n+        cls.max = Employee.objects.create(firstname=\"Max\", lastname=\"Mustermann\", manager=cls.manager)\n+    \n+    def test_subquery_filter_by_lazy(self):\n+        max_manager = SimpleLazyObject(lambda: Manager.objects.get(pk=self.manager.pk))\n+        qs = Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    lastname=OuterRef('ceo__lastname'),\n+                ).values('manager'),\n+            ),\n+        ).filter(ceo_manager=max_manager)\n+        self.assertEqual(qs.get(), self.example_inc)\n+\n+    def test_nonexistent_lazy_object(self):\n+        nonexistent_manager = SimpleLazyObject(lambda: Manager.objects.filter(name=\"Nonexistent\").first())\n+        qs = Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    lastname=OuterRef('ceo__lastname'),\n+                ).values('manager'),\n+            ),\n+        ).filter(ceo_manager=nonexistent_manager)\n+        self.assertFalse(qs.exists())\n+\n+    def test_lazy_object_with_different_value(self):\n+        different_manager = SimpleLazyObject(lambda: Manager.objects.create(name=\"Different Manager\"))\n+        qs = Company.objects.annotate(\n+            ceo_manager=Subquery(\n+                Employee.objects.filter(\n+                    lastname=OuterRef('ceo__lastname'),\n+                ).values('manager'),\n+            ),\n+        ).filter(ceo_manager=different_manager)\n+        self.assertFalse(qs.exists())\n+    @classmethod\n     def setUpTestData(cls):\n         cls.example_inc = Company.objects.create(\n             name=\"Example Inc.\", num_employees=2300, num_chairs=5,\n",
  "django__django-12708": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 2df48a2..dbdaf02 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1759,6 +1759,33 @@ class OperationTests(OperationTestBase):\n         operation = migrations.AlterIndexTogether(\"Pony\", None)\n         self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n \n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_alter_index_together_remove_with_unique_together(self):\n+        app_label = 'test_alintoremove_wunto'\n+        table_name = '%s_pony' % app_label\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+        # Add index together.\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        # Remove index together.\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+    def test_alter_index_together_remove(self):\n+        operation = migrations.AlterIndexTogether(\"Pony\", None)\n+        self.assertEqual(operation.describe(), \"Alter index_together for Pony (0 constraint(s))\")\n+\n     @skipUnlessDBFeature('supports_table_check_constraints')\n     def test_add_constraint(self):\n         project_state = self.set_up_test_model(\"test_addconstraint\")\n",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..c16b46c 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -4,6 +4,9 @@ import re\n from datetime import datetime, timedelta\n from importlib import import_module\n \n+from django.contrib.admin.sites import site\n+from .models import Band\n+\n import pytz\n \n from django import forms\n@@ -14,7 +17,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n@@ -116,8 +119,34 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n     def test_filtered_many_to_many(self):\n         self.assertFormfield(Band, 'members', widgets.FilteredSelectMultiple,\n                              filter_vertical=['members'])\n+    def test_formfield_overrides_m2m_filter_widget(self):\n+        \"\"\"\n+        The autocomplete_fields, raw_id_fields, filter_vertical, and\n+        filter_horizontal widgets for ManyToManyFields may be overridden by\n+        specifying a widget in formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_vertical = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n+\n+    def test_formfield_for_manytomany_with_custom_widget(self):\n+        \"\"\"\n+        Verify that a custom widget override works for ManyToManyField using formfield_for_manytomany.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            def formfield_for_manytomany(self, db_field, request, **kwargs):\n+                if db_field.name == 'members':\n+                    kwargs['widget'] = forms.CheckboxSelectMultiple\n+                return super().formfield_for_manytomany(db_field, request, **kwargs)\n \n-    def test_formfield_overrides(self):\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n         self.assertFormfield(Event, 'start_date', forms.TextInput,\n                              formfield_overrides={DateField: {'widget': forms.TextInput}})\n \n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..1ced0a2 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -5,7 +5,7 @@ from operator import attrgetter\n \n from django.core.exceptions import FieldError\n from django.db import connection\n-from django.db.models import Exists, Max, OuterRef\n+from django.db.models import Exists, Max, OuterRef, Q\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -194,6 +194,37 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n+    def test_in_bulk_meta_unique_constraint(self):\n+        # Create some Season instances with unique constraints for the year.\n+        season_2011 = Season.objects.create(year=2011)\n+        season_2012 = Season.objects.create(year=2012)\n+        Season.objects.create(year=2013)\n+        \n+        # Check if in_bulk can be done on a field with a UniqueConstraint.\n+        self.assertEqual(\n+            Season.objects.in_bulk(\n+                [season_2011.year, season_2012.year],\n+                field_name='year',\n+            ),\n+            {season_2011.year: season_2011, season_2012.year: season_2012},\n+        )\n+    \n+    @isolate_apps('lookup')\n+    def test_in_bulk_partial_unique_constraint(self):\n+        class ModelWithPartialUnique(models.Model):\n+            ean = models.CharField(max_length=100)\n+            is_active = models.BooleanField(default=False)\n+            \n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['ean'], name='partial_ean_unique', condition=Q(is_active=True)),\n+                ]\n+        \n+        # This should raise an error since the uniqueness is conditional\n+        msg = \"in_bulk()'s field_name must be a unique field but 'ean' isn't.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            ModelWithPartialUnique.objects.in_bulk(field_name='ean')\n+\n     def test_values(self):\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..44392d1 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -905,6 +905,24 @@ class OtherModelTests(SimpleTestCase):\n \n         self.assertEqual(Child.check(), [])\n \n+    def test_ordering_across_fk_chain_with_nullable_fk(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=100, null=True)\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey(Parent, models.SET_NULL, null=True)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        self.assertEqual(Stock.check(), [])\n+\n     def test_ordering_pointing_to_foreignkey_field(self):\n         class Parent(models.Model):\n             pass\n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..1953693 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1820,11 +1820,33 @@ class CombinableTests(SimpleTestCase):\n     def test_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n-\n-    def test_reversed_and(self):\n+    class ExpressionWrapperTests(SimpleTestCase):\n+        def test_empty_group_by(self):\n+            expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+        def test_non_empty_group_by(self):\n+            expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+        # Additional test cases to more thoroughly test the fix:\n+        def test_constant_group_by_not_required(self):\n+            # Test that a different constant expression does not end up in the GROUP BY\n+            expr = ExpressionWrapper(Value(10), output_field=IntegerField())\n+            self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+        \n+        def test_nested_expression_with_constant(self):\n+            # Test nested expressions where constants should still not appear in GROUP BY\n+            expr_nested = ExpressionWrapper(ExpressionWrapper(Value(5), output_field=IntegerField()), output_field=IntegerField())\n+            self.assertEqual(expr_nested.get_group_by_cols(alias=None), [])\n+\n+        def test_non_constant_expression(self):\n+            # Ensure non-constant expressions still generate the correct group by clauses\n+            expr_complex = ExpressionWrapper(Lower(Value('complex')), output_field=IntegerField())\n+            self.assertEqual(expr_complex.get_group_by_cols(alias=None), [expr_complex.expression])\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..88a528f 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1211,6 +1211,33 @@ class Queries1Tests(TestCase):\n         )\n \n \n+from django.db.utils import NotSupportedError\n+\n+class FilterableFieldTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.metadata_type = ProductMetaDataType.objects.create(label='brand', filterable=False)\n+        cls.product_metadata = ProductMetaData.objects.create(\n+            id=1,\n+            product=Produit.objects.create(...),\n+            value='Dark Vador',\n+            marketplace=Plateforme.objects.create(...),\n+            metadata_type=cls.metadata_type\n+        )\n+\n+    def test_filter_with_non_filterable_field(self):\n+        # This test simulates the bug where filtering on a non-filterable field raises NotSupportedError\n+        with self.assertRaises(NotSupportedError):\n+            ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=self.metadata_type)\n+\n+    def test_filter_with_renamed_field(self):\n+        # Assuming renaming the field resolves the issue\n+        self.metadata_type.label = 'filterable_test'\n+        self.metadata_type.save()\n+\n+        qs = ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=self.metadata_type)\n+        self.assertTrue(qs.exists())\n+\n class Queries2Tests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..0a9f756 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,41 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_foreign_key(self):\n+        # Setup test data\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        \n+        article_1 = Article.objects.create(author=author_1, headline=\"Article 1\", pub_date='2023-01-01')\n+        article_2 = Article.objects.create(author=author_2, headline=\"Article 2\", pub_date='2023-02-01')\n+        \n+        # Foreign key to self\n+        author_1.editor = author_2\n+        author_1.save()\n+        author_2.editor = author_1\n+        author_2.save()\n+        \n+        # Testing the order by self-referential FK\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+        \n+        # Test ordering by self-referential FK ID\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+        \n+        # Test ordering by inverse FK order\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n@@ -353,6 +388,41 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+\n+    def test_order_by_self_referential_foreign_key(self):\n+        # Setup test data\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        \n+        article_1 = Article.objects.create(author=author_1, headline=\"Article 1\", pub_date='2023-01-01')\n+        article_2 = Article.objects.create(author=author_2, headline=\"Article 2\", pub_date='2023-02-01')\n+        \n+        # Foreign key to self\n+        author_1.editor = author_2\n+        author_1.save()\n+        author_2.editor = author_1\n+        author_2.save()\n+        \n+        # Testing the order by self-referential FK\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n+        \n+        # Test ordering by self-referential FK ID\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            ['Article 1', 'Article 2'],\n+            attrgetter('headline')\n+        )\n+        \n+        # Test ordering by inverse FK order\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            ['Article 2', 'Article 1'],\n+            attrgetter('headline')\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline').asc()), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..7de3aaf 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -621,7 +621,24 @@ class BaseCacheTests:\n     def test_zero_cull(self):\n         self._perform_cull_test('zero_cull', 50, 19)\n \n-    def _perform_invalid_key_test(self, key, expected_warning):\n+    def test_cull_delete_when_no_data_returned(self):\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        old_max_entries = cull_cache._max_entries\n+        \n+        # Force _cull to be called and simulate no data being returned by the cursor\n+        cull_cache._max_entries = -1\n+        with connections[cull_cache._db].cursor() as cursor:\n+            cursor.execute(\"DELETE FROM %s\" % cull_cache._table)\n+            cull_cache.set('force_cull_delete', 'value', 1000)\n+            cursor.execute(\"SELECT cache_key FROM %s WHERE cache_key = 'force_cull_delete'\" % cull_cache._table)\n+            result = cursor.fetchone()\n+            self.assertIsNone(result, \"Expected no results from an empty cache table during cull process\")\n+        \n+        # This ensures there are no exceptions (e.g., TypeError) when no data is returned\n+        cull_cache._max_entries = old_max_entries\n         \"\"\"\n         All the builtin backends should warn (except memcached that should\n         error) on keys that would be refused by memcached. This encourages\n",
  "django__django-13109": "diff --git a/tests/model_forms/models.py b/tests/model_forms/models.py\nindex ff8ad74..79a3a2a 100644\n--- a/tests/model_forms/models.py\n+++ b/tests/model_forms/models.py\n@@ -28,8 +28,22 @@ class Category(models.Model):\n         return self.__str__()\n \n \n+class WriterManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().filter(archived=False)\n+\n class Writer(models.Model):\n     name = models.CharField(max_length=50, help_text='Use both first and last names.')\n+    archived = models.BooleanField(default=False, editable=False)\n+    objects = WriterManager()\n+    _base_manager = models.Manager()\n+    class Meta:\n+        ordering = ('name',)\n+\n+class Article(models.Model):\n+    title = models.CharField(max_length=100)\n+    writer = models.ForeignKey(Writer, on_delete=models.CASCADE)\n+    name = models.CharField(max_length=50, help_text='Use both first and last names.')\n \n     class Meta:\n         ordering = ('name',)\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..d2d25e7 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -874,6 +874,28 @@ class StateTests(SimpleTestCase):\n         \"\"\"\n         new_apps = Apps()\n \n+    def test_mixed_case_foreign_key(self):\n+        new_apps = Apps()\n+\n+        class Category(models.Model):\n+            class Meta:\n+                app_label = 'MiXed_Case_Test'\n+                apps = new_apps\n+\n+        class Content(models.Model):\n+            category = models.ForeignKey(Category, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'MiXed_Case_Test'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Category))\n+        project_state.add_model(ModelState.from_model(Content))\n+\n+        # Check that models can be correctly retrieved and don't raise errors\n+        self.assertEqual(len(project_state.apps.get_models()), 2)\n+\n         class TestModel(models.Model):\n             ct = models.ForeignKey(\"contenttypes.ContentType\", models.CASCADE)\n \n",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..a70a55c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1491,6 +1491,14 @@ class FTimeDeltaTests(TestCase):\n                 self.assertEqual(obj.duration, obj.estimated_time + delta)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expressionwrapper(self):\n+        # New test to ensure the issue is fixed without needing ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for e in queryset:\n+            expected_delta = e.end - e.start\n+            self.assertEqual(e.delta, expected_delta)\n     def test_date_subtraction(self):\n         queryset = Experiment.objects.annotate(\n             completion_duration=ExpressionWrapper(\n@@ -1520,6 +1528,14 @@ class FTimeDeltaTests(TestCase):\n         self.assertIsNone(queryset.first().shifted)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expressionwrapper(self):\n+        # New test to ensure the issue is fixed without needing ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for e in queryset:\n+            expected_delta = e.end - e.start\n+            self.assertEqual(e.delta, expected_delta)\n     def test_date_subquery_subtraction(self):\n         subquery = Experiment.objects.filter(pk=OuterRef('pk')).values('completed')\n         queryset = Experiment.objects.annotate(\n@@ -1530,6 +1546,14 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expressionwrapper(self):\n+        # New test to ensure the issue is fixed without needing ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for e in queryset:\n+            expected_delta = e.end - e.start\n+            self.assertEqual(e.delta, expected_delta)\n     def test_date_case_subtraction(self):\n         queryset = Experiment.objects.annotate(\n             date_case=Case(\n@@ -1547,6 +1571,14 @@ class FTimeDeltaTests(TestCase):\n         self.assertEqual(queryset.get(), self.e0)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expressionwrapper(self):\n+        # New test to ensure the issue is fixed without needing ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for e in queryset:\n+            expected_delta = e.end - e.start\n+            self.assertEqual(e.delta, expected_delta)\n     def test_time_subtraction(self):\n         Time.objects.create(time=datetime.time(12, 30, 15, 2345))\n         queryset = Time.objects.annotate(\n@@ -1573,6 +1605,14 @@ class FTimeDeltaTests(TestCase):\n         self.assertIsNone(queryset.first().shifted)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expressionwrapper(self):\n+        # New test to ensure the issue is fixed without needing ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for e in queryset:\n+            expected_delta = e.end - e.start\n+            self.assertEqual(e.delta, expected_delta)\n     def test_time_subquery_subtraction(self):\n         Time.objects.create(time=datetime.time(12, 30, 15, 2345))\n         subquery = Time.objects.filter(pk=OuterRef('pk')).values('time')\n@@ -1584,6 +1624,14 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expressionwrapper(self):\n+        # New test to ensure the issue is fixed without needing ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for e in queryset:\n+            expected_delta = e.end - e.start\n+            self.assertEqual(e.delta, expected_delta)\n     def test_datetime_subtraction(self):\n         under_estimate = [\n             e.name for e in Experiment.objects.filter(estimated_time__gt=F('end') - F('start'))\n@@ -1608,6 +1656,14 @@ class FTimeDeltaTests(TestCase):\n         self.assertIsNone(queryset.first().shifted)\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expressionwrapper(self):\n+        # New test to ensure the issue is fixed without needing ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for e in queryset:\n+            expected_delta = e.end - e.start\n+            self.assertEqual(e.delta, expected_delta)\n     def test_datetime_subquery_subtraction(self):\n         subquery = Experiment.objects.filter(pk=OuterRef('pk')).values('start')\n         queryset = Experiment.objects.annotate(\n@@ -1618,6 +1674,14 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n+    def test_temporal_subtraction_without_expressionwrapper(self):\n+        # New test to ensure the issue is fixed without needing ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for e in queryset:\n+            expected_delta = e.end - e.start\n+            self.assertEqual(e.delta, expected_delta)\n     def test_datetime_subtraction_microseconds(self):\n         delta = datetime.timedelta(microseconds=8999999999999999)\n         Experiment.objects.update(end=F('start') + delta)\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..538ba64 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -45,6 +45,14 @@ class QuerySetSetOperationTests(TestCase):\n         qs2 = Number.objects.filter(num__lte=4)\n         self.assertNumbersEqual(qs1.difference(qs2), [5], ordered=False)\n \n+    def test_none_combined_with_union(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs_union = qs1.union(qs2)\n+        \n+        # When we apply none() to a union queryset, it should return no results.\n+        self.assertQuerysetEqual(qs_union.none(), [])\n+\n     def test_union_distinct(self):\n         qs1 = Number.objects.all()\n         qs2 = Number.objects.all()\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..d3097fa 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -33,6 +33,7 @@ from django.http import HttpResponse\n from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n+import base64\n from django.utils import timezone\n \n from .models import SessionStore as CustomDatabaseSession\n@@ -312,6 +313,13 @@ class SessionTestsMixin:\n         self.assertEqual(self.session.decode(encoded), data)\n \n     @override_settings(SECRET_KEY='django_tests_secret_key')\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        # This test checks that sessions encoded with legacy 'sha1' hashing can still be decoded properly.\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'key1': 'value1', 'key2': 'value2'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n     def test_decode_legacy(self):\n         # RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.\n         legacy_encoded = (\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..b4e173c 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -8,6 +8,7 @@ from django.test import (\n from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.shortcuts import get_object_or_404\n from django.views.generic import RedirectView, TemplateView, View\n \n from . import views\n@@ -590,7 +591,24 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n-    def test_template_params_warning(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_template_params_filtering_simplelazy(self):\n+        \"\"\"\n+        Test to ensure SimpleLazyObject in kwargs of get_context_data\n+        gets resolved correctly when used.\n+        \"\"\"\n+        class OfferView(TemplateView):\n+            template_name = \"offers/offer.html\"\n+\n+            def get_context_data(self, *, offer_slug, **kwargs):\n+                context = super().get_context_data(**kwargs)\n+                # Ensure SimpleLazyObject is resolved correctly to a usable string\n+                offer = get_object_or_404(Artist, name=str(offer_slug))\n+                return {**context, 'offer': offer}\n+\n+        artist = Artist.objects.create(name='Vincent van Gogh')\n+        response = OfferView.as_view()(self.client.get('/'), offer_slug=artist.name)\n+        self.assertEqual(response.context_data['offer'], artist)\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n         msg = (\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..4e93fe8 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,7 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2819,15 +2820,66 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n-    def test_callable_called_each_time_form_is_instantiated(self):\n-        field = StumpJokeForm.base_fields['most_recently_fooled']\n-        with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n-            StumpJokeForm()\n-            self.assertEqual(today_callable_dict.call_count, 1)\n-            StumpJokeForm()\n-            self.assertEqual(today_callable_dict.call_count, 2)\n-            StumpJokeForm()\n-            self.assertEqual(today_callable_dict.call_count, 3)\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-06')\n+        marley = Character.objects.create(username='Marley', last_action='2023-10-06')\n+\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n \n \n class FormFieldCallbackTests(SimpleTestCase):\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..6c91852 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -906,7 +906,16 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         obj = FileField(storage=GetStorage)\n         self.assertIsInstance(obj.storage, BaseStorage)\n \n-    def test_callable_storage_file_field_in_model(self):\n+    def test_callable_storage_file_field_deconstruction(self):\n+        \"\"\"\n+        Test that deconstruction of a FileField with callable storage\n+        returns the callable, not the evaluated storage.\n+        \"\"\"\n+        obj = Storage()\n+        # Get the deconstructed kwargs of the FileField with callable storage\n+        _, _, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        # Assert that the storage is the original callable_storage\n+        self.assertIs(kwargs['storage'], callable_storage)\n         obj = Storage()\n         self.assertEqual(obj.storage_callable.storage, temp_storage)\n         self.assertEqual(obj.storage_callable.storage.location, temp_storage_location)\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..283b056 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -635,6 +635,28 @@ class TestQuerying(TestCase):\n     def test_key_icontains(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__icontains='Ar').exists(), True)\n \n+    def test_key_in(self):\n+        tests = [\n+            ('value__c__in', [14], self.objs[3:5]),\n+            ('value__c__in', [14, 15], self.objs[3:5]),\n+            ('value__0__in', [1], [self.objs[5]]),\n+            ('value__0__in', [1, 3], [self.objs[5]]),\n+            ('value__foo__in', ['bar'], [self.objs[7]]),\n+            ('value__foo__in', ['bar', 'baz'], [self.objs[7]]),\n+            ('value__bar__in', [['foo', 'bar']], [self.objs[7]]),\n+            ('value__bar__in', [['foo', 'bar'], ['a']], [self.objs[7]]),\n+            ('value__bax__in', [{'foo': 'bar'}, {'a': 'b'}], [self.objs[7]]),\n+            # Additional test cases\n+            ('value__key__in', [0], []),  # Expecting empty due to issue in the description\n+            ('value__key', 0, self.objs[:312]),  # Expected behavior when not using `__in`\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n+\n     def test_key_startswith(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__startswith='b').exists(), True)\n \n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..7aadf5a 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -17,7 +17,10 @@ from django.db.models.functions import (\n from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n+import pytz\n+from datetime import datetime\n from django.utils import timezone\n+from .models import DTModel\n \n from ..models import Author, DTModel, Fan\n \n@@ -1133,7 +1136,37 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_truncdate_with_tzinfo(self):\n+        melb = pytz.timezone('Australia/Melbourne')\n+        new_york = pytz.timezone('America/New_York')\n+        start_datetime = datetime(2022, 3, 31, 15, 0)\n+        start_datetime_aware = timezone.make_aware(start_datetime, timezone.utc)\n+\n+        self.create_model(start_datetime_aware, start_datetime_aware)\n+\n+        model = DTModel.objects.annotate(\n+            melb_date=TruncDate('start_datetime', tzinfo=melb),\n+            new_york_date=TruncDate('start_datetime', tzinfo=new_york),\n+        ).order_by('start_datetime').get()\n+\n+        self.assertEqual(model.melb_date, start_datetime_aware.astimezone(melb).date())\n+        self.assertEqual(model.new_york_date, start_datetime_aware.astimezone(new_york).date())\n+\n+    def test_trunctime_with_tzinfo(self):\n+        melb = pytz.timezone('Australia/Melbourne')\n+        new_york = pytz.timezone('America/New_York')\n+        start_datetime = datetime(2022, 3, 31, 15, 0)\n+        start_datetime_aware = timezone.make_aware(start_datetime, timezone.utc)\n+\n+        self.create_model(start_datetime_aware, start_datetime_aware)\n+\n+        model = DTModel.objects.annotate(\n+            melb_time=TruncTime('start_datetime', tzinfo=melb),\n+            new_york_time=TruncTime('start_datetime', tzinfo=new_york),\n+        ).order_by('start_datetime').get()\n+\n+        self.assertEqual(model.melb_time, start_datetime_aware.astimezone(melb).time())\n+        self.assertEqual(model.new_york_time, start_datetime_aware.astimezone(new_york).time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..8708b1d 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -103,7 +103,43 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n \n-class ChoicesTests(SimpleTestCase):\n+class AbstractFieldComparisonsTests(SimpleTestCase):\n+\n+    def test_abstract_inherited_fields_equality_and_ordering(self):\n+        \"\"\"Field instances from different models via abstract base classes should not be equal.\"\"\"\n+\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        # Fields should not be equal as they belong to different models\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        # Ensure the abstract model field is not equal to its inherited fields\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+\n+        # Ensure the comparison ordering is maintained and logical\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        # Ensure the hashes are different as well\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n \n     @classmethod\n     def setUpClass(cls):\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..41d8b9f 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -8,7 +9,8 @@ from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks\n+from pathlib import Path\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n@@ -169,7 +171,42 @@ class FileTests(unittest.TestCase):\n             test_file.seek(0)\n             self.assertEqual(test_file.read(), (content * 2).encode())\n \n-\n+class FileLockTestCase(unittest.TestCase):\n+    def setUp(self):\n+        # Create a temporary file for lock testing\n+        self.test_file_path = Path(tempfile.gettempdir()) / 'temp_lock_test_file.txt'\n+        with open(self.test_file_path, 'w') as f:\n+            f.write('lock test content')\n+\n+    def test_successful_exclusive_lock(self):\n+        with open(self.test_file_path, 'rb+') as f:\n+            self.assertIs(locks.lock(f, locks.LOCK_EX), True)\n+            self.assertIs(locks.unlock(f), True)\n+\n+    def test_failed_nonblocking_exclusive_lock(self):\n+        with open(self.test_file_path, 'rb+') as f1, open(self.test_file_path, 'rb+') as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_successful_shared_lock(self):\n+        with open(self.test_file_path, 'rb+') as f:\n+            self.assertIs(locks.lock(f, locks.LOCK_SH), True)\n+            self.assertIs(locks.unlock(f), True)\n+\n+    def test_successful_concurrent_shared_locks(self):\n+        with open(self.test_file_path, 'rb+') as f1, open(self.test_file_path, 'rb+') as f2:\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), True)\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def tearDown(self):\n+        # Clean up the temporary file\n+        try:\n+            os.remove(self.test_file_path)\n+        except Exception as e:\n+            pass\n class NoNameFileTestCase(unittest.TestCase):\n     \"\"\"\n     Other examples of unnamed files may be tempfile.SpooledTemporaryFile or\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..6072f66 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2084,8 +2084,21 @@ class QuerysetOrderedTests(unittest.TestCase):\n         self.assertIs(qs.ordered, False)\n         self.assertIs(qs.order_by('num_notes').ordered, True)\n \n+    def test_annotated_default_ordering_with_group_by(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False, \"Annotated queryset without explicit ordering should not be marked ordered\")\n+        self.assertIs(qs.order_by('name').ordered, True, \"Annotated queryset with explicit ordering should be marked ordered\")\n \n-@skipUnlessDBFeature('allow_sliced_subqueries_with_in')\n+    def test_annotated_values_default_ordering_with_group_by(self):\n+        qs = Annotation.objects.values('id').annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False, \"Values queryset with annotations should not be marked ordered unless explicitly ordered\")\n+        self.assertIs(qs.order_by('id').ordered, True, \"Values queryset with explicit ordering should be marked ordered\")\n+\n+    def test_annotated_ordering_respects_meta_ordering(self):\n+        # Assumes Meta.ordering is set on the Annotation model\n+        qs = Annotation.objects.annotate(num_notes=Count('notes'))\n+        self.assertIs(qs.ordered, False, \"Annotation model queryset with default ordering and annotations should not be marked ordered without explicit order_by\")\n+        self.assertIs(qs.order_by('notes').ordered, True, \"Explicit order_by should result in queryset being marked as ordered\")\n class SubqueryTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..5c37824 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -342,6 +342,41 @@ class CommandTests(SimpleTestCase):\n         self.assertEqual(parser.epilog, epilog)\n \n \n+import sys\n+from django.core.management import call_command\n+from django.test import TestCase\n+from unittest import mock\n+from io import StringIO\n+\n+class OutputWrapperFlushTests(TestCase):\n+    def test_stdout_flush(self):\n+        \"\"\"Test that the flush method is called on stdout.\"\"\"\n+        out = StringIO()\n+        with mock.patch.object(out, 'flush') as mocked_flush:\n+            call_command('outputwrapper', stdout=out)\n+            self.assertIn('Working...', out.getvalue())\n+            self.assertTrue(mocked_flush.called, \"Flush should have been called on stdout\")\n+\n+    def test_stderr_flush(self):\n+        \"\"\"Test that the flush method is called on stderr.\"\"\"\n+        err = StringIO()\n+        with mock.patch.object(err, 'flush') as mocked_flush:\n+            call_command('outputwrapper', stderr=err)\n+            self.assertIn('OK', err.getvalue())\n+            self.assertTrue(mocked_flush.called, \"Flush should have been called on stderr\")\n+\n+    def test_migration_output_is_flushed(self):\n+        \"\"\"Test that migration output is properly flushed.\"\"\"\n+        sys.stdout = StringIO()\n+        sys.stderr = StringIO()\n+        with mock.patch('django.db.migrations.executor.Executor.progress_callback') as mock_progress_callback:\n+            call_command('migrate', 'myapp', interactive=False)\n+            sys.stdout.seek(0)\n+            self.assertIn(\"Applying myapp.0002_auto_20200817_1030...\", sys.stdout.read())\n+            self.assertTrue(mock_progress_callback.called, \"Progress callback should be called indicating flush functionality.\")\n+        sys.stdout = sys.__stdout__\n+        sys.stderr = sys.__stderr__\n+\n class CommandRunTests(AdminScriptTestCase):\n     \"\"\"\n     Tests that need to run by simulating the command line, not by call_command.\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..e890396 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,12 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .with_custom_email_field import CustomEmailField\n+from django.contrib.auth.models import User\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +40,49 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_different_email_custom_user(self):\n+        \"\"\"\n+        Updating the email of a custom user invalidates their password reset token.\n+        \"\"\"\n+        user = CustomEmailField.objects.create_user(\n+            username='customuser',\n+            email='customuser@example.com',\n+            password='testpassword',\n+        )\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+\n+        # Check that the token is valid before the email update\n+        self.assertTrue(p0.check_token(user, tk1))\n+\n+        # Change the user's email\n+        user.email_address = 'newcustomemail@example.com'\n+        user.save()\n+\n+        # Check that the token is invalid after the email update\n+        self.assertFalse(p0.check_token(user, tk1))\n+\n+    def test_token_with_different_email_standard_user(self):\n+        \"\"\"\n+        Updating the email of a standard user invalidates their password reset token.\n+        \"\"\"\n+        user = User.objects.create_user(\n+            username='standarduser',\n+            email='standarduser@example.com',\n+            password='testpassword',\n+        )\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+\n+        # Check that the token is valid before the email update\n+        self.assertTrue(p0.check_token(user, tk1))\n+\n+        # Change the user's email\n+        user.email = 'newstandardemail@example.com'\n+        user.save()\n+\n+        # Check that the token is invalid after the email update\n+        self.assertFalse(p0.check_token(user, tk1))\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..840d8f7 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1314,4 +1314,49 @@ class AggregateTestCase(TestCase):\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+\n+    def test_aggregation_random_ordering(self):\n+        \"\"\"Random() is not included in the GROUP BY when used for ordering.\"\"\"\n+        authors = Author.objects.annotate(contact_count=Count('book')).order_by('?')\n+        self.assertQuerysetEqual(authors, [\n+            ('Adrian Holovaty', 1),\n+            ('Jacob Kaplan-Moss', 1),\n+            ('Brad Dayley', 1),\n+            ('James Bennett', 1),\n+            ('Jeffrey Forcier', 1),\n+            ('Paul Bissex', 1),\n+            ('Wesley J. Chun', 1),\n+            ('Stuart Russell', 1),\n+            ('Peter Norvig', 2),\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n+\n+    def test_aggregation_with_explicit_invalid_group_by_ordering(self):\n+        \"\"\"Order_by on non-aggregated field along with Random() shouldn't break aggregation.\"\"\"\n+        authors = Author.objects.annotate(contact_count=Count('book')).order_by('name', '?')\n+        self.assertQuerysetEqual(authors, [\n+            ('Adrian Holovaty', 1),\n+            ('Jacob Kaplan-Moss', 1),\n+            ('Brad Dayley', 1),\n+            ('James Bennett', 1),\n+            ('Jeffrey Forcier', 1),\n+            ('Paul Bissex', 1),\n+            ('Wesley J. Chun', 1),\n+            ('Stuart Russell', 1),\n+            ('Peter Norvig', 2),\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n+\n+    def test_aggregation_without_random_ordering(self):\n+        \"\"\"Ordering without Random() should maintain the aggregation.\"\"\"\n+        authors = Author.objects.annotate(contact_count=Count('book')).order_by('contact_count')\n+        self.assertQuerysetEqual(authors, [\n+            ('Adrian Holovaty', 1),\n+            ('Jacob Kaplan-Moss', 1),\n+            ('Brad Dayley', 1),\n+            ('James Bennett', 1),\n+            ('Jeffrey Forcier', 1),\n+            ('Paul Bissex', 1),\n+            ('Wesley J. Chun', 1),\n+            ('Stuart Russell', 1),\n+            ('Peter Norvig', 2),\n+        ], lambda a: (a.name, a.contact_count))\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..68b7306 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import pickle\n import unittest\n import uuid\n from copy import deepcopy\n from decimal import Decimal\n+from collections import namedtuple\n from unittest import mock\n \n from django.core.exceptions import FieldError\n@@ -815,7 +817,28 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_with_namedtuple_different_name(self):\n+        # Test to ensure namedtuple with different field names works without errors\n+        CustomRange = namedtuple('CustomRange', ['start', 'end'])\n+        qs = Company.objects.filter(\n+            num_employees__range=CustomRange(start=51, end=100),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n+\n+    def test_range_lookup_namedtuple_extended(self):\n+        # Test to ensure extended namedtuple works, keeping only the needed fields\n+        ExtendedEmployeeRange = namedtuple('ExtendedEmployeeRange', ['minimum', 'maximum', 'extra'])\n+        qs = Company.objects.filter(\n+            num_employees__range=ExtendedEmployeeRange(minimum=51, maximum=100, extra=999),\n+        )\n+        self.assertSequenceEqual(qs, [self.c5])\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..b50e540 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -12,6 +12,7 @@ import sys\n import tempfile\n import unittest\n from io import StringIO\n+from django.test.utils import captured_stderr, captured_stdout\n from unittest import mock\n \n from django import conf, get_version\n@@ -37,6 +38,42 @@ custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates\n SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n \n+class ExecuteFromCommandLineTest(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_with_main_script(self):\n+        \"\"\"\n+        Test that __main__.py is handled correctly.\n+        \"\"\"\n+        args = ['help', 'runserver']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['python', '-m', 'django'] + args)\n+        self.assertIn('usage: python -m django runserver', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_prog_name_non_default(self):\n+        \"\"\"\n+        Ensure a non-default prog_name is correctly assigned.\n+        \"\"\"\n+        args = ['help', 'migrate']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            custom_prog_name = 'custom-django'\n+            with mock.patch('sys.argv', ['wrong-program-name'] + args):\n+                execute_from_command_line([custom_prog_name] + args)\n+        self.assertIn('usage: custom-django migrate', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n class AdminScriptTestCase(SimpleTestCase):\n     def setUp(self):\n         tmpdir = tempfile.TemporaryDirectory()\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..95e849a 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -19,7 +20,23 @@ class DateFormatTests(SimpleTestCase):\n     def tearDown(self):\n         translation.activate(self._orig_lang)\n \n-    def test_date(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (1000, '00'),  # Boundary test for 1000 to ensure it correctly comes back to '00'\n+            (123, '23'),\n+            (9, '09'),     # Single-digit test case\n+            (10, '10'),    # Just above single-digit\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         d = date(2009, 5, 16)\n         self.assertEqual(date.fromtimestamp(int(format(d, 'U'))), d)\n \n@@ -164,4 +181,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..340a421 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1024,6 +1024,9 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n \n+    def test_readonly_password_hash_field_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n \n class AdminPasswordChangeFormTest(TestDataMixin, TestCase):\n \n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..f37a416 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,6 +119,44 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n+    def test_create_model_and_reset_model_options(self):\n+        \"\"\"\n+        Test that a CreateModel with an AlterModelOptions clearing options results in a clean CreateModel.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model', 'ordering': ['id']},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [migrations.CreateModel('MyModel', fields=[])],\n+        )\n+\n+    def test_complex_model_option_modification(self):\n+        \"\"\"\n+        Test that a CreateModel with multiple AlterModelOptions retains only specified options.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'ordering': ['id'], 'permissions': [('can_hop', 'Can hop')]},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={'permissions': [('can_hop', 'Can hop')]}),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'permissions': [('can_hop', 'Can hop')]},\n+                )\n+            ],\n+        )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n@@ -134,6 +172,44 @@ class OptimizerTests(SimpleTestCase):\n             [],\n         )\n \n+    def test_create_model_and_reset_model_options(self):\n+        \"\"\"\n+        Test that a CreateModel with an AlterModelOptions clearing options results in a clean CreateModel.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'verbose_name': 'My Model', 'ordering': ['id']},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={}),\n+            ],\n+            [migrations.CreateModel('MyModel', fields=[])],\n+        )\n+\n+    def test_complex_model_option_modification(self):\n+        \"\"\"\n+        Test that a CreateModel with multiple AlterModelOptions retains only specified options.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'ordering': ['id'], 'permissions': [('can_hop', 'Can hop')]},\n+                ),\n+                migrations.AlterModelOptions('MyModel', options={'permissions': [('can_hop', 'Can hop')]}),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'MyModel',\n+                    fields=[],\n+                    options={'permissions': [('can_hop', 'Can hop')]},\n+                )\n+            ],\n+        )\n+\n     def test_create_alter_unique_delete_model(self):\n         self._test_create_alter_foo_delete_model(migrations.AlterUniqueTogether(\"Foo\", [[\"a\", \"b\"]]))\n \n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..ef8074b 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,9 +1,12 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n from ..utils import setup\n+from django.utils.functional import lazy\n+from django.utils.translation import gettext_lazy\n \n \n class AddTests(SimpleTestCase):\n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..bf9b3e5 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -18,9 +18,11 @@ from django.test import (\n     skipUnlessDBFeature,\n )\n \n+from django.db import connection, IntegrityError\n+from django.db import transaction\n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n-    ReporterProxy, SchoolClass, Square,\n+    ReporterProxy, SchoolClass, Square, SQLKeywordsModel,\n     VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n )\n \n@@ -626,7 +628,25 @@ class FkConstraintsTests(TransactionTestCase):\n             transaction.set_rollback(True)\n \n \n-class ThreadTests(TransactionTestCase):\n+class SQLKeywordsTests(TransactionTestCase):\n+    available_apps = ['backends']\n+\n+    def test_check_constraints_sql_keywords(self):\n+        \"\"\"\n+        Verifies that loaddata properly quotes table names that are SQL keywords.\n+        \"\"\"\n+        # Assuming Reporter instance `self.r` is available for association\n+        reporter_instance = Reporter.objects.create(full_name=\"Test Reporter\")\n+        with transaction.atomic():\n+            obj = SQLKeywordsModel.objects.create(reporter=reporter_instance)\n+            obj.refresh_from_db()\n+            obj.reporter_id = 30\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n+                with self.assertRaises(IntegrityError):\n+                    # This is where we expect an IntegrityError if constraints aren't properly handled\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n \n     available_apps = ['backends']\n \n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..64aee3a 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1304,7 +1304,51 @@ class ManageRunserver(SimpleTestCase):\n         with mock.patch('django.core.management.base.connections', new=tested_connections):\n             self.cmd.check_migrations()\n \n-    def test_readonly_database(self):\n+import os\n+from unittest import mock\n+from io import StringIO\n+from django.core.management import call_command\n+from django.test import TestCase\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from django.utils.module_loading import import_module\n+from django.utils.autoreload import autoreload\n+import sys\n+\n+...\n+\n+class TestRunserverCommand(TestCase):\n+\n+    def setUp(self):\n+        self.output = StringIO()\n+\n+    @mock.patch('django.core.management.commands.runserver.Command.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check_migrations')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_skip_checks(self, mocked_check, *mocked_objects):\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=True,\n+            stdout=self.output,\n+        )\n+        self.assertNotIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_not_called()\n+\n+        self.output.truncate(0)\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            skip_checks=False,\n+            stdout=self.output,\n+        )\n+        self.assertIn('Performing system checks...', self.output.getvalue())\n+        mocked_check.assert_called()\n+\n+        try:\n+            with self.assertRaises(Exception):\n+                autoreload.check_errors(import_module)('test_exception')\n+        finally:\n+            autoreload._exception = None\n         \"\"\"\n         runserver.check_migrations() doesn't choke when a database is read-only.\n         \"\"\"\n",
  "django__django-13810": "",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..5818630 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -10,6 +11,8 @@ from django.db.migrations.recorder import MigrationRecorder\n from django.test import TestCase, modify_settings, override_settings\n \n from .test_base import MigrationTestBase\n+from importlib import import_module\n+from unittest import mock\n \n \n class RecorderTests(TestCase):\n@@ -502,6 +505,21 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, ['0001_initial'])\n \n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_non_namespace'},\n+    )\n+    def test_loading_regular_package_without_file(self):\n+        \"\"\"\n+        MigrationLoader should load migrations from regular packages with no __file__\n+        attribute. This ensures support for frozen environments where __file__ \n+        might not be set.\n+        \"\"\"\n+        with mock.patch('importlib.util.find_spec', return_value=None, create=True):\n+            loader = MigrationLoader(connection)\n+            loader.load_disk()\n+            migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+\n     @override_settings(\n         MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n     )\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..b182719 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -9,6 +9,11 @@ from unittest import mock\n \n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n+import unittest\n+from unittest import mock\n+from django.core.exceptions import ImproperlyConfigured\n+from django.db import connection\n+from django.db.backends.sqlite3.base import DatabaseWrapper as dbapi2\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n from django.db.utils import ConnectionHandler\n from django.test import (\n@@ -36,7 +41,31 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_3_8_11(self):\n+        # Test for SQLite version below 3.9.0\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n+\n+    def test_check_sqlite_version_3_9_0(self):\n+        # Test for exactly the minimum supported SQLite version 3.9.0\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            try:\n+                check_sqlite_version()\n+            except ImproperlyConfigured as e:\n+                self.fail(f\"check_sqlite_version() raised ImproperlyConfigured unexpectedly: {e}\")\n+\n+    def test_check_sqlite_version_above_3_9_0(self):\n+        # Test for SQLite versions above the minimum requirement\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 11, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.11.0'):\n+            try:\n+                check_sqlite_version()\n+            except ImproperlyConfigured as e:\n+                self.fail(f\"check_sqlite_version() raised ImproperlyConfigured unexpectedly: {e}\")\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..c97f2d8 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -158,13 +158,28 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n class TestChildArguments(SimpleTestCase):\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n-    @mock.patch('sys.warnoptions', [])\n+    @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n             [sys.executable, '-m', 'django', 'runserver']\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    def test_run_as_pkg_other_than_django_module(self):\n+        with mock.patch('__main__.__spec__', create=True):\n+            test_main.__spec__.parent = \"utils_tests.test_module\"\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+            )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n@@ -173,7 +188,22 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n-    @mock.patch('sys.warnoptions', [])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    def test_run_as_pkg_other_than_django_module(self):\n+        with mock.patch('__main__.__spec__', create=True):\n+            test_main.__spec__.parent = \"utils_tests.test_module\"\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+            )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..5a96706 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -272,18 +272,34 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n \n         class SomeForm(Form):\n             field = ModelMultipleChoiceField(ChoiceModel.objects.all())\n-\n-        f = SomeForm({'field': ['<script>']})\n-        self.assertHTMLEqual(\n-            t.render(Context({'form': f})),\n-            '<ul class=\"errorlist\"><li>field<ul class=\"errorlist\">'\n-            '<li>\u201c&lt;script&gt;\u201d is not a valid value.</li>'\n-            '</ul></li></ul>'\n-        )\n-\n+from django.test import TestCase\n+from myapp.forms import ChoiceModel, ModelChoiceField, ModelMultipleChoiceField\n+from myapp.tests.utils import AssertFormErrorsMixin\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n-    def test_modelchoicefield(self):\n+    def test_modelchoicefield_value_display(self):\n+        # Create dummy choices\n+        ChoiceModel.objects.create(pk=1, name='a')\n+        ChoiceModel.objects.create(pk=2, name='b')\n+        ChoiceModel.objects.create(pk=3, name='c')\n+\n+        # Test invalid choice and capture its value in the error message\n+        f = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not one of the available choices.',\n+            },\n+        )\n+        self.assertFormErrors(['\"invalid\" is not one of the available choices.'], f.clean, 'invalid')\n+        \n+        # Test with ModelMultipleChoiceField for consistency\n+        f_multi = ModelMultipleChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={\n+                'invalid_choice': '\"%(value)s\" is not a valid selection.',\n+            },\n+        )\n+        self.assertFormErrors(['\"invalid\" is not a valid selection.'], f_multi.clean, ['invalid'])\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n         ChoiceModel.objects.create(pk=2, name='b')\n@@ -307,4 +323,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..cb4cbb8 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -549,7 +550,26 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child_with_empty_instance(self):\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey()\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            parent.name = 'foo'\n+            parent.save()\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child_with_defined_instance(self):\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey(name='bar')\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            parent.save()\n+            child.save()\n+            child.refresh_from_db()\n+            self.assertEqual(child.parent, parent)\n+            self.assertEqual(child.parent_id, parent.name)\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/models.py b/tests/custom_pk/models.py\nindex 5f276b6..6b7e4cc 100644\n--- a/tests/custom_pk/models.py\n+++ b/tests/custom_pk/models.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Using a custom primary key\n \n@@ -7,7 +8,7 @@ this behavior by explicitly adding ``primary_key=True`` to a field.\n \n from django.db import models\n \n-from .fields import MyAutoField\n+from .fields import MyAutoField, MyWrapper\n \n \n class Employee(models.Model):\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..c2b1cc5 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -817,6 +817,31 @@ class BasicExpressionsTests(TestCase):\n         )\n \n \n+    def test_combined_operations_with_exists_and_q(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # Test for commutative nature of & and | operators with Exists and Q\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_ceo) & Q(salary__gte=30)),\n+            Employee.objects.filter(Q(salary__gte=30) & Exists(is_ceo)),\n+        )\n+        self.assertCountEqual(\n+            Employee.objects.filter(Exists(is_poc) | Q(salary__lt=15)),\n+            Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n+        )\n+\n+        # Additional subTests to ensure that order of operations is irrelevant\n+        conditions_list = [\n+            (Exists(is_ceo) & Q(), Q() & Exists(is_ceo)),\n+            (Exists(is_poc) | Q(), Q() | Exists(is_poc)),\n+        ]\n+        for cond1, cond2 in conditions_list:\n+            with self.subTest(cond1=cond1, cond2=cond2):\n+                self.assertCountEqual(Employee.objects.filter(cond1), Employee.objects.filter(cond2))\n+\n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..2c01143 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,35 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_post_process_does_not_yield_same_file_multiple_times(self):\n+        \"\"\"\n+        Ensure that the post_process method does not yield the same file multiple times.\n+        \"\"\"\n+        collectstatic_args = {\n+            'link': False,\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'use_default_ignore_patterns': True,\n+            'ignore_patterns': ['*.ignoreme'],\n+        }\n+        \n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        \n+        with patch('django.contrib.staticfiles.storage.HashedFilesMixin.post_process') as mock_post_process:\n+            mock_post_process.return_value = iter([\n+                ('admin/css/base.css', 'admin/css/base.31652d31b392.css', True),\n+                ('admin/css/base.css', 'admin/css/base.6b517d0d5813.css', False),\n+                ('admin/css/dashboard.css', 'admin/css/dashboard.7ac78187c567.css', True)\n+            ])\n+            stats = collectstatic_cmd.collect()\n+            post_processed_set = set(stats['post_processed'])\n+            self.assertCountEqual(stats['post_processed'], post_processed_set)\n+            \n+            # Ensure no file appears more than once in the yielded results.\n+            self.assertEqual(len(stats['post_processed']), len(post_processed_set))\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +243,35 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_post_process_does_not_yield_same_file_multiple_times(self):\n+        \"\"\"\n+        Ensure that the post_process method does not yield the same file multiple times.\n+        \"\"\"\n+        collectstatic_args = {\n+            'link': False,\n+            'clear': False,\n+            'dry_run': False,\n+            'post_process': True,\n+            'use_default_ignore_patterns': True,\n+            'ignore_patterns': ['*.ignoreme'],\n+        }\n+        \n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(**collectstatic_args)\n+        \n+        with patch('django.contrib.staticfiles.storage.HashedFilesMixin.post_process') as mock_post_process:\n+            mock_post_process.return_value = iter([\n+                ('admin/css/base.css', 'admin/css/base.31652d31b392.css', True),\n+                ('admin/css/base.css', 'admin/css/base.6b517d0d5813.css', False),\n+                ('admin/css/dashboard.css', 'admin/css/dashboard.7ac78187c567.css', True)\n+            ])\n+            stats = collectstatic_cmd.collect()\n+            post_processed_set = set(stats['post_processed'])\n+            self.assertCountEqual(stats['post_processed'], post_processed_set)\n+            \n+            # Ensure no file appears more than once in the yielded results.\n+            self.assertEqual(len(stats['post_processed']), len(post_processed_set))\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..d25c1e8 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -5,6 +6,7 @@ Tests for stuff in django.utils.datastructures.\n import copy\n import pickle\n \n+import collections.abc\n from django.test import SimpleTestCase\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n@@ -18,7 +20,28 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        # Test reversing an empty OrderedSet\n+        s = reversed(OrderedSet())\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        # Test reversing an OrderedSet with a single element\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n+    def test_reversed_different_data_types(self):\n+        # Test reversing an OrderedSet with different data types\n+        s = reversed(OrderedSet([1, 'a', 3.14, (2, 3)]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [(2, 3), 3.14, 'a', 1])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex b2ec8af..d3009bc 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n import re\n from decimal import Decimal\n \n from django.core.exceptions import FieldError\n+from django.db.models import TextField\n from django.db import connection\n from django.db.models import (\n     Avg, Case, Count, DecimalField, DurationField, Exists, F, FloatField,\n@@ -713,6 +715,35 @@ class AggregateTestCase(TestCase):\n             }\n         )\n \n+    def test_meta_ordering_not_in_group_by(self):\n+        \"\"\"\n+        Ensure Meta.ordering fields are not added to the GROUP BY clause,\n+        which may cause incorrect aggregations.\n+        \"\"\"\n+        # Setup Authors and Books in a way that would use ordering fields.\n+        author1 = Author.objects.create(name='Auth1', age=45)\n+        author2 = Author.objects.create(name='Auth2', age=50)\n+        book1 = Book.objects.create(\n+            isbn='1234567890', name='Ordered Book 1',\n+            pages=200, rating=3.5, price=Decimal('10.00'), contact=author1,\n+            publisher=self.p1, pubdate=datetime.date(2020, 1, 1)\n+        )\n+        book2 = Book.objects.create(\n+            isbn='0987654321', name='Ordered Book 2',\n+            pages=300, rating=4.0, price=Decimal('20.00'), contact=author2,\n+            publisher=self.p1, pubdate=datetime.date(2020, 2, 1)\n+        )\n+\n+        # Queries that should not include ordering in GROUP BY\n+        qs = Book.objects.annotate(price_copy=F('price')).values('price', 'price_copy').annotate(\n+            num_authors=Count('authors__id')).values('price', 'num_authors')\n+\n+        # Perform the test\n+        self.assertEqual(\n+            list(qs.order_by('price')),\n+            [{'price': Decimal('10.00'), 'num_authors': 0}, {'price': Decimal('20.00'), 'num_authors': 0}],\n+        )\n+\n     def test_annotate_values_list(self):\n         books = (\n             Book.objects\n@@ -1339,4 +1370,4 @@ class AggregateTestCase(TestCase):\n             ('Wesley J. Chun', 1),\n             ('Stuart Russell', 1),\n             ('Peter Norvig', 2),\n-        ], lambda a: (a.name, a.contact_count), ordered=False)\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..8fb695d 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -838,8 +838,25 @@ class BasicExpressionsTests(TestCase):\n             with self.subTest(conditions):\n                 self.assertCountEqual(Employee.objects.filter(conditions), [self.max])\n \n+    def test_combining_q_objects_with_exists(self):\n+        is_ceo = Employee.objects.filter(salary__gte=OuterRef('pk'))\n+        self.gmbh.ceo = self.max\n+        self.gmbh.save()\n \n-class IterableLookupInnerExpressionsTests(TestCase):\n+        tests = [\n+            Q(Exists(is_ceo)),\n+            ~Q(Exists(is_ceo)),\n+            ~Q() | Q(Exists(is_ceo)) & Q(),\n+        ]\n+        expected_results = [\n+            [self.max],\n+            [self.example_inc.ceo],\n+            [self.example_inc.ceo, self.max]\n+        ]\n+        \n+        for conditions, expected in zip(tests, expected_results):\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n     @classmethod\n     def setUpTestData(cls):\n         ceo = Employee.objects.create(firstname='Just', lastname='Doit', salary=30)\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..9f7f769 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -66,7 +67,27 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +103,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..58e4bac 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -182,6 +182,25 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n+\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver', 'foo.bar.baz'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_with_dotted_module_path(self):\n+        # Simulate running with a dotted module path like foo.bar.baz\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'foo.bar.baz', 'runserver']\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..a564103 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,7 +226,11 @@ TEST_DATA = [\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n-    # Trailing newlines not accepted\n+    # Trailing newlines, carriage returns, and tabs are not accepted\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.djangoproject.com/\\t', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\t', ValidationError),\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n     # Trailing junk does not take forever to reject\n",
  "django__django-14351": "",
  "django__django-14373": "",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..4812cba 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -68,6 +68,38 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_both_database_and_db_kwargs(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_password(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..40e44a0 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2199,7 +2199,21 @@ class SchemaTests(TransactionTestCase):\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n \n     @skipUnlessDBFeature('supports_expression_indexes')\n-    def test_func_unique_constraint(self):\n+    def test_unique_constraint_table_instance_as_column(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        # Simulate the issue by passing a Table instance instead of a column name.\n+        try:\n+            constraint = UniqueConstraint(fields=[Author._meta.db_table], name='table_instance_as_column')\n+            with connection.schema_editor() as editor:\n+                editor.add_constraint(Author, constraint)\n+                sql = constraint.create_sql(Author, editor)\n+            table = Author._meta.db_table\n+            # This should not raise an exception if the issue is fixed\n+            self.assertIs(sql.references_table(table), True)\n+            self.assertIs(sql.references_column(table, Author._meta.db_table), False)\n+        except Exception as e:\n+            self.fail(f'Test failed due to an unexpected exception: {e}')\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n         constraint = UniqueConstraint(Upper('name').desc(), name='func_upper_uq')\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex dc966a1..ace9fd9 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -94,6 +94,11 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n     )\n \n \n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+\n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n class NoneHashStorage(ManifestStaticFilesStorage):\n     def file_hash(self, name, content=None):\n-        return None\n+        return None\n",
  "django__django-14500": "",
  "django__django-14539": "",
  "django__django-14559": "",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..8ac6358 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -316,7 +316,28 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertTrue(formset.is_valid())\n         self.assertEqual([form.cleaned_data for form in formset.forms], [{'votes': 100, 'choice': 'Calexico'}, {}, {}])\n \n-    def test_formset_validate_max_flag(self):\n+    def test_css_class_on_non_form_errors(self):\n+        \"\"\"\n+        Test that non-form errors in FormSets have the correct 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '3', \n+            'choices-INITIAL_FORMS': '0',\n+            'choices-0-choice': 'Tea',\n+            'choices-0-votes': '15',\n+            'choices-1-choice': 'Coffee',\n+            'choices-1-votes': '5',\n+            'choices-2-choice': 'Tea',\n+            'choices-2-votes': '10',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=0)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        expected_html = (\n+            '<ul class=\"errorlist nonform\">'\n+            '<li>You may only specify a choice once.</li></ul>'\n+        )\n+        self.assertHTMLEqual(str(formset.non_form_errors()), expected_html)\n         \"\"\"\n         If validate_max is set and max_num is less than TOTAL_FORMS in the\n         data, a ValidationError is raised. MAX_NUM_FORMS in the data is\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..0f82205 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2112,6 +2112,31 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         self.assertEqual(unbound['hi_without_microsec'].value(), now_no_ms)\n         self.assertEqual(unbound['ti_without_microsec'].value(), now_no_ms)\n \n+    def test_clean_fields_access_bound_field(self):\n+        \"\"\"Test that _clean_fields accesses initial values through BoundField.\"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        form.full_clean()  # Ensure _clean_fields is called\n+        bf = form['dt']\n+        self.assertEqual(form.cleaned_data['dt'], bf.initial)\n+\n+    def test_changed_data_access_bound_field(self):\n+        \"\"\"Test that changed_data checks initial values through BoundField.\"\"\"\n+        now = datetime.datetime(2006, 10, 25, 14, 30, 45)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=now, disabled=True)\n+\n+        form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n+        form.full_clean()  # Ensure changed_data is evaluated\n+        bf = form['dt']\n+        self.assertEqual(form.changed_data, [])\n+        self.assertEqual(form.cleaned_data['dt'], bf.initial)\n+\n     def test_datetime_clean_initial_callable_disabled(self):\n         now = datetime.datetime(2006, 10, 25, 14, 30, 45, 123456)\n \n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..d7b3ea0 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -1,7 +1,8 @@\n from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n-from django.db import IntegrityError\n+from django.db import IntegrityError, models\n+from django.core.checks import Error\n from django.test import TestCase\n \n from .models import (\n@@ -10,8 +11,35 @@ from .models import (\n     Relationship, SymmetricalFriendship,\n )\n \n-\n-class M2mThroughTests(TestCase):\n+class ProxyM2MRelTests(TestCase):\n+    def test_m2m_with_through_fields_list_on_proxy_model(self):\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        # Check if no errors are raised and identity with through_fields is hashable\n+        reverse_m2m = Child._meta.get_field('many_to_many_field').remote_field\n+        try:\n+            hash(reverse_m2m)\n+        except TypeError as e:\n+            self.fail(f\"TypeError raised during hashing ManyToManyRel: {e}\")\n     @classmethod\n     def setUpTestData(cls):\n         cls.bob = Person.objects.create(name='Bob')\n",
  "django__django-14752": "",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..c21fa02 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -923,12 +923,22 @@ class StateTests(SimpleTestCase):\n             len([x for x in rendered_state.get_models() if x._meta.app_label == \"migrations\"]),\n             1,\n         )\n-\n-    def test_ignore_order_wrt(self):\n-        \"\"\"\n-        Makes sure ProjectState doesn't include OrderWrt fields when\n-        making from existing models.\n-        \"\"\"\n+    def test_real_apps_non_set(self):\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n+            \n+    def test_real_apps_as_set(self):\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except Exception as e:\n+            self.fail(f\"ProjectState raised {type(e).__name__} unexpectedly!\")\n+\n+    def test_real_apps_as_none(self):\n+        try:\n+            ps = ProjectState(real_apps=None)\n+            self.assertEqual(ps.real_apps, set(), \"Expected real_apps to default to an empty set.\")\n+        except Exception as e:\n+            self.fail(f\"ProjectState raised {type(e).__name__} unexpectedly!\")\n         new_apps = Apps()\n \n         class Author(models.Model):\n",
  "django__django-14771": "",
  "django__django-14787": "",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..302c168 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5093,6 +5093,49 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin:admin_views_choice_change', args=(choice.pk,)))\n         self.assertContains(response, '<div class=\"readonly\">No opinion</div>', html=True)\n \n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Helper function to test ForeignKey readonly fields with\n+        the specified admin site.\n+        \"\"\"\n+        # Create necessary objects\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+\n+        # Use the URL reverse function specific to the admin site\n+        url = reverse(f'{admin_site}:admin_views_chapter_change', args=(quote(chapter.pk),))\n+        response = self.client.get(url)\n+\n+        # Test for proper URL in readonly foreign key field to a registered admin model\n+        language_url = reverse(\n+            f'{admin_site}:admin_views_language_change',\n+            args=(quote(language.pk),),\n+        )\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_40</a></div>' % language_url,\n+            html=True,\n+        )\n+\n+        # Related ForeignKey object not registered in admin.\n+        self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test foreign key links on the default admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test foreign key links on a custom admin site.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('namespaced_admin')\n+\n     def test_readonly_foreignkey_links(self):\n         \"\"\"\n         ForeignKey readonly fields render as links if the target model is\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..4da743a 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -341,7 +342,34 @@ class ModelChoiceFieldTests(TestCase):\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n \n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        # Ensure that ModelChoiceIteratorValue is hashable\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+    def test_custom_data_attributes_in_select_widget(self):\n+        # Setup a dictionary for the custom 'show_fields' attribute\n+        show_fields = {self.c1.pk: ['first_name', 'last_name'], self.c2.pk: ['email']}\n+\n+        class CustomSelect(forms.Select):\n+            def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+                context = super().create_option(name, value, label, selected, index, subindex, attrs)\n+                if not value:\n+                    return context\n+                if value.instance.pk in show_fields:\n+                    context['attrs']['data-fields'] = show_fields[value.instance.pk]\n+                return context\n+\n+        class CustomModelChoiceField(forms.ModelChoiceField):\n+            widget = CustomSelect\n+\n+        field = CustomModelChoiceField(Category.objects.all())\n+\n+        rendered_html = field.widget.render('name', [])\n+        self.assertIn('data-fields=\"[\"first_name\", \"last_name\"]\"', rendered_html)\n+        self.assertIn('data-fields=\"[\"email\"]\"', rendered_html)\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..f5da0c5 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,28 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop(self):\n+        app_label = 'test_rmwdbtn'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+\n+        # Check no operations are executed on the database\n+        with connection.schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..1150782 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -171,6 +171,50 @@ class ChangeListTests(TestCase):\n         row_html = build_tbody_html(new_child.id, link, '<td class=\"field-parent nowrap\">-</td>')\n         self.assertNotEqual(table_output.find(row_html), -1, 'Failed to find expected row element: %s' % table_output)\n \n+    def test_search_with_multiple_terms_results_in_single_join(self):\n+        \"\"\"\n+        Test that searching with multiple terms does not result in excessive\n+        joins in the SQL query for related fields.\n+        \"\"\"\n+        parent = Parent.objects.create(name='ParentName')\n+        Child.objects.create(parent=parent, name='MultipleTermsTest')\n+        \n+        admin_instance = ParentAdmin(Parent, custom_site)\n+        \n+        # Simulate a request with multiple search terms\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'Multiple Terms Test'})\n+        request.user = self.superuser\n+\n+        cl = admin_instance.get_changelist_instance(request)\n+        \n+        with CaptureQueriesContext(connection) as context:\n+            object_count = cl.queryset.count()\n+        \n+        # Ensure that only a single join is used in the query\n+        self.assertEqual(context.captured_queries[0]['sql'].count('JOIN'), 1)\n+\n+    def test_single_search_term_with_no_results(self):\n+        \"\"\"\n+        Test that a single search term that yields no results still performs optimally.\n+        \"\"\"\n+        parent = Parent.objects.create(name='NonExistentName')\n+        \n+        admin_instance = ParentAdmin(Parent, custom_site)\n+        \n+        # Simulate a request with a search term that doesn't exist\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'NonExistent'})\n+        request.user = self.superuser\n+\n+        cl = admin_instance.get_changelist_instance(request)\n+        \n+        with CaptureQueriesContext(connection) as context:\n+            object_count = cl.queryset.count()\n+        \n+        # Ensure that the JOIN count remains optimal (for example, 0 or 1 based on logic)\n+        self.assertEqual(context.captured_queries[0]['sql'].count('JOIN'), 1)\n+        # Ensure that no objects are found\n+        self.assertEqual(object_count, 0)\n+\n     def test_result_list_set_empty_value_display_on_admin_site(self):\n         \"\"\"\n         Empty value display can be set on AdminSite.\n",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex b862331..e659b1c 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -173,7 +173,19 @@ class TestUtilsHtml(SimpleTestCase):\n             with self.subTest(arg=arg):\n                 self.assertEqual(json_script(arg, 'test_id'), expected)\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_without_element_id(self):\n+        # Test using json_script without providing the element_id\n+        output = json_script({'key': 'value'})\n+        expected = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+        self.assertEqual(output, expected)\n+        \n+        output = json_script({'key': '<&>'})\n+        expected = '<script type=\"application/json\">{\"key\": \"\\\\u003C\\\\u0026\\\\u003E\"}</script>'\n+        self.assertEqual(output, expected)\n+\n+        output = json_script('string without an element_id')\n+        expected = '<script type=\"application/json\">\"string without an element_id\"</script>'\n+        self.assertEqual(output, expected)\n         items = (\n             ('http://\u00f6\u00e4\u00fc.com/', 'http://xn--4ca9at.com/'),\n             ('http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/', 'http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/'),\n@@ -276,4 +288,4 @@ class TestUtilsHtml(SimpleTestCase):\n         )\n         for value in tests:\n             with self.subTest(value=value):\n-                self.assertEqual(urlize(value), value)\n+                self.assertEqual(urlize(value), value)\n",
  "django__django-15104": "",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..3386412 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,4 +1,6 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n+from django.test import SimpleTestCase\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n from django.contrib.messages.storage import base, default_storage\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..02cf52b 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -30,8 +30,46 @@ from .models import (\n     SharedConnection, SimpleCategory, SingleObject, SpecialCategory, Staff,\n     StaffUser, Student, Tag, Task, Teacher, Ticket21203Child,\n     Ticket21203Parent, Ticket23605A, Ticket23605B, Ticket23605C, TvChef, Valid,\n-    X,\n+    X, BaseUser, Annotation, Note, Task,\n )\n+from django.test import TestCase\n+from django.db.models import Q\n+\n+class AliasConflictsTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        tag = Tag.objects.create(name='test-tag')\n+        cls.annotation_1 = Annotation.objects.create(tag=tag)\n+        annotation_2 = Annotation.objects.create(tag=tag)\n+        note = cls.annotation_1.notes.create(tag=tag)\n+        cls.base_user_1 = BaseUser.objects.create()\n+        cls.base_user_2 = BaseUser.objects.create()\n+        cls.task = Task.objects.create(\n+            owner=cls.base_user_2, creator=cls.base_user_2, note=note,\n+        )\n+\n+    def test_conflicting_aliases_during_combine(self):\n+        qs1 = self.annotation_1.baseuser_set.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(owner__note__in=self.annotation_1.notes.all()) |\n+            Q(creator__note__in=self.annotation_1.notes.all())\n+        )\n+        # Assert initial querysets' content\n+        self.assertSequenceEqual(qs1, [self.base_user_1])\n+        self.assertSequenceEqual(qs2, [self.base_user_2])\n+\n+        # Assert combining them in both orders provides the same results\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [self.base_user_1, self.base_user_2])\n+\n+        # Test OR operation causing alias conflicts does not raise AssertionError\n+        try:\n+            combined_qs1_qs2 = qs1 | qs2\n+            combined_qs2_qs1 = qs2 | qs1\n+            self.assertCountEqual(combined_qs1_qs2, combined_qs2_qs1)\n+            self.assertCountEqual(combined_qs1_qs2, [self.base_user_1, self.base_user_2])\n+        except AssertionError:\n+            self.fail(\"Combining querysets with OR operator raised an AssertionError unexpectedly.\")\n \n \n class Queries1Tests(TestCase):\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..4239d24 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1775,7 +1775,12 @@ class ValueTests(TestCase):\n         self.assertEqual(len(kwargs), 1)\n         self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n \n-    def test_repr(self):\n+    def test_deconstruct_F_expression(self):\n+        f = F('my_field')\n+        path, args, kwargs = f.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, (f.name,))\n+        self.assertEqual(kwargs, {})\n         tests = [\n             (None, 'Value(None)'),\n             ('str', \"Value('str')\"),\n",
  "django__django-15268": "",
  "django__django-15277": "",
  "django__django-15278": "",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..46804fb 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -19,6 +19,21 @@ class Nested:\n \n class BasicFieldTests(SimpleTestCase):\n \n+    def test_hash_immutability(self):\n+        # Test that the hash value of a field is immutable.\n+        field = models.IntegerField()\n+        initial_hash = hash(field)\n+        \n+        # Assign the field to a model class\n+        class MyModel(models.Model):\n+            rank = field\n+        \n+        self.assertEqual(initial_hash, hash(field))\n+        \n+        # Verify that the field can still be used as a dictionary key\n+        d = {field: 'value'}\n+        self.assertIn(field, d)\n+        \n     def test_show_hidden_initial(self):\n         \"\"\"\n         Fields with choices respect show_hidden_initial as a kwarg to\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..91d2d11 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -211,7 +211,35 @@ class BulkUpdateTests(TestCase):\n         Number.objects.bulk_update(numbers, ['num'])\n         self.assertCountEqual(Number.objects.filter(num=1), numbers)\n \n-    def test_booleanfield(self):\n+    def test_f_expression(self):\n+        notes = [\n+            Note.objects.create(note='test_note', misc='test_misc')\n+            for _ in range(10)\n+        ]\n+        for note in notes:\n+            note.misc = F('note')\n+        Note.objects.bulk_update(notes, ['misc'])\n+        self.assertCountEqual(Note.objects.filter(misc='test_note'), notes)\n+\n+    def test_f_expression_integer(self):\n+        numbers = [\n+            Number.objects.create(num=5)\n+            for _ in range(10)\n+        ]\n+        for number in numbers:\n+            number.num = F('num') + 5\n+        Number.objects.bulk_update(numbers, ['num'])\n+        self.assertCountEqual(Number.objects.filter(num=10), numbers)\n+\n+    def test_f_expression_different_fields(self):\n+        entries = [\n+            Entry.objects.create(data_field='data', mnemonic='')\n+            for _ in range(5)\n+        ]\n+        for entry in entries:\n+            entry.mnemonic = F('data_field')\n+        Entry.objects.bulk_update(entries, ['mnemonic'])\n+        self.assertCountEqual(Entry.objects.filter(mnemonic='data'), entries)\n         individuals = [Individual.objects.create(alive=False) for _ in range(10)]\n         for individual in individuals:\n             individual.alive = True\n",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..8ea2249 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,7 +1049,47 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n-    def test_rename_model(self):\n+    def test_rename_field_with_renamed_model(self):\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState('testapp', 'RenamedAuthor', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n+\n+    def test_rename_model_and_field_simultaneously(self):\n+        \"\"\"Test renaming of both model and field in a single migration.\"\"\"\n+        changes = self.get_changes(\n+            [ModelState('testapp', 'MyModel', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('name', models.CharField(max_length=100)),\n+            ])],\n+            [ModelState('testapp', 'MyModel2', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('new_name', models.CharField(max_length=100)),\n+            ])],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='MyModel', new_name='MyModel2',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='new_name',\n+        )\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n             [self.author_with_book, self.book],\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..e408b2b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,7 +1906,39 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n-class FieldTransformTests(TestCase):\n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+from myapp.models import Manager  # Assuming 'Manager' is defined in 'myapp.models'\n+\n+class ExistsSubqueryTests(TestCase):\n+    \n+    def test_negated_empty_exists(self):\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_non_negated_empty_exists(self):\n+        manager = Manager.objects.create(name='test')\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [])\n+\n+    def test_exists_with_non_empty_queryset(self):\n+        manager = Manager.objects.create(name='test')\n+        qs = Manager.objects.filter(\n+            Exists(Manager.objects.filter(pk=manager.pk)) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_negated_exists_with_non_empty_queryset(self):\n+        manager = Manager.objects.create(name='test')\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.filter(pk=manager.pk)) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [])\n \n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..46c802f 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -16,6 +16,12 @@ from django.contrib.admin import widgets\n from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n+from django.contrib.admin import widgets\n+from django.contrib.admin.sites import site\n+from django.contrib.admin.tests import AdminSeleniumTestCase\n+from django.db import models\n+from django.test import TestCase\n+from .models import Inventory\n from django.core.files.uploadedfile import SimpleUploadedFile\n from django.db.models import (\n     CharField,\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..931fbc4 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,82 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_model_with_various_managers(self):\n+        \"Test CreateModel followed by AlterModelManagers with various cases.\"\n+        # Single manager altered, should result in CreateModel with that manager\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"custom_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"custom_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+        # Multiple managers altered, ensuring they're combined correctly\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Baz\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"manager_one\", models.Manager()),\n+                        (\"manager_two\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"manager_one\", models.Manager()),\n+                        (\"manager_two\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+        # AlterManagers with the same name should be merged in one CreateModel\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Qux\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[\n+                        (\"shared_manager\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[\n+                        (\"another_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Qux\",\n+                    fields=[],\n+                    managers=[\n+                        (\"another_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n@@ -141,6 +217,82 @@ class OptimizerTests(SimpleTestCase):\n             ],\n             [migrations.CreateModel(\"MyModel\", fields=[])],\n         )\n+\n+    def test_create_model_with_various_managers(self):\n+        \"Test CreateModel followed by AlterModelManagers with various cases.\"\n+        # Single manager altered, should result in CreateModel with that manager\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Bar\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[\n+                        (\"custom_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\",\n+                    fields=[],\n+                    managers=[\n+                        (\"custom_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+        # Multiple managers altered, ensuring they're combined correctly\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Baz\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Baz\",\n+                    managers=[\n+                        (\"manager_one\", models.Manager()),\n+                        (\"manager_two\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Baz\",\n+                    fields=[],\n+                    managers=[\n+                        (\"manager_one\", models.Manager()),\n+                        (\"manager_two\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+        # AlterManagers with the same name should be merged in one CreateModel\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Qux\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[\n+                        (\"shared_manager\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Qux\",\n+                    managers=[\n+                        (\"another_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Qux\",\n+                    fields=[],\n+                    managers=[\n+                        (\"another_manager\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n         self.assertOptimizesTo(\n             [\n                 migrations.CreateModel(\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..b2decc8 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,36 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+from django.test import TestCase\n+from django.core import management\n+from .models import Author, Book\n+\n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"other\"}\n+\n+    def test_natural_key_load_on_non_default_database(self):\n+        \"\"\"\n+        Test loading fixtures using natural keys with foreign key dependencies\n+        on a non-default database.\n+        \"\"\"\n+        # Load data fixture into the 'other' database\n+        management.call_command(\n+            \"loaddata\",\n+            \"fixtures/natural_key_with_fk.json\",\n+            database=\"other\",\n+            verbosity=0,\n+        )\n+\n+        # Verify the data was loaded correctly\n+        # Check Book instance on 'other' database\n+        book = Book.objects.using(\"other\").get(title=\"The Ring\")\n+        self.assertEqual(book.title, \"The Ring\")\n+        self.assertEqual(book.author.name, \"JR Tolkien\")\n+\n+        # Check Author instance on 'other' database\n+        author = Author.objects.using(\"other\").get(name=\"JR Tolkien\")\n+        self.assertEqual(author.name, \"JR Tolkien\")\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..7a4d63e 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,6 +3961,37 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n+    def test_alter_field_choices_noop(self):\n+        \"\"\"Test to ensure AlterField generates no operation when choices are changed.\"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = CharField(\n+            choices=((\"Jane\", \"Jane\"), (\"Joe\", \"Joe\")),\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        # This should not generate any SQL queries\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        # Reverting should also not generate any SQL queries\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_type_change_with_choices(self):\n+        \"\"\"Test to ensure AlterField behaves when changing field type with choices.\"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"name\")\n+        new_field = TextField(\n+            choices=((\"A\", \"A\"), (\"B\", \"B\")),  # Change to text field with choices\n+            max_length=255,\n+        )\n+        new_field.set_attributes_from_name(\"name\")\n+        # This should actually require a table remake due to type change\n+        with connection.schema_editor() as editor, self.assertNumQueries(1):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+\n     def test_add_textfield_unhashable_default(self):\n         # Create the table\n         with connection.schema_editor() as editor:\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..9afa7bf 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -320,6 +320,17 @@ class LookupTests(TestCase):\n         self.assertNotIn(\"exactly\", field.get_lookups())\n \n         # registration should bust the cache\n+\n+    def test_unregister_lookup_clears_cache(self):\n+        field = Article._meta.get_field(\"author\")\n+\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())  # Ensure it's registered\n+\n+        # Unregister the lookup and ensure cache is cleared\n+        models.ForeignObject._unregister_lookup(Exactly)\n+        field.get_lookups.cache_clear()  # Clear cache manually for testing purposes\n+        self.assertNotIn(\"exactly\", field.get_lookups())  # Ensure it's unregistered\n         with register_lookup(models.ForeignObject, Exactly):\n             # getting the lookups again should re-cache\n             self.assertIn(\"exactly\", field.get_lookups())\n",
  "django__django-15572": "",
  "django__django-15731": "",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..941e7b6 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,6 +1,9 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n+from django.utils.translation import gettext_lazy\n+from django.utils.formats import get_format\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n \n@@ -77,7 +80,22 @@ class FunctionTests(SimpleTestCase):\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n \n-    def test_no_args(self):\n+    def test_lazy_date_format(self):\n+        with translation.override(\"en\"):\n+            # Test lazy string with get_format directly\n+            self.assertEqual(get_format(gettext_lazy(\"DATE_FORMAT\")), \"N j, Y\")\n+\n+            # Test lazy string in a template\n+            template = Template('{% load l10n %}{{ date|date:_(\"Y-m-d\") }}')\n+            context = Context({\"date\": datetime(2023, 2, 14)})\n+            self.assertEqual(template.render(context), \"2023-02-14\")\n+\n+    def test_lazy_time_format(self):\n+        with translation.override(\"en\"):\n+            # Test lazy string in a template with time\n+            template = Template('{{ t|date:_(\"H:i:s\") }}')\n+            context = Context({\"t\": time(14, 30, 59)})\n+            self.assertEqual(template.render(context), \"14:30:59\")\n         self.assertEqual(date(\"\"), \"\")\n         self.assertEqual(date(None), \"\")\n \n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..6b8c075 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,8 +398,33 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+from django.test import TestCase\n+from .models import CustomModel, ProxyCustomModel, AnotherModel\n \n-@override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n+class ProxyModelQuerySetTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.custom_instance = ProxyCustomModel.objects.create(name=\"Sample Name\")\n+        cls.another_instance = AnotherModel.objects.create(custom=cls.custom_instance)\n+\n+    def test_select_related_only_on_proxy(self):\n+        # Ensure no exception is raised when using only() after select_related() on a proxy\n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        obj = queryset.get()\n+        self.assertEqual(obj.custom.name, \"Sample Name\")\n+\n+    def test_select_related_only_with_different_fields(self):\n+        # Extend to a case with different fields if needed\n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\", \"id\")\n+        obj = queryset.get()\n+        self.assertEqual(obj.custom.name, \"Sample Name\")\n+        self.assertEqual(obj.id, self.another_instance.id)\n+\n+    def test_select_related_only_with_no_proxy(self):\n+        # Test the call without using a proxy model to ensure regular behavior is not broken\n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        obj = queryset.get()\n+        self.assertEqual(obj.custom.name, \"Sample Name\")\n class ProxyModelAdminTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..97eac37 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,6 +157,13 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_before_dbname(self):\n+        # Test that custom parameters are placed before the database name\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..b4286f8 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -31,6 +31,34 @@ class FloatformatTests(SimpleTestCase):\n         self.assertEqual(output, \"1.4 1.4\")\n \n \n+from decimal import Decimal\n+...\n+\n+class FunctionTests(SimpleTestCase):\n+    def test_decimals_high_precision(self):\n+        # Original test case\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+        # Additional test cases\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"3.1415926535897932384626433832\"), 30),\n+            \"3.141592653589793238462643383200\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.00000000000000000001\"), 20),\n+            \"0.00000000000000000001\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"1000000000.00000000000000001\"), 20),\n+            \"1000000000.00000000000000001000\",\n+        )\n+\n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n         self.assertEqual(floatformat(7.7), \"7.7\")\n",
  "django__django-15930": "",
  "django__django-15987": "",
  "django__django-16032": "",
  "django__django-16082": "",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..4469ece 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,12 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n+from django.urls import reverse\n+from django.contrib.auth import get_user_model\n+from myapp.models import Swallow  # Ensure the model is correctly imported\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..26e2ebc 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,27 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_no_changes(self):\n+        \"\"\"\n+        makemigrations --check should exit with a zero status when there are no\n+        changes that require migrations.\n+        \"\"\"\n+        with self.temporary_migration_module(\n+            module='migrations.test_migrations_no_changes'\n+        ):\n+            result = call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            self.assertIsNone(result)\n+\n+    def test_makemigrations_check_with_dry_run(self):\n+        \"\"\"\n+        makemigrations --check and --dry-run should work together without\n+        creating migration files, and should exit with a non-zero status if\n+        there are changes needing migrations.\n+        \"\"\"\n+        with self.temporary_migration_module() as migration_dir:\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"--dry-run\", \"migrations\", verbosity=0)\n+            self.assertFalse(os.path.exists(migration_dir))\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..2f0c8bb 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,7 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory\n+import asyncio\n from django.test import SimpleTestCase\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n@@ -118,8 +121,25 @@ class ViewTests(SimpleTestCase):\n                     response = asyncio.run(response)\n \n                 self.assertIsInstance(response, HttpResponse)\n+    def test_http_method_not_allowed_responds_correctly(self):\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),  # Replace with (Demo, True) after defining Demo.\n+            (AsyncView, True),  # Replace with (Demo, True) after defining Async Demo.\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                request = request_factory.get(\"/demo\")\n+                response = instance.http_method_not_allowed(request)\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n \n-    def test_base_view_class_is_sync(self):\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n         sync.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..46b29e6 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,5 +1,8 @@\n+\n import datetime\n import re\n+import urllib.parse\n+from django.urls import reverse\n from unittest import mock\n \n from django.contrib.auth.forms import (\n@@ -881,8 +884,60 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         form = UserChangeForm(instance=user, data=post_data)\n \n         self.assertTrue(form.is_valid())\n-        # original hashed password contains $\n-        self.assertIn(\"$\", form.cleaned_data[\"password\"])\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    def test_link_to_password_reset_with_pk_access(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.pk,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    def test_link_to_password_reset_for_non_existent_user(self):\n+        non_existent_user_id = 99999\n+        form = UserChangeForm(instance=User(pk=non_existent_user_id))\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+        \n+        admin_user_change_url = reverse(\n+            f\"admin:auth_user_change\",\n+            args=(non_existent_user_id,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:auth_user_password_change\",\n+            args=(non_existent_user_id,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n \n     def test_bug_19349_bound_password_field(self):\n         user = User.objects.get(username=\"testclient\")\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..de876d4 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,7 +1600,25 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n-    def test_runner_hostname(self):\n+    def test_zero_ip_addr_output(self):\n+        \"\"\"\n+        Test that using '0' as the host in the runserver command results in\n+        the output showing http://0.0.0.0:8000/.\n+        \"\"\"\n+        output = StringIO()\n+        with mock.patch(\"django.core.management.commands.runserver.run\"), \\\n+             mock.patch(\"django.core.management.base.BaseCommand.check_migrations\"):\n+            call_command(\n+                \"runserver\", \n+                addrport=\"0:8000\", \n+                use_reloader=False, \n+                skip_checks=True, \n+                stdout=output\n+            )\n+            self.assertIn(\n+                \"Starting development server at http://0.0.0.0:8000/\",\n+                output.getvalue()\n+            )\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n \n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..6dc0973 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -505,6 +505,20 @@ class HTTPSitemapTests(SitemapTestsBase):\n             \"</urlset>\"\n         )\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n+    def test_callable_sitemap_no_items_lastmod_handling(self):\n+        \"\"\"\n+        Test that a sitemap with callable lastmod and no items does not raise ValueError\n+        and returns None for lastmod in index.\n+        \"\"\"\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", response)\n+        expected_content = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+        <sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n+        <sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\n+        </sitemapindex>\n+        \"\"\"\n+        self.assertXMLEqual(response.content.decode(), expected_content)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n \n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..0409c79 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -58,6 +58,10 @@ class Restaurant(Place):\n class Pizzeria(Restaurant):\n     pass\n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n \n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..d5540b8 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -36,6 +37,7 @@ from .models.custom_user import (\n from .models.with_custom_email_field import CustomEmailField\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n \n \n class TestDataMixin:\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..5b9f13e 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -170,6 +171,31 @@ class TimesinceTests(TestCase):\n         past = datetime.datetime(1980, 1, 1, tzinfo=naive())\n         self.assertEqual(timeuntil(past), \"0\\xa0minutes\")\n \n+@requires_tz_support\n+@override_settings(USE_TZ=True)\n+class TZAwareTimesinceTests(TimesinceTests):\n+    def setUp(self):\n+        super().setUp()\n+        self.t = timezone.make_aware(self.t, timezone.get_default_timezone())\n+\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_tz_long_interval(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n+\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_tz_just_under_a_month(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=29)\n+        self.assertEqual(timesince(d), \"4\\xa0weeks\")\n+\n+    @override_settings(USE_TZ=True)\n+    def test_timesince_with_tz_more_than_a_year(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=400)\n+        self.assertEqual(timesince(d), \"1\\xa0year, 1\\xa0month\")\n+\n     def test_thousand_years_ago(self):\n         t = datetime.datetime(1007, 8, 14, 13, 46, 0)\n         self.assertEqual(timesince(t, self.t), \"1000\\xa0years\")\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..752c048 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -470,7 +470,28 @@ class CommandRunTests(AdminScriptTestCase):\n \n \n class UtilsTests(SimpleTestCase):\n-    def test_no_existent_external_program(self):\n+    def test_subparser_missing_argument_error_formatting(self):\n+        self.write_settings(\"settings.py\", apps=[\"user_commands\"])\n+\n+        # Test missing subparser argument\n+        out, err = self.run_manage([\"cheeses\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertIn(\n+            \"manage.py cheeses: error: the following arguments are required: {create}\",\n+            err_lines[1],\n+        )\n+\n+        # Test missing required argument 'name' for subparser 'create'\n+        out, err = self.run_manage([\"cheeses\", \"create\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertIn(\n+            \"manage.py cheeses create: error: the following arguments are required: name\",\n+            err_lines[1],\n+        )\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n         with self.assertRaisesMessage(CommandError, msg):\n             popen_wrapper([\"a_42_command_that_doesnt_exist_42\"])\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..5b71710 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -100,9 +100,28 @@ class FunctionTests(SimpleTestCase):\n                 THOUSAND_SEPARATOR=\"!\",\n             ):\n                 self.assertEqual(floatformat(66666.666, \"2gu\"), \"66!666.67\")\n-                self.assertEqual(floatformat(66666.666, \"2ug\"), \"66!666.67\")\n-            # Invalid suffix.\n-            self.assertEqual(floatformat(66666.666, \"u2\"), \"66666.666\")\n+from decimal import Decimal\n+\n+class FloatFormatTests(SimpleTestCase):\n+    ...\n+    \n+    def test_zero_string_values(self):\n+        # Test cases as described in the issue\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+\n+    def test_near_zero_decimal_values(self):\n+        # Additional test cases for near-zero values\n+        self.assertEqual(floatformat(\"0.001\", 2), \"0.00\")\n+        self.assertEqual(floatformat(Decimal(\"0.001\"), 3), \"0.001\")\n+        self.assertEqual(floatformat(Decimal(\"-0.001\"), 2), \"-0.00\")\n+\n+    def test_scientific_notation(self):\n+        # Testing for very small numbers that might be represented in scientific notation\n+        self.assertEqual(floatformat(Decimal(\"1E-8\"), 10), \"0.0000000100\")\n+        self.assertEqual(floatformat(Decimal(\"-1E-8\"), 10), \"-0.0000000100\")\n+\n+    ...\n \n     def test_zero_values(self):\n         self.assertEqual(floatformat(0, 6), \"0.000000\")\n",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..301f2a7 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1017,6 +1017,26 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         *_, kwargs = obj._meta.get_field(\"storage_callable\").deconstruct()\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n+    \n+    def test_deconstruction_callable_returning_default_storage(self):\n+        \"\"\"\n+        A callable returning default_storage should not be omitted when \n+        deconstructing and should appear as a reference to the callable.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        storage = kwargs.get(\"storage\", None)\n+        self.assertIs(storage, callable_default_storage)\n+\n+    def test_deconstruction_callable_returning_other_storage(self):\n+        \"\"\"\n+        Ensure a callable returning non-default storage is correctly deconstructed\n+        as a reference to the callable.\n+        \"\"\"\n+        other_storage_callable = lambda: other_storage\n+        field = models.FileField(storage=other_storage_callable, upload_to='other')\n+        name, path, args, kwargs = field.deconstruct()\n+        self.assertIs(kwargs[\"storage\"], other_storage_callable)\n \n \n # Tests for a race condition on file saving (#4948).\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..6f0b553 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -10,7 +11,8 @@ from django.urls import reverse\n \n from .admin import ArticleAdmin, site\n from .models import Article, Question\n-from .tests import AdminViewBasicTestCase\n+from django.contrib.auth import get_permission_codename\n+from .tests import AdminViewBasicTestCase, get_perm\n \n \n class AdminTemplateTagsTest(AdminViewBasicTestCase):\n@@ -33,6 +35,40 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        # Test when user only has change permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # Test when user has both add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n+\n     def test_override_show_save_and_add_another(self):\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n",
  "django__django-16560": "",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..77c17f1 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1471,6 +1471,24 @@ class FormsFormsetTestCase(SimpleTestCase):\n             extra=2,\n         )\n         formset = ChoiceFormFormset()\n+\n+        # New test case for checking if 'empty_form' handles None index properly\n+        # Test Formset configuration: can_delete=True, can_delete_extra=False\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        formset = MyFormSet(initial=None)\n+        # This should not raise an error anymore\n+        try:\n+            empty_form = formset.empty_form\n+            self.assertNotIn(\"DELETE\", empty_form.fields)\n+        except TypeError as e:\n+            self.fail(f\"Test failed due to unexpected TypeError: {str(e)}\")\n         self.assertEqual(len(formset), 2)\n         self.assertNotIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..655e684 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8462,9 +8462,44 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         self.assertRedirects(\n             response, known_url, status_code=301, target_status_code=403\n         )\n+    \n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_with_different_query_strings(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        \n+        # Test with single query parameter\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?id=1\")\n+        self.assertRedirects(response, f\"{known_url}?id=1\", status_code=301, fetch_redirect_response=False)\n+\n+        # Test with multiple query parameters\n+        response = self.client.get(f\"{known_url[:-1]}?id=1&sort=asc\")\n+        self.assertRedirects(response, f\"{known_url}?id=1&sort=asc\", status_code=301, fetch_redirect_response=False)\n+\n+        # Test with encoded characters in the query string\n+        response = self.client.get(f\"{known_url[:-1]}?search=foo%20bar\")\n+        self.assertRedirects(response, f\"{known_url}?search=foo%20bar\", status_code=301, fetch_redirect_response=False)\n \n     @override_settings(APPEND_SLASH=True)\n-    def test_missing_slash_append_slash_true_script_name(self):\n+    def test_missing_slash_append_slash_true_repeated_slashes_in_path(self):\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+\n+        # Known URL with repeated slashes and query string\n+        known_url_with_slashes = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url_with_slashes[:-1]}//?id=1\")\n+        self.assertRedirects(response, f\"{known_url_with_slashes}?id=1\", status_code=301, fetch_redirect_response=False)\n         superuser = User.objects.create_user(\n             username=\"staff\",\n             password=\"secret\",\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..4598a97 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,16 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        test_mimetype_extensions = (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_mimetype_extensions:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "",
  "django__django-16662": "",
  "django__django-16801": "",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..b79d98f 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -798,7 +798,7 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = SongAdmin(Song, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[1]' is not a callable, an attribute \"\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent', which is not a callable, an attribute \"\n                 \"of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n                 obj=SongAdmin,\n                 id=\"admin.E035\",\n@@ -814,7 +814,7 @@ class SystemChecksTestCase(SimpleTestCase):\n         errors = CityInline(State, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[0]' is not a callable, an attribute \"\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is not a callable, an attribute \"\n                 \"of 'CityInline', or an attribute of 'admin_checks.City'.\",\n                 obj=CityInline,\n                 id=\"admin.E035\",\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..1a504ac 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,4 +1,6 @@\n+\n from django.db.models import Q\n+from .models import Number\n from django.test import TestCase\n \n from .models import Number\n@@ -64,4 +66,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..b213fe5 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,7 +641,34 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n-    def test_failing_migration(self):\n+    def test_makemigrations_router_calls(self):\n+        \"\"\"\n+        Test that makemigrations calls router.allow_migrate() correctly.\n+        \"\"\"\n+        with mock.patch('django.db.migrations.loader.MigrationLoader.build_graph', return_value=None), \\\n+             mock.patch('django.core.management.commands.makemigrations.Command.check_migrations') as check_migrations_mock, \\\n+             mock.patch('django.db.migrations.migration.MigrationRecorder') as MigrationRecorderMock:\n+\n+            allow_migrate = mock.Mock(return_value=True)\n+            with self.settings(\n+                DATABASE_ROUTERS=['migrations.routers.TestRouter']\n+            ):\n+                with mock.patch.object(TestRouter, 'allow_migrate', allow_migrate):\n+                    apps.register_model('migrations', UnicodeModel)\n+                    apps.register_model('migrations2', SomeOtherModel)\n+\n+                    call_command('makemigrations', verbosity=0)\n+\n+                    # Check that allow_migrate is called only with correct (app_label, model) pairs.\n+                    allow_migrate.assert_any_call('default', 'migrations', model_name='UnicodeModel')\n+                    allow_migrate.assert_any_call('default', 'migrations2', model_name='SomeOtherModel')\n+\n+                    # Ensure no incorrect (app_label, model) pairs are called.\n+                    incorrect_calls = [\n+                        call for call in allow_migrate.mock_calls\n+                        if call[1][1] not in ['migrations', 'migrations2']\n+                    ]\n+                    self.assertFalse(incorrect_calls, \"Incorrect allow_migrate() calls detected: %s\" % incorrect_calls)\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n \n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..3860655 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -297,6 +297,32 @@ class PaginationTests(SimpleTestCase):\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_empty_paginator(self):\n+        paginator = Paginator([], 2)\n+        page_list = list(paginator)\n+        self.assertEqual(page_list, [])\n+\n+    def test_single_item_paginator(self):\n+        paginator = Paginator([1], 1)\n+        page_list = list(paginator)\n+        self.assertEqual(len(page_list), 1)\n+        self.assertEqual(list(page_list[0]), [1])\n+\n+    def test_multiple_full_pages(self):\n+        paginator = Paginator([1, 2, 3, 4, 5, 6], 2)\n+        page_list = list(paginator)\n+        self.assertEqual(len(page_list), 3)\n+        self.assertEqual(list(page_list[0]), [1, 2])\n+        self.assertEqual(list(page_list[1]), [3, 4])\n+        self.assertEqual(list(page_list[2]), [5, 6])\n+\n \n class ModelPaginationTests(TestCase):\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..19a2a17 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,40 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import matplotlib.pyplot as plt\n+import numpy as np\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    # Original test case\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0, f\"First bin edge is {bins[0]}, expected 0\"\n+    assert bins[-1] == 1, f\"Last bin edge is {bins[-1]}, expected 1\"\n+\n+    # Additional test with normal distribution\n+    _, bins, _ = plt.hist(np.random.randn(1000), bins=50, range=(-3, 3), density=True)\n+    assert bins[0] == -3, f\"First bin edge is {bins[0]}, expected -3\"\n+    assert bins[-1] == 3, f\"Last bin edge is {bins[-1]}, expected 3\"\n+\n+    # Additional test with exponential distribution\n+    _, bins, _ = plt.hist(np.random.exponential(scale=1, size=1000), range=(0, 5), density=True)\n+    assert bins[0] == 0, f\"First bin edge is {bins[0]}, expected 0\"\n+    assert bins[-1] == 5, f\"Last bin edge is {bins[-1]}, expected 5\"\n+\n+    # Test with density=False\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0, f\"First bin edge is {bins[0]}, expected 0\"\n+    assert bins[-1] == 1, f\"Last bin edge is {bins[-1]}, expected 1\"\n+\n+    # Test using weights\n+    weights = np.random.rand(10)\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True, weights=weights)\n+    assert bins[0] == 0, f\"First bin edge is {bins[0]}, expected 0\"\n+    assert bins[-1] == 1, f\"Last bin edge is {bins[-1]}, expected 1\"\n+\n+    # Test cumulative histogram\n+    _, bins, _ = plt.hist(np.random.rand(100), bins=10, range=(0, 1), density=True, cumulative=True)\n+    assert bins[0] == 0, f\"First bin edge is {bins[0]}, expected 0\"\n+    assert bins[-1] == 1, f\"Last bin edge is {bins[-1]}, expected 1\"\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6400,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..c14f7d0 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -930,6 +930,26 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (-3, 5)\n     plt.close()\n \n+def test_log_scale_axis_inversion():\n+    # Test that log scale axes can be inverted using limits without errors\n+\n+    fig, ax = plt.subplots()\n+    ax.set_yscale('log')\n+    ax.set_ylim(100, 1)  # Invert the axis using limits\n+    assert ax.get_ylim() == (100, 1)\n+    \n+    ax.set_ylim(1, 100)  # Check reversing inversion works\n+    assert ax.get_ylim() == (1, 100)\n+\n+    ax.set_xscale('log')\n+    ax.set_xlim(100, 1)  # Invert x-axis using limits\n+    assert ax.get_xlim() == (100, 1)\n+    \n+    ax.set_xlim(1, 100)  # Check reversing x-axis inversion works\n+    assert ax.get_xlim() == (1, 100)\n+\n+    plt.close()\n+\n     fig, ax = plt.subplots()\n     ax.invert_yaxis()\n     ax.plot([-5, -3, 2, 4], [1, 2, -3, 5])\n@@ -938,6 +958,26 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+def test_log_scale_axis_inversion():\n+    # Test that log scale axes can be inverted using limits without errors\n+\n+    fig, ax = plt.subplots()\n+    ax.set_yscale('log')\n+    ax.set_ylim(100, 1)  # Invert the axis using limits\n+    assert ax.get_ylim() == (100, 1)\n+    \n+    ax.set_ylim(1, 100)  # Check reversing inversion works\n+    assert ax.get_ylim() == (1, 100)\n+\n+    ax.set_xscale('log')\n+    ax.set_xlim(100, 1)  # Invert x-axis using limits\n+    assert ax.get_xlim() == (100, 1)\n+    \n+    ax.set_xlim(1, 100)  # Check reversing x-axis inversion works\n+    assert ax.get_xlim() == (1, 100)\n+\n+    plt.close()\n+\n \n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..68bcd2d 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,6 +6960,27 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure without clearing axes\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure with clearing axes\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+    # Verify that the tick labels are consistent with the shared axes configuration.\n \n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..87cb6d5 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -311,4 +311,20 @@ def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+\n+def test_no_deprecation_on_empty_and_mixed_data():\n+    \"\"\"Test that no deprecation warning is emitted on empty and mixed datasets.\"\"\"\n+    # Test with empty data\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    with pytest.warns(None) as recorded:\n+        ax.plot([], [])\n+    assert len(recorded) == 0, \"Deprecation warning was emitted on empty data\"\n+\n+    # Test with mixed types data\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    with pytest.warns(None) as recorded:\n+        ax.plot([\"a\", 1, \"b\"], [2, \"c\", 3])\n+    assert len(recorded) == 0, \"Deprecation warning was emitted on mixed data\"\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..4c2211d 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -927,12 +927,88 @@ def test_negative_boundarynorm():\n     norm = BoundaryNorm(clevs, cmap.N)\n     cb = fig.colorbar(cm.ScalarMappable(cmap=cmap, norm=norm), cax=ax)\n     np.testing.assert_allclose(cb.ax.get_ylim(), [clevs[0], clevs[-1]])\n+\n+def test_colorbar_extend_both_with_drawing_edges():\n+    # Import required components\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    import matplotlib.colors as mcolors\n+    from matplotlib.colorbar import Colorbar\n+\n+    # Define the colormap, bounds, and properties\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(10)\n+    nb_colors = len(bounds) + 1\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend='both')\n+\n+    # Create a figure and axis for the colorbar plot\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal', drawedges=True)\n+\n+    # Expected segments based on the provided code,\n+    # need to ensure lines are drawn at extremities\n+    expected_segments = [\n+        np.array([[0., 0.], [0., 1.]]),\n+        np.array([[1., 0.], [1., 1.]]),\n+        np.array([[2., 0.], [2., 1.]]),\n+        np.array([[3., 0.], [3., 1.]]),\n+        np.array([[4., 0.], [4., 1.]]),\n+        np.array([[5., 0.], [5., 1.]]),\n+        np.array([[6., 0.], [6., 1.]]),\n+        np.array([[7., 0.], [7., 1.]]),\n+        np.array([[8., 0.], [8., 1.]]),\n+        np.array([[9., 0.], [9., 1.]]),\n+        np.array([[10., 0.], [10., 1.]])\n+    ]\n+\n+    # Assertion to check if the dividers added match the expected segments\n+    assert np.array_equal(cbar.dividers.get_segments(), expected_segments)\n     np.testing.assert_allclose(cb.ax.get_yticks(), clevs)\n \n     clevs = np.arange(85, 94)\n     norm = BoundaryNorm(clevs, cmap.N)\n     cb = fig.colorbar(cm.ScalarMappable(cmap=cmap, norm=norm), cax=ax)\n     np.testing.assert_allclose(cb.ax.get_ylim(), [clevs[0], clevs[-1]])\n+\n+def test_colorbar_extend_both_with_drawing_edges():\n+    # Import required components\n+    import matplotlib.pyplot as plt\n+    import numpy as np\n+    import matplotlib.colors as mcolors\n+    from matplotlib.colorbar import Colorbar\n+\n+    # Define the colormap, bounds, and properties\n+    cmap = plt.get_cmap(\"viridis\")\n+    bounds = np.arange(10)\n+    nb_colors = len(bounds) + 1\n+    colors = cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    cmap, norm = mcolors.from_levels_and_colors(bounds, colors, extend='both')\n+\n+    # Create a figure and axis for the colorbar plot\n+    plt.figure(figsize=(5, 1))\n+    ax = plt.subplot(111)\n+    cbar = Colorbar(ax, cmap=cmap, norm=norm, orientation='horizontal', drawedges=True)\n+\n+    # Expected segments based on the provided code,\n+    # need to ensure lines are drawn at extremities\n+    expected_segments = [\n+        np.array([[0., 0.], [0., 1.]]),\n+        np.array([[1., 0.], [1., 1.]]),\n+        np.array([[2., 0.], [2., 1.]]),\n+        np.array([[3., 0.], [3., 1.]]),\n+        np.array([[4., 0.], [4., 1.]]),\n+        np.array([[5., 0.], [5., 1.]]),\n+        np.array([[6., 0.], [6., 1.]]),\n+        np.array([[7., 0.], [7., 1.]]),\n+        np.array([[8., 0.], [8., 1.]]),\n+        np.array([[9., 0.], [9., 1.]]),\n+        np.array([[10., 0.], [10., 1.]])\n+    ]\n+\n+    # Assertion to check if the dividers added match the expected segments\n+    assert np.array_equal(cbar.dividers.get_segments(), expected_segments)\n     np.testing.assert_allclose(cb.ax.get_yticks(), clevs)\n \n     clevs = np.arange(-3, 3)\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..54a9fcd 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,10 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+from matplotlib import get_backend, rc_context\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..7fc2ed5 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -14,12 +14,26 @@ from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n+import pytest\n import numpy as np\n \n \n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_false_3d(fig_test, fig_ref):\n+    # This test verifies that a 3D subplot can be made invisible\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    \n+    # Data\n+    ax_test.scatter(1, 1, 1)\n+    ax_ref.scatter(1, 1, 1)\n+    \n+    # Make test axis invisible\n+    ax_test.set_visible(False)\n \n def test_aspect_equal_error():\n     fig = plt.figure()\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..152d341 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -139,14 +139,30 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_ref = Rectangle(loc, width, height, angle=angle)\n     ax_ref.add_patch(rect_ref)\n     assert rect_ref.get_angle() == angle\n+from matplotlib.testing.decorators import check_figures_equal\n+import matplotlib.patches as mpatches\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=[\"png\"])\n+def test_dash_offset_effect_on_patch_objects(fig_test, fig_ref):\n+    \"\"\"Test the effect of dash offset on patch objects to ensure it works correctly.\"\"\"\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    # Reference Rectangle without dash offset\n+    rect_ref = mpatches.Rectangle((0.1, 0.1), 0.8, 0.8, linewidth=3, edgecolor='b', linestyle=(0, [6, 6]))\n+    rect_ref_offset = mpatches.Rectangle((0.1, 0.1), 0.8, 0.8, linewidth=3, edgecolor='r', linestyle=(6, [6, 6]))\n+    ax_ref.add_patch(rect_ref)\n+    ax_ref.add_patch(rect_ref_offset)\n \n-    # Check that when the angle is updated after adding to an Axes, that the\n-    # patch is marked stale and redrawn in the correct location\n-    rect_test = Rectangle(loc, width, height)\n-    assert rect_test.get_angle() == 0\n+    # Test Rectangle with dash offset\n+    rect_test = mpatches.Rectangle((0.1, 0.1), 0.8, 0.8, linewidth=3, edgecolor='b', linestyle=(0, [6, 6]))\n+    rect_test_offset = mpatches.Rectangle((0.1, 0.1), 0.8, 0.8, linewidth=3, edgecolor='r', linestyle=(6, [6, 6]))\n     ax_test.add_patch(rect_test)\n-    rect_test.set_angle(angle)\n-    assert rect_test.get_angle() == angle\n+    ax_test.add_patch(rect_test_offset)\n+\n+    assert rect_test.get_linestyle() == (0, [6, 6])\n+    assert rect_test_offset.get_linestyle() == (6, [6, 6])\n \n \n def test_negative_rect():\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..ad7234c 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,9 +2866,22 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+def test_stackplot_color_cycle_compatibility():\n+    import matplotlib.pyplot as plt\n+    from matplotlib.patches import Rectangle\n+    import numpy as np\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n-def test_stackplot_baseline():\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    # Initial state testing with CN colors.\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+\n+    # After stackplot, ensure the cycler can still handle CN colors correctly.\n+    ax.plot([1, 3], [1, 3], color='C0')  # Should not raise any ValueError\n+\n+    plt.close(fig)\n     np.random.seed(0)\n \n     def layers(n, m):\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..56109de 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -4,8 +4,10 @@ import io\n import numpy as np\n from numpy.testing import assert_allclose\n import pytest\n-\n-from matplotlib.testing.decorators import image_comparison\n+import pytest\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import HPacker, VPacker, DrawingArea\n+from numpy.testing import assert_allclose\n import matplotlib.pyplot as plt\n import matplotlib.patches as mpatches\n import matplotlib.lines as mlines\n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..9b36dfa 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,12 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib import colors as mcolors\n+from numpy.testing import assert_array_equal, assert_array_almost_equal\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n@@ -30,7 +36,19 @@ def test_create_lookup_table(N, result):\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n \n-def test_resampled():\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float])\n+def test_index_dtype_no_deprecation_warning(dtype):\n+    \"\"\"\n+    Test to ensure no deprecation warnings occur for out-of-bound dtype conversions\n+    in numpy >= 1.24 when using color map indexing.\n+    \"\"\"\n+    cm = plt.get_cmap(\"viridis\")\n+    \n+    with pytest.warns(None) as record:\n+        cm(np.array([257], dtype=dtype))\n+    \n+    # Verify no warnings have been recorded\n+    assert len(record) == 0\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n     here we test the method for LinearSegmentedColormap as well.\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..fd9bbc4 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -581,6 +581,27 @@ class TestSpectral:\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n+    def test_psd_window_flattop(self):\n+        if self.NFFT_density is None:\n+            return\n+        # Create a flattop window using scipy\n+        flattop_window = signal.windows.flattop(self.NFFT_density_real)\n+\n+        # Calculate power spectral density with the flattop window\n+        spec, fsp = mlab.psd(x=self.y,\n+                             NFFT=self.NFFT_density,\n+                             Fs=self.Fs,\n+                             noverlap=0,\n+                             sides=self.sides,\n+                             window=flattop_window,\n+                             scale_by_freq=True)\n+\n+        # Calculate manually the expected spec after correction factor\n+        manual_spec = spec * (flattop_window.sum()**2) / (flattop_window**2).sum()\n+\n+        # Compare calculated spec to manual spec\n+        assert_allclose(spec, manual_spec, atol=1e-08)\n+\n     def test_psd_window_hanning(self):\n         if self.NFFT_density is None:\n             return\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..f8a13fa 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,12 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+import matplotlib as mpl\n+\n+...\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..19af9f1 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -43,6 +43,32 @@ def test_simple():\n     ax.set_yscale('log')\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n+def test_pickle_figure_with_aligned_labels():\n+    import matplotlib.pyplot as plt\n+    import pickle\n+    from io import BytesIO\n+\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Calling align_labels() should not make pickling fail\n+    fig.align_labels()\n+    \n+    # Attempt to pickle the figure\n+    try:\n+        pickle.dumps(fig)\n+        print(\"Pickling successful\")\n+    except Exception as e:\n+        print(f\"Pickling failed: {e}\")\n+\n \n def _generate_complete_test_figure(fig_ref):\n     fig_ref.set_size_inches((10, 6))\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..4513b11 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,45 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n \n-def test_hexbin_log_clim():\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..484c367 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,49 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths(fig_test, fig_ref):\n+    # Creating contour plots on test and reference figures\n+    cs_test = fig_test.subplots().contour([[0, 1], [1, 2]])\n+    cs_ref = fig_ref.subplots().contour([[0, 1], [1, 2]])\n+    \n+    # Original paths for reference contour set\n+    original_paths = cs_ref.get_paths()\n+\n+    # Assert that test paths and reference paths are initially the same\n+    assert cs_test.get_paths() == original_paths\n+\n+    # Apply transformation (for test purposes, just use the same)\n+    transformed_paths = cs_ref.get_paths()\n+\n+    # Set the paths on test contour set\n+    cs_test.set_paths(transformed_paths)\n+\n+    # Assert that they are now equal after set_paths\n+    assert cs_test.get_paths() == transformed_paths\n+\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_transform(fig_test, fig_ref):\n+    # Create contour plots with different grid\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    cs_test = ax_test.contour([[1, 2], [3, 4]])\n+    cs_ref = ax_ref.contour([[-1, -2], [-3, -4]])\n+\n+    # Apply a dummy transformation: reversing paths\n+    transformed_paths = list(reversed(cs_ref.get_paths()))\n+    \n+    # Set transformed paths on the test contour set\n+    cs_test.set_paths(transformed_paths)\n+\n+    # Assert that the paths have been reversed\n+    assert cs_test.get_paths() == transformed_paths\n+\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..c4bc5e6 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,7 +244,17 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n-def test_templates_list(test_apps):\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+def test_none_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(None, __name__)\n+\n+def test_whitespace_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"   \", __name__)\n     from blueprintapp import app\n \n     templates = sorted(app.jinja_env.list_templates())\n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..9a4dc0b 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,10 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n+            (InvalidURL, 'http://user@.example.com'),\n+            (InvalidURL, 'http://#'),\n+            (InvalidURL, 'ftp://example.com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..e54b604 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,6 +2308,24 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n+def test_setitem_does_not_coerce_objects_with_values():\n+    import numpy as np\n+    import xarray as xr\n+\n+    class HasValues:\n+        values = 5\n+\n+    good_indexed = xr.DataArray([None], dims=['dim_0'])\n+    bad_indexed = xr.DataArray([None], dims=['dim_0'])\n+\n+    # This should work correctly\n+    good_indexed.loc[{'dim_0': 0}] = set()\n+    assert good_indexed.values[0] == set()\n+\n+    # This should not coerce the value and should store the object itself\n+    bad_indexed.loc[{'dim_0': 0}] = HasValues()\n+    assert isinstance(bad_indexed.values[0], HasValues)\n+    assert bad_indexed.values[0].values == 5\n \n def test_raise_no_warning_for_nan_in_binary_ops():\n     with pytest.warns(None) as record:\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex 274cb25..98757b6 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -3479,6 +3479,18 @@ class TestDataArray:\n         assert_identical(da_cp['a'], expected_cp)\n \n         assert_identical(da['a'], expected_orig)\n+    \n+    def test_unicode_index_copy(self):\n+        # Test for DataArray\n+        arr = xr.DataArray(\n+            [1, 2, 3],\n+            dims=\"x\",\n+            coords={\"x\": np.array([\"a\", \"b\", \"c\"], dtype=\"<U1\")}\n+        )\n+        arr_copy = arr.copy(deep=True)\n+        assert arr.coords[\"x\"].dtype.type is np.unicode_\n+        assert arr_copy.coords[\"x\"].dtype.type is np.unicode_\n+        assert_identical(arr, arr_copy)\n \n     def test_real_and_imag(self):\n         array = DataArray(1 + 2j)\n",
  "pydata__xarray-3151": "",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..1da2d81 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,6 +2310,29 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        import numpy as np\n+        from collections import OrderedDict\n+        \n+        # Test single quantile with keep_attrs=False (default)\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units':'K'})\n+        out = da.quantile(.9, dim='x')\n+        assert out.attrs == OrderedDict()  # ensure attrs are not copied\n+        \n+        # Test single quantile with keep_attrs=True\n+        out = da.quantile(.9, dim='x', keep_attrs=True)\n+        assert out.attrs == da.attrs  # ensure attrs are copied\n+\n+        # Test multiple quantiles with keep_attrs=True\n+        out = da.quantile([.5, .9], dim='x', keep_attrs=True)\n+        assert out.attrs == da.attrs  # ensure attrs are copied\n+\n+        # Test with no attrs (edge case)\n+        da_no_attrs = xr.DataArray([0, 0], dims=\"x\")\n+        out_no_attrs = da_no_attrs.quantile(.9, dim='x', keep_attrs=True)\n+        assert out_no_attrs.attrs == OrderedDict()  # attrs remain empty\n+\n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n         vm = self.va.mean()\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..9f94b7e 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,7 +160,36 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n-    def test_merge_broadcast_equals(self):\n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+        expected = xr.merge([ds, da])\n+        \n+        # Test merging Dataset with DataArray using Dataset.merge\n+        assert_identical(ds.merge(da), expected)\n+\n+        # Test merging using top-level merge function (for completeness)\n+        assert_identical(xr.merge([ds, da]), expected)\n+\n+        # Additional test with a more complex DataArray\n+        da2 = xr.DataArray(data=[1, 2, 3], dims=\"x\", name=\"c\")\n+        expected2 = xr.merge([ds, da2])\n+        assert_identical(ds.merge(da2), expected2)\n+\n+        # Test with a dataset that already contains some of the variables\n+        ds2 = xr.Dataset({\"a\": 0, \"b\": 2})\n+        expected3 = xr.merge([ds2, da])\n+        assert_identical(ds2.merge(da), expected3)\n+\n+        # Test with DataArray having multiple dimensions\n+        da3 = xr.DataArray(data=[[1, 2], [3, 4]], dims=(\"x\", \"y\"), name=\"d\")\n+        expected4 = xr.merge([ds, da3])\n+        assert_identical(ds.merge(da3), expected4)\n+\n+        # Verify behavior with conflicting names and dimensions\n+        ds3 = xr.Dataset({\"b\": (\"x\", [5, 6])})\n+        with pytest.raises(xr.MergeError):\n+            ds3.merge(da2)\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n         actual = ds1.merge(ds2)\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..5fab9f7 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,6 +109,28 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds2.attrs[\"x\"] == 1\n+        assert ds3.attrs[\"x\"] == 2\n+\n+    def test_merge_attrs_override_no_side_effects(self):\n+        ds1 = xr.Dataset(attrs={\"a\": \"attr1\"})\n+        ds2 = xr.Dataset(attrs={\"a\": \"attr2\", \"b\": \"attr2\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"a\"] = \"changed\"\n+        ds3.attrs[\"b\"] = \"changed\"\n+        assert ds1.attrs[\"a\"] == \"attr1\"\n+        assert \"b\" not in ds1.attrs\n+        assert ds2.attrs[\"a\"] == \"attr2\"\n+        assert ds2.attrs[\"b\"] == \"attr2\"\n+        assert ds3.attrs[\"a\"] == \"changed\"\n+        assert ds3.attrs[\"b\"] == \"changed\"\n+\n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..1ad7e19 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,8 +1921,19 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n-\n-@pytest.mark.parametrize(\"use_dask\", [True, False])\n+def test_where_attrs() -> None:\n+    # Setup test data\n+    data = xr.DataArray(np.ones([10, 10], dtype=np.int8), dims=[\"x\", \"y\"])\n+    data.attrs[\"attr_1\"] = \"test1\"\n+    data.attrs[\"attr_2\"] = \"test2\"\n+\n+    # Call xr.where and preserve attributes\n+    result = xr.where(data == 1, 5, 0, keep_attrs=True)\n+\n+    # Expect the attributes to be preserved\n+    assert result.attrs == data.attrs\n+    # Expect the dtype to be preserved\n+    assert result.dtype == data.dtype\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n     if use_dask and not has_dask:\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..5a2506a 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -7,8 +7,23 @@ import pytest\n import xarray as xr\n from xarray.coding import variables\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n-\n-from . import assert_allclose, assert_equal, assert_identical, requires_dask\n+import numpy as np\n+from . import assert_allclose, assert_equal, assert_identical, requires_dask, raises, requires_cftime\n+\n+def test_signed_byte_handling_with_pydap():\n+    url = \"https://observations.ipsl.fr/thredds/dodsC/EUREC4A/PRODUCTS/testdata/netcdf_testfiles/test_NC_BYTE_neg.nc\"\n+    ds_netcdf4 = xr.open_dataset(url, engine=\"netcdf4\")\n+    ds_pydap = xr.open_dataset(url, engine=\"pydap\")\n+    \n+    # Verify whether the netCDF4 engine handles the hack correctly\n+    assert ds_netcdf4.test.values[0] == -128.0 \n+    assert ds_netcdf4.test.values[1] == -1.0\n+    \n+    # Verify whether pydap engine doesn't handle it correctly\n+    assert ds_pydap.test.values[0] == 128.0\n+    assert ds_pydap.test.values[1] == 255.0\n+    with pytest.warns(SerializationWarning, match=\"variable 'test' has _Unsigned attribute but is not of integer type. Ignoring attribute.\"):\n+        xr.open_dataset(url, engine=\"pydap\")\n \n with suppress(ImportError):\n     import dask.array as da\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..fb9af40 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1912,6 +1912,19 @@ def test_dot_align_coords(use_dask) -> None:\n         expected = (da_a * da_b).sum([\"a\", \"b\"])\n         xr.testing.assert_allclose(expected, actual)\n \n+def test_where_scalar_with_keep_attrs() -> None:\n+    # Test where with scalar values and keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n+    # Test where with scalar values and keep_attrs=False\n+    cond = xr.DataArray([False, True, False], dims=\"x\")\n+    actual = xr.where(cond, 0, 1, keep_attrs=False)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected, actual)\n+\n \n def test_where() -> None:\n     cond = xr.DataArray([True, False], dims=\"x\")\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..401942f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2000,6 +2000,26 @@ def test_where_attrs() -> None:\n             xr.Dataset({\"a\": (\"x\", [1, 2, 3]), \"b\": (\"y\", [3, 4, 5])}),\n             id=\"dataset-dataset\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([0.0, 1e3, 2e3], dims=\"x\"),\n+            id=\"timedelta-fixed\",\n+        ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([500, 1000, 1500], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray(\n+                [1e-3, 0.5, -2.5, 3], dims=\"degree\", coords={\"degree\": [3, 2, 1, 0]}\n+            ),\n+            xr.DataArray(\n+                [1.0, 8.0, 27.0], dims=\"x\"\n+            ),\n+            id=\"complex-polynomial-timedelta\",\n+        ),\n         pytest.param(\n             xr.DataArray(pd.date_range(\"1970-01-01\", freq=\"s\", periods=3), dims=\"x\"),\n             xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..5c411c9 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,7 +221,19 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n-    def test_repr(self) -> None:\n+    def test_chunks_attribute_on_zarr(self) -> None:\n+        # Create a dataset with inaccessible data store\n+        store = InaccessibleVariableDataStore()\n+        create_test_data().dump_to_store(store)\n+        ds = open_dataset(store)\n+\n+        # Access chunks and ensure no data has been accessed yet\n+        with pytest.raises(UnexpectedDataAccess, match=\"Tried to access\"):\n+            ds.chunks\n+\n+        # Ensure that accessing chunks attribute doesn't load data\n+        assert isinstance(ds.chunks, dict)\n+        assert all(v is None for v in ds.chunks.values())\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n         # need to insert str dtype at runtime to handle different endianness\n",
  "pydata__xarray-6744": "diff --git a/xarray/tests/test_rolling.py b/xarray/tests/test_rolling.py\nindex 0a9ef75..48d721b 100644\n--- a/xarray/tests/test_rolling.py\n+++ b/xarray/tests/test_rolling.py\n@@ -26,7 +26,17 @@ pytestmark = [\n \n \n class TestDataArrayRolling:\n-    @pytest.mark.parametrize(\"da\", (1, 2), indirect=True)\n+    @pytest.mark.parametrize(\"center\", [True, False])\n+    @pytest.mark.parametrize(\"size\", [1, 2, 3, 7])\n+    def test_rolling_iter_with_center(self, center: bool, size: int) -> None:\n+        my_data = xr.DataArray(np.arange(1, 10), dims=\"x\")\n+        rolling_obj = my_data.rolling(x=size, center=center)\n+        rolling_means = [window.mean().values for _, window in rolling_obj]\n+        \n+        expected_rolling_means = my_data.rolling(x=size, center=center).mean().values\n+        \n+        # Check that both methods of rolling (manual and built-in) yield the same results\n+        np.testing.assert_allclose(rolling_means, expected_rolling_means, equal_nan=True)\n     def test_rolling_iter(self, da) -> None:\n         rolling_obj = da.rolling(time=7)\n         rolling_obj_mean = rolling_obj.mean()\n",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..ef9c93e 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -493,12 +493,32 @@ def test_get_map_data() -> None:\n             sim.append_stream(source_fname, stream)\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n+import pytest\n+from io import StringIO\n+from contextlib import redirect_stdout\n+from pylint.checkers.similar import Run\n+\n+def test_set_duplicate_lines_to_zero_no_detection():\n+    # Test that setting min_similarity_lines to 0 results in no duplication check.\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        Run([\"--duplicates=0\", \"test_file1.py\", \"test_file2.py\"])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n \n-    assert len(expected_linelists) == len(data)\n+def test_set_duplicate_lines_to_non_zero_detection():\n+    # Test that setting min_similarity_lines to a non-zero value does result in duplication checks.\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        # Assuming test_file1.py and test_file2.py have some duplicates\n+        Run([\"--duplicates=3\", \"test_file1.py\", \"test_file2.py\"])\n+    assert ex.value.code == 0\n+    output_str = output.getvalue()\n+    assert \"Duplicated code found\" in output_str\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n     ):\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..0a3d33d 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,29 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pytest import CaptureFixture\n+from pylint.lint.run import Run\n+from pylint.utils import EMPTY_MODULE\n+import pytest\n+\n+def test_short_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the -v flag does not expect an argument.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+    assert \"expected one argument\" not in output.err\n+\n+def test_short_verbose_with_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that providing an argument to -v fails as expected.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-v\", \"extra_arg\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"expected one argument\" in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..cb67c91 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1227,6 +1227,58 @@ class TestRunTC:\n         # Error code should not include bit-value 1 for crash\n         assert not ex.value.code % 2\n \n+    def test_recursive_ignore_behavior(self):\n+        \"\"\"Tests recursive run of linter with various ignore parameters.\"\"\"\n+        # Define the directory where the test data is located\n+        test_data_dir = join(HERE, \"regrtest_data\", \"directory\")\n+\n+        # Test with --ignore flag\n+        self._runtest(\n+            [\n+                test_data_dir,\n+                \"--recursive=y\",\n+                \"--ignore=ignored_subdirectory\",\n+            ],\n+            code=0,\n+        )\n+\n+        # Test with --ignore-paths flag\n+        self._runtest(\n+            [\n+                test_data_dir,\n+                \"--recursive=y\",\n+                \"--ignore-paths=.*ignored_subdirectory.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        # Test with --ignore-patterns flag\n+        self._runtest(\n+            [\n+                test_data_dir,\n+                \"--recursive=y\",\n+                \"--ignore-patterns=ignored_.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        # Ensure 'failing.py' in 'ignored_subdirectory' is not linted\n+        ignored_file = os.path.abspath(\n+            join(test_data_dir, \"ignored_subdirectory\", \"failing.py\")\n+        )\n+        run = Run(\n+            [\n+                \"--recursive=y\",\n+                \"--ignore=ignored_subdirectory\",\n+                test_data_dir\n+            ],\n+            exit=False,\n+        )\n+        linted_files = [file_item.filepath for file_item in run.linter._iterate_file_descrs(\n+            tuple(run.linter._discover_files([test_data_dir]))\n+        )]\n+        assert ignored_file not in linted_files\n+\n     def test_regression_recursive(self):\n         self._test_output(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=n\"],\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "",
  "pylint-dev__pylint-7277": "",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..ae2ffe5 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,8 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n@@ -172,6 +174,28 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n \n+def test_caplog_get_records_after_clear(caplog):\n+    # Verify initial state matches\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    # Initially, both should be empty\n+    verify_consistency()\n+    \n+    # Log a warning\n+    logging.warning(\"test\")\n+    verify_consistency()\n+    \n+    # Clear the caplog records and check consistency\n+    caplog.clear()\n+    verify_consistency()\n+    \n+    # Log again after clear and ensure they match\n+    logging.warning(\"test_after_clear\")\n+    verify_consistency()\n+    assert [record.getMessage() for record in caplog.records] == [\"test_after_clear\"]\n+    assert [record.getMessage() for record in caplog.get_records(\"call\")] == [\"test_after_clear\"]\n+\n def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n     pytester.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_debugging.py b/testing/test_debugging.py\nindex 912abd7..c4af4e3 100644\n--- a/testing/test_debugging.py\n+++ b/testing/test_debugging.py\n@@ -73,6 +73,16 @@ def custom_debugger_hook():\n     del _pytest._CustomDebugger  # type: ignore\n \n \n+import unittest\n+\n+class SkippedClassTestCase(unittest.TestCase):\n+    def setUp(self):\n+        self.resource = \"Initialized\"\n+        \n+    def tearDown(self):\n+        self.resource = \"Teardown was run\"\n+        xxx\n+\n class TestPDB:\n     @pytest.fixture\n     def pdblist(self, request):\n@@ -176,6 +186,21 @@ class TestPDB:\n         self.flush(child)\n \n     def test_pdb_unittest_skip(self, pytester: Pytester) -> None:\n+        \"\"\"Ensure tearDown is not executed for skipped classes even with --pdb\"\"\"\n+        p1 = pytester.makepyfile(\n+            \"\"\"\n+            import unittest\n+            @unittest.skip(\"Testing class-level skip\")\n+            class SkippedClass(unittest.TestCase):\n+                def tearDown(self):\n+                    xxx\n+                def test_method(self):\n+                    pass\n+            \"\"\"\n+        )\n+        result = pytester.runpytest_subprocess(\"--pdb\", p1)\n+        result.stdout.fnmatch_lines([\"*============================== 1 skipped in*\"])\n+        assert \"NameError: name 'xxx' is not defined\" not in result.stdout.str()\n         \"\"\"Test for issue #2137\"\"\"\n         p1 = pytester.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..642b0b2 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1045,6 +1045,16 @@ class TestFDCapture(object):\n             cap.resume()\n             os.write(1, b\"but now\")\n             sys.stdout.write(\" yes\\n\")\n+        \n+        # New test case to ensure sys.stdout.mode does not include 'b'\n+        def test_sys_stdout_mode_no_binary(self, capfd):\n+            import sys\n+            # Capture the current mode of sys.stdout\n+            captured = capfd.readouterr()\n+            sys.stdout.write(\"Checking mode...\\n\")\n+            captured_after = capfd.readouterr()\n+            assert \"b\" not in sys.stdout.mode, \"sys.stdout is incorrectly advertising binary mode\"\n+            assert captured_after.out == \"Checking mode...\\n\"\n             s = cap.snap()\n             assert s == \"but now yes\\n\"\n             cap.suspend()\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/python/integration.py b/testing/python/integration.py\nindex 044a31a..957c844 100644\n--- a/testing/python/integration.py\n+++ b/testing/python/integration.py\n@@ -177,8 +177,20 @@ class TestMockDecoration:\n         )\n         reprec = testdir.inline_run()\n         reprec.assertoutcome(passed=2)\n-\n-    def test_mock(self, testdir):\n+    def test_mock_sentinel_check_against_numpy_array(self, testdir):\n+        \"\"\"Ensure numpy arrays used in patches do not raise ValueError during test collection.\"\"\"\n+        testdir.makepyfile(\n+            dummy=\"\"\"\n+            import numpy as np\n+            from unittest.mock import patch\n+            class TestNumpyPatch:\n+                @patch('dummy.TEST_ARRAY', new=np.array([-5.5, 3.0]))\n+                def test_using_numpy_patch(self):\n+                    assert True  # Just ensure the patched numpy array doesn't raise an error\n+            \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=1)\n         pytest.importorskip(\"mock\", \"1.0.1\")\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..aac0b65 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -126,8 +126,7 @@ class TestPaste(object):\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n         assert url == \"https://bpaste.net\"\n-        assert \"lexer=%s\" % lexer in data.decode()\n+        assert \"lexer=text\" in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..dcd009a 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -703,6 +703,28 @@ class Test_genitems:\n         assert items[2].name == \"testmethod_one\"\n \n         # let's also test getmodpath here\n+        # Added new test case to verify correct handling of parameterized cases with tricky characters\n+     \n+    def test_parameterized_special_chars(self, testdir):\n+        p = testdir.makepyfile(\n+            '''\n+            import pytest\n+            \n+            @pytest.mark.parametrize(\"arg0\", [\".[\", \"..[\", \".[something\"])\n+            def test_special_chars(arg0):\n+                assert True\n+            '''\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        assert len(items) == 3\n+        assert items[0].name == \"test_special_chars[.[\"\n+        assert items[1].name == \"test_special_chars[..[\"\n+        assert items[2].name == \"test_special_chars.[something]\"\n+        \n+        # Verifying that the modpath is also correct and does not replace '.[' incorrectly\n+        assert items[0].getmodpath() == \"test_special_chars[.[\"\n+        assert items[1].getmodpath() == \"test_special_chars[..[\"\n+        assert items[2].getmodpath() == \"test_special_chars.[something]\"\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..05af701 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,8 +201,21 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue, BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n \n-def test_dynamic_fixture_request(testdir):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        \"python3\", \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..3a6d44c 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -595,7 +595,29 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*testing stuff*\", \"*1 skipped*\"])\n \n-    def test_skip_no_reason(self, testdir):\n+    def test_mark_skip_with_runxfail(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_func():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_func():2: unconditional skip\", \"*1 skipped*\"])\n+\n+    def test_mark_skipif_with_runxfail(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skipif(True, reason=\"skip if condition met\")\n+            def test_func():\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"SKIPPED [1] test_func():2: skip if condition met\", \"*1 skipped*\"])\n         testdir.makepyfile(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7490": "",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..a47cb02 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -512,6 +512,12 @@ class TestCaptureFixture:\n                 capfd.close()\n             \"\"\"\n         )\n+    \n+    @pytest.mark.parametrize(\"newline\", [\"\\r\", \"\\n\", \"\\r\\n\"])\n+    def test_capfd_preserves_different_line_endings(self, capfd, newline):\n+        print(\"Test case\", end=newline)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(newline)\n         reprec.assertoutcome(passed=1)\n \n     def test_capfdbinary(self, testdir):\n@@ -526,6 +532,12 @@ class TestCaptureFixture:\n                 assert err == b''\n             \"\"\"\n         )\n+    \n+    @pytest.mark.parametrize(\"newline\", [\"\\r\", \"\\n\", \"\\r\\n\"])\n+    def test_capfd_preserves_different_line_endings(self, capfd, newline):\n+        print(\"Test case\", end=newline)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(newline)\n         reprec.assertoutcome(passed=1)\n \n     def test_capsysbinary(self, testdir):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..d03f30f 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -49,8 +50,22 @@ def test_change_level_undo(testdir):\n     result.stdout.fnmatch_lines([\"*log from test1*\", \"*2 failed in *\"])\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n+def test_reset_handler_level(testdir):\n+    \"\"\"Test that handler level is restored after test execution.\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test_one(caplog):\n+            caplog.set_level(logging.ERROR)\n+            assert caplog.handler.level == logging.ERROR\n \n-def test_with_statement(caplog):\n+        def test_two(caplog):\n+            assert caplog.handler.level == 0\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n         logger.info(\"handler INFO level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..7dac0ce 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1178,6 +1179,31 @@ def test_collect_symlink_out_of_tree(testdir):\n     assert result.ret == 0\n \n \n+def test_collect_symlink_nested_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlink to a nested directory is collected.\"\"\"\n+    parent_dir = pytester.mkdir(\"parent_dir\")\n+    nested_dir = parent_dir.mkdir(\"nested_dir\")\n+    nested_dir.joinpath(\"test_nested.py\").write_text(\"def test_nested(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_to_nested\").symlink_to(nested_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_collect_symlink_to_outside_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlink to an outside directory is collected.\"\"\"\n+    outside_dir = pytester.mkdir(\"outside_dir\")\n+    outside_dir.joinpath(\"test_outside.py\").write_text(\"def test_outside(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_to_outside\").symlink_to(outside_dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=1)\n+\n+def test_collect_symlink_to_missing_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlink to a non-existent directory causes no error but no tests.\"\"\"\n+    missing_symlink = pytester.path.joinpath(\"symlink_missing\")\n+    missing_symlink.symlink_to(\"/does/not/exist\", target_is_directory=True)\n+    result = pytester.runpytest()\n+    # No tests should run, but execution should proceed without error.\n+    result.assert_outcomes(passed=0)\n+\n def test_collectignore_via_conftest(testdir):\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n     tests = testdir.mkpydir(\"tests\")\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..cd922e0 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -298,7 +298,27 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n             assert MyTestCase.x == 0\n     \"\"\"\n     )\n-    reprec = pytester.inline_run(testpath)\n+    def test_unittest_setUpClass_fixture_private(pytester: Pytester) -> None:\n+        pytester.makepyfile(\n+            \"\"\"\n+            import unittest\n+\n+            class TestSetUpClass(unittest.TestCase):\n+                @classmethod\n+                def setUpClass(cls):\n+                    pass\n+\n+                def test_dummy(self):\n+                    pass\n+            \"\"\"\n+        )\n+        result = pytester.runpytest(\"--fixtures\")\n+        result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_TestSetUpClass*\")\n+\n+        result = pytester.runpytest(\"--fixtures\", \"-v\")\n+        result.stdout.fnmatch_lines(\n+            [\"*unittest_setUpClass_fixture_TestSetUpClass*\"]\n+        )\n     reprec.assertoutcome(passed=3)\n \n \n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..b3f82fe 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,8 +597,41 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+def test_ridge_classifier_cv_store_cv_values():\n+    \"\"\"Test RidgeClassifierCV's store_cv_values attribute functionality.\"\"\"\n+    import numpy as np\n+    from sklearn.linear_model import RidgeClassifierCV\n \n-def test_ridgecv_sample_weight():\n+    # Sample data\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    # Create RidgeClassifierCV with store_cv_values=True and fit\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    \n+    # Case with single target\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas), (\n+        \"Shape of cv_values_ does not match expected dimensions \"\n+        f\"(n_samples, n_targets, n_alphas): {(n_samples, n_targets, n_alphas)}\"\n+    )\n+\n+    # Case with multi-target\n+    y_multi = np.array([[1, 1, 1, -1, -1],\n+                        [1, -1, 1, -1, 1],\n+                        [-1, -1, 1, -1, -1]]).T\n+    n_targets_multi = y_multi.shape[1]\n+    r.fit(x, y_multi)\n+    assert r.cv_values_.shape == (n_samples, n_targets_multi, n_alphas), (\n+        \"Shape of cv_values_ does not match expected dimensions \"\n+        f\"(n_samples, n_targets_multi, n_alphas): {(n_samples, n_targets_multi, n_alphas)}\"\n+    )\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..bbba6e7 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,15 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+def test_int_overflow_fowlkes_mallows_score():\n+    # Test overflow in fowlkes_mallows_score\n+    x = np.array([1] * (52632 + 2529) + [2] * (14660 + 793) + [3] * (3271 +\n+                 204) + [4] * (814 + 39) + [5] * (316 + 20))\n+    y = np.array([0] * 52632 + [1] * 2529 + [0] * 14660 + [1] * 793 +\n+                 [0] * 3271 + [1] * 204 + [0] * 814 + [1] * 39 + [0] * 316 +\n+                 [1] * 20)\n+\n+    assert_all_finite(fowlkes_mallows_score(x.ravel(), y.ravel()))\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..f41a5a3 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -559,7 +559,27 @@ def test_feature_names():\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n \n-def test_vectorizer_max_features():\n+def test_countvectorizer_with_predefined_vocabulary():\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?'\n+    ]\n+\n+    cv = CountVectorizer(vocabulary=vocab)\n+    \n+    # Ensure get_feature_names does not raise NotFittedError, execution should succeed\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(feature_names, vocab)\n+    \n+    # Transform should work without fitting\n+    X = cv.transform(corpus)\n+    assert_equal(X.shape, (4, 9))  # 4 documents, and 9 features from the predefined vocabulary\n+\n+    # Check that calling transform initializes the vocabulary_\n+    assert_true(hasattr(cv, 'vocabulary_'))\n     vec_factories = (\n         CountVectorizer,\n         TfidfVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..474dc42 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1161,16 +1161,26 @@ def test_search_cv_timing():\n \n     for search in (gs, rs):\n         search.fit(X, y)\n-        for key in ['mean_fit_time', 'std_fit_time']:\n+        for key in ['mean_fit_time', 'std_fit_time', 'refit_time_']:\n             # NOTE The precision of time.time in windows is not high\n             # enough for the fit/score times to be non-zero for trivial X and y\n             assert_true(np.all(search.cv_results_[key] >= 0))\n             assert_true(np.all(search.cv_results_[key] < 1))\n+        \n+        # Check existence, type, and value of refit_time_\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n \n         for key in ['mean_score_time', 'std_score_time']:\n             assert_true(search.cv_results_[key][1] >= 0)\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n+        \n+        # Check existence, type, and value of refit_time_\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n \n \n def test_grid_search_correct_score_results():\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..fed2395 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -482,6 +482,57 @@ def test_logistic_cv():\n     assert_array_almost_equal(lr.coef_, lr_cv.coef_)\n \n     assert_array_equal(lr_cv.coef_.shape, (1, n_features))\n+\n+def test_logistic_regression_cv_multiclass():\n+    # Test that LogisticRegressionCV uses the correct scoring\n+    # for both ovr and multinomial multiclass cases.\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+\n+    train, test = np.arange(80), np.arange(80, 100)\n+    Cs = [1.0]\n+\n+    for multi_class in ['multinomial', 'ovr']:\n+        scorer = get_scorer('neg_log_loss')\n+        \n+        # Multinomial Logistic Regression\n+        clf_multi = LogisticRegression(C=1.0, solver='lbfgs', multi_class='multinomial')\n+        clf_multi.fit(X[train], y[train])\n+        multi_probs = clf_multi.predict_proba(X[test])\n+        multi_score = scorer(clf_multi, X[test], y[test])\n+\n+        # Testing with _log_reg_scoring_path\n+        _, _, score_path, _ = _log_reg_scoring_path(\n+            X, y, train, test, Cs=Cs, fit_intercept=True,\n+            multi_class=multi_class, scoring=scorer\n+        )\n+\n+        assert len(score_path) == 1\n+        calculated_score = score_path[0][0]\n+        \n+        # Check that the score from _log_reg_scoring_path and calculated score align\n+        assert_almost_equal(calculated_score, multi_score, decimal=6)        \n+\n+def test_logistic_regression_predict_proba_ovr_multinomial():\n+    # Ensure predict_proba values differ for ovr vs. multinomial with LogisticRegression\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+\n+    lr_ovr = LogisticRegression(solver='lbfgs', multi_class='ovr')\n+    lr_ovr.fit(X[train], y[train])\n+\n+    lr_multi = LogisticRegression(solver='lbfgs', multi_class='multinomial')\n+    lr_multi.fit(X[train], y[train])\n+\n+    # OVR predict_proba\n+    ovr_probs = lr_ovr.predict_proba(X[test])\n+\n+    # Multinomial predict_proba\n+    multi_probs = lr_multi.predict_proba(X[test])\n+\n+    # Ensure that OVR and multinomial produce different probability estimates\n+    assert not np.allclose(ovr_probs, multi_probs, atol=1e-6)\n     assert_array_equal(lr_cv.classes_, [-1, 1])\n     assert_equal(len(lr_cv.classes_), 2)\n \n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..1df88d7 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,7 +154,37 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n-def test_clone_sparse_matrices():\n+import pytest\n+from sklearn.base import BaseEstimator, clone\n+\n+class MyEstimator(BaseEstimator):\n+    def __init__(self, empty=None):\n+        self.empty = empty\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are classes rather than instances.\n+    clf = MyEstimator(empty=MyEstimator)\n+    clf2 = clone(clf)\n+\n+    assert clf.empty is clf2.empty\n+\n+def test_clone_with_estimator_class_in_list():\n+    # Test cloning when the parameter is a list containing an estimator class\n+    clf = MyEstimator(empty=[MyEstimator])\n+    clf2 = clone(clf)\n+\n+    assert clf.empty == clf2.empty\n+    assert clf.empty[0] is MyEstimator\n+    assert clf2.empty[0] is MyEstimator\n+\n+def test_clone_with_nested_estimator_classes():\n+    # Test cloning with nested estimator classes\n+    nested_dict = {'first': MyEstimator, 'second': [MyEstimator]}\n+    clf = MyEstimator(empty=nested_dict)\n+    clf2 = clone(clf)\n+\n+    assert clf.empty['first'] is clf2.empty['first']\n+    assert clf.empty['second'][0] is clf2.empty['second'][0]\n     sparse_matrix_classes = [\n         getattr(sp, name)\n         for name in dir(sp) if name.endswith('_matrix')]\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..bb60cae 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -5,6 +5,8 @@ from distutils.version import LooseVersion\n import numpy as np\n from scipy import linalg\n \n+import numpy as np\n+\n import pytest\n \n from sklearn.model_selection import train_test_split\n@@ -19,14 +21,27 @@ from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n from sklearn.linear_model.least_angle import _lars_path_residues\n-\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n \n # TODO: use another dataset that has multiple drops\n-\n-\n-def test_simple():\n+@pytest.mark.parametrize('initial_copy_X, fit_copy_X', [(True, None), (False, None)])\n+def test_default_fit_copyX_behavior(initial_copy_X, fit_copy_X):\n+    \"\"\"\n+    Test that the default behavior of copy_X during fit respects the initialization\n+    parameter when not explicitly provided in the fit method.\n+    \"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=initial_copy_X, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    if fit_copy_X is not None:\n+        lasso_lars.fit(X, y, copy_X=fit_copy_X)\n+    else:\n+        lasso_lars.fit(X, y)\n+    assert initial_copy_X == np.array_equal(X, X_copy)\n     # Principle of Lars is to keep covariances tied and decreasing\n \n     # also test verbose output\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..aa20574 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,8 +493,34 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n-\n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n+def test_stratifiedkfold_shuffles_and_vary_with_random_state():\n+    # Test that shuffling with different random states results in different splits\n+    X_20 = np.arange(20)\n+    y = [0] * 10 + [1] * 10\n+\n+    # Create three StratifiedKFold with different random states\n+    kf1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=0)\n+    kf2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\n+    kf3 = StratifiedKFold(n_splits=5, shuffle=True, random_state=2)\n+\n+    # Get the test indices of each fold for different random states\n+    test_sets_1 = list(kf1.split(X_20, y))\n+    test_sets_2 = list(kf2.split(X_20, y))\n+    test_sets_3 = list(kf3.split(X_20, y))\n+\n+    # Ensure the test sets differ between any two different random states\n+    assert any(\n+        not np.array_equal(test1[1], test2[1])\n+        for test1, test2 in zip(test_sets_1, test_sets_2)\n+    )\n+    assert any(\n+        not np.array_equal(test2[1], test3[1])\n+        for test2, test3 in zip(test_sets_2, test_sets_3)\n+    )\n+    assert any(\n+        not np.array_equal(test1[1], test3[1])\n+        for test1, test3 in zip(test_sets_1, test_sets_3)\n+    )\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n     # for this data. We can highlight this fact by computing k-fold cross-\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..3d1a8c7 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -203,8 +203,50 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n \n-@pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n-@pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n+@pytest.mark.parametrize(\n+    \"strategy, expected_2bins, expected_3bins, expected_5bins\",\n+    [\n+        (\n+            \"uniform\",\n+            [0, 0, 0, 0, 1, 1],\n+            [0, 0, 0, 0, 2, 2],\n+            [0, 0, 1, 1, 4, 4],\n+        ),\n+        (\n+            \"kmeans\",\n+            [0, 0, 0, 0, 1, 1],\n+            [0, 0, 1, 1, 2, 2],\n+            [0, 0, 1, 2, 3, 4],\n+        ),\n+        (\n+            \"quantile\",\n+            [0, 0, 0, 1, 1, 1],\n+            [0, 0, 1, 1, 2, 2],\n+            [0, 1, 2, 3, 4, 4],\n+        ),\n+    ],\n+)\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+\n+    # With 2 bins\n+    est = KBinsDiscretizer(n_bins=2, strategy=strategy, encode=\"ordinal\")\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_2bins, Xt.ravel())\n+\n+    # With 3 bins\n+    est = KBinsDiscretizer(n_bins=3, strategy=strategy, encode=\"ordinal\")\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_3bins, Xt.ravel())\n+\n+    # With 5 bins\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode=\"ordinal\")\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_5bins, Xt.ravel())\n+\n+\n+@pytest.mark.parametrize(\"strategy\", [\"uniform\", \"kmeans\", \"quantile\"])\n+@pytest.mark.parametrize(\"encode\", [\"ordinal\", \"onehot\", \"onehot-dense\"])\n def test_inverse_transform(strategy, encode):\n     X = np.random.RandomState(0).randn(100, 3)\n     kbd = KBinsDiscretizer(n_bins=3, strategy=strategy, encode=encode)\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..885a354 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,18 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n+import numpy as np\n+from sklearn.mixture import GaussianMixture\n+from numpy.testing import assert_array_equal\n+\n \n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Test that fit_predict is equivalent to fit.predict for GaussianMixture when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..0084f15 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -9,7 +10,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n import pytest\n \n import numpy as np\n-\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..9935b4f 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,8 +396,38 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n-\n-def test_plot_tree_entropy(pyplot):\n+def test_export_text_single_feature():\n+    from sklearn.datasets import load_iris\n+    from sklearn.tree import DecisionTreeClassifier\n+    from sklearn.tree.export import export_text\n+\n+    # Load the iris dataset and select one feature\n+    X, y = load_iris(return_X_y=True)\n+    X = X[:, 0].reshape(-1, 1)\n+\n+    # Train DecisionTreeClassifier\n+    tree = DecisionTreeClassifier(random_state=0)\n+    tree.fit(X, y)\n+\n+    # Export the tree to text\n+    expected_report = dedent(\"\"\"\\\n+    |--- sepal_length <= 5.45\n+    |   |--- sepal_length <= 4.95\n+    |   |   |--- sepal_length <= 2.45\n+    |   |   |   |--- class: 0\n+    |   |   |--- sepal_length >  2.45\n+    |   |   |   |--- class: 1\n+    |   |--- sepal_length >  4.95\n+    |   |   |--- class: 1\n+    |--- sepal_length >  5.45\n+    |   |--- sepal_length <= 6.15\n+    |   |   |--- class: 2\n+    |   |--- sepal_length >  6.15\n+    |   |   |--- class: 2\n+    \"\"\").strip()\n+\n+    # Check the export_text output\n+    assert export_text(tree, feature_names=['sepal_length']) == expected_report\n     # mostly smoke tests\n     # Check correctness of export_graphviz for criterion = entropy\n     clf = DecisionTreeClassifier(max_depth=3,\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..b0b3c29 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1554,7 +1554,29 @@ def test_LogisticRegressionCV_no_refit(multi_class):\n     assert lrcv.coef_.shape == (n_classes, n_features)\n \n \n-def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n+def test_LogisticRegressionCV_no_refit_error():\n+    # Test LogisticRegressionCV refit=False does not throw IndexError\n+\n+    # Generate data\n+    np.random.seed(29)\n+    X = np.random.normal(size=(1000, 3))\n+    beta = np.random.normal(size=3)\n+    intercept = np.random.normal(size=None)\n+    y = np.sign(intercept + X @ beta)\n+\n+    # Try fitting with refit=False\n+    try:\n+        LogisticRegressionCV(\n+            cv=5,\n+            solver='saga',\n+            tol=1e-2,\n+            refit=False\n+        ).fit(X, y)\n+        error_thrown = False\n+    except IndexError:\n+        error_thrown = True\n+\n+    assert not error_thrown, \"IndexError was thrown with refit=False\"\n     # Make sure the shapes of scores_ and coefs_paths_ attributes are correct\n     # when using elasticnet (added one dimension for l1_ratios)\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..6f1d59d 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -24,10 +24,12 @@ def test_get_deps_info():\n     assert 'pandas' in deps_info\n     assert 'matplotlib' in deps_info\n \n+def test_get_deps_info_includes_joblib():\n+    deps_info = _get_deps_info()\n \n-def test_show_versions_with_blas(capsys):\n+    assert 'joblib' in deps_info, \"Expected 'joblib' to be in dependencies info.\"\n     show_versions()\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "",
  "scikit-learn__scikit-learn-14710": "diff --git a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\nindex 7e8bccd..742799c 100644\n--- a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n@@ -413,5 +413,15 @@ def test_infinite_values_missing_values():\n     stump_clf = HistGradientBoostingClassifier(min_samples_leaf=1, max_iter=1,\n                                                learning_rate=1, max_depth=2)\n \n+@pytest.mark.parametrize(\"scoring\", [None, 'loss'])\n+def test_string_target_early_stopping(scoring):\n+    # Regression test for issue where string targets caused an error with early stopping\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['x'] * 50 + ['y'] * 50, dtype=object) # String targets\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10, scoring=scoring)\n+    gbrt.fit(X, y)\n+    assert gbrt.score(X, y) > 0.5\n+\n     assert stump_clf.fit(X, y_isinf).score(X, y_isinf) == 1\n-    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..677d765 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -690,7 +690,23 @@ def test_sparse_precomputed():\n         assert \"Sparse precomputed\" in str(e)\n \n \n-def test_linearsvc_parameters():\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for ZeroDivisionError with empty support_vectors_ #14893\n+    import numpy as np\n+    from scipy import sparse\n+    from sklearn import svm\n+\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+\n+    assert not model.support_vectors_.data.size, \"Expected empty support_vectors_\"\n+    assert not model.dual_coef_.data.size, \"Expected empty dual_coef_\"\n     # Test possible parameter combinations in LinearSVC\n     # Generate list of possible parameter combinations\n     losses = ['hinge', 'squared_hinge', 'logistic_regression', 'foo']\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..f3a9319 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,6 +97,46 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+def test_strip_accents():\n+    # check some classical latin accentuated symbols\n+    a = '\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e7\u00e8\u00e9\u00ea\u00eb'\n+    expected = 'aaaaaaceeee'\n+    assert strip_accents_unicode(a) == expected\n+\n+    a = '\u00ec\u00ed\u00ee\u00ef\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd'\n+    expected = 'iiiinooooouuuuy'\n+    assert strip_accents_unicode(a) == expected\n+\n+    # check some arabic\n+    a = '\\u0625'  # alef with a hamza below: \u0625\n+    expected = '\\u0627'  # simple alef: \u0627\n+    assert strip_accents_unicode(a) == expected\n+\n+    # mix letters accentuated and not\n+    a = \"this is \u00e0 test\"\n+    expected = 'this is a test'\n+    assert strip_accents_unicode(a) == expected\n+\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaeresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"  # Combining grave, acute, circumflex, tilde\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"  # o with diaeresis and macron\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Test cases from issue for nfkd form\n+    s1 = chr(241)  # \u00f1\n+    s2 = chr(110) + chr(771)  # n\u0303\n+    assert strip_accents_unicode(s1) == 'n'\n+    assert strip_accents_unicode(s2) == 'n'\n \n def test_to_ascii():\n     # check some classical latin accentuated symbols\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..927e828 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -330,12 +330,25 @@ def test_iforest_with_n_jobs_does_not_segfault():\n def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n-    model = IsolationForest()\n-    model.fit(X, y)\n+import warnings\n+import numpy as np\n+import pytest\n+from sklearn.ensemble import IsolationForest\n \n-    warn_msg = (\n-        \"Attribute `base_estimator_` was deprecated in version 1.2 and \"\n-        \"will be removed in 1.4. Use `estimator_` instead.\"\n-    )\n-    with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+def test_iforest_preserves_feature_names():\n+    \"\"\"Check that feature names are preserved when contamination is not 'auto'.\n+\n+    This test ensures no warning about feature names is raised\n+    when contamination is set explicitly.\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    rng = np.random.RandomState(0)\n+\n+    # Create a DataFrame with a single feature\n+    X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+\n+    # Catch warnings and assert that no warning is raised\n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n",
  "scikit-learn__scikit-learn-25973": "",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..d1802d5 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,6 +22,31 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+from sklearn.feature_selection import VarianceThreshold\n+import pytest\n+import pandas as pd\n+import numpy as np\n+\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for the mentioned issue.\n+    \"\"\"\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n \n \n class Trans(TransformerMixin, BaseEstimator):\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..a3adc68 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,8 +945,21 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n-\n-def test_minibatch_kmeans_partial_fit_int_data():\n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # Testing KMeans consistency for different n_jobs setting\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    # Conduct tests with various n_jobs (>1) to ensure consistency\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    result_3 = KMeans(n_clusters=3, random_state=0, n_jobs=3).fit(X).labels_\n+    result_4 = KMeans(n_clusters=3, random_state=0, n_jobs=4).fit(X).labels_\n+\n+    # Asserting that results are equal for all jobs settings\n+    assert_array_equal(result_1, result_2)\n+    assert_array_equal(result_1, result_3)\n+    assert_array_equal(result_1, result_4)\n     # Issue GH #14314\n     X = np.array([[-1], [1]], dtype=np.int)\n     km = MiniBatchKMeans(n_clusters=2)\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..d563ed5 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,6 +251,27 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n+@pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n+def test_LiteralIncludeReader_dedent_and_prepend(literal_inc_path):\n+    # Test case for prepend with dedent\n+    # This is similar to the issue described scenario\n+    options = {'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n+               'end-at': '</plugin>',\n+               'dedent': 4,\n+               'prepend': '     <plugin>'}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    # Expected output\n+    expected_content = (\"     <plugin>\\n\"\n+                        \"          <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+                        \"          <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+                        \"          <version>2.15.0</version>\\n\"\n+                        \"          <configuration>\\n\"\n+                        \"            <verifyFailOn>strict</verifyFailOn>\\n\"\n+                        \"          </configuration>\\n\"\n+                        \"        </plugin>\\n\")\n+    assert content == expected_content\n+\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n",
  "sphinx-doc__sphinx-10449": "",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..b7b08c5 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +10,41 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n+\n+def test_Catalog_duplicated_message():\n+    catalog = Catalog()\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 2))\n+    catalog.add('hello', MsgOrigin('/path/to/yetanother', 1))\n+    catalog.add('world', MsgOrigin('/path/to/filename', 1))\n+\n+    assert len(list(catalog)) == 2\n+\n+    msg1, msg2 = list(catalog)\n+    assert msg1.text == 'hello'\n+    assert msg1.locations == [('/path/to/filename', 1),\n+                              ('/path/to/filename', 2),\n+                              ('/path/to/yetanother', 1)]\n+    assert msg2.text == 'world'\n+    assert msg2.locations == [('/path/to/filename', 1)]\n+\n+def test_Catalog_handle_duplicates():\n+    \"\"\"Test to ensure duplicate message locations are handled.\"\"\"\n+    catalog = Catalog()\n+    # Adding messages with duplicate locations\n+    catalog.add('duplicate', MsgOrigin('/path/to/duplicate_file', 10))\n+    catalog.add('duplicate', MsgOrigin('/path/to/duplicate_file', 10))\n+    catalog.add('duplicate', MsgOrigin('/path/to/another_file', 20))\n+    \n+    messages = list(catalog)\n+    assert len(messages) == 1\n+    \n+    locations = messages[0].locations\n+    assert len(locations) == 2\n+    assert ('/path/to/duplicate_file', 10) in locations\n+    assert ('/path/to/another_file', 20) in locations\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\nindex d3bf6a2..0c93d5c 100644\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -335,6 +335,9 @@ def test_get_toctree_for_includehidden(app):\n     assert_node(toctree[1][0][1],\n                 ([list_item, compact_paragraph, reference, \"quux\"],\n                  [list_item, compact_paragraph, reference, \"foo.1\"],\n+                 [bullet_list, list_item, compact_paragraph, reference, \"genindex\"],\n+                 [bullet_list, list_item, compact_paragraph, reference, \"modindex\"],\n+                 [bullet_list, list_item, compact_paragraph, reference, \"search\"],\n                  [list_item, compact_paragraph, reference, \"foo.2\"]))\n \n     assert_node(toctree[1][0][0][0], reference, refuri=\"foo\", secnumber=[1])\n@@ -345,4 +348,4 @@ def test_get_toctree_for_includehidden(app):\n     assert_node(toctree[1][2][0][0], reference, refuri=\"http://sphinx-doc.org/\")\n \n     assert_node(toctree[2],\n-                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..d0d2946 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -147,8 +147,37 @@ def test_glossary(app):\n     assert (\"term3\", \"term3\", \"term\", \"index\", \"term-term3\", -1) in objects\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n+def test_glossary_case_sensitivity(app):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       The official SQL database system.\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       A command line tool for running SQL queries.\\n\")\n+\n+    # doctree\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [glossary, definition_list,\n+         ([definition_list_item, ([term, (\"MySQL\", index)],\n+                                  definition)],\n+          [definition_list_item, ([term, (\"mysql\", index)],\n+                                  definition)])],\n+    ))\n+    assert_node(doctree[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree[0][0][1][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+    assert_node(doctree[0][0][0][1],\n+                [nodes.definition, nodes.paragraph, \"The official SQL database system.\"])\n+    assert_node(doctree[0][0][1][1],\n+                [nodes.definition, nodes.paragraph, \"A command line tool for running SQL queries.\"])\n \n-def test_glossary_warning(app, status, warning):\n+    # index\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n     # empty line between terms\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..3b4cf78 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -331,6 +331,18 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n     assert sig.parameters['b'].default == Parameter.empty\n \n+@pytest.mark.skipif(sys.version_info < (3, 8),\n+                    reason='python-3.8 or above is required')\n+def test_signature_from_str_positional_only_with_defaults():\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n+\n \n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..fcd64be 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -11,6 +12,7 @@\n import abc\n import sys\n from importlib import import_module\n+from typing import TypeVar\n \n import pytest\n \n",
  "sphinx-doc__sphinx-7910": "",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..3853ace 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -14,6 +14,35 @@ from unittest import mock\n import pytest\n \n \n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_and_external_links(app, status, warning):\n+    # Create index.rst with both broken and correct local and external links\n+    index_content = '''\n+broken external-link_\n+broken local-link_\n+working external-link_\n+\n+.. _external-link: https://thisurldoesnotexist.com\n+.. _local-link: path/to/notfound\n+.. _working-external-link: https://www.example.com\n+'''\n+    (app.srcdir / 'index.rst').write_text(index_content)\n+\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    # Ensure broken external and local links are reported\n+    assert \"broken external-link\" in content\n+    assert \"broken local-link\" in content\n+    assert \"[broken] path/to/notfound\" in content\n+    # Ensure working external link is not listed as broken\n+    assert \"working external-link\" not in content\n+    # Ensure there are no unexpected entries, total lines expected: 3\n+    assert len(content.splitlines()) == 3\n+\n+\n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n def test_defaults(app, status, warning):\n     app.builder.build_all()\n@@ -33,6 +62,35 @@ def test_defaults(app, status, warning):\n     assert len(content.splitlines()) == 5\n \n \n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n+def test_local_and_external_links(app, status, warning):\n+    # Create index.rst with both broken and correct local and external links\n+    index_content = '''\n+broken external-link_\n+broken local-link_\n+working external-link_\n+\n+.. _external-link: https://thisurldoesnotexist.com\n+.. _local-link: path/to/notfound\n+.. _working-external-link: https://www.example.com\n+'''\n+    (app.srcdir / 'index.rst').write_text(index_content)\n+\n+    app.builder.build_all()\n+\n+    assert (app.outdir / 'output.txt').exists()\n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    # Ensure broken external and local links are reported\n+    assert \"broken external-link\" in content\n+    assert \"broken local-link\" in content\n+    assert \"[broken] path/to/notfound\" in content\n+    # Ensure working external link is not listed as broken\n+    assert \"working external-link\" not in content\n+    # Ensure there are no unexpected entries, total lines expected: 3\n+    assert len(content.splitlines()) == 3\n+\n+\n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n def test_defaults_json(app, status, warning):\n     app.builder.build_all()\n",
  "sphinx-doc__sphinx-8035": "",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..9ad8660 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1286,6 +1286,41 @@ def test_image_glob_intl_using_figure_language_filename(app):\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n \n-\n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+from babel.messages import pofile\n+from sphinx import locale\n+\n+@pytest.mark.sphinx('html', testroot='intl', confoverrides={'language': 'da'})\n+def test_custom_locale_translation(make_app, app_params, sphinx_test_tempdir):\n+    \"\"\"Test custom translation for the Danish locale in Sphinx.\"\"\"\n+    try:\n+        # Remove any cached translators\n+        locale.translators.clear()\n+\n+        # Prepare Danish message catalog (.po file) with custom translations\n+        locale_dir = sphinx_test_tempdir / 'intl' / 'locale' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        \n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog(locale='da')\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog, omit_header=True)\n+\n+        # Construct the Sphinx application and ensure .mo file is created\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()\n+\n+        # Check if custom translations are applied\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        # Build the HTML and verify the output translations\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+    finally:\n+        # Clear cache after test\n+        locale.translators.clear()\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..dcba97a 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -13,8 +14,33 @@ import sys\n \n import pytest\n \n+import sys\n+import pytest\n from sphinx.testing import restructuredtext\n \n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc', \n+                    srcdir='autodoc_typehints_type_aliases',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_with_type_aliases(app):\n+    (app.srcdir / 'types.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    app.build()\n+    context = (app.outdir / 'types.txt').read_text()\n+    \n+    assert ('types.sphinx_doc(data)\\n'\n+            '\\n'\n+            '   Does it work.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      * **data** (*types.JSONObject*) -- Does it args.\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      Does it work in return.\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      types.JSONObject\\n' in context)\n+\n from .test_ext_autodoc import do_autodoc\n \n IS_PYPY = platform.python_implementation() == 'PyPy'\n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex eec5523..6415416 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -21,14 +21,40 @@ from sphinx.ext.autodoc import ALL, ModuleLevelDocumenter, Options\n from sphinx.ext.autodoc.directive import DocumenterBridge, process_documenter_options\n from sphinx.testing.util import SphinxTestApp, Struct  # NOQA\n from sphinx.util.docutils import LoggingReporter\n+from .test_ext_autodoc import do_autodoc\n+import pytest\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n try:\n     # Enable pyximport to test cython module\n     import pyximport\n     pyximport.install()\n except ImportError:\n     pyximport = None\n+from .test_ext_autodoc import do_autodoc\n+import pytest\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n \n def do_autodoc(app, objtype, name, options=None):\n     if options is None:\n@@ -41,9 +67,35 @@ def do_autodoc(app, objtype, name, options=None):\n     bridge = DocumenterBridge(app.env, LoggingReporter(''), docoptions, 1, state)\n     documenter = doccls(bridge, name)\n     documenter.generate()\n+from .test_ext_autodoc import do_autodoc\n+import pytest\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n     return bridge.result\n+from .test_ext_autodoc import do_autodoc\n+import pytest\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_empty_all(app):\n+    options = {'members': True}\n+    actual = do_autodoc(app, 'module', 'target.empty_all', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.empty_all',\n+        '',\n+        'docsting of empty_all module.',\n+        '',\n+    ]\n \n def make_directive_bridge(env):\n     options = Options(\n",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..a53e618 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,16 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n-\n-def test_getslots():\n+def test_object_description_enum():\n+    import enum\n+    \n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+    \n+    # Test the object description for enum values\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+    assert inspect.object_description(MyEnum.ValueB) == \"MyEnum.ValueB\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..8555638 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -8,6 +8,23 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+def test_exits_when_existing_confpy_and_empty_input(monkeypatch):\n+    # This will simulate a scenario where 'conf.py' already exists in the current directory.\n+    def mock_isfile(path):\n+        return True  # Mock that a conf.py exists\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    # Simulate pressing Enter by providing an empty string as the input\n+    qs.term_input = lambda x: ''\n+\n+    with pytest.raises(SystemExit) as excinfo:\n+        d = {}\n+        qs.ask_user(d)\n+\n+    assert excinfo.type == SystemExit\n+    assert excinfo.value.code == 1  # Ensure that the exit code is 1, meaning the application exits as expected when Enter is pressed\n+\n import time\n from io import StringIO\n \n@@ -16,8 +33,7 @@ import pytest\n from sphinx import application\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n-\n-warnfile = StringIO()\n+import sys\n \n \n def setup_module():\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..c333337 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -807,6 +807,41 @@ def test_pyattribute(app):\n     assert_node(doctree[1][1][1][0][1][1], pending_xref, **{\"py:class\": \"Class\"})\n     assert_node(doctree[1][1][1][0][1][3], pending_xref, **{\"py:class\": \"Class\"})\n     assert 'Class.attr' in domain.objects\n+\n+def test_pyproperty_crossref(app):\n+    text = (\".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \".. py:class:: Rectangle\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_name, \"Square\"])],\n+                                  [desc_content, (addnodes.index,\n+                                                  desc)])]))\n+    assert_node(doctree[1][1][0], addnodes.index,\n+                entries=[('single', 'end (Square property)', 'Square.end', '', None)])\n+    assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [pending_xref, \"Point\"])],\n+                                   [desc_content, ()]))\n+\n+    assert_node(doctree[2][1][0], addnodes.index,\n+                entries=[('single', 'end (Rectangle property)', 'Rectangle.end', '', None)])\n+    assert_node(doctree[2][1][1], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [pending_xref, \"Point\"])],\n+                                   [desc_content, ()]))\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n+    assert 'Rectangle.end' in domain.objects\n+    assert domain.objects['Rectangle.end'] == ('index', 'Rectangle.end', 'property', False)\n     assert domain.objects['Class.attr'] == ('index', 'Class.attr', 'attribute', False)\n \n \n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..ae4aa0c 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n@@ -784,7 +784,39 @@ def test_pymethod_options(app):\n     assert domain.objects['Class.meth7'] == ('index', 'Class.meth7', 'method', False)\n \n \n-def test_pyclassmethod(app):\n+def test_another_pymethod_options(app):\n+    text = (\".. py:class:: AnotherClass\\n\"\n+            \"\\n\"\n+            \"   .. py:method:: func\\n\"\n+            \"      :property:\\n\"\n+            \"   .. py:method:: runnable\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, (\"class\", desc_sig_space)],\n+                                                    [desc_name, \"AnotherClass\"])],\n+                                  [desc_content, (addnodes.index,\n+                                                  desc,\n+                                                  addnodes.index,\n+                                                  desc)])]))\n+\n+    # :property:\n+    assert_node(doctree[1][1][0], addnodes.index,\n+                entries=[('single', 'func (AnotherClass property)', 'AnotherClass.func', '', None)])\n+    assert_node(doctree[1][1][1], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n+                                                     [desc_name, \"func\"])],\n+                                   [desc_content, ()]))\n+    assert 'AnotherClass.func' in domain.objects\n+    assert domain.objects['AnotherClass.func'] == ('index', 'AnotherClass.func', 'method', False)\n+\n+    # regular method\n+    assert_node(doctree[1][1][2], addnodes.index,\n+                entries=[('single', 'runnable() (AnotherClass method)', 'AnotherClass.runnable', '', None)])\n+    assert_node(doctree[1][1][3], ([desc_signature, ([desc_name, \"runnable\"],\n+                                                     [desc_parameterlist, ()])],\n+                                   [desc_content, ()]))\n+    assert 'AnotherClass.runnable' in domain.objects\n+    assert domain.objects['AnotherClass.runnable'] == ('index', 'AnotherClass.runnable', 'method', False)\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   .. py:classmethod:: meth\\n\")\n",
  "sphinx-doc__sphinx-9711": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 6ac780b..4108349 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -8,7 +8,8 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n-from typing import TYPE_CHECKING, Any, Dict\n+from typing import TYPE_CHECKING, Any, Dict, Tuple\n+from packaging import version\n \n from sphinx.config import Config\n from sphinx.errors import VersionRequirementError\n@@ -51,7 +52,8 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n                               'but it is not loaded.'), extname)\n             continue\n \n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        # Use version comparison from the packaging library instead of string comparison\n+        if extension.version == 'unknown version' or version.parse(reqversion) > version.parse(extension.version):\n             raise VersionRequirementError(__('This project needs the extension %s at least in '\n                                              'version %s and therefore cannot be built with '\n                                              'the loaded version (%s).') %\n",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..4114461 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,33 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+from sympy import sqrt\n+from sympy.geometry import Point, Point3D, Point2D\n+\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_3d_to_3d_distance():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point3D(4, 0, 6)\n+    assert p1.distance(p2) == sqrt((4-1)**2 + (6-2)**2)\n+\n+def test_2d_to_2d_distance():\n+    p1 = Point2D(1, 0)\n+    p2 = Point2D(4, 3)\n+    assert p1.distance(p2) == 5\n+\n+def test_2d_to_3d_distance_ignored_dimension():\n+    p1 = Point2D(1, 0)\n+    p2 = Point3D(1, 0, 3)\n+    assert p1.distance(p2) == 3\n+\n+def test_distance_same_points():\n+    p1 = Point3D(1, 0, 2)\n+    assert p1.distance(p1) == 0\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..e047b73 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,7 +741,32 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n-def test_true_false():\n+from sympy import Float\n+from sympy.utilities.lambdify import implemented_function\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2*x)\n+    assert f(f(2)).evalf() == Float(16)\n+    \n+def test_nested_functions():\n+    # Test with single level nesting of functions\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2*x)\n+    assert f(g(2)).evalf() == Float(16)\n+    \n+    # Test with double level nesting\n+    h = implemented_function('h', lambda x: x + 1)\n+    assert f(h(g(2))).evalf() == Float(25)  # (2x + 1)^2 at x=2 is (5)^2\n+    \n+    # Test with complex function composition\n+    def complex_function(x):\n+        return (x**3 - x + 1) / 2\n+    c = implemented_function('c', complex_function)\n+    assert f(c(2)).evalf() == Float(((2**3 - 2 + 1) / 2)**2)\n+\n+    # Ensure recursive evaluation evaluates deeper nesting\n+    assert f(f(g(2))).evalf() == Float(256)  # f(g(2)) = 16, f(16) = 16^2 = 256\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n     assert lambdify([], false)() is False\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..bdc96e7 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -84,6 +84,21 @@ def test_Identity():\n     assert In.inverse() == In\n     assert In.conjugate() == In\n \n+def test_Identity():\n+    A = MatrixSymbol('A', n, m)\n+    In = Identity(n)\n+    Im = Identity(m)\n+\n+    assert A*Im == A\n+    assert In*A == A\n+\n+    assert transpose(In) == In\n+    assert In.inverse() == In\n+    assert In.conjugate() == In\n+    \n+    # Test the sum of elements in the Identity matrix is equal to n\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+\n def test_Identity_doit():\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..6d5288d 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -354,6 +354,14 @@ def test_args():\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n+    # Test non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])\n+    assert Permutation([[0, 1, 2], [2, 3]]) == Permutation([1, 2, 3, 0])\n+    assert Permutation([[0, 2], [1, 3]]) == Permutation([2, 3, 0, 1])\n+    assert Permutation([[0, 1], [1, 0]]) == Permutation([0, 1]) # Should result in identity\n+    assert Permutation([[0, 1], [0, 1], [0, 1]]) == Permutation([0, 1]) # Multiple identical swaps\n+\n \n def test_Cycle():\n     assert str(Cycle()) == '()'\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..5e4d831 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -495,6 +495,14 @@ def test_len():\n     assert SparseMatrix() == SparseMatrix([])\n     assert SparseMatrix() == SparseMatrix([[]])\n \n+def test_sparse_hstack_vstack_zero_matrices():\n+    # Verify horizontal stacking behavior of 0 x n matrices\n+    sparse_matrices_h = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_h) == SparseMatrix(0, 6)\n+\n+    # Verify vertical stacking behavior of n x 0 matrices\n+    sparse_matrices_v = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_v) == SparseMatrix(6, 0)\n \n def test_sparse_zeros_sparse_eye():\n     assert SparseMatrix.eye(3) == eye(3, cls=SparseMatrix)\n",
  "sympy__sympy-13372": "",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..182d9a7 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -209,8 +209,15 @@ def test_tanh_series():\n     assert tanh(x).series(x, 0, 10) == \\\n         x - x**3/3 + 2*x**5/15 - 17*x**7/315 + 62*x**9/2835 + O(x**10)\n \n+from sympy import Symbol, coth, log, tan, I, pi, sqrt, nan, zoo, oo, cot\n \n def test_coth():\n+    x = Symbol('x')\n+    integral_values_causing_issues = [2, 3, 5, 6, 8, 9, 11, 12, 13, 15, 18]\n+\n+    for value in integral_values_causing_issues:\n+        expr = coth(log(tan(x)))\n+        assert expr.subs(x, value) is not None  # Ensure it does not raise an error\n     x, y = symbols('x,y')\n \n     k = Symbol('k', integer=True)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..a722f38 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -165,6 +165,16 @@ def test_difference():\n     assert -1 in S.Reals - S.Naturals\n \n \n+from sympy import Symbol, Interval, FiniteSet, Complement, oo\n+\n+def test_complement_mixed_symbols_and_numbers():\n+    x, y = Symbol('x'), Symbol('y')\n+    # Test complement of FiniteSet with a mixture of numbers and symbols against an interval\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == FiniteSet(x, y)\n+    assert Complement(FiniteSet(x, y, 2, 11.5), Interval(-10, 10)) == FiniteSet(x, y, 11.5)\n+    assert Complement(FiniteSet(x, 2, 5), Interval(0, 5)) == FiniteSet(x)\n+    assert Complement(FiniteSet(2, 5), Interval(0, 5)) == EmptySet()\n+\n def test_Complement():\n     assert Complement(Interval(1, 3), Interval(1, 2)) == Interval(2, 3, True)\n     assert Complement(FiniteSet(1, 3, 4), FiniteSet(3, 4)) == FiniteSet(1)\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..d8d5def 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,6 +201,61 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n+def test_issue_13643_col_insert():\n+    from sympy import Matrix, eye, ones\n+    \n+    # Test to verify the behavior mentioned in the issue\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    result_M = M.col_insert(3, V)\n+    expected_result = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result_M == expected_result\n+\n+    # Additional test cases:\n+    # Insert column at the beginning\n+    result_M = M.col_insert(0, V)\n+    expected_result = Matrix([\n+        [2, 2, 1, 0, 0, 0, 0, 0],\n+        [2, 2, 0, 1, 0, 0, 0, 0],\n+        [2, 2, 0, 0, 1, 0, 0, 0],\n+        [2, 2, 0, 0, 0, 1, 0, 0],\n+        [2, 2, 0, 0, 0, 0, 1, 0],\n+        [2, 2, 0, 0, 0, 0, 0, 1]\n+    ])\n+    assert result_M == expected_result\n+\n+    # Insert column at the end\n+    result_M = M.col_insert(6, V)\n+    expected_result = Matrix([\n+        [1, 0, 0, 0, 0, 0, 2, 2],\n+        [0, 1, 0, 0, 0, 0, 2, 2],\n+        [0, 0, 1, 0, 0, 0, 2, 2],\n+        [0, 0, 0, 1, 0, 0, 2, 2],\n+        [0, 0, 0, 0, 1, 0, 2, 2],\n+        [0, 0, 0, 0, 0, 1, 2, 2]\n+    ])\n+    assert result_M == expected_result\n+\n+    # Insert column in the middle\n+    result_M = M.col_insert(2, V)\n+    expected_result = Matrix([\n+        [1, 0, 2, 2, 0, 0, 0, 0],\n+        [0, 1, 2, 2, 0, 0, 0, 0],\n+        [0, 0, 2, 2, 1, 0, 0, 0],\n+        [0, 0, 2, 2, 0, 1, 0, 0],\n+        [0, 0, 2, 2, 0, 0, 1, 0],\n+        [0, 0, 2, 2, 0, 0, 0, 1]\n+    ])\n+    assert result_M == expected_result\n+\n+# Existing test cases\n def test_extract():\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n",
  "sympy__sympy-13757": "",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..b56048a 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,25 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_arbitrary():\n+    # Tests for allowing arbitrary mul_symbol in latex function\n+    from sympy import Symbol, latex, Integral, S\n+    x = Symbol('x')\n+    \n+    # Using a custom multiplication symbol with a thin space '\\\\,'\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r'3\\\\,x^{2}\\\\,y'\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r'1.5\\\\,3^{x}'\n+    \n+    # Check the original behavior with provided options\n+    assert latex(2*x*y, mul_symbol='dot') == r\"2 \\cdot x \\cdot y\"\n+    \n+    # Arbitrary symbol testing with other characters\n+    assert latex(2*x*y, mul_symbol='*') == r'2*x*y'\n+    assert latex(2*x*y, mul_symbol='star') == r'2\\star x\\star y'\n+    \n+    # Using latex for integral\n+    assert latex(Integral(2*x**2*y, x)) == r'\\int 2 x^{2} y\\, dx'\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..69c3c9b 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -313,6 +313,17 @@ def test_as_mutable():\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n \n+from sympy import Matrix, symbols\n+\n+def test_issue_13835():\n+    a = symbols('a')\n+    M = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+    assert M(1).det() == 0\n+    assert M(2).det() == -a\n+    assert M(3).det() == 0\n+    assert M(4).det() == 0\n+    assert M(5).det() == 0\n+    assert M(6).det() == 0\n \n def test_determinant():\n \n",
  "sympy__sympy-13878": "",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..a9610d0 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -44,8 +44,23 @@ def test_tensor_product_commutator():\n     assert Comm(TP(A, B), TP(B, C)).doit() == \\\n         TP(A, B)*TP(B, C) - TP(B, C)*TP(A, B)\n \n+def test_tensor_product_evaluation_issue():\n+    a = Symbol('a', commutative=False)\n \n-def test_tensor_product_simp():\n+    # Test tensor products of scalars\n+    t1 = TP(1, 1) * TP(1, 1)\n+    assert tps(t1) == TP(1, 1)\n+    assert t1.expand(tensorproduct=True) == TP(1, 1)\n+\n+    # Simplifying a tensor product with a substitution\n+    assert tps(TP(1, 1) * TP(1, a)).subs(a, 1) == TP(1, 1)\n+\n+    # Test tensor products with matrices (Pauli matrices as an example)\n+    t2 = TP(1, Pauli(3)) * TP(1, Pauli(3))\n+    assert tps(t2) == TP(1, 1)\n+    assert t2.expand(tensorproduct=True) == TP(1, 1)\n+\n+    assert tps(TP(1, Pauli(3)) * TP(1, a)).subs(a, Pauli(3)) == TP(1, 1)\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n \n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..1e3745e 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -79,8 +79,11 @@ def test_python_keyword_function_name_escaping():\n         5*Function(\"for\")(8)) == \"for_ = Function('for')\\ne = 5*for_(8)\"\n \n \n+import sympy\n+from sympy import Eq, Ne, Symbol\n+\n def test_python_relational():\n-    assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n     assert python(Gt(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x > y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..05e1b09 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,6 +4,17 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+def test_vector_addition_with_zero():\n+    N = ReferenceFrame('N')\n+    # Test if adding a zero scalar times a vector returns the vector itself\n+    assert N.x + 0 * N.x == N.x\n+    # Test if adding zero vector (as 0 * N.x is zero vector) with another vector works\n+    assert sum([N.x, (0 * N.x)]) == N.x\n+\n+test_vector_addition_with_zero()\n+\n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n",
  "sympy__sympy-14976": "diff --git a/sympy/solvers/tests/test_numeric.py b/sympy/solvers/tests/test_numeric.py\nindex 6a82251..41dd5b7 100644\n--- a/sympy/solvers/tests/test_numeric.py\n+++ b/sympy/solvers/tests/test_numeric.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Eq, Matrix, pi, sin, sqrt, Symbol, Integral, Piecewise,\n     symbols, Float, I)\n from mpmath import mnorm, mpf\n@@ -111,7 +112,12 @@ def test_nsolve_complex():\n \n def test_nsolve_dict_kwarg():\n     x, y = symbols('x y')\n-    # one variable\n+    def test_nsolve_rational_mpmath():\n+        # Test for the precision issue with rational in mpmath\n+        x = symbols('x')\n+        eqn = Eq(x, Rational(77, 3))\n+        x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+        assert abs(x0.evalf(64) - 77/3) < 1e-15\n     assert nsolve(x**2 - 2, 1, dict = True) == \\\n         [{x: sqrt(2.)}]\n     # one variable with complex solution\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..3391897 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -72,6 +73,13 @@ def test_ndim_array_initiation():\n     raises(ValueError, lambda: vector_with_long_shape[long(5)])\n \n     from sympy.abc import x\n+    # Test for rank-0 array length\n+    scalar_array = ImmutableDenseNDimArray(42)\n+    assert len(scalar_array) == 1\n+    assert scalar_array.shape == ()\n+    assert scalar_array.rank() == 0\n+    assert scalar_array[()] == 42\n+    raises(ValueError, lambda: scalar_array[0])\n     rank_zero_array = ImmutableDenseNDimArray(x)\n     assert len(rank_zero_array) == 0\n     assert rank_zero_array.shape == ()\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..789fdd2 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -23,6 +24,26 @@ def test_Rational():\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n+def test_Max_Min():\n+    # Original test patch\n+    assert mcode(Max(x, y, z)*Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n+    # New test cases for Max with two arguments and different orders\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+\n+    # New test cases for ensuring order does not affect output incorrectly\n+    assert mcode(Max(3, y)) == \"Max[3, y]\"\n+    assert mcode(Max(y, 3)) == \"Max[y, 3]\"\n+    \n+    # Consistent behavior with more numerical and symbolic comparisons\n+    assert mcode(Max(y, 3, x)) == \"Max[y, 3, x]\"\n+    assert mcode(Max(3, x, 5)) == \"Max[3, x, 5]\"\n+\n+    # Ensure Min behaves correctly\n+    assert mcode(Min(2, x)) == \"Min[2, x]\"\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"\n+\n \n def test_Function():\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..c68e054 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,21 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_to_rotation_matrix_sign_issue():\n+    \"\"\"Test for ensuring the to_rotation_matrix method outputs the correct sign on trigonometric components.\"\"\"\n+    from sympy import symbols, cos, sin, Matrix, trigsimp\n+    from sympy.algebras.quaternion import Quaternion\n+\n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected_matrix = Matrix([\n+        [1,      0,      0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]\n+    ])\n+    result_matrix = trigsimp(q.to_rotation_matrix())\n+    assert result_matrix == expected_matrix, f\"Expected {expected_matrix}, but got {result_matrix}\"\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +134,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..5d2e4bd 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1624,6 +1624,32 @@ def test_Mod():\n     i = Symbol('i', integer=True)\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n+    \n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+\n+    # Additional test cases for issue 15493\n+    # Test with symbolic positive integers\n+    a, b = symbols('a b', integer=True, positive=True)\n+    assert Mod(6*a, 3) == Mod(a, 1)\n+    assert Mod(12*a, 6) == 0\n+    \n+    # Test mixing with constants\n+    assert Mod(3*i + 6, 2) == Mod(i, 2)\n+    assert Mod(3*i - 6, 2) == Mod(i, 2)\n+\n+    # Test with negative coefficients\n+    assert Mod(-3*i, 2) == -Mod(i, 2)\n+\n+    # Test with zero coefficient (should be zero)\n+    assert Mod(0*i, 2) == 0\n+\n+    # Test large symbolic expressions\n+    big_expr = symbols('big_expr', integer=True, positive=True)\n+    assert Mod(3*big_expr, 2) == Mod(big_expr, 2)\n \n     # issue 8677\n     n = Symbol('n', integer=True, positive=True)\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..050d25b 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,7 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +156,7 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..868c032 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1987,10 +1987,21 @@ def test_Add_is_zero():\n     assert (x + y).is_zero\n \n \n-def test_issue_14392():\n+from sympy import I, Add, simplify\n+\n+def test_issue_15873_is_zero_on_complex():\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None  # should not incorrectly evaluate to False\n+    assert simplify(e).is_zero is True  # simplified expression is zero\n+\n+def test_is_zero_with_Add():\n+    e = Add(1 + I, -1 - I)\n+    assert e.is_zero is True  # test where result is zero\n+    e = Add(1 + I, -1)\n+    assert e.is_zero is None  # non-zero result\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..e589bb8 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -512,7 +512,32 @@ def test_posify():\n         'Sum(_x**(-n), (n, 1, 3))'\n \n \n-def test_issue_4194():\n+def test_issue_16438():\n+    # Verify that `posify` preserves various assumptions on a symbol\n+    k_finite = Symbol('k_finite', finite=True)\n+    eq_finite, _ = posify(k_finite)\n+    assert 'finite' in eq_finite.assumptions0 and eq_finite.assumptions0['finite'] is True\n+    assert 'infinite' in eq_finite.assumptions0 and eq_finite.assumptions0['infinite'] is False\n+\n+    k_integer = Symbol('k_integer', integer=True)\n+    eq_integer, _ = posify(k_integer)\n+    assert 'integer' in eq_integer.assumptions0 and eq_integer.assumptions0['integer'] is True\n+\n+    k_rational = Symbol('k_rational', rational=True)\n+    eq_rational, _ = posify(k_rational)\n+    assert 'rational' in eq_rational.assumptions0 and eq_rational.assumptions0['rational'] is True\n+\n+    k_prime = Symbol('k_prime', prime=True)\n+    eq_prime, _ = posify(k_prime)\n+    assert 'prime' in eq_prime.assumptions0 and eq_prime.assumptions0['prime'] is True\n+\n+    k_even = Symbol('k_even', even=True)\n+    eq_even, _ = posify(k_even)\n+    assert 'even' in eq_even.assumptions0 and eq_even.assumptions0['even'] is True\n+\n+    k_odd = Symbol('k_odd', odd=True)\n+    eq_odd, _ = posify(k_odd)\n+    assert 'odd' in eq_odd.assumptions0 and eq_odd.assumptions0['odd'] is True\n     # simplify should call cancel\n     from sympy.abc import x, y\n     f = Function('f')\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..9624b27 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase, Idx\n \n x, y, z = symbols('x y z')\n \n@@ -35,6 +37,13 @@ def test_PythonCodePrinter():\n                                                         ' (3) if (x > 0) else None)'\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n+    # Test for Indexed printing\n+    p = IndexedBase(\"p\")\n+    i, j = map(Idx, symbols('i j'))\n+    assert prntr.doprint(p[0]) == 'p[0]'\n+    assert prntr.doprint(p[i]) == 'p[i]'\n+    assert prntr.doprint(p[i, j]) == 'p[i, j]'\n+\n \n def test_MpmathPrinter():\n     p = MpmathPrinter()\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..ed4a90e 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -31,7 +31,16 @@ def get_string(dump_fn, routines, prefix=\"file\", **kwargs):\n     return source\n \n \n-def test_cython_wrapper_scalar_function():\n+def test_autowrap_cython_unused_array_arg():\n+    \"\"\"\n+    Test for the issue where autowrap with cython backend fails when\n+    array arguments do not appear in the wrapped expression.\n+    \"\"\"\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n     x, y, z = symbols('x,y,z')\n     expr = (x + y)*z\n     routine = make_routine(\"test\", expr)\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..8614233 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,8 +248,15 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n+def test_encode_morse_numbers():\n+    # Verifying the encoding of numbers from 0 to 9 in Morse code\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('0123456789') == '-----|.----|..---|...--|....-|.....|-....|--...|---..|----.'\n \n def test_decode_morse():\n+    # Verifying the decoding of numbers from 0 to 9 in Morse code\n+    assert decode_morse('.----') == '1'\n+    assert decode_morse('-----|.----|..---|...--|....-|.....|-....|--...|---..|----.') == '0123456789'\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..cb18e3f 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -808,10 +808,21 @@ def test_issue_15965():\n     bnew = y*Integral(x, x)\n     assert simplify(A + B) == anew + bnew\n     assert simplify(A) == anew\n+\n+def test_issue_17137_complex_exponents():\n+    from sympy import cos, simplify, I, Symbol\n+    x = Symbol('x')\n+    # Test the specific issue with cos(x)**I\n+    assert simplify(cos(x)**I) == cos(x)**I\n+    # Test other similar cases with complex exponents\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I)\n+    assert simplify(cos(x)**(-I)) == cos(x)**(-I)\n+    assert simplify(cos(x)**(1 + I)) == cos(x)**(1 + I)\n+    assert simplify(cos(x)**(-2 - 3*I)) == cos(x)**(-2 - 3*I)\n     assert simplify(B) == bnew\n \n \n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..dc97fac 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,5 +1,7 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n-from sympy.simplify.sqrtdenest import _subsets as subsets\n+from sympy.simplify.sqrtdenest import _subsets as subsets, _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.utilities.pytest import slow\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n@@ -175,8 +177,19 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n-\n-def test_issue_5653():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    # Check if the expression returns unchanged\n+    assert sqrtdenest((3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2) == (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    # Check if _sqrt_match functions correctly\n+    assert _sqrt_match(4 + I) == []\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n+    # Test additional cases\n+    expr1 = (sqrt(2) + sqrt(3))**2\n+    assert sqrtdenest(expr1) == 5 + 2*sqrt(6)\n+    expr2 = sqrt(1 + sqrt(5)) + sqrt(5 + sqrt(29))\n+    assert sqrtdenest(expr2) == expr2 # Already denested, should remain unchanged\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..c7148ba 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n@@ -95,6 +96,14 @@ def test_point():\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n \n+    # Test commutativity of multiplication with sympify\n+    from sympy import sympify\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    multiplier = sympify(2.0)\n+    assert point1 + point2 * multiplier == Point(2, 2), \"point2 * multiplier should work\"\n+    assert point1 + multiplier * point2 == Point(2, 2), \"multiplier * point2 should work\"\n+\n     # Point differences should be simplified\n     assert Point(x*(x - 1), y) - Point(x**2 - x, y + 1) == Point(0, -1)\n \n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..85baf46 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -554,6 +554,33 @@ def test_diophantine():\n     assert diophantine((y**2-x), t) == set([(t**2, -t)])\n \n \n+def test_issue_18186():\n+    from sympy import diophantine, symbols\n+\n+    x, y = symbols('x y')\n+    equation = x**4 + y**4 - 2**4 - 3**4\n+    \n+    # Test the original bug cases\n+    solutions1 = diophantine(equation, syms=(x, y), permute=True)\n+    solutions2 = diophantine(equation, syms=(y, x), permute=True)\n+    \n+    expected_solutions = {(-3, -2), (-3, 2), (-2, -3), (-2, 3), \n+                          (2, -3), (2, 3), (3, -2), (3, 2)}\n+    \n+    assert solutions1 == expected_solutions\n+    assert solutions2 == expected_solutions\n+\n+    # Check if both outputs are equal\n+    assert solutions1 == solutions2\n+\n+    # Additional test case for different equation\n+    z = symbols('z')\n+    additional_eq = x**2 + y**2 - z**2 - 1\n+    solutions3 = diophantine(additional_eq, syms=(x, y, z), permute=True)\n+    solutions4 = diophantine(additional_eq, syms=(z, y, x), permute=True)\n+    \n+    assert solutions3 == solutions4\n+\n def test_general_pythagorean():\n     from sympy.abc import a, b, c, d, e\n \n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..b6d3f0f 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -675,6 +675,21 @@ def test_latex_derivatives():\n def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+    # Test for the Subs parenthesization issue\n+    assert latex(3*Subs(-x+y, (x,),(1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    \n+    # Additional test cases\n+    # Test subs with a more complex expression\n+    assert latex(Subs(2*x + 3*y, (x, y), (0, 1))) == r'\\left. \\left(2 x + 3 y\\right) \\right|_{\\substack{ x=0\\\\ y=1 }}'\n+\n+    # Test subs with single variable and constant\n+    assert latex(Subs(x**2 + x + 1, (x,), (2,))) == r'\\left. \\left(x^{2} + x + 1\\right) \\right|_{\\substack{ x=2 }}'\n+    \n+    # Multiplying Subs with a negative number\n+    assert latex(-2*Subs(x + y, (x,), (3,))) == r'-2 \\left. \\left(x + y\\right) \\right|_{\\substack{ x=3 }}'\n+\n+    # Test with nested substitutions\n+    assert latex(Subs(Subs(x + y, (x,), (y,)), (y,), (1,))) == r'\\left. \\left. \\left(x + y\\right) \\right|_{\\substack{ x=y }} \\right|_{\\substack{ y=1 }}'\n \n \n def test_latex_integrals():\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..fdff643 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -513,6 +513,34 @@ def test_kernS():\n     one = kernS('x - (x - 1)')\n     assert one != 1 and one.expand() == 1\n \n+from sympy.core.sympify import kernS\n+from sympy import Symbol, Add, Mul, S, Rational, Interval, exp\n+from sympy.abc import x, y\n+\n+def test_kernS_issue_resolution():\n+    # Test the main issue: 'kern' referenced before assignment\n+    try:\n+        result = kernS(\"(2*x)/(x-1)\")\n+        assert result == 2*x/(x-1)\n+    except UnboundLocalError:\n+        assert False, \"kernS caused UnboundLocalError for a valid expression\"\n+\n+    # Additional test cases for varied expressions\n+    assert kernS(\"(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x))\") \\\n+           == (-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x))\n+\n+    # Test with spaces\n+    assert kernS(\" 2 *( x + y ) \") == 2*(x + y)\n+\n+    # Test with symbols\n+    assert kernS(\"x - (x - 1)\") == Symbol(\"x\") - (Symbol(\"x\") - 1)\n+\n+    # Test with rational numbers\n+    assert kernS(\"1/3*x + 5/7*y\") == Rational(1, 3)*x + Rational(5, 7)*y\n+\n+    # Negative powers and nested expressions\n+    assert kernS(\"x**-2 + 3/(2 + 5*x)\") == x**-2 + 3/(2 + 5*x)\n+\n \n def test_issue_6540_6552():\n     assert S('[[1/3,2], (2/5,)]') == [[Rational(1, 3), 2], (Rational(2, 5),)]\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..82550a1 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -84,7 +85,22 @@ def test_unitary():\n     assert Dagger(U).is_commutative is False\n \n \n-def test_identity():\n+def test_dagger_mul_issue():\n+    O = Operator('A')\n+    I = IdentityOperator()\n+    \n+    # Ensure that A * I simplifies to A correctly\n+    assert O * I == O\n+    \n+    # Ensure that Dagger(A) * I simplifies to Dagger(A)\n+    assert Dagger(O) * I == Dagger(O)\n+    \n+    # Ensure that I * Dagger(A) simplifies to Dagger(A)\n+    assert I * Dagger(O) == Dagger(O)\n+    \n+    # Testing the original issue scenario\n+    B = Dagger(O)\n+    assert B * I == Dagger(O)\n     I = IdentityOperator()\n     O = Operator('O')\n     x = Symbol(\"x\")\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..d33dbfe 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -855,6 +855,25 @@ def test_generator_product():\n \n \n def test_sylow_subgroup():\n+    # Test for original issue: DihedralGroup(18) and p=2\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Test for original issue: DihedralGroup(50) and p=2\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    # Additional cases for DihedralGroup with different parameters\n+    G = DihedralGroup(60)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() > 0  # Ensure no IndexError and has valid order\n+\n+    G = DihedralGroup(100)\n+    S = G.sylow_subgroup(p=5)\n+    assert S.order() > 0  # Ensure no IndexError and has valid order\n+\n     P = PermutationGroup(Permutation(1, 5)(2, 4), Permutation(0, 1, 2, 3, 4, 5))\n     S = P.sylow_subgroup(2)\n     assert S.order() == 4\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..d9f15cf 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,37 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n-\n def test_partitions():\n+    # Check that partitions do not share dictionary instances.\n+    prev_partition = None\n+    for p in partitions(6, k=2):\n+        if prev_partition is not None:\n+            assert p is not prev_partition, \"Dictionaries should not be the same instance\"\n+        prev_partition = p\n+\n+    prev_partition = None\n+    for p in partitions(6, k=3):\n+        if prev_partition is not None:\n+            assert p is not prev_partition, \"Dictionaries should not be the same instance\"\n+        prev_partition = p\n+\n+    prev_partition = None\n+    for p in partitions(8, k=4, m=3):\n+        if prev_partition is not None:\n+            assert p is not prev_partition, \"Dictionaries should not be the same instance\"\n+        prev_partition = p\n+        \n+    prev_partition = None\n+    for p in partitions(S(3), m=2):\n+        if prev_partition is not None:\n+            assert p is not prev_partition, \"Dictionaries should not be the same instance\"\n+        prev_partition = p\n+        \n+    prev_partition = None\n+    for p in partitions(4, k=3):\n+        if prev_partition is not None:\n+            assert p is not prev_partition, \"Dictionaries should not be the same instance\"\n+        prev_partition = p\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..dd457dc 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -583,6 +583,13 @@ def test_Float():\n         assert Float(i) is a\n \n \n+def test_zero_not_false():\n+    # https://github.com/sympy/sympy/issues/20796\n+    from sympy import S\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n \n @conserve_mpmath_dps\n def test_float_mpf():\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..b7c8a79 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -19,8 +20,33 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+def test_issue_21373_hyperbolic_piecewise_subs():\n+    from sympy.functions.elementary.hyperbolic import sinh, cosh, tanh\n+    from sympy import Piecewise, exp, sin, log\n+\n+    # Basic recreation of the original issue\n+    x_r, y_r, z = symbols('x_r y_r z', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    expr.subs({1: 1.0})  # should not raise an error\n+\n+    # Testing with `cosh` instead of `sinh`\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    expr_cosh.subs({1: 1.0})  # should not raise an error\n+\n+    # Testing with `tanh` instead of `sinh`\n+    expr_tanh = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    expr_tanh.subs({1: 1.0})  # should not raise an error\n+\n+    # Removing the division by `z`\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    expr_no_div.subs({1: 1.0})  # should work fine\n+\n+    # Testing alternative operations\n+    expr_sin = sin(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    expr_sin.subs({1: 1.0})  # should not raise an error\n \n-def test_subs_Matrix():\n+    expr_log = log(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    expr_log.subs({1: 1.0})  # should not raise an error\n     z = zeros(2)\n     z1 = ZeroMatrix(2, 2)\n     assert (x*y).subs({x:z, y:0}) in [z, z1]\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..d633b19 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -13,7 +13,8 @@ from sympy.polys.polyerrors import ExactQuotientFailed\n \n from sympy.abc import a, b, c, x, y, z\n from sympy.core import S, symbols\n-from sympy.testing.pytest import raises\n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n \n \n def test_monomials():\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..8ede565 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -268,6 +268,8 @@ def test_String():\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n \n+    # Check argument invariance for `String` class\n+    assert st.func(*st.args) == st\n \n     class Signifier(String):\n         pass\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..9e31d6f 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -443,8 +444,26 @@ def test_unit():\n def test_dot():\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n-\n-def test__normalize_dimension():\n+def test_issue_22684():\n+    from sympy.core.parameters import evaluate\n+    from sympy.geometry import Point\n+\n+    # Test with evaluate(False)\n+    with evaluate(False):\n+        p = Point(1, 2)\n+        assert isinstance(p, Point)\n+        assert p == Point(1, 2)\n+    \n+    # Test without the evaluate context manager (default behavior)\n+    p = Point(1, 2)\n+    assert p == Point(1, 2)\n+\n+    # Verify evaluate=False argument method directly\n+    p = Point(1, 2, evaluate=False)\n+    assert p == Point(1, 2)\n+    \n+    # Ensure no imaginary coordinates are allowed\n+    raises(ValueError, lambda: Point(1, 2*I))\n     assert Point._normalize_dimension(Point(1, 2), Point(3, 4)) == [\n         Point(1, 2), Point(3, 4)]\n     assert Point._normalize_dimension(\n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..064d9a9 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -33,6 +34,10 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n     assert prntr.doprint(-Mod(x, y)) == '-(x % y)'\n     assert prntr.doprint(Mod(-x, y)) == '(-x) % y'\n+    assert prntr.doprint(Min(x, y)) == 'min(x, y)'\n+    assert prntr.doprint(Max(x, y)) == 'max(x, y)'\n+    assert prntr.doprint(Min(x, y, z)) == 'min(x, y, z)'\n+    assert prntr.doprint(Max(x, -y, z)) == 'max(x, -y, z)'\n     assert prntr.doprint(And(x, y)) == 'x and y'\n     assert prntr.doprint(Or(x, y)) == 'x or y'\n     assert not prntr.module_imports\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..b466e95 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,9 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n@@ -1198,7 +1201,20 @@ def test_issue_14941():\n     assert f3(2, 3) == [3, 2]\n \n \n-def test_lambdify_Derivative_arg_issue_16468():\n+def test_single_element_tuple_output():\n+    # This test is for the issue related to single-element tuple representation.\n+    f2b = lambdify([], (1,))  # this should return a tuple with a single element\n+    assert f2b() == (1,)\n+\n+    # Ensure that the source code includes the comma to denote a single-element tuple\n+    src = inspect.getsource(f2b)\n+    assert 'return (1,)' in src\n+\n+    # Also test tuples with more elements to ensure they are printed correctly\n+    f2c = lambdify([], (1, 2))\n+    assert f2c() == (1, 2)\n+    src2 = inspect.getsource(f2c)\n+    assert 'return (1, 2)' in src2\n     f = Function('f')(x)\n     fx = f.diff()\n     assert lambdify((f, fx), f + fx)(10, 5) == 15\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..1d25eb3 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,6 +1,8 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.sympify import sympify  # can't import as S yet\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n@@ -303,6 +305,33 @@ def test_symbols():\n     assert sym('a1(2:4)') == '(a12, a13)'\n     assert sym('a0:2.0:2') == '(a0.0, a0.1, a1.0, a1.1)'\n     assert sym('aa:cz') == '(aaz, abz, acz)'\n+\n+def test_symbols_with_function_cls():\n+    # Test when using extra layer of parentheses for symbols with cls=Function\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert isinstance(q[0], UndefinedFunction)\n+    assert isinstance(q[1], UndefinedFunction)\n+    assert isinstance(u[0], UndefinedFunction)\n+    assert isinstance(u[1], UndefinedFunction)\n+    \n+    # Test without extra layer of parentheses to ensure expected behavior\n+    q, u = symbols('q:2 u:2', cls=Function)\n+    assert isinstance(q[0], UndefinedFunction)\n+    assert isinstance(q[1], UndefinedFunction)\n+    assert isinstance(u[0], UndefinedFunction)\n+    assert isinstance(u[1], UndefinedFunction)\n+\n+    # Mixing Symbols and Functions in one call\n+    x, f = symbols(('x', 'f'), cls=Function)\n+    assert isinstance(x, UndefinedFunction)\n+    assert isinstance(f, UndefinedFunction)\n+\n+    # Test without cls parameter for normal Symbol behavior\n+    a, b = symbols(('a:2', 'b:2'))\n+    assert isinstance(a[0], Symbol)\n+    assert isinstance(a[1], Symbol)\n+    assert isinstance(b[0], Symbol)\n+    assert isinstance(b[1], Symbol)\n     assert sym('aa:c0:2') == '(aa0, aa1, ab0, ab1, ac0, ac1)'\n     assert sym('aa:ba:b') == '(aaa, aab, aba, abb)'\n     assert sym('a:3b') == '(a0b, a1b, a2b)'\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..f593c3b 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -257,6 +257,20 @@ def test_kahane_simplify1():\n     t = (G(mu)*G(nu)*G(rho)*G(sigma)*G(-mu))\n     r = kahane_simplify(t)\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n+\n+    # Test for the fixed bug described in the issue\n+    t = (G(mu)*G(-mu)*G(rho)*G(sigma))\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = (G(rho)*G(sigma)*G(mu)*G(-mu))\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    # Test with no contractions, should remain unchanged\n+    t = (G(rho)*G(sigma))\n+    r = kahane_simplify(t)\n+    assert r.equals(G(rho)*G(sigma))\n     t = (G(mu)*G(nu)*G(rho)*G(sigma)*G(-mu))\n     r = kahane_simplify(t)\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..d27a0a0 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -46,6 +46,15 @@ def test_as_set():\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n \n-def test_type_error():\n+def test_as_set_not_implemented():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    z = Symbol('z')\n+    # x in {y} should raise NotImplementedError\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y)).as_set())\n+    # x in Integers should raise NotImplementedError\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+    # x in Reals should raise NotImplementedError\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..f104bd8 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,6 +541,29 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second, Quantity\n+    from sympy import exp\n+    from sympy.physics.units.systems.si import SI\n+    from sympy.physics.units.dimensions import Dimension\n+    \n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..93cee0d 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,28 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+def test_issue_24211():\n+    from sympy.physics.units import Quantity, time, velocity, acceleration, second, meter\n+    from sympy.physics.units.systems.si import SI\n+\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1*t1 + v1\n+    # should not throw ValueError here\n+    result = SI._collect_factor_and_dimension(expr1)\n+    assert result[1] == units.velocity\n+\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..7768123 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -56,8 +57,20 @@ def test_homomorphism():\n     assert T.domain == F\n     assert T.codomain == D\n     assert T(a*b) == p\n-\n-def test_isomorphisms():\n+def test_check_homomorphism_permutation_group():\n+    from sympy.combinatorics import Permutation\n+    from sympy.combinatorics.homomorphisms import homomorphism\n+    from sympy.combinatorics.named_groups import DihedralGroup\n+\n+    # Dihedral group with homomorphism using its generators\n+    D3 = DihedralGroup(3)\n+    \n+    # Test homomorphism with original generators and their inverses\n+    try:\n+        T = homomorphism(D3, D3, D3.generators, D3.generators)\n+        assert T.is_isomorphism(), \"Expected to establish a valid isomorphism\"\n+    except ValueError as e:\n+        assert False, f\"Raised an unexpected ValueError: {e}\"\n \n     F, a, b = free_group(\"a, b\")\n     E, c, d = free_group(\"c, d\")\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..404939e 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -267,6 +267,22 @@ def test_PolyElement_as_expr():\n \n     raises(ValueError, lambda: f.as_expr(X))\n \n+    # Additional test cases for verifying PolyElement.as_expr() behavior\n+    U, V, W = symbols(\"u,v,w\")\n+    g_with_uv = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g_with_uv\n+\n+    # Test with more symbols than generators\n+    A, B, C, D = symbols(\"a,b,c,d\")\n+    raises(ValueError, lambda: f.as_expr(A, B, C, D))\n+\n+    # Test with fewer symbols than generators\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n+    # Test with non-symbol input\n+    non_symbols = [1, 2, 3]\n+    raises(ValueError, lambda: f.as_expr(*non_symbols))\n+\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n",
  "sympy__sympy-24661": "",
  "astropy__astropy-14369": "",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..f93da5d 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1910,6 +1910,43 @@ class OperationTests(OperationTestBase):\n         )\n         # Test state alteration\n         new_state = project_state.clone()\n+\n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_check_constraint_with_or_and(self):\n+        app_label = 'test_checkconstraint_or_and'\n+        constraint_name = 'field_1_has_value_if_flag_set'\n+        from_state = self.set_up_test_model(app_label,\n+            fields=[\n+                ('field_1', models.IntegerField(blank=True, null=True)),\n+                ('flag', models.BooleanField()),\n+            ],\n+            constraints=[\n+                models.CheckConstraint(\n+                    check=models.Q(models.Q(field_1__isnull=False, flag=True) | models.Q(flag=False)),\n+                    name=constraint_name\n+                ),\n+            ]\n+        )\n+        \n+        operation = migrations.AddConstraint('TestModel', models.CheckConstraint(\n+            check=models.Q(models.Q(field_1__isnull=False, flag=True) | models.Q(flag=False)),\n+            name=constraint_name\n+        ))\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        \n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        \n+        TestModel = to_state.apps.get_model(app_label, 'TestModel')\n+        \n+        # These should raise an IntegrityError due to check constraint failure\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestModel.objects.create(field_1=None, flag=True)\n+        \n+        # These should pass\n+        TestModel.objects.create(field_1=1, flag=True)\n+        TestModel.objects.create(field_1=None, flag=False)\n         gt_operation.state_forwards(\"test_removeconstraint\", new_state)\n         self.assertEqual(len(new_state.models[\"test_removeconstraint\", \"pony\"].options['constraints']), 1)\n         Pony = new_state.apps.get_model(\"test_removeconstraint\", \"Pony\")\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..8a430d9 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -151,6 +151,16 @@ class URLTranslationTests(URLTestCaseBase):\n \n     def test_translate_url_utility(self):\n         with translation.override('en'):\n+            # Test translation of URL with optional parameters where all parameters are present\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/2/', 'nl'),\n+                '/nl/regex_optional/1/2/'\n+            )\n+            # Test translation of URL with missing optional parameters\n+            self.assertEqual(\n+                translate_url('/en/regex_optional/1/', 'nl'),\n+                '/nl/regex_optional/1/'\n+            )\n             self.assertEqual(translate_url('/en/nonexistent/', 'nl'), '/en/nonexistent/')\n             self.assertEqual(translate_url('/en/users/', 'nl'), '/nl/gebruikers/')\n             # Namespaced URL\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..5b1a4e4 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -16,6 +17,25 @@ from .models import (\n     SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n )\n \n+class ResetPrimaryKeyTestCase(TestCase):\n+    def setUp(self):\n+        # Create an instance of Derived\n+        self.derived = Derived.objects.create(f=True)\n+\n+    def test_reset_primary_key(self):\n+        # Fetch the object and reset it\n+        obj = Derived.objects.get(pk=self.derived.pk)\n+        obj.reset()\n+        obj.save()\n+\n+        # Ensure a new object is created\n+        self.assertEqual(Derived.objects.count(), 2)\n+\n+        # Check that the new object does not have the same pk\n+        objs = Derived.objects.all()\n+        self.assertNotEqual(objs[0].pk, objs[1].pk)\n+        self.assertFalse(objs[1].f)\n+\n \n class ModelInheritanceTest(TestCase):\n     def test_model_inheritance(self):\n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..de9a948 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -604,8 +604,20 @@ class DeletionTests(TestCase):\n                 signal.disconnect(receiver, sender=Referrer)\n \n \n+from django.test import TestCase\n+from .models import User, Avatar, M2MTo, M2MFrom, Child, Parent, Origin, Referrer, SecondReferrer\n+from django.db import connection\n+\n class FastDeleteTests(TestCase):\n \n+    def test_fast_delete_all(self):\n+        User.objects.create()  # Ensure there's at least one row.\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries should be used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+\n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n@@ -702,4 +714,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..71a1911 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -110,7 +111,25 @@ class PickleabilityTestCase(TestCase):\n         self.assertEqual(original, reloaded)\n         self.assertIs(reloaded.__class__, dynclass)\n \n-    def test_specialized_queryset(self):\n+    def test_pickled_values_queryset(self):\n+        qs = Happening.objects.values('name').annotate(latest_time=models.Max('when'))\n+        reloaded = Happening.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+        # Verify correct unpickling and evaluation of queryset\n+        self.assertEqual(reloaded.get(), {'name': 'test', 'latest_time': self.happening.when})\n+\n+    def test_pickled_values_list_queryset(self):\n+        # Test values_list() pickling and unpickling, ensuring it converts back to values()\n+        tests = [\n+            Happening.objects.values_list('name'),\n+            Happening.objects.values_list('name', flat=True),\n+            Happening.objects.values_list('name', named=True),\n+        ]\n+        for qs in tests:\n+            with self.subTest(qs._iterable_class.__name__):\n+                reloaded = Happening.objects.all()\n+                reloaded.query = pickle.loads(pickle.dumps(qs.query))\n+                self.assertEqual(reloaded.get(), {'name': 'test'})\n         self.assert_pickles(Happening.objects.values('name'))\n         self.assert_pickles(Happening.objects.values('name').dates('when', 'year'))\n         # With related field (#14515)\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..e56d4a5 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -25,6 +25,13 @@ class JSONFieldTest(SimpleTestCase):\n             field.clean('{some badly formed: json}')\n \n     def test_prepare_value(self):\n+        field = JSONField()\n+        # Test with Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d\u4e16\u754c'}), '{\"a\": \"\u4f60\u597d\u4e16\u754c\"}')\n+        # Test with emojis\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        # Test with a mix of Unicode characters\n+        self.assertEqual(field.prepare_value(['\u4f60\u597d', '\u4e16\u754c', '\ud83d\ude00\ud83d\udc31']), '[\"\u4f60\u597d\", \"\u4e16\u754c\", \"\ud83d\ude00\ud83d\udc31\"]')\n         field = JSONField()\n         self.assertEqual(field.prepare_value({'a': 'b'}), '{\"a\": \"b\"}')\n         self.assertEqual(field.prepare_value(None), 'null')\n",
  "django__django-14404": "",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..b5702d8 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,7 +691,32 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n-    def test_migration_path(self):\n+    def test_serialize_type_model(self):\n+        self.assertSerializedEqual(models.Model)\n+        self.assertSerializedResultEqual(\n+            MigrationWriter.serialize(models.Model),\n+            (\"('models.Model', {'from django.db import models'})\", set()),\n+        )\n+        \n+    def test_migration_with_mixin_and_abstract_base(self):\n+        # Construct the migration operation similar to the issue scenario\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name='MyModel',\n+                    fields=[('name', models.TextField(primary_key=True, serialize=False))],\n+                    bases=(model_module.MyMixin, models.Model),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        \n+        # Execute the generated output and check if models is defined\n+        result = self.safe_exec(output)\n+        self.assertIn(\"models\", result)\n+        self.assertIn(\"MyMixin\", result)\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n             'migrations.migrations_test_apps.with_package_model',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..1c004a1 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1630,16 +1630,23 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n \n-    def test_exists_none_with_aggregate(self):\n-        qs = Book.objects.all().annotate(\n-            count=Count('id'),\n-            exists=Exists(Author.objects.none()),\n-        )\n-        self.assertEqual(len(qs), 6)\n+    def test_aggregation_default_after_annotation(self):\n+        result = Book.objects.annotate(idx=F('id')).aggregate(Sum('id', default=0))\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregation_without_default_after_annotation(self):\n+        # This is just to assert that the method without 'default' works\n+        result = Book.objects.annotate(idx=F('id')).aggregate(Sum('id'))\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregation_with_coalesce_workaround(self):\n+        # Testing the Coalesce workaround as described in the issue\n+        result = Book.objects.annotate(idx=F('id')).aggregate(x=Coalesce(Sum('id'), 0))\n+        self.assertEqual(result['x'], 4560)\n \n     def test_exists_extra_where_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..1d37d25 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2985,6 +2985,19 @@ class OperationTests(OperationTestBase):\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         # Reverse is a no-op.\n+        \n+        # Test moving an unnamed index backward and forwards.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        \n+        # Ensure the index with auto-generated name is restored when moved back.\n+        self.assertIndexNotExists(table_name, \"new_pony_test_idx\")\n+        \n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Ensure the index can be renamed again after being restored.\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..b474b05 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3496,6 +3496,27 @@ class FormFieldCallbackTests(SimpleTestCase):\n                 type(NewForm.base_fields[name].widget),\n             )\n \n+    def test_modelform_factory_respects_formfield_callback_in_meta(self):\n+        class TestModel(models.Model):\n+            field1 = models.CharField(max_length=100)\n+            field2 = models.IntegerField()\n+\n+        def custom_callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.TextInput(attrs={'class': 'custom'}))\n+\n+        class BaseModelForm(forms.ModelForm):\n+            class Meta:\n+                model = TestModel\n+                fields = '__all__'\n+                formfield_callback = custom_callback\n+\n+        CustomForm = modelform_factory(TestModel, form=BaseModelForm)\n+\n+        # Check that each field in the form uses a formfield generated by the callback\n+        for field in CustomForm.base_fields.values():\n+            self.assertEqual(type(field.widget), forms.TextInput)\n+            self.assertEqual(field.widget.attrs.get('class'), 'custom')\n+\n \n class LocalizedModelFormTest(TestCase):\n     def test_model_form_applies_localize_to_some_fields(self):\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..6867ad8 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -5,8 +5,7 @@ import re\n \n from django.core import serializers\n from django.core.serializers.base import DeserializationError\n-from django.core.serializers.json import DjangoJSONEncoder\n-from django.db import models\n+from django.core import serializers\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n from django.utils.translation import gettext_lazy, override\n@@ -258,7 +257,32 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             for obj in serializers.deserialize(\"json\", test_string, ignore=False):\n                 obj.save()\n \n-    def test_helpful_error_message_for_many2many_not_iterable(self):\n+    def test_m2m_serialization_with_custom_manager_select_related(self):\n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+\n+        class TestTagManager(models.Manager):\n+            def get_queryset(self):\n+                qs = super().get_queryset()\n+                qs = qs.select_related(\"master\")\n+                return qs\n+\n+        class TestTag(models.Model):\n+            objects = TestTagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test_instance = Test.objects.create(name=\"test\")\n+        test_instance.tags.add(tag)\n+        \n+        with self.assertRaises(django.core.exceptions.FieldError):\n+            serializers.serialize(\"json\", [test_instance])\n         \"\"\"\n         Not iterable many-to-many field value throws a helpful error message.\n         \"\"\"\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..8bcd7cb 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -207,7 +207,31 @@ def test_cmap(cmap):\n     pickle.dumps(cmap)\n \n \n-def test_unpickle_canvas():\n+def test_unpickle_with_device_pixel_ratio():\n+    import matplotlib.pyplot as plt\n+    import pickle\n+\n+    fig = plt.figure(dpi=42)\n+    fig.canvas._set_device_pixel_ratio(7)\n+    # Assert the initial condition after setting device pixel ratio.\n+    assert fig.dpi == 42 * 7\n+\n+    # \"Pickle\" the figure\n+    fig2 = pickle.loads(pickle.dumps(fig))\n+    # Assert the DPI is still what it was before pickling\n+    assert fig2.dpi == 42 * 7\n+\n+@pytest.mark.skipif(platform.system() != \"Darwin\" or platform.machine() != \"arm64\",\n+                    reason=\"Test specific to M1 Mac architecture.\")\n+def test_dpi_persistence_after_unpickling():\n+    import matplotlib.pyplot as plt\n+    \n+    fig = plt.figure(dpi=200)\n+    initial_dpi = fig.dpi\n+    \n+    for _ in range(10):\n+        fig = pickle.loads(pickle.dumps(fig))\n+        assert fig.dpi == initial_dpi   # Assert the DPI remains constant\n     fig = mfigure.Figure()\n     assert fig.canvas is not None\n     out = BytesIO()\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..8b3a4a6 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6586,7 +6586,12 @@ def test_integrate(dask):\n     assert isinstance(actual.data, type(da.data))\n \n     # along y\n-    actual = da.integrate(\"y\")\n+    # Test if 'dim' argument triggers a warning and 'coord' argument is used instead\n+    with pytest.warns(FutureWarning, match=\"Use of 'dim' is deprecated, use 'coord' instead\"):\n+        da.integrate(dim=\"x\")\n+    \n+    # Since 'coord' is the correct parameter, test its usage directly.\n+    actual = da.integrate(coord=\"y\")\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..f150f42 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3045,7 +3045,13 @@ class TestDataset:\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n \n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_to_unstacked_dataset_single_dim_variable(self):\n+        # single dimension: regression test for GH4049\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..6b96dfa 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -130,6 +130,31 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     )\n     assert assertString in output.err\n \n+from typing import Any\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar{1,3}\", [\"foo\", \"bar{1,3}\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgx={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n+\n \n def test_csv_regex_error(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error when an option is passed and one\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..8e1283e 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,21 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"ident\",\n+    (\n+        \"None\",\n+        \"True\",\n+        \"False\",\n+    ),\n+)\n+def test_invalid_ident_assertion(ident: str) -> None:\n+    try:\n+        Expression.compile(ident)\n+    except AssertionError:\n+        pytest.fail(\"Assertion error occurred when compiling the expression: {}\".format(ident))\n+\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..0d443a8 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,35 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_with_pandas_transform():\n+    \"\"\"Test FeatureUnion with transformers returning pandas DataFrames.\"\"\"\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import make_union\n+    from sklearn.utils._testing import assert_array_equal\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y=None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y=None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(drop=True)\n+\n+    # Use pandas configuration\n+    set_config(transform_output=\"pandas\")\n+\n+    # Apply FeatureUnion with the custom transformer\n+    transformed_data = make_union(MyTransformer()).fit_transform(data)\n+\n+    # Validate transformations\n+    expected_data = pd.DataFrame([240] * 4, columns=[\"MyTransformer__value\"])\n+    pd.testing.assert_frame_equal(transformed_data, expected_data)\n+\n+    # Reset configuration for other tests\n+    set_config(transform_output=\"default\")\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a32a965..a812b7b 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -266,8 +266,16 @@ def test_parse_annotation():\n                           [pending_xref, \"int\"],\n                           [desc_sig_punctuation, \"]\"]))\n \n+def test_none_type_link(app):\n+    # Test that `None` uses an object reference in signature mode\n+    doctree = _parse_annotation(\"None\")\n+    assert_node(doctree, ([pending_xref, \"None\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"obj\", reftarget=\"None\")\n \n-def test_pyfunction_signature(app):\n+    # Test that `int` as a return type uses a class reference\n+    doctree = _parse_annotation(\"int\")\n+    assert_node(doctree, ([pending_xref, \"int\"],))\n+    assert_node(doctree[0], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"int\")\n     text = \".. py:function:: hello(name: str) -> str\"\n     doctree = restructuredtext.parse(app, text)\n     assert_node(doctree, (addnodes.index,\n@@ -742,4 +750,3 @@ def test_modindex_common_prefix(app):\n                 IndexEntry('sphinx_intl', 0, 'index', 'module-sphinx_intl', '', '', '')])],\n         True\n     )\n-\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..4db7ca1 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1266,8 +1266,37 @@ class NumpyDocstringTest(BaseDocstringTest):\n                  description of yielded value\n         \"\"\"\n     )]\n+    def test_multiple_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like\n+            Input arrays, description of `x1`, `x2`.\n+        x3, x4 : int, optional\n+            Optional integer inputs, description of `x3`, `x4`.\n+        \"\"\"\n \n-    def test_sphinx_admonitions(self):\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+        :Parameters: * **x1, x2** (:class:`array_like`) -- Input arrays, description of `x1`, `x2`.\n+                     * **x3, x4** (:class:`int`, *optional*) -- Optional integer inputs, description of `x3`, `x4`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like`\n+        :param x3: Optional integer inputs, description of `x3`, `x4`.\n+        :type x3: :class:`int`\n+        :param x4: Optional integer inputs, description of `x3`, `x4`.\n+        :type x4: :class:`int`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n         admonition_map = {\n             'Attention': 'attention',\n             'Caution': 'caution',\n",
  "sphinx-doc__sphinx-8551": "diff --git a/sphinx/testing/restructuredtext.py b/sphinx/testing/restructuredtext.py\nindex fe1bd28..58e27c2 100644\n--- a/sphinx/testing/restructuredtext.py\n+++ b/sphinx/testing/restructuredtext.py\n@@ -7,15 +7,18 @@\n \"\"\"\n \n from os import path\n-\n+from sphinx.addnodes import pending_xref\n+from sphinx import addnodes\n from docutils import nodes\n from docutils.core import publish_doctree\n-\n+from sphinx.addnodes import pending_xref\n+from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.io import SphinxStandaloneReader\n from sphinx.parsers import RSTParser\n from sphinx.util.docutils import sphinx_domains\n-\n+from sphinx.addnodes import pending_xref\n+from sphinx import addnodes\n \n def parse(app: Sphinx, text: str, docname: str = 'index') -> nodes.document:\n     \"\"\"Parse a string as reStructuredText with Sphinx application.\"\"\"\n@@ -32,4 +35,4 @@ def parse(app: Sphinx, text: str, docname: str = 'index') -> nodes.document:\n                                    settings_overrides={'env': app.env,\n                                                        'gettext_compact': True})\n     finally:\n-        app.env.temp_data.pop('docname', None)\n+        app.env.temp_data.pop('docname', None)\n",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex fb15c70..8100397 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -8,6 +8,69 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_meta_public_variable(app):\n+    \"\"\"\n+    Test that a variable with :meta public: is documented even if it is private.\n+    \"\"\"\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None}\n+    # Create a mock module with a private variable having :meta public:\n+    example_code = '''\n+    _foo = None  #: :meta public:\n+    \n+    def a_function():\n+        \\\"\\\"\\\"Just a function to check.\\\"\\\"\\\"\n+    '''\n+    app.env.temp_data['example_module'] = example_code\n+    actual = do_autodoc(app, 'module', 'example_module', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: example_module',\n+        '',\n+        '',\n+        '.. py:data:: _foo',\n+        '   :module: example_module',\n+        '',\n+        '   :meta public:',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_meta_public_variable_private_members(app):\n+    \"\"\"\n+    Test private-members option with a variable having :meta public:.\n+    \"\"\"\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None, \"private-members\": None}\n+    example_code = '''\n+    _foo = None  #: :meta public:\n+    \n+    _bar = None  #: :meta private:\n+    \n+    def another_function():\n+        \\\"\\\"\\\"Another function for testing.\\\"\\\"\\\"\n+    '''\n+    app.env.temp_data['example_module'] = example_code\n+    actual = do_autodoc(app, 'module', 'example_module', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: example_module',\n+        '',\n+        '',\n+        '.. py:data:: _foo',\n+        '   :module: example_module',\n+        '',\n+        '   :meta public:',\n+        '',\n+        '',\n+        '.. py:data:: _bar',\n+        '   :module: example_module',\n+        '',\n+        '   :meta private:',\n+        '',\n+    ]\n+\n import pytest\n \n from .test_ext_autodoc import do_autodoc\n",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..a65f0b5 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -984,7 +984,48 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n-def test_info_field_list_var(app):\n+def test_info_field_list_correct_dict_str(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param opc_meta: (optional)\\n\"\n+            \"   :type opc_meta: dict(str, str)\\n\")\n+            \n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, [nodes.list_item, nodes.paragraph]]))\n+\n+    # :param opc_meta: + :type opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n             \"   :var int attr: blah blah\\n\")\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..ac1da8d 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1009,6 +1009,53 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n+import pytest\n+from sphinx.testing import restructuredtext\n+from docutils import nodes\n+from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n+\n+...\n+\n+def test_info_field_list_union_pipe(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:function:: foo(text)\\n\"\n+            \"\\n\"\n+            \"   :param text: a text\\n\"\n+            \"   :type text: bytes | str\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (\n+        nodes.target,\n+        addnodes.index,\n+        addnodes.index,\n+        [addnodes.desc, (\n+            addnodes.desc_signature, [\n+                addnodes.desc_annotation, \"function \",\n+                addnodes.desc_addname, \"example.\",\n+                addnodes.desc_name, \"foo\"\n+            ],\n+            addnodes.desc_content, nodes.field_list, nodes.field, (\n+                nodes.field_name, \"Parameters\",\n+                nodes.field_body, nodes.paragraph, [\n+                    addnodes.literal_strong, \"text\",\n+                    nodes.Text(\" (\"),\n+                    addnodes.pending_xref, addnodes.literal_emphasis, \"bytes\",\n+                    addnodes.literal_emphasis, \" | \",\n+                    addnodes.pending_xref, addnodes.literal_emphasis, \"str\",\n+                    nodes.Text(\") -- a text\")\n+                ]\n+            )\n+        )]\n+    ))\n+\n+    assert_node(doctree[3][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"bytes\",\n+                **{\"py:module\": \"example\", \"py:function\": \"foo\"})\n+    assert_node(doctree[3][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:function\": \"foo\"})\n+\n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..76a6898 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1048,6 +1048,19 @@ def test__solveset_multi():\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n \n+from sympy import Eq, cos, sin, solveset, ConditionSet, Reals, symbols\n+\n+x, n = symbols('x n')\n+\n+def test_issue_18188():\n+    # Test case from the original issue\n+    result1 = Eq(n*cos(n) - 3*sin(n), 0)\n+    assert solveset(result1, n, domain=Reals) == ConditionSet(n, Eq(n*cos(n) - 3*sin(n), 0), Reals)\n+\n+    # Additional test case to ensure generalization\n+    result2 = Eq(x**2 + sin(x) + x, 0)\n+    assert solveset(result2, x, domain=Reals) == ConditionSet(x, Eq(x**2 + sin(x) + x, 0), Reals)\n+\n def test_conditionset():\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..7a351e1 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3254,8 +3254,9 @@ def test_issue_5786():\n     assert expand(factor(expand(\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n-\n-def test_noncommutative():\n+def test_issue_18895_factor_with_extension():\n+    z = expand((x - 1)*(y - 1))\n+    assert factor(z, extension=[I]) == (x - 1)*(y - 1)\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..6157692 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -28,6 +29,13 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+def test_symbol_dict_and_slots():\n+    s = Symbol('s')\n+    assert hasattr(s, '__dict__'), \"Symbol instances should have a __dict__ attribute.\"\n+    assert s.__dict__ == {}, \"Symbol instance __dict__ should be an empty dictionary.\"\n+    assert hasattr(s, '__slots__'), \"Symbol class should still have __slots__ defined.\"\n+    assert s.__slots__ == ('name',), \"Symbol class __slots__ should contain 'name'.\"\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..c67ecbd 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -370,6 +370,33 @@ def test_Rational_new():\n     assert n.p == -2\n \n \n+from sympy import Rational\n+\n+def test_rational_string_input():\n+    # Test the scenario described in the issue\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+    assert Rational('0.5') / 100 == Rational(1, 200)\n+\n+def test_rational_mixed_input():\n+    # Test with mixed string and numeric inputs\n+    assert Rational('1.5', 3) == Rational(1, 2)\n+    assert Rational(3, '1.5') == Rational(2)\n+\n+def test_rational_edge_cases():\n+    # Edge cases where both inputs are strings\n+    assert Rational('1/2', '4/3') == Rational(3, 8)\n+    # Large numbers as strings\n+    large_number = str(10**12)\n+    assert Rational(large_number, large_number + '0') == Rational(1, 10)\n+\n+def test_rational_invalid_input():\n+    # Edge cases with invalid inputs\n+    try:\n+        Rational('1.0/2.0/3.0')\n+        assert False, \"Expected an exception for invalid input\"\n+    except TypeError:\n+        pass\n+\n def test_Number_new():\n     \"\"\"\"\n     Test for Number constructor\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..5348d14 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3201,8 +3201,23 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         form = SomeForm()\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n+    \n+    def test_boundwidget_id_for_label_choicewidget_options(self):\n+        \"\"\"\n+        Test BoundWidget.id_for_label respects the id set by ChoiceWidget.options.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'Option A'), ('b', 'Option B')],\n+                widget=CheckboxSelectMultiple,\n+            )\n \n-    def test_boundfield_widget_type(self):\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        \n+        # To simulate the fix where id_for_label uses 'self.data['attrs']['id']'\n+        self.assertEqual(subwidgets[0].id_for_label, 'prefix_field_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'prefix_field_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..874c3ff 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -302,7 +302,31 @@ def test_tool_line_handle():\n     assert tool_line_handle.positions == positions\n \n \n-def check_lasso_selector(**kwargs):\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_does_not_force_zero(direction):\n+    fig, ax = plt.subplots()\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    \n+    original_xbound = ax.get_xbound()\n+    original_ybound = ax.get_ybound()\n+    \n+    span_selector = widgets.SpanSelector(ax, print, direction, interactive=True)\n+    \n+    assert ax.get_xbound() == original_xbound, \"X bounds should not change when SpanSelector is created.\"\n+    assert ax.get_ybound() == original_ybound, \"Y bounds should not change when SpanSelector is created.\"\n+    \n+    # Simulate some events and ensure bounds stay the same\n+    press_data = [10.5, 11.5] if direction == \"horizontal\" else [10.5, 25]\n+    move_data = [11, 13] if direction == \"horizontal\" else [10.5, 29]\n+    release_data = move_data\n+    \n+    do_event(span_selector, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(span_selector, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+    do_event(span_selector, 'release', xdata=release_data[0], ydata=release_data[1], button=1)\n+    \n+    assert ax.get_xbound() == original_xbound, \"X bounds shouldn't change after using SpanSelector.\"\n+    assert ax.get_ybound() == original_ybound, \"Y bounds shouldn't change after using SpanSelector.\"\n     ax = get_ax()\n \n     def onselect(verts):\n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..2c4b696 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,86 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.decomposition import SparseCoder\n+from sklearn.linear_model import Lasso\n+from sklearn.utils._testing import assert_raises, assert_warns\n+\n+def test_sparse_coder_with_lasso_parameters():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** 0.25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                                        n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # Check that the underlying model fails to converge with small max_iter\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_alpha=0.001, transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # Check that increasing max_iter leads to convergence without warnings\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_alpha=0.001, transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n+def test_sparse_coder_with_different_alpha():\n+    \"\"\"Test SparseCoder with varying alpha parameters.\"\"\"\n+    # simulate some data\n+    X = np.array([[3.0] * 1000, [-1.0] * 1000]).reshape(1, -1)\n+    \n+    # a dictionary with patterns\n+    D = np.array([np.sin(np.linspace(0, 2 * np.pi, 2000))])\n+\n+    # with a very small alpha, the solution should be dense\n+    coder_low_alpha = SparseCoder(D, transform_algorithm='lasso_cd', transform_alpha=0.001)\n+    result_low_alpha = coder_low_alpha.transform(X)\n+    assert np.count_nonzero(result_low_alpha) > 100\n+\n+    # with a large alpha, the solution should be sparse\n+    coder_high_alpha = SparseCoder(D, transform_algorithm='lasso_cd', transform_alpha=1000)\n+    result_high_alpha = coder_high_alpha.transform(X)\n+    assert np.count_nonzero(result_high_alpha) < 10\n+\n+    # no convergence warnings should be raised\n+    with pytest.warns(None) as record:\n+        coder_low_alpha.transform(X)\n+    assert not record.list\n+\n+    with pytest.warns(None) as record:\n+        coder_high_alpha.transform(X)\n+    assert not record.list\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..94106c9 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,6 +148,28 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.datasets import make_multilabel_classification\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.utils._testing import assert_array_equal\n+\n+def test_cross_val_predict_multioutput_predict_proba():\n+    # Setup\n+    X, Y = make_multilabel_classification()\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+\n+    # Act\n+    pred_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+\n+    # Assert\n+    assert isinstance(pred_proba, list)\n+    assert len(pred_proba) == Y.shape[1]\n+    for i in range(Y.shape[1]):\n+        assert pred_proba[i].shape == (X.shape[0], len(mo_clf.estimators_[i].classes_))\n+\n # Import the data\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n",
  "sphinx-doc__sphinx-9658": "",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..397723a 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,8 +347,14 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n-\n-def test_issue_9983():\n+def test_issue_13546():\n+    n = Symbol('n', integer=True)\n+    k = Symbol('k', integer=True)\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    # Additional test cases\n+    assert p.subs(n, 3).doit() == S(77)/8\n+    assert p.subs(n, 4).doit() == S(969)/64\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n     assert p.is_convergent() is S.false\n@@ -357,4 +363,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}