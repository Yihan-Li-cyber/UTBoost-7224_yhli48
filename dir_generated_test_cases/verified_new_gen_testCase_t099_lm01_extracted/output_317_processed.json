{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..a718af1 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -49,6 +49,13 @@ compound_models = {\n             (np.array([False, False]),\n              np.array([[True], [True]]))\n             ),\n+    'nested_cm_issue': (m.Pix2Sky_TAN() & (m.Linear1D(10) & m.Linear1D(5)),\n+                        (np.array([False, False, True, True]),\n+                         np.array([[True,  True,  False, False],\n+                                   [True,  True,  False, False],\n+                                   [False, False, True,  False],\n+                                   [False, False, False, True]]))\n+    ),\n     'cm7': (map2 | p2 & sh1,\n             (np.array([False, True]),\n              np.array([[True, False], [False, True]]))\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..ba528aa 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,4 @@\n+\n import gc\n import warnings\n \n@@ -7,7 +8,7 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu, connect\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..917460d 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -136,6 +136,37 @@ class TestHeaderFunctions(FitsTestCase):\n             \"FLOATNUM= -4.6737463674763E+032\"\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ESO IFM CL RADIUS\"\n+        com = \"[m] radius arround actuator to avoid\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Additional cases to ensure broader coverage\n+        c = fits.Card(k, 0.1, com)\n+        expected_str = f\"{k} = 0.1 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 3.141592653589793, com)\n+        expected_str = f\"{k} = 3.141592653589793 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n \n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..983d510 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -596,6 +596,27 @@ class TestDiff(FitsTestCase):\n         assert diff.diff_ratio == 0.65\n \n         report = diff.report()\n+\n+    def test_identical_files_with_vla(self):\n+        \"\"\"Test that identical files with variable-length arrays (VLAs) are reported as identical.\"\"\"\n+        import numpy as np\n+        from astropy.io.fits import Column, BinTableHDU, FITSDiff\n+\n+        # Create a VLA column\n+        col = Column(name='a', format='QD', array=[[0], [0, 0]])\n+        # Create a binary table HDU with the VLA column\n+        hdu = BinTableHDU.from_columns([col])\n+\n+        # Write this HDU to a FITS file\n+        hdu.writeto('diffbug_vla.fits', overwrite=True)\n+\n+        # Ensure that comparing the file to itself returns True for identical\n+        diff = FITSDiff('diffbug_vla.fits', 'diffbug_vla.fits')\n+        assert diff.identical, \"Files with identical VLA columns should be reported as identical.\"\n+\n+        # Clean up generated file - could use a fixture or context manager instead in real tests\n+        import os\n+        os.remove('diffbug_vla.fits')\n         assert \"Column A data differs in row 0:\\n    a> True\\n    b> False\" in report\n         assert \"...and at 1 more indices.\\n Column D data differs in row 0:\" in report\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..149ff2f 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,34 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        def __call__(self, *args):\n+            \"FOO\"\n+            pass\n+\n+    class Subclass(Base):\n+        def __call__(self, *args):\n+            pass\n+\n+    if Base.__call__.__doc__ is not None:\n+        # TODO: Maybe if __doc__ is None this test should be skipped instead?\n+        assert Subclass.__call__.__doc__ == \"FOO\"\n+\n+    # Test for inherited docstring for properties\n+    class BaseWithProp(metaclass=misc.InheritDocstrings):\n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return 42\n+\n+    class SubclassWithProp(BaseWithProp):\n+        @property\n+        def bar(self):\n+            return 24\n \n-def test_set_locale():\n+    if BaseWithProp.bar.__doc__ is not None:\n+        assert SubclassWithProp.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..cee5e72 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -183,6 +183,18 @@ def test_unknown_unit3():\n \n     unit3 = u.Unit(\"BAR\", parse_strict='silent')\n     assert unit != unit3\n+\n+    # Test comparison with None from the reported issue\n+    assert unit != None  # noqa\n+    assert unit not in (None, u.m)\n+\n+    # Test comparison with other data types\n+    assert unit != 0\n+    assert unit != 1.0\n+    assert unit != \"Unrecognized string\"\n+    assert not isinstance(None, u.UnitBase)  # indirectly testing the unit with None comparison\n+    assert not isinstance(0, u.UnitBase)\n+    assert not isinstance(1.0, u.UnitBase)\n     assert not unit.is_equivalent(unit3)\n \n     with pytest.raises(ValueError):\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..1bcd63f 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -69,7 +69,18 @@ def test_minversion():\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n     bad_versions = ['1', '1.2rc1']\n+    test_versions_issue = {\n+        '0.12.3': [('0.12', True), ('0.12.3', True), ('0.12dev', False)],\n+        '1.14': [('1.14dev', False)],  # Similar to the issue scenario without trailing .3 causing failure\n+        '1.14.3': [('1.14dev', True)], # Should no longer throw TypeError\n+        '1.13.3': [('1.14dev', False)] # Version lower than dev should be False\n+    }\n+    \n+    for current_version, version_checks in test_versions_issue.items():\n+        test_module.__version__ = current_version\n+        for check_version, expected_result in version_checks:\n+            assert minversion(test_module, check_version) == expected_result\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..7090476 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -79,6 +79,38 @@ class TestHeaderFunctions(FitsTestCase):\n         assert header['B'] == 'B'\n         assert header.comments['B'] == 'C'\n \n+    def test_card_fromstring_bytes_and_str(self):\n+        \"\"\"Test loading Card from both bytes and str types (assuming ASCII encoding).\"\"\"\n+        # Test with bytes input\n+        card_bytes = fits.Card.fromstring(b\"ABC     = 'abc    '\")\n+        assert card_bytes.keyword == 'ABC'\n+        assert card_bytes.value == 'abc'\n+        \n+        # Test with str input\n+        card_str = fits.Card.fromstring(\"DEF     = 'def    '\")\n+        assert card_str.keyword == 'DEF'\n+        assert card_str.value == 'def'\n+\n+    def test_header_fromstring_various_inputs(self):\n+        \"\"\"Test Header.fromstring with bytes and str inputs.\"\"\"\n+        # Test with bytes input\n+        header_bytes = fits.Header.fromstring(b\"SIMPLE  =                    T / file does conform to FITS standard\\n\" +\n+                                              b\"BITPIX  =                   8 / number of bits per data pixel\\n\"    +\n+                                              b\"NAXIS   =                    0 / number of data axes\\n\"             +\n+                                              b\"END                                                                              \")\n+        assert header_bytes['SIMPLE'] == True\n+        assert header_bytes['BITPIX'] == 8\n+        assert header_bytes['NAXIS'] == 0\n+        \n+        # Test with str input\n+        header_str = fits.Header.fromstring(\"SIMPLE  =                    T / file does conform to FITS standard\\n\" \n+                                            \"BITPIX  =                   8 / number of bits per data pixel\\n\"\n+                                            \"NAXIS   =                    0 / number of data axes\\n\"\n+                                            \"END                                                                              \")\n+        assert header_str['SIMPLE'] == True\n+        assert header_str['BITPIX'] == 8\n+        assert header_str['NAXIS'] == 0\n+\n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n \n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..d4b7b6d 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -150,6 +150,17 @@ class TestQuantityCreation:\n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n \n+    def test_preserve_float16_dtype(self):\n+        \"\"\"Test that Quantity preserves the dtype of float16 input.\"\"\"\n+        # Create a scalar Quantity with np.float16 dtype\n+        q_float16_scalar = np.float16(1.0) * u.km\n+        assert q_float16_scalar.dtype == np.dtype(np.float16)\n+\n+        # Create an array Quantity with np.float16 dtype\n+        a_float16 = np.array([1.0, 2.0], dtype=np.float16)\n+        q_float16_array = u.Quantity(a_float16, u.yr)\n+        assert q_float16_array.dtype == np.dtype(np.float16)\n+\n     def test_copy(self):\n \n         # By default, a new quantity is constructed, but not if copy=False\n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..a3032bb 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -218,7 +218,15 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n-    # Trailing newlines not accepted\n+    \n+    # URLs with invalid unencoded characters in the username and password\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n     # Trailing junk does not take forever to reject\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..bcb3fed 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -9,7 +10,7 @@ from django.db.models import (\n     Max, Min, Sum, Value,\n )\n from django.test import TestCase\n-from django.test.utils import Approximate, CaptureQueriesContext\n+from django.db.models.expressions import Case, When\n from django.utils import timezone\n \n from .models import Author, Book, Publisher, Store\n@@ -389,7 +390,28 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_count_distinct_with_case(self):\n+        # This tests the original issue reported where COUNT with both Case and distinct causes syntax errors.\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(\n+                Case(When(pages__gt=300, then='rating')), distinct=True\n+            ),\n+        )\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_edge_cases(self):\n+        # Test with different conditions in Case to see if the issue persists across various conditions\n+        aggs = Book.objects.aggregate(\n+            distinct_high_ratings=Count(\n+                Case(When(rating__gte=4.0, then='rating')), distinct=True\n+            ),\n+            distinct_low_ratings=Count(\n+                Case(When(rating__lt=2.0, then='rating')), distinct=True\n+            ),\n+        )\n+        # Assuming hypothetical dataset values for expected results\n+        self.assertEqual(aggs['distinct_high_ratings'], 3)  # Adjust expected result as per the dataset\n+        self.assertEqual(aggs['distinct_low_ratings'], 2)   # Adjust expected result as per the dataset\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-10914": "",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..d509d9f 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,5 +1,7 @@\n+\n import os\n import signal\n+import subprocess\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n@@ -29,7 +31,44 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             DatabaseClient.runshell_db(dbinfo)\n         return self.subprocess_args, self.pgpass\n \n-    def test_basic(self):\n+    def test_pgpass_with_subprocess_run(self):\n+        \"\"\"Test that the PGPASSWORD environment variable is correctly set when using subprocess.run.\"\"\"\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'password': 'somepassword',\n+            'host': 'somehost',\n+            'port': '444',\n+        }\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db(dbinfo)\n+\n+        # Ensure PGPASSWORD is set in the environment\n+        self.assertEqual(self.pgpassword, 'somepassword')\n+\n+    def test_pgpass_without_password(self):\n+        \"\"\"Test that no PGPASSWORD environment variable is set if no password is provided.\"\"\"\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(args, 0)\n+\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'host': 'somehost',\n+            'port': '444',\n+        }\n+\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db(dbinfo)\n+\n+        # Ensure PGPASSWORD is not set in the environment\n+        self.assertIsNone(self.pgpassword)\n         self.assertEqual(\n             self._run_it({\n                 'database': 'dbname',\n@@ -113,4 +152,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..f2eb056 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -6,6 +6,9 @@ from django.core.management import call_command\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n \n+from django.contrib.contenttypes.models import ContentType\n+from django.db import IntegrityError\n+from django.apps import apps\n \n @override_settings(\n     MIGRATION_MODULES=dict(\n@@ -63,4 +66,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..3cc13d3 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -238,7 +238,16 @@ class UsernameValidatorsTests(SimpleTestCase):\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n             \"en\\u2013dash\",\n+            \"en\\u2013dash\", 'trailingnewline\\u000A',\n         ]\n+        additional_invalid_usernames = [\n+            \"trailingnewline\\n\", \"anothernewline\\r\", \"newlinecombo\\r\\n\"\n+        ]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in additional_invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -250,7 +259,24 @@ class UsernameValidatorsTests(SimpleTestCase):\n \n     def test_ascii_validator(self):\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n-        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n+        invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\", 'trailingnewline\\n']\n+        additional_invalid_usernames = [\n+            \"trailingnewline\\n\", \"anothernewline\\r\", \"newlinecombo\\r\\n\"\n+            \"en\\u2013dash\", 'trailingnewline\\u000A',\n+        ]\n+        additional_invalid_usernames = [\n+            \"trailingnewline\\n\", \"anothernewline\\r\", \"newlinecombo\\r\\n\"\n+        ]\n+        v = validators.UnicodeUsernameValidator()\n+        for invalid in additional_invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n+        v = validators.ASCIIUsernameValidator()\n+        for invalid in additional_invalid_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    v(invalid)\n         v = validators.ASCIIUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +284,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..21a41cd 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -10,12 +10,33 @@ from .utils import ROOT, TEMPLATE_DIR\n OTHER_DIR = os.path.join(ROOT, 'other_templates')\n \n \n+import os\n+\n class RenderToStringTest(SimpleTestCase):\n \n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n-    def test_basic_context(self):\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_autoescape_default(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR])  # Default is autoescape=True\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n         self.assertEqual(\n             self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n             'obj:test\\n',\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..1dcf468 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -288,7 +288,22 @@ class QueryDictTests(SimpleTestCase):\n \n class HttpResponseTests(unittest.TestCase):\n \n-    def test_headers_type(self):\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_nested_memoryview_content(self):\n+        r = HttpResponse(memoryview(memoryview(b'nestedview')))\n+        self.assertEqual(r.content, b'nestedview')\n+        \n+    def test_empty_memoryview_content(self):\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+        \n+    def test_large_memoryview_content(self):\n+        large_content = b'a' * 10**6  # 1 MB of data\n+        r = HttpResponse(memoryview(large_content))\n+        self.assertEqual(r.content, large_content)\n         r = HttpResponse()\n \n         # ASCII strings or bytes values are converted to strings.\n",
  "django__django-11141": "",
  "django__django-11149": "",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..81a5883 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,24 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_model_to_dict_empty_fields(self):\n+        \"\"\"Test model_to_dict with an empty list of fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+\n+        # Case when fields is an empty list, should return an empty dict\n+        result = model_to_dict(bw, fields=[])\n+        self.assertEqual(result, {})\n+\n+        # Case when excluding all the fields, should return an empty dict\n+        # assuming exclude takes precedence over fields.\n+        result = model_to_dict(bw, exclude=['id', 'name', 'score', 'writer_ptr'])\n+        self.assertEqual(result, {})            \n+\n+        # Case when no fields are requested through an empty list and exclude is None\n+        result = model_to_dict(bw, fields=[], exclude=None)\n+        self.assertEqual(result, {})\n+\n+        # Reusing existing test logic\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..76e2834 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,9 +1,11 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n+from django.db.models.deletion import Collector\n from .models import (\n     MR, A, Avatar, Base, Child, HiddenUser, HiddenUserProfile, M, M2MFrom,\n     M2MTo, MRNull, Parent, R, RChild, S, T, User, create_a, get_default_r,\n@@ -464,7 +466,60 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Create a User instance.\n+        u = User.objects.create()\n+\n+        # Use Collector to check fast-delete capability.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+\n+        # Delete the User instance.\n+        u.delete()\n+\n+        # Verify that the primary key is set to None.\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_instance_without_dependencies(self):\n+        # Create a User instance.\n+        u = User.objects.create()\n+\n+        # Ensure the User can be fast-deleted by checking the Collector.\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+\n+        # Delete the User instance.\n+        u.delete()\n+\n+        # Verify that the primary key is set to None.\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_instance_with_foreign_key(self):\n+        # Create an Avatar instance.\n+        a = Avatar.objects.create(desc='a')\n+\n+        # Create a User instance with a foreign key to Avatar.\n+        u = User.objects.create(avatar=a)\n+\n+        # Delete the User instance.\n+        u.delete()\n+\n+        # The primary key for User should be set to None.\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_instance_with_m2m(self):\n+        # Create instances for M2M relationship.\n+        m1 = M2MFrom.objects.create()\n+        m2 = M2MTo.objects.create()\n+\n+        # Add m2m relationship.\n+        m1.m2m.add(m2)\n+\n+        # Delete the instance.\n+        m1.delete()\n+\n+        # Primary key should be None after deletion.\n+        self.assertIsNone(m1.pk)\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..a8433f2 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,12 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('1e-199', 2, '0.00'),  # Check for correct formatting close to the cutoff\n+            ('1e-200', 2, '0.00'),  # Check for a number that might have caused exponential notations\n+            ('1e-200', 10, '0.0000000000'),  # More decimal places to ensure zero output\n+            ('5e-250', 5, '0.00000'),  # Ensure numbers far smaller are zeroed out correctly\n+            ('5e-250', 50, '0.' + '0' * 49),  # Extra precision far smaller numbers should still be zero\n+            ('3.456e-300', None, '0'),  # Test without specifying decimal_pos - should be zero\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/tests.py b/tests/prefetch_related/tests.py\nindex 1dc206f..c26d42a 100644\n--- a/tests/prefetch_related/tests.py\n+++ b/tests/prefetch_related/tests.py\n@@ -1,4 +1,8 @@\n+\n+from django.contrib.contenttypes.fields import GenericForeignKey\n from django.contrib.contenttypes.models import ContentType\n+import uuid\n+from django.db import models\n from django.core.exceptions import ObjectDoesNotExist\n from django.db import connection\n from django.db.models import Prefetch, QuerySet\n@@ -8,7 +12,7 @@ from django.test.utils import CaptureQueriesContext\n \n from .models import (\n     Author, Author2, AuthorAddress, AuthorWithAge, Bio, Book, Bookmark,\n-    BookReview, BookWithYear, Comment, Department, Employee, FavoriteAuthors,\n+    BookReview, BookWithYear, Comment, Department, Employee, FavoriteAuthors, Foo, Bar,\n     House, LessonEntry, ModelIterableSubclass, Person, Qualification, Reader,\n     Room, TaggedItem, Teacher, WordEntry,\n )\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..5dee92b 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,4 +1,7 @@\n import os\n+import os\n+import tempfile\n+\n import signal\n import subprocess\n from unittest import mock\n@@ -81,7 +84,36 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_ssl_certificate(self):\n+        # Test SSL certificate parameters\n+        with tempfile.NamedTemporaryFile(delete=False) as sslrootcert, \\\n+             tempfile.NamedTemporaryFile(delete=False) as sslcert, \\\n+             tempfile.NamedTemporaryFile(delete=False) as sslkey:\n+            sslrootcert.write(b\"FAKE_ROOT_CERT\")\n+            sslcert.write(b\"FAKE_CLIENT_CERT\")\n+            sslkey.write(b\"FAKE_CLIENT_KEY\")\n+            sslrootcert.flush()\n+            sslcert.flush()\n+            sslkey.flush()\n+\n+            self.assertEqual(\n+                self._run_it({\n+                    'database': 'dbname',\n+                    'user': 'someuser',\n+                    'host': 'somehost',\n+                    'port': '444',\n+                    'sslmode': 'verify-ca',\n+                    'sslrootcert': sslrootcert.name,\n+                    'sslcert': sslcert.name,\n+                    'sslkey': sslkey.name,\n+                }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None,\n+            ))\n+        # Clean up temporary files\n+        os.remove(sslrootcert.name)\n+        os.remove(sslcert.name)\n+        os.remove(sslkey.name)\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n             handler = signal.getsignal(signal.SIGINT)\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..6ce4465 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -90,6 +90,14 @@ class FilteredRelationTests(TestCase):\n             [self.author1, self.author2]\n         )\n \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n     def test_with_join(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n@@ -98,6 +106,14 @@ class FilteredRelationTests(TestCase):\n             [self.author1]\n         )\n \n+    def test_with_exclude(self):\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n     def test_with_join_and_complex_condition(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..2bf64e0 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -28,7 +28,10 @@ class TestUtilsHtml(SimpleTestCase):\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n             (\"'\", '&#39;'),\n+            (\"'\", \"&#x27;\"),\n         )\n+\n+        self.check_output(escape, \"It's a test\", \"It&#x27;s a test\")\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n         for value, output in items:\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..ae19692 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,6 +243,24 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n+    def test_skip_checks_command_line_argument(self):\n+        \"\"\"\n+        Test that the --skip-checks option properly skips system checks when running\n+        a management command.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            # (staticfiles.E001) The STATICFILES_DIRS setting is not a tuple or list.\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        # Run the command without --skip-checks to see that it fails\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn(\"staticfiles.E001\", err)\n+        \n+        # Run the command with --skip-checks to verify no checks occur\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n     def test_disallowed_abbreviated_options(self):\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..784c9c1 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,7 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -12,4 +14,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..1e68796 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,6 +124,15 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n+    def test_change_values_list_columns(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        # Test changing the values list\n+        reserved_name_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_name_order, (2,))\n+        reserved_name_name = qs1.union(qs1).values_list('name').get()\n+        self.assertEqual(reserved_name_name, ('a',))\n+\n     def test_union_with_two_annotated_values_list(self):\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..735abc2 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -20,6 +20,7 @@ from django.core.mail import (\n     EmailMessage, EmailMultiAlternatives, mail_admins, mail_managers,\n     send_mail, send_mass_mail,\n )\n+from unittest import mock\n from django.core.mail.backends import console, dummy, filebased, locmem, smtp\n from django.core.mail.message import BadHeaderError, sanitize_address\n from django.test import SimpleTestCase, override_settings\n@@ -363,6 +364,27 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n     def test_none_body(self):\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n+\n+    @mock.patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_non_unicode_email(self, mocked_getfqdn):\n+        delattr(DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        self.assertIn('@xn--p8s937b>', email.message()['Message-ID'])\n+\n+    @mock.patch('socket.getfqdn', return_value='\u0434\u043e\u043c\u0435\u043d')\n+    def test_cyrillic_dns_non_unicode_email(self, mocked_getfqdn):\n+        delattr(DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        self.assertIn('@xn--d1acufc>', email.message()['Message-ID'])\n+\n+    @mock.patch('socket.getfqdn', return_value='\u03b4\u03bf\u03ba\u03b9\u03bc\u03ae')\n+    def test_greek_dns_non_unicode_email(self, mocked_getfqdn):\n+        delattr(DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        self.assertIn('@xn--jxalpdlp>', email.message()['Message-ID'])\n         self.assertEqual(msg.message().get_payload(), '')\n \n     def test_encoding(self):\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..502d7cf 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,10 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n@@ -12,6 +13,54 @@ from .models import (\n     Band, Song, User, ValidationTestInlineModel, ValidationTestModel,\n )\n \n+class CustomFieldCheckTests(CheckTestCase):\n+\n+    def test_position_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field only accessible via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_many_to_many_field_in_list_display(self):\n+        class TestModel(Model):\n+            field = models.ManyToManyField(User)\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' must not be a ManyToManyField.\",\n+            'admin.E109'\n+        )\n+\n+    def test_field_does_not_exist(self):\n+        class TestModel(Model):\n+            field = models.CharField(max_length=100)\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('non_existent_field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[0]' refers to 'non_existent_field', which is not a callable, \"\n+            \"an attribute of 'TestModelAdmin', or an attribute or method on 'app_label.TestModel'.\",\n+            'admin.E108'\n+        )\n+\n \n class CheckTestCase(SimpleTestCase):\n \n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..95c17f7 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -5,11 +5,12 @@ from django.core.exceptions import FieldError\n from django.db.models import (\n     CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n-from django.db.models.functions import Upper\n+from django.db.models.functions import Upper, Lower\n+from datetime import datetime\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n \n \n class OrderingTests(TestCase):\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..40d964d 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -403,7 +403,13 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(aggs['distinct_ratings'], 4)\n \n-    def test_non_grouped_annotation_not_in_group_by(self):\n+    def test_distinct_on_avg(self):\n+        books = Book.objects.aggregate(avg_rating=Avg('rating', distinct=True))\n+        self.assertEqual(books['avg_rating'], 4.125)\n+\n+    def test_distinct_on_sum(self):\n+        books = Book.objects.aggregate(total_rating=Sum('rating', distinct=True))\n+        self.assertEqual(books['total_rating'], 16.5)\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n         excluded from the group by clause.\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..2603a84 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -726,6 +726,33 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AlterField\"])\n         self.assertOperationAttributes(changes, \"testapp\", 0, 0, name=\"name\", preserve_default=True)\n \n+    def test_alter_uuid_to_fk_dependency(self):\n+        \"\"\"\n+        Test for altering a UUIDField to a ForeignKey and ensure dependency on\n+        the target model's app is created.\n+        \"\"\"\n+        # Models setup before alteration\n+        before_state_app1 = ModelState(\"testapp1\", \"Model1\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+            (\"other\", models.UUIDField(null=True, blank=True)),\n+        ])\n+        before_state_app2 = ModelState(\"testapp2\", \"Model2\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+        ])\n+        # Models setup after alteration\n+        after_state_app1 = ModelState(\"testapp1\", \"Model1\", [\n+            (\"id\", models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)),\n+            (\"other\", models.ForeignKey(\"testapp2.Model2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        after_state_app2 = before_state_app2\n+\n+        changes = self.get_changes([before_state_app1, before_state_app2], [after_state_app1, after_state_app2])\n+\n+        # Ensure there's a dependency on testapp2 for the ForeignKey field\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [('testapp2', '__first__')])\n+\n     def test_supports_functools_partial(self):\n         def _content_file_name(instance, filename, key, **kwargs):\n             return '{}/{}'.format(instance, filename)\n@@ -2399,4 +2426,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..9dee8a9 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -437,6 +437,27 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n \n+    def test_username_field_max_length_in_widget_matches_user_model(self):\n+        self.assertEqual(CustomEmailField._meta.get_field('username').max_length, 255)\n+        data = {\n+            'username': 'u' * 255,\n+            'password': 'pwd',\n+            'email': 'test@example.com',\n+        }\n+        CustomEmailField.objects.create_user(**data)\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+        \n+    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n+    def test_username_field_max_length_in_widget_defaults_to_254(self):\n+        data = {\n+            'username': '0123456',\n+            'password': 'password',\n+        }\n+        IntegerUsernameUser.objects.create_user(**data)\n+        form = AuthenticationForm(None, data)\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n+\n     def test_username_field_label(self):\n \n         class CustomAuthenticationForm(AuthenticationForm):\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..159e404 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -278,8 +278,27 @@ class WriterTests(SimpleTestCase):\n             (\"migrations.test_writer.IntEnum(2)\", {'import migrations.test_writer'})\n         )\n \n+        # Test case for Enum with translation values: TextTranslatedEnum\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('b-value')\n+\n+        # Check if the serialized result uses the name instead of the value\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.A,\n+            (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n+        )\n+        self.assertSerializedResultEqual(\n+            TextTranslatedEnum.B,\n+            (\"migrations.test_writer.TextTranslatedEnum['B']\", {'import migrations.test_writer'})\n+        )\n+\n         field = models.CharField(default=TextEnum.B, choices=[(m.value, m) for m in TextEnum])\n-        string = MigrationWriter.serialize(field)[0]\n+        # Adding specific test for CharField with Enum\n+        field = models.CharField(\n+            default=TextTranslatedEnum.A,\n+            choices=[(m.value, m) for m in TextTranslatedEnum]\n+        )\n         self.assertEqual(\n             string,\n             \"models.CharField(choices=[\"\n@@ -288,7 +307,11 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.TextEnum('value-b'))\"\n         )\n         field = models.CharField(default=BinaryEnum.B, choices=[(m.value, m) for m in BinaryEnum])\n-        string = MigrationWriter.serialize(field)[0]\n+        # Adding specific test for CharField with Enum\n+        field = models.CharField(\n+            default=TextTranslatedEnum.A,\n+            choices=[(m.value, m) for m in TextTranslatedEnum]\n+        )\n         self.assertEqual(\n             string,\n             \"models.CharField(choices=[\"\n@@ -296,8 +319,25 @@ class WriterTests(SimpleTestCase):\n             \"(b'value-b', migrations.test_writer.BinaryEnum(b'value-b'))], \"\n             \"default=migrations.test_writer.BinaryEnum(b'value-b'))\"\n         )\n+        # Adding specific test for CharField with Enum\n+        field = models.CharField(\n+            default=TextTranslatedEnum.A,\n+            choices=[(m.value, m) for m in TextTranslatedEnum]\n+        )\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('b-value', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n+\n         field = models.IntegerField(default=IntEnum.A, choices=[(m.value, m) for m in IntEnum])\n-        string = MigrationWriter.serialize(field)[0]\n+        # Adding specific test for CharField with Enum\n+        field = models.CharField(\n+            default=TextTranslatedEnum.A,\n+            choices=[(m.value, m) for m in TextTranslatedEnum]\n+        )\n         self.assertEqual(\n             string,\n             \"models.IntegerField(choices=[\"\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..9dd7a03 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -316,9 +317,26 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_dynamic_year_rfc850(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        current_year = 2060\n+        past_threshold = timedelta(days=50 * 365.25)\n+        \n+        # Mock the datetime to control the current \"UTC now\".\n+        now = datetime(current_year, 11, 6, 8, 49, 37)\n+        mocked_datetime.utcnow = mock.Mock(return_value=now)\n+        \n+        # Test case to verify the logic for future and past alert based on year\n+        tests = [\n+            ('Tuesday, 31-Dec-69 08:49:37 GMT', datetime(1969, 12, 31, 8, 49, 37)), # Year 69 should resolve to 1969\n+            ('Wednesday, 31-Dec-68 08:49:37 GMT', datetime(2068, 12, 31, 8, 49, 37)), # Year 68 should resolve to 2068 (if implementation changes as per supposed fix)\n+        ]\n+        \n+        for rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..4f97f4e 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3686,7 +3686,49 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertIsInstance(p.files, MultiValueDict)\n \n \n-class CustomRenderer(DjangoTemplates):\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        # Check that the error_messages dictionaries are different objects\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_field_deep_copy_modification(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'required': 'This field is required.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+\n+        # Modify the error message in the copy\n+        field_copy.error_messages['required'] = 'Custom required error.'\n+        # Ensure the original field's error_messages are unaffected\n+        self.assertEqual(field.error_messages['required'], 'This field is required.')\n+        self.assertEqual(field_copy.error_messages['required'], 'Custom required error.')\n+\n+    def test_field_deep_copy_multiple_fields(self):\n+        class ProfileForm(Form):\n+            first_name = CharField()\n+            last_name = CharField()\n+\n+        form1 = ProfileForm()\n+        form2 = ProfileForm()\n+\n+        # Modify error message for a field in one form\n+        form1.fields['first_name'].error_messages['required'] = 'First name is required.'\n+\n+        # Ensure the change doesn't affect the other form\n+        self.assertNotEqual(form1.fields['first_name'].error_messages,\n+                            form2.fields['first_name'].error_messages)\n+        self.assertEqual(\n+            form2.fields['first_name'].error_messages['required'], 'This field is required.')\n     pass\n \n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..f6a2792 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n",
  "django__django-11964": "diff --git a/tests/model_fields/test_charfield.py b/tests/model_fields/test_charfield.py\nindex c6162e5..8de4159 100644\n--- a/tests/model_fields/test_charfield.py\n+++ b/tests/model_fields/test_charfield.py\n@@ -1,3 +1,5 @@\n+\n+from enum import Enum\n from unittest import skipIf\n \n from django.core.exceptions import ValidationError\n@@ -7,7 +9,29 @@ from django.test import SimpleTestCase, TestCase\n from .models import Post\n \n \n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", \"The first choice, it is\"\n+    SECOND_CHOICE = \"second\", \"The second choice, it is\"\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n class TestCharField(TestCase):\n+    def test_text_choices_value_type_creation(self):\n+        instance = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+        self.assertIsInstance(instance.my_str_value, str)\n+        self.assertEqual(instance.my_str_value, \"first\")\n+\n+    def test_text_choices_value_type_retrieval(self):\n+        MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+        instance = MyObject.objects.last()\n+        self.assertIsInstance(instance.my_str_value, str)\n+        self.assertEqual(instance.my_str_value, \"first\")\n+\n+    def test_choice_enum_str(self):\n+        for member in MyChoice:\n+            with self.subTest(member=member):\n+                self.assertEqual(str(MyChoice[member.name]), str(member.value))\n \n     def test_max_length_passed_to_formfield(self):\n         \"\"\"\n",
  "django__django-11999": "",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..5aa02c0 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -9,6 +9,8 @@ from django.db.models.query_utils import Q\n from django.test import (\n     TestCase, TransactionTestCase, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from django.db import connection\n+from django.db.models import Index\n from django.test.utils import override_settings\n from django.utils import timezone\n \n",
  "django__django-12050": "",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..d180f1d 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -179,6 +179,33 @@ class OperationWriterTests(SimpleTestCase):\n             '),'\n         )\n \n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n+\n \n class WriterTests(SimpleTestCase):\n     \"\"\"\n@@ -229,12 +256,66 @@ class WriterTests(SimpleTestCase):\n             (\"Decimal('1.3')\", {'from decimal import Decimal'})\n         )\n \n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n+\n         self.assertSerializedEqual(Money('1.3'))\n         self.assertSerializedResultEqual(\n             Money('1.3'),\n             (\"migrations.test_writer.Money('1.3')\", {'import migrations.test_writer'})\n         )\n \n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n+\n     def test_serialize_constants(self):\n         self.assertSerializedEqual(None)\n         self.assertSerializedEqual(True)\n@@ -270,6 +351,33 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n \n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n+\n     def test_serialize_lazy_objects(self):\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n@@ -280,18 +388,126 @@ class WriterTests(SimpleTestCase):\n             TextEnum.A,\n             (\"migrations.test_writer.TextEnum['A']\", {'import migrations.test_writer'})\n         )\n+\n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n         self.assertSerializedResultEqual(\n             TextTranslatedEnum.A,\n             (\"migrations.test_writer.TextTranslatedEnum['A']\", {'import migrations.test_writer'})\n         )\n+\n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n         self.assertSerializedResultEqual(\n             BinaryEnum.A,\n             (\"migrations.test_writer.BinaryEnum['A']\", {'import migrations.test_writer'})\n         )\n+\n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n         self.assertSerializedResultEqual(\n             IntEnum.B,\n             (\"migrations.test_writer.IntEnum['B']\", {'import migrations.test_writer'})\n         )\n+\n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n         self.assertSerializedResultEqual(\n             self.NestedEnum.A,\n             (\n@@ -299,6 +515,33 @@ class WriterTests(SimpleTestCase):\n                 {'import migrations.test_writer'},\n             ),\n         )\n+\n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n         self.assertSerializedEqual(self.NestedEnum.A)\n \n         field = models.CharField(default=TextEnum.B, choices=[(m.value, m) for m in TextEnum])\n@@ -310,10 +553,64 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextEnum['B'])], \"\n             \"default=migrations.test_writer.TextEnum['B'])\"\n         )\n+\n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n         field = models.CharField(\n             default=TextTranslatedEnum.A,\n             choices=[(m.value, m) for m in TextTranslatedEnum],\n         )\n+\n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n@@ -322,6 +619,33 @@ class WriterTests(SimpleTestCase):\n             \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n             \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n         )\n+\n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n         field = models.CharField(default=BinaryEnum.B, choices=[(m.value, m) for m in BinaryEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -331,6 +655,33 @@ class WriterTests(SimpleTestCase):\n             \"(b'value-b', migrations.test_writer.BinaryEnum['B'])], \"\n             \"default=migrations.test_writer.BinaryEnum['B'])\"\n         )\n+\n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n         field = models.IntegerField(default=IntEnum.A, choices=[(m.value, m) for m in IntEnum])\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -341,6 +692,33 @@ class WriterTests(SimpleTestCase):\n             \"default=migrations.test_writer.IntEnum['A'])\"\n         )\n \n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n+\n     def test_serialize_choices(self):\n         class TextChoices(models.TextChoices):\n             A = 'A', 'A value'\n@@ -360,6 +738,33 @@ class WriterTests(SimpleTestCase):\n             DateChoices.DATE_1,\n             ('datetime.date(1969, 7, 20)', {'import datetime'}),\n         )\n+\n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n         field = models.CharField(default=TextChoices.B, choices=TextChoices.choices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -367,12 +772,66 @@ class WriterTests(SimpleTestCase):\n             \"models.CharField(choices=[('A', 'A value'), ('B', 'B value')], \"\n             \"default='B')\",\n         )\n+\n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n         field = models.IntegerField(default=IntegerChoices.B, choices=IntegerChoices.choices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n             string,\n             \"models.IntegerField(choices=[(1, 'One'), (2, 'Two')], default=2)\",\n         )\n+\n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n         field = models.DateField(default=DateChoices.DATE_2, choices=DateChoices.choices)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -383,6 +842,33 @@ class WriterTests(SimpleTestCase):\n             \"default=datetime.date(1969, 11, 19))\"\n         )\n \n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n+\n     def test_serialize_uuid(self):\n         self.assertSerializedEqual(uuid.uuid1())\n         self.assertSerializedEqual(uuid.uuid4())\n@@ -393,11 +879,65 @@ class WriterTests(SimpleTestCase):\n             uuid_a,\n             (\"uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8')\", {'import uuid'})\n         )\n+\n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n         self.assertSerializedResultEqual(\n             uuid_b,\n             (\"uuid.UUID('c7853ec1-2ea3-4359-b02d-b54e8f1bcee2')\", {'import uuid'})\n         )\n \n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n+\n         field = models.UUIDField(choices=((uuid_a, 'UUID A'), (uuid_b, 'UUID B')), default=uuid_a)\n         string = MigrationWriter.serialize(field)[0]\n         self.assertEqual(\n@@ -408,6 +948,33 @@ class WriterTests(SimpleTestCase):\n             \"default=uuid.UUID('5c859437-d061-4847-b3f7-e6b78852f8c8'))\"\n         )\n \n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n+\n     def test_serialize_functions(self):\n         with self.assertRaisesMessage(ValueError, 'Cannot serialize function: lambda'):\n             self.assertSerializedEqual(lambda x: 42)\n@@ -430,6 +997,33 @@ class WriterTests(SimpleTestCase):\n             datetime.datetime(2014, 1, 1, 1, 1),\n             (\"datetime.datetime(2014, 1, 1, 1, 1)\", {'import datetime'})\n         )\n+\n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n         self.assertSerializedResultEqual(\n             datetime.datetime(2012, 1, 1, 1, 1, tzinfo=utc),\n             (\n@@ -438,18 +1032,99 @@ class WriterTests(SimpleTestCase):\n             )\n         )\n \n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n+\n     def test_serialize_fields(self):\n         self.assertSerializedFieldEqual(models.CharField(max_length=255))\n         self.assertSerializedResultEqual(\n             models.CharField(max_length=255),\n             (\"models.CharField(max_length=255)\", {\"from django.db import models\"})\n         )\n+\n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n         self.assertSerializedFieldEqual(models.TextField(null=True, blank=True))\n         self.assertSerializedResultEqual(\n             models.TextField(null=True, blank=True),\n             (\"models.TextField(blank=True, null=True)\", {'from django.db import models'})\n         )\n \n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n+\n     def test_serialize_settings(self):\n         self.assertSerializedEqual(SettingsReference(settings.AUTH_USER_MODEL, \"AUTH_USER_MODEL\"))\n         self.assertSerializedResultEqual(\n@@ -457,12 +1132,66 @@ class WriterTests(SimpleTestCase):\n             (\"settings.AUTH_USER_MODEL\", {\"from django.conf import settings\"})\n         )\n \n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n+\n     def test_serialize_iterators(self):\n         self.assertSerializedResultEqual(\n             ((x, x * x) for x in range(3)),\n             (\"((0, 0), (1, 1), (2, 4))\", set())\n         )\n \n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n+\n     def test_serialize_compiled_regex(self):\n         \"\"\"\n         Make sure compiled regex can be serialized.\n@@ -558,6 +1287,33 @@ class WriterTests(SimpleTestCase):\n             FoodQuerySet.as_manager(),\n             ('migrations.models.FoodQuerySet.as_manager()', {'import migrations.models'})\n         )\n+\n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n         self.assertSerializedEqual(FoodManager('a', 'b'))\n         self.assertSerializedEqual(FoodManager('x', 'y', c=3, d=4))\n \n@@ -661,6 +1417,33 @@ class WriterTests(SimpleTestCase):\n             result['custom_migration_operations'].more_operations.TestOperation\n         )\n \n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n+\n     def test_sorted_imports(self):\n         \"\"\"\n         #24155 - Tests ordering of imports.\n@@ -681,6 +1464,33 @@ class WriterTests(SimpleTestCase):\n             output\n         )\n \n+    def test_serialize_nested_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+\n+        class ModelWithInnerClassField(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = ModelWithInnerClassField._meta.get_field('field')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Outer.Inner\", string)\n+        self.assertNotIn(\"Inner(\", string)\n+\n+    def test_serialize_model_with_nested_enum(self):\n+        class Thing(models.Model):\n+            @enum.unique\n+            class State(Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+\n+            state = EnumField(enum=State, max_length=10)\n+\n+        field = Thing._meta.get_field('state')\n+        string, imports = MigrationWriter.serialize(field)\n+        self.assertIn(\"Thing.State\", string)\n+        self.assertNotIn(\"State(\", string)\n+\n     def test_migration_file_header_comments(self):\n         \"\"\"\n         Test comments at top of file.\n@@ -746,4 +1556,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 2d13234..33c4fd3 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -844,7 +844,45 @@ class ChangeListTests(TestCase):\n         queryset = m._get_list_editable_queryset(request, prefix='form')\n         self.assertEqual(queryset.count(), 2)\n \n-    def test_changelist_view_list_editable_changed_objects_uses_filter(self):\n+    def test_get_list_editable_queryset_with_regex_chars_in_prefix(self):\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        data = {\n+            'form$-TOTAL_FORMS': '2',\n+            'form$-INITIAL_FORMS': '2',\n+            'form$-MIN_NUM_FORMS': '0',\n+            'form$-MAX_NUM_FORMS': '1000',\n+            'form$-0-uuid': str(a.pk),\n+            'form$-0-load': '10',\n+            '_save': 'Save',\n+        }\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        request = self.factory.post(changelist_url, data=data)\n+        queryset = m._get_list_editable_queryset(request, prefix='form$')\n+        self.assertEqual(queryset.count(), 1)\n+\n+    def test_get_list_editable_queryset_escaped_regex_chars(self):\n+        \"\"\"Test with various special regex characters in prefix.\"\"\"\n+        a = Swallow.objects.create(origin='Swallow C', load=3, speed=3)\n+        Swallow.objects.create(origin='Swallow D', load=1, speed=1)\n+        prefixes = [\"form*\", \"form+\", \"form?\", \"form^\", \"form$\", \"form.\"]\n+\n+        for prefix in prefixes:\n+            data = {\n+                f'{prefix}-TOTAL_FORMS': '2',\n+                f'{prefix}-INITIAL_FORMS': '2',\n+                f'{prefix}-MIN_NUM_FORMS': '0',\n+                f'{prefix}-MAX_NUM_FORMS': '1000',\n+                f'{prefix}-0-uuid': str(a.pk),\n+                f'{prefix}-0-load': '5',\n+                '_save': 'Save',\n+            }\n+            request = self.factory.post(changelist_url, data=data)\n+            queryset = m._get_list_editable_queryset(request, prefix=prefix)\n+            self.assertEqual(queryset.count(), 1)\n         \"\"\"list_editable edits use a filtered queryset to limit memory usage.\"\"\"\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n         Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..5670d2b 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,6 +1103,24 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n+    def test_split_array_field_booleanfield_correct_attrs(self):\n+        field = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = field.get_context('name', [True, False, True])\n+        self.assertEqual(context['widget']['value'], '[True, False, True]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{'checked': True}, {}, {'checked': True}]\n+        )\n+        \n+    def test_split_array_field_mutation_after_false(self):\n+        field = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = field.get_context('name', [False, True, False, True])\n+        self.assertEqual(context['widget']['value'], '[False, True, False, True]')\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            [{}, {'checked': True}, {}, {'checked': True}]\n+        )\n+\n     def test_render(self):\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n",
  "django__django-12209": "",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..adbcf9a 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -77,6 +77,10 @@ class SimpleTagTests(TagTestCase):\n                 'simple_only_unlimited_args - Expected result: 37, 42, 56, 89'),\n             ('{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'simple_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4'),\n+            (\"'inclusion_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 kwarg=42 %}'),\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n         ]\n \n         for entry in templates:\n@@ -101,6 +105,10 @@ class SimpleTagTests(TagTestCase):\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 40|add:2 eggs=\"scrambled\" 56 four=1|add:3 %}'),\n             (\"'simple_unlimited_args_kwargs' received multiple values for keyword argument 'eggs'\",\n                 '{% load custom %}{% simple_unlimited_args_kwargs 37 eggs=\"scrambled\" eggs=\"scrambled\" %}'),\n+            (\"'inclusion_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 kwarg=42 %}'),\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n         ]\n \n         for entry in errors:\n@@ -190,6 +198,10 @@ class InclusionTagTests(TagTestCase):\n                 'inclusion_only_unlimited_args - Expected result: 37, 42, 56, 89\\n'),\n             ('{% load inclusion %}{% inclusion_unlimited_args_kwargs 37 40|add:2 56 eggs=\"scrambled\" four=1|add:3 %}',\n                 'inclusion_unlimited_args_kwargs - Expected result: 37, 42, 56 / eggs=scrambled, four=4\\n'),\n+            (\"'inclusion_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load inclusion %}{% inclusion_keyword_only_default kwarg=37 kwarg=42 %}'),\n+            (\"'simple_keyword_only_default' received multiple values for keyword argument 'kwarg'\",\n+                '{% load custom %}{% simple_keyword_only_default kwarg=42 kwarg=37 %}'),\n         ]\n \n         for entry in templates:\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..8383554 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2412,6 +2413,30 @@ Password: <input type=\"password\" name=\"password\" required>\n <option value=\"false\">No</option>\n </select>\"\"\")\n         p = Person({'name': 'Joe', 'is_cool': 'false'}, auto_id=False)\n+\n+    def test_filefield_with_initial_data_no_required_attribute(self):\n+        # Test that 'required' is not rendered when initial data is provided\n+        class FileForm(Form):\n+            file1 = FileField(required=True, widget=FileInput)\n+\n+        # Use FileForm with initial data\n+        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n+    def test_filefield_without_initial_data_required_attribute(self):\n+        # Test that 'required' is rendered when there is no initial data\n+        class FileForm(Form):\n+            file1 = FileField(required=True, widget=FileInput)\n+\n+        # Use FileForm without initial data\n+        f = FileForm(auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\" required></td></tr>',\n+        )\n         self.assertHTMLEqual(str(p['is_cool']), \"\"\"<select name=\"is_cool\">\n <option value=\"unknown\">Unknown</option>\n <option value=\"true\">Yes</option>\n",
  "django__django-12304": "diff --git a/tests/template_tests/test_callables.py b/tests/template_tests/test_callables.py\nindex d71266b..f4e58b7 100644\n--- a/tests/template_tests/test_callables.py\n+++ b/tests/template_tests/test_callables.py\n@@ -1,4 +1,6 @@\n+\n from unittest import TestCase\n+from django.template import Context, Template\n \n from django.template import Context, Engine\n \n@@ -39,6 +41,27 @@ class CallableVariablesTests(TestCase):\n         self.assertEqual(t.render(c), '42')\n         self.assertEqual(my_doodad.num_calls, 2)\n \n+    def test_enum_in_templates(self):\n+        from django.test import SimpleTestCase\n+        from django.db import models\n+\n+        class YearInSchool(models.TextChoices):\n+            FRESHMAN = 'FR', 'Freshman'\n+            SOPHOMORE = 'SO', 'Sophomore'\n+            JUNIOR = 'JR', 'Junior'\n+            SENIOR = 'SR', 'Senior'\n+\n+        # Context with YearInSchool enumeration\n+        c = Context({\"YearInSchool\": YearInSchool})\n+\n+        # Attempt to render a template with no callable invocation\n+        t = Template(\"{% if 'SO' == YearInSchool.SOPHOMORE %}True{% else %}False{% endif %}\")\n+        self.assertEqual(t.render(c), 'True')\n+\n+        # Checking access to the label and value\n+        t = Template(\"{{ YearInSchool.SOPHOMORE.label }}|{{ YearInSchool.SOPHOMORE.value }}\")\n+        self.assertEqual(t.render(c), 'Sophomore|SO')\n+\n     def test_alters_data(self):\n \n         class Doodad:\n@@ -122,4 +145,4 @@ class CallableVariablesTests(TestCase):\n \n         # Double-check that the object was really never called during the\n         # template rendering.\n-        self.assertEqual(my_doodad.num_calls, 0)\n+        self.assertEqual(my_doodad.num_calls, 0)\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..75193bc 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -139,7 +139,22 @@ class UtilsTests(SimpleTestCase):\n \n             self.assertEqual(value, resolved_value)\n \n-    def test_null_display_for_field(self):\n+    def test_jsonfield_display_for_field(self):\n+        \"\"\"\n+        Test JSONField representation in admin when readonly.\n+        \"\"\"\n+        tests = [\n+            ({\"simple\": \"text\"}, '{\"simple\": \"text\"}'),  # Valid JSON simple object.\n+            ([1, 2, 3], '[1, 2, 3]'),  # Valid JSON array.\n+            ({\"nested\": {\"a\": {1: 2}}}, '{\"nested\": {\"a\": {\"1\": \"2\"}}}'),  # Valid nested structure.\n+            ('plain_text', '\"plain_text\"'),  # Plain text should be quoted.\n+            (None, 'null'),  # None should be represented as a null JSON value.\n+            ({None: \"value\"}, \"{None: 'value'}\"),  # Invalid key, invalid JSON representation.\n+        ]\n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                display_value = display_for_field(value, models.JSONField(null=True, blank=True), self.empty_value)\n+                self.assertEqual(display_value, expected_display)\n         \"\"\"\n         Regression test for #12550: display_for_field should handle None\n         value.\n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..d2a9a2a 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1015,7 +1015,43 @@ class OtherModelTests(SimpleTestCase):\n             class ParkingLot(Place):\n                 parent = models.OneToOneField(Place, models.CASCADE)\n \n-    def test_m2m_table_name_clash(self):\n+    def test_order_of_onetoone_fields(self):\n+        \"\"\"\n+        Test case to ensure that the order of OneToOneField definitions does not affect\n+        the correct setup of parent-child relationships in models.\n+        \"\"\"\n+        class Document(models.Model):\n+            pass\n+        \n+        # Test case where document_ptr is defined first with parent_link=True\n+        class PickingOrderOne(Document):\n+            document_ptr = models.OneToOneField(\n+                Document, on_delete=models.CASCADE, parent_link=True, related_name='+'\n+            )\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        self.assertEqual(PickingOrderOne.check(), [])\n+\n+        # Test case where origin is defined first\n+        class PickingOrderTwo(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(\n+                Document, on_delete=models.CASCADE, parent_link=True, related_name='+'\n+            )\n+\n+        self.assertEqual(PickingOrderTwo.check(), [])\n+\n+    def test_improper_configuration_error(self):\n+        \"\"\"\n+        This test checks that an ImproperlyConfigured error is raised when parent_link=True\n+        is missing from OneToOneField setup that requires it.\n+        \"\"\"\n+        with self.assertRaisesMessage(ImproperlyConfigured, \"Add parent_link=True to invalid_models_tests.Picking.origin.\"):\n+            class Document(models.Model):\n+                pass\n+\n+            class Picking(Document):\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n         class Foo(models.Model):\n             bar = models.ManyToManyField('Bar', db_table='myapp_bar')\n \n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..a24cd72 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -224,6 +224,12 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         self.assertIsNone(ret)\n \n     @override_settings(SECURE_REFERRER_POLICY=None)\n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        Without SECURE_REFERRER_POLICY being set, the middleware should add a\n+        \"Referrer-Policy: same-origin\" header to the response by default.\n+        \"\"\"\n+        self.assertEqual(self.process_response()['Referrer-Policy'], 'same-origin')\n     def test_referrer_policy_off(self):\n         \"\"\"\n         With SECURE_REFERRER_POLICY set to None, the middleware does not add a\n@@ -254,4 +260,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..7f10a89 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -23,7 +23,7 @@ from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n from django.test.utils import Approximate, isolate_apps\n \n from .models import (\n-    UUID, UUIDPK, Company, Employee, Experiment, Number, RemoteEmployee,\n+    UUID, UUIDPK, Company, Employee, Experiment, Manager, Number, RemoteEmployee,\n     Result, SimulationRun, Time,\n )\n \n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..f650f32 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, ManyToManyField, UUIDField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..c828193 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2445,6 +2445,31 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n \n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n+\n     def test_mti_inheritance_model_removal(self):\n         Animal = ModelState('app', 'Animal', [\n             (\"id\", models.AutoField(primary_key=True)),\n@@ -2453,4 +2478,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..8470591 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -9,6 +9,8 @@ from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db import models\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -194,7 +196,42 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    @isolate_apps('lookup')\n+    def test_in_bulk_with_unique_constraint(self):\n+        class UniqueSlugArticle(models.Model):\n+            slug = models.CharField(max_length=255)\n+            \n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=[\"slug\"], name=\"unique_slug_constraint\")\n+                ]\n+        \n+        article1 = UniqueSlugArticle.objects.create(slug='unique-slug-1')\n+        article2 = UniqueSlugArticle.objects.create(slug='unique-slug-2')\n+\n+        self.assertEqual(\n+            UniqueSlugArticle.objects.in_bulk([article1.slug, article2.slug], field_name='slug'),\n+            {\n+                article1.slug: article1,\n+                article2.slug: article2,\n+            }\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_meta_constraint_failure(self):\n+        class NonUniqueModel(models.Model):\n+            ean = models.CharField(max_length=100)\n+            brand = models.CharField(max_length=100)\n+            name = models.CharField(max_length=80)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['ean'], name='partial_ean_unique', condition=models.Q(ean='123456789')),\n+                ]\n+        \n+        msg = \"in_bulk()'s field_name must be a unique field but 'brand' isn't.\"\n+        with self.assertRaisesMessage(ValueError, msg):\n+            NonUniqueModel.objects.in_bulk(field_name='brand')\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..55c3f46 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -893,6 +893,22 @@ class OtherModelTests(SimpleTestCase):\n         with register_lookup(models.CharField, Lower):\n             self.assertEqual(Model.check(), [])\n \n+    def test_ordering_uses_isnull_lookup(self):\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        # Ensure that the system check passes, indicating valid ordering.\n+        self.assertEqual(Stock.check(), [])\n+\n     def test_ordering_pointing_to_related_model_pk(self):\n         class Parent(models.Model):\n             pass\n",
  "django__django-13012": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 87c0945..29d6e56 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1821,10 +1821,29 @@ class CombinableTests(SimpleTestCase):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             Combinable() | Combinable()\n \n-    def test_reversed_and(self):\n+class ExpressionWrapperTests(SimpleTestCase):\n+    def test_empty_group_by(self):\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [])\n+\n+    def test_non_empty_group_by(self):\n+        expr = ExpressionWrapper(Lower(Value('f')), output_field=IntegerField())\n+        self.assertEqual(expr.get_group_by_cols(alias=None), [expr.expression])\n+\n+    def test_constant_expression_wrapper_query(self):\n+        # This test will verify that a constant expression wrapped in\n+        # ExpressionWrapper does not contribute to the GROUP BY clause.\n+        expr = ExpressionWrapper(Value(3), output_field=IntegerField()).get_group_by_cols(alias=None)\n+        self.assertEqual(expr, [])\n+\n+    def test_lower_expression_wrapper_query(self):\n+        # This test will verify that a non-constant expression using Lower\n+        # is included in the GROUP BY clause.\n+        expr = ExpressionWrapper(Lower(Value('test')), output_field=IntegerField()).get_group_by_cols(alias=None)\n+        self.assertEqual(expr, [Lower(Value('test'))])\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n             object() & Combinable()\n \n     def test_reversed_or(self):\n         with self.assertRaisesMessage(NotImplementedError, self.bitwise_msg):\n-            object() | Combinable()\n+            object() | Combinable()\n",
  "django__django-13028": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a43cfb4..392abbb 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -62,6 +62,29 @@ class Annotation(models.Model):\n class DateTimePK(models.Model):\n     date = models.DateTimeField(primary_key=True, auto_now_add=True)\n \n+class ProductMetaDataType(models.Model):\n+    label = models.CharField(max_length=255, unique=True, blank=False, null=False)\n+    filterable = models.BooleanField(default=False)\n+\n+    class Meta:\n+        app_label = \"adminpricing\"\n+\n+    def __str__(self):\n+        return self.label\n+\n+class ProductMetaData(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    value = models.TextField(null=False, blank=False)\n+    metadata_type = models.ForeignKey(\n+        ProductMetaDataType, null=False, blank=False, on_delete=models.CASCADE\n+    )\n+\n+    class Meta:\n+        app_label = \"adminpricing\"\n+\n+    def __str__(self):\n+        return self.value\n+\n \n class ExtraInfo(models.Model):\n     info = models.CharField(max_length=100)\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..673b1eb 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -342,8 +342,42 @@ class OrderingTests(TestCase):\n             ],\n             attrgetter(\"headline\")\n         )\n+    def test_self_referencing_fk_order_by_relation_id(self):\n+        # Setting up initial data for OneModel and TwoModel\n+        one_model_root1 = OneModel.objects.create(oneval=1)\n+        one_model_root2 = OneModel.objects.create(oneval=2)\n+        one_model_child1 = OneModel.objects.create(root=one_model_root1, oneval=3)\n+        one_model_child2 = OneModel.objects.create(root=one_model_root2, oneval=4)\n+\n+        # Creating instances of TwoModel\n+        two_model_instance1 = TwoModel.objects.create(record=one_model_child1, twoval=5)\n+        two_model_instance2 = TwoModel.objects.create(record=one_model_child2, twoval=6)\n+\n+        # Testing the queryset for correct ordering by self-referencing foreign key\n+        qs = TwoModel.objects.filter(record__oneval__in=[3,4]).order_by(\"record__root_id\")\n+        expected_order = [two_model_instance1.id, two_model_instance2.id]\n+        self.assertQuerysetEqual(\n+            qs, \n+            expected_order,\n+            lambda o: o.id\n+        )\n \n-    def test_order_by_f_expression(self):\n+        # Testing with the workaround using annotate\n+        qs_annotated = TwoModel.objects.filter(record__oneval__in=[3,4]).annotate(root_id=F(\"record__root_id\")).order_by(\"root_id\")\n+        self.assertQuerysetEqual(\n+            qs_annotated, \n+            expected_order,\n+            lambda o: o.id\n+        )\n+        \n+        # Testing with the opposite order\n+        qs_descending = TwoModel.objects.filter(record__oneval__in=[3,4]).order_by(\"-record__root_id\")\n+        expected_order_desc = [two_model_instance2.id, two_model_instance1.id]\n+        self.assertQuerysetEqual(\n+            qs_descending, \n+            expected_order_desc,\n+            lambda o: o.id\n+        )\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n                 \"Article 1\",\n",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..e721018 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -618,7 +618,25 @@ class BaseCacheTests:\n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n \n-    def test_zero_cull(self):\n+    def test_cull_with_no_results(self):\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn\\'t implemented.\")\n+        old_max_entries = cull_cache._max_entries\n+        cull_cache._max_entries = 1\n+        try:\n+            # Clear any existing data from the cache.\n+            cull_cache.clear()\n+            # Fill cache slightly above max entries to trigger culling.\n+            cull_cache.set('key1', 'value1', 1000)\n+            cull_cache.set('key2', 'value2', 1000)\n+            with patch('django.core.cache.backends.db.cursor.fetchone', return_value=None):\n+                # This should not raise an exception even if fetchone() returns None.\n+                cull_cache.set('key3', 'value3', 1000)\n+                self.assertIs(cull_cache.has_key('key3'), True)\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n         self._perform_cull_test('zero_cull', 50, 19)\n \n     def _perform_invalid_key_test(self, key, expected_warning):\n",
  "django__django-13109": "",
  "django__django-13112": "",
  "django__django-13121": "",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..289351d 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1584,7 +1584,13 @@ class FTimeDeltaTests(TestCase):\n         self.assertTrue(queryset.exists())\n \n     @skipUnlessDBFeature('supports_temporal_subtraction')\n-    def test_datetime_subtraction(self):\n+    def test_datetime_subtraction_no_wrapper(self):\n+        # Test temporal subtraction directly without using ExpressionWrapper\n+        queryset = Experiment.objects.annotate(\n+            direct_subtraction=F('end') - F('start')\n+        )\n+        for experiment in queryset:\n+            self.assertEqual(experiment.direct_subtraction, experiment.end - experiment.start)\n         under_estimate = [\n             e.name for e in Experiment.objects.filter(estimated_time__gt=F('end') - F('start'))\n         ]\n",
  "django__django-13158": "",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..a570d7a 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -29,6 +29,7 @@ from django.core import management\n from django.core.cache import caches\n from django.core.cache.backends.base import InvalidCacheBackendError\n from django.core.exceptions import ImproperlyConfigured, SuspiciousOperation\n+from django.utils.deprecation import RemovedInDjango40Warning\n from django.http import HttpResponse\n from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n@@ -312,6 +313,14 @@ class SessionTestsMixin:\n         self.assertEqual(self.session.decode(encoded), data)\n \n     @override_settings(SECRET_KEY='django_tests_secret_key')\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        # Test the legacy decoding when DEFAULT_HASHING_ALGORITHM is 'sha1'\n+        with override_settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'a test key': 'a test value'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n+\n     def test_decode_legacy(self):\n         # RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.\n         legacy_encoded = (\n@@ -323,6 +332,17 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_decode_legacy_with_corrupted_data(self):\n+        # Test decoding with corrupted session data and expect empty dict.\n+        legacy_corrupted_encoded = (\n+            'invalid_session_data_corrupted_value'\n+        )\n+        with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n+            self.assertEqual({}, self.session.decode(legacy_corrupted_encoded))\n+        # The failed decode due to corrupted session data is logged.\n+        self.assertIn('corrupted', cm.output[0])\n+\n     def test_decode_failure_logged_to_security(self):\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..f14855c 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -8,6 +8,8 @@ from django.test import (\n from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.utils.functional import SimpleLazyObject\n+from .models import Artist\n from django.views.generic import RedirectView, TemplateView, View\n \n from . import views\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..42859d6 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -15,6 +15,7 @@ from django.forms.models import (\n     modelform_factory,\n )\n from django.template import Context, Template\n+from django.test.utils import isolate_apps\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n \n from .models import (\n@@ -2830,7 +2831,70 @@ class LimitChoicesToTests(TestCase):\n             self.assertEqual(today_callable_dict.call_count, 3)\n \n \n-class FormFieldCallbackTests(SimpleTestCase):\n+class LimitChoicesToNoDuplicatesTests(TestCase):\n+\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.marley = Character.objects.create(username='Marley', last_action='2023-10-15T14:30:00Z')\n+        cls.threepwood = Character.objects.create(username='Threepwood', last_action='2023-10-15T14:35:00Z')\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_no_duplicates(self):\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=self.marley)\n+\n+        joke1.has_fooled_today.add(self.marley, self.threepwood)\n+        joke2.has_fooled_today.add(self.marley)\n+        joke3.has_fooled_today.add(self.marley, self.threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        # Check that no duplicate entries are in form field querysets\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n \n     def test_baseform_with_widgets_in_meta(self):\n         \"\"\"Regression for #13095: Using base forms with widgets defined in Meta should not raise errors.\"\"\"\n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..37c2613 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -22,6 +22,7 @@ from django.core.files.uploadedfile import (\n )\n from django.db.models import FileField\n from django.db.models.fields.files import FileDescriptor\n+from django.core.files.storage import get_storage_class, FileSystemStorage\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n@@ -68,7 +69,25 @@ class GetStorageClassTests(SimpleTestCase):\n \n class FileSystemStorageTests(unittest.TestCase):\n \n-    def test_deconstruction(self):\n+    def test_filefield_storage_callable_deconstruction(self):\n+        \"\"\"\n+        Test that a FileField with a callable storage parameter returns the callable\n+        during deconstruction rather than evaluating it.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, callable_storage)\n+\n+    def test_filefield_storage_evaluation_during_runtime(self):\n+        \"\"\"\n+        Test that a FileField with a callable storage parameter evaluates\n+        correctly at runtime.\n+        \"\"\"\n+        obj = Storage()\n+        evaluated_storage = obj.storage_callable.storage\n+        self.assertEqual(evaluated_storage.location, temp_storage_location)\n+        self.assertIsInstance(evaluated_storage, FileSystemStorage)\n         path, args, kwargs = temp_storage.deconstruct()\n         self.assertEqual(path, \"django.core.files.storage.FileSystemStorage\")\n         self.assertEqual(args, ())\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..31b3c30 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -623,6 +623,19 @@ class TestQuerying(TestCase):\n                     expected,\n                 )\n \n+    def test_key_in_lookup(self):\n+        # Test that key `__in` lookup works correctly with JSONField\n+        # Address the issue described\n+        test_cases = [\n+            ({'value__key__in': [0]}, []),  # No match expected\n+            ({'value__key__in': [0, 312]}, self.objs[:2]), # Modify self.objs[:2] to match expected objects if needed\n+            ({'value__key__in': ['existing_key']}, self.objs[5:7]),  # Modify to match expected cases\n+        ]\n+        for filter_params, expected in test_cases:\n+            with self.subTest(filter=filter_params):\n+                actual = list(NullableJSONModel.objects.filter(**filter_params))\n+                self.assertEqual(actual, expected)\n+\n     def test_key_iexact(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='\"BaR\"').exists(), False)\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..d1b6aca 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -17,6 +17,8 @@ from django.db.models.functions import (\n from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n+from datetime import datetime\n+import pytz\n from django.utils import timezone\n \n from ..models import Author, DTModel, Fan\n@@ -1133,7 +1135,57 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_trunc_date_with_tzinfo(self):\n+        # Create a timezone aware datetime\n+        start_datetime = datetime(2023, 3, 30, 12, 0, 0)\n+        start_datetime = timezone.make_aware(start_datetime)  # Default to UTC\n+\n+        # Create a model instance in the database\n+        self.create_model(start_datetime)\n+\n+        # Define different timezones\n+        melb = pytz.timezone('Australia/Melbourne')\n+        ny = pytz.timezone('America/New_York')\n+\n+        # Query with annotated TruncDate using different tzinfo\n+        model = DTModel.objects.annotate(\n+            melb_date=TruncDate('start_datetime', tzinfo=melb),\n+            ny_date=TruncDate('start_datetime', tzinfo=ny),\n+        ).get()\n+\n+        # Convert original datetime to the respective timezones and truncate\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        ny_start_datetime = start_datetime.astimezone(ny)\n+\n+        # Assert that the truncated date matches expected date according to timezone\n+        self.assertEqual(model.melb_date, melb_start_datetime.date())\n+        self.assertEqual(model.ny_date, ny_start_datetime.date())\n+\n+    def test_trunc_time_with_tzinfo(self):\n+        # Create a timezone aware datetime\n+        start_datetime = datetime(2023, 3, 30, 12, 0, 0)\n+        start_datetime = timezone.make_aware(start_datetime)  # Default to UTC\n+\n+        # Create a model instance in the database\n+        self.create_model(start_datetime)\n+\n+        # Define different timezones\n+        melb = pytz.timezone('Australia/Melbourne')\n+        ny = pytz.timezone('America/New_York')\n+\n+        # Query with annotated TruncTime using different tzinfo\n+        model = DTModel.objects.annotate(\n+            melb_time=TruncTime('start_datetime', tzinfo=melb),\n+            ny_time=TruncTime('start_datetime', tzinfo=ny),\n+        ).get()\n+\n+        # Convert original datetime to the respective timezones and truncate\n+        melb_start_datetime = start_datetime.astimezone(melb)\n+        ny_start_datetime = start_datetime.astimezone(ny)\n+\n+        # Assert that the truncated time matches expected time according to timezone\n+        self.assertEqual(model.melb_time, melb_start_datetime.time())\n+        self.assertEqual(model.ny_time, ny_start_datetime.time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..6d0e585 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -93,11 +93,81 @@ class BasicFieldTests(SimpleTestCase):\n     def test_field_instance_is_picklable(self):\n         \"\"\"Field instances can be pickled.\"\"\"\n         field = models.Field(max_length=100, default='a string')\n-        # Must be picklable with this cached property populated (#28188).\n-        field._get_default\n-        pickle.dumps(field)\n+import pickle\n+from django.db import models\n+from django.test import TestCase, SimpleTestCase\n+\n+class FieldEqualityTests(TestCase):\n+\n+    def test_abstract_inherited_fields(self):\n+        \"\"\"Field instances from abstract models are not equal.\"\"\"\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+\n+            class Meta:\n+                abstract = True\n+\n+        class InheritAbstractModel1(AbstractModel):\n+            pass\n+\n+        class InheritAbstractModel2(AbstractModel):\n+            pass\n+\n+        abstract_model_field = AbstractModel._meta.get_field('field')\n+        inherit1_model_field = InheritAbstractModel1._meta.get_field('field')\n+        inherit2_model_field = InheritAbstractModel2._meta.get_field('field')\n+\n+        self.assertNotEqual(abstract_model_field, inherit1_model_field)\n+        self.assertNotEqual(abstract_model_field, inherit2_model_field)\n+        self.assertNotEqual(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertLess(abstract_model_field, inherit1_model_field)\n+        self.assertLess(abstract_model_field, inherit2_model_field)\n+        self.assertLess(inherit1_model_field, inherit2_model_field)\n+\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit1_model_field))\n+        self.assertNotEqual(hash(abstract_model_field), hash(inherit2_model_field))\n+        self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n+\n+    def test_field_equality_on_same_model(self):\n+        \"\"\"Ensure fields defined on the same model are equal.\"\"\"\n+        class ModelWithFields(models.Model):\n+            field1 = models.IntegerField()\n+            field2 = models.IntegerField()\n+\n+        field1 = ModelWithFields._meta.get_field('field1')\n+        field2 = ModelWithFields._meta.get_field('field2')\n+\n+        # Ensuring different fields on same model are not equal\n+        self.assertNotEqual(field1, field2)\n+\n+        # Ensuring field is equal to itself\n+        self.assertEqual(field1, field1)\n+        self.assertEqual(field2, field2)\n+\n+    def test_field_ordering_on_same_model(self):\n+        \"\"\"Check if field ordering is consistent within the same model.\"\"\"\n+        class ModelWithOrderedFields(models.Model):\n+            field1 = models.IntegerField()\n+            field2 = models.IntegerField()\n+\n+        field1 = ModelWithOrderedFields._meta.get_field('field1')\n+        field2 = ModelWithOrderedFields._meta.get_field('field2')\n+\n+        # Check the less-than ordering based on creation_counter\n+        self.assertLess(field1, field2)\n+\n+    def test_field_hash_on_same_model(self):\n+        \"\"\"Ensure hash values of fields on the same model are not equal.\"\"\"\n+        class ModelWithHashedFields(models.Model):\n+            field1 = models.IntegerField()\n+            field2 = models.IntegerField()\n+\n+        field1 = ModelWithHashedFields._meta.get_field('field1')\n+        field2 = ModelWithHashedFields._meta.get_field('field2')\n \n-    def test_deconstruct_nested_field(self):\n+        # Hash values should be different due to different field names\n+        self.assertNotEqual(hash(field1), hash(field2))\n         \"\"\"deconstruct() uses __qualname__ for nested class support.\"\"\"\n         name, path, args, kwargs = Nested.Field().deconstruct()\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..62e549a 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -6,14 +7,18 @@ import tempfile\n import unittest\n from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n-from unittest import mock\n+from pathlib import Path\n+from django.core.files import locks\n \n from django.core.files import File\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n from django.core.files.uploadedfile import (\n-    InMemoryUploadedFile, SimpleUploadedFile, TemporaryUploadedFile,\n+    InMemoryUploadedFile,\n+    SimpleUploadedFile,\n+    TemporaryUploadedFile,\n+    UploadedFile,\n     UploadedFile,\n )\n from django.test import override_settings\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..c8a5be3 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2076,6 +2076,16 @@ class QuerysetOrderedTests(unittest.TestCase):\n     def test_empty_queryset(self):\n         self.assertIs(Annotation.objects.none().ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Tag.objects.annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Tag.objects.values('name').annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n     def test_order_by_extra(self):\n         self.assertIs(Annotation.objects.all().extra(order_by=['id']).ordered, True)\n \n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..ea8c7fb 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,12 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .with_custom_email_field import CustomEmailField\n+from .models import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +40,38 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_email_change_invalidates_token(self):\n+        \"\"\"Test that changing the user's email address invalidates the token.\"\"\"\n+        user = User.objects.create_user('changeemailuser', 'testoriginal@example.com', 'testpw')\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)\n+\n+        # Change the user's email\n+        user.email = 'testchanged@example.com'\n+        user.save()\n+\n+        # The token should now be invalid\n+        self.assertIs(p0.check_token(user, tk1), False)\n+\n+    def test_custom_email_field_invalidates_token(self):\n+        \"\"\"Test that a custom user model changing email invalidates the token.\"\"\"\n+        user = CustomEmailField.objects.create_user(\n+            username='customemailuser',\n+            email='customoriginal@example.com',\n+            password='testpw',\n+        )\n+        \n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertIs(p0.check_token(user, tk1), True)\n+\n+        # Change the user's email\n+        user.email_address = 'customchanged@example.com'\n+        user.save()\n+\n+        # The token should now be invalid\n+        self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..b241a04 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,8 +1,11 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n from django.core import checks\n+from django.db.models import UniqueConstraint\n+from django.db.models.constraints import Q\n from django.db import models\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n@@ -138,7 +141,44 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n-    def test_non_clashing_custom_permissions(self):\n+    def test_username_unique_constraint(self):\n+        \"\"\"\n+        Test if the USERNAME_FIELD satisfies uniqueness through UniqueConstraint.\n+        \"\"\"\n+        class CustomUserWithUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='unique_username')\n+                ]\n+\n+        # Expecting no errors as the UniqueConstraint should be considered valid for USERNAME_FIELD.\n+        errors = checks.run_checks(self.apps.get_app_configs())\n+        self.assertEqual(errors, [])\n+\n+    def test_username_non_unique_constraint_condition(self):\n+        \"\"\"\n+        Test if the USERNAME_FIELD does not pass uniqueness via partial constraints.\n+        \"\"\"\n+        class CustomUserPartiallyUnique(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username'], name='unique_partial_username', condition=Q(is_active=True))\n+                ]\n+\n+        errors = checks.run_checks(self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Error(\n+                \"'CustomUserPartiallyUnique.username' must be unique because it is named as the 'USERNAME_FIELD'.\",\n+                obj=CustomUserPartiallyUnique,\n+                id='auth.E003',\n+            ),\n+        ])\n         class Checked(models.Model):\n             class Meta:\n                 permissions = [\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..2526dab 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,9 +1,11 @@\n+\n import datetime\n import pickle\n import unittest\n import uuid\n from copy import deepcopy\n from decimal import Decimal\n+from collections import namedtuple\n from unittest import mock\n \n from django.core.exceptions import FieldError\n@@ -815,7 +817,17 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n \n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    def test_range_lookup_namedtuple(self):\n+        # Test using namedtuple with __range lookup\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        qs = Company.objects.filter(\n+            num_employees__range=EmployeeRange(minimum=51, maximum=100),\n+        )\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['<Company: 99300 Ltd>'],\n+            ordered=False\n+        )\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..f115d6d 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -17,27 +17,67 @@ from unittest import mock\n from django import conf, get_version\n from django.conf import settings\n from django.core.management import (\n-    BaseCommand, CommandError, call_command, color,\n+    BaseCommand, CommandError, call_command, color, execute_from_command_line\n )\n+from django.test.utils import captured_stderr, captured_stdout\n+import os\n from django.core.management.commands.loaddata import Command as LoaddataCommand\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n+import os\n from django.core.management.commands.testserver import (\n     Command as TestserverCommand,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n+import os\n from django.db import ConnectionHandler, connection\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import (\n     LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n )\n+from django.test.utils import captured_stderr, captured_stdout\n+import os\n \n custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates')\n \n SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n \n-class AdminScriptTestCase(SimpleTestCase):\n+class ExecuteFromCommandLine(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_invalid_sys_argv(self):\n+        \"\"\"\n+        Verify behavior when sys.argv[0] is set to a non-default value.\n+        \"\"\"\n+        args = ['help', 'runserver']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['fake-program-name'] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin runserver', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_main_py(self):\n+        \"\"\"\n+        Validate that '__main__.py' in argv uses 'python -m django'.\n+        \"\"\"\n+        args = ['help', 'migrate']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin migrate', out.getvalue())\n     def setUp(self):\n         tmpdir = tempfile.TemporaryDirectory()\n         self.addCleanup(tmpdir.cleanup)\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..75c2e42 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -18,8 +19,33 @@ class DateFormatTests(SimpleTestCase):\n \n     def tearDown(self):\n         translation.activate(self._orig_lang)\n-\n-    def test_date(self):\n+    def test_year_before_1000(self):\n+        # Original test patch included in the new format\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n+\n+    def test_year_less_than_100(self):\n+        # Testing additional cases for years with fewer digits\n+        tests = [\n+            (99, '99'),  # Two-digit year\n+            (10, '10'),  # Two-digit year with leading zero requirement\n+            (1, '01'),   # One-digit year, should show as '01'\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         d = date(2009, 5, 16)\n         self.assertEqual(date.fromtimestamp(int(format(d, 'U'))), d)\n \n@@ -164,4 +190,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..b2583e0 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1024,8 +1024,30 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n \n+from django.test import TestCase\n+from django import forms\n+from django.contrib.auth.forms import ReadOnlyPasswordHashField\n+from unittest import mock\n+\n+class ReadOnlyPasswordHashFieldTest(TestCase):\n+    def test_readonly_field_disabled_default(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n \n-class AdminPasswordChangeFormTest(TestDataMixin, TestCase):\n+    def test_readonly_field_bound_data(self):\n+        field = ReadOnlyPasswordHashField()\n+        initial = 'initial-hash-value'\n+        data = 'changed-hash-value'\n+        result = field.bound_data(data, initial)\n+        self.assertEqual(result, initial)\n+\n+    def test_readonly_field_with_form(self):\n+        class TestForm(forms.Form):\n+            password = ReadOnlyPasswordHashField(initial='initial-hash-value')\n+\n+        form = TestForm(data={'password': 'altered'})\n+        self.assertFalse(form.is_valid())  # Should be invalid since we have no required fields except disabled ones\n+        self.assertEqual(form.cleaned_data['password'], 'initial-hash-value')\n \n     @mock.patch('django.contrib.auth.password_validation.password_changed')\n     def test_success(self, password_changed):\n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..5150332 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,6 +119,41 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n+    def test_create_model_and_clear_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Book\",\n+                    fields=[],\n+                    options={'verbose_name': 'Book', 'ordering': ['name']},\n+                ),\n+                migrations.AlterModelOptions(name='Book', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('Book', fields=[]),\n+            ]\n+        )\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Book\",\n+                    fields=[],\n+                    options={'verbose_name': 'Book', 'ordering': ['name']},\n+                ),\n+                migrations.AlterModelOptions(\n+                    name='Book',\n+                    options={'verbose_name': 'Book'},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'Book',\n+                    fields=[],\n+                    options={'verbose_name': 'Book'},\n+                ),\n+            ]\n+        )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n@@ -134,6 +169,41 @@ class OptimizerTests(SimpleTestCase):\n             [],\n         )\n \n+    def test_create_model_and_clear_options(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Book\",\n+                    fields=[],\n+                    options={'verbose_name': 'Book', 'ordering': ['name']},\n+                ),\n+                migrations.AlterModelOptions(name='Book', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('Book', fields=[]),\n+            ]\n+        )\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Book\",\n+                    fields=[],\n+                    options={'verbose_name': 'Book', 'ordering': ['name']},\n+                ),\n+                migrations.AlterModelOptions(\n+                    name='Book',\n+                    options={'verbose_name': 'Book'},\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'Book',\n+                    fields=[],\n+                    options={'verbose_name': 'Book'},\n+                ),\n+            ]\n+        )\n+\n     def test_create_alter_unique_delete_model(self):\n         self._test_create_alter_foo_delete_model(migrations.AlterUniqueTogether(\"Foo\", [[\"a\", \"b\"]]))\n \n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..3025dc4 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,8 +1,10 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n from django.test import SimpleTestCase\n \n+from django.utils.translation import gettext_lazy, lazy\n from ..utils import setup\n \n \n@@ -45,6 +47,26 @@ class AddTests(SimpleTestCase):\n     def test_add07(self):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n \n \n class FunctionTests(SimpleTestCase):\n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..dbf402c 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -11,13 +11,22 @@ from django.db import (\n )\n from django.db.backends.base.base import BaseDatabaseWrapper\n from django.db.backends.signals import connection_created\n-from django.db.backends.utils import CursorWrapper\n+from django.db import IntegrityError, connection, transaction\n+from django.db import models\n from django.db.models.sql.constants import CURSOR\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n     skipUnlessDBFeature,\n )\n \n+class SQLKeywordsModel(models.Model):\n+    id = models.AutoField(primary_key=True, db_column='select')\n+    reporter = models.ForeignKey('Reporter', models.CASCADE, db_column='where')\n+\n+    class Meta:\n+        db_table = 'order'\n+\n+\n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n",
  "django__django-13809": "diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex 85f7e9c..677eb8d 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -35,6 +35,10 @@ class Command(BaseCommand):\n     server_cls = WSGIServer\n \n     def add_arguments(self, parser):\n+        parser.add_argument(\n+            '--skip-checks', action='store_true', dest='skip_checks',\n+            help='Skip system checks.',\n+        )\n         parser.add_argument(\n             'addrport', nargs='?',\n             help='Optional port number, or ipaddr:port'\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..4f42723 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,5 @@\n+\n+import asyncio\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..15b6e72 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -7,7 +8,8 @@ from django.db.migrations.exceptions import (\n )\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.recorder import MigrationRecorder\n-from django.test import TestCase, modify_settings, override_settings\n+from importlib import reload  # Import reload function for test purposes\n+from importlib import import_module  # Import import_module for testing module imports\n \n from .test_base import MigrationTestBase\n \n@@ -502,6 +504,34 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, ['0001_initial'])\n \n+    @override_settings(\n+        MIGRATION_MODULES={'migrations': 'migrations.test_migrations_non_namespace'},\n+    )\n+    def test_loading_non_namespace_package_without_file(self):\n+        \"\"\"\n+        Test that MigrationLoader can load migrations from regular packages\n+        without a __file__ attribute, but with a valid __path__.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations_non_namespace')\n+        loader = MigrationLoader(connection)\n+        # Simulate an environment where __file__ is not set\n+        module_file = test_module.__file__\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+        try:\n+            del test_module.__file__\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            loader.load_disk()\n+            migrations = [\n+                name for app, name in loader.disk_migrations if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n+\n     @override_settings(\n         MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'},\n     )\n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..ffb5ac4 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -9,12 +9,15 @@ from unittest import mock\n \n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n+import mock\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n from django.db.utils import ConnectionHandler\n from django.test import (\n     TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n )\n-from django.test.utils import isolate_apps\n+from django.core.exceptions import ImproperlyConfigured\n+import unittest\n+from sqlite3 import dbapi2\n \n from ..models import Author, Item, Object, Square\n \n@@ -36,7 +39,21 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_unsupported_sqlite_version(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n+        \n+    def test_supported_sqlite_version(self):\n+        # This should pass without throwing an error\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            try:\n+                check_sqlite_version()  # This should not raise an error\n+            except ImproperlyConfigured:\n+                self.fail(\"check_sqlite_version() raised ImproperlyConfigured unexpectedly!\")\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..5836a64 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -172,8 +172,14 @@ class TestChildArguments(SimpleTestCase):\n             autoreload.get_child_arguments(),\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n-\n+    @mock.patch.dict(sys.modules, {'__main__': test_main})\n+    @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+        )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..af7e37d 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -402,7 +402,25 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n \n         self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n \n-    def test_explicit_pk(self):\n+    def test_manual_inherited_pk(self):\n+        class BaseModel(models.Model):\n+            custom_id = models.AutoField(primary_key=True)\n+\n+        class DerivedModel(BaseModel):\n+            pass\n+\n+        # Expect no warnings when primary key is manually inherited\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n+\n+    def test_shared_primary_key(self):\n+        class BaseModel(models.Model):\n+            base_id = models.AutoField(primary_key=True)\n+\n+        class RelatedModel(models.Model):\n+            related_id = models.OneToOneField(BaseModel, on_delete=models.CASCADE, primary_key=True)\n+\n+        # Test if manually inherited OneToOne pk does not produce warning\n+        self.assertEqual(checks.run_checks(app_configs=self.apps.get_app_configs()), [])\n         class Model(models.Model):\n             id = models.BigAutoField(primary_key=True)\n \n@@ -414,4 +432,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..286ddb3 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -12,6 +13,7 @@ from .models import (\n     ToFieldChild,\n )\n \n+from .models import ParentStringPrimaryKey, ChildStringPrimaryKeyParent\n \n class ManyToOneTests(TestCase):\n     @classmethod\n@@ -558,8 +560,37 @@ class ManyToOneTests(TestCase):\n         District.objects.create(city=ny, name='Brooklyn')\n         District.objects.create(city=ny, name='Manhattan')\n \n-    def test_fk_to_smallautofield(self):\n-        us = Country.objects.create(name='United States')\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child(self):\n+        parent = ParentStringPrimaryKey()\n+        child = ChildStringPrimaryKeyParent(parent=parent)\n+        child.parent.name = 'jeff'\n+        parent.save()\n+        child.save()\n+        child.refresh_from_db()\n+        self.assertEqual(child.parent, parent)\n+        self.assertEqual(child.parent_id, parent.name)\n+\n+    def test_uncommitted_fk_non_numeric_pk(self):\n+        # Test the initial faulty behavior as per the issue description\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey(name='foo')\n+            child = ChildStringPrimaryKeyParent()\n+            child.parent = ParentStringPrimaryKey()\n+            child.parent.name = 'foo'\n+            child.parent.save()\n+            child.save()\n+            self.assertTrue(ChildStringPrimaryKeyParent.objects.filter(parent_id=\"\").exists()) # Issue described: should not exist\n+            self.assertFalse(ChildStringPrimaryKeyParent.objects.filter(parent=child.parent).exists()) # Issue described\n+\n+    def test_correct_fk_on_committing_non_numeric_pk(self):\n+        # Ensure that assigning an instance with a pre-set primary key behaves correctly\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey(name='foo')\n+            child = ChildStringPrimaryKeyParent()\n+            child.parent = ParentStringPrimaryKey(name='foo')\n+            child.parent.save()\n+            child.save()\n+            self.assertTrue(ChildStringPrimaryKeyParent.objects.filter(parent=child.parent).exists()) # Correct behavior\n         City.objects.create(country=us, name='Chicago')\n         City.objects.create(country=us, name='New York')\n \n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..1b56306 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyAutoField, MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n@@ -220,7 +223,23 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n-    # SQLite lets objects be saved with an empty primary key, even though an\n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test that on instance creation, MyAutoField's from_db_value is called\n+        and id has the correct wrapper class.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+      \n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test that bulk_create correctly applies the MyAutoField from_db_value\n+        so that id has the wrapper class.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n     # integer is expected. So we can't check for an error being raised in that\n     # case for SQLite. Remove it from the suite for this next bit.\n     @skipIfDBFeature('supports_unspecified_pk')\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..2454f92 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -816,8 +816,22 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n-\n-class IterableLookupInnerExpressionsTests(TestCase):\n+    def test_commutative_q_and_exists(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        \n+        tests = [\n+            (Q(salary__gte=30) & Exists(is_ceo), [self.max]),\n+            (Exists(is_ceo) & Q(salary__gte=30), [self.max]),\n+            (Q(salary__lt=15) | Exists(is_poc), [self.example_inc.ceo, self.max]),\n+            (Exists(is_poc) | Q(salary__lt=15), [self.example_inc.ceo, self.max]),\n+        ]\n+        \n+        for conditions, expected in tests:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n     @classmethod\n     def setUpTestData(cls):\n         ceo = Employee.objects.create(firstname='Just', lastname='Doit', salary=30)\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..692ce2b 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,42 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        # Setup fake file paths to simulate a realistic scenario\n+        files_to_process = {\n+            'admin/css/base.css': None,\n+            'admin/css/dashboard.css': None\n+        }\n+        \n+        storage_instance = storage.staticfiles_storage\n+        \n+        # Collect all yielded files during post-processing\n+        processed_files = list(storage_instance.post_process(files_to_process))\n+        \n+        processed_filenames = [name for name, _, _ in processed_files]\n+        \n+        # Assert no filename is yielded more than once\n+        self.assertCountEqual(processed_filenames, set(processed_filenames))\n+\n+    def test_intermediate_files_not_in_yield(self):\n+        # Setup paths for files known to have intermediate versions\n+        files_to_process = {\n+            'admin/css/base.css': None,\n+            'admin/css/dashboard.css': None\n+        }\n+        \n+        storage_instance = storage.staticfiles_storage\n+        \n+        # Collect all yielded files during post-processing\n+        processed_files = list(storage_instance.post_process(files_to_process))\n+        \n+        # Check that intermediate hashed filenames are not yielded\n+        # Example based on the known issue details.\n+        non_yielded_intermediate = 'admin/css/base.5af66c1b1797.css'\n+        yielded_hashed_names = [hashed_name for _, hashed_name, _ in processed_files]\n+        \n+        self.assertNotIn(non_yielded_intermediate, yielded_hashed_names)\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n@@ -214,6 +250,42 @@ class TestHashedFiles:\n             self.assertIn(b\"other.d41d8cd98f00.css\", content)\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yields_in_post_process(self):\n+        # Setup fake file paths to simulate a realistic scenario\n+        files_to_process = {\n+            'admin/css/base.css': None,\n+            'admin/css/dashboard.css': None\n+        }\n+        \n+        storage_instance = storage.staticfiles_storage\n+        \n+        # Collect all yielded files during post-processing\n+        processed_files = list(storage_instance.post_process(files_to_process))\n+        \n+        processed_filenames = [name for name, _, _ in processed_files]\n+        \n+        # Assert no filename is yielded more than once\n+        self.assertCountEqual(processed_filenames, set(processed_filenames))\n+\n+    def test_intermediate_files_not_in_yield(self):\n+        # Setup paths for files known to have intermediate versions\n+        files_to_process = {\n+            'admin/css/base.css': None,\n+            'admin/css/dashboard.css': None\n+        }\n+        \n+        storage_instance = storage.staticfiles_storage\n+        \n+        # Collect all yielded files during post-processing\n+        processed_files = list(storage_instance.post_process(files_to_process))\n+        \n+        # Check that intermediate hashed filenames are not yielded\n+        # Example based on the known issue details.\n+        non_yielded_intermediate = 'admin/css/base.5af66c1b1797.css'\n+        yielded_hashed_names = [hashed_name for _, hashed_name, _ in processed_files]\n+        \n+        self.assertNotIn(non_yielded_intermediate, yielded_hashed_names)\n+\n     @override_settings(\n         STATICFILES_DIRS=[os.path.join(TEST_ROOT, 'project', 'faulty')],\n         STATICFILES_FINDERS=['django.contrib.staticfiles.finders.FileSystemFinder'],\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..cac2d11 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -6,6 +7,7 @@ import copy\n import pickle\n \n from django.test import SimpleTestCase\n+import collections.abc\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n     MultiValueDictKeyError, OrderedSet,\n@@ -18,7 +20,20 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        s = reversed(OrderedSet([]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 83089d9..7564652 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n from operator import attrgetter\n \n@@ -6,6 +7,7 @@ from django.db.models import (\n )\n from django.db.models.functions import Upper\n from django.test import TestCase\n+from django.db.models import Count\n \n from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n \n@@ -483,4 +485,4 @@ class OrderingTests(TestCase):\n         )\n         ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n         articles = ChildArticle.objects.order_by('article_ptr')\n-        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..30fa93a 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -823,8 +823,20 @@ class BasicExpressionsTests(TestCase):\n             Employee.objects.filter(Q(salary__lt=15) | Exists(is_poc)),\n             [self.example_inc.ceo, self.max],\n         )\n+    def test_single_child_q_object(self):\n+        \"\"\"\n+        Test deconstruction of single-child Q objects where the child\n+        is an Exists expression, as per the issue description.\n+        \"\"\"\n+        from django.contrib.auth import get_user_model\n+        User = get_user_model()\n+        exists_expr = Exists(User.objects.filter(username=OuterRef('username')))\n \n-    def test_boolean_expression_combined_with_empty_Q(self):\n+        single_child_q = Q(exists_expr)\n+        _, args, kwargs = single_child_q.deconstruct()\n+\n+        self.assertEqual(args, (exists_expr,))\n+        self.assertEqual(kwargs, {})\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n         self.gmbh.save()\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..bc7e0b2 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -74,14 +75,27 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n-    @isolate_apps('model_options.apps.ModelPKConfig')\n-    @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n-    def test_app_default_auto_field(self):\n+    class MyBigAutoField(models.BigAutoField):\n+        pass\n+\n+    class MySmallAutoField(models.SmallAutoField):\n+        pass\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n         class Model(models.Model):\n             pass\n \n-        self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class Model(models.Model):\n+            pass\n \n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..86cacac 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -182,7 +182,14 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-m', 'utils_tests.test_module', 'runserver'],\n         )\n \n-    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module.__spec__})\n+    @mock.patch('sys.argv', [test_main_module.__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_dotted_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-m', 'utils_tests.test_module.main_module', 'runserver'],\n+        )\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n         self.assertEqual(\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..e64d4f7 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,7 +226,13 @@ TEST_DATA = [\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n-    # Trailing newlines not accepted\n+    # Validate that newlines, carriage returns, and tabs are not accepted.\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.django\\rproject.com/', ValidationError),\n+    (URLValidator(), 'http://[::\\rffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://\\twww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n     # Trailing junk does not take forever to reject\n@@ -316,7 +322,24 @@ with open(create_path('invalid_urls.txt'), encoding='utf8') as f:\n \n class TestValidators(SimpleTestCase):\n \n-    def test_validators(self):\n+    def test_validators_with_special_characters(self):\n+        \"\"\"\n+        Test the URLValidator with URLs containing newlines,\n+        carriage returns, and tabs to ensure they're rejected.\n+        \"\"\"\n+        special_cases = [\n+            ('http://www.djangoproject.com/\\r', ValidationError),\n+            ('http://[::ffff:192.9.5.5]\\r', ValidationError),\n+            ('http://www.django\\rproject.com/', ValidationError),\n+            ('http://[::\\rffff:192.9.5.5]', ValidationError),\n+            ('http://\\twww.djangoproject.com/', ValidationError),\n+            ('http://\\t[::ffff:192.9.5.5]', ValidationError),\n+        ]\n+        for url, expected in special_cases:\n+            with self.subTest(url=url):\n+                validator = URLValidator()\n+                with self.assertRaises(expected):\n+                    validator(url)\n         for validator, value, expected in TEST_DATA:\n             name = validator.__name__ if isinstance(validator, types.FunctionType) else validator.__class__.__name__\n             exception_expected = expected is not None and issubclass(expected, Exception)\n",
  "django__django-14351": "",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..297ebf3 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -178,8 +178,13 @@ class DateFormatTests(SimpleTestCase):\n                     dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n                     expected_date,\n                 )\n+    \n+    from datetime import datetime\n+    from django.utils import dateformat\n \n-    def test_twelve_hour_format(self):\n+    def test_y_format_year_before_1000(self):\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n         tests = [\n             (0, '12'),\n             (1, '1'),\n",
  "django__django-14376": "diff --git a/tests/dbshell/test_mysql.py b/tests/dbshell/test_mysql.py\nindex 643c2b6..45f6811 100644\n--- a/tests/dbshell/test_mysql.py\n+++ b/tests/dbshell/test_mysql.py\n@@ -38,6 +38,68 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_non_deprecated_keys_only(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_deprecated_and_non_deprecated_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'user': 'optionuser',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_override_settings_proper_values(self):\n         settings_port = 444\n         options_port = 555\n@@ -68,6 +130,68 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_non_deprecated_keys_only(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_deprecated_and_non_deprecated_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'user': 'optionuser',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_password(self):\n         expected_args = [\n             'mysql',\n@@ -89,6 +213,68 @@ class MySqlDbshellCommandTestCase(SimpleTestCase):\n             (expected_args, expected_env),\n         )\n \n+    def test_non_deprecated_keys_only(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'optiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'optionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'user': 'optionuser',\n+                    'password': 'optionpassword',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n+    def test_deprecated_and_non_deprecated_keys(self):\n+        settings_port = 444\n+        options_port = 555\n+        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n+        expected_args = [\n+            'mysql',\n+            '--user=optionuser',\n+            '--host=optionhost',\n+            '--port=%s' % options_port,\n+            'deprecatedoptiondbname',\n+        ]\n+        expected_env = {'MYSQL_PWD': 'deprecatedoptionpassword'}\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\n+                'NAME': 'settingdbname',\n+                'USER': 'settinguser',\n+                'PASSWORD': 'settingpassword',\n+                'HOST': 'settinghost',\n+                'PORT': settings_port,\n+                'OPTIONS': {\n+                    'database': 'optiondbname',\n+                    'db': 'deprecatedoptiondbname',\n+                    'password': 'optionpassword',\n+                    'passwd': 'deprecatedoptionpassword',\n+                    'user': 'optionuser',\n+                    'host': 'optionhost',\n+                    'port': options_port,\n+                },\n+            }),\n+            (expected_args, expected_env),\n+        )\n+\n     def test_options_charset(self):\n         expected_args = [\n             'mysql',\n",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..2aaa8f6 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2198,6 +2198,40 @@ class SchemaTests(TransactionTestCase):\n             AuthorWithUniqueNameAndBirthday._meta.constraints = []\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n \n+    def test_unique_constraint_with_multiple_fields(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name', 'birthdate'], name='name_birthdate_uq')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        self.assertIs(sql.references_table(table), True)\n+        self.assertIs(sql.references_column(table, 'name'), True)\n+        self.assertIs(sql.references_column(table, 'birthdate'), True)\n+        # Remove constraint.\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        self.assertNotIn(constraint.name, self.get_constraints(table))\n+\n+    def test_unique_constraint_with_include_fields(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        constraint = UniqueConstraint(fields=['name'], include=['birthdate'], name='name_with_birthdate_uq')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            editor.add_constraint(Author, constraint)\n+            sql = constraint.create_sql(Author, editor)\n+        table = Author._meta.db_table\n+        self.assertIs(sql.references_table(table), True)\n+        self.assertIs(sql.references_column(table, 'name'), True)\n+        self.assertIs(sql.references_column(table, 'birthdate'), True)\n+        # Remove constraint.\n+        with connection.schema_editor() as editor:\n+            editor.remove_constraint(Author, constraint)\n+        self.assertNotIn(constraint.name, self.get_constraints(table))\n+\n     @skipUnlessDBFeature('supports_expression_indexes')\n     def test_func_unique_constraint(self):\n         with connection.schema_editor() as editor:\n",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 17aecdd..a227c6c 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -454,6 +454,8 @@ class TestCollectionManifestStorage(TestHashedFiles, CollectionTestCase):\n         )\n \n \n+import io\n+\n @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NoneHashStorage')\n class TestCollectionNoneHashStorage(CollectionTestCase):\n     hashed_file_path = hashed_file_path\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..45af074 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -653,6 +653,36 @@ class ExecutorTests(MigrationTestBase):\n             recorder.applied_migrations(),\n         )\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_migrate_marks_squash_unapplied_when_replacing_exists(self):\n+        \"\"\"Test that squash migrations are marked unapplied if replaced migrations are also unapplied.\"\"\"\n+        executor = MigrationExecutor(connection)\n+        # Apply the squashed migration\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        \n+        # Check that the squash migration is applied\n+        self.assertIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+\n+        # Unapply the squashed migration\n+        executor.migrate([('migrations', None)])\n+        \n+        # Check both squashed and individual migrations are unapplied\n+        self.assertNotIn(\n+            ('migrations', '0001_squashed_0002'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        self.assertNotIn(\n+            ('migrations', '0001_initial'),\n+            executor.recorder.applied_migrations(),\n+        )\n+        self.assertNotIn(\n+            ('migrations', '0002_second'),\n+            executor.recorder.applied_migrations(),\n+        )\n+\n     # When the feature is False, the operation and the record won't be\n     # performed in a transaction and the test will systematically pass.\n     @skipUnlessDBFeature('can_rollback_ddl')\n",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..86d3d3e 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -250,10 +250,42 @@ class TestUtilsHtml(SimpleTestCase):\n                 'Search for google.com/?q=! and see.',\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>! and see.'\n             ),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            (\n+                'Check out django.com/somepath/?a=1&amp;b=2&c=3&lt.',\n+                'Check out <a href=\"http://django.com/somepath/?a=1&b=2&c=3%3C\">django.com/somepath/?a=1&amp;b=2&c=3&lt</a>.'\n+            ),\n+            (\n+                'Visit https://example.com?q=test&lt;3 now.',\n+                'Visit <a href=\"https://example.com?q=test%3C3\">https://example.com?q=test&lt;3</a> now.'\n+            ),\n+            (\n+                'See details at www.test.com/info?arg=2< argue! #section.',\n+                'See details at <a href=\"http://www.test.com/info?arg=2%3C\">www.test.com/info?arg=2&lt;</a> argue! #section.'\n+            ),\n             (\n                 lazystr('Search for google.com/?q=!'),\n                 'Search for <a href=\"http://google.com/?q=\">google.com/?q=</a>!'\n             ),\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            (\n+                'Check out django.com/somepath/?a=1&amp;b=2&c=3&lt.',\n+                'Check out <a href=\"http://django.com/somepath/?a=1&b=2&c=3%3C\">django.com/somepath/?a=1&amp;b=2&c=3&lt</a>.'\n+            ),\n+            (\n+                'Visit https://example.com?q=test&lt;3 now.',\n+                'Visit <a href=\"https://example.com?q=test%3C3\">https://example.com?q=test&lt;3</a> now.'\n+            ),\n+            (\n+                'See details at www.test.com/info?arg=2< argue! #section.',\n+                'See details at <a href=\"http://www.test.com/info?arg=2%3C\">www.test.com/info?arg=2&lt;</a> argue! #section.'\n+            ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n         )\n         for value, output in tests:\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..9c09762 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,6 +115,40 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n+    def test_return_value_for_empty_batch(self):\n+        # Test that updating an empty batch returns 0\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_return_value_for_single_update(self):\n+        # Test that updating a single object returns 1\n+        note = Note.objects.create(note='original')\n+        note.note = 'updated'\n+        rows_updated = Note.objects.bulk_update([note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+\n+    def test_return_value_for_large_batch(self):\n+        # Test the return value for a large batch update\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(0, 2000)\n+        ])\n+        notes = list(Note.objects.all())\n+        for note in notes:\n+            note.note = 'updated'\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_return_value_for_duplicates_in_batch(self):\n+        # Test with duplicate objects in the batch\n+        note = Note.objects.create(note='test-note', misc='test')\n+        note.note = 'updated'\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+        # Duplicates across different batches\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n+\n     def test_update_primary_key(self):\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..40f9cef 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -338,7 +338,29 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n \n-    def test_formset_validate_min_flag(self):\n+    def test_formset_non_form_errors_with_css_class(self):\n+        \"\"\"\n+        Test to check if non-form errors in a FormSet are wrapped with the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '3',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '1',\n+            'choices-0-choice': 'One',\n+            'choices-0-votes': '1',\n+            'choices-1-choice': 'Two',\n+            'choices-1-votes': '1',\n+            'choices-2-choice': 'Three',\n+            'choices-2-votes': '1',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=3, max_num=1, validate_max=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n         \"\"\"\n         If validate_min is set and min_num is more than TOTAL_FORMS in the\n         data, a ValidationError is raised. MIN_NUM_FORMS in the data is\n",
  "django__django-14631": "",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..da72bdd 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -3,6 +3,8 @@ from operator import attrgetter\n \n from django.db import IntegrityError\n from django.test import TestCase\n+from django.db.models import Model, ForeignKey, IntegerField, CASCADE, ManyToManyField, CharField\n+from django.core.checks import Error\n \n from .models import (\n     CustomMembership, Employee, Event, Friendship, Group, Ingredient,\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..02cd7ae 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,5 +1,8 @@\n+\n import json\n-from contextlib import contextmanager\n+import datetime\n+from django.test import TestCase\n+from .models import Question  # Assuming there's a Question model in the same app as admin.py\n \n from django.contrib import admin\n from django.contrib.admin.tests import AdminSeleniumTestCase\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..dfa756c 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -923,8 +923,16 @@ class StateTests(SimpleTestCase):\n             len([x for x in rendered_state.get_models() if x._meta.app_label == \"migrations\"]),\n             1,\n         )\n-\n-    def test_ignore_order_wrt(self):\n+    def test_real_apps_non_set(self):\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n+\n+    def test_real_apps_set(self):\n+        # This should not raise an AssertionError since a set is expected\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly when a set was provided.\")\n         \"\"\"\n         Makes sure ProjectState doesn't include OrderWrt fields when\n         making from existing models.\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..9f8c7e4 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -473,6 +473,16 @@ class RestartWithReloaderTests(SimpleTestCase):\n             p.start()\n             self.addCleanup(p.stop)\n         mock_call = patch_call.start()\n+\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_passed_to_reloader(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n         self.addCleanup(patch_call.stop)\n         return mock_call\n \n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..3ac9275 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -271,6 +271,29 @@ class MethodDecoratorTests(SimpleTestCase):\n                 self.assertEqual(Test.method.__doc__, 'A method')\n                 self.assertEqual(Test.method.__name__, 'method')\n \n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return \"tests\"\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n     def test_new_attribute(self):\n         \"\"\"A decorator that sets a new attribute on the method.\"\"\"\n         def decorate(func):\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..3ce71a4 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5132,7 +5132,25 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         # Related ForeignKey object not registered in admin.\n         self.assertContains(response, '<div class=\"readonly\">Chapter 1</div>', html=True)\n \n-    def test_readonly_manytomany_backwards_ref(self):\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields render and link correctly in the default admin site.\n+        \"\"\"\n+        readonly_related_field = ReadOnlyRelatedField.objects.create(language=Language.objects.create(name=\"English\"))\n+        url = reverse('admin:admin_views_readonlyrelatedfield_change', args=[readonly_related_field.pk])\n+        response = self.client.get(url)\n+        expected_url = reverse('admin:admin_views_language_change', args=[readonly_related_field.language.pk])\n+        self.assertContains(response, f'<a href=\"{expected_url}\">English</a>', html=True)\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test ForeignKey readonly fields render and link correctly in a custom admin site.\n+        \"\"\"\n+        readonly_related_field = ReadOnlyRelatedField.objects.create(language=Language.objects.create(name=\"French\"))\n+        url = reverse('custom-admin:admin_views_readonlyrelatedfield_change', args=[readonly_related_field.pk])\n+        response = self.client.get(url)\n+        expected_url = reverse('custom-admin:admin_views_language_change', args=[readonly_related_field.language.pk])\n+        self.assertContains(response, f'<a href=\"{expected_url}\">French</a>', html=True)\n         \"\"\"\n         Regression test for #16433 - backwards references for related objects\n         broke if the related field is read-only due to the help_text attribute\n",
  "django__django-14915": "",
  "django__django-14999": "",
  "django__django-15022": "diff --git a/tests/admin_changelist/admin.py b/tests/admin_changelist/admin.py\nindex 580e58f..2eadde2 100644\n--- a/tests/admin_changelist/admin.py\n+++ b/tests/admin_changelist/admin.py\n@@ -1,9 +1,10 @@\n+\n from django.contrib import admin\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.core.paginator import Paginator\n \n-from .models import Band, Child, Event, Parent, Swallow\n+from .models import Band, Child, Event, Parent, Swallow, Client, ClientOffice\n \n site = admin.AdminSite(name=\"admin\")\n \n",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/template_tests/filter_tests/test_json_script.py b/tests/template_tests/filter_tests/test_json_script.py\nindex 607e24c..251d8e1 100644\n--- a/tests/template_tests/filter_tests/test_json_script.py\n+++ b/tests/template_tests/filter_tests/test_json_script.py\n@@ -1,5 +1,6 @@\n-from django.test import SimpleTestCase\n \n+from django.test import SimpleTestCase\n+from django.utils.html import json_script\n from ..utils import setup\n \n \n@@ -16,4 +17,4 @@ class JsonScriptTests(SimpleTestCase):\n             '<script id=\"test_id\" type=\"application/json\">'\n             '{\"a\": \"testing\\\\r\\\\njson \\'string\\\\\" \\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E\"}'\n             '</script>'\n-        )\n+        )\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..1ed96a0 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2834,8 +2834,51 @@ class AutodetectorTests(TestCase):\n                     expected_number,\n                 )\n \n+from django.db import models\n+from django.db.migrations.state import ModelState\n+from django.test import TestCase\n+from django.db.migrations.autodetector import MigrationAutodetector\n+\n+class MigrationAutodetectorTests(TestCase):\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n+    def test_custom_fk_deconstruct(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        class CustomModel(models.Model):\n+            author = HardcodedForeignKey(on_delete=models.CASCADE)\n \n-class MigrationSuggestNameTests(SimpleTestCase):\n+        custom_fk_field = CustomModel._meta.get_field('author')\n+        name, path, args, kwargs = custom_fk_field.deconstruct()\n+        self.assertNotIn('to', kwargs)\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n             operations = []\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..b052589 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -361,7 +362,19 @@ class BaseTests:\n         tags = [msg.tags for msg in storage]\n         self.assertEqual(tags, ['info', '', 'extra-tag debug', 'warning', 'error', 'success', 'info'])\n \n-    def test_level_tag(self):\n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'new_info',\n+        constants.DEBUG: 'new_debug',\n+        constants.WARNING: 'new_warning',\n+        constants.ERROR: 'new_error',\n+        25: 'new_custom'\n+    })\n+    def test_override_with_new_tags(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['new_info', '', 'new_debug', 'new_warning', 'new_error', 'success'])\n         storage = self.get_storage()\n         storage.level = 0\n         add_level_messages(storage)\n",
  "django__django-15128": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a7bb7e8..954944c 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -612,9 +612,17 @@ class OrderItem(models.Model):\n         return str(self.pk)\n \n \n+class Annotation(models.Model):\n+    tag = models.ForeignKey('Tag', models.CASCADE)\n+\n+    def __str__(self):\n+        return f\"Annotation {self.pk}\"\n+\n class BaseUser(models.Model):\n-    pass\n+    annotation = models.ForeignKey(Annotation, models.CASCADE, null=True, blank=True)\n \n+    def __str__(self):\n+        return f\"BaseUser {self.pk}\"\n \n class Task(models.Model):\n     title = models.CharField(max_length=10)\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..871f4d2 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1775,7 +1775,19 @@ class ValueTests(TestCase):\n         self.assertEqual(len(kwargs), 1)\n         self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n \n-    def test_repr(self):\n+    def test_deconstruct_F_expression(self):\n+        f_expr = F('rating')\n+        path, args, kwargs = f_expr.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, ('rating',))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_orderby_expression(self):\n+        order_by_expr = OrderBy(F('name').desc())\n+        path, args, kwargs = order_by_expr.deconstruct()\n+        self.assertEqual(path, 'django.db.models.OrderBy')\n+        self.assertEqual(args, ())\n+        self.assertEqual(kwargs, {'expression': F('name').desc()})\n         tests = [\n             (None, 'Value(None)'),\n             ('str', \"Value('str')\"),\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..7092421 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1762,7 +1762,41 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'newfield2')},\n         )\n \n-    def test_proxy(self):\n+    def test_optimize_multiple_foo_together_operations(self):\n+        \"\"\"\n+        Test that multiple AlterFooTogether operations with empty sets are optimized\n+        into a single operation.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book],\n+            [self.author_empty, self.book_foo_together_3]\n+        )\n+        # Right number/type of migrations?\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        # Check if only one operation for each is created\n+        self.assertOperationTypes(\n+            changes, \"otherapp\", 0,\n+            [\"AddField\", \"AlterUniqueTogether\", \"AlterIndexTogether\"]\n+        )\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 1, name=\"book\", \n+            unique_together={(\"title\", \"newfield\")}\n+        )\n+        self.assertOperationAttributes(\n+            changes, \"otherapp\", 0, 2, name=\"book\", \n+            index_together={(\"title\", \"newfield\")}\n+        )\n+\n+    def test_remove_then_add_same_foo_together(self):\n+        \"\"\"\n+        Verify redundant operations of removing and then adding the same constraint are optimized.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book_foo_together_3],\n+            [self.author_empty, self.book_foo_together_3]\n+        )\n+        # Number of migrations should be zero since there's no effective change\n+        self.assertNumberMigrations(changes, \"otherapp\", 0)\n         \"\"\"The autodetector correctly deals with proxy models.\"\"\"\n         # First, we test adding a proxy model\n         changes = self.get_changes([self.author_empty], [self.author_empty, self.author_proxy])\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..5d5d79c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1842,11 +1842,47 @@ class ValueTests(TestCase):\n             (b'', BinaryField),\n             (uuid.uuid4(), UUIDField),\n         ]\n+        # Additional test to ensure CharField does not create broken validators\n+        def test_charfield_init_without_max_length(self):\n+            expr = Value('test_string')\n+            field = expr._resolve_output_field()\n+            # Ensure no exception is thrown during clean\n+            try:\n+                field.clean('a test string', model_instance=None)\n+                no_exception_thrown = True\n+            except TypeError:\n+                no_exception_thrown = False\n+            self.assertTrue(no_exception_thrown)\n+\n         for value, output_field_type in value_types:\n             with self.subTest(type=type(value)):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n+        def test_resolve_output_field_with_various_types(self):\n+            # Create a list of values to test different types\n+            value_types = [\n+                ('string', fields.CharField),\n+                (True, fields.BooleanField),\n+                (42, fields.IntegerField),\n+                (3.14, fields.FloatField),\n+                (datetime.date(2019, 5, 15), fields.DateField),\n+                (datetime.datetime(2019, 5, 15), fields.DateTimeField),\n+                (datetime.time(3, 16), fields.TimeField),\n+                (datetime.timedelta(1), fields.DurationField),\n+                (Decimal('3.14'), fields.DecimalField),\n+                (b'bytes', fields.BinaryField),\n+                (uuid.uuid4(), fields.UUIDField),\n+            ]\n+\n+            for value, expected_field in value_types:\n+                with self.subTest(value=value):\n+                    expr = Value(value)\n+                    output_field = expr._resolve_output_field()\n+                    self.assertIsInstance(output_field, expected_field)\n+                    # Ensure field's clean method works without errors\n+                    output_field.clean(value, model_instance=None)\n+\n     def test_resolve_output_field_failure(self):\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..857064d 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -638,6 +638,21 @@ class SchemaTests(TransactionTestCase):\n             editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n         # MySQL annoyingly uses the same backend, so it'll come back as one of\n+\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField on SQLite to ensure no crash occurs.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        self.assertTrue(columns['note_id'][1][6])\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n \n",
  "django__django-15315": "",
  "django__django-15368": "",
  "django__django-15380": "",
  "django__django-15382": "",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..8387196 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -26,7 +26,13 @@ from django.db.models import (\n )\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n-from django.utils import translation\n+from django.contrib import admin\n+from django.db import models\n+from django.contrib.admin import AdminSite\n+from django.utils.translation import gettext_lazy as _\n+from django.contrib.admin.tests import AdminSeleniumTestCase\n+from django.test import SimpleTestCase, TestCase\n+from .models import Inventory\n \n from .models import (\n     Advisor,\n@@ -141,7 +147,20 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         )\n         self.assertIsNone(ff.empty_label)\n \n-    def test_many_to_many(self):\n+    def test_radio_fields_foreignkey_formfield_overrides_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"parent\": admin.VERTICAL}\n+\n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == 'parent':\n+                    kwargs['empty_label'] = \"Custom empty label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        # Creating an admin site for testing\n+        site = AdminSite()\n+        ma = MyModelAdmin(Inventory, site)\n+        ff = ma.formfield_for_dbfield(Inventory._meta.get_field(\"parent\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n         self.assertFormfield(Band, \"members\", forms.SelectMultiple)\n \n     def test_raw_id_many_to_many(self):\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..07e3fc4 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,58 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_model_with_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Foo\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Foo\",\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_model_with_existing_and_new_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\",\n+                    fields=[],\n+                    managers=[\n+                        (\"existing\", models.Manager()),\n+                    ],\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Foo\",\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                        (\"extra\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\",\n+                    fields=[],\n+                    managers=[\n+                        (\"default\", models.Manager()),\n+                        (\"extra\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..eb4ffd8 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -791,6 +791,53 @@ class NaturalKeyFixtureTests(TestCase):\n         )\n \n \n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def setUp(self):\n+        self.author_data = {\n+            \"model\": \"fixtures_regress.person\",\n+            \"fields\": {\"name\": \"J.R.R. Tolkien\"},\n+        }\n+        self.book_data = {\n+            \"model\": \"fixtures_regress.naturalkeywithfkdependency\",\n+            \"fields\": {\n+                \"name\": \"The Lord of the Rings\",\n+                \"author\": [\"J.R.R. Tolkien\"],\n+            },\n+        }\n+        # Assuming 'dumpdata' has been used to create these fixtures\n+        self.fixtures = [self.author_data, self.book_data]\n+\n+    def test_natural_key_with_foreign_key_on_non_default_database(self):\n+        \"\"\"\n+        Test loading fixture data with natural keys on a non-default database.\n+        \"\"\"\n+        with mock.patch(\"django.core.management.commands.loaddata.open\", create=True) as mock_open:\n+            mock_open.return_value.__enter__.return_value = self.fixtures\n+\n+            management.call_command(\n+                \"loaddata\", \"-\", database=\"other\", verbosity=0, format=\"json\"\n+            )\n+            \n+            # Checking if the data loaded into the 'other' database correctly\n+            obj = NaturalKeyWithFKDependency.objects.using(\"other\").get(name=\"The Lord of the Rings\")\n+            self.assertEqual(obj.name, \"The Lord of the Rings\")\n+            self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n+\n+    def test_loading_without_dependency_on_default_database(self):\n+        \"\"\"\n+        Test loading fixture without pre-existing data in default database.\n+        \"\"\"\n+        management.call_command(\n+            \"loaddata\", \"nk_with_foreign_key.json\", database=\"default\", verbosity=0\n+        )\n+\n+        obj = NaturalKeyWithFKDependency.objects.using(\"default\").get(name=\"The Lord of the Rings\")\n+        self.assertEqual(obj.name, \"The Lord of the Rings\")\n+        self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n+\n+\n class M2MNaturalKeyFixtureTests(TestCase):\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n@@ -805,6 +852,53 @@ class M2MNaturalKeyFixtureTests(TestCase):\n         sorted_deps = serializers.sort_dependencies(\n             [(\"fixtures_regress\", [M2MSimpleA, M2MSimpleB])]\n         )\n+\n+\n+class NaturalKeyFixtureOnOtherDatabaseTests(TestCase):\n+    databases = {\"default\", \"other\"}\n+\n+    def setUp(self):\n+        self.author_data = {\n+            \"model\": \"fixtures_regress.person\",\n+            \"fields\": {\"name\": \"J.R.R. Tolkien\"},\n+        }\n+        self.book_data = {\n+            \"model\": \"fixtures_regress.naturalkeywithfkdependency\",\n+            \"fields\": {\n+                \"name\": \"The Lord of the Rings\",\n+                \"author\": [\"J.R.R. Tolkien\"],\n+            },\n+        }\n+        # Assuming 'dumpdata' has been used to create these fixtures\n+        self.fixtures = [self.author_data, self.book_data]\n+\n+    def test_natural_key_with_foreign_key_on_non_default_database(self):\n+        \"\"\"\n+        Test loading fixture data with natural keys on a non-default database.\n+        \"\"\"\n+        with mock.patch(\"django.core.management.commands.loaddata.open\", create=True) as mock_open:\n+            mock_open.return_value.__enter__.return_value = self.fixtures\n+\n+            management.call_command(\n+                \"loaddata\", \"-\", database=\"other\", verbosity=0, format=\"json\"\n+            )\n+            \n+            # Checking if the data loaded into the 'other' database correctly\n+            obj = NaturalKeyWithFKDependency.objects.using(\"other\").get(name=\"The Lord of the Rings\")\n+            self.assertEqual(obj.name, \"The Lord of the Rings\")\n+            self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n+\n+    def test_loading_without_dependency_on_default_database(self):\n+        \"\"\"\n+        Test loading fixture without pre-existing data in default database.\n+        \"\"\"\n+        management.call_command(\n+            \"loaddata\", \"nk_with_foreign_key.json\", database=\"default\", verbosity=0\n+        )\n+\n+        obj = NaturalKeyWithFKDependency.objects.using(\"default\").get(name=\"The Lord of the Rings\")\n+        self.assertEqual(obj.name, \"The Lord of the Rings\")\n+        self.assertEqual(obj.author.name, \"J.R.R. Tolkien\")\n         self.assertEqual(sorted_deps, [M2MSimpleB, M2MSimpleA])\n \n     def test_dependency_sorting_m2m_simple_circular(self):\n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..ecec6cf 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,6 +3961,39 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n+    def test_alter_field_choices_noop_integerfield(self):\n+        # Test altering IntegerField with choices on SQLite should be a no-op\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"id\")\n+        new_field = IntegerField(\n+            choices=((1, \"One\"), (2, \"Two\"))\n+        )\n+        new_field.set_attributes_from_name(\"id\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+\n+    def test_alter_field_choices_noop_floatfield(self):\n+        # Test altering FloatField with choices on SQLite should be a no-op\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        old_field = Author._meta.get_field(\"rating\")\n+        new_field = FloatField(\n+            choices=((1.0, \"One\"), (2.0, \"Two\"))\n+        )\n+        new_field.set_attributes_from_name(\"rating\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Author, new_field, old_field, strict=True)\n+        new_field.set_attributes_from_name(\"author\")\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Book, old_field, new_field, strict=True)\n+        with connection.schema_editor() as editor, self.assertNumQueries(0):\n+            editor.alter_field(Book, new_field, old_field, strict=True)\n+\n     def test_add_textfield_unhashable_default(self):\n         # Create the table\n         with connection.schema_editor() as editor:\n",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..cd8ad3a 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -325,7 +325,19 @@ class LookupTests(TestCase):\n             self.assertIn(\"exactly\", field.get_lookups())\n \n \n-class BilateralTransformTests(TestCase):\n+    def test_unregister_lookup_clears_cache(self):\n+        # Ensure lookup is not registered initially\n+        field = Article._meta.get_field(\"author\")\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+\n+        # Register a lookup and verify it's registered\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+\n+            # Unregister the lookup and verify the cache is cleared\n+            models.ForeignObject._unregister_lookup(Exactly)\n+            field.get_lookups.cache_clear()\n+            self.assertNotIn(\"exactly\", field.get_lookups())\n     def test_bilateral_upper(self):\n         with register_lookup(models.CharField, UpperBilateralTransform):\n             author1 = Author.objects.create(name=\"Doe\")\n",
  "django__django-15572": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 188dca4..58ca67d 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -76,6 +76,54 @@ class TemplateReloadTests(SimpleTestCase):\n             },\n         )\n \n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_empty_string(self):\n+        self.assertSetEqual(autoreload.get_template_directories(), set())\n+        \n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\", \"\", \"valid_directory\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    @mock.patch('pathlib.Path.is_dir', return_value=True)\n+    def test_template_dirs_ignore_multiple_empty_strings(self, _):\n+        # Even with multiple empty strings, the set should only contain the valid path.\n+        self.assertSetEqual(autoreload.get_template_directories(), {Path.cwd() / \"valid_directory\"})\n+        \n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_with_no_directories(self):\n+        self.assertSetEqual(autoreload.get_template_directories(), set())\n+        \n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"nonexistent_directory\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    @mock.patch('pathlib.Path.is_dir', return_value=False)\n+    def test_template_dirs_with_nonexistent_directory(self, _):\n+        # Nonexistent directories should not be considered.\n+        self.assertSetEqual(autoreload.get_template_directories(), set())\n+\n     @mock.patch(\"django.template.loaders.base.Loader.reset\")\n     def test_reset_all_loaders(self, mock_reset):\n         autoreload.reset_loaders()\n",
  "django__django-15731": "",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..0d938ef 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,9 +1,12 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n from django.utils import timezone, translation\n \n+from django.utils.translation import gettext_lazy as _\n+from django.utils.formats import get_format\n from ..utils import setup\n from .timezone_utils import TimezoneTestCase\n \n@@ -67,7 +70,21 @@ class DateTests(TimezoneTestCase):\n         output = self.engine.render_to_string(\"date08\", {\"t\": time(0, 1)})\n         self.assertEqual(output, \"00:01\")\n \n-    @setup({\"date09\": '{{ t|date:\"H:i\" }}'})\n+    def test_get_format_lazy_string(self):\n+        \"\"\"\n+        Test get_format with a lazy string for DATE_FORMAT.\n+        It should correctly resolve the lazy string and not raise a TypeError.\n+        \"\"\"\n+        self.assertEqual(get_format(_(\"DATE_FORMAT\")), \"N j, Y\")  # Assuming 'N j, Y' is the default format.\n+\n+    @setup({\"datelazy_with_lazy_string\": '{{ t|date:_(\"H:i\") }}'})\n+    def test_date_filter_with_lazy_string(self):\n+        \"\"\"\n+        Test the date template filter with a lazy string.\n+        It should correctly format the time object without raising an error.\n+        \"\"\"\n+        output = self.engine.render_to_string(\"datelazy_with_lazy_string\", {\"t\": time(0, 0)})\n+        self.assertEqual(output, \"00:00\")\n     def test_date09(self):\n         output = self.engine.render_to_string(\"date09\", {\"t\": time(0, 0)})\n         self.assertEqual(output, \"00:00\")\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..a111e30 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -395,6 +395,20 @@ class ProxyModelTests(TestCase):\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n \n+    def test_select_related_only_proxy(self):\n+        # Setup test models to reproduce the issue\n+        custom_instance = ProxyCustomModel.objects.create(name=\"Test Name\")\n+        another_instance = AnotherModel.objects.create(custom=custom_instance)\n+\n+        # Perform the operation that previously resulted in a crash\n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+\n+        # Verify that the queryset can be evaluated without errors\n+        self.assertEqual(list(queryset), [another_instance])\n+\n+        # Check that the 'custom__name' field is correctly loaded\n+        self.assertEqual(queryset[0].custom.name, \"Test Name\")\n+\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n",
  "django__django-15851": "",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..77390a8 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -31,6 +31,9 @@ class FloatformatTests(SimpleTestCase):\n         self.assertEqual(output, \"1.4 1.4\")\n \n \n+from decimal import Decimal\n+from django.template.defaultfilters import floatformat\n+\n class FunctionTests(SimpleTestCase):\n     def test_inputs(self):\n         self.assertEqual(floatformat(7.7), \"7.7\")\n@@ -74,7 +77,31 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n-    def test_force_grouping(self):\n+    def test_decimal_precision(self):\n+        # Original test patch case\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+        # Test with fewer decimal places\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.1234567890123456789\"), 18),\n+            \"123456.123456789012345679\",  # Note: rounded at the last decimal place\n+        )\n+        # Test just barely changing a single decimal place\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\",\n+        )\n+        # Test different range of decimal numbers for extensive precision\n+        self.assertEqual(\n+            floatformat(Decimal(\"0.000000000000000000001234\"), 21),\n+            \"0.000000000000000000001\",\n+        )\n+        self.assertEqual(\n+            floatformat(Decimal(\"-0.000000000000000000001234\"), 21),\n+            \"-0.000000000000000000001\",\n+        )\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n             self.assertEqual(floatformat(66666.666, \"1g\"), \"66,666.7\")\n",
  "django__django-15930": "",
  "django__django-15987": "",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..54f65ad 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -989,6 +989,28 @@ class NonAggregateAnnotationTestCase(TestCase):\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n \n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        # Test case to reproduce the bug\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = Publisher.objects.filter(\n+            book__in=long_books_qs\n+        ).values(\"name\")\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {\"name\": \"Apress\"},\n+                {\"name\": \"Sams\"},\n+                {\"name\": \"Prentice Hall\"},\n+                {\"name\": \"Morgan Kaufmann\"},\n+            ],\n+        )\n+\n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n             Book.objects.values(\"publisher\")\n",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..c6202be 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2416,7 +2416,7 @@ class CombinedExpressionTests(SimpleTestCase):\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..b5ad795 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,9 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError, models\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,7 +403,58 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n-    def test_custom_paginator(self):\n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity(self):\n+        # Set up two Swallow objects.\n+        a = Swallow.objects.create(origin=\"Swallow A\", load=4, speed=1)\n+        b = Swallow.objects.create(origin=\"Swallow B\", load=2, speed=2)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(a.pk),\n+            \"form-1-uuid\": str(b.pk),\n+            \"form-0-load\": \"9.0\",\n+            \"form-0-speed\": \"3.0\",\n+            \"form-1-load\": \"5.0\",\n+            \"form-1-speed\": \"1.0\",\n+            \"_save\": \"Save\",\n+        }\n+        \n+        # Test atomicity by simulating a DatabaseError in the middle of the transaction.\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        \n+        # Check original values are preserved due to transaction rollback.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n+\n+        # Test with first change log successful and second logs a DatabaseError.\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\",\n+            side_effect=[None, DatabaseError],\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        \n+        # Check original values again to ensure atomicity handles partial updates.\n+        a.refresh_from_db()\n+        self.assertEqual(a.load, 4)\n+        self.assertEqual(a.speed, 1)\n+        b.refresh_from_db()\n+        self.assertEqual(b.load, 2)\n+        self.assertEqual(b.speed, 2)\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n             Child.objects.create(name=\"name %s\" % i, parent=new_parent)\n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..fa3f611 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2400,7 +2400,37 @@ class MakeMigrationsTests(MigrationTestBase):\n         ):\n             call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n \n-    def test_makemigrations_migration_path_output(self):\n+    def test_makemigrations_check_no_write(self):\n+        \"\"\"\n+        makemigrations --check should not create any migration files.\n+        \"\"\"\n+        # Prepare the output stream to capture the command output.\n+        out = io.StringIO()\n+        \n+        with self.temporary_migration_module() as tmpdir:\n+            # Run makemigrations with --check and suppress output.\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", \n+                             verbosity=0, stdout=out, stderr=out)\n+            # Ensure the command exits with a non-zero status\n+            self.assertNotEqual(cm.exception.code, 0)\n+            # Check if the directory still does not exist, meaning no migrations were written.\n+            self.assertFalse(os.path.exists(tmpdir))\n+\n+    def test_makemigrations_check_with_dry_run(self):\n+        \"\"\"\n+        makemigrations --check --dry-run should not create any migration files.\n+        \"\"\"\n+        out = io.StringIO()\n+        with self.temporary_migration_module() as tmpdir:\n+            # Run makemigrations with --check and --dry-run and suppress output.\n+            with self.assertRaises(SystemExit) as cm:\n+                call_command(\"makemigrations\", \"--check\", \"--dry-run\", \"migrations\",\n+                             verbosity=0, stdout=out, stderr=out)\n+            # Ensure the command exits with a non-zero status\n+            self.assertNotEqual(cm.exception.code, 0)\n+            # Check if the directory still does not exist, meaning no migrations were written.\n+            self.assertFalse(os.path.exists(tmpdir))\n         \"\"\"\n         makemigrations should print the relative paths to the migrations unless\n         they are outside of the current tree, in which case the absolute path\n",
  "django__django-16136": "",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..1e13b18 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -26,6 +27,9 @@ from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n \n+from django.urls import reverse\n+from urllib.parse import urljoin\n+import re\n from .models.custom_user import (\n     CustomUser,\n     CustomUserWithoutIsActiveField,\n@@ -892,7 +896,25 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n-    def test_custom_form(self):\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.uuid,),  # Assuming uuid is present, else use a suitable field\n+        )\n+        joined_url = urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),  # Using pk here to validate correctness of constructed URL\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n                 model = ExtensionUser\n",
  "django__django-16145": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex 04d2f0e..0dfd5cd 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1600,6 +1600,22 @@ class ManageRunserver(SimpleTestCase):\n             \"2001:0db8:1234:5678::9\", \"7000\", ipv6=True, raw_ipv6=True\n         )\n \n+    def test_runner_zero_ip_addr(self):\n+        with mock.patch(\"django.core.management.commands.runserver.run\"), \\\n+             mock.patch(\"django.core.management.base.BaseCommand.check_migrations\"):\n+            output = io.StringIO()\n+            call_command(\n+                self.cmd,\n+                addrport=\"0:8000\",\n+                use_reloader=False,\n+                skip_checks=True,\n+                stdout=output\n+            )\n+            self.assertIn(\n+                \"Starting development server at http://0.0.0.0:8000/\",\n+                output.getvalue(),\n+            )\n+\n     def test_runner_hostname(self):\n         call_command(self.cmd, addrport=\"localhost:8000\")\n         self.assertServerSettings(\"localhost\", \"8000\")\n",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..5694d90 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,8 +507,25 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n-\n-# RemovedInDjango50Warning\n+from django.test import TestCase, override_settings\n+from django.contrib.sitemaps.views import index\n+from django.urls import path\n+from .urls.http import CallableLastmodNoItemsSitemap\n+\n+# Test case for issue described in the problem statement.\n+class CallableLastmodNoItemsSitemapTest(TestCase):\n+    def test_callable_lastmod_no_items(self):\n+        # Testing the sitemap with no items to see if it raises a ValueError or if it handles it gracefully.\n+        response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertEqual(response.status_code, 200)\n+        self.assertNotIn(\"Last-Modified\", response)\n+        expected_content_index = (\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            '<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n'\n+            '    <sitemap><loc>http://example.com/callable-lastmod-no-items/sitemap.xml</loc></sitemap>\\n'\n+            '</sitemapindex>\\n'\n+        )\n+        self.assertXMLEqual(response.content.decode(), expected_content_index)\n class DeprecatedTests(SitemapTestsBase):\n     @override_settings(\n         TEMPLATES=[\n",
  "django__django-16315": "diff --git a/tests/bulk_create/models.py b/tests/bulk_create/models.py\nindex c5f5c07..2b5dcf9 100644\n--- a/tests/bulk_create/models.py\n+++ b/tests/bulk_create/models.py\n@@ -59,6 +59,11 @@ class Pizzeria(Restaurant):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n+\n class State(models.Model):\n     two_letter_code = models.CharField(max_length=2, primary_key=True)\n \n@@ -79,6 +84,11 @@ class NoFields(models.Model):\n     pass\n \n \n+class FieldsWithDbColumns(models.Model):\n+    rank = models.IntegerField(unique=True, db_column=\"rAnK\")\n+    name = models.CharField(max_length=15, null=True, db_column=\"oTheRNaMe\")\n+\n+\n class SmallAutoFieldModel(models.Model):\n     id = models.SmallAutoField(primary_key=True)\n \n",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..c6ca131 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,58 @@\n+\n+class UserCreationFormWithM2MTests(TestCase):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_no_many_to_many_field(self):\n+        class CustomUserCreationFormWithoutM2M(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields  # No M2M field\n+\n+        data = {\n+            \"username\": \"testclient2@example.com\",\n+            \"password1\": \"testclient2\",\n+            \"password2\": \"testclient2\",\n+        }\n+        form = CustomUserCreationFormWithoutM2M(data)\n+        self.assertIs(form.is_valid(), True)\n+        user = form.save(commit=True)\n+        # Ensuring that there are no organizations associated\n+        self.assertSequenceEqual(user.orgs.all(), [])\n+\n+    def test_invalid_many_to_many_field_submission(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        # Assuming there is no organization with pk=9999\n+        data = {\n+            \"username\": \"testclient3@example.com\",\n+            \"password1\": \"testclient3\",\n+            \"password2\": \"testclient3\",\n+            \"orgs\": [\"9999\"],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertIs(form.is_valid(), False)\n+        self.assertIn(\"orgs\", form.errors)\n+\n import datetime\n import re\n import urllib.parse\n@@ -14,6 +69,7 @@ from django.contrib.auth.forms import (\n     UserChangeForm,\n     UserCreationForm,\n )\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from django.contrib.auth.models import User\n from django.contrib.auth.signals import user_login_failed\n from django.contrib.sites.models import Site\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..c02bf5c 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -236,7 +237,29 @@ class TimesinceTests(TestCase):\n             with self.subTest():\n                 self.assertEqual(timesince(t, value), expected)\n \n-    def test_depth_invalid(self):\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        past_date = now - datetime.timedelta(days=31)\n+        pivot = timezone.make_aware(datetime.datetime(\n+            past_date.year,\n+            past_date.month,\n+            min(datetime.datetime.now().day, past_date.day),\n+            past_date.hour,\n+            past_date.minute,\n+            past_date.second,\n+            past_date.microsecond,\n+            past_date.tzinfo\n+        ))\n+        self.assertEqual(timesince(past_date, pivot), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_different_month_year_with_tz(self):\n+        now = timezone.now()\n+        past_date = now - datetime.timedelta(days=365 + 31)\n+        self.assertEqual(timesince(past_date, now), \"1\\xa0year, 1\\xa0month\")\n         msg = \"depth must be greater than 0.\"\n         with self.assertRaisesMessage(ValueError, msg):\n             timesince(self.t, self.t, depth=0)\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..22f67c3 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -468,6 +468,29 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), \"Set foo\")\n \n+class CommandParserTests(SimpleTestCase):\n+    class MockCommand(BaseCommand):\n+        def add_arguments(self, parser):\n+            subparsers = parser.add_subparsers(required=True)\n+            create = subparsers.add_parser(\"create\")\n+            create.add_argument(\"name\")\n+\n+        def handle(self, *args, **options):\n+            pass\n+\n+    def test_missing_subparser_argument_error_formatting(self):\n+        out, err = self.run_manage([\"cheeses\", \"create\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertIn(\"manage.py cheeses create:\", err_lines[1])\n+        self.assertIn(\"error: the following arguments are required: name\", err_lines[1])\n+\n+    def test_incorrect_argument_type_error_formatting(self):\n+        out, err = self.run_manage([\"cheeses\", \"create\", \"123\"])\n+        self.assertNoOutput(err)  # Assuming no error with an integer string for demonstration.\n+        self.assertEqual(out.strip(), \"Created 123\")\n+\n \n class UtilsTests(SimpleTestCase):\n     def test_no_existent_external_program(self):\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..71d6ab7 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -104,7 +104,16 @@ class FunctionTests(SimpleTestCase):\n             # Invalid suffix.\n             self.assertEqual(floatformat(66666.666, \"u2\"), \"66666.666\")\n \n-    def test_zero_values(self):\n+    def test_floatformat_issue(self):\n+        # Test case from the original patch to check 0.00 with precision 0\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+        # Additional test cases for edge cases\n+        self.assertEqual(floatformat(\"0\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0\"), 0), \"0\")\n+        self.assertEqual(floatformat(\"0.12345\", 2), \"0.12\")\n+        self.assertEqual(floatformat(\"-0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"-0.00\"), 0), \"0\")\n         self.assertEqual(floatformat(0, 6), \"0.000000\")\n         self.assertEqual(floatformat(0, 7), \"0.0000000\")\n         self.assertEqual(floatformat(0, 10), \"0.0000000000\")\n",
  "django__django-16493": "",
  "django__django-16527": "",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..4b8f783 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -67,7 +67,41 @@ class BaseConstraintTests(SimpleTestCase):\n         )\n         self.assertEqual(c.get_violation_error_message(), \"custom base_name message\")\n \n-    def test_custom_violation_error_message_clone(self):\n+    def test_custom_violation_code(self):\n+        # Test a custom error code with CheckConstraint.\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = CheckConstraint(\n+            check=check,\n+            name=\"price\",\n+            violation_error_code=\"price_violation\",\n+        )\n+        # Invalid product.\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"price_violation\")\n+        \n+        # Test a custom error code with UniqueConstraint.\n+        constraint = UniqueConstraint(\n+            fields=[\"name\", \"color\"],\n+            name=\"unique_name_color\",\n+            violation_error_code=\"unique_violation\",\n+        )\n+        non_unique_product = UniqueConstraintProduct(\n+            name=self.p1.name, color=self.p1.color\n+        )\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(UniqueConstraintProduct, non_unique_product)\n+        self.assertEqual(cm.exception.code, \"unique_violation\")\n+\n+        # Test default behavior when no custom code is provided.\n+        constraint = CheckConstraint(\n+            check=models.Q(price__gt=0),\n+            name=\"positive_price\",\n+        )\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, Product(price=-10))\n+        self.assertIsNone(cm.exception.code)\n         constraint = BaseConstraint(\n             name=\"base_name\",\n             violation_error_message=\"custom %(name)s message\",\n@@ -108,6 +142,16 @@ class BaseConstraintTests(SimpleTestCase):\n         self.assertEqual(c.get_violation_error_message(), \"custom name message\")\n \n \n+from django.core.exceptions import ValidationError\n+from django.db import models\n+from django.db.models import F, Q\n+from django.test import TestCase\n+# Importing the necessary modules for testing constraints.\n+from django.db.models.constraints import BaseConstraint, CheckConstraint, UniqueConstraint\n+from django.test.utils import override_settings\n+from django.utils.deprecation import RemovedInDjango60Warning\n+import warnings\n+\n class CheckConstraintTests(TestCase):\n     def test_eq(self):\n         check1 = models.Q(price__gt=models.F(\"discounted_price\"))\n",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..4ccc7d4 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1476,6 +1476,18 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n \n         formset = ChoiceFormFormset(initial=[{\"choice\": \"Zero\", \"votes\": \"1\"}])\n+\n+        # New test case to verify the fix for the issue where index is None\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+\n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        my_formset = MyFormSet(initial=None)\n+        self.assertNotIn(\"DELETE\", my_formset.empty_form.fields)\n         self.assertEqual(len(formset), 3)\n         self.assertIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..27f238b 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,6 +43,39 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n+    def test_alter_alter_field(self):\n+        \"\"\"\n+        Test that multiple AlterField operations on the same field collapse into one.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=256, null=True)),\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True)),\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ],\n+            [\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ]\n+        )\n+\n+    def test_retain_add_then_alter(self):\n+        \"\"\"\n+        Test that AddField followed by AlterField operations retain the complex scenario.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddField(\"book\", \"title\", models.CharField(max_length=256, null=True)),\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True)),\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\")),\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ],\n+            [\n+                migrations.AddField(\"book\", \"title\", models.CharField(max_length=256, null=True)),\n+                migrations.AlterField(\"book\", \"title\", models.CharField(max_length=128, null=True, help_text=\"help\", default=None)),\n+            ]\n+        )\n+\n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..b24a785 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8464,6 +8464,61 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n \n     @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string_preserved(self):\n+        \"\"\"Test if query strings are preserved when redirecting with APPEND_SLASH=True.\"\"\"\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?page=2\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?page=2\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_with_multiple_query_params(self):\n+        \"\"\"Test if multiple query parameters are preserved after the redirect.\"\"\"\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?page=2&search=test\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?page=2&search=test\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_preserves_fragment(self):\n+        \"\"\"Test if URL fragment is preserved after redirect.\"\"\"\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?page=2#section1\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?page=2#section1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_script_name(self):\n         superuser = User.objects.create_user(\n             username=\"staff\",\n@@ -8500,6 +8555,61 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         )\n \n     @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_query_string_preserved(self):\n+        \"\"\"Test if query strings are preserved when redirecting with APPEND_SLASH=True.\"\"\"\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?page=2\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?page=2\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_missing_slash_append_slash_true_with_multiple_query_params(self):\n+        \"\"\"Test if multiple query parameters are preserved after the redirect.\"\"\"\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?page=2&search=test\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?page=2&search=test\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_preserves_fragment(self):\n+        \"\"\"Test if URL fragment is preserved after redirect.\"\"\"\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(f\"{known_url[:-1]}?page=2#section1\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?page=2#section1\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n             username=\"user\",\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..5efa7ab 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -255,6 +255,8 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.gz\", \"application/gzip\"),\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n         )\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n@@ -263,7 +265,19 @@ class FileResponseTests(SimpleTestCase):\n                 self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n                 self.assertFalse(response.has_header(\"Content-Encoding\"))\n \n-    def test_unicode_attachment(self):\n+    def test_brotli_mime_type(self):\n+        \"\"\"Test correct MIME type for Brotli compressed files\"\"\"\n+        with tempfile.NamedTemporaryFile(suffix=\".testfile.br\") as tmp:\n+            response = FileResponse(tmp)\n+        self.assertEqual(response.headers[\"Content-Type\"], \"application/x-brotli\")\n+        self.assertFalse(response.has_header(\"Content-Encoding\"))\n+\n+    def test_compress_mime_type(self):\n+        \"\"\"Test correct MIME type for Unix Compress compressed files\"\"\"\n+        with tempfile.NamedTemporaryFile(suffix=\".testfile.Z\") as tmp:\n+            response = FileResponse(tmp)\n+        self.assertEqual(response.headers[\"Content-Type\"], \"application/x-compress\")\n+        self.assertFalse(response.has_header(\"Content-Encoding\"))\n         response = FileResponse(\n             ContentFile(b\"binary content\", name=\"\u795d\u60a8\u5e73\u5b89.odt\"),\n             as_attachment=True,\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..d366359 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -141,9 +141,23 @@ class ModelAdminTests(TestCase):\n         class EmployeeProfileAdmin(ModelAdmin):\n             list_filter = [\n                 \"employee__employeeinfo__description\",\n-                \"employee__department__code\",\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n             ]\n \n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country\", \"test_value\"), True\n+        )\n+        \n+        # Test for additional lookups\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+\n         ma = EmployeeProfileAdmin(EmployeeProfile, self.site)\n         # Reverse OneToOneField\n         self.assertIs(\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..cf4daf4 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -921,8 +921,30 @@ class WriterTests(SimpleTestCase):\n             \"import datetime\\nfrom django.db import migrations, models\\n\",\n             output,\n         )\n-\n-    def test_migration_file_header_comments(self):\n+    def test_import_ordering_with_multiple_imports_and_isort_compatibility(self):\n+        \"\"\"\n+        Test if migration files are generated with correct import ordering:\n+        standard imports first, then Django's specific imports.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..f47cf5e 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -328,6 +328,32 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n \n     PersonModel = Person\n \n+    def test_post_init_not_connected(self):\n+        \"\"\"\n+        Test that the post_init signal is not connected when width_field and\n+        height_field are not specified, in accordance with the issue fix.\n+        \"\"\"\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+    \n+    def test_noop_post_init_handler(self):\n+        \"\"\"\n+        Ensure the post_init handler is effectively a no-op when neither\n+        width_field nor height_field are set.\n+        \"\"\"\n+        from django.db.models.signals import post_init\n+        handler_list_before = list(post_init.receivers)\n+        \n+        # Trigger an object initialization\n+        instance = self.PersonModel()\n+        \n+        # Assert that no new signal handler was connected during the init\n+        handler_list_after = list(post_init.receivers)\n+        self.assertEqual(handler_list_before, handler_list_after)\n+\n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n class ImageFieldOneDimensionTests(ImageFieldTwoDimensionsTests):\n",
  "django__django-16819": "",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..4656599 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -790,22 +790,28 @@ class SystemChecksTestCase(SimpleTestCase):\n \n         errors = SongAdmin(Song, AdminSite()).check()\n         self.assertEqual(errors, [])\n+    \n+    def test_nonexistent_field_with_name_in_error(self):\n+        class AlbumAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"name\", \"nonexistent_field\")\n \n-    def test_nonexistent_field(self):\n-        class SongAdmin(admin.ModelAdmin):\n-            readonly_fields = (\"title\", \"nonexistent\")\n-\n-        errors = SongAdmin(Song, AdminSite()).check()\n+        errors = AlbumAdmin(Album, AdminSite()).check()\n         expected = [\n             checks.Error(\n-                \"The value of 'readonly_fields[1]' is not a callable, an attribute \"\n-                \"of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n-                obj=SongAdmin,\n+                \"The value of 'readonly_fields[1]' refers to 'nonexistent_field', which is not a callable, \"\n+                \"an attribute of 'AlbumAdmin', or an attribute of 'admin_checks.Album'.\",\n+                obj=AlbumAdmin,\n                 id=\"admin.E035\",\n             )\n         ]\n         self.assertEqual(errors, expected)\n \n+    def test_readonly_fields_correct(self):\n+        class BookAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"title\",)\n+\n+        errors = BookAdmin(Book, AdminSite()).check()\n+        self.assertEqual(errors, [])\n     def test_nonexistent_field_on_inline(self):\n         class CityInline(admin.TabularInline):\n             model = City\n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..5622a66 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -54,7 +55,46 @@ class XorLookupsTests(TestCase):\n             [self.numbers[0]],\n         )\n \n-    def test_pk_q(self):\n+    def test_xor_parity_condition(self):\n+        # Testing odd number of conditions should return numbers matching odd parity\n+        expected_results = []\n+        for i in range(10):\n+            if (i >= 1) ^ (i >= 3) ^ (i >= 5):\n+                expected_results.append(self.numbers[i])\n+        \n+        qs = Number.objects.filter(\n+            Q(num__gte=1)\n+            ^ Q(num__gte=3)\n+            ^ Q(num__gte=5)\n+        )\n+        self.assertCountEqual(qs, expected_results)\n+\n+    def test_xor_parity_more_conditions(self):\n+        # Testing more complex odd and even count of conditions\n+        odd_conditions_results = []\n+        even_conditions_results = []\n+        for i in range(10):\n+            if (i >= 1) ^ (i >= 3) ^ (i >= 5) ^ (i >= 7):\n+                odd_conditions_results.append(self.numbers[i])\n+            if (i >= 1) ^ (i >= 3) ^ (i >= 5) ^ (i >= 7) ^ (i >= 9):\n+                even_conditions_results.append(self.numbers[i])\n+        \n+        qs_odd = Number.objects.filter(\n+            Q(num__gte=1)\n+            ^ Q(num__gte=3)\n+            ^ Q(num__gte=5)\n+            ^ Q(num__gte=7)\n+        )\n+        qs_even = Number.objects.filter(\n+            Q(num__gte=1)\n+            ^ Q(num__gte=3)\n+            ^ Q(num__gte=5)\n+            ^ Q(num__gte=7)\n+            ^ Q(num__gte=9)\n+        )\n+        \n+        self.assertCountEqual(qs_odd, odd_conditions_results)\n+        self.assertCountEqual(qs_even, even_conditions_results)\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk=self.numbers[0].pk) ^ Q(pk=self.numbers[1].pk)),\n             self.numbers[:2],\n@@ -64,4 +104,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..8aa9754 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -24,6 +24,9 @@ SOME_INSTALLED_APPS = [\n     \"django.contrib.staticfiles\",\n ]\n \n+from django.test import override_settings\n+from django.apps import apps\n+\n SOME_INSTALLED_APPS_NAMES = [\n     \"django.contrib.admin\",\n     \"django.contrib.auth\",\n@@ -139,6 +142,29 @@ class AppsTests(SimpleTestCase):\n         self.assertIsInstance(config, TwoConfig)\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_swappable_cache_cleared(self):\n+        \"\"\"\n+        Test that get_swappable_settings_name cache is cleared by apps.clear_cache().\n+        \"\"\"\n+        # Ensure cache is set\n+        apps.get_swappable_settings_name(\"auth.User\")\n+        self.assertGreater(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+\n+        # Clear the cache\n+        apps.clear_cache()\n+\n+        # Ensure the cache is cleared\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+\n+    def test_cache_methods_unchanged(self):\n+        \"\"\"\n+        Test that other cache methods like get_models are properly cleared as well.\n+        \"\"\"\n+        apps.get_models()\n+        self.assertGreater(apps.get_models.cache_info().currsize, 0)\n+\n+        apps.clear_cache()\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n     def test_get_app_configs(self):\n         \"\"\"\n         Tests apps.get_app_configs().\n@@ -149,6 +175,29 @@ class AppsTests(SimpleTestCase):\n         )\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_swappable_cache_cleared(self):\n+        \"\"\"\n+        Test that get_swappable_settings_name cache is cleared by apps.clear_cache().\n+        \"\"\"\n+        # Ensure cache is set\n+        apps.get_swappable_settings_name(\"auth.User\")\n+        self.assertGreater(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+\n+        # Clear the cache\n+        apps.clear_cache()\n+\n+        # Ensure the cache is cleared\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+\n+    def test_cache_methods_unchanged(self):\n+        \"\"\"\n+        Test that other cache methods like get_models are properly cleared as well.\n+        \"\"\"\n+        apps.get_models()\n+        self.assertGreater(apps.get_models.cache_info().currsize, 0)\n+\n+        apps.clear_cache()\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n     def test_get_app_config(self):\n         \"\"\"\n         Tests apps.get_app_config().\n@@ -167,6 +216,29 @@ class AppsTests(SimpleTestCase):\n             apps.get_app_config(\"django.contrib.auth\")\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_swappable_cache_cleared(self):\n+        \"\"\"\n+        Test that get_swappable_settings_name cache is cleared by apps.clear_cache().\n+        \"\"\"\n+        # Ensure cache is set\n+        apps.get_swappable_settings_name(\"auth.User\")\n+        self.assertGreater(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+\n+        # Clear the cache\n+        apps.clear_cache()\n+\n+        # Ensure the cache is cleared\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+\n+    def test_cache_methods_unchanged(self):\n+        \"\"\"\n+        Test that other cache methods like get_models are properly cleared as well.\n+        \"\"\"\n+        apps.get_models()\n+        self.assertGreater(apps.get_models.cache_info().currsize, 0)\n+\n+        apps.clear_cache()\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n     def test_is_installed(self):\n         \"\"\"\n         Tests apps.is_installed().\n@@ -177,6 +249,29 @@ class AppsTests(SimpleTestCase):\n         self.assertIs(apps.is_installed(\"django.contrib.admindocs\"), False)\n \n     @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_swappable_cache_cleared(self):\n+        \"\"\"\n+        Test that get_swappable_settings_name cache is cleared by apps.clear_cache().\n+        \"\"\"\n+        # Ensure cache is set\n+        apps.get_swappable_settings_name(\"auth.User\")\n+        self.assertGreater(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+\n+        # Clear the cache\n+        apps.clear_cache()\n+\n+        # Ensure the cache is cleared\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+\n+    def test_cache_methods_unchanged(self):\n+        \"\"\"\n+        Test that other cache methods like get_models are properly cleared as well.\n+        \"\"\"\n+        apps.get_models()\n+        self.assertGreater(apps.get_models.cache_info().currsize, 0)\n+\n+        apps.clear_cache()\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n     def test_get_model(self):\n         \"\"\"\n         Tests apps.get_model().\n",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex a74680b..e707e0e 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -641,6 +641,32 @@ class MakeMigrationsTests(MigrationTestBase):\n                 allow_migrate.assert_called_with('other', 'migrations', model_name='UnicodeModel')\n                 self.assertEqual(ensure_schema.call_count, 4)\n \n+    def test_makemigrations_respects_model_limitations(self):\n+        \"\"\"\n+        Test that makemigrations only calls allow_migrate with models\n+        that belong to the specific app being processed.\n+        \"\"\"\n+        with self.settings(INSTALLED_APPS=['migrations', 'migrations2']):\n+\n+            # Mock the allow_migrate method of a router\n+            with mock.patch('django.db.migrations.MigrationRecorder.ensure_schema', return_value=None), \\\n+                 mock.patch('migrations.routers.TestRouter.allow_migrate', return_value=True) as allow_migrate:\n+\n+                # Call makemigrations with the 'migrations' app\n+                call_command('makemigrations', 'migrations', verbosity=0)\n+\n+                # Expect allow_migrate to have been called with models from 'migrations' only\n+                allow_migrate.assert_any_call('default', 'migrations', model_name='UnicodeModel')\n+\n+                # Ensure no incorrect combinations for the 'migrations2' app were called\n+                for call in allow_migrate.mock_calls:\n+                    _, args, kwargs = call\n+                    connection_alias, app_label = args\n+                    model_name = kwargs.get('model_name')\n+                    if app_label == 'migrations2':\n+                        # Assert that no models from 'migrations' were passed to 'migrations2' app\n+                        self.assertNotIn(model_name, ['UnicodeModel'])\n+\n     def test_failing_migration(self):\n         # If a migration fails to serialize, it shouldn't generate an empty file. #21280\n         apps.register_model('migrations', UnserializableModel)\n",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..e981647 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -297,8 +297,36 @@ class PaginationTests(SimpleTestCase):\n         with self.assertRaises(EmptyPage):\n             paginator.get_page(1)\n \n+class PaginatorIterationTests(TestCase):\n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n \n-class ModelPaginationTests(TestCase):\n+    def test_empty_paginator(self):\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_single_page(self):\n+        paginator = Paginator([1], 10)\n+        page_iterator = iter(paginator)\n+        self.assertEqual([1], list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_large_number_of_items(self):\n+        items = list(range(1, 101))\n+        paginator = Paginator(items, 10)\n+        page_iterator = iter(paginator)\n+        for i in range(10):\n+            with self.subTest(page=i+1):\n+                self.assertEqual(items[i*10:(i+1)*10], list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n     \"\"\"\n     Test pagination with Django model instances\n     \"\"\"\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..fa365df 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,33 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    # Test the edge case specified in the issue report\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_density_false():\n+    # Test to ensure that `range` is respected when `density=False`\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_manual_bins_density_true():\n+    # Test with manually specified bins and check with density=True\n+    _, bins, _ = plt.hist(np.random.rand(10), bins=5, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_range_manual_bins_density_false():\n+    # Test with manually specified bins and check with density=False\n+    _, bins, _ = plt.hist(np.random.rand(10), bins=5, range=(0, 1), density=False)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6393,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..a2956f7 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -930,6 +930,31 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (-3, 5)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    # Test inverting a logarithmic scale axis using set_ylim\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1)  # This should now correctly invert the axis\n+\n+    # Confirm that inverting it back works\n+    ax.set_ylim(1, 10)\n+    assert ax.get_ylim() == (1, 10)\n+\n+    # Further test with different limits\n+    ax.set_ylim(100, 0.1)\n+    assert ax.get_ylim() == (100, 0.1)\n+\n+    # Check similar behavior for x-axis\n+    ax.set_xscale(\"log\")\n+    ax.set_xlim(1000, 10)\n+    assert ax.get_xlim() == (1000, 10)\n+\n+    ax.set_xlim(10, 1000)\n+    assert ax.get_xlim() == (10, 1000)\n+\n+    plt.close()\n+\n     fig, ax = plt.subplots()\n     ax.invert_yaxis()\n     ax.plot([-5, -3, 2, 4], [1, 2, -3, 5])\n@@ -938,6 +963,31 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+def test_invert_log_scale_axis():\n+    # Test inverting a logarithmic scale axis using set_ylim\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(10, 1)\n+    assert ax.get_ylim() == (10, 1)  # This should now correctly invert the axis\n+\n+    # Confirm that inverting it back works\n+    ax.set_ylim(1, 10)\n+    assert ax.get_ylim() == (1, 10)\n+\n+    # Further test with different limits\n+    ax.set_ylim(100, 0.1)\n+    assert ax.get_ylim() == (100, 0.1)\n+\n+    # Check similar behavior for x-axis\n+    ax.set_xscale(\"log\")\n+    ax.set_xlim(1000, 10)\n+    assert ax.get_xlim() == (1000, 10)\n+\n+    ax.set_xlim(10, 1000)\n+    assert ax.get_xlim() == (10, 1000)\n+\n+    plt.close()\n+\n \n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..c02e77d 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,6 +6960,25 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear_subplot(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference plot without clearing\n+    axs = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    # Test plot with clearing\n+    axs = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n \n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..1e00080 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -308,7 +308,33 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n \n \n def test_hist():\n+    import pytest\n+    from matplotlib import MatplotlibDeprecationWarning\n+\n     fig, ax = plt.subplots()\n+\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Test to check that no deprecation warning is emitted when using empty data\n+    with category units.\n+    \"\"\"\n+    with pytest.warns(None) as record:\n+        f, ax = plt.subplots()\n+        ax.xaxis.update_units([\"a\", \"b\"])\n+        ax.plot([], [])\n+    \n+    # Check that no warnings of type MatplotlibDeprecationWarning were emitted\n+    for warning in record:\n+        assert not issubclass(warning.category, MatplotlibDeprecationWarning)\n+\n+def test_conversion_of_empty_data():\n+    \"\"\"\n+    Test to check that empty data conversion doesn't fail.\n+    \"\"\"\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    converted = ax.convert_xunits([])\n+    assert converted == []\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..925d45c 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -495,8 +495,37 @@ def test_keymaps():\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n \n-\n-def test_rcparams_reset_after_fail():\n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend\n+from matplotlib import rc_context\n+\n+def test_no_backend_reset_rccontext():\n+    assert mpl.rcParams['backend'] != 'module://aardvark'\n+    with mpl.rc_context():\n+        mpl.rcParams['backend'] = 'module://aardvark'\n+    assert mpl.rcParams['backend'] == 'module://aardvark'\n+\n+def test_get_backend_does_not_clear_figures():\n+    # Test the specific issue described.\n+    with rc_context():\n+        fig2 = plt.figure()\n+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+    get_backend()\n+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'\n+\n+    assert before == after, '\\n' + before + '\\n' + after\n+\n+    # Additional tests to ensure figures are not inadvertently removed\n+    fig1 = plt.figure()\n+    fig2_id = fig2.number\n+    fig1_id = fig1.number\n+    before = set(plt._pylab_helpers.Gcf.figs.keys())\n+    get_backend()\n+    after = set(plt._pylab_helpers.Gcf.figs.keys())\n+\n+    assert before == after, '\\n' + str(before) + '\\n' + str(after)\n+    assert fig2_id in after\n+    assert fig1_id in after\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n     # global rc parameters were left in a modified state.\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..59c210e 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -12,6 +12,8 @@ from matplotlib.testing.decorators import image_comparison, check_figures_equal\n from matplotlib.testing.widgets import mock_event\n from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n+import pytest\n+from matplotlib.testing.decorators import check_figures_equal\n \n import matplotlib.pyplot as plt\n import numpy as np\n@@ -20,8 +22,15 @@ import numpy as np\n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n-\n-def test_aspect_equal_error():\n+@check_figures_equal()\n+def test_invisible_3d_axes(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(111, projection='3d')\n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(False)\n+    \n+    ax_ref = fig_ref.add_subplot(111, projection='3d')\n+    ax_ref.scatter(1, 1, 1)\n+    ax_ref.set_visible(False)  # Ensuring the test is comparing the correct expected behavior\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..f9bae85 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -149,6 +149,37 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     assert rect_test.get_angle() == angle\n \n \n+import matplotlib.pyplot as plt\n+import matplotlib.patches as mpatches\n+import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n+from numpy.testing import assert_array_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_objects(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+    \n+    # Reference: Two rectangles with different dash offsets and styles\n+    ref_rect_1 = mpatches.Rectangle((0.1, 0.1), 0.4, 0.4,\n+                                    linewidth=4, edgecolor='r',\n+                                    linestyle=(0, (10, 10)))\n+    ref_rect_2 = mpatches.Rectangle((0.5, 0.5), 0.4, 0.4,\n+                                    linewidth=4, edgecolor='b',\n+                                    linestyle=(10, (10, 10)))\n+    ax_ref.add_patch(ref_rect_1)\n+    ax_ref.add_patch(ref_rect_2)\n+\n+    test_rect_1 = mpatches.Rectangle((0.1, 0.1), 0.4, 0.4,\n+                                     linewidth=4, edgecolor='r',\n+                                     linestyle=(0, (10, 10)))\n+    test_rect_2 = mpatches.Rectangle((0.5, 0.5), 0.4, 0.4,\n+                                     linewidth=4, edgecolor='b',\n+                                     linestyle=(10, (10, 10)))\n+\n+    ax_test.add_patch(test_rect_1)\n+    ax_test.add_patch(test_rect_2)\n+\n def test_negative_rect():\n     # These two rectangles have the same vertices, but starting from a\n     # different point.  (We also drop the last vertex, which is a duplicate.)\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..ce6f4af 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,22 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.patches import Rectangle\n+\n+\n+def test_stackplot_with_color_aliases():\n+    # Ensure that using color aliases works without affecting the Axes cycler\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    ax.plot([1, 3], [1, 3], color='C0')  # use color C0 from the cycler\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))  # use color C1\n+    ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])  # use color C2, C3, C4\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+    # Check that the color of the next plot is C0\n+    line, = ax.plot([1, 3], [3, 1])  # This should use color C0 if the cycler is not altered\n+    assert line.get_color() == 'C0', \"Color cycle was altered by stackplot\"\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..96244be 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -13,7 +13,7 @@ from matplotlib.backend_bases import MouseButton, MouseEvent\n \n from matplotlib.offsetbox import (\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n-    OffsetImage, TextArea, _get_packed_offsets)\n+    OffsetImage, TextArea, _get_packed_offsets, HPacker, VPacker)\n \n \n @image_comparison(['offsetbox_clipping'], remove_text=True)\n",
  "matplotlib__matplotlib-24627": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 35bc6ec..44ce753 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -8350,17 +8350,119 @@ def test_extent_units():\n     im = axs[0, 1].imshow(arr, origin='lower',\n                           extent=[date_first, date_last, 1, 11],\n                           cmap=mpl.colormaps[\"plasma\"])\n+\n+def test_cla_clears_children_axes_and_fig():\n+    import matplotlib.pyplot as plt\n+    fig, ax = plt.subplots()\n+    lines = ax.plot([0, 1], [0, 1], label='Line Plot')\n+    img = ax.imshow([[1]], label='Image')\n+    \n+    # Checking initial assignment\n+    for art in lines + [img]:\n+        assert art.axes is ax\n+        assert art.figure is fig\n+    \n+    # Clear the axes and check attributes\n+    ax.cla()\n+    for art in lines + [img]:\n+        assert art.axes is None\n+        assert art.figure is None\n+\n+def test_clf_clears_children_axes_and_fig():\n+    import matplotlib.pyplot as plt\n+    fig, ax = plt.subplots()\n+    lines = ax.plot([0, 1], [0, 1], label='Line Plot')\n+    img = ax.imshow([[1]], label='Image')\n+    \n+    # Checking initial assignment\n+    for art in lines + [img]:\n+        assert art.axes is ax\n+        assert art.figure is fig\n+    \n+    # Clear the figure and check attributes\n+    fig.clf()\n+    for art in lines + [img]:\n+        assert art.axes is None\n+        assert art.figure is None\n     axs[0, 1].xaxis.set_major_formatter(mdates.DateFormatter('%d'))\n \n     im = axs[1, 0].imshow(arr, origin='lower',\n                           extent=[date_first, date_last,\n                                   date_first, date_last],\n                           cmap=mpl.colormaps[\"plasma\"])\n+\n+def test_cla_clears_children_axes_and_fig():\n+    import matplotlib.pyplot as plt\n+    fig, ax = plt.subplots()\n+    lines = ax.plot([0, 1], [0, 1], label='Line Plot')\n+    img = ax.imshow([[1]], label='Image')\n+    \n+    # Checking initial assignment\n+    for art in lines + [img]:\n+        assert art.axes is ax\n+        assert art.figure is fig\n+    \n+    # Clear the axes and check attributes\n+    ax.cla()\n+    for art in lines + [img]:\n+        assert art.axes is None\n+        assert art.figure is None\n+\n+def test_clf_clears_children_axes_and_fig():\n+    import matplotlib.pyplot as plt\n+    fig, ax = plt.subplots()\n+    lines = ax.plot([0, 1], [0, 1], label='Line Plot')\n+    img = ax.imshow([[1]], label='Image')\n+    \n+    # Checking initial assignment\n+    for art in lines + [img]:\n+        assert art.axes is ax\n+        assert art.figure is fig\n+    \n+    # Clear the figure and check attributes\n+    fig.clf()\n+    for art in lines + [img]:\n+        assert art.axes is None\n+        assert art.figure is None\n     axs[1, 0].xaxis.set_major_formatter(mdates.DateFormatter('%d'))\n     axs[1, 0].set(xlabel='Day of Jan 2020')\n \n     im = axs[1, 1].imshow(arr, origin='lower',\n                           cmap=mpl.colormaps[\"plasma\"])\n+\n+def test_cla_clears_children_axes_and_fig():\n+    import matplotlib.pyplot as plt\n+    fig, ax = plt.subplots()\n+    lines = ax.plot([0, 1], [0, 1], label='Line Plot')\n+    img = ax.imshow([[1]], label='Image')\n+    \n+    # Checking initial assignment\n+    for art in lines + [img]:\n+        assert art.axes is ax\n+        assert art.figure is fig\n+    \n+    # Clear the axes and check attributes\n+    ax.cla()\n+    for art in lines + [img]:\n+        assert art.axes is None\n+        assert art.figure is None\n+\n+def test_clf_clears_children_axes_and_fig():\n+    import matplotlib.pyplot as plt\n+    fig, ax = plt.subplots()\n+    lines = ax.plot([0, 1], [0, 1], label='Line Plot')\n+    img = ax.imshow([[1]], label='Image')\n+    \n+    # Checking initial assignment\n+    for art in lines + [img]:\n+        assert art.axes is ax\n+        assert art.figure is fig\n+    \n+    # Clear the figure and check attributes\n+    fig.clf()\n+    for art in lines + [img]:\n+        assert art.axes is None\n+        assert art.figure is None\n     im.set_extent([date_last, date_first, date_last, date_first])\n     axs[1, 1].xaxis.set_major_formatter(mdates.DateFormatter('%d'))\n     axs[1, 1].set(xlabel='Day of Jan 2020')\n",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..9a54eb6 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -576,7 +576,63 @@ def test_svg_font_string(font_str, include_generic):\n         rest = rest + [generic]\n     plt.rcParams[f\"font.{generic}\"] = rest\n     plt.rcParams[\"font.size\"] = size\n-    plt.rcParams[\"svg.fonttype\"] = \"none\"\n+    import numpy as np\n+    from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+\n+    def test_annotationbbox_gid():\n+        # Test that object gid appears in the AnnotationBbox in output svg.\n+        fig = plt.figure()\n+        ax = fig.add_subplot()\n+        arr_img = np.ones((32, 32))\n+        xy = (0.3, 0.55)\n+    \n+        imagebox = OffsetImage(arr_img, zoom=0.1)\n+        imagebox.image.axes = ax\n+    \n+        ab = AnnotationBbox(imagebox, xy,\n+                            xybox=(120., -80.),\n+                            xycoords='data',\n+                            boxcoords=\"offset points\",\n+                            pad=0.5,\n+                            arrowprops=dict(\n+                                arrowstyle=\"->\",\n+                                connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                            )\n+        gid_label = \"a test for issue 20044\"\n+        ab.set_gid(gid_label)\n+        ax.add_artist(ab)\n+    \n+        with BytesIO() as fd:\n+            fig.savefig(fd, format='svg')\n+            buf = fd.getvalue().decode('utf-8')\n+    \n+        expected = f'<g id=\"{gid_label}\">'\n+        assert expected in buf\n+\n+    def test_annotationbbox_multiple_gids():\n+        # Test with multiple different GID values\n+        fig, ax = plt.subplots()\n+        arr_img1 = np.ones((16, 16))\n+        arr_img2 = np.ones((16, 16)) * 0.5\n+        xy1 = (0.2, 0.4)\n+        xy2 = (0.6, 0.8)\n+\n+        imagebox1 = OffsetImage(arr_img1, zoom=0.1)\n+        imagebox1.image.axes = ax\n+        ab1 = AnnotationBbox(imagebox1, xy1, gid='image1')\n+        ax.add_artist(ab1)\n+\n+        imagebox2 = OffsetImage(arr_img2, zoom=0.1)\n+        imagebox2.image.axes = ax\n+        ab2 = AnnotationBbox(imagebox2, xy2, gid='image2')\n+        ax.add_artist(ab2)\n+\n+        with BytesIO() as fd:\n+            fig.savefig(fd, format='svg')\n+            buf = fd.getvalue().decode('utf-8')\n+\n+        assert '<g id=\"image1\">' in buf\n+        assert '<g id=\"image2\">' in buf\n \n     fig, ax = plt.subplots()\n     if generic == \"sans-serif\":\n",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..c1ca79d 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -580,8 +580,41 @@ class TestSpectral:\n         # these should not be almost equal\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n+    import pytest\n+    from numpy.testing import assert_allclose, assert_array_equal\n+    import numpy as np\n+    import matplotlib.mlab as mlab\n+    from scipy import signal\n \n-    def test_psd_window_hanning(self):\n+    def test_psd_window_flattop(self):\n+        if self.NFFT_density is None:\n+            return\n+        # Create a flattop window\n+        win = signal.flattop(self.NFFT_density_real)\n+        \n+        spec, _ = mlab.psd(x=self.y,\n+                           NFFT=self.NFFT_density,\n+                           Fs=self.Fs,\n+                           noverlap=0,\n+                           sides=self.sides,\n+                           window=win,\n+                           scale_by_freq=True)\n+                           \n+        spec_uncorrected, _ = mlab.psd(x=self.y,\n+                                       NFFT=self.NFFT_density,\n+                                       Fs=self.Fs,\n+                                       noverlap=0,\n+                                       sides=self.sides,\n+                                       window=win,\n+                                       scale_by_freq=False)\n+                                       \n+        # Assert corrected and uncorrected PSD not almost equal\n+        with pytest.raises(AssertionError):\n+            assert_allclose(spec * (win**2).sum() / win.sum()**2, spec_uncorrected, atol=1e-08)\n+        \n+        # We expect the corrected power spectrum sum to be consistent\n+        expected_correction = (win**2).sum() / (win.sum()**2)\n+        assert abs(expected_correction - (np.abs(win).sum()**2) / win.sum()**2) > 1e-8\n         if self.NFFT_density is None:\n             return\n         ydata = np.arange(self.NFFT_density)\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..8917528 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,9 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..268d073 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,6 +90,27 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import pickletools\n+\n+@mpl.style.context(\"default\")\n+@check_figures_equal(extensions=[\"png\"])\n+def test_pickle_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [0, 1, 0], label='test')\n+    legend = ax.legend(draggable=True)\n+\n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+\n+    # Ensure no reference to FigureCanvasAgg in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    # Test if unpickling works without error\n+    loaded = pickle.loads(pkl)\n+    assert loaded is not None\n+\n+    plt.close(fig)\n+    plt.close(loaded)\n \n @mpl.style.context(\"default\")\n @check_figures_equal(extensions=[\"png\"])\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..70a2e35 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -43,6 +43,31 @@ def test_simple():\n     ax.set_yscale('log')\n     pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    # Align labels\n+    fig.align_labels()\n+\n+    # Write to a pickle object\n+    pkl = BytesIO()\n+    pickle.dump(fig, pkl, pickle.HIGHEST_PROTOCOL)\n+    loaded_fig = pickle.loads(pkl.getvalue())\n+    \n+    # Ensure we can use the loaded object\n+    loaded_fig.canvas.draw()\n+\n+    plt.close(loaded_fig)\n+\n \n def _generate_complete_test_figure(fig_ref):\n     fig_ref.set_size_inches((10, 6))\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..29a1cb3 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,79 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n \n-def test_hexbin_log_clim():\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+\n+def test_hexbin_mincnt_with_and_without_C():\n+    fig, axs = plt.subplots(2, 3, figsize=(15, 10))\n+    gridsize = (7, 7)\n+    extent = [-10., 10, -10., 10]\n+    datapoints = [\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = np.ones_like(X)\n+\n+    # Without C, with mincnt variations\n+    axs[0, 0].hexbin(X, Y, gridsize=gridsize, mincnt=0)\n+    axs[0, 1].hexbin(X, Y, gridsize=gridsize, mincnt=1)\n+    axs[0, 2].hexbin(X, Y, gridsize=gridsize, mincnt=2)\n+    axs[0, 0].set_title('Without C, mincnt=0')\n+    axs[0, 1].set_title('Without C, mincnt=1')\n+    axs[0, 2].set_title('Without C, mincnt=2')\n+\n+    # With C, with mincnt variations\n+    axs[1, 0].hexbin(X, Y, C=C, reduce_C_function=np.sum, gridsize=gridsize, mincnt=0)\n+    axs[1, 1].hexbin(X, Y, C=C, reduce_C_function=np.sum, gridsize=gridsize, mincnt=1)\n+    axs[1, 2].hexbin(X, Y, C=C, reduce_C_function=np.sum, gridsize=gridsize, mincnt=2)\n+    axs[1, 0].set_title('With C, mincnt=0')\n+    axs[1, 1].set_title('With C, mincnt=1')\n+    axs[1, 2].set_title('With C, mincnt=2')\n+\n+    fig.suptitle('Testing mincnt parameter of hexbin with and without C')\n+    plt.close(fig)\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..c043955 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -87,9 +87,42 @@ def test_contour_no_valid_levels():\n     ax.clabel(cs, fmt={100: '%1.2f'})\n     # no warning if z is uniform.\n     ax.contour(np.ones((9, 9)))\n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+from matplotlib import pyplot as plt\n+import numpy as np\n+import pytest\n+from matplotlib.path import Path\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_invalid(fig_test, fig_ref):\n+    cs = fig_test.subplots().contour([[0, 1], [1, 2]])\n+\n+    with pytest.raises(TypeError):\n+        # Assume that set_paths should raise an error when passed a non-list or non-path object\n+        cs.set_paths(\"invalid\")\n+\n+    with pytest.raises(TypeError):\n+        # Assume that set_paths should raise an error when passed a list with invalid items\n+        cs.set_paths([\"invalid\", None])\n+\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_transformed(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    cs_test = ax_test.contour([[0, 1], [1, 2]])\n+    cs_ref = ax_ref.contour([[0, 1], [1, 2]])\n+\n+    # Apply a rotation to the reference paths\n+    from matplotlib.transforms import Affine2D\n \n+    transform = Affine2D().rotate_deg(45)\n+    transformed_paths = [transform.transform_path(path) for path in cs_ref.get_paths()]\n+    cs_test.set_paths(transformed_paths)\n \n-def test_contour_Nlevels():\n+    # Since they are rotated, both should match in terms of transforms\n+    ax_test.set_title('Transformed Paths')\n+    ax_ref.set_title('Original Paths')\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n     z = np.arange(12).reshape((3, 4))\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..459736d 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,9 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+import pytest\n+import flask\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "diff --git a/requests/api.py b/requests/api.py\nindex 66d7f21..f7e0c7d 100644\n--- a/requests/api.py\n+++ b/requests/api.py\n@@ -11,8 +11,13 @@ This module implements the Requests API.\n \n \"\"\"\n \n+import os\n from . import sessions\n \n+def httpbin(endpoint):\n+    \"\"\"Helper function to return the full URL for an httpbin endpoint.\"\"\"\n+    return f\"http://httpbin.org/{endpoint}\"\n+\n \n def request(method, url, **kwargs):\n     \"\"\"Constructs and sends a :class:`Request <Request>`.\n",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..2ef683d 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,12 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),\n+            (InvalidURL, 'ftp://.example.com'),\n+            (InvalidURL, 'http://..com'),\n+            (InvalidURL, 'http://example..com'),\n+            (InvalidURL, 'http://*.example.com'),\n+            (InvalidURL, 'http://example.*.com'),\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..fb7b672 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2309,6 +2309,28 @@ class TestAsCompatibleData:\n         assert isinstance(orig._data, CustomIndexable)\n \n \n+import numpy as np\n+import pytest\n+from xarray import Variable\n+\n+def test_setitem_coercion_issue():\n+    # Setting item with a normal object and ensuring correct behavior\n+    good_indexed = Variable(dims=(\"dim_0\",), data=[None])\n+    good_indexed[{\"dim_0\": 0}] = set()\n+    assert good_indexed.data[0] == set()\n+\n+    # Class with a values attribute\n+    class HasValues:\n+        values = 5\n+    \n+    # Setting an item and ensuring no type coercion occurs\n+    bad_indexed = Variable(dims=(\"dim_0\",), data=[None])\n+    obj = HasValues()\n+    bad_indexed[{\"dim_0\": 0}] = obj\n+\n+    # Check that the object itself is stored, not its 'values' attribute\n+    assert bad_indexed.data[0] is obj\n+\n def test_raise_no_warning_for_nan_in_binary_ops():\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex 9329f73..8ccde46 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -491,6 +491,17 @@ class VariableSubclassobjects:\n                 assert (source_ndarray(v.values) is\n                         source_ndarray(w.values))\n         assert_identical(v, copy(v))\n+        \n+    def test_unicode_indices_copy(self):\n+        # Test for the regression described, ensuring unicode indices are not cast to objects.\n+        idx = IndexVariable(\"x\", np.array(['foo', 'bar'], dtype='<U3'))\n+        variable = self.cls('x', idx, {'foo': 'bar'})\n+        \n+        # Copy should retain the unicode type, not convert to object\n+        for deep in [True, False]:\n+            copied = variable.copy(deep=deep)\n+            assert copied.dtype == variable.dtype\n+            assert isinstance(copied._data, PandasIndexAdapter) or copied.dtype.kind == 'U'\n \n     def test_copy_index(self):\n         midx = pd.MultiIndex.from_product([['a', 'b'], [1, 2], [-1, -2]],\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..711bc0e 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -574,7 +574,33 @@ class TestCombineAuto:\n         def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n-    def test_infer_order_from_coords(self):\n+    def test_combine_by_coords_non_monotonic_identical_coordinates(self):\n+        # This test verifies the fix for non-monotonic identical coordinates\n+        # that should not raise an error in combine_by_coords.\n+\n+        ycoord = ['a', 'c', 'b']\n+\n+        data1 = np.random.rand(3, 3)\n+        data2 = np.random.rand(4, 3)\n+\n+        ds1 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data1)),\n+            coords=dict(x=[1, 2, 3], y=ycoord)\n+        )\n+\n+        ds2 = Dataset(\n+            data_vars=dict(data=(['x', 'y'], data2)),\n+            coords=dict(x=[4, 5, 6, 7], y=ycoord)\n+        )\n+\n+        combined_data = np.concatenate((data1, data2), axis=0)\n+        expected = Dataset(\n+            data_vars=dict(data=(['x', 'y'], combined_data)),\n+            coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord)\n+        )\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n         data = create_test_data()\n         objs = [data.isel(dim2=slice(4, 9)), data.isel(dim2=slice(4))]\n         actual = combine_by_coords(objs)\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..4b7cf71 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,6 +2310,28 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+        import numpy as np\n+        from collections import OrderedDict\n+\n+        # Original test case given in the issue\n+        da = xr.DataArray([0, 0], dims=\"x\", attrs={'units':'K'})\n+        out = da.quantile(.9, dim='x', keep_attrs=True)\n+        assert out.attrs == OrderedDict([('units', 'K')])\n+\n+        # Additional test cases for thorough testing\n+        # Test with different dimension and multiple quantiles\n+        da = xr.DataArray([[0, 1], [0, 2]], dims=(\"x\", \"y\"), attrs={'description': 'test array'})\n+        out = da.quantile([0.5, 0.9], dim='x', keep_attrs=True)\n+        assert out.attrs == OrderedDict([('description', 'test array')])\n+\n+        # Test with more complex attributes\n+        attrs = {'units': 'meters', 'standard_name': 'height'}\n+        da = xr.DataArray(np.random.rand(4, 3), dims=(\"time\", \"space\"), attrs=attrs)\n+        out = da.quantile(0.5, dim='time', keep_attrs=True)\n+        assert out.attrs == attrs\n+\n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n         vm = self.va.mean()\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..68bf36a 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,8 +1,10 @@\n+\n import numpy as np\n import pytest\n \n import xarray as xr\n from xarray.core import dtypes, merge\n+from xarray.testing import assert_identical\n \n from . import raises_regex\n from .test_dataset import create_test_data\n@@ -159,7 +161,33 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n-    def test_merge_broadcast_equals(self):\n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        expected = xr.merge([ds, da])\n+        assert_identical(ds.merge(da), expected)\n+\n+    def test_merge_dataarray_with_coords(self):\n+        ds = xr.Dataset({\"a\": (\"x\", [1, 2, 3])}, coords={\"x\": [0, 1, 2]})\n+        da = xr.DataArray([4, 5, 6], dims=\"x\", coords={\"x\": [1, 2, 3]}, name=\"b\")\n+\n+        expected = xr.merge([ds, da])\n+        assert_identical(ds.merge(da), expected)\n+\n+    def test_merge_dataarray_different_dims(self):\n+        ds = xr.Dataset({\"a\": (\"x\", [1, 2, 3]), \"x\": [0, 1, 2]})\n+        da = xr.DataArray([4, 5, 6], dims=\"y\", name=\"b\")\n+\n+        expected = xr.merge([ds, da])\n+        assert_identical(ds.merge(da), expected)\n+\n+    def test_merge_dataarray_multidim(self):\n+        ds = xr.Dataset({\"a\": ([\"x\", \"y\"], [[1, 2], [3, 4]])})\n+        da = xr.DataArray([[5, 6], [7, 8]], dims=[\"x\", \"y\"], name=\"b\")\n+\n+        expected = xr.merge([ds, da])\n+        assert_identical(ds.merge(da), expected)\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n         actual = ds1.merge(ds2)\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..800ff80 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -119,7 +119,19 @@ class TestMergeFunction:\n         expected = xr.Dataset({\"x\": [12], \"y\": (\"x\", [13])})\n         assert actual.identical(expected)\n \n-    def test_merge_error(self):\n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"a\": \"b\"})\n+        ds2 = xr.Dataset(attrs={\"a\": \"c\"})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        \n+        # Modify the attribute of the merged dataset\n+        ds3.attrs[\"a\"] = \"d\"\n+        \n+        # Assert attributes of the original datasets remain unchanged\n+        assert ds1.attrs[\"a\"] == \"b\"\n+        assert ds2.attrs[\"a\"] == \"c\"\n+        # Assert the modification in the merged dataset is correct\n+        assert ds3.attrs[\"a\"] == \"d\"\n         ds = xr.Dataset({\"x\": 0})\n         with pytest.raises(xr.MergeError):\n             xr.merge([ds, ds + 1])\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..0a6b22b 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,19 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # Check attribute preservation when `keep_attrs=False` (default)\n+    actual_no_attrs = xr.where(cond, x, y)\n+    expected_no_attrs = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected_no_attrs, actual_no_attrs)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..51b8757 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -13,6 +13,19 @@ from . import assert_allclose, assert_equal, assert_identical, requires_dask\n with suppress(ImportError):\n     import dask.array as da\n \n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_signed_from_unsigned_via_pydap(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([np.iinfo(signed_dtype).min], dtype=signed_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == signed_dtype\n+    assert np.array_equal(decoded.values, original_values)\n+\n \n def test_CFMaskCoder_decode():\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..012b05f 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1929,6 +1929,13 @@ def test_where_attrs() -> None:\n     assert_identical(expected, actual)\n \n \n+\n+def test_where_attrs_scalar() -> None:\n+    cond = xr.DataArray([True, False, True], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\", attrs={})  # Expecting no attrs from scalar\n+    assert_identical(expected, actual)\n+\n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n def test_polyval(use_dask, use_datetime) -> None:\n",
  "pydata__xarray-6599": "",
  "pydata__xarray-6721": "",
  "pydata__xarray-6744": "",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..1e3ddb6 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -692,8 +692,21 @@ def test_safe_cast_to_index_cftimeindex():\n @requires_cftime\n def test_safe_cast_to_index_datetime_datetime():\n     dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import numpy as np\n+import xarray as xr\n+\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n \n+def test_stack_int32_remains_int32():\n+    ds = xr.Dataset(coords={'a': np.array([0], dtype='i4')})\n+    stacked = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked['a'].values.dtype\n     expected = pd.Index(dates)\n     actual = safe_cast_to_index(np.array(dates))\n     assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+    assert isinstance(actual, pd.Index)\n",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..93a90ab 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,15 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import pytest\n+from pytest import CaptureFixture\n+from pylint.lint import Run\n+\n+EMPTY_MODULE = \"test_module.py\"  # Assuming a placeholder path for an empty module for testing\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..b62ed64 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,7 +1233,27 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n-    def test_recursive(self):\n+    @pytest.mark.parametrize(\"ignore_option, ignore_value\", [\n+        (\"--ignore\", \".a\"),\n+        (\"--ignore-patterns\", \"^\\\\.a\"),\n+        (\"--ignore-paths\", \"\\\\..*/foo.py\"),\n+    ])\n+    def test_pylint_ignore_recursive(self, ignore_option, ignore_value):\n+        \"\"\"Test that `pylint` respects ignore options in recursive mode.\"\"\"\n+        result = self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                ignore_option,\n+                ignore_value\n+            ],\n+            code=0,\n+        )\n+\n+        # Assuming there's a '.a/foo.py' file in the 'directory' that would yield lint errors\n+        ignored_file_path = join(HERE, \"regrtest_data\", \"directory\", \".a\", \"foo.py\")\n+        linted_files = result.linted_files\n+        assert ignored_file_path not in linted_files\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n             code=0,\n",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..ba4c5a3 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1324,9 +1324,29 @@ class TestRunTC:\n                 if not os.path.basename(path) == \"regrtest_data\"\n             ]\n             with _test_cwd():\n-                os.chdir(join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"))\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n                 self._runtest(\n-                    [\".\", \"--recursive=y\"],\n+                    [\".\", \"--recursive=y\", \"--ignore-paths=^subdirectory/.*\"],\n+                    code=0,\n+                )\n+\n+    def test_ignore_paths_recursive_with_ignored_paths(self) -> None:\n+        \"\"\"Test that `--ignore-paths` is respected when `--recursive=y` is used.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                # Expect 'ignored_subdirectory' is ignored\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n                     code=0,\n                 )\n \n",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..f821ddd 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -751,6 +751,29 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n             \"/usr/local/lib/python3.9/lib-dynload\",\n             \"/usr/local/lib/python3.9/site-packages\",\n         ]\n+\n+        # Test case 1: First entry is an empty string - should be removed\n+        paths = [\"\", \"/usr/local/lib/python3.9\", *default_paths]\n+        sys.path = copy(paths)\n+        with _test_environ_pythonpath():\n+            modify_sys_path()\n+        assert sys.path == paths[1:]\n+\n+        # Test case 2: First entry is the current directory - should be removed\n+        with patch(\"os.getcwd\") as mock_getcwd:\n+            mock_getcwd.return_value = paths[1]\n+            paths = [paths[1], *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:]\n+\n+        # Test case 3: First entry is neither \"\", \".\", nor os.getcwd() - should not be removed\n+        paths = [\"/not_remove\", \"/usr/local/lib/python3.9\", *default_paths]\n+        sys.path = copy(paths)\n+        with _test_environ_pythonpath():\n+            modify_sys_path()\n+        assert sys.path == paths\n         with _test_sys_path(), patch(\"os.getcwd\") as mock_getcwd:\n             mock_getcwd.return_value = cwd\n             paths = [cwd, *default_paths]\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..85d8060 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,8 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n@@ -172,6 +174,28 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n \n+def test_consistency_between_records_and_get_records(caplog):\n+    # Test to verify the consistency between caplog.records and caplog.get_records\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    # Initial consistency check\n+    verify_consistency()\n+    \n+    # Logging a message and verifying consistency\n+    logging.warning(\"test warning\")\n+    verify_consistency()\n+\n+    # Clearing caplog and re-checking consistency\n+    caplog.clear()\n+    verify_consistency()\n+    \n+    # Logging another message after clearing and verifying\n+    logging.info(\"test info after clear\")\n+    verify_consistency()\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"test info after clear\"]\n+\n+\n def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n     pytester.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..4d9d9f7 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1270,6 +1270,28 @@ def test_pdb_teardown_skipped(\n         )\n     )\n     result = pytester.runpytest_inprocess(\"--pdb\")\n+\n+    # Check specifically for unittest.skip on the class level with --pdb\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        @unittest.skip(\"skipped for test\")\n+        class SkippedClassTest(unittest.TestCase):\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_1(self):\n+                pass\n+        \"\"\"\n+    )\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    assert tracked == []\n     result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n     assert tracked == []\n \n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..0763675 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1051,9 +1051,40 @@ class TestFDCapture(object):\n             cap.done()\n             pytest.raises(AttributeError, cap.suspend)\n \n+def test_encoded_file_write_str():\n+    \"\"\"Test that EncodedFile writes str objects successfully.\"\"\"\n+    import sys\n+    from _pytest.capture import EncodedFile\n+    import io\n \n-@contextlib.contextmanager\n-def saved_fd(fd):\n+    buffer = io.StringIO()\n+    enc_file = EncodedFile(buffer, \"utf-8\")\n+\n+    # Attempt to write a string\n+    try:\n+        enc_file.write(\"test string\")\n+        assert buffer.getvalue() == \"test string\"\n+    except TypeError:\n+        pytest.fail(\"EncodedFile should accept str objects for writing\")\n+\n+def test_encoded_file_write_bytes():\n+    \"\"\"Test that EncodedFile raises TypeError when writing bytes.\"\"\"\n+    import sys\n+    from _pytest.capture import EncodedFile\n+    import io\n+\n+    buffer = io.StringIO()\n+    enc_file = EncodedFile(buffer, \"utf-8\")\n+\n+    # Attempt to write bytes, should raise TypeError\n+    with pytest.raises(TypeError, match=\"must be str, not bytes\"):\n+        enc_file.write(b\"test bytes\")\n+\n+def test_encoded_file_mode_does_not_include_b():\n+    \"\"\"Test that sys.stdout.mode does not include 'b'.\"\"\"\n+    import sys\n+    _, sys_stdout = capfd.readouterr()\n+    assert \"b\" not in sys_stdout.mode\n     new_fd = os.dup(fd)\n     try:\n         yield\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex e422b03..a50598d 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -5,7 +5,9 @@ import textwrap\n \n import py\n \n+import numpy as np\n import pytest\n+from unittest.mock import patch\n from _pytest.main import _in_venv\n from _pytest.main import ExitCode\n from _pytest.main import Session\n@@ -66,7 +68,21 @@ class TestCollector:\n         parent = fn.getparent(pytest.Class)\n         assert parent is cls\n \n-    def test_getcustomfile_roundtrip(self, testdir):\n+    def test_patch_with_numpy_array(self, testdir):\n+        \"\"\"Ensure patching with numpy arrays works without ValueError.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            import numpy as np\n+            from unittest.mock import patch\n+            class SomeClass:\n+                VALUE = np.array([1, 2, 3])\n+            @patch.object(SomeClass, 'VALUE', new=np.array([-5.5, 3.0]))\n+            def test_func():\n+                assert (SomeClass.VALUE == np.array([-5.5, 3.0])).all()\n+            \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=1)\n         hello = testdir.makefile(\".xxx\", hello=\"world\")\n         testdir.makepyfile(\n             conftest=\"\"\"\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..6b8e678 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -116,8 +116,11 @@ class TestPaste(object):\n             monkeypatch.setattr(urllib, \"urlopen\", mocked)\n         else:\n             import urllib.request\n+        import urllib\n+        from unittest import mock\n \n-            monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n+        # Mock urlopen to simulate different responses\n+        monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n         return calls\n \n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n@@ -126,8 +129,8 @@ class TestPaste(object):\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n+        # Confirm the lexer is now set to \"text\"\n         assert url == \"https://bpaste.net\"\n-        assert \"lexer=%s\" % lexer in data.decode()\n+        assert \"lexer=text\" in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..39c1e75 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -703,6 +703,29 @@ class Test_genitems:\n         assert items[2].name == \"testmethod_one\"\n \n         # let's also test getmodpath here\n+        import pytest\n+\n+        @pytest.mark.parametrize(\"test_input,expected\", [\n+            (\"..[\", \"testmethod_two[..[\"),\n+            (\".[[\", \"testmethod_two[.[[\"),\n+            (\"..[[\", \"testmethod_two[..[[\"),\n+            (\"a..[b..[\", \"testmethod_two[a..[b..[\"),\n+            (\"..[..[\", \"testmethod_two[..[..[\"),\n+        ])\n+        def test_getmodpath_issue(testdir, test_input, expected):\n+            p = testdir.makepyfile(\n+            f\"\"\"\n+            import pytest\n+\n+            @pytest.mark.parametrize(\"arg0\", [\"{test_input}\"])\n+            def testmethod_two(self, arg0):\n+                pass\n+            \"\"\"\n+            )\n+            items, reprec = testdir.inline_genitems(p)\n+            assert len(items) == 1\n+            assert items[0].name == f\"testmethod_two[{test_input}]\"\n+            assert items[0].getmodpath() == expected\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n         assert items[2].getmodpath() == \"TestY.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/src/_pytest/setuponly.py b/src/_pytest/setuponly.py\nindex 7d5414b..9e40039 100644\n--- a/src/_pytest/setuponly.py\n+++ b/src/_pytest/setuponly.py\n@@ -66,7 +66,7 @@ def _show_fixture_action(fixturedef, msg):\n             tw.write(\" (fixtures used: {})\".format(\", \".join(deps)))\n \n     if hasattr(fixturedef, \"cached_param\"):\n-        tw.write(\"[{}]\".format(fixturedef.cached_param))\n+        tw.write(\"[{}]\".format(repr(fixturedef.cached_param)))\n \n     tw.flush()\n \n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..ecaae86 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -235,7 +235,22 @@ class TestXFail:\n             [\"*def test_func():*\", \"*assert 0*\", \"*1 failed*1 pass*\"]\n         )\n \n-    def test_xfail_evalfalse_but_fails(self, testdir):\n+    def test_skip_location_with_runxfail(self, testdir):\n+        testdir.makepyfile(\n+            test_sample=\"\"\"\n+            import pytest\n+\n+            @pytest.mark.skip\n+            def test_something():\n+                assert 0\n+            \"\"\"\n+        )\n+        # Run with --runxfail and -rs to check location of skip\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\n+            \"SKIPPED [1] test_sample.py:3: unconditional skip\",  # Expecting correct location\n+            \"*1 skipped*\"\n+        ])\n         item = testdir.getitem(\n             \"\"\"\n             import pytest\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..cb23dc3 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -359,6 +360,31 @@ class TestXFail:\n         result = testdir.runpytest(p, \"--runxfail\")\n         result.stdout.fnmatch_lines([\"*1 pass*\"])\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Test for Issue #7486: Dynamically setting xfail should mark test as xfailed if it fails.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_strict(self, testdir: Testdir) -> None:\n+        # Test for Issue #7486: A test that passes even with a strict xfail marker should fail.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     def test_xfail_imperative_in_setup_function(self, testdir):\n         p = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..14e588a 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,8 +513,11 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n-\n-    def test_capfdbinary(self, testdir):\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, capfd, nl):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out.endswith(nl)\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n             def test_hello(capfdbinary):\n",
  "pytest-dev__pytest-7571": "",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..7f6991b 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,4 +1,24 @@\n+\n import os\n+def test_collect_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory is collected.\"\"\"\n+    dir = pytester.mkdir(\"dir\")\n+    dir.joinpath(\"test_it.py\").write_text(\"def test_it(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_collect_nested_symlink_dir(pytester: Pytester) -> None:\n+    \"\"\"Nested symlinked directories are collected.\"\"\"\n+    parent_dir = pytester.mkdir(\"parent_dir\")\n+    nested_dir = parent_dir.mkdir(\"nested_dir\")\n+    nested_dir.joinpath(\"test_nested.py\").write_text(\"def test_nested(): pass\", \"utf-8\")\n+\n+    pytester.path.joinpath(\"symlink_to_parent\").symlink_to(parent_dir)\n+\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n import pprint\n import sys\n import textwrap\n@@ -9,7 +29,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..4d8f0cf 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,6 +301,35 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_fixtures_unittest_setUpClass(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class SampleTest(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+\n+            def test_example(self):\n+                assert True\n+\n+            @classmethod\n+            def tearDownClass(cls):\n+                pass\n+        \"\"\"\n+    )\n+    \n+    # Scenario 1: Check fixtures without verbosity, expecting no undocumented fixtures to be shown\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*no docstring available*\")\n+    \n+    # Scenario 2: Check fixtures with verbosity, expecting the \"no docstring available\" fixture message\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*no docstring available*\"])\n+\n \n def test_setup_class(pytester: Pytester) -> None:\n     testpath = pytester.makepyfile(\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..91fbaea 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,6 +574,36 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n+import numpy as np\n+from sklearn.linear_model import RidgeClassifierCV\n+\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values attribute.\n+    rng = np.random.RandomState(42)\n+\n+    x = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+\n+    # with len(y.shape) == 1 (binary classification)\n+    n_targets = 1\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_alphas)\n+\n+    # Test with multi-target\n+    y = np.array([[1, 1, 1, -1, -1],\n+                  [1, -1, 1, -1, 1],\n+                  [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y.shape[1]\n+    r.fit(x, y)\n+    assert r.cv_values_.shape == (n_samples, n_targets, n_alphas)\n+    \n def test_ridgecv_store_cv_values():\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..a06eb15 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,16 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+from sklearn.metrics.cluster import fowlkes_mallows_score\n+from numpy.testing import assert_raises\n+import numpy as np\n+\n+def test_int_overflow_fowlkes_mallows_score():\n+    # Intentionally create a large contingency matrix to test for integer overflow\n+    labels_true = [1] * 50000 + [2] * 40000 + [3] * 10000\n+    labels_pred = [1] * 45000 + [2] * 25000 + [3] * 15000 + [4] * 15000\n+    # Expect no warnings or errors\n+    assert np.isfinite(fowlkes_mallows_score(labels_true, labels_pred))\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..c7ecd20 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -558,7 +558,25 @@ def test_feature_names():\n     for idx, name in enumerate(feature_names):\n         assert_equal(idx, cv.vocabulary_.get(name))\n \n-\n+def test_countvectorizer_with_provided_vocabulary():\n+    # Test with a manually specified vocabulary\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    cv = CountVectorizer(vocabulary=vocab)\n+    \n+    # Verify that get_feature_names does not raise an error\n+    feature_names = cv.get_feature_names()\n+    assert_array_equal(['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this'], feature_names)\n+    \n+    # Test transformation without prior fitting\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+    X = cv.transform(corpus)\n+    assert_equal(X.shape, (4, 9))  # 4 documents, 9 features\n+    \n def test_vectorizer_max_features():\n     vec_factories = (\n         CountVectorizer,\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..c1a2c9b 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1151,6 +1151,11 @@ def test_search_cv_results_none_param():\n \n @ignore_warnings()\n def test_search_cv_timing():\n+    # Ensure refit_time_ is captured correctly\n+    from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n+    from sklearn.svm import LinearSVC\n+    import numpy as np\n+    from sklearn.utils._testing import assert_true\n     svc = LinearSVC(random_state=0)\n \n     X = [[1, ], [2, ], [3, ], [4, ]]\n@@ -1172,6 +1177,10 @@ def test_search_cv_timing():\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n+    for search in [gs, rs]:\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n \n def test_grid_search_correct_score_results():\n     # test that correct scores are used\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..f8f2884 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -491,8 +491,38 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n+from sklearn.utils.extmath import softmax\n+from sklearn.metrics import log_loss\n \n-def test_multinomial_logistic_regression_string_inputs():\n+def test_logistic_regressioncv_multinomial_predict_proba():\n+    # Test LogisticRegressionCV with multi_class='multinomial' uses softmax\n+    n_samples, n_features, n_classes = 100, 5, 3\n+    X, y = make_classification(n_samples=n_samples, n_features=n_features,\n+                               n_classes=n_classes, n_informative=3, \n+                               random_state=42)\n+    \n+    model = LogisticRegressionCV(multi_class='multinomial', solver='lbfgs', random_state=42)\n+    model.fit(X, y)\n+    probs = model.predict_proba(X)\n+    \n+    # Define coefs and intercepts similar to the trained model\n+    coefs = model.coef_\n+    intercepts = model.intercept_\n+    \n+    # Calculate decision function\n+    decision_function = np.dot(X, coefs.T) + intercepts\n+    expected_probs = softmax(decision_function)\n+    \n+    # Assert the probabilities from predict_proba match those from softmax\n+    assert_array_almost_equal(probs, expected_probs)\n+\n+    # Calculate log loss with softmax probabilities\n+    calculated_log_loss = log_loss(y, expected_probs)\n+    scorer = get_scorer('neg_log_loss')\n+    log_loss_cv_score = scorer(model, X, y)\n+    \n+    # Assert calculated log loss matches score from LogisticRegressionCV\n+    assert_almost_equal(-calculated_log_loss, log_loss_cv_score)\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..e08df4d 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -167,7 +167,20 @@ def test_clone_sparse_matrices():\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n \n-def test_repr():\n+from sklearn.base import BaseEstimator\n+from sklearn.base import clone\n+\n+class MyEstimator(BaseEstimator):\n+    def __init__(self, empty=None):\n+        self.empty = empty\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than\n+    # instances\n+    clf = MyEstimator(empty=MyEstimator)\n+    clf2 = clone(clf)\n+\n+    assert clf.empty is clf2.empty\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\n     repr(my_estimator)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..b5f40be 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -19,14 +19,36 @@ from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import LassoLarsIC\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n \n # TODO: use another dataset that has multiple drops\n-\n-\n-def test_simple():\n+@pytest.mark.parametrize('copy_X_init, copy_X_fit, expected', [\n+    (True, None, True),\n+    (False, None, False),\n+    (True, True, True),\n+    (False, True, True),\n+    (True, False, False),\n+    (False, False, False),\n+])\n+def test_lasso_larsic_fit_copyX_parameter_resolution(copy_X_init, copy_X_fit, expected):\n+    \"\"\"Test that 'copy_X' parameter resolution between constructor and fit method works as intended.\"\"\"\n+    lasso_lars = LassoLarsIC(copy_X=copy_X_init, precompute=False)\n+    rng = np.random.RandomState(0)\n+    X = rng.normal(0, 1, (100, 5))\n+    X_copy = X.copy()\n+    y = X[:, 2]\n+    if copy_X_fit is None:\n+        lasso_lars.fit(X, y)\n+    else:\n+        lasso_lars.fit(X, y, copy_X=copy_X_fit)\n+    assert expected == np.array_equal(X, X_copy)\n+\n+\n+@pytest.mark.parametrize('copy_X', [True, False])\n+def test_lasso_lars_copyX_behaviour(copy_X):\n     # Principle of Lars is to keep covariances tied and decreasing\n \n     # also test verbose output\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..0883107 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -493,6 +493,28 @@ def test_shuffle_stratifiedkfold():\n         assert_not_equal(set(test0), set(test1))\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n+    # Additional test cases to verify StratifiedKFold shuffling logic\n+    X = np.arange(20)\n+    y = np.array([0] * 10 + [1] * 10)\n+    seeds = [1, 42, 999]\n+    \n+    test_sets = []\n+    for seed in seeds:\n+        kf = StratifiedKFold(n_splits=10, shuffle=True, random_state=seed)\n+        test_sets.append([sorted(test) for _, test in kf.split(X, y)])\n+\n+    for i in range(len(test_sets) - 1):\n+        for ts1, ts2 in zip(test_sets[i], test_sets[i + 1]):\n+            assert ts1 != ts2  \n+\n+    # Ensure StratifiedKFold is functioning correctly when shuffle=False\n+    kf_no_shuffle = StratifiedKFold(n_splits=10, shuffle=False)\n+    kf_no_shuffle_sets = [sorted(test) for _, test in kf_no_shuffle.split(X, y)]\n+    \n+    # Expecting the same stratified split when random_state and shuffle are the same.\n+    for _, test_no_shuffle in kf_no_shuffle.split(X, y):\n+        assert sorted(test_no_shuffle) in kf_no_shuffle_sets\n+\n \n def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n     # The digits samples are dependent: they are apparently grouped by authors\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..dd19bb4 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -183,6 +183,10 @@ def test_invalid_strategy_option():\n                          \"Got strategy='invalid-strategy' instead.\",\n                          est.fit, X)\n \n+import pytest\n+import numpy as np\n+from numpy.testing import assert_array_equal\n+from sklearn.preprocessing import KBinsDiscretizer\n \n @pytest.mark.parametrize(\n     'strategy, expected_2bins, expected_3bins',\n@@ -203,6 +207,18 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n \n+def test_kmeans_strategy_with_high_bins():\n+    \"\"\"Test KBinsDiscretizer with kmeans strategy and high n_bins value.\"\"\"\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+\n+    # Test with kmeans strategy and 5 bins (close to the number of data points)\n+    est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')\n+    Xt = est.fit_transform(X)\n+\n+    # We check that no error is raised and output is as expected\n+    expected_output = [0, 0, 1, 2, 3, 4]\n+    assert_array_equal(expected_output, Xt.ravel())\n+\n @pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n @pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n def test_inverse_transform(strategy, encode):\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..ed97fbe 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -598,6 +598,16 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n \n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Verify that fit_predict is consistent with fit followed by predict, even with n_init > 1\n+    rng = np.random.RandomState(0)\n+    X = rng.randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=10, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+\n+\n def test_gaussian_mixture_fit():\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..44fddd3 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -503,7 +503,41 @@ def test_transform():\n     assert_array_equal(eclf3.transform(X).shape, (3, 4, 2))\n     assert_array_almost_equal(eclf1.transform(X),\n                               eclf2.transform(X))\n+\n+\n+@pytest.mark.parametrize(\n+    \"X, y, voter_cls, estimators\",\n+    [\n+        (X, y, VotingClassifier, [\n+            ('lr', LogisticRegression()),\n+            ('rf', RandomForestClassifier(n_estimators=5))\n+        ]),\n+        (X_r, y_r, VotingRegressor, [\n+            ('lr', LinearRegression()),\n+            ('rf', RandomForestRegressor(n_estimators=5))\n+        ])\n+    ]\n+)\n+def test_none_estimator_with_weights_extended(X, y, voter_cls, estimators):\n+    # Check that an estimator can be set to None and that weights are correctly managed\n+    voter = voter_cls(estimators=estimators)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X, y, sample_weight=np.ones(y.shape))\n+    y_pred = voter.predict(X)\n+    assert y_pred.shape == y.shape\n+\n+    # New test: Ensure it raises the proper error when all estimators are None\n+    voter.set_params(**{name: None for name, _ in estimators})\n+    with pytest.raises(ValueError, match='All estimators are None. At least one is required!'):\n+        voter.fit(X, y, sample_weight=np.ones(y.shape))\n+\n+    # New test: Ensure that when sample_weight is None, it should still work\n+    voter.set_params(lr=LogisticRegression())\n+    voter.fit(X, y)\n+    y_pred_none_weight = voter.predict(X)\n+    assert y_pred_none_weight.shape == y.shape\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..898b1a2 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -327,8 +327,32 @@ def test_export_text_errors():\n                          \"spacing must be > 0, given 0\",\n                          export_text, clf, spacing=0)\n \n+def test_export_text_single_feature():\n+    # Test for the export_text function for a decision tree trained on a single feature\n+    from sklearn.tree import DecisionTreeClassifier\n+    from sklearn.tree import export_text\n+    from sklearn.datasets import load_iris\n+    \n+    # Load iris dataset and use only one feature\n+    X, y = load_iris(return_X_y=True)\n+    X = X[:, 0].reshape(-1, 1)\n+\n+    # Train the decision tree classifier\n+    tree = DecisionTreeClassifier(random_state=0)\n+    tree.fit(X, y)\n+\n+    # Expected tree structure\n+    expected_report = dedent(\"\"\"\\\n+    |--- sepal_length <= 5.45\n+    |   |--- class: 0\n+    |--- sepal_length >  5.45\n+    |   |--- class: 1\n+    \"\"\").strip()\n \n-def test_export_text():\n+    # Verify that export_text works without errors\n+    result = export_text(tree, feature_names=['sepal_length'])\n+    print(result)\n+    assert result == expected_report\n     clf = DecisionTreeClassifier(max_depth=2, random_state=0)\n     clf.fit(X, y)\n \n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..5ba9fb7 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1531,8 +1531,42 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_train) == gs.predict(X_train)).mean() >= .8\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n+import pytest\n+import numpy as np\n+from sklearn.linear_model import LogisticRegressionCV\n+from sklearn.datasets import make_classification\n \n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n+@pytest.mark.parametrize('penalty', ('l2', 'elasticnet'))\n+@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial', 'auto'))\n+def test_LogisticRegressionCV_no_refit_penalty_multi_class(penalty, multi_class):\n+    # Generate a simple classification dataset\n+    X, y = make_classification(n_samples=200, n_features=20, n_classes=3, random_state=42)\n+\n+    # Check a range of C values\n+    Cs = np.logspace(-4, 4, 3)\n+\n+    # Define l1_ratios if penalty is 'elasticnet'\n+    if penalty == 'elasticnet':\n+        l1_ratios = np.linspace(0, 1, 2)\n+    else:\n+        l1_ratios = None\n+\n+    # Initialize LogisticRegressionCV with refit=False\n+    lrcv = LogisticRegressionCV(penalty=penalty, Cs=Cs, solver='saga',\n+                                l1_ratios=l1_ratios, random_state=0,\n+                                multi_class=multi_class, refit=False)\n+    # Fit the model and assert no error occurs\n+    lrcv.fit(X, y)\n+\n+    # Verify the dimensions of C_ and l1_ratio_ if applicable\n+    n_classes = len(np.unique(y))\n+    assert lrcv.C_.shape == (n_classes,)\n+    if penalty == 'elasticnet':\n+        assert lrcv.l1_ratio_.shape == (n_classes,)\n+        assert hasattr(lrcv, 'l1_ratio_')\n+    assert hasattr(lrcv, 'C_')\n+    assert hasattr(lrcv, 'coef_')\n+    assert lrcv.coef_.shape[1] == X.shape[1]\n def test_LogisticRegressionCV_no_refit(multi_class):\n     # Test LogisticRegressionCV attribute shapes when refit is False\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..3f55d93 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -26,8 +26,19 @@ def test_get_deps_info():\n \n \n def test_show_versions_with_blas(capsys):\n+    # Test to check if 'joblib' is included in the output of show_versions\n+    show_versions()\n+    out, err = capsys.readouterr()\n+    assert 'joblib' in out\n+\n+\n+def test_get_deps_info_with_joblib():\n+    # Test to check if 'joblib' is included in the dependencies info\n+    deps_info = _get_deps_info()\n+\n+    assert 'joblib' in deps_info\n     show_versions()\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..cecc8c6 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -77,8 +77,15 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n \n     assert_array_equal(labels, expected)\n \n+def test_optics_min_samples_float():\n+    # Test that OPTICS handles float min_samples by rounding to closest integer\n \n-def test_extract_xi():\n+    # Simple test dataset\n+    X, _ = make_blobs(n_samples=50, centers=3, cluster_std=0.5, random_state=42)\n+\n+    # Test with min_samples as a float\n+    clust = OPTICS(min_samples=0.1, metric='minkowski').fit(X)\n+    assert clust is not None, \"OPTICS clustering failed with float min_samples\"\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "diff --git a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\nindex 7e8bccd..0ffde1a 100644\n--- a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n@@ -409,9 +409,41 @@ def test_infinite_values_missing_values():\n     X = np.asarray([-np.inf, 0, 1, np.inf, np.nan]).reshape(-1, 1)\n     y_isnan = np.isnan(X.ravel())\n     y_isinf = X.ravel() == np.inf\n+import pytest\n+import numpy as np\n+from sklearn.experimental import enable_hist_gradient_boosting \n+from sklearn.ensemble import HistGradientBoostingClassifier\n+\n+@pytest.mark.parametrize(\"scoring\", [None, 'loss'])\n+def test_string_target_early_stopping(scoring):\n+    # Regression test for issue #14709: Ensures HistGradientBoostingClassifier\n+    # works with string targets when early stopping is enabled\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10, scoring=scoring)\n+    gbrt.fit(X, y)\n+    # Just check it doesn't raise any exceptions\n+    assert gbrt.score(X, y) >= 0.0\n+\n+def test_histgradientboostingclassifier_with_integer_targets():\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array([0] * 50 + [1] * 50)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10)\n+    gbrt.fit(X, y)\n+    assert gbrt.score(X, y) >= 0.0\n+\n+def test_histgradientboostingclassifier_without_early_stopping():\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=None)\n+    gbrt.fit(X, y)\n+    assert gbrt.score(X, y) >= 0.0\n \n     stump_clf = HistGradientBoostingClassifier(min_samples_leaf=1, max_iter=1,\n                                                learning_rate=1, max_depth=2)\n \n     assert stump_clf.fit(X, y_isinf).score(X, y_isinf) == 1\n-    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..6e9c763 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,21 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+from scipy import sparse\n+from sklearn import svm\n+import numpy as np\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Test that fitting with sparse data and resulting in empty support vectors doesn't error\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size, \"support_vectors_ should be empty\"\n+    assert not model.dual_coef_.data.size, \"dual_coef_ should be empty\"\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..4e53c7e 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,6 +97,36 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+def test_strip_accents_nfkd():\n+    # strings that are already decomposed into NFKD form\n+    a = \"n\\u0303\"  # n with tilde\n+    expected = \"n\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # single code point with combining diaeresis\n+    a = \"\\u0065\\u0308\"  # e with diaeresis\n+    expected = \"e\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # sequence of combining marks\n+    a = \"\\u0301\\u0300\"  # combining acute and grave\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # multiple combining marks on a single character\n+    a = \"a\\u0301\\u0300\"  # a with both acute and grave accent\n+    expected = \"a\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combination of normal and decomposed form\n+    a = \"\u00e9\\u0300\"  # e with acute, followed by combining grave\n+    expected = \"e\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Edge case with no characters, just diacritics\n+    a = \"\\u0302\"  # combining circumflex\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n \n def test_to_ascii():\n     # check some classical latin accentuated symbols\n",
  "scikit-learn__scikit-learn-25102": "diff --git a/sklearn/feature_selection/tests/test_base.py b/sklearn/feature_selection/tests/test_base.py\nindex bf2d07e..6ddb3d3 100644\n--- a/sklearn/feature_selection/tests/test_base.py\n+++ b/sklearn/feature_selection/tests/test_base.py\n@@ -108,9 +108,39 @@ def test_inverse_transform_sparse():\n     with pytest.raises(ValueError):\n         sel.inverse_transform(np.array([[1], [2]]))\n \n+from sklearn.datasets import load_iris\n+import numpy as np\n+import pytest\n+from sklearn.feature_selection import SelectKBest, chi2\n+from numpy.testing import assert_array_equal\n+\n \n-def test_get_support():\n+def test_output_dataframe_preserving_dtypes():\n+    \"\"\"Check if output dtypes for dataframes are consistent with the input dtypes,\n+    including various types like float16, float32, int32, and category.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+\n+    # Create a DataFrame with various dtypes\n+    X = pd.DataFrame(\n+        {\n+            \"float16_col\": pd.Series([1.0, 2.4, 3.5], dtype=np.float16),\n+            \"float32_col\": pd.Series([1.0, 2.4, 3.5], dtype=np.float32),\n+            \"int32_col\": pd.Series([1, 2, 3], dtype=np.int32),\n+            \"category_col\": pd.Series([\"a\", \"b\", \"c\"], dtype=\"category\"),\n+        }\n+    )\n+   \n+    y = pd.Series([0, 1, 1])\n+\n+    # Apply SelectKBest feature selection\n+    for k in range(1, 4):\n+        sel = SelectKBest(score_func=chi2, k=k).set_output(transform=\"pandas\")\n+        X_out = sel.fit_transform(X, y)\n+\n+        # Check that the dtypes are preserved\n+        for name in X_out.columns:\n+            assert X.dtypes[name] == X_out.dtypes[name], f\"Mismatch in dtype for column {name}\"\n     sel = StepSelector()\n     sel.fit(X, y)\n     assert_array_equal(support, sel.get_support())\n-    assert_array_equal(support_inds, sel.get_support(indices=True))\n+    assert_array_equal(support_inds, sel.get_support(indices=True))\n",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..04deca3 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1520,10 +1520,74 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     )\n     X_imputed = imputer.fit_transform(X)\n     assert_allclose(X_imputed[:, 1], 0)\n+\n+\n+def test_iterative_imputer_constant_fill_value_custom():\n+    \"\"\"Check custom constant fill_value when initial_strategy is 'constant'.\"\"\"\n+    X = np.array([[np.nan, 2, 3], [4, np.nan, 5], [6, 7, np.nan]])\n+    \n+    fill_value = 10\n+    imputer = IterativeImputer(\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    \n+    # Check that fill_value is used for initial imputation round\n+    assert_array_equal(imputer.initial_imputer_.statistics_, fill_value)\n+\n+def test_iterative_imputer_constant_fill_value_nan():\n+    \"\"\"Check np.nan as a constant fill_value.\"\"\"\n+    X = np.array([[np.nan, 2, 3], [4, np.nan, 5], [6, 7, np.nan]])\n+    \n+    fill_value = np.nan\n+    imputer = IterativeImputer(\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=1\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    \n+    for i in range(X.shape[1]):\n+        # Confirm that missing values are not initially imputed in this edge case\n+        assert_array_equal(np.isnan(imputer.initial_imputer_.statistics_[i]), True)\n     X_imputed = imputer.transform(X)\n     assert_allclose(X_imputed[:, 1], 0)\n \n \n+def test_iterative_imputer_constant_fill_value_custom():\n+    \"\"\"Check custom constant fill_value when initial_strategy is 'constant'.\"\"\"\n+    X = np.array([[np.nan, 2, 3], [4, np.nan, 5], [6, 7, np.nan]])\n+    \n+    fill_value = 10\n+    imputer = IterativeImputer(\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    \n+    # Check that fill_value is used for initial imputation round\n+    assert_array_equal(imputer.initial_imputer_.statistics_, fill_value)\n+\n+def test_iterative_imputer_constant_fill_value_nan():\n+    \"\"\"Check np.nan as a constant fill_value.\"\"\"\n+    X = np.array([[np.nan, 2, 3], [4, np.nan, 5], [6, 7, np.nan]])\n+    \n+    fill_value = np.nan\n+    imputer = IterativeImputer(\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=1\n+    )\n+    X_imputed = imputer.fit_transform(X)\n+    \n+    for i in range(X.shape[1]):\n+        # Confirm that missing values are not initially imputed in this edge case\n+        assert_array_equal(np.isnan(imputer.initial_imputer_.statistics_[i]), True)\n+\n+\n @pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n def test_knn_imputer_keep_empty_features(keep_empty_features):\n     \"\"\"Check the behaviour of `keep_empty_features` for `KNNImputer`.\"\"\"\n",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..4bdea08 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -331,6 +331,22 @@ def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n     model = IsolationForest()\n+\n+def test_iforest_no_feature_name_warning_with_dataframe():\n+    \"\"\"Test ensuring no feature name warning with DataFrame input when contamination is specified.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    rng = np.random.RandomState(42)\n+    \n+    # Create a simple DataFrame\n+    X = pd.DataFrame(rng.normal(size=(100, 2)), columns=[\"feature1\", \"feature2\"])\n+    \n+    # Create IsolationForest with a specific contamination (not 'auto')\n+    model = IsolationForest(random_state=0, contamination=0.1)\n+    \n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        # Fit the model and check no warnings are raised\n+        model.fit(X)\n     model.fit(X, y)\n \n     warn_msg = (\n@@ -338,4 +354,4 @@ def test_base_estimator_property_deprecated():\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "diff --git a/sklearn/feature_selection/tests/test_sequential.py b/sklearn/feature_selection/tests/test_sequential.py\nindex 42e1fbb..f2c60c7 100644\n--- a/sklearn/feature_selection/tests/test_sequential.py\n+++ b/sklearn/feature_selection/tests/test_sequential.py\n@@ -313,4 +313,26 @@ def test_backward_neg_tol():\n     new_score = lr.fit(Xr, y).score(Xr, y)\n \n     assert 0 < sfs.get_support().sum() < X.shape[1]\n-    assert new_score < initial_score\n+    assert new_score < initial_score\n+\n+def test_sequential_feature_selector_with_splits():\n+    \"\"\"Test SequentialFeatureSelector with an iterable of splits.\"\"\"\n+    from sklearn.datasets import make_classification\n+    from sklearn.model_selection import LeaveOneGroupOut\n+    from sklearn.feature_selection import SequentialFeatureSelector\n+    from sklearn.neighbors import KNeighborsClassifier\n+    import numpy as np\n+\n+    X, y = make_classification(random_state=0)\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2 :] = 1\n+\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+\n+    clf = KNeighborsClassifier(n_neighbors=5)\n+    sfs = SequentialFeatureSelector(clf, n_features_to_select=5, cv=splits)\n+    sfs.fit(X, y)\n+\n+    # Ensure that the selector has performed a valid selection\n+    assert sfs.get_support().sum() == 5\n",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..43cc2a2 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -14,6 +14,10 @@ from sklearn.utils._testing import assert_allclose_dense_sparse\n from sklearn.utils._testing import assert_almost_equal\n \n from sklearn.base import BaseEstimator, TransformerMixin\n+import pytest\n+import pandas as pd\n+import numpy as np\n+from sklearn.feature_selection import VarianceThreshold\n from sklearn.compose import (\n     ColumnTransformer,\n     make_column_transformer,\n@@ -2184,4 +2188,53 @@ def test_raise_error_if_index_not_aligned():\n         \" Indexes that do not match.\"\n     )\n     with pytest.raises(ValueError, match=msg):\n-        ct.fit_transform(X)\n+        ct.fit_transform(X)\n+\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+    Non-regression test for #26306.\n+    \"\"\"\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    # Test case for remainder being a transformer that supports pandas output\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    \n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n+    # Test case for remainder being passthrough\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=\"passthrough\",\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    # Test case for remainder being drop\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=\"drop\",\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df[[\"a\"]])\n+\n+    # Rechecking with \"default\" output format\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    expected_array = np.array([[1], [0], [1]])\n+    assert np.array_equal(out, expected_array)\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..29ff6d8 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,8 +945,21 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_inertia_equal_in_diff_n_jobs():\n+    # Additional test to ensure inertia is consistent for different n_jobs\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    # Calculate inertia for n_jobs = 1\n+    kmeans_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X)\n+    inertia_1 = kmeans_1.inertia_\n+\n+    # Calculate inertia for n_jobs = 2\n+    kmeans_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X)\n+    inertia_2 = kmeans_2.inertia_\n \n-def test_minibatch_kmeans_partial_fit_int_data():\n+    # Check that the inertia are the same\n+    assert_almost_equal(inertia_1, inertia_2, decimal=6)\n     # Issue GH #14314\n     X = np.array([[-1], [1]], dtype=np.int)\n     km = MiniBatchKMeans(n_clusters=2)\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..574d918 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the code-block directive.\"\"\"\n \n import os\n@@ -250,6 +251,27 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n                        \"    pass\\n\"\n                        \"\\n\")\n \n+@pytest.mark.xfail(reason=\"The code indent issue with prepend should be resolved\")\n+def test_LiteralIncludeReader_prepend_indent(literal_inc_path):\n+    # Using prepend with indentation\n+    options = {\n+        'start-at': '<groupId>com.github.ekryd.sortpom</groupId>',\n+        'end-at': '</plugin>',\n+        'prepend': '      <plugin>',\n+        'language': 'xml'\n+    }\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\n+        \"      <plugin>\\n\"\n+        \"        <groupId>com.github.ekryd.sortpom</groupId>\\n\"\n+        \"        <artifactId>sortpom-maven-plugin</artifactId>\\n\"\n+        \"        <version>2.15.0</version>\\n\"\n+        \"        <configuration>\\n\"\n+        \"          <verifyFailOn>strict</verifyFailOn>\\n\"\n+        \"        </configuration>\\n\"\n+        \"      </plugin>\\n\"\n+    )\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..957bfd7 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1023,6 +1023,17 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '   Return type:\\n'\n             '      None\\n' == context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_class_level(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints.ClassWithoutInit\\n', encoding='utf8')\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints.ClassWithoutInit\\n'\n+            '\\n'\n+            '   A class docstring.\\n'\n+            '\\n' == context)\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..ad8b103 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +10,7 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..8d99a80 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -95,6 +95,12 @@ def test_get_full_qualified_name():\n     assert domain.get_full_qualified_name(node) == 'ls.-l'\n \n \n+from sphinx import addnodes\n+from sphinx.testing.util import assert_node\n+from sphinx import restructuredtext\n+from sphinx.domains import StandardDomain\n+from typing import Optional, List\n+\n def test_glossary(app):\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n@@ -140,7 +146,17 @@ def test_glossary(app):\n     assert_node(doctree[0][0][2][1],\n                 [nodes.definition, nodes.paragraph, \"description\"])\n \n-    # index\n+    # Test for duplicate glossary terms with different cases\n+    text_case = (\".. glossary::\\n\"\n+                 \"\\n\"\n+                 \"   MySQL\\n\"\n+                 \"       A popular open-source relational database management system.\\n\"\n+                 \"\\n\"\n+                 \"   mysql\\n\"\n+                 \"       A command-line tool used for the MySQL database.\\n\")\n+\n+    with pytest.raises(SphinxError):\n+        restructuredtext.parse(app, text_case)\n     objects = list(app.env.get_domain(\"std\").get_objects())\n     assert (\"term1\", \"term1\", \"term\", \"index\", \"term-term1\", -1) in objects\n     assert (\"term2\", \"term2\", \"term\", \"index\", \"term-term2\", -1) in objects\n@@ -148,7 +164,22 @@ def test_glossary(app):\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n \n-def test_glossary_warning(app, status, warning):\n+def test_glossary_duplicate_case(app):\n+    # Test that 'MySQL' and 'mysql' are recognized as different terms and raise a warning\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       A relational database management system.\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       A command line client for MySQL server.\\n\")\n+\n+    # Expecting a warning about duplicate terms in different casing\n+    try:\n+        restructuredtext.parse(app, text)\n+        assert False, \"Expected a warning for duplicate terms with different cases\"\n+    except SphinxError as e:\n+        assert \"duplicate term description\" in str(e)\n     # empty line between terms\n     text = (\".. glossary::\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..c435846 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -332,6 +332,23 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].default == Parameter.empty\n \n \n+import sys\n+import pytest\n+from sphinx.util.inspect import signature_from_str\n+from inspect import Parameter\n+\n+@pytest.mark.skipif(sys.version_info < (3, 8),\n+                    reason='python-3.8 or above is required')\n+def test_signature_with_positional_only_args_and_defaults():\n+    sig = signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['c'].default == '1'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+\n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n def test_signature_from_str_positionaly_only_args():\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..cc2ad2f 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -11,6 +12,7 @@\n import abc\n import sys\n from importlib import import_module\n+from typing import TypeVar, Generic\n \n import pytest\n \n@@ -52,7 +54,19 @@ def test_MockObject():\n     assert isinstance(obj.other_method(), SubClass)\n \n \n-def test_mock():\n+def test_mock_generic_typevar():\n+    \"\"\"Test that mock can handle generic classes with TypeVar without TypeError.\"\"\"\n+    T = TypeVar('T')\n+    class MockGenericClass(Generic[T]):\n+        pass\n+\n+    # Mock the generically-typed class\n+    class SubClass(mock.SomeClass[T], MockGenericClass[int]):\n+        \"\"\"docstring of SubClass\"\"\"\n+\n+    obj = SubClass()\n+    assert SubClass.__doc__ == \"docstring of SubClass\"\n+    assert isinstance(obj, SubClass)\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n     assert modname not in sys.modules\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..eb155cc 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -9,6 +10,9 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+from functools import wraps\n+from sphinx.testing.util import simple_decorator\n+\n import sys\n from collections import namedtuple\n from unittest import TestCase, mock\n@@ -180,7 +184,16 @@ class SkipMemberTest(TestCase):\n                         SampleError._private_undoc, True,\n                         'napoleon_include_private_with_doc')\n \n-    def test_exception_special_doc(self):\n+    def test_decorated_init(self):\n+        class SampleClass:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"This is a decorated __init__ method.\"\"\"\n+                pass\n+        \n+        self.assertSkip('class', '__init__',\n+                        SampleClass.__init__, False,\n+                        'napoleon_include_init_with_doc')\n         self.assertSkip('exception', '__special_doc__',\n                         SampleError.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n",
  "sphinx-doc__sphinx-7985": "",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..9bd13d1 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -16,6 +17,38 @@ from test_ext_autodoc import do_autodoc\n @pytest.mark.sphinx('html', testroot='ext-autodoc')\n def test_private_field(app):\n     app.config.autoclass_content = 'class'\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specified_private_members(app):\n+    # Test the behavior when specifying certain private members to include\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None, \"private-members\": \"_specified_private_method\"}\n+    actual = do_autodoc(app, 'class', 'target.PrivateMemberClass', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: PrivateMemberClass',\n+        '   :module: target.private',\n+        '',\n+        '',\n+        '   .. py:method:: PrivateMemberClass._specified_private_method()',\n+        '      :module: target.private',\n+        '',\n+        '      This is a specified private method that should be documented.',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_no_private_members(app):\n+    # Test with no private members specified\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None, \"private-members\": None}\n+    actual = do_autodoc(app, 'class', 'target.PrivateMemberClass', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:class:: PrivateMemberClass',\n+        '   :module: target.private',\n+        '',\n+    ]\n     options = {\"members\": None}\n     actual = do_autodoc(app, 'module', 'target.private', options)\n     assert list(actual) == [\n",
  "sphinx-doc__sphinx-8120": "",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..092c586 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,11 +9,36 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    srcdir='autodoc_typehints_description_and_type_aliases_new',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_description_and_type_aliases_new(app):\n+    (app.srcdir / 'new_types.rst').write_text('.. autofunction:: types.sphinx_doc')\n+    app.build()\n+    content = (app.outdir / 'new_types.txt').read_text()\n+    assert (\n+        \"types.sphinx_doc(data)\\\\n\"\n+        \"\\\\n\"\n+        \"   Does it work.\\\\n\"\n+        \"\\\\n\"\n+        \"   Parameters:\\\\n\"\n+        \"      * **data** (*types.JSONObject*) --\\\\n\"\n+        \"        Does it args.\\\\n\"\n+        \"\\\\n\"\n+        \"   Returns\\\\n\"\n+        \"      Does it work in return.\\\\n\"\n+        \"\\\\n\"\n+        \"   Return type\\\\n\"\n+        \"      types.JSONObject\\\\n\" in content\n+    )\n+\n import platform\n import sys\n \n import pytest\n \n+import sys\n from sphinx.testing import restructuredtext\n \n from .test_ext_autodoc import do_autodoc\n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..19335af 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,13 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_enum_object_description():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n \n-def test_getslots():\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+    assert inspect.object_description(MyEnum.ValueB) == \"MyEnum.ValueB\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..a2524dc 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -17,6 +17,7 @@ from sphinx import application\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n \n+from os import path\n warnfile = StringIO()\n \n \n@@ -240,6 +241,35 @@ def test_default_filename(tempdir):\n     ns = {}\n     exec(conffile.read_text(), ns)\n \n+def test_exits_when_existing_confpy(monkeypatch):\n+    # The code detects existing conf.py with path.isfile()\n+    # so we mock it as True with pytest's monkeypatch\n+    def mock_isfile(path):\n+        return True\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    qs.term_input = mock_input({\n+        'Please enter a new root path (or just Enter to exit)': ''\n+    })\n+    d = {}\n+    with pytest.raises(SystemExit):\n+        qs.ask_user(d)\n+\n+def test_does_not_exit_when_no_existing_confpy(monkeypatch):\n+    # The code expects no existing conf.py, so mock it as False\n+    def mock_isfile(path):\n+        return False\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    qs.term_input = mock_input({\n+        'Root path for the documentation': 'new_project'\n+    })\n+    d = {}\n+    qs.ask_user(d)\n+    assert d['path'] == 'new_project'\n+\n \n def test_extensions(tempdir):\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n@@ -249,4 +279,33 @@ def test_extensions(tempdir):\n     assert conffile.isfile()\n     ns = {}\n     exec(conffile.read_text(), ns)\n+\n+def test_exits_when_existing_confpy(monkeypatch):\n+    # The code detects existing conf.py with path.isfile()\n+    # so we mock it as True with pytest's monkeypatch\n+    def mock_isfile(path):\n+        return True\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    qs.term_input = mock_input({\n+        'Please enter a new root path (or just Enter to exit)': ''\n+    })\n+    d = {}\n+    with pytest.raises(SystemExit):\n+        qs.ask_user(d)\n+\n+def test_does_not_exit_when_no_existing_confpy(monkeypatch):\n+    # The code expects no existing conf.py, so mock it as False\n+    def mock_isfile(path):\n+        return False\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    qs.term_input = mock_input({\n+        'Root path for the documentation': 'new_project'\n+    })\n+    d = {}\n+    qs.ask_user(d)\n+    assert d['path'] == 'new_project'\n     assert ns['extensions'] == ['foo', 'bar', 'baz']\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..14d0b9c 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -847,7 +847,39 @@ def test_pyproperty(app):\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n \n-def test_pydecorator_signature(app):\n+def test_property_cross_reference(app):\n+    text = (\".. py:class:: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: x\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: y\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: width\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: height\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+            \n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree[1][1][0], ([desc_signature, ([desc_annotation, \"property \"],\n+                                                     [desc_name, \"end\"],\n+                                                     [desc_annotation, \": \", \n+                                                      pending_xref, \"Point\"])],\n+                                   [desc_content, ()]))\n+    assert 'Square.end' in domain.objects\n+    assert domain.objects['Square.end'] == ('index', 'Square.end', 'property', False)\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 6ac780b..e7212bf 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -11,6 +11,7 @@\n from typing import TYPE_CHECKING, Any, Dict\n \n from sphinx.config import Config\n+from packaging.version import parse\n from sphinx.errors import VersionRequirementError\n from sphinx.locale import __\n from sphinx.util import logging\n@@ -51,7 +52,8 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n                               'but it is not loaded.'), extname)\n             continue\n \n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        # Convert versions to comparable objects\n+        if extension.version == 'unknown version' or parse(reqversion) > parse(extension.version):\n             raise VersionRequirementError(__('This project needs the extension %s at least in '\n                                              'version %s and therefore cannot be built with '\n                                              'the loaded version (%s).') %\n",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..42d60c6 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,7 +236,36 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n-def test_issue_9214():\n+def test_issue_11617():\n+    # Tests the fix for issue 11617: distance calculation should account for all dimensions\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+    # Additional test cases for robustness\n+    # Case where both points are 3D\n+    p3 = Point3D(4, 0, 0)\n+    assert p1.distance(p3) == sqrt((4-1)**2 + (0-0)**2 + (0-2)**2)\n+    \n+    # Case where dimensions differ but 3D point is in 2D subspace\n+    p4 = Point2D(4, 0)\n+    assert p1.distance(p4) == sqrt((4-1)**2 + (0-0)**2 + (0-2)**2)\n+\n+    # Case with 2D to 2D point\n+    p5 = Point2D(1, 1)\n+    p6 = Point2D(4, 5)\n+    assert p5.distance(p6) == 5\n+\n+    # Case where both points are identical\n+    p7 = Point3D(1, 0, 2)\n+    assert p1.distance(p7) == 0\n+\n+    # Case with both points being at different higher dimensions\n+    p8 = Point3D(2, 2, 2)\n+    assert p1.distance(p8) == sqrt((2-1)**2 + (2-0)**2 + (2-2)**2)\n+\n+    # Cross verification: to ensure backward compatibility with other functions\n+    assert p5.transform(rotate(pi/2)) == Point2D(-1, 1)\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n     p3 = Point3D(7, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..67f9f40 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,22 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+from sympy import implemented_function, Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    # Original test\n+    assert f(f(2)).evalf() == Float(16)\n+    # Testing composition: f(g(2)) should evaluate to f(4) == 16\n+    assert f(g(2)).evalf() == Float(16)\n+    # Testing deeper nesting: f(f(g(2))) should evaluate to f(16) == 256\n+    assert f(f(g(2))).evalf() == Float(256)\n+    # Testing with non-numeric input: g(f(2)) should evaluate to g(4) == 8\n+    assert g(f(2)).evalf() == Float(8)\n+    # Testing recursive deeper nesting: g(f(g(2))) should evaluate to g(16) == 32\n+    assert g(f(g(2))).evalf() == Float(32)\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..95313c5 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -71,8 +71,20 @@ def test_ZeroMatrix_doit():\n     assert Znn.doit() == ZeroMatrix(2*n, n)\n     assert isinstance(Znn.doit().rows, Mul)\n \n+from sympy import Symbol, MatrixSymbol, Identity, Sum, symbols\n+from sympy.assumptions import assuming\n+from sympy import Q as Query\n \n-def test_Identity():\n+def test_identity_matrix_sum_elements():\n+    n = Symbol('n', integer=True, positive=True)\n+    In = Identity(n)\n+    \n+    # Test that the sum of all elements in Identity(n) is n.\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+\n+    # Test with a specific size\n+    n_val = 3\n+    assert Sum(Sum(In[i, j], (i, 0, n_val-1)), (j, 0, n_val-1)).doit() == n_val\n     A = MatrixSymbol('A', n, m)\n     In = Identity(n)\n     Im = Identity(m)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..6ebec7a 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -336,6 +336,16 @@ def test_args():\n         Permutation(((0, ), [1]))\n     assert Permutation([[1, 2]]) == Permutation([0, 2, 1])\n     assert Permutation([[1], [4, 2]]) == Permutation([0, 1, 4, 3, 2])\n+    \n+    # Test cases for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation((0, 1))\n+    assert Permutation([[0, 1, 2], [2, 3]]) == Permutation([0, 1, 3, 2])\n+    assert Permutation([[2, 3], [0, 1, 2]]) == Permutation([1, 2, 0, 3])\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])\n+    assert Permutation([[1, 2], [0, 1]]) == Permutation([2, 0, 1])\n+    assert Permutation([[0, 1], [2], [1, 0]]) == Permutation([0, 1, 2])  # Identity\n+    assert Permutation([[0, 1], [1, 0], [2, 3, 4], [4, 3, 2]]) == Permutation([0, 1, 2, 3, 4])  # Identity\n+    assert Permutation([[0, 1], [1, 0], [2, 3, 4], [4, 3], [3, 2]]) == Permutation([0, 1, 2, 4, 3])\n     assert Permutation([[1], [4, 2]], size=1) == Permutation([0, 1, 4, 3, 2])\n     assert Permutation(\n         [[1], [4, 2]], size=6) == Permutation([0, 1, 4, 3, 2, 5])\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex fa86bc3..416f658 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -1273,8 +1273,36 @@ def test_zeros_ones_fill():\n     assert zeros(2, 3) == Matrix(2, 3, [0]*6)\n     assert ones(2, 3) == Matrix(2, 3, [1]*6)\n \n-\n-def test_empty_zeros():\n+from sympy import Matrix\n+import pytest\n+\n+def test_hstack_zero_matrices():\n+    # Test the hstack with zero-rows matrices\n+    M1 = Matrix.zeros(0, 0)\n+    M2 = Matrix.zeros(0, 1)\n+    M3 = Matrix.zeros(0, 2)\n+    M4 = Matrix.zeros(0, 3)\n+    assert Matrix.hstack(M1, M2, M3, M4).shape == (0, 6)\n+\n+    # Test the hstack with zero-columns matrices\n+    M1 = Matrix.zeros(1, 0)\n+    M2 = Matrix.zeros(1, 1)\n+    M3 = Matrix.zeros(1, 2)\n+    M4 = Matrix.zeros(1, 3)\n+    assert Matrix.hstack(M1, M2, M3, M4).shape == (1, 6)\n+\n+def test_vstack_zero_matrices():\n+    # Test the vstack with zero-cols matrices\n+    M1 = Matrix.zeros(0, 1)\n+    M2 = Matrix.zeros(0, 2)\n+    M3 = Matrix.zeros(0, 3)\n+    assert Matrix.vstack(M1, M2, M3).shape == (0, 3)\n+\n+    # Test the vstack with zero-rows matrices\n+    M1 = Matrix.zeros(1, 0)\n+    M2 = Matrix.zeros(2, 0)\n+    M3 = Matrix.zeros(3, 0)\n+    assert Matrix.vstack(M1, M2, M3).shape == (6, 0)\n     a = zeros(0)\n     assert a == Matrix()\n     a = zeros(0, 2)\n",
  "sympy__sympy-13372": "",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..d19a18c 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,6 +272,28 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n+def test_coth_substitution_issue():\n+    from sympy import coth, log, tan, Symbol, I, pi\n+\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    \n+    # Check substituted values that previously caused issues\n+    assert e.subs(x, 2) == coth(log(tan(2)))\n+    assert e.subs(x, 3) == coth(log(tan(3)))\n+    assert e.subs(x, 5) == coth(log(tan(5)))\n+    assert e.subs(x, 6) == coth(log(tan(6)))\n+    assert e.subs(x, 8) == coth(log(tan(8)))\n+    assert e.subs(x, 9) == coth(log(tan(9)))\n+    assert e.subs(x, 11) == coth(log(tan(11)))\n+    assert e.subs(x, 12) == coth(log(tan(12)))\n+    assert e.subs(x, 13) == coth(log(tan(13)))\n+    assert e.subs(x, 15) == coth(log(tan(15)))\n+    assert e.subs(x, 18) == coth(log(tan(18)))\n+\n+    # Additional checks to ensure functionality\n+    assert coth(log(tan(2))) == coth(log(-tan(2)))\n+    assert coth(1 + I*pi/2) == tanh(1)\n \n def test_coth_series():\n     x = Symbol('x')\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..907a028 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -181,7 +181,24 @@ def test_Complement():\n \n     assert (not 0 in S.Reals.intersect(S.Integers - FiniteSet(0)))\n \n-    assert S.EmptySet - S.Integers == S.EmptySet\n+from sympy import Interval, FiniteSet, Complement, S, symbols\n+\n+x, y = symbols('x y')\n+\n+def test_issue_12712_complement_mixed():\n+    # Test the provided issue scenario\n+    assert Complement(FiniteSet(x, y, 2), Interval(-10, 10)) == Complement(FiniteSet(x, y), Interval(-10, 10))\n+\n+    # Additional tests\n+    assert Complement(FiniteSet(x, 5, 10), Interval(5, 15)) == FiniteSet(x)\n+    assert Complement(FiniteSet(3.5, x, y), Interval(1, 4)) == Complement(FiniteSet(x, y), Interval(1, 4))\n+\n+    # Edge cases\n+    assert Complement(FiniteSet(5, x), Interval(5, 5, True, True)) == FiniteSet(x, 5)\n+    assert Complement(FiniteSet(1, x), Interval(0, 2)) == FiniteSet(x)\n+    assert Complement(FiniteSet(-1, x, 0), Interval(-5, 5)) == FiniteSet(x)\n+\n+    assert Complement(FiniteSet(x, y, -3), Interval(-10, -2)) == Complement(FiniteSet(x, y), Interval(-10, -2))\n \n     assert (S.Integers - FiniteSet(0)) - FiniteSet(1) == S.Integers - FiniteSet(0, 1)\n \n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..e1aea94 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,49 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643():\n+    # Basic test to ensure the previously reported issue has been fixed.\n+    import sympy as sm\n+    M = sm.eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    assert M.col_insert(3, V) == sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]])\n+\n+def test_col_insert_edge_cases():\n+    import sympy as sm\n+    # Test inserting at start\n+    M = sm.eye(3)\n+    V = 3 * sm.ones(3, 1)\n+    assert M.col_insert(0, V) == sm.Matrix([\n+        [3, 1, 0, 0],\n+        [3, 0, 1, 0],\n+        [3, 0, 0, 1]])\n+    \n+    # Test inserting at end\n+    M = sm.eye(2)\n+    V = 4 * sm.ones(2, 1)\n+    assert M.col_insert(2, V) == sm.Matrix([\n+        [1, 0, 4],\n+        [0, 1, 4]])\n+    \n+    # Test inserting into non-square matrix\n+    M = sm.Matrix([[1, 2], [3, 4]])\n+    V = sm.Matrix([[5], [6]])\n+    assert M.col_insert(1, V) == sm.Matrix([\n+        [1, 5, 2],\n+        [3, 6, 4]])\n+\n+    # Test inserting multi-column into non-square matrix\n+    M = sm.Matrix([[7, 8], [9, 10]])\n+    V = sm.Matrix([[11, 12], [13, 14]])\n+    assert M.col_insert(1, V) == sm.Matrix([\n+        [7, 11, 12, 8],\n+        [9, 13, 14, 10]])\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..73f6d58 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -678,7 +678,21 @@ def test_Poly_mul():\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n \n \n-def test_Poly_sqr():\n+def test_issue_13079():\n+    # Original test cases\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n+    \n+    # Additional test cases\n+    assert Poly(x + 1)*x == Poly(x**2 + x, x, domain='ZZ')\n+    assert x*Poly(x + 1) == Poly(x**2 + x, x, domain='ZZ')\n+    assert Poly(x - 3)*x == Poly(x**2 - 3*x, x, domain='ZZ')\n+    assert x*Poly(x - 3) == Poly(x**2 - 3*x, x, domain='ZZ')\n+    assert Poly(x)*Symbol('a') == Poly(x*Symbol('a'), x, domain='ZZ')\n+    assert Symbol('a')*Poly(x) == Poly(x*Symbol('a'), x, domain='ZZ')\n     assert Poly(x*y, x, y).sqr() == Poly(x**2*y**2, x, y)\n \n \n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..d614ff1 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,28 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_custom():\n+    from sympy import symbols, S\n+    x, y = symbols('x y')\n+\n+    # Original test patch cases\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3 \\, x^{2} \\, y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+\n+    # Additional test cases\n+    # Using no space as a multiplication symbol\n+    assert latex(3*x**2*y, mul_symbol='') == r\"3x^{2}y\"\n+    # Using default 'dot' symbol should still work\n+    assert latex(3*x**2*y, mul_symbol='dot') == r\"3 \\cdot x^{2} \\cdot y\"\n+    # Using 'times' symbol should work\n+    assert latex(3*x**2*y, mul_symbol='times') == r\"3 \\times x^{2} \\times y\"\n+    # Using 'ldot' symbol should work\n+    assert latex(3*x**2*y, mul_symbol='ldot') == r\"3 \\,. x^{2} \\,. y\"\n+    # Edge case of single variable with custom symbol\n+    assert latex(x, mul_symbol='\\\\,') == r\"x\"\n+    # Ensuring that a thin space works when mixing numbers and variables\n+    assert latex(2.5*x*y**0.5, mul_symbol='\\\\,') == r\"2.5 \\, x \\, y^{0.5}\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..5f5db59 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -400,6 +400,16 @@ def test_determinant():\n                  (y, z, x) ))\n \n     assert M.det(method=\"bareiss\") == z**2 - x*y\n+\n+    # issue 13835 - testing matrix determinant with symbolic entries\n+    a = symbols('a')\n+    M_sym = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+\n+    # These test the resolution for the issue mentioned\n+    assert M_sym(5).det() == 0\n+    assert M_sym(6).det() == 0\n+    assert M_sym(7).det() == 0\n+    assert M_sym(8).det() == 0  # Additional test case for a larger matrix\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n \n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..24bf6cf 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -708,9 +708,52 @@ def test_issue_10003():\n     G = Gamma('g', 1, 2)\n     assert P(X < -1) == S.Zero\n     assert P(G < -1) == S.Zero\n+from sympy import S, Rational, Piecewise, gamma, lowergamma, exp, tanh, sqrt, hyper\n+from sympy.stats import cdf, density, Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse, Kumaraswamy\n+from sympy.stats import Laplace, Logistic, Nakagami, StudentT, UniformSum\n \n def test_precomputed_cdf():\n     x = symbols(\"x\", real=True, finite=True)\n+\n+    a, b = S(0), S(3)\n+    X_arcsin = Arcsin(\"x\", a, b)\n+    assert cdf(X_arcsin)(1) == Piecewise((0, x < a), (2*asin(sqrt((-a + x)/(-a + b)))/pi, x < b), (1, True))\n+\n+    X_dagum = Dagum(\"x\", S(1)/3, S(1)/5, 2)\n+    assert cdf(X_dagum)(3) == Piecewise(((1 + (3/2)**(-S(1)/5))**(-S(1)/3), 3 >= 0), (0, True))\n+\n+    X_erlang = Erlang(\"x\", 1, 1)\n+    assert cdf(X_erlang)(1) == lowergamma(1, 1)/gamma(1)\n+\n+    X_frechet = Frechet(\"x\", S(4)/3, 1, 2)\n+    assert cdf(X_frechet)(3) == exp(-(1)**(-4/3))\n+\n+    X_gamma = Gamma(\"x\", 0.1, 2)\n+    assert cdf(X_gamma)(3) == lowergamma(0.1, 3/2)/gamma(0.1)\n+\n+    X_gamma_inv = GammaInverse(\"x\", S(5)/7, 2)\n+    assert cdf(X_gamma_inv)(3) == uppergamma(S(5)/7, 2/3)/gamma(S(5)/7)\n+\n+    X_kuma = Kumaraswamy(\"x\", S(1)/123, 5)\n+    assert cdf(X_kuma)(S(1)/3) == Piecewise((0, x < 0), (-(-x**(S(1)/123) + 1)**5 + 1, x <= 1), (1, True))\n+\n+    X_laplace = Laplace(\"x\", 2, 3)\n+    assert cdf(X_laplace)(5) == Piecewise((0, x < 2), ((-exp((-5 + 2)/3)/2 + 1), x >= 5), (1, True))\n+\n+    X_logis = Logistic(\"x\", 1, 0.1)\n+    assert cdf(X_logis)(2) == 1/(exp((1 - 2)/0.1) + 1)\n+\n+    X_naka = Nakagami(\"x\", S(7)/3, 1)\n+    assert cdf(X_naka)(2) == lowergamma(S(7)/3, S(7)/3*2**2)/gamma(S(7)/3)\n+\n+    X_studentt = StudentT(\"x\", 10)\n+    assert cdf(X_studentt)(2).simplify()  == 1/2 + 2*gamma(11/2)*hyper((1/2, 11/2), (3/2,), -2**2/10)/(sqrt(pi)*sqrt(10)*gamma(10/2))\n+\n+    X_uniform_sum = UniformSum(\"x\", 5)\n+    pdf_01 = density(X_uniform_sum)(x).subs(floor(x), 0).doit()\n+    cdf_01 = cdf(X_uniform_sum, evaluate=False)(x).subs(floor(x), 0).doit()\n+    assert tn(diff(cdf_01, x), pdf_01, x, a=0, b=0, c=1, d=0)\n+    x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n     n = symbols(\"n\", integer=True, positive=True, finite=True)\n",
  "sympy__sympy-13974": "",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..3100275 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -79,7 +79,16 @@ def test_python_keyword_function_name_escaping():\n         5*Function(\"for\")(8)) == \"for_ = Function('for')\\ne = 5*for_(8)\"\n \n \n-def test_python_relational():\n+from sympy import Symbol, Eq, Ne, Rational\n+\n+def test_issue_fix_relational():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n+    assert python(Ne(x/(y + 1), y**2)) in [\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(1 + y), y**2)\", \n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(y + 1), y**2)\"\n+    ]\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..63ac726 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -3,12 +3,36 @@ from sympy.physics.vector import ReferenceFrame, Vector, dynamicsymbols, dot\n from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n+from sympy.physics.vector import ReferenceFrame\n+from sympy.physics.vector.vector import Vector\n \n-Vector.simp = True\n-A = ReferenceFrame('A')\n \n+def test_vector_operations_with_zero():\n+    N = ReferenceFrame('N')\n+\n+    # Test adding integer zero\n+    assert A.x + 0 == A.x\n+    assert 0 + A.y == A.y\n+\n+    # Test sympy Integer zero with Vector\n+    assert A.x + Integer(0) == A.x\n+    assert Integer(0) + A.y == A.y\n+\n+    # Test multiplication by zero\n+    assert 0 * A.x == Vector.zero\n+    assert A.z * 0 == Vector.zero\n+\n+    # Test sum with zero-multiplication\n+    assert sum([N.x, (0 * N.x)]) == N.x\n+\n+    # Test vector subtraction with zero\n+    assert A.x - 0 == A.x\n+    assert A.y - Integer(0) == A.y\n \n-def test_Vector():\n+    # Test adding and subtracting zero vector\n+    zero_vector = Vector.zero\n+    assert A.x + zero_vector == A.x\n+    assert A.y - zero_vector == A.y\n     assert A.x != A.y\n     assert A.y != A.z\n     assert A.z != A.x\n",
  "sympy__sympy-14976": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex fbe0d75..fd12ae6 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import (absolute_import, division, print_function)\n \n@@ -38,6 +39,9 @@ def test_PythonCodePrinter():\n \n \n def test_MpmathPrinter():\n+    from sympy import Rational\n+    p = MpmathPrinter()\n+    assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n \n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..b14e020 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -72,6 +73,11 @@ def test_ndim_array_initiation():\n     raises(ValueError, lambda: vector_with_long_shape[long(5)])\n \n     from sympy.abc import x\n+    # Additional test for rank-0 array (scalar) to ensure len() is 1\n+    scalar_array = ImmutableDenseNDimArray(42)\n+    assert len(scalar_array) == 1, \"Expected length of rank-0 array to be 1\"\n+    assert scalar_array[()] == 42\n+    raises(ValueError, lambda: scalar_array[0])\n     rank_zero_array = ImmutableDenseNDimArray(x)\n     assert len(rank_zero_array) == 0\n     assert rank_zero_array.shape == ()\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..d83f7e2 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -24,7 +25,10 @@ def test_Rational():\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n \n-def test_Function():\n+def test_Max_Min():\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(y, x, 2)) == \"Max[y, x, 2]\"\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n     assert mcode(sin(x) ** cos(x)) == \"Sin[x]^Cos[x]\"\n     assert mcode(conjugate(x)) == \"Conjugate[x]\"\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..8cd4f4a 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,51 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_rotation_iss1593():\n+    \"\"\"\n+    There was a sign mistake in the definition,\n+    of the rotation matrix. This tests that particular sign mistake.\n+    See issue 1593 for reference.\n+    See Wikipedia\n+    https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Quaternion-derived_rotation_matrix\n+    for the correct definition.\n+    \"\"\"\n+    from sympy import cos, sin, symbols, trigsimp\n+    from sympy.algebras.quaternion import Quaternion\n+    \n+    x = symbols('x')\n+    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    assert(trigsimp(q.to_rotation_matrix()) == Matrix([\n+        [1,      0,      0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x), cos(x)]]))\n+\n+def test_quaternion_rotation_additional():\n+    \"\"\"\n+    Additional test cases to ensure Quaternion to_rotation_matrix works as expected.\n+    \"\"\"\n+    from sympy import pi\n+    # Testing with a 90-degree rotation around the x-axis\n+    q = Quaternion(cos(pi/4), sin(pi/4), 0, 0)\n+    assert(trigsimp(q.to_rotation_matrix()) == Matrix([\n+        [1,  0,     0],\n+        [0,  0,    -1],\n+        [0,  1,     0]]))\n+\n+    # Testing with a 90-degree rotation around the y-axis\n+    q = Quaternion(cos(pi/4), 0, sin(pi/4), 0)\n+    assert(trigsimp(q.to_rotation_matrix()) == Matrix([\n+        [0,  0,  1],\n+        [0,  1,  0],\n+       [-1,  0,  0]]))\n+\n+    # Testing with a 90-degree rotation around the z-axis\n+    q = Quaternion(cos(pi/4), 0, 0, sin(pi/4))\n+    assert(trigsimp(q.to_rotation_matrix()) == Matrix([\n+        [0, -1,  0],\n+        [1,  0,  0],\n+        [0,  0,  1]]))\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +164,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..b051b21 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1663,7 +1663,20 @@ def test_Mod():\n     assert Mod(Mod(x + 2, 4)*4, 4) == 0\n \n \n-def test_Mod_is_integer():\n+def test_issue_15493():\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    assert Mod(8*i, 4) == 0\n+    # New test cases\n+    assert Mod(9*i, 3) == 0  # multiple of divisor\n+    assert Mod(6*i, 3) == 0  # multiple of divisor, different multiplier\n+    assert Mod(7*i + 5, 7) == Mod(5, 7)  # general case\n+    assert Mod(10*i - 3*i, 7) == Mod(7*i, 7)  # simplifiable within the expression\n+    assert Mod(7*i + 6, 7) == 6  # nonzero constant part\n+    assert Mod(0, 3) == 0  # zero case\n+    assert Mod(3*i + 2, 3).subs({i: 1}) == 2  # substitution\n+    assert Mod(3*i**2, 3) == 0  # power case\n     p = Symbol('p', integer=True)\n     q1 = Symbol('q1', integer=True)\n     q2 = Symbol('q2', integer=True, nonzero=True)\n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..6ce5b84 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -75,6 +75,7 @@ def test_Min():\n     assert Min(nn, oo) == nn\n     assert Min(oo, nn) == nn\n     assert Min(p, p) == p\n+    from sympy import S, Symbol, oo, Min, Max, raises\n     assert Min(p, oo) == p\n     assert Min(oo, p) == p\n     assert Min(oo, oo) == oo\n@@ -85,7 +86,7 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +157,7 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..f4b417b 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,11 +1986,36 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n+def test_issue_15873():\n+    # Test for issue 15873\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None  # Original problem case\n \n-def test_issue_14392():\n+    # Additional Test Cases\n+    # Testing edge cases with similar structures\n+    e1 = (1 + I) + (1 - I)\n+    assert e1.is_zero is not False  # Should be zero or None\n+\n+    e2 = 1 + I + 1 - I - 2  # e2 simplifies to 0\n+    assert e2.is_zero is True\n+\n+    e3 = 1*I - 1*I\n+    assert e3.is_zero is True\n+\n+    # Uncertain or more complex cases\n+    a = symbols('a', real=True)\n+    e4 = a*I - a*I  # Should be zero for any real 'a'\n+    assert e4.is_zero is not False\n+\n+    e5 = a + I - a - I  # Simplification leads to zero\n+    assert e5.is_zero is True\n+\n+    # Expression that simplifies to zero when expanded\n+    e6 = (1 + I)*(1 - I) - 1 + I - I\n+    assert e6.expand().is_zero is True  # 0 should be zero\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..4091276 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -478,6 +478,34 @@ def test_logcombine_complex_coeff():\n         i + log(x**2)\n \n \n+from sympy import Symbol, posify\n+\n+def test_preserve_finite_assumption():\n+    # Testing issue related to finite assumption being removed by posify\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+\n+    # We expect the finite assumption to be preserved\n+    expected_assumptions = {\n+        'positive': True, 'zero': False, 'imaginary': False,\n+        'nonpositive': False, 'commutative': True, 'hermitian': True,\n+        'real': True, 'nonzero': True, 'nonnegative': True, \n+        'negative': False, 'complex': True, 'finite': True, 'infinite': False\n+    }\n+    assert eq.assumptions0 == expected_assumptions\n+\n+    # Additional tests for other assumptions that might be removed by posify\n+    for assumption in ['integer', 'rational', 'imaginary']:\n+        s = Symbol('s', **{assumption: True})\n+        eq, rep = posify(s)\n+        assert eq.assumptions0.get(assumption, None) == True\n+\n+    # Testing combined assumptions\n+    combined_symbol = Symbol('x', finite=True, integer=True)\n+    combined_posified, _ = posify(combined_symbol)\n+    assert combined_posified.assumptions0['finite'] == True\n+    assert combined_posified.assumptions0['integer'] == True\n+\n def test_issue_5950():\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n",
  "sympy__sympy-16766": "",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..739ad4c 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -48,7 +48,16 @@ def test_cython_wrapper_scalar_function():\n     assert source == expected\n \n \n-def test_cython_wrapper_outarg():\n+def test_cython_unused_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0  # x does not appear in the expression\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    assert f(np.array([[1.0], [2.0]])) == 1.0\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n     code_gen = CythonCodeWrapper(C99CodeGen())\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..627e400 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -248,8 +248,11 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n-\n-def test_decode_morse():\n+def test_encode_morse_numbers():\n+    # Test patches that include the improperly encoded \"1\" (issue description)\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('10') == '.----|-----'\n+    assert encode_morse('101') == '.----|-----|.----'\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..d9daff9 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,4 +1,7 @@\n-from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n+\n+from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos, I\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n \n@@ -175,8 +178,13 @@ def test_subsets():\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n \n-\n-def test_issue_5653():\n+def test_issue_12420():\n+    # Test cases from the original issue to ensure the fix is correct\n+    assert _sqrt_match(4 + I) == []\n+    expr = (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    assert sqrtdenest(expr) == expr\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..9aa507f 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,9 +1,11 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n+from sympy import sympify\n \n \n def test_point():\n@@ -103,6 +105,10 @@ def test_point():\n         Point(a.n(2), b.n(2), evaluate=False)\n     raises(ValueError, lambda: Point(1, 2) + 1)\n \n+    # Test multiplication with scalar sympified number\n+    assert p3 + p4 * sympify(2.0) == Point(2, 2)\n+    assert p3 + sympify(2.0) * p4 == Point(2, 2)  # This should not raise an exception\n+\n     # test transformations\n     p = Point(1, 0)\n     assert p.rotate(pi/2) == Point(0, 1)\n@@ -181,6 +187,10 @@ def test_point3D():\n         Point(a.n(2), b.n(2), c.n(2), evaluate=False)\n     raises(ValueError, lambda: Point3D(1, 2, 3) + 1)\n \n+    # Test multiplication with scalar sympified number for Point3D\n+    assert p3 + p4 * sympify(2.0) == Point3D(2, 2, 2)\n+    assert p3 + sympify(2.0) * p4 == Point3D(2, 2, 2)  # This should not raise an exception\n+\n     # test transformations\n     p = Point3D(1, 1, 1)\n     assert p.scale(2, 3) == Point3D(2, 3, 1)\n@@ -189,7 +199,7 @@ def test_point3D():\n     assert p.translate(z=1) == Point3D(1, 1, 2)\n     assert p.translate(*p.args) == Point3D(2, 2, 2)\n \n-    # Test __new__\n+    # Test __new__ on Point3D\n     assert Point3D(0.1, 0.2, evaluate=False, on_morph='ignore').args[0].is_Float\n \n     # Test length property returns correctly\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..c090871 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -473,6 +473,17 @@ def test_descent():\n     # supposed to be square-free\n     raises(TypeError, lambda: descent(4, 3))\n \n+from sympy import symbols\n+from sympy.solvers.diophantine import diophantine\n+\n+def test_issue_18186():\n+    x, y = symbols('x y')\n+    expr = y**4 + x**4 - 2**4 - 3**4\n+    expected_solutions = set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    # Test with symbols (x, y)\n+    assert diophantine(expr, syms=(x, y), permute=True) == expected_solutions\n+    # Test with symbols (y, x)\n+    assert diophantine(expr, syms=(y, x), permute=True) == expected_solutions\n \n def test_diophantine():\n     assert check_solutions((x - y)*(y - z)*(z - x))\n",
  "sympy__sympy-18763": "",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..4e20025 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -483,7 +483,33 @@ def test_geometry():\n     assert L == Line((0, 1), (1, 0)) and isinstance(L, Line)\n \n \n+from sympy import Symbol, sin, cos, exp, Add, Mul, Interval\n+from sympy.abc import x, y\n+...\n def test_kernS():\n+    # Basic operation test case (original test)\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+\n+    # Test edge cases\n+    # Case: Simple nesting and mul with negative\n+    assert kernS('-(x+1)') == -(x + 1)\n+    # Case: Multiplication distributed across addition inside parenthesis\n+    assert kernS('2*(x+y)') == 2*(x + y)\n+    # Case: Handling nested parenthesis\n+    assert kernS('(2*(x+1))/(3 + x/y)') == 2*(x + 1)/(3 + x/y)\n+    # Case: Mixed operators and nested structures\n+    assert kernS('x*(1-(2*y)) + 3/(x-2)') == x*(1 - 2*y) + 3/(x - 2)\n+    # Case: More complex nesting and distribution scenario\n+    assert kernS('3 + x*(1-(2*y)) + 3/(x-2)') == 3 + x*(1 - 2*y) + 3/(x - 2)\n+    # Case: Testing when kern is generated\n+    s = '2*(x+y)'\n+    kern = '_'\n+    while kern in s:\n+        kern += choice(string.ascii_letters + string.digits)\n+    transformed = s.replace(' ', kern)\n+    assert kernS(transformed) == 2*(x + y)\n+\n+    print('All new kernS test cases passed.')\n     s =   '-1 - 2*(-(-x + 1/x)/(x*(x - 1/x)**2) - 1/(x*(x - 1/x)))'\n     # when 1497 is fixed, this no longer should pass: the expression\n     # should be unchanged\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..775a7a3 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -106,7 +107,15 @@ def test_identity():\n         assert represent(IdentityOperator(n)) == eye(n)\n \n \n-def test_outer_product():\n+def test_dagger_identity_operator():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    \n+    D_O = Dagger(O)\n+    \n+    # Ensure that multiplying Dagger of an Operator with Identity returns the Dagger of the Operator\n+    assert D_O * I == D_O\n+    assert I * D_O == D_O\n     k = Ket('k')\n     b = Bra('b')\n     op = OuterProduct(k, b)\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..3fb0010 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -853,8 +853,16 @@ def test_generator_product():\n         w = g*w\n     assert w == p\n \n+from sympy.combinatorics import DihedralGroup\n \n-def test_sylow_subgroup():\n+def test_dihedral_group_sylow_subgroup_issue():\n+    G = DihedralGroup(18)\n+    S2 = G.sylow_subgroup(p=2)\n+    assert S2.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S2 = G.sylow_subgroup(p=2)\n+    assert S2.order() == 4\n     P = PermutationGroup(Permutation(1, 5)(2, 4), Permutation(0, 1, 2, 3, 4, 5))\n     S = P.sylow_subgroup(2)\n     assert S.order() == 4\n",
  "sympy__sympy-20154": "",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..a3477d0 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -575,8 +575,14 @@ def test_Float():\n     # from NumberSymbol\n     assert same_and_same_prec(Float(pi, 32), pi.evalf(32))\n     assert same_and_same_prec(Float(Catalan), Catalan.evalf())\n-\n-    # oo and nan\n+from sympy import S, Float\n+\n+def test_zero_not_false():\n+    # Test comparisons of zero with false\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n     u = ['inf', '-inf', 'nan', 'iNF', '+inf']\n     v = [oo, -oo, nan, oo, oo]\n     for i, a in zip(u, v):\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..c1ecc04 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -7,8 +8,49 @@ from sympy import (\n from sympy.core.basic import _aresame\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n+from sympy.functions.elementary.trigonometric import sinh, cosh, tanh\n+from sympy.functions.elementary.piecewise import Piecewise\n \n def test_subs():\n+    # Test for issue with unexpected PolynomialError in specific expressions\n+    \n+    # Setting up symbols and expressions as per the issue statement\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    \n+    # The expression from the issue text\n+    expr1 = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    \n+    # Ensure no error is raised\n+    try:\n+        result1 = expr1.subs({1: 1.0})\n+        assert True, \"Substitution did not raise an error.\"\n+    except PolynomialError:\n+        assert False, \"Substitution raised an unexpected PolynomialError.\"\n+    \n+    # Test variations mentioned in the issue:\n+    # Replacing sinh with cosh\n+    expr2 = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    try:\n+        result2 = expr2.subs({1: 1.0})\n+        assert True, \"Substitution did not raise an error with cosh.\"\n+    except PolynomialError:\n+        assert False, \"Substitution raised an unexpected PolynomialError with cosh.\"\n+        \n+    # Replacing sinh with tanh\n+    expr3 = exp(tanh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    try:\n+        result3 = expr3.subs({1: 1.0})\n+        assert True, \"Substitution did not raise an error with tanh.\"\n+    except PolynomialError:\n+        assert False, \"Substitution raised an unexpected PolynomialError with tanh.\"\n+        \n+    # Remove division by z, leaving just sinh(Piecewise)\n+    expr4 = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    try:\n+        result4 = expr4.subs({1: 1.0})\n+        assert True, \"Substitution did not raise an error without division.\"\n+    except PolynomialError:\n+        assert False, \"Substitution raised an unexpected PolynomialError without division.\"\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..f1eb75b 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -15,8 +15,25 @@ from sympy.abc import a, b, c, x, y, z\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n \n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n \n def test_monomials():\n+    # Test for issue with itermonomials using min_degrees\n+    x1, x2, x3 = symbols('x1 x2 x3')\n+    assert set(itermonomials([x1, x2, x3], 3, 3)) == {x1**3, x2**3, x3**3, x1*x2**2, x1**2*x2, x2*x3**2, x2**2*x3, x1*x3**2, x1**2*x3, x3**3, x2*x1*x3}\n+\n+    # Verify behavior when max_degrees is greater than min_degrees\n+    assert set(itermonomials([x1, x2], 4, 3)) == {x1**3, x2**3, x1**4, x1**3*x2, x1**2*x2**2, x1*x2**3, x2**4, x1**2, x2}\n+\n+    # Test with different number of variables\n+    assert set(itermonomials([x1], 3, 2)) == {x1**2, x1**3}\n+    assert set(itermonomials([x1, x2, x3, x], 2, 1)) == {x1, x2, x3, x, x*x1, x*x2, x*x3, x1*x2, x1*x3, x1*x, x2*x3, x2*x, x3*x}\n+\n+    # Test with non-commutative symbols\n+    i, j, k = symbols('i j k', commutative=False)\n+    assert set(itermonomials([i, j, k], 2, 2)) == {k*i, i**2, i*j, j*k, j*i, k**2, j**2, k*j, i*k}\n+    assert set(itermonomials([i, j, k], 3, 2)) == {j*k**2, i*k**2, k*i*j, k*i**2, k**2, j*k*j, k*j**2, i*k*i, i*j, j**2*k, i**2*j, j*i*k, j**3, i**3, k*j*i, j*k*i, j*i, k**2*j, j*i**2, k*j, k*j*k, i*j*i, j*i*j, i*j**2, j**2, k*i*k, i**2, j*k, i*k, i*k*j, k**3, i**2*k, j**2*i, k**2*i, i*j*k, k*i}\n \n     # total_degree tests\n     assert set(itermonomials([], 0)) == {S.One}\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..fbe26e4 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,8 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    # New test case to check argument invariance as per the issue\n+    assert st.func(*st.args) == st\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..e3fd470 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n from sympy.core.sympify import sympify\n+from sympy.core.parameters import evaluate\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n@@ -452,7 +454,26 @@ def test__normalize_dimension():\n         Point(1, 2, 0), Point(3, 4, 0)]\n \n \n-def test_direction_cosine():\n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        # Creating a 2D point with evaluate(False) should not raise an error\n+        p = Point(1, 2)\n+        assert p == Point2D(1, 2, evaluate=False)\n+        assert isinstance(p, Point2D)\n+\n+    # Check with evaluate=True and ensure it doesn't fail for standard usage\n+    p = Point(1, 2, evaluate=True)\n+    assert p == Point2D(1, 2)\n+    assert isinstance(p, Point2D)\n+\n+    # Check directly initiating Point2D\n+    p2d = Point2D(Integer(1), Integer(2))\n+    assert p2d == Point2D(1, 2)\n+    assert isinstance(p2d, Point2D)\n+\n+    # Negative test case: check that imaginary numbers still raise an error\n+    raises(ValueError, lambda: Point2D(S(1) + I, 2))\n     p1 = Point3D(0, 0, 0)\n     p2 = Point3D(1, 1, 1)\n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..b0470fa 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -31,6 +32,12 @@ def test_PythonCodePrinter():\n \n     assert prntr.doprint(x**y) == 'x**y'\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n+    assert prntr.doprint(Min(x, y)) == \"min(x, y)\"\n+    assert prntr.doprint(Max(x, y)) == \"max(x, y)\"\n+    assert prntr.doprint(Min(x, y, z)) == \"min(x, y, z)\"\n+    assert prntr.doprint(Max(x, y, z)) == \"max(x, y, z)\"\n+    assert prntr.doprint(Min(Min(x, y), z)) == \"min(min(x, y), z)\"\n+    assert prntr.doprint(Max(Max(x, y), z)) == \"max(max(x, y), z)\"\n     assert prntr.doprint(-Mod(x, y)) == '-(x % y)'\n     assert prntr.doprint(Mod(-x, y)) == '(-x) % y'\n     assert prntr.doprint(And(x, y)) == 'x and y'\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..9486343 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,26 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+\n+def test_lambdify_single_element_tuple():\n+    # Test lambdify with a single element tuple\n+    f_single_elem = lambdify([], (1,))\n+    assert f_single_elem() == (1,)\n+\n+    # Validate the generated source code has the correct tuple representation\n+    source_code_single = inspect.getsource(f_single_elem)\n+    assert 'return (1,)' in source_code_single\n+\n+    # Test lambdify with a tuple of multiple elements to ensure normal functionality\n+    f_multiple_elem = lambdify([], (1, 2))\n+    assert f_multiple_elem() == (1, 2)\n+\n+    # Validate the generated source code has the correct tuple representation\n+    source_code_multiple = inspect.getsource(f_multiple_elem)\n+    assert 'return (1, 2)' in source_code_multiple\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..ead0109 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n@@ -6,6 +7,7 @@ from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n+from sympy.core.function import Function, UndefinedFunction\n \n def test_Str():\n     a1 = Str('a')\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..ecde74e 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -261,8 +261,29 @@ def test_kahane_simplify1():\n     r = kahane_simplify(t)\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n+def test_kahane_leading_gamma_matrix_order():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    # Test case 1\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), f\"Failed test case 1: {r}\"\n+\n+    # Test case 2\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma)), f\"Failed test case 2: {r}\"\n \n-def test_gamma_matrix_class():\n+    # Additional cases for robustness:\n+    # Test case 3: Verify order preservation when gamma matrices are already simplified\n+    t = G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(G(rho)*G(sigma)), f\"Failed test case 3: {r}\"\n+\n+    # Test case 4: Verify behavior when no contracted indices exist\n+    t = G(mu)*G(nu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(t), f\"Failed test case 4: {r}\"\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..95b351a 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -30,6 +30,9 @@ def test_issue_10326():\n     assert Contains(-oo, Interval(-oo, oo)) == False\n \n \n+from sympy import Symbol, S, FiniteSet, Reals, Contains, Piecewise\n+from sympy.testing.pytest import raises\n+\n def test_binary_symbols():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -37,15 +40,21 @@ def test_binary_symbols():\n     assert Contains(x, FiniteSet(y, Eq(z, True))\n         ).binary_symbols == {y, z}\n \n-\n def test_as_set():\n     x = Symbol('x')\n     y = Symbol('y')\n-    # Contains is a BooleanFunction whose value depends on an arg's\n-    # containment in a Set -- rewriting as a Set is not yet implemented\n-    raises(NotImplementedError, lambda:\n-           Contains(x, FiniteSet(y)).as_set())\n+    \n+    assert Contains(x, FiniteSet(y)).as_set() == FiniteSet(y)\n+    assert Contains(x, S.Integers).as_set() == S.Integers\n+    assert Contains(x, S.Reals).as_set() == S.Reals\n+    \n+    # Check if an explicit boolean condition is produced\n+    assert Piecewise((6, Contains(x, S.Reals).as_set() == S.Reals), (7, True)) == Piecewise((6, True), (7, True))\n+    \n+    # Tests for invalid Contains usage to ensure errors are properly raised\n+    raises(NotImplementedError, lambda: Contains(x, FiniteSet(y, Eq(x, True))).as_set())\n+    raises(NotImplementedError, lambda: Contains(x, Piecewise((5, x > 1), (3, True))).as_set())\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..ad78f40 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -541,7 +541,29 @@ def test_issue_20288():\n     assert SI._collect_factor_and_dimension(expr) == (1 + E, Dimension(1))\n \n \n-def test_prefixed_property():\n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24213": "",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..5d58ff2 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -33,6 +34,11 @@ def test_homomorphism():\n     T = homomorphism(E, AlternatingGroup(4), E.generators, [c])\n     assert T.invert(c**2) == e**-1 #order(c) == 3 so c**2 == c**-1\n \n+    # Additional test for DihedralGroup to check homomorphism with inverted generators\n+    D3 = DihedralGroup(3)\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n     # FreeGroup -> FreeGroup\n     T = homomorphism(F, E, [a], [e])\n     assert T(a**-2*b**4*a**2).is_identity\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..9a34a57 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -249,7 +249,11 @@ def test_PolyElement_copy():\n     g[(1, 1, 1)] = 7\n     assert f != g\n \n+from sympy import symbols, ZZ\n+from sympy.polys.rings import ring\n+\n def test_PolyElement_as_expr():\n+    # Original test case to verify standard behavior\n     R, x, y, z = ring(\"x,y,z\", ZZ)\n     f = 3*x**2*y - x*y*z + 7*z**3 + 1\n \n@@ -270,6 +274,14 @@ def test_PolyElement_as_expr():\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n+    # Test with custom symbols\n+    U, V, W = symbols(\"u,v,w\")\n+    g_custom = 3*U**2*V - U*V*W + 7*W**3 + 1\n+    assert f.as_expr(U, V, W) == g_custom\n+\n+    # Test homogeneous symbols length to check error raising\n+    raises(ValueError, lambda: f.as_expr(U, V))\n+\n def test_PolyElement_from_expr():\n     x, y, z = symbols(\"x,y,z\")\n     R, X, Y, Z = ring((x, y, z), ZZ)\n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..711c69e 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -274,6 +274,8 @@ def test_convert_equals_signs():\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n \n+from sympy.parsing.sympy_parser import parse_expr\n+\n def test_parse_function_issue_3539():\n     x = Symbol('x')\n     f = Function('f')\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..10f9a66 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -34,6 +34,8 @@ from astropy.units.utils import is_effectively_unity\n         ([\"mag\"], u.mag),\n         ([\"mag(ct/s)\"], u.MagUnit(u.ct / u.s)),\n         ([\"dex\"], u.dex),\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.kpc**2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.W / (u.kpc**2))),\n         ([\"dex(cm s**-2)\", \"dex(cm/s2)\"], u.DexUnit(u.cm / u.s**2)),\n     ],\n )\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..249c158 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1889,6 +1889,18 @@ class OperationTests(OperationTestBase):\n         from_state = to_state\n         to_state = from_state.clone()\n         operation.state_forwards(app_label, to_state)\n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        \n+        test_obj = TestConstraint.objects.create(field_1=1, flag=True)\n+        self.assertEqual(TestConstraint.objects.get(id=test_obj.id), test_obj)\n+\n+        valid_objects = [TestConstraint(field_1=None, flag=False), TestConstraint(field_1=2, flag=False)]\n+        TestConstraint.objects.bulk_create(valid_objects)\n         Author = to_state.apps.get_model(app_label, 'Author')\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, from_state, to_state)\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..e42d58a 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -160,11 +160,28 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translation.get_language(), 'en')\n \n         with translation.override('nl'):\n+            # Test with incomplete URL pattern that involves optional groups\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/', 'nl'), '/nl/with-arguments/regular-argument/')\n+            self.assertEqual(translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'), '/nl/with-arguments/regular-argument/optional.html')\n             self.assertEqual(translate_url('/nl/gebruikers/', 'en'), '/en/users/')\n             self.assertEqual(translation.get_language(), 'nl')\n-\n-\n-class URLNamespaceTests(URLTestCaseBase):\n+    def test_translate_url_with_optional_parameters(self):\n+        # Setting up tests for URLs with optional named groups in patterns\n+        test_cases = [\n+            ('/regex_optional/1/2/', 'en', '/en/regex_optional/1/2/'),\n+            ('/regex_optional/1/', 'en', '/en/regex_optional/1/'),\n+        ]\n+        for original_url, target_lang, expected_url in test_cases:\n+            with self.subTest(original_url=original_url):\n+                self.assertEqual(translate_url(original_url, target_lang), expected_url)\n+        \n+        # Test edge case with missing optional parameters\n+        self.assertEqual(translate_url('/en/with-arguments/only-required/', 'nl'), '/nl/with-arguments/only-required/')\n+        self.assertEqual(translate_url('/en/with-arguments/only-required', 'nl'), '/nl/with-arguments/only-required')\n+        self.assertEqual(translate_url('/en/with-arguments/regular-argument/', 'nl'), '/nl/with-arguments/regular-argument/')\n+        self.assertEqual(translate_url('/en/with-arguments/regular-argument/', 'de'), '/de/with-arguments/regular-argument/')\n+        self.assertEqual(translate_url('/regex_optional/1/', 'nl'), '/nl/regex_optional/1/')\n+        self.assertEqual(translate_url('/regex_optional/1/2/', 'nl'), '/nl/regex_optional/1/2/')\n     \"\"\"\n     Tests if the translations are still working within namespaces.\n     \"\"\"\n",
  "django__django-12273": "diff --git a/tests/model_inheritance_regress/tests.py b/tests/model_inheritance_regress/tests.py\nindex d79faca..3a0b3ee 100644\n--- a/tests/model_inheritance_regress/tests.py\n+++ b/tests/model_inheritance_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Regression tests for Model inheritance behavior.\n \"\"\"\n@@ -14,6 +15,7 @@ from .models import (\n     MessyBachelorParty, ParkingLot, ParkingLot3, ParkingLot4A, ParkingLot4B,\n     Person, Place, Profile, QualityControl, Restaurant, SelfRefChild,\n     SelfRefParent, Senator, Supplier, TrainStation, User, Wholesaler,\n+    Item, Derived\n )\n \n \n",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..3203906 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -606,6 +606,13 @@ class DeletionTests(TestCase):\n \n class FastDeleteTests(TestCase):\n \n+    def test_fast_delete_all_no_subquery(self):\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Ensure no subqueries are used in the SQL for a full delete\n+        self.assertNotIn('SELECT', sql)\n+\n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n@@ -702,4 +709,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..8bf2854 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -24,8 +25,20 @@ class DecimalFieldTests(TestCase):\n         msg = '\u201cabc\u201d value must be a decimal number.'\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n+    def test_to_python_with_invalid_dict(self):\n+        f = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        with self.assertRaisesMessage(ValidationError, msg % {}):\n+            f.to_python({})\n \n-    def test_default(self):\n+    def test_to_python_with_various_invalid_types(self):\n+        f = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        tests = [set(), object(), complex(), []]\n+        for invalid in tests:\n+            with self.subTest(value=invalid):\n+                with self.assertRaisesMessage(ValidationError, msg % (invalid,)):\n+                    f.to_python(invalid)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..585fa64 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -7,8 +8,36 @@ from django.test import TestCase\n \n from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n \n+from django.db.models import Sum\n \n class PickleabilityTestCase(TestCase):\n+    def test_values_and_annotate_pickle(self):\n+        \"\"\"\n+        Test that pickling and unpickling a queryset using values() and annotate()\n+        returns the correct values as dicts.\n+        \"\"\"\n+        # Setup test data\n+        Happening.objects.create(name=\"Event A\", when=datetime.datetime(2021, 1, 1))\n+        Happening.objects.create(name=\"Event A\", when=datetime.datetime(2021, 2, 1))\n+        Happening.objects.create(name=\"Event B\", when=datetime.datetime(2021, 3, 1))\n+\n+        # Create a queryset using values() and annotate()\n+        qs = Happening.objects.values('name').annotate(latest_time=models.Max('when'))\n+\n+        # Pickle and unpickle the queryset\n+        reloaded_qs = Happening.objects.all()\n+        reloaded_qs.query = pickle.loads(pickle.dumps(qs.query))\n+\n+        # Assert that the returned objects are dictionaries\n+        results = list(reloaded_qs)\n+        self.assertIsInstance(results[0], dict)\n+\n+        # Assert the expected structure of the dictionaries\n+        expected_results = [\n+            {'name': 'Event A', 'latest_time': datetime.datetime(2021, 2, 1)},\n+            {'name': 'Event B', 'latest_time': datetime.datetime(2021, 3, 1)}\n+        ]\n+        self.assertEqual(results, expected_results)\n     @classmethod\n     def setUpTestData(cls):\n         Happening.objects.create()  # make sure the defaults are working (#20158)\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..27b0729 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -19,7 +19,16 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertIsNone(field.clean(''))\n         self.assertIsNone(field.clean(None))\n \n-    def test_invalid(self):\n+    def test_unicode_characters(self):\n+        field = JSONField()\n+        # Test Chinese characters\n+        self.assertEqual(field.prepare_value({'a': '\u4f60\u597d \u4e16\u754c'}), '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}')\n+        # Test emoji characters\n+        self.assertEqual(field.prepare_value({'a': '\ud83d\ude00\ud83d\udc31'}), '{\"a\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        # Test a combination of characters\n+        self.assertEqual(field.prepare_value([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]')\n+        # Test punctuation in unicode\n+        self.assertEqual(field.prepare_value('\u4f60\u597d\uff0c\u4e16\u754c'), '\"\u4f60\u597d\uff0c\u4e16\u754c\"')\n         field = JSONField()\n         with self.assertRaisesMessage(ValidationError, 'Enter a valid JSON.'):\n             field.clean('{some badly formed: json}')\n",
  "django__django-14404": "",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..9bf2644 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -657,8 +657,37 @@ class WriterTests(SimpleTestCase):\n \n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n+    def test_serialize_custom_field_and_mixin(self):\n+        \"\"\"\n+        Test serializing a model with a custom field and mixin while checking for proper imports.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, models.Model):\n+            name = MyField(primary_key=True)\n \n-    def test_simple_migration(self):\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    name=\"MyModel\",\n+                    fields=[\n+                        ('name', MyField(primary_key=True, serialize=False)),\n+                    ],\n+                    bases=(MyMixin, models.Model),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        result = self.safe_exec(output)\n+        self.assertIsNotNone(result)  # Check that we have a result\n+        self.assertIn(\"import app.models\", output)  # Check for custom model import\n+        self.assertIn(\"from django.db import models\", output)  # Check the import of 'models'\n         \"\"\"\n         Tests serializing a simple migration.\n         \"\"\"\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..4def404 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1637,9 +1637,35 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(len(qs), 6)\n \n+    def test_aggregate_with_default_after_annotate(self):\n+        # This test corresponds to the issue description.\n+        result = Book.objects.annotate(idx=F('id')).aggregate(Sum('id', default=0))\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregate_with_default_after_multiple_annotates(self):\n+        # Test with multiple annotations before aggregation\n+        result = Book.objects.annotate(\n+            idx=F('id'),\n+            double_id=F('id') * 2\n+        ).aggregate(total=Sum('double_id', default=0))\n+        self.assertEqual(result['total'], 9120)\n+\n     def test_exists_extra_where_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n+\n+    def test_aggregate_with_default_after_annotate(self):\n+        # This test corresponds to the issue description.\n+        result = Book.objects.annotate(idx=F('id')).aggregate(Sum('id', default=0))\n+        self.assertEqual(result['id__sum'], 4560)\n+\n+    def test_aggregate_with_default_after_multiple_annotates(self):\n+        # Test with multiple annotations before aggregation\n+        result = Book.objects.annotate(\n+            idx=F('id'),\n+            double_id=F('id') * 2\n+        ).aggregate(total=Sum('double_id', default=0))\n+        self.assertEqual(result['total'], 9120)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..cdc14b4 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2981,6 +2981,21 @@ class OperationTests(OperationTestBase):\n         new_state = project_state.clone()\n         operation.state_forwards(app_label, new_state)\n         # Rename index.\n+        self.assertIndexNameNotExists(table_name, \"old_pony_test_idx\")\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+        # Test backward (reverse rename)\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        # Validate old index is restored\n+        self.assertIndexNameExists(table_name, \"old_pony_test_idx\")\n+        self.assertIndexNameNotExists(table_name, \"new_pony_test_idx\")\n+        \n+        # Test reapplication of the rename\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+        self.assertIndexNameNotExists(table_name, \"old_pony_test_idx\")\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..28b25e2 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3497,7 +3497,59 @@ class FormFieldCallbackTests(SimpleTestCase):\n             )\n \n \n-class LocalizedModelFormTest(TestCase):\n+import django\n+from django.test import TestCase\n+from django import forms\n+from django.db import models\n+from django.forms import modelform_factory\n+\n+# Dummy model to avoid missing reference\n+class Person(models.Model):\n+    id = models.AutoField(primary_key=True)\n+    name = models.CharField(max_length=100)\n+\n+class ModelFormFieldCallbackTest(TestCase):\n+    def test_meta_formfield_callback(self):\n+        # This test case checks if the formfield_callback works when defined in Meta class\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class TestForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+                formfield_callback = callback\n+\n+        # Verify that formfield_callback from Meta is being used\n+        for field in TestForm.base_fields.values():\n+            self.assertIsInstance(field.widget, forms.Textarea)\n+\n+    def test_base_class_meta_inheritance(self):\n+        # This test case checks if formfield_callback inherited from base class Meta properly works\n+        def callback(db_field, **kwargs):\n+            return forms.CharField(widget=forms.Textarea)\n+\n+        class BaseForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = \"__all__\"\n+                formfield_callback = callback\n+\n+        DerivedForm = modelform_factory(model=Person, form=BaseForm)\n+\n+        # Verify that the callback carries through the factory function inheritance\n+        for field in DerivedForm.base_fields.values():\n+            self.assertIsInstance(field.widget, forms.Textarea)\n+\n+    def test_no_formfield_callback_default_behavior(self):\n+        # This checks the default behavior when no formfield_callback is declared\n+        class DefaultBehaviorForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+\n+        # Verify that without a specified callback, default widgets are used\n+        self.assertNotIsInstance(DefaultBehaviorForm.base_fields['name'].widget, forms.Textarea)\n     def test_model_form_applies_localize_to_some_fields(self):\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n             class Meta:\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..40a0fb2 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -6,6 +6,8 @@ import re\n from django.core import serializers\n from django.core.serializers.base import DeserializationError\n from django.core.serializers.json import DjangoJSONEncoder\n+from django.core import serializers\n+from django.db.models import Manager\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n@@ -258,7 +260,36 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             for obj in serializers.deserialize(\"json\", test_string, ignore=False):\n                 obj.save()\n \n-    def test_helpful_error_message_for_many2many_not_iterable(self):\n+    def test_serialization_with_custom_manager_using_select_related(self):\n+        class TestTagManager(Manager):\n+            def get_queryset(self):\n+                qs = super().get_queryset()\n+                qs = qs.select_related(\"master\")\n+                return qs\n+\n+        class TestTagMaster(models.Model):\n+            name = models.CharField(max_length=120)\n+\n+        class TestTag(models.Model):\n+            objects = TestTagManager()\n+            name = models.CharField(max_length=120)\n+            master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+        class Test(models.Model):\n+            name = models.CharField(max_length=120)\n+            tags = models.ManyToManyField(TestTag, blank=True)\n+\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test_instance = Test.objects.create(name=\"test\")\n+        test_instance.tags.add(tag)\n+\n+        # Attempt to serialize the instance, should not raise FieldError\n+        try:\n+            serial_data = serializers.serialize(\"json\", [test_instance])\n+            self.assertIn('\"model\": \"test\"', serial_data)\n+        except Exception as e:\n+            self.fail(f\"Serialization raised an exception: {e}\")\n         \"\"\"\n         Not iterable many-to-many field value throws a helpful error message.\n         \"\"\"\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..88fb851 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -217,7 +217,12 @@ def test_unpickle_canvas():\n     assert fig2.canvas is not None\n \n \n-def test_mpl_toolkits():\n+def test_dpi_doubling_issue_on_macosx():\n+    if platform.system() == \"Darwin\" and \"arm\" in platform.processor():\n+        fig = plt.figure(dpi=200)\n+        for _ in range(10):\n+            fig, dpi = pickle.loads(pickle.dumps((fig, fig.dpi)))\n+            assert dpi == 200\n     ax = parasite_axes.host_axes([0, 0, 1, 1])\n     assert type(pickle.loads(pickle.dumps(ax))) == parasite_axes.HostAxes\n \n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..2e8dd0f 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6586,7 +6586,12 @@ def test_integrate(dask):\n     assert isinstance(actual.data, type(da.data))\n \n     # along y\n-    actual = da.integrate(\"y\")\n+    # Test that calling integrate with 'dim' issues a FutureWarning\n+    with pytest.warns(FutureWarning, match=\"dim parameter is deprecated\"):\n+        da.integrate(dim=\"y\")\n+\n+    # Test using the new 'coord' parameter\n+    actual = da.integrate(coord=\"y\")\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..6c2da1c 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -131,7 +131,27 @@ def test_regex_error(capsys: CaptureFixture) -> None:\n     assert assertString in output.err\n \n \n-def test_csv_regex_error(capsys: CaptureFixture) -> None:\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo{1,3}\", [\"foo{1,3}\"]),\n+    (\"foo{2,5},bar{1,3}\", [\"foo{2,5}\", \"bar{1,3}\"]),\n+    (\"foo{1,3}\", [\"foo{1,3}\"]),\n+]\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are commas within quantifier expressions.\"\"\"\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgxs={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n     \"\"\"Check that we correctly error when an option is passed and one\n     of its comma-separated regular expressions values is an invalid regular expression.\n     \"\"\"\n",
  "pytest-dev__pytest-6197": "",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..532ae4d 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,11 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\"invalid_ident\", [\"None\", \"True\", \"False\"])\n+def test_invalid_idents(invalid_ident: str) -> None:\n+    with pytest.raises(ValueError):\n+        Expression.compile(invalid_ident)\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..ff300d3 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -258,5 +258,40 @@ def test_set_output_mro():\n \n     class C(A, B):\n         pass\n+    assert C().transform(None) == \"B\"\n \n-    assert C().transform(None) == \"B\"\n+import pandas as pd\n+from sklearn.base import BaseEstimator, TransformerMixin\n+from sklearn import set_config\n+from sklearn.pipeline import make_union\n+import pytest\n+from numpy.testing import assert_array_equal\n+\n+def test_feature_union_pandas_output():\n+    \"\"\"Test FeatureUnion with pandas output setting to ensure no errors occur.\"\"\"\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+    data[\"date\"] = index.date\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return pd.DataFrame(X[\"value\"].groupby(X[\"date\"]).sum(), columns=[\"value_sum\"])\n+\n+    # Test for pandas output\n+    set_config(transform_output=\"pandas\")\n+    union_pandas = make_union(MyTransformer())\n+    transformed_pandas = union_pandas.fit_transform(data)\n+    expected_pandas_index = pd.Index([pd.Timestamp(\"2020-01-01\"),\n+                                      pd.Timestamp(\"2020-01-02\"),\n+                                      pd.Timestamp(\"2020-01-03\"),\n+                                      pd.Timestamp(\"2020-01-04\")])\n+    assert_array_equal(transformed_pandas.index, expected_pandas_index)\n+\n+    # Test for default output to ensure original functionality\n+    set_config(transform_output=\"default\")\n+    union_default = make_union(MyTransformer())\n+    transformed_default = union_default.fit_transform(data)\n+    # Perform additional checks or assertions for the default output if needed\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..b004a08 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -13,7 +13,31 @@ import pytest\n from sphinx import addnodes\n \n \n+from sphinx.testing.util import assert_node\n+from sphinx import addnodes\n+from sphinx.addnodes import pending_xref\n+from sphinx.util.docutils import nodes\n+\n @pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n+def test_autodoc_none_link(app, status, warning):\n+    app.env.temp_data['annotations'] = {'module1.f1':\n+        {'return': 'None'}, 'module1.f2': {'return': 'int'}}\n+\n+    text = \".. py:function:: f1() -> None\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, ([addnodes.desc, (addnodes.desc_signature, [\n+        [addnodes.desc_name, \"f1\"],\n+        addnodes.desc_parameterlist,\n+        [addnodes.desc_returns, pending_xref, \"None\"]\n+    ])]))\n+\n+    text = \".. py:function:: f2() -> int\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, ([addnodes.desc, (addnodes.desc_signature, [\n+        [addnodes.desc_name, \"f2\"],\n+        addnodes.desc_parameterlist,\n+        [addnodes.desc_returns, pending_xref, \"int\"]\n+    ])]))\n def test_autodoc(app, status, warning):\n     app.builder.build_all()\n \n@@ -30,4 +54,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..ccd821a 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1333,6 +1333,32 @@ param1 : :class:`MyClass <name.space.MyClass>` instance\n         self.assertEqual(expected, actual)\n \n         config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\n+\"\"\"\n+        # Testing with napoleon_use_param set to False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Testing with napoleon_use_param set to True\n         actual = str(NumpyDocstring(docstring, config))\n         expected = \"\"\"\\\n :param param1:\n@@ -1358,6 +1384,32 @@ param1 : MyClass instance\n         config = Config(napoleon_use_param=True)\n         actual = str(NumpyDocstring(dedent(docstring), config))\n         expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\n+\"\"\"\n+        # Testing with napoleon_use_param set to False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Testing with napoleon_use_param set to True\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n :param param1:\n :type param1: :class:`MyClass instance`\n \"\"\"\n@@ -1924,6 +1976,32 @@ definition_after_normal_text : int\n :type definition_after_normal_text: :class:`int`\n \"\"\"\n         config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+:param x1: Input arrays, description of ``x1``, ``x2``.\n+:type x1: :class:`array_like`\n+:param x2: Input arrays, description of ``x1``, ``x2``.\n+:type x2: :class:`array_like`\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_multiple_parameters_optional(self):\n+        docstring = \"\"\"\\\n+Parameters\n+----------\n+x1, x2 : array_like, optional\n+    Input arrays, description of ``x1``, ``x2``.\n+\n+\"\"\"\n+        # Testing with napoleon_use_param set to False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Parameters: **x1, x2** (:class:`array_like`, *optional*) -- Input arrays, description of ``x1``, ``x2``.\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Testing with napoleon_use_param set to True\n         actual = str(NumpyDocstring(docstring, config))\n         self.assertEqual(expected, actual)\n \n",
  "sphinx-doc__sphinx-8551": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex fd4bdc4..99fd3fe 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -773,6 +773,43 @@ def test_pydecoratormethod_signature(app):\n     assert 'deco' in domain.objects\n     assert domain.objects['deco'] == ('index', 'deco', 'method')\n \n+@pytest.mark.sphinx(freshenv=True)\n+def test_ambiguous_class_lookup(app):\n+    # This is to test whether the ambiguous lookup warning is resolved or not\n+    text = (\n+        \".. py:class:: mod.A\\n\"\n+        \".. py:class:: mod.submod.A\\n\"\n+\n+        \".. py:function:: f()\\n\"\n+        \"   :param mod.A a:\\n\"\n+        \"   :param mod.submod.A b:\\n\"\n+        \"   :rtype: mod.A\\n\"\n+        \"   :rtype: mod.submod.A\\n\"\n+\n+        \".. py:currentmodule:: mod\\n\"\n+\n+        \".. py:function:: f()\\n\"\n+        \"   :param A a:\\n\"\n+        \"   :param mod.A b:\\n\"\n+        \"   :param mod.submod.A c:\\n\"\n+        \"   :rtype: A\\n\"\n+        \"   :rtype: mod.A\\n\"\n+        \"   :rtype: mod.submod.A\\n\"\n+\n+        \".. py:currentmodule:: mod.submod\\n\"\n+\n+        \".. py:function:: f()\\n\"\n+        \"   :param A a:\\n\"\n+        \"   :param mod.A b:\\n\"\n+        \"   :param mod.submod.A c:\\n\"\n+        \"   :rtype: A\\n\"\n+    )\n+\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    warnings = app._warning.getvalue()\n+    assert \"more than one target found for cross-reference 'A'\" not in warnings, warnings\n+\n \n @pytest.mark.sphinx(freshenv=True)\n def test_module_index(app):\n",
  "sphinx-doc__sphinx-8593": "diff --git a/tests/roots/test-ext-autodoc/target/private.py b/tests/roots/test-ext-autodoc/target/private.py\nindex 677b469..88f56ae 100644\n--- a/tests/roots/test-ext-autodoc/target/private.py\n+++ b/tests/roots/test-ext-autodoc/target/private.py\n@@ -1,11 +1,15 @@\n+\n def private_function(name):\n     \"\"\"private_function is a docstring().\n-\n+PRIVATE_CONSTANT = None  #: :meta private:\n+_public_constant = None  #: :meta public:\n     :meta private:\n     \"\"\"\n-\n+PRIVATE_CONSTANT = None  #: :meta private:\n+_public_constant = None  #: :meta public:\n def _public_function(name):\n     \"\"\"public_function is a docstring().\n-\n+PRIVATE_CONSTANT = None  #: :meta private:\n+_public_constant = None  #: :meta public:\n     :meta public:\n-    \"\"\"\n+    \"\"\"\n",
  "sphinx-doc__sphinx-9230": "",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..34387f2 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1008,6 +1008,92 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+def test_info_field_list_multiple_types(app):\n+    text = (\".. py:function:: func\\n\"\n+            \"\\n\"\n+            \"   :param value: a value\\n\"\n+            \"   :type value: int | str | float\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    field_body = doctree[1][1][0][0][1][0]\n+    assert_node(field_body, ([nodes.paragraph, ([addnodes.literal_strong, \"value\"], \n+                                                \" (\",\n+                                                [pending_xref, addnodes.literal_emphasis, \"int\"], \n+                                                [addnodes.literal_emphasis, \" | \"], \n+                                                [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                                                [addnodes.literal_emphasis, \" | \"], \n+                                                [pending_xref, addnodes.literal_emphasis, \"float\"],\n+                                                \")\",\n+                                                \" -- \", \n+                                                \"a value\")]))\n+    assert_node(field_body[0][2], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"int\")\n+    assert_node(field_body[0][4], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"str\")\n+    assert_node(field_body[0][6], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"float\")\n+\n+def test_info_field_list_callable_type(app):\n+    text = (\".. py:function:: process\\n\"\n+            \"\\n\"\n+            \"   :param handler: a handler\\n\"\n+            \"   :type handler: Callable[[int], str] | None\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    field_body = doctree[1][1][0][0][1][0]\n+    assert_node(field_body, ([nodes.paragraph, ([addnodes.literal_strong, \"handler\"], \n+                                                \" (\",\n+                                                [pending_xref, addnodes.literal_emphasis, \"Callable\"], \n+                                                [addnodes.literal_emphasis, \" | \"], \n+                                                [pending_xref, addnodes.literal_emphasis, \"None\"],\n+                                                \")\",\n+                                                \" -- \", \n+                                                \"a handler\")]))\n+    assert_node(field_body[0][2], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"Callable\")\n+    assert_node(field_body[0][4], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"None\")\n+\n+def test_info_field_list_invalid_type(app):\n+    text = (\".. py:function:: invalid\\n\"\n+            \"\\n\"\n+            \"   :param foo: invalid type\\n\"\n+            \"   :type foo: NotAType\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+\n+def test_info_field_list_nested_unions(app):\n+    text = (\".. py:function:: complex_func\\n\"\n+            \"\\n\"\n+            \"   :param complex: a complex type\\n\"\n+            \"   :type complex: (int | str) | list | dict\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    field_body = doctree[1][1][0][0][1][0]\n+    assert_node(field_body, ([nodes.paragraph, ([addnodes.literal_strong, \"complex\"], \n+                                                \" (\",\n+                                                [pending_xref, addnodes.literal_emphasis, \"int\"], \n+                                                [addnodes.literal_emphasis, \" | \"], \n+                                                [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                                                [addnodes.literal_emphasis, \" | \"], \n+                                                [pending_xref, addnodes.literal_emphasis, \"list\"],\n+                                                [addnodes.literal_emphasis, \" | \"], \n+                                                [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                                                \")\",\n+                                                \" -- \", \n+                                                \"a complex type\")]))\n+    assert_node(field_body[0][2], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"int\")\n+    assert_node(field_body[0][4], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"str\")\n+    assert_node(field_body[0][6], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"list\")\n+    assert_node(field_body[0][8], pending_xref, refdomain=\"py\", reftype=\"class\", reftarget=\"dict\")\n+\n \n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n",
  "sphinx-doc__sphinx-9673": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex aa0401e..c1a0cdc 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -833,6 +833,25 @@ def test_autodoc_typehints_description(app):\n             '   docstring\\n'\n             in context)\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_typehints_description_target': 'documented',\n+                                   'napoleon_google_docstring': True})\n+def test_autodoc_with_google_style_return_type(app):\n+    # Test if return type appears in Google style docstring with autodoc_typehints_description_target set to \"documented\"\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autofunction:: target.typehints.decr\\n'\n+    )\n+    app.build()\n+    content = (app.outdir / 'index.txt').read_text()\n+    assert ('target.typehints.decr(a, b=1)\\n'\n+            '\\n'\n+            '   Returns:\\n'\n+            '      decremented number\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      int\\n'\n+            in content)\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..31c5e40 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1074,7 +1074,29 @@ def test_conditionset_equality():\n     assert solveset(Eq(tan(x), y), x) == ConditionSet(x, Eq(tan(x), y), S.Complexes)\n \n \n-def test_solveset_domain():\n+def test_issue_18188():\n+    from sympy import cos, sin, Eq, Reals, ConditionSet, symbols\n+    x, n = symbols('x n')\n+\n+    # Test case for the original issue\n+    result1 = Eq(n * cos(n) - 3 * sin(n), 0)\n+    assert result1.as_set() == ConditionSet(n, Eq(n * cos(n) - 3 * sin(n), 0), Reals)\n+\n+    # Additional test cases to verify similar functionality\n+    result2 = Eq(x**2 + sqrt(x*2) + sin(x), 0)\n+    assert result2.as_set() == ConditionSet(x, Eq(sqrt(2)*sqrt(x) + x**2 + sin(x), 0), Reals)\n+\n+    # Variation using more complex functions\n+    result3 = Eq(x**2 + cos(x) + log(x), 0)\n+    assert result3.as_set() == ConditionSet(x, Eq(x**2 + cos(x) + log(x), 0), Reals)\n+\n+    # Edge case with trivial zero equation\n+    result4 = Eq(0, 0)\n+    assert result4.as_set() == Reals\n+\n+    # Testing with an equation that already has a solutionset representation\n+    result5 = Eq(sin(x), 0)\n+    assert solveset(result5, x, domain=S.Reals) == imageset(Lambda(n, n * pi), S.Integers)\n     x = Symbol('x')\n \n     assert solveset(x**2 - x - 6, x, Interval(0, oo)) == FiniteSet(3)\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..52a9b40 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3242,7 +3242,13 @@ def test_keep_coeff():\n     assert _keep_coeff(x + 1, S(2)) == u\n \n \n-def test_poly_matching_consistency():\n+from sympy import symbols, factor, I\n+\n+def test_factor_with_extension_dropping():\n+    x, y = symbols('x y')\n+    z = (x - 1) * (y - 1)\n+    assert factor(z) == (x - 1) * (y - 1)\n+    assert factor(z, extension=[I]) == (x - 1) * (y - 1)\n     # Test for this issue:\n     # https://github.com/sympy/sympy/issues/5514\n     assert I * Poly(x, x) == Poly(I*x, x)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..0c90c77 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -25,6 +26,18 @@ b21 = Basic(b2, b1)\n def test__aresame():\n     assert not _aresame(Basic([]), Basic())\n     assert not _aresame(Basic([]), Basic(()))\n+\n+def test_symbol_no_dict():\n+    from sympy import Symbol\n+    \n+    s = Symbol('s')\n+    # Ensure that '__dict__' is not present in a Symbol object using slots\n+    with raises(AttributeError):\n+        _ = s.__dict__\n+\n+    # Verify the usage of slots is effective\n+    assert not hasattr(s, '__dict__')\n+    assert hasattr(s, '__slots__')\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..9b6be7d 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -369,8 +369,35 @@ def test_Rational_new():\n     assert n.q == 4\n     assert n.p == -2\n \n-\n-def test_Number_new():\n+def test_issue_rational_string_input():\n+    from sympy import Rational\n+    # Test cases for the specific issue reported\n+    assert Rational('0.5', '100') == Rational(1, 200), \"Failed with two string arguments\"\n+    assert Rational('0.5', 100) == Rational(1, 200), \"Failed with mixed string and int\"\n+    assert Rational(0.5, '100') == Rational(1, 200), \"Failed with mixed float and string\"\n+\n+    # Additional test cases to ensure proper functionality\n+    assert Rational('1.75', '2') == Rational(7, 8), \"Failed with two string arguments, fraction\"\n+    assert Rational('1.5') == Rational(3, 2), \"Failed with single string argument\"\n+    assert Rational(1.5, 2) == Rational(3, 4), \"Failed with float and int\"\n+    assert Rational('3.5/2') == Rational(7, 4), \"Failed with string fraction format\"\n+    assert Rational('100/200') == Rational(1, 2), \"Failed with simplifiable string fraction\"\n+\n+    # Ensure behavior hasn't regressed for correct inputs\n+    assert Rational(1, 2) == Rational('1/2')\n+    assert Rational('3/4') == Rational(3, 4)\n+    assert Rational('8') == Rational(8)\n+\n+    # Verifications with non-Rational inputs\n+    try:\n+        Rational('pi')\n+    except TypeError:\n+        pass  # Expected as 'pi' is not a valid Rational\n+    \n+    try:\n+        Rational('2/0')\n+    except ZeroDivisionError:\n+        pass  # Expected as denominator cannot be zero\n     \"\"\"\"\n     Test for Number constructor\n     \"\"\"\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..8897322 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,21 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_boundwidget_id_for_label_choice_widget(self):\n+        \"\"\"\n+        When using a widget like CheckboxSelectMultiple, the id_for_label\n+        property should reflect the 'id' from widget's options if set.\n+        \"\"\"\n+        class ChoiceForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'Option A'), ('b', 'Option B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'option'})\n+            )\n+\n+        form = ChoiceForm(auto_id='option_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'option_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'option_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..633351c 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,11 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..ad5cdb6 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -147,6 +147,21 @@ def test_multi_target_sample_weights():\n     X_test = [[1.5, 2.5, 3.5], [3.5, 4.5, 5.5]]\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n+def test_cross_val_predict_with_predict_proba():\n+    # Test predict_proba with cross_val_predict on MultiOutputClassifier\n+    X, Y = make_multilabel_classification()\n+\n+    # Using LinearDiscriminantAnalysis since it supports predict_proba\n+    mo_lda = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+    pred = cross_val_predict(mo_lda, X, Y, cv=5)  # Should work without errors\n+    pred_proba = cross_val_predict(mo_lda, X, Y, cv=5, method='predict_proba')  # Should also work without errors\n+\n+    # Assert correct dimensions: predictions and predict_proba should match input\n+    assert pred.shape == Y.shape\n+    assert len(pred_proba) == mo_lda.estimators_[0].classes_.shape[0]\n+    for output_prob in pred_proba:\n+        assert output_prob.shape[1] == mo_lda.estimators_[0].classes_.shape[0]  # Make sure we have probability for each class\n+\n \n # Import the data\n iris = datasets.load_iris()\n",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..c6eaab9 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -171,6 +171,17 @@ def test_restify_broken_type_hints():\n \n \n def test_stringify():\n+    # Test for inherited mocked classes\n+    with mock(['mocked.module']):\n+        import mocked\n+        class BaseClass:\n+            pass\n+        \n+        class InheritedClass(BaseClass):\n+            pass\n+\n+        assert restify(InheritedClass) == ':py:class:`mocked.module.BaseClass.InheritedClass`', \"Base class should be fully qualified\"\n+        assert stringify(InheritedClass) == 'mocked.module.BaseClass.InheritedClass', \"Base class should be fully qualified\"\n     assert stringify(int) == \"int\"\n     assert stringify(str) == \"str\"\n     assert stringify(None) == \"None\"\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..d3aed33 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,18 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    n = Symbol('n', integer=True)\n+    k = Symbol('k', integer=True)\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2  # Original test case\n+\n+    # Additional test cases to thoroughly test the fix\n+    assert p.subs(n, 1).doit() == S(2)  # (1 + 1/2**0) = 2\n+    assert p.subs(n, 3).doit() == S(35)/4  # (3 + 2^0) * (3 + 2^(-1)) * (3 + 2^(-2)) = 35/4\n+    assert p.subs(n, 0).doit() == S(1)  # Empty product\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +369,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}