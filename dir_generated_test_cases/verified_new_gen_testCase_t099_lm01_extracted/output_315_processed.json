{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..8a8b890 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,6 +55,36 @@ compound_models = {\n             )\n }\n \n+def test_separability_matrix_nested_compound():\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+    from numpy.testing import assert_array_equal\n+\n+    # Simple compound model\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    expected_simple_cm = np.array([[ True, False],\n+                                   [False,  True]])\n+    separability_simple_cm = separability_matrix(cm)\n+    assert_array_equal(separability_simple_cm, expected_simple_cm)\n+    \n+    # More complex compound model\n+    complex_cm = m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)\n+    expected_complex_cm = np.array([[ True,  True, False, False],\n+                                    [ True,  True, False, False],\n+                                    [False, False,  True, False],\n+                                    [False, False, False,  True]])\n+    separability_complex_cm = separability_matrix(complex_cm)\n+    assert_array_equal(separability_complex_cm, expected_complex_cm)\n+\n+    # Nested compound model\n+    nested_cm = m.Pix2Sky_TAN() & cm\n+    expected_nested_cm = np.array([[ True,  True, False, False],\n+                                   [ True,  True, False, False],\n+                                   [False, False,  True, False],\n+                                   [False, False, False,  True]])\n+    separability_nested_cm = separability_matrix(nested_cm)\n+    assert_array_equal(separability_nested_cm, expected_nested_cm)\n+\n \n def test_coord_matrix():\n     c = _coord_matrix(p2, 'left', 2)\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "diff --git a/astropy/io/fits/tests/test_connect.py b/astropy/io/fits/tests/test_connect.py\nindex 00deafe..6a3852e 100644\n--- a/astropy/io/fits/tests/test_connect.py\n+++ b/astropy/io/fits/tests/test_connect.py\n@@ -1,3 +1,8 @@\n+\n+def test_is_fits_no_extension():\n+    \"\"\"Test for empty args list which previously caused an IndexError\"\"\"\n+    assert not connect.is_fits(\"write\", \"bububu.ecsv\", None, *[], **{})\n+\n import gc\n import warnings\n \n@@ -7,7 +12,7 @@ from numpy.testing import assert_allclose, assert_array_equal\n \n from astropy import units as u\n from astropy.io import fits\n-from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu\n+from astropy.io.fits import BinTableHDU, HDUList, ImageHDU, PrimaryHDU, table_to_hdu, connect\n from astropy.io.fits.column import (\n     _fortran_to_python_format,\n     _parse_tdisp_format,\n",
  "astropy__astropy-14508": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex 6bdf92c..e2ca6bd 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,6 +137,52 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n+    def test_floating_point_string_representation_card(self):\n+        \"\"\"\n+        Ensures Card formats float values with the correct precision, avoiding\n+        comment truncation\n+\n+        Regression test for https://github.com/astropy/astropy/issues/14507\n+        \"\"\"\n+        k = \"HIERARCH ABC DEF GH IJKLMN\"\n+        com = \"[m] abcdef ghijklm nopqrstu vw xyzab\"\n+        c = fits.Card(k, 0.009125, com)\n+        expected_str = f\"{k} = 0.009125 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, 8.95, com)\n+        expected_str = f\"{k} = 8.95 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -99.9, com)\n+        expected_str = f\"{k} = -99.9 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+    def test_floating_point_edge_cases(self):\n+        \"\"\"Test Card with edge floating point values\"\"\"\n+\n+        k = \"HIERARCH EDGE FLOAT TEST\"\n+        com = \"Testing edge case float values\"\n+\n+        # Test with a very small float value\n+        c = fits.Card(k, 1e-30, com)\n+        expected_str = f\"{k} = 1E-30 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with zeros in varying formats\n+        c = fits.Card(k, 0.0, com)\n+        expected_str = f\"{k} = 0 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        c = fits.Card(k, -0.0, com)\n+        expected_str = f\"{k} = -0 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n+        # Test with a very large float value\n+        c = fits.Card(k, 1e+30, com)\n+        expected_str = f\"{k} = 1E+30 / {com}\"\n+        assert str(c)[: len(expected_str)] == expected_str\n+\n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n",
  "astropy__astropy-14539": "",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..d5d5947 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -88,8 +88,31 @@ def test_inherit_docstrings():\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n \n+def test_inherit_docstrings():\n+    class Base(metaclass=misc.InheritDocstrings):\n+        def __call__(self, *args):\n+            \"FOO\"\n+            pass\n+    \n+        @property\n+        def bar(self):\n+            \"BAR\"\n+            return 0\n+\n+    class Subclass(Base):\n+        def __call__(self, *args):\n+            pass\n+        \n+        @property\n+        def bar(self):\n+            return 42\n+\n+    if Base.__call__.__doc__ is not None:\n+        # TODO: Maybe if __doc__ is None this test should be skipped instead?\n+        assert Subclass.__call__.__doc__ == \"FOO\"\n \n-def test_set_locale():\n+    if Base.bar.__doc__ is not None:\n+        assert Subclass.bar.__doc__ == \"BAR\"\n     # First, test if the required locales are available\n     current = locale.setlocale(locale.LC_ALL)\n     try:\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "diff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\nindex d95b776..df1802a 100644\n--- a/astropy/units/tests/test_units.py\n+++ b/astropy/units/tests/test_units.py\n@@ -172,7 +172,15 @@ def test_multiple_solidus():\n         u.Unit(\"m/s/kg\", format=\"vounit\")\n \n \n-def test_unknown_unit3():\n+import astropy.units as u\n+import pytest\n+\n+def test_none_equality():\n+    # Test that an UnrecognizedUnit does not equal None and comparison does not raise an error\n+    unit_none = u.Unit(\"UNRECOGNIZED\", parse_strict='silent')\n+    assert unit_none != None  # Should not raise and should be False\n+    assert not (unit_none == None)  # Explicit way to assert it is False\n+    assert unit_none not in (None, u.m)  # Verify it's not mistakenly in a collection containing None.\n     unit = u.Unit(\"FOO\", parse_strict='silent')\n     assert isinstance(unit, u.UnrecognizedUnit)\n     assert unit.name == \"FOO\"\n",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..cf2f065 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -69,7 +69,17 @@ def test_minversion():\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n     bad_versions = ['1', '1.2rc1']\n+\n+    special_case_versions = [\n+        ('1.14dev', '1.14.3', False),\n+        ('1.14dev', '1.14.0', True),\n+        ('1.14', '1.14dev', True)\n+    ]\n+\n+    for version, current_version, expected in special_case_versions:\n+        test_module.__version__ = current_version\n+        assert minversion(test_module, version) == expected\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..50bd9c2 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -93,13 +93,47 @@ class TestHeaderFunctions(FitsTestCase):\n         c = fits.Card('nullstr', '')\n         assert str(c) == _pad(\"NULLSTR = ''\")\n \n-    def test_boolean_value_card(self):\n-        \"\"\"Test Card constructor with boolean value\"\"\"\n+    def test_card_from_bytes(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object (assuming latin-1 encoding).\n+        \"\"\"\n+        c = fits.Card.fromstring(b\"KEYWORD = 'value' / comment\")\n+        assert c.keyword == 'KEYWORD'\n+        assert c.value == 'value'\n+\n+    def test_card_fromstring_unicode(self):\n+        \"\"\"\n+        Test loading a Card from a `str` object.\n+        \"\"\"\n+        c = fits.Card.fromstring(\"KEYWORD = 'value' / comment\")\n+        assert c.keyword == 'KEYWORD'\n+        assert c.value == 'value'\n \n-        c = fits.Card(\"abc\", True)\n-        assert str(c) == _pad(\"ABC     =                    T\")\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string.\n+\n+        See https://github.com/astropy/astropy/issues/8706\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read())\n+        \n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n+\n+    def test_header_fromstring_unicode(self):\n+        \"\"\"\n+        Test reading a Header from a `str` string.\n+        \"\"\"\n+        with open(self.data('test0.fits'), 'r') as fobj:\n+            pri_hdr_from_unicode = fits.Header.fromstring(fobj.read())\n \n-        c = fits.Card.fromstring('ABC     = F')\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_unicode['NAXIS']\n+        assert pri_hdr == pri_hdr_from_unicode\n+        assert pri_hdr.tostring() == pri_hdr_from_unicode.tostring()\n         assert c.value is False\n \n     def test_long_integer_value_card(self):\n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..f05b94a 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -149,8 +149,29 @@ class TestQuantityCreation:\n \n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n-\n-    def test_copy(self):\n+        \n+    def test_preserve_specific_float_dtypes(self):\n+        \"\"\"Test that np.float16 does not automatically upcast to np.float64\"\"\"\n+        # Preserving np.float16\n+        a1_16 = np.array([1.0, 2.0], dtype=np.float16)\n+        q1_16 = u.Quantity(a1_16, u.km)\n+        assert q1_16.dtype == a1_16.dtype, f\"Expected dtype {a1_16.dtype}, got {q1_16.dtype}\"\n+\n+        # Preserving np.float32\n+        a1_32 = np.array([1.0, 2.0], dtype=np.float32)\n+        q1_32 = u.Quantity(a1_32, u.km)\n+        assert q1_32.dtype == a1_32.dtype, f\"Expected dtype {a1_32.dtype}, got {q1_32.dtype}\"\n+\n+        # Preserving np.float64\n+        a1_64 = np.array([1.0, 2.0], dtype=np.float64)\n+        q1_64 = u.Quantity(a1_64, u.km)\n+        assert q1_64.dtype == a1_64.dtype, f\"Expected dtype {a1_64.dtype}, got {q1_64.dtype}\"\n+\n+        # Preserving np.float128 if available\n+        if hasattr(np, 'float128'):\n+            a1_128 = np.array([1.0, 2.0], dtype=np.float128)\n+            q1_128 = u.Quantity(a1_128, u.km)\n+            assert q1_128.dtype == a1_128.dtype, f\"Expected dtype {a1_128.dtype}, got {q1_128.dtype}\"\n \n         # By default, a new quantity is constructed, but not if copy=False\n \n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..8990c22 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -217,6 +217,19 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git://example.com/', None),\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n+    # Test cases to verify invalid characters in URL userinfo (username:password)\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n+\n+    # Valid cases with encoded characters in the username and password\n+    (URLValidator(), 'http://foo%3Abar%40baz@example.com', None),\n+    (URLValidator(), 'http://%7Euser:pass%23word@hostname/', None),\n+\n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n     # Trailing newlines not accepted\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n",
  "django__django-10880": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 491ba54..7d51bfc 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -9,6 +10,7 @@ from django.db.models import (\n     Max, Min, Sum, Value,\n )\n from django.test import TestCase\n+from django.db.models.expressions import Case, When\n from django.test.utils import Approximate, CaptureQueriesContext\n from django.utils import timezone\n \n@@ -389,7 +391,46 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n-    def test_count_star(self):\n+    def test_count_distinct_expression(self):\n+        # This test validates that the syntax error from combining Case and distinct=True is resolved.\n+        # It attempts to count distinct ratings for books with pages > 300.\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(\n+                Case(\n+                    When(pages__gt=300, then='rating'),\n+                ),\n+                distinct=True\n+            ),\n+        )\n+        # Assuming there are 4 distinct ratings for books with pages > 300 in the test data.\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n+\n+    def test_count_distinct_expression_no_matches(self):\n+        # This test case checks the condition where no records satisfy the Case condition.\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(\n+                Case(\n+                    When(pages__gt=1000, then='rating'),\n+                ),\n+                distinct=True\n+            ),\n+        )\n+        # Assuming no books have more than 1000 pages, the count should be 0.\n+        self.assertEqual(aggs['distinct_ratings'], 0)\n+\n+    def test_count_distinct_expression_multiple_conditions(self):\n+        # Test with multiple conditions in Case.\n+        aggs = Book.objects.aggregate(\n+            distinct_ratings=Count(\n+                Case(\n+                    When(pages__gt=300, then='rating'),\n+                    When(pages__lt=100, then='rating'),\n+                ),\n+                distinct=True\n+            ),\n+        )\n+        # Assuming there are still 4 distinct ratings for these conditions.\n+        self.assertEqual(aggs['distinct_ratings'], 4)\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n         sql = ctx.captured_queries[0]['sql']\n",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..92827de 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1090,6 +1090,12 @@ class OverrideSettingsTests(SimpleTestCase):\n         base_url attribute of django.core.files.storage.default_storage.\n         \"\"\"\n         self.assertEqual(default_storage.base_location, '')\n+    \n+    def test_file_upload_permission_default(self):\n+        \"\"\"\n+        Test that if FILE_UPLOAD_PERMISSIONS is not set, it defaults to 0o644.\n+        \"\"\"\n+        self.assertEqual(default_storage.file_permissions_mode, 0o644)\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..93079ff 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,3 +1,4 @@\n+\n import os\n import signal\n from unittest import mock\n@@ -101,7 +102,23 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_sigint_handler(self):\n+    def test_pgpassword_environment_variable(self):\n+        \"\"\"Ensure that PGPASSWORD is set correctly in the environment.\"\"\"\n+        def _mock_subprocess_run(*args, **kwargs):\n+            env = kwargs.get('env', {})\n+            self.assertIn('PGPASSWORD', env)\n+            self.assertEqual(env['PGPASSWORD'], 'somepassword')\n+            return subprocess.CompletedProcess(args, 0)\n+        \n+        db_info = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'password': 'somepassword',\n+            'host': 'somehost',\n+            'port': '444',\n+        }\n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            DatabaseClient.runshell_db(db_info)\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_call(*args):\n             handler = signal.getsignal(signal.SIGINT)\n@@ -113,4 +130,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..7441635 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -3,6 +3,7 @@ from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n+from django.contrib.contenttypes.models import ContentType\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n \n@@ -55,7 +56,20 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_content_type_rename_conflict(self):\n+    def test_existing_content_type_rename_other_database(self):\n+        class TestRouter:\n+            def db_for_write(self, model, **hints):\n+                return 'other'\n+\n+        with override_settings(DATABASE_ROUTERS=[TestRouter()]):\n+            ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+            other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+            call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+            self.assertFalse(other_content_types.filter(model='foo').exists())\n+            self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+            call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+            self.assertTrue(other_content_types.filter(model='foo').exists())\n+            self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         ContentType.objects.create(app_label='contenttypes_tests', model='foo')\n         ContentType.objects.create(app_label='contenttypes_tests', model='renamedfoo')\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0)\n@@ -63,4 +77,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..08c5d93 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -248,7 +248,21 @@ class UsernameValidatorsTests(SimpleTestCase):\n                 with self.assertRaises(ValidationError):\n                     v(invalid)\n \n-    def test_ascii_validator(self):\n+    def test_username_ending_with_newline(self):\n+        # New test for usernames ending with newline\n+        newline_usernames = [\n+            'validname\\n',    # Ends with newline\n+            'validname\\r\\n',  # Ends with carriage return + newline\n+        ]\n+        ascii_validator = validators.ASCIIUsernameValidator()\n+        unicode_validator = validators.UnicodeUsernameValidator()\n+\n+        for invalid in newline_usernames:\n+            with self.subTest(invalid=invalid):\n+                with self.assertRaises(ValidationError):\n+                    ascii_validator(invalid)\n+                with self.assertRaises(ValidationError):\n+                    unicode_validator(invalid)\n         valid_usernames = ['glenn', 'GLEnN', 'jean-marc']\n         invalid_usernames = [\"o'connell\", '\u00c9ric', 'jean marc', \"\u0623\u062d\u0645\u062f\"]\n         v = validators.ASCIIUsernameValidator()\n@@ -258,4 +272,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..dd90c13 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -21,6 +21,20 @@ class RenderToStringTest(SimpleTestCase):\n             'obj:test\\n',\n         )\n \n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_autoescape_off(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:<script>\\n',\n+        )\n+\n \n class GetDefaultTests(SimpleTestCase):\n \n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..b540152 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -287,8 +287,27 @@ class QueryDictTests(SimpleTestCase):\n \n \n class HttpResponseTests(unittest.TestCase):\n-\n-    def test_headers_type(self):\n+    def test_memoryview_content(self):\n+        # Test if HttpResponse correctly handles memoryview input.\n+        r = HttpResponse(memoryview(b'memoryview data'))\n+        self.assertEqual(r.content, b'memoryview data')\n+\n+    def test_empty_memoryview_content(self):\n+        # Test if HttpResponse handles an empty memoryview.\n+        r = HttpResponse(memoryview(b''))\n+        self.assertEqual(r.content, b'')\n+\n+    def test_large_memoryview_content(self):\n+        # Test HttpResponse with a large memoryview.\n+        large_data = b'a' * 10**6  # 1 MB of data\n+        r = HttpResponse(memoryview(large_data))\n+        self.assertEqual(r.content, large_data)\n+\n+    def test_partial_memoryview_content(self):\n+        # Test HttpResponse with a sliced memoryview.\n+        data = b'some large content'\n+        r = HttpResponse(memoryview(data)[5:10])\n+        self.assertEqual(r.content, b'large')\n         r = HttpResponse()\n \n         # ASCII strings or bytes values are converted to strings.\n",
  "django__django-11141": "",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..15b1858 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -665,6 +665,49 @@ class TestInlinePermissions(TestCase):\n         self.assertNotContains(response, 'id=\"id_Author_books-TOTAL_FORMS\"')\n         self.assertNotContains(response, 'id=\"id_Author_books-0-DELETE\"')\n \n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+\n+        # Ensure that view-only permissions result in no add/change/delete permissions on inlines\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n+\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+\n+        # Ensure that view-only permissions result in no add/change/delete permissions on inlines\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertContains(response, '<p>%s</p>' % self.book, html=False)\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n+\n     def test_inline_change_m2m_change_perm(self):\n         permission = Permission.objects.get(codename='change_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n",
  "django__django-11163": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex b25d077..5c99627 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2900,7 +2900,24 @@ class StrictAssignmentTests(SimpleTestCase):\n \n \n class ModelToDictTests(TestCase):\n-    def test_many_to_many(self):\n+    def test_model_to_dict_with_no_fields(self):\n+        \"\"\"Test model_to_dict with an empty list of fields should return an empty dict.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        self.assertEqual(model_to_dict(bw, fields={}), {})\n+\n+    def test_model_to_dict_with_specific_fields(self):\n+        \"\"\"Test model_to_dict with specific fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        expected_fields = ['id', 'name']\n+        result = model_to_dict(bw, fields=expected_fields)\n+        self.assertEqual(sorted(result.keys()), sorted(expected_fields))\n+\n+    def test_model_to_dict_with_exclude_fields(self):\n+        \"\"\"Test model_to_dict with excluded fields.\"\"\"\n+        bw = BetterWriter.objects.create(name='Joe Better', score=10)\n+        excluded_fields = ['id', 'name']\n+        result = model_to_dict(bw, exclude=excluded_fields)\n+        self.assertEqual(sorted(result.keys()), ['score', 'writer_ptr'])\n         \"\"\"Data for a ManyToManyField is a list rather than a lazy QuerySet.\"\"\"\n         blue = Colour.objects.create(name='blue')\n         red = Colour.objects.create(name='red')\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..41e7a98 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,7 +1,9 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n+from django.db.models.deletion import Collector\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n from .models import (\n@@ -464,6 +466,20 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Create a User instance\n+        u = User.objects.create()\n+\n+        # Ensure the user can be fast-deleted\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+\n+        # Delete the user instance\n+        u.delete()\n+\n+        # Assert that the primary key is set to None\n+        self.assertIsNone(u.pk)\n+\n     def test_fast_delete_qs(self):\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n",
  "django__django-11206": "",
  "django__django-11211": "",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..02d1694 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -81,6 +81,32 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                None,\n+            )\n+        )\n+        self.assertDictContainsSubset(\n+            {\n+                'PGSSLMODE': 'verify-ca',\n+                'PGSSLROOTCERT': 'root.crt',\n+                'PGSSLCERT': 'client.crt',\n+                'PGSSLKEY': 'client.key',\n+            },\n+            self.pg_env,\n+        )\n+\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort quries.\"\"\"\n         def _mock_subprocess_run(*args, **kwargs):\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..4e84e00 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -98,6 +98,15 @@ class FilteredRelationTests(TestCase):\n             [self.author1]\n         )\n \n+    def test_with_exclude(self):\n+        # Test that using exclude on a FilteredRelation annotation works correctly\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n     def test_with_join_and_complex_condition(self):\n         self.assertSequenceEqual(\n             Author.objects.annotate(\n",
  "django__django-11276": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 4051a05..51b2d71 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -28,6 +28,16 @@ class TestUtilsHtml(SimpleTestCase):\n             ('>', '&gt;'),\n             ('\"', '&quot;'),\n             (\"'\", '&#39;'),\n+            # Test different representations of apostrophes\n+            ('', ''),  # No change for empty string\n+            (\"'\", '&#x27;'),  # Changed representation\n+            ('\"\\'', '&quot;&#x27;'),  # Combination of quotes\n+            (\"It's\", 'It&#x27;s'),  # Single quote within text\n+            # Complex escape checks\n+            ('a < b && b > c', 'a &lt; b &amp;&amp; b &gt; c'),\n+            ('<script>alert(\"hack\")</script>', '&lt;script&gt;alert(&quot;hack&quot;)&lt;/script&gt;'),\n+            ('<div>Tom & Jerry</div>', '&lt;div&gt;Tom &amp; Jerry&lt;/div&gt;'),\n+            ('Special chars: !@#$', 'Special chars: !@#$'),\n         )\n         # Substitution patterns for testing the above items.\n         patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..5d050cd 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,6 +243,17 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n+    def test_skip_checks_with_explicit_checks(self):\n+        \"\"\"\n+        Test that checks are performed when --skip-checks is not provided.\n+        \"\"\"\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',\n+        })\n+        out, err = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn('staticfiles.E001', err)  # Expect system check error\n+        self.assertNoOutput(out)  # Expect no 'Set foo' message due to error\n+\n     def test_disallowed_abbreviated_options(self):\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..87c400b 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,5 +1,8 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n+from django.test.utils import override_settings\n+from django.conf import settings\n from django.utils.translation import gettext_lazy as _\n \n \n@@ -12,4 +15,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..61463ba 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -226,8 +226,25 @@ class BaseModelBackendTest:\n         authenticate(username='no_such_user', password='test')\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n+from django.contrib.auth import authenticate\n+from django.test import TestCase, override_settings\n+from auth_tests.test_auth_backends import CountingMD5PasswordHasher\n+from django.contrib.auth.models import User\n \n class ModelBackendTest(BaseModelBackendTest, TestCase):\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_without_credentials(self):\n+        CountingMD5PasswordHasher.calls = 0\n+        for credentials in (\n+            {},\n+            {'username': getattr(self.user, self.UserModel.USERNAME_FIELD)},\n+            {'password': 'test'},\n+        ):\n+            with self.subTest(credentials=credentials):\n+                with self.assertNumQueries(0):\n+                    authenticate(**credentials)\n+                self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n     \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..7e645e1 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,7 +124,26 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_two_annotated_values_list(self):\n+    def test_changing_columns_with_values_list(self):\n+        # Setup test data.\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        # Test changing columns for a union query with values_list.\n+        reserved_name = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name, ('a', 2))\n+        # Verify that we can change the list of columns.\n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n+\n+    def test_changing_columns_with_values(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        # Test changing columns for a union query with values.\n+        reserved_name = qs1.union(qs1).values('name', 'order').get()\n+        self.assertEqual(reserved_name, {'name': 'a', 'order': 2})\n+        # Verify that we can change the list of columns.\n+        reserved_order = qs1.union(qs1).values('order').get()\n+        self.assertEqual(reserved_order, {'order': 2})\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n         ).values_list('num', 'count')\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..92432cd 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -7,6 +7,7 @@ import smtpd\n import sys\n import tempfile\n import threading\n+from unittest import mock\n from email import charset, message_from_binary_file, message_from_bytes\n from email.header import Header\n from email.mime.text import MIMEText\n@@ -360,7 +361,21 @@ class MailTests(HeadersCheckMixin, SimpleTestCase):\n         msg.attach('example.txt', 'Text file content', 'text/plain')\n         self.assertIn(html_content, msg.message().as_string())\n \n-    def test_none_body(self):\n+    @mock.patch('socket.getfqdn', return_value='\u6b63\u5b97')\n+    def test_unicode_dns_non_unicode_email(self, mocked_getfqdn):\n+        delattr(DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'iso-8859-1'\n+        self.assertIn('@xn--1lq90ic7f>', email.message()['Message-ID'])\n+\n+    @mock.patch('socket.getfqdn', return_value='\u6f22\u5b57')\n+    def test_non_ascii_dns_punycode(self, mocked_getfqdn):\n+        delattr(DNS_NAME, '_fqdn')\n+        email = EmailMessage('subject', 'content', 'from@example.com', ['to@example.com'])\n+        email.encoding = 'utf-8'\n+        message = email.message()\n+        # Check if the Message-ID header contains the punycode representation\n+        self.assertIn('@xn--p8s937b>', message['Message-ID'])\n         msg = EmailMessage('subject', None, 'from@example.com', ['to@example.com'])\n         self.assertEqual(msg.body, '')\n         self.assertEqual(msg.message().get_payload(), '')\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..f174cfb 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,9 +1,67 @@\n+\n+class TestFieldAccessibleViaInstance(CheckTestCase):\n+    def test_valid_field_accessible_via_instance(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsValid(TestModelAdmin, TestModel)\n+\n+    def test_invalid_non_existent_field(self):\n+        class PositionField(Field):\n+            \"\"\"Custom field accessible only via instance.\"\"\"\n+            def contribute_to_class(self, cls, name):\n+                super().contribute_to_class(cls, name)\n+                setattr(cls, self.name, self)\n+\n+            def __get__(self, instance, owner):\n+                if instance is None:\n+                    raise AttributeError()\n+\n+        class TestModel(Model):\n+            field = PositionField()\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field', 'non_existent')\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display[1]' refers to 'non_existent', which is not a callable, \"\n+            \"an attribute of 'TestModelAdmin', or an attribute or method on 'app_label.TestModel'.\",\n+            'admin.E108'\n+        )\n+\n+    def test_invalid_many_to_many_field(self):\n+        class TestModel(Model):\n+            field = models.ManyToManyField(User)\n+\n+        class TestModelAdmin(ModelAdmin):\n+            list_display = ('field',)\n+\n+        self.assertIsInvalid(\n+            TestModelAdmin, TestModel,\n+            \"The value of 'list_display' must not be a ManyToManyField.\",\n+            'admin.E109'\n+        )\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n-from django.db.models import F\n+from django.db.models import F, Field, Model\n from django.db.models.functions import Upper\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..fadd36a 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -2,6 +2,7 @@ from datetime import datetime\n from operator import attrgetter\n \n from django.core.exceptions import FieldError\n+from datetime import datetime\n from django.db.models import (\n     CharField, Count, DateTimeField, F, Max, OuterRef, Subquery, Value,\n )\n@@ -462,7 +463,52 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_ptr_field_with_default_ordering_by_expression(self):\n+        # Creating instances of ChildArticle\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(\n+            headline='h1',\n+            pub_date=datetime(2005, 7, 28)\n+        )\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(\n+            articles, [ca4, ca2, ca1, ca3]\n+        )\n+\n+    def test_ordering_with_expression_in_meta(self):\n+        # Test ordering using expression in OrderedByFArticle\n+        ca1 = OrderedByFArticle.objects.create(\n+            headline='ha1',\n+            pub_date=datetime(2005, 7, 29),\n+            author=self.author_1,\n+        )\n+        ca2 = OrderedByFArticle.objects.create(\n+            headline='ha2',\n+            pub_date=datetime(2005, 7, 30),\n+            author=self.author_2,\n+        )\n+        articles = OrderedByFArticle.objects.all()\n+        expected_articles = [ca1, ca2]  # Ordered based on Meta.ordering expression\n+        self.assertSequenceEqual(articles, expected_articles)\n+\n+    def test_ordering_with_expression_raises(self):\n+        # Test that an error is raised with an invalid ordering expression\n+        with self.assertRaises(FieldError):\n+            Reference.objects.order_by(F('invalid_field')).all()\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..ffd4319 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -403,7 +403,13 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(aggs['distinct_ratings'], 4)\n \n-    def test_non_grouped_annotation_not_in_group_by(self):\n+    def test_distinct_avg(self):\n+        books = Book.objects.aggregate(distinct_avg_rating=Avg('rating', distinct=True))\n+        self.assertEqual(books['distinct_avg_rating'], 4.125)  # Expected result based on input data\n+\n+    def test_distinct_sum(self):\n+        books = Book.objects.aggregate(distinct_sum_rating=Sum('rating', distinct=True))\n+        self.assertEqual(books['distinct_sum_rating'], 16.5)  # Expected result based on input data\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n         excluded from the group by clause.\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..74e2e70 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -717,8 +717,37 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"RemoveField\"])\n         self.assertOperationAttributes(changes, \"testapp\", 0, 0, name=\"name\")\n+    \n+    def test_fk_dependency_with_uuid_to_fk(self):\n+        \"\"\"\n+        Test altering a model's UUID field to a ForeignKey creates the correct migration dependencies.\n+        \"\"\"\n \n-    def test_alter_field(self):\n+        # Case setup: Original state with a UUIDField.\n+        original_state = ModelState(\"testapp\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.UUIDField(null=True, blank=True)),\n+        ])\n+        \n+        # After state with a ForeignKey pointing to another model.\n+        modified_state = ModelState(\"testapp\", \"App1\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+            (\"another_app\", models.ForeignKey(\"otherapp.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+        ])\n+        \n+        # Another model in a different app; the target of the ForeignKey.\n+        target_model_state = ModelState(\"otherapp\", \"App2\", [\n+            (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+            (\"text\", models.CharField(max_length=100)),\n+        ])\n+        \n+        changes = self.get_changes([original_state, target_model_state], [modified_state, target_model_state])\n+        # Right number/type of migrations?\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['AlterField'])\n+        self.assertMigrationDependencies(changes, 'testapp', 0, [('otherapp', '__first__')])\n         \"\"\"Tests autodetection of new fields.\"\"\"\n         changes = self.get_changes([self.author_name], [self.author_name_longer])\n         # Right number/type of migrations?\n@@ -2399,4 +2428,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex a0e1530..2de66a0 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -218,11 +218,51 @@ class CommandTests(SimpleTestCase):\n         out = StringIO()\n         management.call_command('subparser', 'foo', 12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n+    \n+    def test_mutually_exclusive_required_kwargs(self):\n+        from django.core.management import call_command\n+        from django.core.management.base import CommandError\n+        from io import StringIO\n+\n+        # Case where the kwargs correctly satisfy one required argument in the mutually exclusive group\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Case where no arguments from the mutually exclusive group are provided\n+        out = StringIO()\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command('mutually_exclusive_required', stdout=out)\n \n     def test_subparser_dest_args(self):\n         out = StringIO()\n         management.call_command('subparser_dest', 'foo', bar=12, stdout=out)\n         self.assertIn('bar', out.getvalue())\n+    \n+    def test_mutually_exclusive_required_kwargs(self):\n+        from django.core.management import call_command\n+        from django.core.management.base import CommandError\n+        from io import StringIO\n+\n+        # Case where the kwargs correctly satisfy one required argument in the mutually exclusive group\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_id=1, stdout=out)\n+        self.assertIn('foo_id', out.getvalue())\n+\n+        out = StringIO()\n+        call_command('mutually_exclusive_required', foo_name='foo', stdout=out)\n+        self.assertIn('foo_name', out.getvalue())\n+\n+        # Case where no arguments from the mutually exclusive group are provided\n+        out = StringIO()\n+        msg = 'Error: one of the arguments --foo-id --foo-name is required'\n+        with self.assertRaisesMessage(CommandError, msg):\n+            call_command('mutually_exclusive_required', stdout=out)\n \n     def test_subparser_dest_required_args(self):\n         out = StringIO()\n",
  "django__django-11790": "",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..10cda79 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -251,6 +251,22 @@ class WriterTests(SimpleTestCase):\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n+    from django.utils.translation import gettext_lazy as _\n+\n+    def test_serialize_translated_enum(self):\n+        class TranslatedEnum(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+\n+        field = models.CharField(default=TranslatedEnum.GOOD, choices=[(m, m.name) for m in TranslatedEnum])\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"(migrations.test_writer.TranslatedEnum['GOOD'], 'GOOD'), \"\n+            \"(migrations.test_writer.TranslatedEnum['BAD'], 'BAD')], \"\n+            \"default=migrations.test_writer.TranslatedEnum['GOOD'])\"\n+        )\n \n     def test_serialize_enums(self):\n         class TextEnum(enum.Enum):\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..d71c5de 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,5 +1,6 @@\n+\n import unittest\n-from datetime import datetime\n+from datetime import datetime, timedelta\n \n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n@@ -312,13 +313,43 @@ class HttpDateProcessingTests(unittest.TestCase):\n         t = 1167616461.0\n         self.assertEqual(http_date(t), 'Mon, 01 Jan 2007 01:54:21 GMT')\n \n-    def test_parsing_rfc1123(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_with_mock(self, mocked_datetime):\n+        # Setting up mocked current times for different scenarios\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        \n+        # Test cases to verify the behavior\n+        test_dates = [\n+            (datetime(2019, 11, 6, 8, 49, 37), 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(1969, 12, 31, 8, 49, 37)),\n+            (datetime(2020, 11, 6, 8, 49, 37), 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(1970, 12, 31, 8, 49, 37)),\n+            (datetime(2048, 11, 6, 8, 49, 37), 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+        ]\n+        \n+        for utcnow, rfc850str, expected_date in test_dates:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    def test_parsing_rfc850_edge_cases(self):\n+        # Testing edge case where year should wrap to past\n+        current_year = datetime.utcnow().year\n+        future_date_str = f'Saturday, 14-Dec-{current_year % 100 + 51:02d} 08:49:37 GMT'\n+        \n+        parsed = parse_http_date(future_date_str)\n+        expected_year = current_year - 49  # Wrap to the past\n+        expected_date = datetime(expected_year, 12, 14, 8, 49, 37)\n+        self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n+\n+        # Testing edge case where year is exactly 50 in the future (should not wrap)\n+        same_future_date_str = f'Saturday, 14-Dec-{current_year % 100 + 50:02d} 08:49:37 GMT'\n+        parsed = parse_http_date(same_future_date_str)\n+        expected_year = current_year + 50\n+        expected_date = datetime(expected_year, 12, 14, 8, 49, 37)\n+        self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11880": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 95afc0d..74a6520 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3672,7 +3672,50 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n             '<input type=\"hidden\" name=\"data\" id=\"id_data\"></td></tr>'\n         )\n \n-    def test_field_named_data(self):\n+import copy\n+from django.forms import Form, CharField\n+from django.test import SimpleTestCase\n+\n+class FormFieldTests(SimpleTestCase):\n+\n+    def test_field_deep_copy_error_messages(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsInstance(field_copy, CustomCharField)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+\n+    def test_field_deep_copy_do_not_affect_other(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {'invalid': 'Form custom error message.'}\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        field_copy.error_messages['invalid'] = 'Modified message.'\n+\n+        # Ensure that the original field's error_messages are not affected.\n+        self.assertEqual(field.error_messages['invalid'], 'Form custom error message.')\n+        self.assertEqual(field_copy.error_messages['invalid'], 'Modified message.')\n+\n+    def test_copy_error_messages_field_with_multiple_entries(self):\n+        class CustomCharField(CharField):\n+            def __init__(self, **kwargs):\n+                kwargs['error_messages'] = {\n+                    'invalid': 'Form custom error message.',\n+                    'required': 'This field is required.'\n+                }\n+                super().__init__(**kwargs)\n+\n+        field = CustomCharField()\n+        field_copy = copy.deepcopy(field)\n+        self.assertIsNot(field_copy.error_messages, field.error_messages)\n+        self.assertEqual(field_copy.error_messages['required'], 'This field is required.')\n         class DataForm(Form):\n             data = CharField(max_length=10)\n \n",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..f6a2792 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n",
  "django__django-11964": "diff --git a/tests/model_fields/test_charfield.py b/tests/model_fields/test_charfield.py\nindex c6162e5..28a23c8 100644\n--- a/tests/model_fields/test_charfield.py\n+++ b/tests/model_fields/test_charfield.py\n@@ -1,3 +1,4 @@\n+\n from unittest import skipIf\n \n from django.core.exceptions import ValidationError\n@@ -5,6 +6,7 @@ from django.db import connection, models\n from django.test import SimpleTestCase, TestCase\n \n from .models import Post\n+from django.utils.translation import gettext_lazy as _\n \n \n class TestCharField(TestCase):\n@@ -43,8 +45,26 @@ class TestCharField(TestCase):\n         self.assertEqual(p1, p2)\n         self.assertEqual(p2.title, Event.C)\n \n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class EnumTest(TestCase):\n+    def setUp(self):\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n \n-class ValidationTests(SimpleTestCase):\n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n \n     class Choices(models.TextChoices):\n         C = 'c', 'C'\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..8ed34cf 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -148,6 +148,34 @@ class ChoicesTests(SimpleTestCase):\n                 self.assertIsInstance(field.formfield(), forms.ChoiceField)\n \n \n+from django.test import TestCase\n+from django.db import models\n+from django.utils.translation import gettext_lazy as _\n+\n+class FooBar(models.Model):\n+    foo_bar = models.CharField(_(\"foo\"), choices=[(1, 'foo'), (2, 'bar')])\n+\n+    def __str__(self):\n+        return self.get_foo_bar_display()\n+\n+    def get_foo_bar_display(self):\n+        return \"something\"\n+\n+class OverridingFieldDisplayTest(TestCase):\n+\n+    def test_overriding_FIELD_display(self):\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_overriding_field_display_should_not_affect_original_display(self):\n+        # Test with another model that has default get_FIELD_display\n+        class AnotherModel(models.Model):\n+            some_field = models.IntegerField(choices=[(1, 'one'), (2, 'two')])\n+        \n+        a = AnotherModel(some_field=1)\n+        # Since AnotherModel does not override, it should return 'one'.\n+        self.assertEqual(a.get_some_field_display(), 'one')\n+\n class GetFieldDisplayTests(SimpleTestCase):\n \n     def test_choices_and_field_display(self):\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..098c5ce 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -75,6 +75,46 @@ class SchemaIndexesTests(TestCase):\n         index_sql = connection.schema_editor()._model_indexes_sql(IndexTogetherSingleList)\n         self.assertEqual(len(index_sql), 1)\n \n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n \n @skipIf(connection.vendor == 'postgresql', 'opclasses are PostgreSQL only')\n class SchemaIndexesNotPostgreSQLTests(TransactionTestCase):\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..3598d48 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -10,12 +11,32 @@ from django.db.models.sql.query import Query\n from django.db.models.sql.where import OR\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n+from django.db.models.lookups import In\n \n from .models import Author, Item, ObjectC, Ranking\n \n \n class TestQuery(SimpleTestCase):\n-    def test_simple_query(self):\n+    def test_iterable_lookup_value(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b']) # Ensure the rhs is still a list\n+\n+    def test_iterable_lookup_value_with_tuple(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name=('a', 'b')))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ('a', 'b')) # Ensure the rhs is still a tuple\n+\n+    def test_in_lookup_with_list(self):\n+        query = Query(Item)\n+        where = query.build_where(Q(name__in=['a', 'b', 'c']))\n+        name_in = where.children[0]\n+        self.assertIsInstance(name_in, In)\n+        self.assertEqual(name_in.rhs, ['a', 'b', 'c']) # Ensure the rhs is still a list\n         query = Query(Author)\n         where = query.build_where(Q(num__gt=2))\n         lookup = where.children[0]\n",
  "django__django-12125": "",
  "django__django-12143": "",
  "django__django-12155": "",
  "django__django-12193": "diff --git a/tests/forms_tests/widget_tests/test_checkboxinput.py b/tests/forms_tests/widget_tests/test_checkboxinput.py\nindex 5c5e45d..bf4c38f 100644\n--- a/tests/forms_tests/widget_tests/test_checkboxinput.py\n+++ b/tests/forms_tests/widget_tests/test_checkboxinput.py\n@@ -82,10 +82,21 @@ class CheckboxInputTest(WidgetTest):\n         \"\"\"\n         self.assertFalse(self.widget.value_from_datadict({}, {}, 'testing'))\n \n+    def test_checkbox_input_does_not_mutate_attrs_post_true(self):\n+        # Test that CheckboxInput does not mutate attributes after a True value is set\n+        attrs = {'checked': False}\n+        widget = forms.CheckboxInput()\n+        widget.get_context('name', True, attrs)\n+        self.assertIs(attrs['checked'], False, \"Attrs should not be mutated to True after processing a True value\")\n+        \n+        # Doing it again with False should not mutate attrs to True\n+        widget.get_context('name', False, attrs)\n+        self.assertIs(attrs['checked'], False, \"Attrs should remain unchanged and not set to True\")\n+\n     def test_value_from_datadict_string_int(self):\n         value = self.widget.value_from_datadict({'testing': '0'}, {}, 'testing')\n         self.assertIs(value, True)\n \n     def test_value_omitted_from_data(self):\n         self.assertIs(self.widget.value_omitted_from_data({'field': 'value'}, {}, 'field'), False)\n-        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n+        self.assertIs(self.widget.value_omitted_from_data({}, {}, 'field'), False)\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..72b1d56 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -246,6 +246,11 @@ class SlugPKData(models.Model):\n class SmallPKData(models.Model):\n     data = models.SmallIntegerField(primary_key=True)\n \n+from uuid import uuid4\n+\n+class UUIDDefaultData(models.Model):\n+    data = models.UUIDField(primary_key=True, default=uuid4)\n+\n # class TextPKData(models.Model):\n #     data = models.TextField(primary_key=True)\n \n",
  "django__django-12262": "diff --git a/tests/template_tests/test_custom.py b/tests/template_tests/test_custom.py\nindex 8a8c535..96b995b 100644\n--- a/tests/template_tests/test_custom.py\n+++ b/tests/template_tests/test_custom.py\n@@ -111,6 +111,17 @@ class SimpleTagTests(TagTestCase):\n             with self.assertRaisesMessage(TemplateSyntaxError, entry[0]):\n                 self.engine.from_string(\"%s as var %%}\" % entry[1][0:-2])\n \n+    def test_custom_template_tags_with_keyword_defaults(self):\n+        # Test that providing a keyword argument with a default works without error\n+        template_code = '{% load custom %}{% hello greeting=\"hi\" %}'\n+        t = self.engine.from_string(template_code)\n+        self.assertEqual(t.render(Context()), \"hi world\")\n+\n+        # Test correct error for multiple values for keyword argument\n+        with self.assertRaisesMessage(TemplateSyntaxError, \"'hello' received multiple values for keyword argument 'greeting'\"):\n+            template_code = '{% load custom %}{% hello greeting=\"hi\" greeting=\"hello\" %}'\n+            t = self.engine.from_string(template_code)\n+\n     def test_simple_tag_escaping_autoescape_off(self):\n         c = Context({'name': \"Jack & Jill\"}, autoescape=False)\n         t = self.engine.from_string(\"{% load custom %}{% escape_naive %}\")\n",
  "django__django-12276": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 61f7a13..81386dc 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import json\n@@ -2486,6 +2487,17 @@ Password: <input type=\"password\" name=\"password\" required>\n         self.assertEqual(f.errors, {})\n         self.assertEqual(f.cleaned_data['file1'], 'resume.txt')\n \n+    def test_explicit_required_filefield_with_initial_data(self):\n+        class FileForm(forms.Form):\n+            file1 = forms.FileField(widget=forms.FileInput)\n+\n+        # Test when initial data is provided\n+        f = FileForm(initial={'file1': 'resume.txt'}, auto_id=False)\n+        self.assertHTMLEqual(\n+            f.as_table(),\n+            '<tr><th>File1:</th><td><input type=\"file\" name=\"file1\"></td></tr>',\n+        )\n+\n     def test_basic_processing_in_view(self):\n         class UserRegistration(Form):\n             username = CharField(max_length=10)\n",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..039c189 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,9 +1,36 @@\n+\n+class EnumTemplateTests(SimpleTestCase):\n+    def test_enum_in_template(self):\n+        template = Template('{% if student.year_in_school == YearInSchool.FRESHMAN %}True{% else %}False{% endif %}')\n+        YearInSchool = models.TextChoices('YearInSchool', 'FRESHMAN SOPHOMORE JUNIOR SENIOR')\n+        output = template.render(Context({'student': {'year_in_school': YearInSchool.FRESHMAN}, 'YearInSchool': YearInSchool}))\n+        self.assertEqual(output, 'True')\n+\n+    def test_enum_label_and_value_in_template(self):\n+        YearInSchool = models.TextChoices('YearInSchool', 'FRESHMAN SOPHOMORE JUNIOR SENIOR')\n+        template = Template('Label: {{ YearInSchool.FRESHMAN.label }}, Value: {{ YearInSchool.FRESHMAN.value }}')\n+        output = template.render(Context({'YearInSchool': YearInSchool}))\n+        self.assertEqual(output, 'Label: FRESHMAN, Value: FRESHMAN')\n+\n+    def test_all_enum_members_in_template_loop(self):\n+        YearInSchool = models.TextChoices('YearInSchool', 'FRESHMAN SOPHOMORE JUNIOR SENIOR')\n+        template = Template('{% for year in YearInSchool %}{{ year.label }}:{{ year.value }} {% endfor %}')\n+        output = template.render(Context({'YearInSchool': YearInSchool}))\n+        self.assertEqual(output.strip(), 'FRESHMAN:FRESHMAN SOPHOMORE:SOPHOMORE JUNIOR:JUNIOR SENIOR:SENIOR')\n+\n+    def test_invalid_access_does_not_call_enum(self):\n+        YearInSchool = models.TextChoices('YearInSchool', 'FRESHMAN SOPHOMORE')\n+        template = Template('{{ YearInSchool.BOGUS }}')\n+        output = template.render(Context({'YearInSchool': YearInSchool}))\n+        self.assertEqual(output, '')\n+\n import datetime\n import decimal\n import ipaddress\n import uuid\n \n from django.db import models\n+from django.template import Context, Template\n from django.test import SimpleTestCase\n from django.utils.functional import Promise\n from django.utils.translation import gettext_lazy as _\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..ea6f8e2 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -139,6 +139,21 @@ class UtilsTests(SimpleTestCase):\n \n             self.assertEqual(value, resolved_value)\n \n+    def test_json_display_for_field(self):\n+        tests = [\n+            ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),\n+            (['a', 'b'], '[\"a\", \"b\"]'),\n+            ('a', '\"a\"'),\n+            ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),  # To highlight invalid JSON\n+            (None, self.empty_value)  # None should return the empty value\n+        ]\n+        for value, display_value in tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(\n+                    display_for_field(value, models.JSONField(), self.empty_value),\n+                    display_value,\n+                )\n+                \n     def test_null_display_for_field(self):\n         \"\"\"\n         Regression test for #12550: display_for_field should handle None\n",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..3b6cd4a 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -1005,8 +1005,26 @@ class OtherModelTests(SimpleTestCase):\n             from_country = models.ForeignKey(Country, models.CASCADE)\n \n         self.assertEqual(ShippingMethod.check(), [])\n+    @isolate_apps('invalid_models_tests')\n+    def test_onetoone_with_parent_model_confusion(self):\n+        \"\"\"\n+        Test case for issue where multiple OneToOneFields with parent_link cause confusion.\n+        Ensure that order does not matter when parent_link=True is correctly set.\n+        \"\"\"\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        self.assertEqual(Picking.check(), [])\n+\n+        class PickingReversed(Document):\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n \n-    def test_missing_parent_link(self):\n+        self.assertEqual(PickingReversed.check(), [])\n         msg = 'Add parent_link=True to invalid_models_tests.ParkingLot.parent.'\n         with self.assertRaisesMessage(ImproperlyConfigured, msg):\n             class Place(models.Model):\n",
  "django__django-12419": "",
  "django__django-12663": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 872551b..761d17b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -19,7 +19,8 @@ from django.db.models.functions import (\n )\n from django.db.models.sql import constants\n from django.db.models.sql.datastructures import Join\n-from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.utils.functional import SimpleLazyObject\n+from django.contrib.auth.models import User\n from django.test.utils import Approximate, isolate_apps\n \n from .models import (\n",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..1757a1b 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -14,7 +14,7 @@ from django.contrib.admin.tests import AdminSeleniumTestCase\n from django.contrib.auth.models import User\n from django.core.files.storage import default_storage\n from django.core.files.uploadedfile import SimpleUploadedFile\n-from django.db.models import CharField, DateField, DateTimeField, UUIDField\n+from django.db.models import CharField, DateField, DateTimeField, UUIDField, ManyToManyField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n@@ -116,8 +116,47 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n     def test_filtered_many_to_many(self):\n         self.assertFormfield(Band, 'members', widgets.FilteredSelectMultiple,\n                              filter_vertical=['members'])\n-\n-    def test_formfield_overrides(self):\n+    def test_formfield_overrides_m2m_filter_widget(self):\n+        \"\"\"\n+        The autocomplete_fields, raw_id_fields, filter_vertical, and\n+        filter_horizontal widgets for ManyToManyFields may be overridden by\n+        specifying a widget in formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            filter_vertical = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n+        \n+    def test_formfield_overrides_m2m_with_defaults(self):\n+        \"\"\"\n+        Test that default widgets for ManyToMany fields are used when no\n+        override is specified in formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            pass\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        # Assert that the widget is not CheckboxSelectMultiple by default\n+        self.assertNotIsInstance(field.widget, forms.CheckboxSelectMultiple)\n+    \n+    def test_formfield_overrides_m2m_raw_id_widget(self):\n+        \"\"\"\n+        Check that raw_id_fields widget is used if specified, and it can be\n+        overridden by formfield_overrides.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            raw_id_fields = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': forms.CheckboxSelectMultiple},\n+            }\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        # CheckboxSelectMultiple should override the raw_id_fields setting\n+        self.assertIsInstance(field.widget, forms.CheckboxSelectMultiple)\n         self.assertFormfield(Event, 'start_date', forms.TextInput,\n                              formfield_overrides={DateField: {'widget': forms.TextInput}})\n \n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 17e707b..0cc33e0 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2444,8 +2444,31 @@ class AutodetectorTests(TestCase):\n         self.assertNumberMigrations(changes, 'testapp', 1)\n         self.assertOperationTypes(changes, 'testapp', 0, [\"AddField\", \"AddField\"])\n         self.assertOperationAttributes(changes, 'testapp', 0, 0)\n-\n-    def test_mti_inheritance_model_removal(self):\n+    def test_add_model_with_field_removed_from_base_model(self):\n+        \"\"\"\n+        Removing a base field takes place before adding a new inherited model\n+        that has a field with the same name.\n+        \"\"\"\n+        before = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ]),\n+        ]\n+        after = [\n+            ModelState('app', 'readable', [\n+                ('id', models.AutoField(primary_key=True)),\n+            ]),\n+            ModelState('app', 'book', [\n+                ('id', models.AutoField(primary_key=True)),\n+                ('title', models.CharField(max_length=200)),\n+            ], bases=('app.readable',)),\n+        ]\n+        changes = self.get_changes(before, after)\n+        self.assertNumberMigrations(changes, 'app', 1)\n+        self.assertOperationTypes(changes, 'app', 0, ['RemoveField', 'CreateModel'])\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='title', model_name='readable')\n+        self.assertOperationAttributes(changes, 'app', 0, 1, name='book')\n         Animal = ModelState('app', 'Animal', [\n             (\"id\", models.AutoField(primary_key=True)),\n         ])\n@@ -2453,4 +2476,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..8a1f547 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -9,6 +9,8 @@ from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db import connection, models\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -193,8 +195,34 @@ class LookupTests(TestCase):\n         msg = \"in_bulk()'s field_name must be a unique field but 'author' isn't.\"\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n+    \n+    def test_in_bulk_with_unique_constraint(self):\n+        # Assuming the Article model is accessible here and is defined properly\n+        # with a UniqueConstraint on the slug field.\n+        article_1 = Article.objects.create(slug='slug-1')\n+        article_2 = Article.objects.create(slug='slug-2')\n+        Article.objects.create(slug='slug-3')\n \n-    def test_values(self):\n+        self.assertEqual(\n+            Article.objects.in_bulk([article_1.slug, article_2.slug], field_name='slug'),\n+            {article_1.slug: article_1, article_2.slug: article_2},\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_raises_on_non_unique_field_constraint(self):\n+        class TestModel(models.Model):\n+            code = models.CharField(max_length=100)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['code'], name='unique_code')\n+                ]\n+\n+        test_instance_1 = TestModel.objects.create(code='code1')\n+        with self.assertRaisesMessage(\n+            ValueError, \"in_bulk()'s field_name must be a unique field but 'id' isn't.\"\n+        ):\n+            TestModel.objects.in_bulk([test_instance_1.pk], field_name='id')\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..89ff195 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -905,6 +905,22 @@ class OtherModelTests(SimpleTestCase):\n \n         self.assertEqual(Child.check(), [])\n \n+    def test_ordering_uses_lookups(self):\n+        class Supply(models.Model):\n+            pass\n+\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        # Testing if the check does not raise any errors.\n+        self.assertEqual(Stock.check(), [])\n+\n     def test_ordering_pointing_to_foreignkey_field(self):\n         class Parent(models.Model):\n             pass\n",
  "django__django-13012": "",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..8720034 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1200,6 +1200,24 @@ class Queries1Tests(TestCase):\n         )\n         self.assertTrue(qs.first())\n \n+    def test_filter_with_non_filterable_field(self):\n+        # Assuming that your test environment has models similar to those described in the issue\n+        # The test setup is missing the models `ProductMetaDataType` and `ProductMetaData`, so for now we'll outline a test:\n+        \n+        # Setup for test\n+        metadata_type = ProductMetaDataType.objects.create(label='Brand', filterable=False)\n+        product_meta_data = ProductMetaData.objects.create(\n+            product_id=1, value='Dark Vador', marketplace_id=1, metadata_type=metadata_type\n+        )\n+        \n+        try:\n+            # Perform the filtering operation that was causing the issue\n+            filtered_data = ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=metadata_type)\n+            # Check if we receive the expected metadata without errors\n+            self.assertEqual(list(filtered_data), [product_meta_data])\n+        except NotSupportedError:\n+            self.fail(\"NotSupportedError was raised unexpectedly!\")\n+\n     def test_excluded_intermediary_m2m_table_joined(self):\n         self.assertSequenceEqual(\n             Note.objects.filter(~Q(tag__annotation__name=F('note'))),\n",
  "django__django-13033": "",
  "django__django-13089": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex e11856f..2bb753b 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -617,6 +617,47 @@ class BaseCacheTests:\n \n     def test_cull(self):\n         self._perform_cull_test('cull', 50, 29)\n+    \n+    def test_cull_delete_when_store_empty(self):\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        old_max_entries = cull_cache._max_entries\n+        # Force _cull to delete on first cached record.\n+        cull_cache._max_entries = -1\n+        try:\n+            cull_cache.set('force_cull_delete', 'value', 1000)\n+            self.assertIs(cull_cache.has_key('force_cull_delete'), True)\n+        finally:\n+            cull_cache._max_entries = old_max_entries\n+\n+    def test_cull_no_keys_to_delete(self):\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        # Clear the cache to ensure it's empty.\n+        cull_cache.clear()\n+        with self.assertLogs('django.core.cache.backends.db', level='DEBUG') as log:\n+            # Trigger a cull operation\n+            cull_cache._cull(db='default', cursor=connections['default'].cursor(), now=now())\n+            self.assertIn('No cache keys to cull', log.output)\n+\n+    def test_cull_less_than_max_entries(self):\n+        try:\n+            cull_cache = caches['cull']\n+        except InvalidCacheBackendError:\n+            self.skipTest(\"Culling isn't implemented.\")\n+        # Ensure cache fills up but remains below the max entry\n+        cull_cache._max_entries = 10\n+        for i in range(5):\n+            cull_cache.set(f'key{i}', f'value{i}', 1000)\n+        # Trigger a cull\n+        cull_cache._cull(db='default', cursor=connections['default'].cursor(), now=now())\n+        # Check all items are still present\n+        for i in range(5):\n+            self.assertIs(cull_cache.has_key(f'key{i}'), True)\n \n     def test_zero_cull(self):\n         self._perform_cull_test('zero_cull', 50, 19)\n",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..dfb93ef 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1644,6 +1644,53 @@ class ModelFormBasicTests(TestCase):\n         obj.name = 'Alice'\n         obj.full_clean()\n \n+from django.test import TestCase\n+from django import forms\n+from .models import Article, Writer\n+import datetime\n+\n+class ForeignKeyValidationTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.archived_writer = Writer.objects.create(name='Archived Writer', archived=True)\n+        cls.active_writer = Writer.objects.create(name='Active Writer', archived=False)\n+\n+    def test_foreign_key_validation_with_default_manager(self):\n+        class MyForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+\n+        # Use the archived writer which is filtered out by the default manager.\n+        data = {\n+            'title': 'Test Article',\n+            'writer': self.archived_writer.pk,\n+        }\n+        form = MyForm(data)\n+        self.assertFalse(form.is_valid())\n+        self.assertEqual(\n+            form.errors,\n+            {'writer': ['Select a valid choice. That choice is not one of the available choices.']}\n+        )\n+\n+    def test_foreign_key_validation_with_base_manager(self):\n+        class MyForm(forms.ModelForm):\n+            class Meta:\n+                model = Article\n+                fields = '__all__'\n+\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                self.fields['writer'].queryset = Writer._base_manager.all()\n+\n+        data = {\n+            'title': 'Test Article',\n+            'writer': self.archived_writer.pk,\n+        }\n+        form = MyForm(data)\n+        self.assertTrue(form.is_valid())\n+\n+...\n \n class ModelMultipleChoiceFieldTests(TestCase):\n     @classmethod\n",
  "django__django-13112": "",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..53ba796 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1210,6 +1210,29 @@ class ExpressionOperatorTests(TestCase):\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 1764)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).float, Approximate(61.02, places=2))\n \n+import datetime\n+from django.db.models import F\n+from django.test import TestCase\n+from myapp.models import Experiment  # Assuming the model is in myapp.models. Adjust import path as necessary.\n+\n+class DurationExpressionTests(TestCase):\n+    def setUp(self):\n+        # Set up some test data\n+        Experiment.objects.create(estimated_time=datetime.timedelta(days=1))\n+        Experiment.objects.create(estimated_time=datetime.timedelta(days=2))\n+\n+    def test_duration_expressions(self):\n+        deltas = [\n+            datetime.timedelta(days=1),\n+            datetime.timedelta(hours=24),\n+            datetime.timedelta(minutes=60*24)\n+        ]\n+        for delta in deltas:\n+            with self.subTest(delta=delta):\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+                for obj in qs:\n+                    self.assertEqual(obj.duration, obj.estimated_time + delta)\n+\n     @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n     def test_lefthand_bitwise_xor(self):\n         Number.objects.update(integer=F('integer').bitxor(48))\n",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..adb5959 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1590,6 +1590,14 @@ class FTimeDeltaTests(TestCase):\n         ]\n         self.assertEqual(under_estimate, ['e2'])\n \n+        # Test direct subtraction without using ExpressionWrapper to verify the fix.\n+        queryset = Experiment.objects.annotate(\n+            delta=F('end') - F('start')\n+        )\n+        for experiment in queryset:\n+            expected_delta = experiment.end - experiment.start\n+            self.assertEqual(experiment.delta, expected_delta)\n+\n         over_estimate = [\n             e.name for e in Experiment.objects.filter(estimated_time__lt=F('end') - F('start'))\n         ]\n",
  "django__django-13158": "",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..85f7648 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -25,6 +25,7 @@ from django.contrib.sessions.models import Session\n from django.contrib.sessions.serializers import (\n     JSONSerializer, PickleSerializer,\n )\n+from django.utils.deprecation import RemovedInDjango40Warning\n from django.core import management\n from django.core.cache import caches\n from django.core.cache.backends.base import InvalidCacheBackendError\n@@ -33,6 +34,7 @@ from django.http import HttpResponse\n from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n+from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils import timezone\n \n from .models import SessionStore as CustomDatabaseSession\n@@ -312,7 +314,12 @@ class SessionTestsMixin:\n         self.assertEqual(self.session.decode(encoded), data)\n \n     @override_settings(SECRET_KEY='django_tests_secret_key')\n-    def test_decode_legacy(self):\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    def test_default_hashing_algorithm_legacy_decode(self):\n+        with self.settings(DEFAULT_HASHING_ALGORITHM='sha1'):\n+            data = {'a test key': 'a test value'}\n+            encoded = self.session.encode(data)\n+            self.assertEqual(self.session._legacy_decode(encoded), data)\n         # RemovedInDjango40Warning: pre-Django 3.1 sessions will be invalid.\n         legacy_encoded = (\n             'OWUzNTNmNWQxNTBjOWExZmM4MmQ3NzNhMDRmMjU4NmYwNDUyNGI2NDp7ImEgdGVzd'\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..2804497 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -3,8 +3,11 @@ import time\n from django.core.exceptions import ImproperlyConfigured\n from django.http import HttpResponse\n from django.test import (\n-    RequestFactory, SimpleTestCase, ignore_warnings, override_settings,\n+    RequestFactory, SimpleTestCase, ignore_warnings, override_settings, TestCase\n )\n+from django.shortcuts import get_object_or_404\n+from django.urls import path\n+from myapp.models import Account\n from django.test.utils import require_jinja2\n from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -580,6 +583,30 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['foo'], 'bar')\n         self.assertIsInstance(response.context['view'], View)\n \n+class OfferViewTest(TestCase):\n+    rf = RequestFactory()\n+\n+    def setUp(self):\n+        # Set up initial data for the tests\n+        self.account = Account.objects.create(slug='valid-slug')\n+\n+    def test_offer_view_with_valid_slug(self):\n+        # Test the view with a valid slug\n+        response = OfferView.as_view()(self.rf.get('/offers/valid-slug/'), offer_slug='valid-slug')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.context_data['offer'], self.account)\n+\n+    def test_offer_view_with_invalid_slug(self):\n+        # Test the view with an invalid slug which should return 404\n+        with self.assertRaises(Http404):\n+            OfferView.as_view()(self.rf.get('/offers/invalid-slug/'), offer_slug='invalid-slug')\n+\n+    def test_offer_view_with_simplelazyobject(self):\n+        # Test if the view correctly resolves SimpleLazyObject for a valid slug\n+        response = OfferView.as_view()(self.rf.get('/offers/valid-slug/'), offer_slug=SimpleLazyObject(lambda: 'valid-slug'))\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.context_data['offer'], self.account)\n+\n     @ignore_warnings(category=RemovedInDjango40Warning)\n     def test_extra_template_params(self):\n         \"\"\"A template view can be customized to return extra context.\"\"\"\n@@ -590,6 +617,30 @@ class DeprecationTests(SimpleTestCase):\n         self.assertEqual(response.context['key'], 'value')\n         self.assertIsInstance(response.context['view'], View)\n \n+class OfferViewTest(TestCase):\n+    rf = RequestFactory()\n+\n+    def setUp(self):\n+        # Set up initial data for the tests\n+        self.account = Account.objects.create(slug='valid-slug')\n+\n+    def test_offer_view_with_valid_slug(self):\n+        # Test the view with a valid slug\n+        response = OfferView.as_view()(self.rf.get('/offers/valid-slug/'), offer_slug='valid-slug')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.context_data['offer'], self.account)\n+\n+    def test_offer_view_with_invalid_slug(self):\n+        # Test the view with an invalid slug which should return 404\n+        with self.assertRaises(Http404):\n+            OfferView.as_view()(self.rf.get('/offers/invalid-slug/'), offer_slug='invalid-slug')\n+\n+    def test_offer_view_with_simplelazyobject(self):\n+        # Test if the view correctly resolves SimpleLazyObject for a valid slug\n+        response = OfferView.as_view()(self.rf.get('/offers/valid-slug/'), offer_slug=SimpleLazyObject(lambda: 'valid-slug'))\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.context_data['offer'], self.account)\n+\n     def test_template_params_warning(self):\n         response = self.client.get('/template/custom/bar1/bar2/')\n         self.assertEqual(response.status_code, 200)\n@@ -602,4 +653,28 @@ class DeprecationTests(SimpleTestCase):\n         with self.assertRaisesMessage(RemovedInDjango40Warning, msg % 'foo2'):\n             str(response.context['foo2'])\n         self.assertEqual(response.context['key'], 'value')\n-        self.assertIsInstance(response.context['view'], View)\n+        self.assertIsInstance(response.context['view'], View)\n+\n+class OfferViewTest(TestCase):\n+    rf = RequestFactory()\n+\n+    def setUp(self):\n+        # Set up initial data for the tests\n+        self.account = Account.objects.create(slug='valid-slug')\n+\n+    def test_offer_view_with_valid_slug(self):\n+        # Test the view with a valid slug\n+        response = OfferView.as_view()(self.rf.get('/offers/valid-slug/'), offer_slug='valid-slug')\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.context_data['offer'], self.account)\n+\n+    def test_offer_view_with_invalid_slug(self):\n+        # Test the view with an invalid slug which should return 404\n+        with self.assertRaises(Http404):\n+            OfferView.as_view()(self.rf.get('/offers/invalid-slug/'), offer_slug='invalid-slug')\n+\n+    def test_offer_view_with_simplelazyobject(self):\n+        # Test if the view correctly resolves SimpleLazyObject for a valid slug\n+        response = OfferView.as_view()(self.rf.get('/offers/valid-slug/'), offer_slug=SimpleLazyObject(lambda: 'valid-slug'))\n+        self.assertEqual(response.status_code, 200)\n+        self.assertEqual(response.context_data['offer'], self.account)\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..bad1be9 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -16,6 +16,7 @@ from django.forms.models import (\n )\n from django.template import Context, Template\n from django.test import SimpleTestCase, TestCase, skipUnlessDBFeature\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, ArticleStatus, Author, Author1, Award, BetterWriter, BigInt, Book,\n@@ -2815,7 +2816,62 @@ class LimitChoicesToTests(TestCase):\n         f = StumpJokeWithCustomFieldForm()\n         self.assertEqual(f.fields['custom'].queryset, 42)\n \n-    def test_fields_for_model_applies_limit_choices_to(self):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates_with_filtering(self):\n+        \"\"\"\n+        Test that the queryset does not contain duplicates when `limit_choices_to`\n+        involves filtering with a Q object and a dictionary on related fields.\n+        \"\"\"\n+        StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        StumpJoke.objects.create(funny=True, most_recently_fooled=self.threepwood)\n+        StumpJoke.objects.create(funny=True, most_recently_fooled=self.marley)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [self.marley, self.threepwood],\n+        )\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..a0e1a05 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -906,7 +906,16 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         obj = FileField(storage=GetStorage)\n         self.assertIsInstance(obj.storage, BaseStorage)\n \n-    def test_callable_storage_file_field_in_model(self):\n+    def test_deconstruct_file_field_with_callable_storage(self):\n+        \"\"\"\n+        Ensure that a FileField with a callable storage parameter deconstructs\n+        to the callable rather than the evaluated storage.\n+        \"\"\"\n+        obj = Storage()\n+        # Deconstruct the field and verify the storage field is the callable, not the evaluated storage\n+        *_, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        storage_callable = kwargs['storage']\n+        self.assertIs(storage_callable, callable_storage)\n         obj = Storage()\n         self.assertEqual(obj.storage_callable.storage, temp_storage)\n         self.assertEqual(obj.storage_callable.storage.location, temp_storage_location)\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..ec351af 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -627,7 +627,18 @@ class TestQuerying(TestCase):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='\"BaR\"').exists(), False)\n \n-    @skipUnlessDBFeature('supports_json_field_contains')\n+    def test_key_in_correct_behavior(self):\n+        # This test is to verify that `__in` behaves correctly for JSONField key transforms.\n+        tests = [\n+            (\"value__key__in\", [0], self.objs[:3]),  # Assuming objs[:3] are the expected results\n+            (\"value__key__in\", [1, 2], self.objs[3:6]),  # Assuming objs[3:6] are populated based on test setup\n+        ]\n+        for lookup, value, expected in tests:\n+            with self.subTest(lookup=lookup, value=value):\n+                self.assertSequenceEqual(\n+                    NullableJSONModel.objects.filter(**{lookup: value}),\n+                    expected,\n+                )\n     def test_key_contains(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='ar').exists(), False)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__contains='bar').exists(), True)\n",
  "django__django-13363": "",
  "django__django-13401": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e39d03e..77808a3 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -103,6 +103,50 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertEqual(path, 'model_fields.tests.Nested.Field')\n \n \n+from django.db import models\n+from django.test import TestCase\n+import pickle\n+\n+class AbstractFieldEqualityTests(TestCase):\n+    def test_abstract_inherited_fields_comparisons(self):\n+        \"\"\"Field instances from abstract models should compare correctly.\"\"\"\n+\n+        class AbstractModel(models.Model):\n+            field = models.IntegerField()\n+            \n+            class Meta:\n+                abstract = True\n+        \n+        class InheritedModel1(AbstractModel):\n+            pass\n+        \n+        class InheritedModel2(AbstractModel):\n+            pass\n+\n+        field_abstract = AbstractModel._meta.get_field('field')\n+        field_inherit1 = InheritedModel1._meta.get_field('field')\n+        field_inherit2 = InheritedModel2._meta.get_field('field')\n+\n+        # Fields should not be equal across different models\n+        self.assertNotEqual(field_inherit1, field_inherit2)\n+        self.assertNotEqual(field_abstract, field_inherit1)\n+        self.assertNotEqual(field_abstract, field_inherit2)\n+\n+        # Check ordering\n+        self.assertLess(field_abstract, field_inherit1)\n+        self.assertLess(field_abstract, field_inherit2)\n+        self.assertLess(field_inherit1, field_inherit2)\n+\n+        # Check hash differences\n+        self.assertNotEqual(hash(field_abstract), hash(field_inherit1))\n+        self.assertNotEqual(hash(field_abstract), hash(field_inherit2))\n+        self.assertNotEqual(hash(field_inherit1), hash(field_inherit2))\n+\n+        # Check hash consistency: same model, same field should be equal\n+        new_field_inherit1 = InheritedModel1._meta.get_field('field')\n+        self.assertEqual(field_inherit1, new_field_inherit1)\n+        self.assertEqual(hash(field_inherit1), hash(new_field_inherit1))\n+\n class ChoicesTests(SimpleTestCase):\n \n     @classmethod\n",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..ae50711 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,59 @@\n+\n+class LockFileTestCase(unittest.TestCase):\n+    \"\"\"\n+    Test cases for file locking using the posix implementation.\n+    \"\"\"\n+\n+    def test_non_blocking_lock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+\n+        # Create a dummy file for testing\n+        with open(file_path, 'wb') as f:\n+            f.write(b'\\0')\n+\n+        with open(file_path, 'rb+') as f1, open(file_path, 'rb+') as f2:\n+            # Acquire an exclusive lock on f1\n+            self.assertIs(locks.lock(f1, locks.LOCK_EX), True)\n+            # Try to acquire a non-blocking exclusive lock on f2 (should fail)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            # Try to acquire a non-blocking shared lock on f2 (should fail)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH | locks.LOCK_NB), False)\n+            # Unlock f1\n+            self.assertIs(locks.unlock(f1), True)\n+\n+    def test_shared_lock_with_unlock(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+\n+        # Create a dummy file for testing\n+        with open(file_path, 'wb') as f:\n+            f.write(b'\\0')\n+\n+        with open(file_path, 'rb+') as f1, open(file_path, 'rb+') as f2:\n+            # Acquire a shared lock on f1\n+            self.assertIs(locks.lock(f1, locks.LOCK_SH), True)\n+            # Try to acquire a non-blocking exclusive lock on f2 (should fail)\n+            self.assertIs(locks.lock(f2, locks.LOCK_EX | locks.LOCK_NB), False)\n+            # Unlock f1 and try again (should succeed after unlock)\n+            self.assertIs(locks.unlock(f1), True)\n+            self.assertIs(locks.lock(f2, locks.LOCK_SH), True)\n+            self.assertIs(locks.unlock(f2), True)\n+\n+    def test_lock_and_unlock_on_same_file(self):\n+        file_path = Path(__file__).parent / 'test.png'\n+\n+        # Create a dummy file for testing\n+        with open(file_path, 'wb') as f:\n+            f.write(b'\\0')\n+\n+        with open(file_path, 'rb+') as f:\n+            # Exclusively lock the file\n+            self.assertIs(locks.lock(f, locks.LOCK_EX), True)\n+            # Unlock the file\n+            self.assertIs(locks.unlock(f), True)\n+            # Try to lock again after unlock\n+            self.assertIs(locks.lock(f, locks.LOCK_EX), True)\n+            self.assertIs(locks.unlock(f), True)\n+\n import errno\n import gzip\n import os\n@@ -8,7 +64,7 @@ from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..43db6ec 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2076,6 +2076,36 @@ class QuerysetOrderedTests(unittest.TestCase):\n     def test_empty_queryset(self):\n         self.assertIs(Annotation.objects.none().ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('id'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('id').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Annotation.objects.values('name').annotate(num_notes=Count('id'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_annotate_with_default_model_ordering(self):\n+        # Assuming Annotation model has a Meta ordering on 'name'\n+        qs = Annotation.objects.annotate(num_notes=Count('id'))\n+        self.assertIs(qs.ordered, False)\n+        qs_with_order = qs.order_by('name')\n+        self.assertIs(qs_with_order.ordered, True)\n+\n+    def test_annotated_query_distinct(self):\n+        qs = Annotation.objects.annotate(num_notes=Count('id')).distinct()\n+        self.assertIs(qs.ordered, False)\n+        qs_with_order = qs.order_by('name')\n+        self.assertIs(qs_with_order.ordered, True)\n+\n+    def test_no_ordering_meta(self):\n+        # Assuming there's no Meta ordering\n+        qs = NoMetaOrderingModel.objects.annotate(num_records=Count('id'))\n+        self.assertIs(qs.ordered, False)\n+        qs_with_order = qs.order_by('id')\n+        self.assertIs(qs_with_order.ordered, True)\n+\n     def test_order_by_extra(self):\n         self.assertIs(Annotation.objects.all().extra(order_by=['id']).ordered, True)\n \n",
  "django__django-13516": "",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..d5b1ecd 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,8 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from .models.with_custom_email_field import CustomEmailField\n+from .models import IntegerUsernameUser\n from django.test import TestCase\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -37,7 +40,27 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+\n+    def test_token_with_different_email(self):\n+        \"\"\"Updating the user email address invalidates the token.\"\"\"\n+        tests = [\n+            (CustomEmailField, None),\n+            (CustomEmailField, 'test4@example.com'),\n+            (User, 'test4@example.com'),\n+        ]\n+        for model, email in tests:\n+            with self.subTest(model=model.__qualname__, email=email):\n+                user = model.objects.create_user(\n+                    'changeemailuser',\n+                    email=email,\n+                    password='testpw',\n+                )\n+                p0 = PasswordResetTokenGenerator()\n+                tk1 = p0.make_token(user)\n+                self.assertIs(p0.check_token(user, tk1), True)\n+                setattr(user, user.get_email_field_name(), 'test4new@example.com')\n+                user.save()\n+                self.assertIs(p0.check_token(user, tk1), False)\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..5a910aa 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,7 +1,9 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n+from django.db.models import Q, UniqueConstraint\n from django.core import checks\n from django.db import models\n from django.test import (\n@@ -85,7 +87,43 @@ class UserModelChecksTests(SimpleTestCase):\n                 ),\n             ])\n \n-    @override_settings(AUTH_USER_MODEL='auth_tests.BadUser')\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserPartiallyUnique')\n+    def test_username_with_partial_unique_constraint_and_unique(self):\n+        class CustomUserPartiallyUnique(AbstractBaseUser):\n+            username = models.CharField(max_length=30, unique=True)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=['username'],\n+                        name='partial_username_unique_unique_field',\n+                        condition=Q(password__isnull=False),\n+                    ),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [], \"Expected no errors with both unique field and constraint.\")\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithDifferentConstraint')\n+    def test_username_with_different_unique_constraint(self):\n+        class CustomUserWithDifferentConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(fields=['username', 'email'], name='username_email_unique'),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Error(\n+                \"'CustomUserWithDifferentConstraint.username' must be unique because it is named as the 'USERNAME_FIELD'.\",\n+                obj=CustomUserWithDifferentConstraint,\n+                id='auth.E003',\n+            ),\n+        ], \"Expected auth.E003 error when unique constraint does not match USERNAME_FIELD.\")\n     def test_is_anonymous_authenticated_methods(self):\n         \"\"\"\n         <User Model>.is_anonymous/is_authenticated must not be methods.\n",
  "django__django-13569": "",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..588bc02 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -801,9 +802,35 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n+from collections import namedtuple\n \n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n+    def setUpTestData(cls):\n+        ceo = Employee.objects.create(firstname='Just', lastname='Doit', salary=30)\n+        cls.company1 = Company.objects.create(name='5020 Ltd', num_employees=50, num_chairs=20, ceo=ceo)\n+        cls.company2 = Company.objects.create(name='5040 Ltd', num_employees=60, num_chairs=40, ceo=ceo)\n+        cls.company3 = Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n+    \n+    def test_range_lookup_with_namedtuple(self):\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        range_tuple = EmployeeRange(51, 100)\n+        qs = Company.objects.filter(num_employees__range=range_tuple)\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['<Company: 99300 Ltd>'],\n+            ordered=False\n+        )\n+\n+    def test_range_lookup_with_regular_tuple(self):\n+        range_tuple = (51, 100)\n+        qs = Company.objects.filter(num_employees__range=range_tuple)\n+        self.assertQuerysetEqual(\n+            qs,\n+            ['<Company: 99300 Ltd>'],\n+            ordered=False\n+        )\n+    @classmethod\n     def setUpTestData(cls):\n         ceo = Employee.objects.create(firstname='Just', lastname='Doit', salary=30)\n         # MySQL requires that the values calculated for expressions don't pass\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..c14103d 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -13,6 +13,7 @@ import tempfile\n import unittest\n from io import StringIO\n from unittest import mock\n+from django.test.utils import captured_stderr, captured_stdout\n \n from django import conf, get_version\n from django.conf import settings\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..11c07b3 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -57,7 +58,20 @@ class DateFormatTests(SimpleTestCase):\n         self.assertEqual(datetime.fromtimestamp(int(format(dt, 'U')), tz).utctimetuple(), dt.utctimetuple())\n         self.assertEqual(datetime.fromtimestamp(int(format(dt, 'U')), ltz).utctimetuple(), dt.utctimetuple())\n \n-    def test_epoch(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (999, '99'),\n+            (0, '00'),  # Edge case test for year 0\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         udt = datetime(1970, 1, 1, tzinfo=utc)\n         self.assertEqual(format(udt, 'U'), '0')\n \n@@ -164,4 +178,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..49d4791 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,13 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_password_hash_field_disabled(self):\n+        # Create an instance of the ReadOnlyPasswordHashField\n+        field = ReadOnlyPasswordHashField()\n+\n+        # Assert that the field's `disabled` attribute is True\n+        self.assertIs(field.disabled, True)\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-13786": "",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..c847403 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,6 +1,9 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n+from django.utils.functional import lazy\n+from django.utils.translation import gettext_lazy\n from django.test import SimpleTestCase\n \n from ..utils import setup\n@@ -46,6 +49,27 @@ class AddTests(SimpleTestCase):\n         output = self.engine.render_to_string('add07', {'d': date(2000, 1, 1), 't': timedelta(10)})\n         self.assertEqual(output, 'Jan. 11, 2000')\n \n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n \n class FunctionTests(SimpleTestCase):\n \n",
  "django__django-13807": "diff --git a/tests/backends/models.py b/tests/backends/models.py\nindex a2fd310..456f9d6 100644\n--- a/tests/backends/models.py\n+++ b/tests/backends/models.py\n@@ -132,11 +132,27 @@ class CircularB(models.Model):\n \n class RawData(models.Model):\n     raw_data = models.BinaryField()\n+from django.db import models\n+from .models import Reporter\n+\n+class SQLKeywordsModel(models.Model):\n+    id = models.AutoField(primary_key=True, db_column='select')\n+    reporter = models.ForeignKey(Reporter, models.CASCADE, db_column='where')\n \n+    class Meta:\n+        db_table = 'order'\n \n class Author(models.Model):\n     name = models.CharField(max_length=255, unique=True)\n+from django.db import models\n+from .models import Reporter\n+\n+class SQLKeywordsModel(models.Model):\n+    id = models.AutoField(primary_key=True, db_column='select')\n+    reporter = models.ForeignKey(Reporter, models.CASCADE, db_column='where')\n \n+    class Meta:\n+        db_table = 'order'\n \n class Book(models.Model):\n-    author = models.ForeignKey(Author, models.CASCADE, to_field='name')\n+    author = models.ForeignKey(Author, models.CASCADE, to_field='name')\n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..11445cf 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1314,6 +1314,11 @@ class ManageRunserver(SimpleTestCase):\n         self.assertIn('unapplied migration(s)', self.output.getvalue())\n \n \n+import mock\n+from django.core.management import call_command\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from io import StringIO\n+\n class ManageRunserverMigrationWarning(TestCase):\n \n     def setUp(self):\n@@ -1342,15 +1347,31 @@ class ManageRunserverMigrationWarning(TestCase):\n             'app_waiting_migration.', output\n         )\n \n-\n-class ManageRunserverEmptyAllowedHosts(AdminScriptTestCase):\n+class ManageRunserverSkipChecks(AdminScriptTestCase):\n     def setUp(self):\n         super().setUp()\n-        self.write_settings('settings.py', sdict={\n-            'ALLOWED_HOSTS': [],\n-            'DEBUG': False,\n-        })\n+        self.stdout = StringIO()\n \n+    @mock.patch('django.core.management.commands.runserver.RunserverCommand.check')\n+    def test_skip_checks_option(self, mocked_check):\n+        call_command(\n+            'runserver',\n+            '--skip-checks',\n+            use_reloader=False,\n+            stdout=self.stdout,\n+        )\n+        self.assertNotIn('Performing system checks...', self.stdout.getvalue())\n+        mocked_check.assert_not_called()\n+\n+    @mock.patch('django.core.management.commands.runserver.RunserverCommand.check')\n+    def test_no_skip_checks_option(self, mocked_check):\n+        call_command(\n+            'runserver',\n+            use_reloader=False,\n+            stdout=self.stdout,\n+        )\n+        self.assertIn('Performing system checks...', self.stdout.getvalue())\n+        mocked_check.assert_called()\n     def test_empty_allowed_hosts_error(self):\n         out, err = self.run_manage(['runserver'])\n         self.assertNoOutput(out)\n",
  "django__django-13810": "diff --git a/tests/middleware_exceptions/tests.py b/tests/middleware_exceptions/tests.py\nindex bb82f7d..99d834a 100644\n--- a/tests/middleware_exceptions/tests.py\n+++ b/tests/middleware_exceptions/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.conf import settings\n from django.core.exceptions import MiddlewareNotUsed\n from django.http import HttpResponse\n@@ -268,11 +269,29 @@ class MiddlewareSyncAsyncTests(SimpleTestCase):\n \n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+        'middleware_exceptions.middleware.NonAsyncDummyMiddleware',\n     ])\n-    async def test_async_and_sync_middleware_async_call(self):\n-        response = await self.async_client.get('/middleware_exceptions/view/')\n-        self.assertEqual(response.content, b'OK')\n-        self.assertEqual(response.status_code, 200)\n+    async def test_non_async_middleware_used_in_async_context(self):\n+        with self.assertLogs('django.request', 'ERROR') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 500)\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.NonAsyncDummyMiddleware'\",\n+            cm.output[0],\n+        )\n+\n+    @override_settings(MIDDLEWARE=[\n+        'middleware_exceptions.middleware.NonAsyncDummyMiddleware',\n+        'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n+    ])\n+    async def test_chain_non_async_to_async_middleware(self):\n+        with self.assertLogs('django.request', 'ERROR') as cm:\n+            response = await self.async_client.get('/middleware_exceptions/view/')\n+        self.assertEqual(response.status_code, 500)\n+        self.assertIn(\n+            \"MiddlewareNotUsed: 'middleware_exceptions.middleware.NonAsyncDummyMiddleware'\",\n+            cm.output[0],\n+        )\n \n     @override_settings(MIDDLEWARE=[\n         'middleware_exceptions.middleware.SyncAndAsyncMiddleware',\n",
  "django__django-13820": "",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..1783b6d 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -9,6 +9,8 @@ from unittest import mock\n \n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n+from unittest import mock\n+from django.core.exceptions import ImproperlyConfigured\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n from django.db.utils import ConnectionHandler\n from django.test import (\n@@ -36,7 +38,22 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_supported(self):\n+        # Test with a supported SQLite version (3.9.0)\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 9, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.9.0'):\n+            try:\n+                check_sqlite_version()  # This should not raise ImproperlyConfigured\n+            except ImproperlyConfigured:\n+                self.fail(\"check_sqlite_version() raised ImproperlyConfigured unexpectedly!\")\n+\n+        # Test with a newer supported SQLite version (3.11.0)\n+        with mock.patch.object(dbapi2, 'sqlite_version_info', (3, 11, 0)), \\\n+                mock.patch.object(dbapi2, 'sqlite_version', '3.11.0'):\n+            try:\n+                check_sqlite_version()  # This should not raise ImproperlyConfigured\n+            except ImproperlyConfigured:\n+                self.fail(\"check_sqlite_version() raised ImproperlyConfigured unexpectedly!\")\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "",
  "django__django-13925": "diff --git a/tests/check_framework/test_model_checks.py b/tests/check_framework/test_model_checks.py\nindex 6424d89..693c7c5 100644\n--- a/tests/check_framework/test_model_checks.py\n+++ b/tests/check_framework/test_model_checks.py\n@@ -371,7 +371,7 @@ def mocked_is_overridden(self, setting):\n     )\n \n \n-@mock.patch('django.conf.UserSettingsHolder.is_overridden', mocked_is_overridden)\n+from unittest import mock\n @override_settings(DEFAULT_AUTO_FIELD='django.db.models.AutoField')\n @isolate_apps('check_framework.apps.CheckDefaultPKConfig', attr_name='apps')\n @override_system_checks([checks.model_checks.check_all_models])\n@@ -414,4 +414,4 @@ class ModelDefaultAutoFieldTests(SimpleTestCase):\n             class Meta:\n                 app_label = 'check_framework.apps.CheckPKConfig'\n \n-        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n+        self.assertEqual(checks.run_checks(app_configs=apps.get_app_configs()), [])\n",
  "django__django-13933": "",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..2b3a6bd 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,8 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+from django.db import models\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n@@ -77,7 +79,12 @@ class ChildNullableParent(models.Model):\n     parent = models.ForeignKey(Parent, models.CASCADE, null=True)\n \n \n-class ToFieldChild(models.Model):\n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n     parent = models.ForeignKey(Parent, models.CASCADE, to_field='name', related_name='to_field_children')\n \n \n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..e029e1f 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,7 +1,10 @@\n+\n from django.db import IntegrityError, transaction\n from django.test import TestCase, skipIfDBFeature\n \n-from .models import Bar, Business, Employee, Foo\n+from .models import Bar, Business, CustomAutoFieldModel, Employee, Foo\n+from .fields import MyWrapper\n+from django.test import skipUnlessDBFeature\n \n \n class BasicCustomPKTests(TestCase):\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..35c032b 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -817,6 +817,40 @@ class BasicExpressionsTests(TestCase):\n         )\n \n \n+from django.db.models import Exists, OuterRef, Q\n+from django.test import TestCase\n+from django.db.models import BooleanField, When, Case\n+\n+class BooleanExpressionCombinatorialTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.max = Employee.objects.create(firstname='Max', lastname='Mustermann', salary=30)\n+        cls.example_inc = Company.objects.create(name='Example Inc', ceo=cls.max)\n+        cls.gmbh = Company.objects.create(name='GmbH', point_of_contact=cls.max)\n+        cls.foobar_ltd = Company.objects.create(name='Foobar Ltd', ceo=Employee.objects.create(firstname='Foo', lastname='Bar', salary=20))\n+\n+    def test_commutativity_with_Q_and_Exists(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+\n+        # List of tests representing different commutations of Q() & Exists()\n+        tests = [\n+            (Exists(is_ceo) & Q(), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+            (Q() & Exists(is_ceo), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+            (Exists(is_ceo) | Q(), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+            (Q() | Exists(is_ceo), [self.example_inc.ceo, self.foobar_ltd.ceo, self.max]),\n+            (Exists(is_poc) & Q(), [self.max]),\n+            (Q() & Exists(is_poc), [self.max]),\n+            (Exists(is_poc) | Q(), [self.example_inc.ceo, self.max]),\n+            (Q() | Exists(is_poc), [self.example_inc.ceo, self.max]),\n+        ]\n+\n+        for conditions, expected in tests:\n+            with self.subTest(conditions=conditions):\n+                self.assertCountEqual(Employee.objects.filter(conditions), expected)\n+\n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..2a784a9 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -205,6 +205,15 @@ class TestHashedFiles:\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n+    def test_no_duplicate_yielded_files(self):\n+        collectstatic_cmd = CollectstaticCommand()\n+        collectstatic_cmd.set_options(dry_run=False, post_process=True)\n+\n+        stats = collectstatic_cmd.collect()\n+\n+        # Check that no file is yielded twice.\n+        self.assertCountEqual(stats['post_processed'], set(stats['post_processed']))\n+\n     def test_css_import_case_insensitive(self):\n         relpath = self.hashed_file_path(\"cached/styles_insensitive.css\")\n         self.assertEqual(relpath, \"cached/styles_insensitive.3fa427592a53.css\")\n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..676a60a 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,8 +1,10 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n \n import copy\n+import collections.abc\n import pickle\n \n from django.test import SimpleTestCase\n@@ -17,8 +19,26 @@ class OrderedSetTests(SimpleTestCase):\n     def test_init_with_iterable(self):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n-\n-    def test_remove(self):\n+    def test_reversed(self):\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+\n+    def test_reversed_empty(self):\n+        s = reversed(OrderedSet([]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n+    def test_reversed_original_set_unchanged(self):\n+        original_set = OrderedSet([1, 2, 3])\n+        s = reversed(original_set)\n+        self.assertEqual(list(s), [3, 2, 1])\n+        self.assertEqual(list(original_set), [1, 2, 3])\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "",
  "django__django-14140": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex c3db825..b54b2ab 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -839,6 +839,24 @@ class BasicExpressionsTests(TestCase):\n                 self.assertCountEqual(Employee.objects.filter(conditions), [self.max])\n \n \n+from django.db.models import Exists, F, OuterRef, Q\n+from .models import Tag\n+\n+class BooleanExpressionInQTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.max = Employee.objects.create(firstname='Max', lastname='Mustermann', salary=20)\n+        cls.example_inc = Company.objects.create(name='Example Inc.', point_of_contact=cls.max)\n+        cls.gmbh = Company.objects.create(name='GmbH', point_of_contact=None)\n+\n+    def test_boolean_expression_with_single_child_q(self):\n+        tagged = Tag.objects.filter(category=OuterRef('pk'))\n+        q = Q(Exists(tagged))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(tagged),))\n+        self.assertEqual(kwargs, {})\n+\n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..7385311 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -67,7 +68,25 @@ class TestDefaultPK(SimpleTestCase):\n                 pass\n \n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n-    @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n             pass\n@@ -83,7 +102,25 @@ class TestDefaultPK(SimpleTestCase):\n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n-    @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n             m2m = models.ManyToManyField('self')\n",
  "django__django-14311": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex b7e6f92..6e8a6a5 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -166,6 +166,31 @@ class TestIterModulesAndFiles(SimpleTestCase):\n class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch(\"sys.argv\", [test_main.__file__, \"runserver\"])\n+    @mock.patch(\"sys.warnoptions\", [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, \"-m\", \"utils_tests.test_module.main_module\", \"runserver\"],\n+        )\n+\n+    @mock.patch(\"sys.argv\", [\"-m\", \"utils_tests.test_module.sub_module\", \"runserver\"])\n+    @mock.patch(\"sys.warnoptions\", [])\n+    def test_run_as_dotted_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, \"-m\", \"utils_tests.test_module.sub_module\", \"runserver\"],\n+        )\n+\n+    @mock.patch(\"sys.argv\", [\"-m\", \"utils_tests.test_module\", \"runserver\"])\n+    @mock.patch(\"sys.warnoptions\", [])\n+    def test_run_non_package_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, \"-m\", \"utils_tests.test_module\", \"runserver\"]\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_module(self):\n         self.assertEqual(\n@@ -175,6 +200,31 @@ class TestChildArguments(SimpleTestCase):\n \n     @mock.patch.dict(sys.modules, {'__main__': test_main})\n     @mock.patch('sys.argv', [test_main.__file__, 'runserver'])\n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch(\"sys.argv\", [test_main.__file__, \"runserver\"])\n+    @mock.patch(\"sys.warnoptions\", [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, \"-m\", \"utils_tests.test_module.main_module\", \"runserver\"],\n+        )\n+\n+    @mock.patch(\"sys.argv\", [\"-m\", \"utils_tests.test_module.sub_module\", \"runserver\"])\n+    @mock.patch(\"sys.warnoptions\", [])\n+    def test_run_as_dotted_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, \"-m\", \"utils_tests.test_module.sub_module\", \"runserver\"],\n+        )\n+\n+    @mock.patch(\"sys.argv\", [\"-m\", \"utils_tests.test_module\", \"runserver\"])\n+    @mock.patch(\"sys.warnoptions\", [])\n+    def test_run_non_package_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, \"-m\", \"utils_tests.test_module\", \"runserver\"]\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_run_as_non_django_module(self):\n         self.assertEqual(\n@@ -190,6 +240,31 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch(\"sys.argv\", [test_main.__file__, \"runserver\"])\n+    @mock.patch(\"sys.warnoptions\", [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, \"-m\", \"utils_tests.test_module.main_module\", \"runserver\"],\n+        )\n+\n+    @mock.patch(\"sys.argv\", [\"-m\", \"utils_tests.test_module.sub_module\", \"runserver\"])\n+    @mock.patch(\"sys.warnoptions\", [])\n+    def test_run_as_dotted_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, \"-m\", \"utils_tests.test_module.sub_module\", \"runserver\"],\n+        )\n+\n+    @mock.patch(\"sys.argv\", [\"-m\", \"utils_tests.test_module\", \"runserver\"])\n+    @mock.patch(\"sys.warnoptions\", [])\n+    def test_run_non_package_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, \"-m\", \"utils_tests.test_module\", \"runserver\"]\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n@@ -201,6 +276,31 @@ class TestChildArguments(SimpleTestCase):\n                     [exe_path, 'runserver']\n                 )\n \n+    @mock.patch.dict(sys.modules, {'__main__': test_main_module})\n+    @mock.patch(\"sys.argv\", [test_main.__file__, \"runserver\"])\n+    @mock.patch(\"sys.warnoptions\", [])\n+    def test_run_as_non_django_module_non_package(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, \"-m\", \"utils_tests.test_module.main_module\", \"runserver\"],\n+        )\n+\n+    @mock.patch(\"sys.argv\", [\"-m\", \"utils_tests.test_module.sub_module\", \"runserver\"])\n+    @mock.patch(\"sys.warnoptions\", [])\n+    def test_run_as_dotted_module(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, \"-m\", \"utils_tests.test_module.sub_module\", \"runserver\"],\n+        )\n+\n+    @mock.patch(\"sys.argv\", [\"-m\", \"utils_tests.test_module\", \"runserver\"])\n+    @mock.patch(\"sys.warnoptions\", [])\n+    def test_run_non_package_dotted_name(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, \"-m\", \"utils_tests.test_module\", \"runserver\"]\n+        )\n+\n     @mock.patch('sys.warnoptions', [])\n     def test_entrypoint_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..cf8dc9b 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -222,6 +222,15 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'git://example.com/', None),\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n \n+    # Forbidden characters like CR, LF, and tabs should raise a ValidationError\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://www.djangoproject.com/\\t', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\t', ValidationError),\n+    (URLValidator(), 'http://\\nwww.djangoproject.com/', ValidationError),\n+    (URLValidator(), 'http://\\t[::ffff:192.9.5.5]', ValidationError),\n+    (URLValidator(), 'http://[\\r::ffff:192.9.5.5]', ValidationError),\n+\n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..bd3a03a 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1525,8 +1525,48 @@ class AggregationTests(TestCase):\n             allow_distinct = True\n         DistinctAggregate('foo', distinct=True)\n \n+from django.test import TestCase\n+from django.db.models import Count, Q\n+from yourapp.models import YourRelatedModel, PropertyGroup, AgentModel\n \n class JoinPromotionTests(TestCase):\n+    def test_q_object_or_handling_with_related_in(self):\n+        # Setup initial data\n+        management_agent = AgentModel.objects.create()  # Modify as needed\n+        # Create PropertyGroup records\n+        PropertyGroup.objects.create(id=1, management_agent=management_agent)\n+        PropertyGroup.objects.create(id=2, management_agent=management_agent)\n+\n+        property_groups = PropertyGroup.objects.filter(management_agent=management_agent)\n+        queryset = YourRelatedModel.objects.annotate(Count(\"agent__property_groups\"))\n+\n+        # Test the 'in' filter trigger for multiple columns issue\n+        qs_with_in = queryset.filter(\n+            Q(agent__property_groups__in=property_groups)\n+            | Q(agent__property_groups__count=0)\n+        ).distinct()\n+        \n+        # This query should not raise an error\n+        self.assertIsNotNone(qs_with_in)\n+\n+    def test_q_object_id_in_as_single_column(self):\n+        # Setup initial data\n+        management_agent = AgentModel.objects.create()  # Modify as needed\n+        # Create PropertyGroup records\n+        PropertyGroup.objects.create(id=1, management_agent=management_agent)\n+        PropertyGroup.objects.create(id=2, management_agent=management_agent)\n+\n+        property_groups = PropertyGroup.objects.filter(management_agent=management_agent)\n+        queryset = YourRelatedModel.objects.annotate(Count(\"agent__property_groups\"))\n+\n+        # Test the id__in filter works smoothly\n+        qs_with_id_in = queryset.filter(\n+            Q(agent__property_groups__id__in=property_groups.values_list(\"id\", flat=True))\n+            | Q(agent__property_groups__count=0)\n+        ).distinct()\n+        \n+        # This query should complete without error\n+        self.assertIsNotNone(qs_with_id_in)\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n         c = Charlie.objects.create(bravo=b)\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..3f7384c 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -166,7 +166,12 @@ class DateFormatTests(SimpleTestCase):\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n             )\n \n-    def test_year_before_1000(self):\n+    def test_y_format_year_before_1000(self):\n+        self.assertEqual(dateformat.format(datetime(1, 1, 1), 'Y'), '0001')\n+        self.assertEqual(dateformat.format(datetime(999, 1, 1), 'Y'), '0999')\n+\n+    def test_year_zero_corner_case(self):\n+        self.assertEqual(dateformat.format(datetime(0, 1, 1), 'Y'), '0000')\n         tests = [\n             (476, '76'),\n             (42, '42'),\n",
  "django__django-14376": "",
  "django__django-14434": "",
  "django__django-14493": "diff --git a/tests/staticfiles_tests/storage.py b/tests/staticfiles_tests/storage.py\nindex dc966a1..fe07fe2 100644\n--- a/tests/staticfiles_tests/storage.py\n+++ b/tests/staticfiles_tests/storage.py\n@@ -93,7 +93,9 @@ class ExtraPatternsStorage(ManifestStaticFilesStorage):\n         ),\n     )\n \n+class NoPostProcessReplacedPathStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n \n class NoneHashStorage(ManifestStaticFilesStorage):\n     def file_hash(self, name, content=None):\n-        return None\n+        return None\n",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..f9494b1 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -642,6 +642,33 @@ class ExecutorTests(MigrationTestBase):\n         # Record all replaced migrations as applied\n         recorder.record_applied(\"migrations\", \"0001_initial\")\n         recorder.record_applied(\"migrations\", \"0002_second\")\n+        \n+        # Create a test case to check the unapplying behavior of squashed migrations\n+        def test_unapply_squashed_migration(self):\n+            executor = MigrationExecutor(connection)\n+            executor.migrate([('migrations', '0001_squashed_0002')])\n+            # Verify migration is applied\n+            self.assertIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+            # Unapply migration\n+            executor.migrate([('migrations', None)])\n+            # Verify squashed migration is unapplied correctly\n+            self.assertNotIn(\n+                ('migrations', '0001_squashed_0002'),\n+                executor.recorder.applied_migrations(),\n+            )\n+            # Verify original migrations are marked as unapplied\n+            self.assertNotIn(\n+                ('migrations', '0001_initial'),\n+                executor.recorder.applied_migrations(),\n+            )\n+            self.assertNotIn(\n+                ('migrations', '0002_second'),\n+                executor.recorder.applied_migrations(),\n+            )\n+\n         executor = MigrationExecutor(connection)\n         executor.migrate([(\"migrations\", \"0001_squashed_0002\")])\n \n",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..cf08635 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -256,6 +256,33 @@ class TestUtilsHtml(SimpleTestCase):\n             ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n         )\n+        # Original test case related to the reported issue\n+        issue_tests = (\n+            (\n+                'Search for google.com/?q=1&lt! and see.',\n+                'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+            ),\n+            # Additional test cases\n+            (\n+                'Visit example.com/path?arg=val&lt; and enjoy.',\n+                'Visit <a href=\"http://example.com/path?arg=val%3C\">example.com/path?arg=val&lt</a> and enjoy.'\n+            ),\n+            (\n+                'Check out abc.com/path?x=1&lt;gt!',\n+                'Check out <a href=\"http://abc.com/path?x=1%3Cgt\">abc.com/path?x=1&lt;gt</a>!'\n+            ),\n+            (\n+                'Secure URL: https://secure.org/path?q=3&gt.',\n+                'Secure URL: <a href=\"https://secure.org/path?q=3%3E\">secure.org/path?q=3&gt</a>.'\n+            ),\n+            (\n+                'Mail me at test@example.com&lt;.',\n+                'Mail me at <a href=\"mailto:test@example.com\">test@example.com</a>&lt;.'\n+            ),\n+        )\n+        for value, output in issue_tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(urlize(value), output)\n         for value, output in tests:\n             with self.subTest(value=value):\n                 self.assertEqual(urlize(value), output)\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..0475bf6 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -115,7 +115,37 @@ class BulkUpdateTests(TestCase):\n \n     pk_fields_error = 'bulk_update() cannot be used with primary key fields.'\n \n-    def test_update_primary_key(self):\n+from django.test import TestCase\n+from myapp.models import Note, CustomPk, Valid, Detail, Paragraph, Member\n+\n+class BulkUpdateTests(TestCase):\n+    def test_bulk_update_no_objects(self):\n+        # Test bulk_update with no objects\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_bulk_update(self):\n+        # Setup notes\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i)) for i in range(2000)\n+        ])\n+        notes = list(Note.objects.all())\n+\n+        # Test bulk_update with objects\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_updated_rows_when_passing_duplicates(self):\n+        # Create a single note\n+        note = Note.objects.create(note='test-note', misc='test')\n+        \n+        # Test with duplicate objects in the list\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+\n+        # Test duplicates spread across different batches\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n         with self.assertRaisesMessage(ValueError, self.pk_fields_error):\n             Note.objects.bulk_update([], ['id'])\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..da74ad3 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -337,6 +337,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at most 1 form.'])\n+        # Check the nonform CSS class is added to the error list\n+        self.assertHTMLEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at most 1 form.</li></ul>'\n+        )\n \n     def test_formset_validate_min_flag(self):\n         \"\"\"\n@@ -359,6 +364,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n+        # Check the nonform CSS class is added to the error list\n+        self.assertHTMLEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>Please submit at least 3 forms.</li></ul>'\n+        )\n \n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n@@ -983,6 +993,11 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FavoriteDrinksFormSet(data, prefix='drinks')\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n+        # Check the nonform CSS class is added to the error list\n+        self.assertHTMLEqual(\n+            str(formset.non_form_errors()),\n+            '<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>'\n+        )\n \n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..71ec7c3 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,35 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_datetime_clean_matching_boundfield_initial(self):\n+        \"\"\"\n+        Test that the cleaned data for a form with a disabled DateTimeField\n+        matches the initial value of the BoundField.\n+        \"\"\"\n+        now = datetime.datetime(2021, 10, 5, 15, 0, 0)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+\n+        form = DateTimeForm({})\n+        bf = form['dt']\n+        self.assertEqual(form.cleaned_data['dt'], bf.initial)\n+\n+    def test_changed_data_functionality(self):\n+        \"\"\"\n+        Test that the changed_data functionality correctly detects changes\n+        via BoundField.\n+        \"\"\"\n+        now = datetime.datetime(2021, 10, 5, 15, 0, 0)\n+        \n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now)\n+\n+        form_without_change = DateTimeForm({'dt': '2021-10-05 15:00:00'})\n+        form_with_change = DateTimeForm({'dt': '2021-10-05 16:00:00'})\n+\n+        self.assertEqual(form_without_change.changed_data, [])\n+        self.assertEqual(form_with_change.changed_data, ['dt'])\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..0c5be38 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -1,7 +1,8 @@\n from datetime import date, datetime, timedelta\n from operator import attrgetter\n \n-from django.db import IntegrityError\n+from django.core.checks import Error\n+from django.db import IntegrityError, models\n from django.test import TestCase\n \n from .models import (\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..93a2f49 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -10,6 +11,9 @@ from django.core.exceptions import PermissionDenied\n from django.http import Http404\n from django.test import RequestFactory, override_settings\n from django.urls import reverse, reverse_lazy\n+from datetime import date\n+from django.test import TestCase\n+from admin_views.models import Question\n \n from .admin import AnswerAdmin, QuestionAdmin\n from .models import (\n",
  "django__django-14765": "",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..4b95e18 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -166,6 +166,13 @@ class TestIterModulesAndFiles(SimpleTestCase):\n                 )\n \n \n+import sys\n+from django.utils import autoreload\n+from unittest import mock\n+import tempfile\n+from pathlib import Path\n+from subprocess import CompletedProcess\n+\n class TestChildArguments(SimpleTestCase):\n     @mock.patch.dict(sys.modules, {'__main__': django.__main__})\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..7116708 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -271,7 +271,50 @@ class MethodDecoratorTests(SimpleTestCase):\n                 self.assertEqual(Test.method.__doc__, 'A method')\n                 self.assertEqual(Test.method.__name__, 'method')\n \n-    def test_new_attribute(self):\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n+    def test_partial_decorator(self):\n+        \"\"\"Test decorating with a partial function keeps wrapper assignments.\"\"\"\n+        from functools import partial\n+\n+        def simple_decorator(func):\n+            @wraps(func)\n+            def wrapped(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return wrapped\n+\n+        partial_decorator = partial(simple_decorator)\n+\n+        class Test:\n+            @method_decorator(partial_decorator)\n+            def some_method(self):\n+                \"\"\"Docstring\"\"\"\n+                pass\n+\n+        self.assertEqual(Test.some_method.__name__, 'some_method')\n+        self.assertEqual(Test.some_method.__doc__, 'Docstring')\n+        self.assertEqual(Test.some_method.__module__, __name__)\n         \"\"\"A decorator that sets a new attribute on the method.\"\"\"\n         def decorate(func):\n             func.x = 1\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..18112c1 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5085,6 +5085,38 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n         self.assertEqual(response.status_code, 404)\n \n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1', \n+            content='content',\n+            book=Book.objects.create(name='Book 1')\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        # Assuming `Chapter` object has a ForeignKey to `Language`.\n+        chapter_url = reverse(f'{admin_site}:admin_views_chapter_change', args=(chapter.pk,))\n+        language_url = reverse(f'{admin_site}:admin_views_language_change', args=(language.pk,))\n+        \n+        response = self.client.get(chapter_url)\n+        \n+        # Check for correct usage of the admin site in URL for the language link\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_40</a></div>' % language_url,\n+            html=True\n+        )\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Test to ensure the default admin site uses the correct URL in read-only ForeignKey fields.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Test to ensure the custom admin site uses the correct URL in read-only ForeignKey fields.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin7')\n+\n     def test_change_form_renders_correct_null_choice_value(self):\n         \"\"\"\n         Regression test for #17911.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..8bb77cc 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n",
  "django__django-14999": "",
  "django__django-15022": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex e1920cd..507ea4c 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -144,14 +144,51 @@ class ChangeListTests(TestCase):\n         class GetListSelectRelatedAdmin(admin.ModelAdmin):\n             list_display = ('band', 'player')\n \n-            def get_list_select_related(self, request):\n-                return ('band', 'player')\n+from django.contrib.auth.models import User\n+from django.test import TestCase\n+from django.urls import reverse\n+from django.db import connection\n+from admin_changelist.models import Parent, Child\n+from admin_changelist.admin import ParentAdmin, ParentAdminTwoSearchFields, site as custom_site\n+from django.contrib.admin.views.main import SEARCH_VAR\n+from django.test.utils import CaptureQueriesContext\n \n-        ia = GetListSelectRelatedAdmin(Invitation, custom_site)\n-        request = self.factory.get('/invitation/')\n+class JoinEfficiencyTests(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        cls.superuser = User.objects.create_superuser('admin', 'admin@test.com', 'password')\n+        cls.parent = Parent.objects.create(name='Mary')\n+        Child.objects.create(parent=cls.parent, name='Danielle', age=18)\n+        Child.objects.create(parent=cls.parent, name='Daniel', age=19)\n+        cls.factory = TestCase().client\n+\n+    def test_single_search_term_joins(self):\n+        \"\"\"Test unnecessary joins are not executed when a single search term is used.\"\"\"\n+        m = ParentAdmin(Parent, custom_site)\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'Daniel'})\n         request.user = self.superuser\n-        cl = ia.get_changelist_instance(request)\n-        self.assertEqual(cl.queryset.query.select_related, {'player': {}, 'band': {}})\n+\n+        cl = m.get_changelist_instance(request)\n+        with CaptureQueriesContext(connection) as context:\n+            _ = list(cl.queryset)\n+\n+        # Assert that there's only one join (the necessary one)\n+        self.assertEqual(sum('JOIN' in query['sql'] for query in context.captured_queries), 1)\n+\n+    def test_multiple_search_terms_joins(self):\n+        \"\"\"Test reduction of joins with multiple search terms over related fields.\"\"\"\n+        m = ParentAdminTwoSearchFields(Parent, custom_site)\n+        request = self.factory.get('/parent/', data={SEARCH_VAR: 'Danielle 18 Daniel 19'})\n+        request.user = self.superuser\n+\n+        cl = m.get_changelist_instance(request)\n+        with CaptureQueriesContext(connection) as context:\n+            result_count = list(cl.queryset)\n+\n+        self.assertEqual(len(result_count), 0)\n+\n+        # Every unique search term prompts a join, so we expect more than 1, but the query should be optimized\n+        self.assertLessEqual(sum('JOIN' in query['sql'] for query in context.captured_queries), 5)\n \n     def test_result_list_empty_changelist_value(self):\n         \"\"\"\n",
  "django__django-15037": "",
  "django__django-15103": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex b862331..9675a1b 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -21,7 +21,22 @@ class TestUtilsHtml(SimpleTestCase):\n             output = value\n         self.assertEqual(function(value), output)\n \n-    def test_escape(self):\n+    def test_json_script_without_id(self):\n+        cases = [\n+            ({'key': 'value'}, '<script type=\"application/json\">{\"key\": \"value\"}</script>'),\n+            ({\"another\": \"test\"}, '<script type=\"application/json\">{\"another\": \"test\"}</script>'),\n+            (42, '<script type=\"application/json\">42</script>'),\n+            (3.14, '<script type=\"application/json\">3.14</script>'),\n+            (True, '<script type=\"application/json\">true</script>'),\n+            (None, '<script type=\"application/json\">null</script>'),\n+            ({\"list\": [1, 2, 3]}, '<script type=\"application/json\">{\"list\": [1, 2, 3]}</script>'),\n+        ]\n+        for value, expected_output in cases:\n+            with self.subTest(value=value):\n+                self.assertHTMLEqual(\n+                    json_script(value),\n+                    expected_output\n+                )\n         items = (\n             ('&', '&amp;'),\n             ('<', '&lt;'),\n@@ -276,4 +291,4 @@ class TestUtilsHtml(SimpleTestCase):\n         )\n         for value in tests:\n             with self.subTest(value=value):\n-                self.assertEqual(urlize(value), value)\n+                self.assertEqual(urlize(value), value)\n",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..1fac53b 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2827,6 +2827,28 @@ class AutodetectorTests(TestCase):\n             ('0002_custom_name_20380101_1112_squashed_0003_model', 3),\n             ('2_squashed_4', 4),\n         ]\n+    \n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n         for migration_name, expected_number in tests:\n             with self.subTest(migration_name=migration_name):\n                 self.assertEqual(\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..1e1f916 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,9 +1,11 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n from django.contrib.messages.storage import base, default_storage\n from django.contrib.messages.storage.base import Message\n from django.http import HttpRequest, HttpResponse\n+from django.contrib.messages import utils\n from django.test import modify_settings, override_settings\n from django.urls import reverse\n from django.utils.translation import gettext_lazy\n@@ -375,6 +377,39 @@ class BaseTests:\n         constants.ERROR: 'bad',\n         29: 'custom',\n     })\n+    \n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'info',\n+        constants.DEBUG: '',\n+        constants.WARNING: 'warn',\n+        constants.ERROR: 'error',\n+        constants.SUCCESS: '',\n+        50: 'very_custom',\n+    })\n+    def test_custom_level_tag(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info', '', 'debug', 'warn', 'error', 'success', 'very_custom'])\n+\n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.DEBUG: 'debug',\n+    })\n+    def test_partial_override_of_settings(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        expected_tags = ['info', 'debug', 'debug', 'warning', 'error', 'success']\n+        self.assertEqual(tags, expected_tags)\n+        \n+    def test_no_override_settings(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        default_level_tags = utils.get_level_tags()\n+        self.assertEqual(base.LEVEL_TAGS, default_level_tags)\n     def test_custom_tags(self):\n         storage = self.get_storage()\n         storage.level = 0\n",
  "django__django-15128": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex adde8a6..401d03a 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -30,8 +30,9 @@ from .models import (\n     SharedConnection, SimpleCategory, SingleObject, SpecialCategory, Staff,\n     StaffUser, Student, Tag, Task, Teacher, Ticket21203Child,\n     Ticket21203Parent, Ticket23605A, Ticket23605B, Ticket23605C, TvChef, Valid,\n-    X,\n+    X, BaseUser, Annotation, Task\n )\n+from django.db.models import Q\n \n \n class Queries1Tests(TestCase):\n@@ -2084,6 +2085,26 @@ class SubqueryTests(TestCase):\n                 ).order_by('id').distinct().values('double_id')[0:2],\n             ).order_by('id').values_list('id', flat=True), [2, 4]\n         )\n+        cls.tag = Tag.objects.create()\n+        cls.annotation_1 = Annotation.objects.create(tag=cls.tag)\n+        annotation_2 = Annotation.objects.create(tag=cls.tag)\n+        note = cls.annotation_1.notes.create(tag=cls.tag)\n+        cls.base_user_1 = BaseUser.objects.create()\n+        cls.base_user_2 = BaseUser.objects.create()\n+        cls.task = Task.objects.create(\n+            owner=cls.base_user_2, creator=cls.base_user_2, note=note,\n+        )\n+\n+    def test_conflicting_aliases_during_combine(self):\n+        qs1 = self.annotation_1.notes.all()\n+        qs2 = BaseUser.objects.filter(\n+            Q(task__owner__note__in=self.annotation_1.notes.all()) |\n+            Q(task__creator__note__in=self.annotation_1.notes.all())\n+        )\n+        self.assertSequenceEqual(qs1, [self.base_user_1.notes.first()])\n+        self.assertSequenceEqual(qs2, [self.base_user_2])\n+        self.assertCountEqual(qs2 | qs1, qs1 | qs2)\n+        self.assertCountEqual(qs2 | qs1, [self.base_user_1.notes.first(), self.base_user_2])\n \n \n class QuerySetBitwiseOperationTests(TestCase):\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..b53e59c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1755,6 +1755,22 @@ class ValueTests(TestCase):\n         Time.objects.update(time=Value(datetime.time(1), output_field=TimeField()))\n         self.assertEqual(Time.objects.get().time, datetime.time(1))\n \n+    def test_deconstruct_simplified_paths(self):\n+        # Check that Value deconstructs to django.db.models.Value\n+        value = Value('example')\n+        path, args, kwargs = value.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Value')\n+        \n+        # Check that F deconstructs to django.db.models.F\n+        f_expression = F('field')\n+        path, args, kwargs = f_expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+\n+        # Check that ExpressionWrapper deconstructs properly\n+        expression = ExpressionWrapper(Value(10), output_field=IntegerField())\n+        path, args, kwargs = expression.deconstruct()\n+        self.assertEqual(path, 'django.db.models.ExpressionWrapper')\n+\n     def test_update_UUIDField_using_Value(self):\n         UUID.objects.create()\n         UUID.objects.update(uuid=Value(uuid.UUID('12345678901234567890123456789012'), output_field=UUIDField()))\n",
  "django__django-15268": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a6c0858..a48ad6b 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1762,7 +1762,28 @@ class AutodetectorTests(TestCase):\n             index_together={('title', 'newfield2')},\n         )\n \n-    def test_proxy(self):\n+    def test_foo_together_optimization(self):\n+        \"\"\"\n+        Optimize redundant AlterFooTogether operations into a single operation.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_empty, self.book],\n+            [self.author_empty, self.book_foo_together_optimized]\n+        )\n+        # There should be only one migration with two optimized operations.\n+        self.assertNumberMigrations(changes, \"otherapp\", 1)\n+        self.assertOperationTypes(changes, 'otherapp', 0, [\n+            'AlterUniqueTogether',\n+            'AlterIndexTogether',\n+        ])\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 0, name='book',\n+            unique_together={('col',)},\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'otherapp', 0, 1, name='book',\n+            index_together={('col',)},\n+        )\n         \"\"\"The autodetector correctly deals with proxy models.\"\"\"\n         # First, we test adding a proxy model\n         changes = self.get_changes([self.author_empty], [self.author_empty, self.author_proxy])\n",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..99b6348 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,7 +1847,41 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n-    def test_resolve_output_field_failure(self):\n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        import datetime\n+        from decimal import Decimal\n+        import uuid\n+        from django.db.models import Value\n+        value_types = [\n+            'str',\n+            True,\n+            42,\n+            3.14,\n+            datetime.date(2019, 5, 15),\n+            datetime.datetime(2019, 5, 15),\n+            datetime.time(3, 16),\n+            datetime.timedelta(1),\n+            Decimal('3.14'),\n+            b'',\n+            uuid.uuid4(),\n+        ]\n+        for value in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                field.clean(value, model_instance=None)\n+\n+    def test_charfield_max_length_validator(self):\n+        \"\"\"\n+        Test that CharField does not create a MaxLengthValidator when max_length is None.\n+        \"\"\"\n+        from django.db.models import CharField\n+        field = CharField(max_length=None)\n+        self.assertEqual(field.validators, [])\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n             Value(object()).output_field\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..4467892 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -624,6 +624,22 @@ class SchemaTests(TransactionTestCase):\n         # Make sure the values were transformed correctly\n         self.assertEqual(Author.objects.extra(where=[\"thing = 1\"]).count(), 2)\n \n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField to an existing model on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        # Ensure 'note_id' column is nullable (which is indicated by the True value at index [1][6] of column data)\n+        self.assertTrue(columns['note_id'][1][6])\n+\n     def test_add_field_binary(self):\n         \"\"\"\n         Tests binary fields get a sane default (#22851)\n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..69e406c 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -10,6 +10,8 @@ from .models import (\n     Bar, Choiceful, Foo, RenamedField, VerboseNameField, Whiz, WhizDelayed,\n     WhizIter, WhizIterEmpty,\n )\n+from django.db import models\n+import pickle\n \n \n class Nested:\n@@ -133,6 +135,63 @@ class BasicFieldTests(SimpleTestCase):\n         self.assertNotEqual(hash(inherit1_model_field), hash(inherit2_model_field))\n \n \n+class FieldHashTests(SimpleTestCase):\n+\n+    def test_hash_immutability_before_assignment(self):\n+        field = models.CharField(max_length=200)\n+        field_hash_initial = hash(field)\n+        another_field = models.CharField(max_length=100)\n+        d = {field: 1, another_field: 2}\n+        self.assertEqual(field_hash_initial, hash(field))\n+        self.assertIn(field, d)\n+\n+    def test_hash_immutability_after_assignment(self):\n+        field = models.CharField(max_length=200)\n+        field_hash_initial = hash(field)\n+        \n+        class Author(models.Model):\n+            name = field\n+        \n+        # After assigning field to a model, hash should remain the same\n+        self.assertEqual(field_hash_initial, hash(field))\n+\n+    def test_hash_with_multiple_models(self):\n+        field = models.FloatField()\n+        field_hash_initial = hash(field)\n+        \n+        class ModelA(models.Model):\n+            num = field\n+        \n+        class ModelB(models.Model):\n+            rate = field\n+\n+        # Hash should not change even across multiple model assignments\n+        self.assertEqual(field_hash_initial, hash(field))\n+\n+    def test_field_hash_in_dict(self):\n+        \"\"\"Test that field hash can be used reliably as a dict key.\"\"\"\n+        field = models.IntegerField()\n+        field_hash_initial = hash(field)\n+        field_dict = {field: \"value\"}\n+        \n+        class Category(models.Model):\n+            identifier = field\n+\n+        # Field hash remains unchanged, keeping dict integrity\n+        self.assertEqual(field_hash_initial, hash(field))\n+        self.assertIn(field, field_dict)\n+\n+    def test_field_hash_after_deepcopy(self):\n+        \"\"\"Test deepcopy maintains the same hash.\"\"\"\n+        from copy import deepcopy\n+        field = models.TextField()\n+        field_hash_initial = hash(field)\n+        field_copy = deepcopy(field)\n+        # deepcopy should not alter field hash\n+        self.assertEqual(field_hash_initial, hash(field))\n+        self.assertEqual(field_hash_initial, hash(field_copy))\n+\n+\n class ChoicesTests(SimpleTestCase):\n \n     @classmethod\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..a08546a 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,6 +204,16 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n+    def test_f_expression(self):\n+        notes = [\n+            Note.objects.create(note='test_note', misc='test_misc')\n+            for _ in range(10)\n+        ]\n+        for note in notes:\n+            note.misc = F('note')\n+        Note.objects.bulk_update(notes, ['misc'])\n+        self.assertCountEqual(Note.objects.filter(misc='test_note'), notes)\n+\n     def test_field_references(self):\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n",
  "django__django-15380": "",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..4cd5fb1 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,6 +1906,12 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n+from django.test import TestCase\n+from django.db.models import Exists, Q\n+from myapp.models import MyModel, Manager\n+from django.db import connection\n+import datetime\n+\n class FieldTransformTests(TestCase):\n \n     @classmethod\n",
  "django__django-15467": "",
  "django__django-15499": "",
  "django__django-15525": "",
  "django__django-15561": "",
  "django__django-15569": "diff --git a/tests/custom_lookups/tests.py b/tests/custom_lookups/tests.py\nindex 74c331a..5c4093a 100644\n--- a/tests/custom_lookups/tests.py\n+++ b/tests/custom_lookups/tests.py\n@@ -324,6 +324,15 @@ class LookupTests(TestCase):\n             # getting the lookups again should re-cache\n             self.assertIn(\"exactly\", field.get_lookups())\n \n+        # Unregistration should clear the cache\n+        field.get_lookups.cache_clear()\n+        with register_lookup(models.ForeignObject, Exactly):\n+            self.assertIn(\"exactly\", field.get_lookups())\n+        \n+        models.ForeignObject._unregister_lookup(Exactly)\n+        # Directly access the cache to ensure it's cleared; checking the internal state\n+        self.assertNotIn(\"exactly\", field.get_lookups())\n+\n \n class BilateralTransformTests(TestCase):\n     def test_bilateral_upper(self):\n",
  "django__django-15572": "",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..044934b 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,29 @@\n+\n+import inspect\n+from django.test import SimpleTestCase\n+from django.db import models\n+\n+class Article(models.Model):\n+    title = models.CharField(max_length=100)\n+    body = models.TextField()\n+    pub_date = models.DateTimeField()\n+\n+class ManagerMethodTests(SimpleTestCase):\n+    def test_manager_method_signature(self):\n+        self.assertEqual(\n+            str(inspect.signature(Article.objects.bulk_create)),\n+            \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, \"\n+            \"update_fields=None, unique_fields=None)\",\n+        )\n+\n+    def test_manager_method_name(self):\n+        # Ensures that method names are preserved\n+        self.assertEqual(Article.objects.bulk_create.__name__, 'bulk_create')\n+\n+    def test_manager_method_doc(self):\n+        # Ensures that method docstrings are preserved\n+        self.assertEqual(Article.objects.bulk_create.__doc__, models.QuerySet.bulk_create.__doc__)\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..06becd7 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,10 +1,12 @@\n+\n from datetime import datetime, time\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n-from django.utils import timezone, translation\n+from django.utils import timezone, translation, gettext_lazy\n \n from ..utils import setup\n+from django.utils.formats import get_format\n from .timezone_utils import TimezoneTestCase\n \n \n@@ -73,6 +75,15 @@ class DateTests(TimezoneTestCase):\n         self.assertEqual(output, \"00:00\")\n \n \n+class FormatTests(SimpleTestCase):\n+    def test_get_format_lazy_date_format(self):\n+        # Test using lazy strings for date formats in get_format\n+        self.assertEqual(get_format(gettext_lazy(\"DATE_FORMAT\")), \"N j, Y\")\n+\n+    def test_get_format_lazy_time_format(self):\n+        # Test using lazy strings for time formats in get_format\n+        self.assertEqual(get_format(gettext_lazy(\"TIME_FORMAT\")), \"P\")\n+\n class FunctionTests(SimpleTestCase):\n     def test_date(self):\n         self.assertEqual(date(datetime(2005, 12, 29), \"d F Y\"), \"29 December 2005\")\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..c8aa860 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -382,15 +382,19 @@ class ProxyModelTests(TestCase):\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n \n-        # Select related + filter on a related proxy of proxy field\n-        resp = ProxyImprovement.objects.select_related().get(\n-            associated_bug__summary__icontains=\"fix\"\n-        )\n-        self.assertEqual(\n-            repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n-        )\n-\n-    def test_proxy_load_from_fixture(self):\n+        # Test for select_related() and only() on proxy models\n+        self._test_select_related_only_crash()\n+\n+    def _test_select_related_only_crash(self):\n+        # Create test data\n+        custom = ProxyCustomModel.objects.create(name=\"Custom\")\n+        another_model = AnotherModel.objects.create(custom=custom)\n+        \n+        # Attempt to use select_related and only on the proxy foreign key relationship\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        \n+        # Evaluating the queryset should not raise an error\n+        self.assertEqual(qs.get(), another_model)\n         management.call_command(\"loaddata\", \"mypeople.json\", verbosity=0)\n         p = MyPerson.objects.get(pk=100)\n         self.assertEqual(p.name, \"Elvis Presley\")\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..bd57065 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -157,6 +157,14 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             ([\"psql\", \"dbname\", \"--help\"], None),\n         )\n \n+    def test_parameters_custom_option(self):\n+        # This test verifies that parameters are passed before the database name\n+        expected_command = [\"psql\", \"-c\", \"SELECT 1;\", \"dbname\"]\n+        actual_command, _ = self.settings_to_cmd_args_env(\n+            {\"NAME\": \"dbname\"}, [\"-c\", \"SELECT 1;\"]\n+        )\n+        self.assertEqual(actual_command, expected_command)\n+\n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n     def test_sigint_handler(self):\n         \"\"\"SIGINT is ignored in Python and passed to psql to abort queries.\"\"\"\n",
  "django__django-15863": "",
  "django__django-15930": "",
  "django__django-15987": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 5ac9ab9..cb5576c 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unittests for fixtures.\n import json\n import os\n@@ -10,6 +11,7 @@ from django.core.exceptions import ImproperlyConfigured\n from django.core.serializers.base import DeserializationError\n from django.db import IntegrityError, transaction\n from django.db.models import signals\n+from pathlib import Path\n from django.test import (\n     TestCase,\n     TransactionTestCase,\n@@ -556,7 +558,36 @@ class TestFixtures(TestCase):\n             management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n \n     @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, \"fixtures\")])\n-    def test_fixture_dirs_with_default_fixture_path(self):\n+    @override_settings(\n+        FIXTURE_DIRS=[\n+            Path(_cur_dir) / \"fixtures\",\n+            os.path.join(_cur_dir, \"fixtures_1\"),\n+        ]\n+    )\n+    def test_fixture_dirs_detects_duplicates_with_path_instance(self):\n+        \"\"\"\n+        Test that duplicate paths are detected even when one uses a Path instance.\n+        \"\"\"\n+        duplicate_msg = (\n+            \"'%s' is a default fixture directory for the '%s' app \"\n+            \"and cannot be listed in settings.FIXTURE_DIRS.\"\n+            % (os.path.join(_cur_dir, \"fixtures\"), \"fixtures_regress\")\n+        )\n+        with self.assertRaisesMessage(ImproperlyConfigured, duplicate_msg):\n+            management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n+\n+    @override_settings(\n+        FIXTURE_DIRS=[\n+            os.path.join(_cur_dir, \"fixtures\"),\n+            Path(_cur_dir) / \"fixtures_1\",\n+            Path(_cur_dir) / \"fixtures_2\",\n+        ]\n+    )\n+    def test_mixed_fixture_dirs_no_duplicates(self):\n+        \"\"\"\n+        Ensure correct behavior with mixed Path and string types without duplicates.\n+        \"\"\"\n+        management.call_command(\"loaddata\", \"absolute.json\", verbosity=0)\n         \"\"\"\n         settings.FIXTURE_DIRS cannot contain a default fixtures directory\n         for application (app/fixtures) in order to avoid repeated fixture loading.\n",
  "django__django-16032": "",
  "django__django-16082": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 541ed6d..845f3f9 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -2415,8 +2415,27 @@ class CombinedExpressionTests(SimpleTestCase):\n             (DecimalField, IntegerField, DecimalField),\n             (IntegerField, FloatField, FloatField),\n             (FloatField, IntegerField, FloatField),\n+            (DecimalField, DecimalField, DecimalField),  # Ensure Decimal with Decimal resolves as Decimal\n         ]\n-        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV]\n+        \n+        # Adding specific test case for MOD operator to ensure Decimal type resolution\n+        mod_tests = [\n+            (IntegerField, DecimalField, DecimalField),\n+            (DecimalField, IntegerField, DecimalField),\n+            (DecimalField, DecimalField, DecimalField),\n+        ]\n+        \n+        for lhs, rhs, combined in mod_tests:\n+            with self.subTest(\n+                lhs=lhs, connector=Combinable.MOD, rhs=rhs, combined=combined\n+            ):\n+                expr = CombinedExpression(\n+                    Expression(lhs()),\n+                    Combinable.MOD,\n+                    Expression(rhs()),\n+                )\n+                self.assertIsInstance(expr.output_field, combined)\n+        connectors = [Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD]\n         for lhs, rhs, combined in tests:\n             for connector in connectors:\n                 with self.subTest(\n",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..4a3f7b2 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -24,6 +25,8 @@ from django.template import Context, Template, TemplateSyntaxError\n from django.test import TestCase, override_settings\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n+from unittest import mock\n+from django.db import DatabaseError\n from django.urls import reverse\n from django.utils import formats\n \n",
  "django__django-16116": "diff --git a/tests/migrations/test_commands.py b/tests/migrations/test_commands.py\nindex cd0e572..52b53ce 100644\n--- a/tests/migrations/test_commands.py\n+++ b/tests/migrations/test_commands.py\n@@ -2379,6 +2379,19 @@ class MakeMigrationsTests(MigrationTestBase):\n             )\n             self.assertIn(\"operations=[]\" if HAS_BLACK else \"operations=[\\n]\", content)\n \n+    def test_makemigrations_check_no_files_written(self):\n+        \"\"\"\n+        makemigrations --check should not create any migration files and exits with\n+        a status of 1 when there are changes to an app requiring migrations.\n+        \"\"\"\n+        with self.temporary_migration_module() as tmpdir:\n+            # Register a new model to enforce a migration is required\n+            apps.register_model(\"migrations\", UnicodeModel)\n+            with self.assertRaises(SystemExit):\n+                call_command(\"makemigrations\", \"--check\", \"migrations\", verbosity=0)\n+            # Ensure no migration files are created\n+            self.assertFalse(os.listdir(tmpdir), \"No migration files should be created.\")\n+\n     def test_makemigrations_with_invalid_custom_name(self):\n         msg = \"The migration name must be a valid Python identifier.\"\n         with self.assertRaisesMessage(CommandError, msg):\n",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..7ac0c81 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,8 +7,9 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+import asyncio\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import SimpleTestCase, RequestFactory\n from django.utils.asyncio import async_unsafe\n from django.views.generic.base import View\n \n@@ -119,7 +121,24 @@ class ViewTests(SimpleTestCase):\n \n                 self.assertIsInstance(response, HttpResponse)\n \n-    def test_base_view_class_is_sync(self):\n+    def test_http_method_not_allowed_responds_correctly(self):\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.post(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n         \"\"\"\n         View and by extension any subclasses that don't define handlers are\n         sync.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..96ff373 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,5 +1,8 @@\n+\n import datetime\n import re\n+import urllib.parse\n+from django.urls import reverse\n from unittest import mock\n \n from django.contrib.auth.forms import (\n@@ -881,7 +884,29 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         form = UserChangeForm(instance=user, data=post_data)\n \n         self.assertTrue(form.is_valid())\n-        # original hashed password contains $\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+        \n+        # Additional check for the correct URL structure\n+        expected_url = f\"../../{user.pk}/password/\"\n+        self.assertIn(expected_url, password_help_text)\n         self.assertIn(\"$\", form.cleaned_data[\"password\"])\n \n     def test_bug_19349_bound_password_field(self):\n",
  "django__django-16145": "",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..4e495ab 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,6 +507,31 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+    def test_callable_lastmod_with_items(self):\n+        response = self.client.get(\"/callable-lastmod-full/sitemap.xml\")\n+        expected_content = (\n+            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n'\n+            '<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" '\n+            'xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\\n'\n+            \"<url><loc>http://example.com/location/</loc>\"\n+            \"<lastmod>2013-03-13</lastmod></url>\"\n+            \"<url><loc>http://example.com/location/</loc>\"\n+            \"<lastmod>2014-03-13</lastmod></url>\\n\"\n+            \"</urlset>\"\n+        )\n+        self.assertXMLEqual(response.content.decode(), expected_content)\n+\n+    def test_callable_lastmod_no_items_handles_empty_correctly(self):\n+        index_response = self.client.get(\"/callable-lastmod-no-items/index.xml\")\n+        self.assertNotIn(\"Last-Modified\", index_response)\n+        expected_content_index = (\n+            \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n\"\"\"\n+            \"\"\"<sitemapindex xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\\n\"\"\"\n+            \"\"\"<sitemap><loc>http://example.com/simple/sitemap-callable-lastmod.xml</loc></sitemap>\\n\"\"\"\n+            \"\"\"</sitemapindex>\"\"\"\n+        )\n+        self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n+\n \n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n",
  "django__django-16315": "",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..14827c6 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -252,7 +254,66 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = CustomUserCreationForm(data)\n         self.assertTrue(form.is_valid())\n \n-    def test_password_whitespace_not_stripped(self):\n+    def test_custom_form_saves_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_saves_many_to_many_field_with_commit_false(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"testclient@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=False)\n+        user.save()  # Now save the user manually\n+        form.save_m2m()  # Ensure m2m data is saved\n+\n+        self.assertSequenceEqual(user.orgs.all(), [organization])\n+\n+    def test_custom_form_invalid_data(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        # Invalid data: password1 and password2 do not match\n+        organization = Organization.objects.create(name=\"organization 2\")\n+\n+        data = {\n+            \"username\": \"testclient2@example.com\",\n+            \"password1\": \"testclient\",\n+            \"password2\": \"testclient-mismatch\",\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertFalse(form.is_valid())\n+        with self.assertRaises(ValueError):\n+            form.save(commit=True)\n         data = {\n             \"username\": \"testuser\",\n             \"password1\": \"   testpassword   \",\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..514faaf 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -160,6 +161,13 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t + self.oneday, now), \"0\\xa0minutes\")\n         self.assertEqual(timeuntil(t - self.oneday, now), \"0\\xa0minutes\")\n \n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_long_interval_with_tz(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n+\n     def test_naive_datetime_with_tzinfo_attribute(self):\n         class naive(datetime.tzinfo):\n             def utcoffset(self, dt):\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..04f8756 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -468,6 +468,20 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), \"Set foo\")\n \n+    def test_subparser_missing_required_argument(self):\n+        \"\"\"\n+        Test case for checking missing required argument 'name' in subparser.\n+        Ensure it provides human-readable output instead of a stack trace.\n+        \"\"\"\n+        out, err = self.run_manage([\"cheeses\", \"create\"])\n+        self.assertNoOutput(out)\n+        err_lines = err.splitlines()\n+        self.assertEqual(len(err_lines), 2)\n+        self.assertEqual(\n+            err_lines[1],\n+            \"manage.py cheeses create: error: the following arguments are required: name\",\n+        )\n+\n \n class UtilsTests(SimpleTestCase):\n     def test_no_existent_external_program(self):\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..2a6270f 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -108,6 +108,15 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(0, 6), \"0.000000\")\n         self.assertEqual(floatformat(0, 7), \"0.0000000\")\n         self.assertEqual(floatformat(0, 10), \"0.0000000000\")\n+\n+    def test_issue_fix_zero_with_no_decimals(self):\n+        from decimal import Decimal\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+        self.assertEqual(floatformat(\"0.000\", 1), \"0.0\")\n+        self.assertEqual(floatformat(Decimal(\"0.000\"), 1), \"0.0\")\n+        self.assertEqual(floatformat(\"0.00\", 2), \"0.00\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 2), \"0.00\")\n         self.assertEqual(\n             floatformat(0.000000000000000000015, 20), \"0.00000000000000000002\"\n         )\n",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..98a9a16 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,8 +1018,15 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n-\n-# Tests for a race condition on file saving (#4948).\n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        storage = kwargs[\"storage\"]\n+        self.assertIs(storage, callable_default_storage)\n # This is written in such a way that it'll always pass on platforms\n # without threading.\n \n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..e07316e 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,8 +1,11 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n from django.contrib.admin.templatetags.admin_list import date_hierarchy\n from django.contrib.admin.templatetags.admin_modify import submit_row\n+from django.contrib.auth import get_permission_codename\n+from .tests import AdminViewBasicTestCase, get_perm\n from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n@@ -33,7 +36,39 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n         self.assertIs(template_context[\"extra\"], True)\n         self.assertIs(template_context[\"show_save\"], True)\n \n-    def test_override_show_save_and_add_another(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        # Test where user has change permission but not add permission\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        # Test where user has both add and change permissions\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         request = self.request_factory.get(\n             reverse(\"admin:auth_user_change\", args=[self.superuser.pk]),\n         )\n",
  "django__django-16560": "diff --git a/tests/constraints/tests.py b/tests/constraints/tests.py\nindex 13854a9..fd75533 100644\n--- a/tests/constraints/tests.py\n+++ b/tests/constraints/tests.py\n@@ -237,7 +237,33 @@ class CheckConstraintTests(TestCase):\n         # Valid product.\n         constraint.validate(Product, Product(price=10, discounted_price=5))\n \n-    def test_validate_boolean_expressions(self):\n+    def test_custom_violation_error_code(self):\n+        check = models.Q(price__gt=models.F(\"discounted_price\"))\n+        constraint = models.CheckConstraint(\n+            check=check,\n+            name=\"price_check\",\n+            violation_error_code=\"invalid_price\",\n+        )\n+        invalid_product = Product(price=10, discounted_price=42)\n+        with self.assertRaises(ValidationError) as cm:\n+            constraint.validate(Product, invalid_product)\n+        self.assertEqual(cm.exception.code, \"invalid_price\")\n+\n+        # Valid product\n+        valid_product = Product(price=50, discounted_price=40)\n+        constraint.validate(Product, valid_product)\n+\n+    def test_custom_violation_code_in_equality(self):\n+        check1 = models.Q(price__gt=models.F(\"discounted_price\"))\n+        check2 = models.Q(price__lt=models.F(\"discounted_price\"))\n+        self.assertNotEqual(\n+            models.CheckConstraint(check=check1, name=\"price\", violation_error_code=\"error1\"),\n+            models.CheckConstraint(check=check1, name=\"price\", violation_error_code=\"error2\"),\n+        )\n+        self.assertEqual(\n+            models.CheckConstraint(check=check1, name=\"price\", violation_error_code=\"error1\"),\n+            models.CheckConstraint(check=check1, name=\"price\", violation_error_code=\"error1\"),\n+        )\n         constraint = models.CheckConstraint(\n             check=models.expressions.ExpressionWrapper(\n                 models.Q(price__gt=500) | models.Q(price__lt=500),\n",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..173e8b1 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1478,6 +1478,23 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = ChoiceFormFormset(initial=[{\"choice\": \"Zero\", \"votes\": \"1\"}])\n         self.assertEqual(len(formset), 3)\n         self.assertIn(\"DELETE\", formset.forms[0].fields)\n+\n+        # Test case for the issue where `index` is None and `can_delete` is True but `can_delete_extra` is False\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+        \n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        \n+        my_formset = MyFormSet(initial=None)\n+        \n+        # This ensures that calling empty_form does not raise a TypeError\n+        empty_form = my_formset.empty_form\n+        self.assertIsNotNone(empty_form)\n+        self.assertNotIn(\"DELETE\", empty_form.fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[2].fields)\n \n",
  "django__django-16595": "",
  "django__django-16612": "",
  "django__django-16642": "",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..c168346 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -154,6 +154,35 @@ class ModelAdminTests(TestCase):\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n         )\n \n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_foreign_primary(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True)\n+\n+        # Additional test cases\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place\", \"1\"), True)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country__name__istartswith\", \"test\"), True)\n+\n     def test_field_arguments(self):\n         # If fields is specified, fieldsets_add and fieldsets_change should\n         # just stick the fields into a formsets structure and return it.\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..646af29 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -894,6 +894,32 @@ class WriterTests(SimpleTestCase):\n             result[\"custom_migration_operations\"].more_operations.TestOperation,\n         )\n \n+    def test_sorted_imports_correct_order(self):\n+        \"\"\"\n+        Test the correct order of import statements in generated migration files.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ]\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        expected_imports = (\n+            \"import datetime\\n\"\n+            \"import time\\n\"\n+            \"from django.db import migrations, models\\n\"\n+        )\n+        self.assertIn(expected_imports, output)\n+\n     def test_sorted_imports(self):\n         \"\"\"\n         #24155 - Tests ordering of imports.\n",
  "django__django-16801": "diff --git a/tests/model_fields/test_imagefield.py b/tests/model_fields/test_imagefield.py\nindex 9bf7f7d..98205e7 100644\n--- a/tests/model_fields/test_imagefield.py\n+++ b/tests/model_fields/test_imagefield.py\n@@ -326,7 +326,26 @@ class ImageFieldNoDimensionsTests(ImageFieldTwoDimensionsTests):\n     Tests behavior of an ImageField with no dimension fields.\n     \"\"\"\n \n-    PersonModel = Person\n+    def test_post_init_not_connected(self):\n+        person_model_id = id(self.PersonModel)\n+        self.assertNotIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_connected_with_one_dimension(self):\n+        person_model_id = id(PersonWithHeight)\n+        self.assertIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n+\n+    def test_post_init_connected_with_two_dimensions(self):\n+        person_model_id = id(PersonWithTwoDimensions)\n+        self.assertIn(\n+            person_model_id,\n+            [sender_id for (_, sender_id), *_ in signals.post_init.receivers],\n+        )\n \n \n @skipIf(Image is None, \"Pillow is required to test ImageField\")\n",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..8342bff 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1157,4 +1157,43 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n+\n+    def test_add_remove_index_different_indices(self):\n+        self.assertDoesNotOptimize(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(fields=[\"weight\"], name=\"idx_pony_weight\"),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+            ],\n+        )\n+\n+    def test_remove_index_without_add(self):\n+        self.assertDoesNotOptimize(\n+            [\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+            ],\n+        )\n+\n+    def test_add_index_twice_remove_once(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"),\n+                ),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(fields=[\"hooves\"], name=\"idx_pony_hooves\"),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+            ],\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(fields=[\"hooves\"], name=\"idx_pony_hooves\"),\n+                ),\n+            ],\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..b1baee4 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -19,7 +20,49 @@ class XorLookupsTests(TestCase):\n             self.numbers[:3] + self.numbers[8:],\n         )\n \n-    def test_filter_negated(self):\n+    def test_parity_xor(self):\n+        # Test with an odd number of conditions: should match numbers with 1, 3, 5, 7, or 9\n+        qs = Number.objects.filter(\n+            Q(num__gte=1)\n+            ^ Q(num__gte=3)\n+            ^ Q(num__gte=5)\n+            ^ Q(num__gte=7)\n+            ^ Q(num__gte=9)\n+        )\n+        self.assertCountEqual(\n+            qs,\n+            self.numbers[1:3] + self.numbers[5:7] + self.numbers[9:],\n+        )\n+        self.assertCountEqual(\n+            qs.values_list(\"num\", flat=True),\n+            [\n+                i\n+                for i in range(10)\n+                if (i >= 1) ^ (i >= 3) ^ (i >= 5) ^ (i >= 7) ^ (i >= 9)\n+            ],\n+        )\n+\n+    def test_even_parity_xor(self):\n+        # Test with an even number of conditions: should match numbers with 2, 4, 6, or 8\n+        qs = Number.objects.filter(\n+            Q(num__gte=2)\n+            ^ Q(num__gte=4)\n+            ^ Q(num__gte=6)\n+            ^ Q(num__gte=8)\n+            ^ Q(num__gte=10)  # 10 is the boundary, should match nothing beyond 9\n+        )\n+        self.assertCountEqual(\n+            qs,\n+            [self.numbers[2], self.numbers[4], self.numbers[6], self.numbers[8]],\n+        )\n+        self.assertCountEqual(\n+            qs.values_list(\"num\", flat=True),\n+            [\n+                i\n+                for i in range(10)\n+                if (i >= 2) ^ (i >= 4) ^ (i >= 6) ^ (i >= 8) ^ (i >= 10)\n+            ],\n+        )\n         self.assertCountEqual(\n             Number.objects.filter(Q(num__lte=7) ^ ~Q(num__lt=3)),\n             self.numbers[:3] + self.numbers[8:],\n@@ -64,4 +107,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "diff --git a/tests/apps/tests.py b/tests/apps/tests.py\nindex f7c2c67..071f4f8 100644\n--- a/tests/apps/tests.py\n+++ b/tests/apps/tests.py\n@@ -24,6 +24,9 @@ SOME_INSTALLED_APPS = [\n     \"django.contrib.staticfiles\",\n ]\n \n+from django.test import SimpleTestCase, override_settings\n+from django.apps import apps\n+\n SOME_INSTALLED_APPS_NAMES = [\n     \"django.contrib.admin\",\n     \"django.contrib.auth\",\n@@ -32,7 +35,29 @@ SOME_INSTALLED_APPS_NAMES = [\n HERE = os.path.dirname(__file__)\n \n \n+from functools import lru_cache\n+\n class AppsTests(SimpleTestCase):\n+    def setUp(self):\n+        # Clear caches before every test to ensure a consistent test environment.\n+        apps.clear_cache()\n+\n+    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n+    def test_clear_cache(self):\n+        \"\"\"\n+        Ensure that both get_swappable_settings_name and get_models caches are cleared.\n+        \"\"\"\n+        # Access and cache the result of get_swappable_settings_name\n+        self.assertIsNone(apps.get_swappable_settings_name(\"admin.LogEntry\"))\n+        # Perform a function that also populates the cache\n+        apps.get_models()\n+        \n+        # Clear all caches\n+        apps.clear_cache()\n+\n+        # Check if the caches are cleared\n+        self.assertEqual(apps.get_swappable_settings_name.cache_info().currsize, 0)\n+        self.assertEqual(apps.get_models.cache_info().currsize, 0)\n     def test_singleton_main(self):\n         \"\"\"\n         Only one main registry can exist.\n",
  "django__django-17084": "",
  "django__django-17087": "",
  "django__django-7530": "",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..e4602c1 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -290,8 +290,39 @@ class PaginationTests(SimpleTestCase):\n \n     def test_get_page_empty_object_list_and_allow_empty_first_page_false(self):\n         \"\"\"\n-        Paginator.get_page() raises EmptyPage if allow_empty_first_page=False\n-        and object_list is empty.\n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_full_iteration_over_pages(self):\n+        # Test iteration over all pages\n+        paginator = Paginator(range(1, 11), 3)\n+        expected_pages = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n+        iterated_pages = [list(page) for page in paginator]\n+        self.assertEqual(expected_pages, iterated_pages)\n+\n+    def test_empty_paginator_iteration(self):\n+        # Test iteration on an empty paginator\n+        paginator = Paginator([], 1)\n+        iterated_pages = [list(page) for page in paginator]\n+        self.assertEqual([], iterated_pages)\n+\n+    def test_one_item_per_page(self):\n+        # Test when each page has exactly one item\n+        paginator = Paginator([1, 2, 3, 4, 5], 1)\n+        expected_pages = [[1], [2], [3], [4], [5]]\n+        iterated_pages = [list(page) for page in paginator]\n+        self.assertEqual(expected_pages, iterated_pages)\n+\n+    def test_large_page_size(self):\n+        # Test with a page size larger than the list\n+        paginator = Paginator([1, 2, 3], 10)\n+        expected_pages = [[1, 2, 3]]\n+        iterated_pages = [list(page) for page in paginator]\n+        self.assertEqual(expected_pages, iterated_pages)\n         \"\"\"\n         paginator = Paginator([], 2, allow_empty_first_page=False)\n         with self.assertRaises(EmptyPage):\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..5cb6386 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,34 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import matplotlib.pyplot as plt\n+import numpy as np\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_different_range_density():\n+    # Test with a different range\n+    _, bins, _ = plt.hist(np.random.rand(100), \"auto\", range=(-1, 1), density=True)\n+    assert np.isclose(bins[0], -1)\n+    assert np.isclose(bins[-1], 1)\n+\n+def test_hist_non_random_data_density():\n+    # Test with non-random data respecting the range\n+    data = np.linspace(0, 1, 100)\n+    _, bins, _ = plt.hist(data, \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n+\n+def test_hist_density_with_weights():\n+    # Test density with weights and check range\n+    data = np.random.rand(100)\n+    weights = np.random.rand(100)\n+    _, bins, _ = plt.hist(data, \"auto\", weights=weights, range=(0, 1), density=True)\n+    assert bins[0] == 0\n+    assert bins[-1] == 1\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6394,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..cecea94 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,6 +6960,24 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    axs = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.plot(x, y)\n+\n+    axs = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n \n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..b6ef105 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -307,8 +307,22 @@ def test_overriding_units_in_plot(fig_test, fig_ref):\n         assert y_units is ax.yaxis.units\n \n \n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Test to ensure no MatplotlibDeprecationWarning is emitted\n+    when axes methods are called with empty data for string unit converters.\n+    \"\"\"\n+    import matplotlib.pyplot as plt\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    ax.plot([], [])\n+    ax.scatter([], [])\n+    ax.bar([], [])\n+    ax.boxplot([])\n+\n+\n def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex 2c28713..a72b408 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -919,6 +919,11 @@ def test_proportional_colorbars():\n             fig.colorbar(CS3, spacing=spacings[j], ax=axs[i, j])\n \n \n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib.colors as mcolors\n+from matplotlib.colorbar import Colorbar\n+\n def test_negative_boundarynorm():\n     fig, ax = plt.subplots(figsize=(1, 3))\n     cmap = plt.get_cmap(\"viridis\")\n",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..43ed59c 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -490,6 +490,10 @@ def test_validate_fontstretch(stretch, parsed_stretch):\n         assert validate_fontstretch(stretch) == parsed_stretch\n \n \n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+from matplotlib import get_backend\n+\n def test_keymaps():\n     key_list = [k for k in mpl.rcParams if 'keymap' in k]\n     for k in key_list:\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..c3a1fce 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -14,14 +14,31 @@ from matplotlib.collections import LineCollection, PolyCollection\n from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n import numpy as np\n \n \n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_axes_set_visible_false(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(False)\n+    \n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    ax_ref.scatter(1, 1, 1)\n+    ax_ref.set_axis_off()\n \n-def test_aspect_equal_error():\n+@check_figures_equal(extensions=[\"png\"])\n+def test_axes_set_visible_true(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.scatter(1, 1, 1)\n+    ax_test.set_visible(True)\n+\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    ax_ref.scatter(1, 1, 1)\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n     with pytest.raises(NotImplementedError):\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..43858a2 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -156,8 +156,36 @@ def test_negative_rect():\n     neg_vertices = Rectangle((0, 0), -3, -2).get_verts()[:-1]\n     assert_array_equal(np.roll(neg_vertices, 2, 0), pos_vertices)\n \n+from matplotlib.patches import Rectangle\n+import pytest\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_issue(fig_test, fig_ref):\n+    # Create test and reference figures\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n \n-@image_comparison(['clip_to_bbox'])\n+    # Create rectangles in test figure with different starting offsets\n+    rect_test = Rectangle((0.2, 0.2), 0.6, 0.6, linewidth=3, edgecolor='g', linestyle=(0, [10, 5]))\n+    rect_test2 = Rectangle((0.2, 0.2), 0.6, 0.6, linewidth=3, edgecolor='m', linestyle=(5, [10, 5]))\n+\n+    ax_test.add_patch(rect_test)\n+    ax_test.add_patch(rect_test2)\n+\n+    # Create reference rectangles that should look identical to test figure\n+    rect_ref = Rectangle((0.2, 0.2), 0.6, 0.6, linewidth=3, edgecolor='g', linestyle=(0, [10, 5]))\n+    rect_ref2 = Rectangle((0.2, 0.2), 0.6, 0.6, linewidth=3, edgecolor='m', linestyle=(5, [10, 5]))\n+\n+    ax_ref.add_patch(rect_ref)\n+    ax_ref.add_patch(rect_ref2)\n+\n+    # Run assertions to ensure linestyle configurations are correctly applied\n+    assert rect_test.get_linestyle() == (0, [10, 5])\n+    assert rect_test2.get_linestyle() == (5, [10, 5])\n+    \n+    assert rect_ref.get_linestyle() == (0, [10, 5])\n+    assert rect_ref2.get_linestyle() == (5, [10, 5])\n def test_clip_to_bbox():\n     fig, ax = plt.subplots()\n     ax.set_xlim([-18, 20])\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..f26701b 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,8 +2866,30 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n-\n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.patches import Rectangle\n+\n+def test_stackplot_color_cycler():\n+    # Create a plot with various elements to check color consistency\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    \n+    # Use color alias 'C0' for a line\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    \n+    # Use color alias 'C1' for a rectangle patch\n+    ax.add_patch(Rectangle(xy=(1.5, 1.5), width=0.5, height=0.5, facecolor='C1'))\n+    \n+    # Use color aliases 'C2', 'C3', 'C4' for stackplot\n+    # This should not raise a ValueError error anymore\n+    try:\n+        ax.stackplot([1, 2, 3], my_data, colors=['C2', 'C3', 'C4'])\n+    except ValueError as e:\n+        assert False, f\"stackplot raised ValueError unexpectedly: {e}\"\n+    \n+    # Show plot for debugging, if needed\n+    plt.close(fig)\n def test_stackplot_baseline():\n     np.random.seed(0)\n \n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..2d164d4 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -5,7 +5,7 @@ import numpy as np\n from numpy.testing import assert_allclose\n import pytest\n \n-from matplotlib.testing.decorators import image_comparison\n+from matplotlib.offsetbox import HPacker, VPacker\n import matplotlib.pyplot as plt\n import matplotlib.patches as mpatches\n import matplotlib.lines as mlines\n",
  "matplotlib__matplotlib-24627": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 35bc6ec..92b1911 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -8363,6 +8363,34 @@ def test_extent_units():\n                           cmap=mpl.colormaps[\"plasma\"])\n     im.set_extent([date_last, date_first, date_last, date_first])\n     axs[1, 1].xaxis.set_major_formatter(mdates.DateFormatter('%d'))\n+\n+def test_cla_clears_children_axes_and_fig():\n+    import matplotlib.pyplot as plt\n+\n+    fig, ax = plt.subplots()\n+    lines = ax.plot([], [])\n+    img = ax.imshow([[1]])\n+    for art in lines + [img]:\n+        assert art.axes is ax\n+        assert art.figure is fig\n+    ax.clear()\n+    for art in lines + [img]:\n+        assert art.axes is None\n+        assert art.figure is None\n+\n+def test_clf_clears_children_axes_and_fig():\n+    import matplotlib.pyplot as plt\n+\n+    fig, ax = plt.subplots()\n+    lines = ax.plot([], [])\n+    img = ax.imshow([[1]])\n+    for art in lines + [img]:\n+        assert art.axes is ax\n+        assert art.figure is fig\n+    plt.clf()\n+    for art in lines + [img]:\n+        assert art.axes is None\n+        assert art.figure is None\n     axs[1, 1].set(xlabel='Day of Jan 2020')\n \n     with pytest.raises(ValueError,\n",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..4bcb03b 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -576,7 +576,87 @@ def test_svg_font_string(font_str, include_generic):\n         rest = rest + [generic]\n     plt.rcParams[f\"font.{generic}\"] = rest\n     plt.rcParams[\"font.size\"] = size\n-    plt.rcParams[\"svg.fonttype\"] = \"none\"\n+from io import BytesIO\n+import numpy as np\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox\n+    # in output svg.\n+    fig = plt.figure()\n+    ax = fig.add_subplot()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"a test for issue 20044\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"a test for issue 20044\">'\n+    assert expected in buf\n+\n+# Additional test cases to validate GID functionality in different scenarios\n+    \n+def test_annotationbbox_gid_no_arrow():\n+    # Test that object gid appears in the AnnotationBbox without arrow in output svg.\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.5, 0.5)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.2)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy, pad=0.5)\n+    ab.set_gid(\"test_no_arrow\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"test_no_arrow\">'\n+    assert expected in buf\n+\n+\n+def test_annotationbbox_different_position():\n+    # Test GID for AnnotationBbox at a different position.\n+    fig, ax = plt.subplots()\n+    arr_img = np.ones((32, 32))\n+    xy = (0.7, 0.8)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.15)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(80., -40.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(arrowstyle=\"->\"))\n+    ab.set_gid(\"test_different_position\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"test_different_position\">'\n+    assert expected in buf\n \n     fig, ax = plt.subplots()\n     if generic == \"sans-serif\":\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..4523b41 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -30,7 +30,19 @@ def test_create_lookup_table(N, result):\n     assert_array_almost_equal(mcolors._create_lookup_table(N, data), result)\n \n \n-def test_resampled():\n+@pytest.mark.parametrize(\"value\", [257, 256, 258, -1])\n+def test_colormap_issues_with_numpy_deprecation(value):\n+    \"\"\"\n+    Test that checks for the deprecation warning in Matplotlib when \n+    using specific out-of-bound values after NumPy 1.24.\n+    Currently testing with critical values.\n+    \"\"\"\n+    cm = plt.get_cmap(\"viridis\")\n+\n+    with pytest.warns(DeprecationWarning):\n+        rgba = cm(np.array([value], dtype=np.uint8))\n+        \n+    assert rgba is not None, \"No RGBA value returned for out-of-bound input.\"\n     \"\"\"\n     GitHub issue #6025 pointed to incorrect ListedColormap.resampled;\n     here we test the method for LinearSegmentedColormap as well.\n",
  "matplotlib__matplotlib-25122": "diff --git a/lib/matplotlib/tests/test_mlab.py b/lib/matplotlib/tests/test_mlab.py\nindex 51d0c35..1876280 100644\n--- a/lib/matplotlib/tests/test_mlab.py\n+++ b/lib/matplotlib/tests/test_mlab.py\n@@ -670,6 +670,28 @@ class TestSpectral:\n         with pytest.raises(AssertionError):\n             assert_allclose(spec_b, spec_c, atol=1e-08)\n \n+    def test_psd_window_flattop(self):\n+        # Testing the PSD with flattop window to ensure correct window correction factor\n+        if self.NFFT_density is None:\n+            return\n+        \n+        NFFT = 512\n+        ydata = np.random.randn(NFFT)\n+        window = signal.windows.flattop(NFFT)\n+        \n+        # Calculating PSD with the flattop window\n+        spec, freqs = mlab.psd(x=ydata,\n+                               NFFT=NFFT,\n+                               Fs=self.Fs,\n+                               noverlap=0,\n+                               sides=self.sides,\n+                               window=window,\n+                               scale_by_freq=True)\n+\n+        # Verifying the correction in window application\n+        # Referencing the expected outcome calculation as in the original issue\n+        assert np.allclose(spec.sum(), spec.sum() / ((window**2).sum() / (window.sum()**2)), atol=1e-08)\n+\n     def test_psd_windowarray(self):\n         freqs = self.freqs_density\n         spec, fsp = mlab.psd(x=self.y,\n",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..b337f80 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,30 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..8f32848 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,26 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n-\n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([1, 2, 3], [4, 5, 6], label='test line')\n+    legend = ax.legend(draggable=True)\n+\n+    # Try pickling the figure\n+    try:\n+        pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+        assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    except Exception as e:\n+        pytest.fail(f\"Pickling a figure with a draggable legend failed: {str(e)}\")\n+\n+    # Check that the legend is still draggable after loading\n+    loaded_fig = pickle.loads(pkl)\n+    loaded_legend = loaded_fig.axes[0].get_legend()\n+    assert loaded_legend.get_draggable()\n+\n+    plt.close(fig)\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..a953685 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -34,7 +34,34 @@ def test_simple():\n #    pickle.dump(ax, BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n     plt.figure()\n-    plt.bar(x=np.arange(10), height=np.arange(10))\n+    import matplotlib.pyplot as plt\n+    import pickle\n+    from io import BytesIO\n+    \n+    # Test pickling of a figure with aligned labels\n+    def test_pickle_aligned_labels():\n+        fig = plt.figure()\n+        ax1 = fig.add_subplot(211)\n+        ax2 = fig.add_subplot(212)\n+        time=[0,1,2,3,4]\n+        speed=[40000,4300,4500,4700,4800]\n+        acc=[10,11,12,13,14]\n+        ax1.plot(time,speed)\n+        ax1.set_ylabel('speed')\n+        ax2.plot(time,acc)\n+        ax2.set_ylabel('acc')\n+\n+        fig.align_labels()\n+        \n+        # Attempt to pickle the figure\n+        try:\n+            pickle.dump(fig, BytesIO(), pickle.HIGHEST_PROTOCOL)\n+            print(\"Pickling succeeded\")\n+        except Exception as e:\n+            print(f\"Pickling failed: {e}\")\n+        \n+        # Show figure\n+        plt.close(fig)\n     pickle.dump(plt.gca(), BytesIO(), pickle.HIGHEST_PROTOCOL)\n \n     fig = plt.figure()\n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..0232c88 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -998,8 +998,78 @@ def test_hexbin_log_clim():\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n     assert h.get_clim() == (2, 100)\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import numpy as np\n \n-def test_inverted_limits():\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=[1] * len(X),\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_zero_with_C_parameter(fig_test, fig_ref):\n+    X = [0, 0, 6, 0]\n+    Y = [0, 0, 0, 6]\n+    Z = [1, 1, 1, 1]\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # mincnt = 0 with C parameter test\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=0,\n+        C=Z,\n+        reduce_C_function=np.sum,\n+    )\n+    ax_ref.set_facecolor(\"green\")\n+\n+    ax_test.hexbin(\n+        X, Y,\n+        C=Z,\n+        reduce_C_function=np.sum,\n+        mincnt=0,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n     # Test gh:1553\n     # Calling invert_xaxis prior to plotting should not disable autoscaling\n     # while still maintaining the inverted direction\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..334093f 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -89,6 +89,50 @@ def test_contour_no_valid_levels():\n     ax.contour(np.ones((9, 9)))\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_with_transform(fig_test, fig_ref):\n+    # Create test and reference contour plots\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    \n+    # Contour data\n+    data = np.array([[0, 1], [1, 2]])\n+    \n+    # Generate an initial contour\n+    cs_test = ax_test.contour(data)\n+    \n+    # Create a transformation matrix, for example a simple rotation\n+    from matplotlib.transforms import Affine2D\n+    transform = Affine2D().rotate_deg(45)\n+    \n+    # Apply the transformation to the paths in the reference contour\n+    transformed_paths = [transform.transform_path(path) for path in cs_test.get_paths()]\n+    \n+    # Set the transformed paths back to the contour set\n+    cs_test.set_paths(transformed_paths)\n+    \n+    # The reference uses the exact same transformation\n+    cs_ref.contour(data)\n+    cs_ref.set_paths(transformed_paths)\n+\n+def test_contour_set_paths_unmodified():\n+    # Create a simple contour plot and ensure set_paths doesn't modify its behavior\n+    fig, ax = plt.subplots()\n+    data = np.array([[0, 1, 2], [2, 1, 0]])\n+    cs = ax.contour(data)\n+    original_paths = cs.get_paths()\n+    \n+    # Call set_paths with the original paths\n+    cs.set_paths(original_paths)\n+    \n+    # Ensure paths remain unchanged\n+    new_paths = cs.get_paths()\n+    assert all(op.vertices == np.array_equal(np.array(new_path.vertices), np.array(op.vertices)) for op, new_path in zip(original_paths, new_paths))\n+\n+from matplotlib import pyplot as plt\n+import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal, image_comparison\n+\n def test_contour_Nlevels():\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..18d0c69 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -243,8 +243,15 @@ def test_default_static_max_age(app):\n     finally:\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n+def test_non_empty_name_required(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n \n-def test_templates_list(test_apps):\n+def test_valid_name_allowed(app, client):\n+    try:\n+        blueprint = flask.Blueprint(\"valid_name\", __name__)\n+    except ValueError:\n+        pytest.fail(\"Blueprint with a valid non-empty name should not raise ValueError\")\n     from blueprintapp import app\n \n     templates = sorted(app.jinja_env.list_templates())\n",
  "psf__requests-1142": "",
  "psf__requests-1724": "",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..3537805 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,12 +81,27 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),  # Test case for empty label\n+            (InvalidURL, 'http://*example.com'),  # Test case for invalid wildcard character\n+            (InvalidURL, 'http://example..com'),  # Test case for consecutive periods in domain\n+            (InvalidURL, 'http://example.com.'),  # Test case for trailing period\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n             requests.get(url)\n \n-    def test_basic_building(self):\n+    @pytest.mark.parametrize(\n+        'url', [\n+            'http://example..com',        # Consecutive periods\n+            'http://example.com.',        # Trailing dot\n+            'http://.example.com',        # Empty label\n+            'http://*example.com',        # Wildcard character\n+        ]\n+    )\n+    def test_invalid_url_error_messages(self, url):\n+        with pytest.raises(InvalidURL) as excinfo:\n+            requests.get(url)\n+        assert 'URL has an invalid label.' in str(excinfo.value)\n         req = requests.Request()\n         req.url = 'http://kennethreitz.org/'\n         req.data = {'life': '42'}\n",
  "pydata__xarray-2905": "",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex d6a4400..149772d 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -2107,7 +2107,14 @@ class TestDataset:\n \n         assert_identical(ds.coords['a'], expected_orig)\n \n-    def test_copy_with_data_errors(self):\n+    @pytest.mark.parametrize(\"deep, expected_dtype\", [\n+        (True, \"<U3\"),\n+        (False, \"<U3\"),\n+    ])\n+    def test_copy_regression_unicode_index(self, deep, expected_dtype):\n+        ds = xr.Dataset(coords={\"x\": [\"foo\"]}, data_vars={\"y\": (\"x\", [\"bar\"])})\n+        copied_ds = ds.copy(deep=deep)\n+        assert copied_ds.coords[\"x\"].dtype.str == expected_dtype\n         orig = create_test_data()\n         new_var1 = np.arange(orig['var1'].size).reshape(orig['var1'].shape)\n         with raises_regex(ValueError, 'Data must be dict-like'):\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..3966f42 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -571,7 +571,25 @@ class TestCombineAuto:\n         with raises_regex(ValueError, 'Every dimension needs a coordinate'):\n             combine_by_coords(objs)\n \n-        def test_empty_input(self):\n+    def test_combine_by_coords_bystander_non_monotonic(self):\n+        # Check non-monotonic bystander dimension coord doesn't raise ValueError\n+        ycoord = ['z', 'x', 'y']\n+\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n+\n+    def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n     def test_infer_order_from_coords(self):\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..84a7122 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2310,7 +2310,23 @@ class TestDataArray:\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n \n-    def test_reduce_keep_attrs(self):\n+    def test_quantile_keep_attrs(self):\n+        import xarray as xr\n+\n+        # Create a DataArray with attributes\n+        data = xr.DataArray([1, 2, 3], dims=\"x\", attrs={\"unit\": \"meters\"})\n+        \n+        # Test keep_attrs=True; attributes should be preserved\n+        result = data.quantile(0.5, dim=\"x\", keep_attrs=True)\n+        assert result.attrs == {\"unit\": \"meters\"}\n+\n+        # Test keep_attrs=False; attributes should not be preserved\n+        result_no_attrs = data.quantile(0.5, dim=\"x\", keep_attrs=False)\n+        assert result_no_attrs.attrs == {}\n+\n+        # Test default behavior, should not keep attributes\n+        result_default = data.quantile(0.5, dim=\"x\")\n+        assert result_default.attrs == {}\n         # Test dropped attrs\n         vm = self.va.mean()\n         assert len(vm.attrs) == 0\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..80e571c 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,7 +160,12 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n-    def test_merge_broadcast_equals(self):\n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+\n+        expected = xr.merge([ds, da])\n+        assert_identical(ds.merge(da), expected)\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n         actual = ds1.merge(ds2)\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "diff --git a/xarray/tests/test_duck_array_ops.py b/xarray/tests/test_duck_array_ops.py\nindex 0c63f0f..14af56e 100644\n--- a/xarray/tests/test_duck_array_ops.py\n+++ b/xarray/tests/test_duck_array_ops.py\n@@ -604,10 +604,28 @@ def test_min_count_dataset(func):\n     assert_allclose(actual, expected)\n \n \n+import numpy as np\n+import pytest\n+from xarray import DataArray\n+from xarray.testing import assert_allclose\n+from xarray.core.duck_array_ops import _dask_or_eager_func\n+\n @pytest.mark.parametrize(\"dtype\", [float, int, np.float32, np.bool_])\n @pytest.mark.parametrize(\"dask\", [False, True])\n @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\"])\n-def test_multiple_dims(dtype, dask, func):\n+@pytest.mark.parametrize(\"dask\", [False, True])\n+@pytest.mark.parametrize(\"func\", [\"sum\"])\n+def test_min_count_with_multiple_dims_and_min_count(dtype, dask, func):\n+    if dask and not has_dask:\n+        pytest.skip(\"requires dask\")\n+\n+    min_count = 3\n+    da = DataArray(np.array([[np.nan, 2], [3, 4], [5, np.nan]], dtype=dtype))\n+\n+    actual = getattr(da, func)(dim=[\"dim_0\", \"dim_1\"], skipna=True, min_count=min_count)\n+    expected = np.nan if dtype is not np.bool_ else 0  # for boolean, use 0/False instead of NaN\n+    \n+    assert actual == expected, f\"Expected {expected} but got {actual}\"\n     if dask and not has_dask:\n         pytest.skip(\"requires dask\")\n     da = construct_dataarray(3, dtype, contains_nan=True, dask=dask)\n",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..65bcbdb 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,6 +109,14 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0})\n+        ds2 = xr.Dataset(attrs={\"x\": 1})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+        ds3.attrs[\"x\"] = 2\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds3.attrs[\"x\"] == 2\n+\n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..c6d62f1 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,30 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    # Test with keep_attrs=True\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # Test with keep_attrs=False\n+    actual_no_attrs = xr.where(cond, x, y, keep_attrs=False)\n+    expected_no_attrs = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected_no_attrs, actual_no_attrs)\n+\n+    # Test with boolean condition array and integer type DataArrays\n+    integer_cond = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"integer_cond\"})\n+    actual_integer_cond = xr.where(integer_cond, x, y, keep_attrs=True)\n+    assert_identical(expected, actual_integer_cond)\n+\n+    # Test with boolean condition array and floating point type DataArrays\n+    float_x = xr.DataArray([1.5, 1.5], dims=\"x\", attrs={\"attr\": \"float_x\"})\n+    float_actual = xr.where(cond, float_x, y, keep_attrs=True)\n+    float_expected = xr.DataArray([1.5, 0], dims=\"x\", attrs={\"attr\": \"float_x\"})\n+    assert_identical(float_expected, float_actual)\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..390daf1 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -6,11 +6,57 @@ import pytest\n \n import xarray as xr\n from xarray.coding import variables\n-from xarray.conventions import decode_cf_variable, encode_cf_variable\n+from xarray.coding import variables\n+import numpy as np\n \n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n \n-with suppress(ImportError):\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_unsigned_from_signed(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array(\n+        [np.iinfo(unsigned_dtype).max], dtype=unsigned_dtype\n+    )\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(signed_dtype), attrs={\"_Unsigned\": \"true\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == unsigned_dtype\n+    assert np.array_equal(decoded.values, original_values)\n+\n+@pytest.mark.parametrize(\"bits\", [1, 2, 4, 8])\n+def test_decode_signed_from_unsigned(bits):\n+    unsigned_dtype = np.dtype(f\"u{bits}\")\n+    signed_dtype = np.dtype(f\"i{bits}\")\n+    original_values = np.array([-1], dtype=signed_dtype)\n+    encoded = xr.Variable(\n+        (\"x\",), original_values.astype(unsigned_dtype), attrs={\"_Unsigned\": \"false\"}\n+    )\n+    coder = variables.UnsignedIntegerCoder()\n+    decoded = coder.decode(encoded)\n+    assert decoded.dtype == signed_dtype\n+    assert np.array_equal(decoded.values, original_values)\n+\n+# Additional tests to handle special OPeNDAP and netCDF test cases\n+\n+def test_decode_dataset_netcdf4():\n+    ds = xr.open_dataset(\n+        \"https://observations.ipsl.fr/thredds/dodsC/EUREC4A/PRODUCTS/testdata/netcdf_testfiles/test_NC_BYTE_neg.nc\", \n+        engine=\"netcdf4\"\n+    )\n+    assert ds.test.dtype == np.float32\n+    assert np.array_equal(ds.test.values, [-128.0, -1.0, 0.0, 1.0, 2.0, np.nan, 127.0])\n+\n+def test_decode_dataset_pydap():\n+    with pytest.warns(xr.SerializationWarning, match=\"variable 'test' has _Unsigned attribute\"):\n+        ds = xr.open_dataset(\n+            \"https://observations.ipsl.fr/thredds/dodsC/EUREC4A/PRODUCTS/testdata/netcdf_testfiles/test_NC_BYTE_neg.nc\", \n+            engine=\"pydap\"\n+        )\n+    assert ds.test.dtype == np.float32\n+    assert np.array_equal(ds.test.values, [128.0, 255.0, 0.0, 1.0, 2.0, np.nan, 127.0])\n     import dask.array as da\n \n \n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..9a3a4dd 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1913,7 +1913,21 @@ def test_dot_align_coords(use_dask) -> None:\n         xr.testing.assert_allclose(expected, actual)\n \n \n+import pytest\n+import xarray as xr\n+import numpy as np\n+\n def test_where() -> None:\n+    # Test where with scalar and keep_attrs=True\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    xr.testing.assert_identical(expected, actual)\n+\n+    # Additional test to ensure proper handling of attrs\n+    cond.attrs[\"condition_attr\"] = \"test_cond_attr\"\n+    actual_with_attrs = xr.where(cond, 1, 0, keep_attrs=True)\n+    assert actual_with_attrs.attrs == {}\n     cond = xr.DataArray([True, False], dims=\"x\")\n     actual = xr.where(cond, 1, 0)\n     expected = xr.DataArray([1, 0], dims=\"x\")\n",
  "pydata__xarray-6599": "",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..baec23c 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -210,6 +210,22 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n             if isinstance(v, IndexVariable):\n                 self._indexvars.add(k)\n \n+    def test_chunks_does_not_load_entire_dataset(self) -> None:\n+        # New test case for verifying the issue with accessing chunks on zarr-backed xarray\n+\n+        # Import necessary functions for the test\n+        import xarray as xr\n+        \n+        # Define a representative URL for a zarr-backed dataset\n+        url = \"https://ncsa.osn.xsede.org/Pangeo/pangeo-forge/swot_adac/FESOM/surf/fma.zarr\"\n+        \n+        # Trying to open the dataset and accessing chunks to verify behavior\n+        ds = xr.open_dataset(url, engine='zarr')\n+        \n+        # Access chunks attribute - should not load entire dataset into memory\n+        # Assert that the chunks dictionary is empty or not None, checking Zarr-specific behavior\n+        assert ds.chunks is not None\n+\n     def get_variables(self):\n         def lazy_inaccessible(k, v):\n             if k in self._indexvars:\n",
  "pydata__xarray-6744": "",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "",
  "pylint-dev__pylint-4970": "",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..bc890c2 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,37 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from typing import Any\n+import pytest\n+from pylint.lint import Run\n+from _pytest.capture import CaptureFixture\n+import sys\n+\n+EMPTY_MODULE = \"empty_module.py\"\n+\n+def test_short_verbose_no_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the -v option does not expect an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+    assert \"Expected no argument for -v\" not in output.err\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the --verbose option works as expected.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+    assert \"Expected no argument for --verbose\" not in output.err\n+\n+def main(argv: list[str]) -> None:\n+    pytest.main(argv)\n+\n+if __name__ == \"__main__\":\n+    main(sys.argv)\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9123ae4..a606904 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1233,7 +1233,38 @@ class TestRunTC:\n             expected_output=\"No such file or directory\",\n         )\n \n-    def test_recursive(self):\n+    def test_pylint_recursive_ignore(self):\n+        \"\"\"Test Pylint ignoring specific files/directories in recursive mode.\"\"\"\n+        test_directory = join(HERE, \"regrtest_data\", \"directory\")\n+        \n+        # Test ignoring a directory\n+        self._runtest(\n+            [test_directory, \"--recursive=y\", \"--ignore=ignored_subdirectory\"],\n+            code=0,\n+        )\n+\n+        # Test ignoring a specific file\n+        self._runtest(\n+            [test_directory, \"--recursive=y\", \"--ignore=failing.py\"],\n+            code=0,\n+        )\n+\n+        # Test ignoring patterns\n+        self._runtest(\n+            [test_directory, \"--recursive=y\", \"--ignore-patterns=ignored_.*\"],\n+            code=0,\n+        )\n+\n+        # Test ignoring path patterns\n+        self._runtest(\n+            [test_directory, \"--recursive=y\", \"--ignore-paths=.*ignored.*\"],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [test_directory, \"--recursive=y\", \"--ignore-paths=.*failing.*\"],\n+            code=0,\n+        )\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n             code=0,\n",
  "pylint-dev__pylint-6903": "diff --git a/tests/test_pylint_runners.py b/tests/test_pylint_runners.py\nindex 580708d..2cdacd1 100644\n--- a/tests/test_pylint_runners.py\n+++ b/tests/test_pylint_runners.py\n@@ -39,4 +39,26 @@ def test_runner_with_arguments(runner: Callable, tmpdir: LocalPath) -> None:\n     with tmpdir.as_cwd():\n         with pytest.raises(SystemExit) as err:\n             runner(testargs)\n-        assert err.value.code == 0\n+        assert err.value.code == 0\n+\n+\n+def test_pylint_run_jobs_zero_handle_cpu_shares_fraction(tmpdir) -> None:\n+    \"\"\"Ensure pylint does not crash when CPU shares result in fraction of CPU core.\"\"\"\n+    filepath = os.path.abspath(__file__)\n+    testargs = [filepath, \"--jobs=0\"]\n+\n+    def mock_open_handle(*args, **kwargs):\n+        if args[0] == \"/sys/fs/cgroup/cpu/cpu.cfs_quota_us\":\n+            return mock_open(read_data=\"-1\")(*args, **kwargs)\n+        if args[0] == \"/sys/fs/cgroup/cpu/cpu.cfs_period_us\":\n+            return mock_open(read_data=\"100000\")(*args, **kwargs)\n+        if args[0] == \"/sys/fs/cgroup/cpu/cpu.shares\":\n+            return mock_open(read_data=\"2\")(*args, **kwargs)\n+\n+    with tmpdir.as_cwd():\n+        with pytest.raises(SystemExit) as exc_info:\n+            with patch(\"builtins.open\", mock_open_handle):\n+                with patch(\"pylint.lint.run.Path\", return_value=MagicMock(is_file=lambda: True)):\n+                    Run(testargs, reporter=Reporter())\n+\n+        assert exc_info.value.code == 0\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..a719863 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,25 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive_option(self) -> None:\n+        \"\"\"Tests that ignore-paths are respected even when using --recursive=y.\"\"\"\n+        with _test_sys_path():\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                    ],\n+                    code=0,\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..991c08e 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -767,6 +767,36 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n \n             paths = [cwd, \"/custom_pythonpath\", *default_paths]\n             sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths\n+\n+            # New Test Cases\n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Empty string should be removed from sys.path\"\n+\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"Single dot should be removed from sys.path\"\n+\n+            # Test when the first item is the current working directory\n+            paths = [cwd, *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], \"CWD should be removed from sys.path\"\n+\n+            # Test when the first item should not be removed\n+            paths = [\"/not_to_remove\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths, \"Non-matching path should not be removed\"\n             with _test_environ_pythonpath(\"/custom_pythonpath\"):\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..8a9e6fb 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,9 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+from _pytest.logging import caplog_records_key\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n@@ -172,6 +175,28 @@ def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardow\n     assert set(caplog._item.stash[caplog_records_key]) == {\"setup\", \"call\"}\n \n \n+def test_caplog_get_records_freeze_issue(caplog) -> None:\n+    \"\"\"Test to expose the issue where caplog.get_records freezes after caplog.clear.\"\"\"\n+\n+    def verify_consistency() -> None:\n+        # Make sure both get_records and records return the same log records\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    # Initial check before logging\n+    verify_consistency()\n+    \n+    # Add a log record\n+    logging.warning(\"test\")\n+    \n+    # Verify consistency after logging\n+    verify_consistency()\n+    \n+    # Clear the records\n+    caplog.clear()\n+    \n+    # This should fail if the issue is present\n+    verify_consistency()\n+\n def test_ini_controls_global_log_level(pytester: Pytester) -> None:\n     pytester.makepyfile(\n         \"\"\"\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_debugging.py b/testing/test_debugging.py\nindex 912abd7..ad37e33 100644\n--- a/testing/test_debugging.py\n+++ b/testing/test_debugging.py\n@@ -124,6 +124,38 @@ class TestPDB:\n         assert rep.skipped\n         assert len(pdblist) == 0\n \n+    def test_pdb_unittest_teardown_not_executed_on_skip(self, pytester: Pytester) -> None:\n+        p1 = pytester.makepyfile(\n+            \"\"\"\n+            import unittest\n+\n+            @unittest.skip(\"class skipped\")\n+            class MySkippedTestCase(unittest.TestCase):\n+                def setUp(self):\n+                    raise Exception(\"setUp should not be called\")\n+                def tearDown(self):\n+                    raise Exception(\"tearDown should not be called\")\n+                def test_one(self):\n+                    pass\n+\n+            \"\"\"\n+        )\n+        result = pytester.runpytest_inprocess(\"--pdb\", \"-rs\", str(p1))\n+        result.stdout.fnmatch_lines([\n+            \"*class skipped*\",\n+            \"*1 skipped in*\",\n+        ])\n+        rep = runpdb_and_get_report(\n+            pytester,\n+            \"\"\"\n+            import pytest\n+            def test_func():\n+                pytest.skip(\"hello\")\n+        \"\"\",\n+        )\n+        assert rep.skipped\n+        assert len(pdblist) == 0\n+\n     def test_pdb_on_BdbQuit(self, pytester, pdblist) -> None:\n         rep = runpdb_and_get_report(\n             pytester,\n",
  "pytest-dev__pytest-5262": "",
  "pytest-dev__pytest-5631": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex e422b03..d9ed414 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -85,7 +85,20 @@ class TestCollector:\n         assert len(nodes) == 1\n         assert isinstance(nodes[0], pytest.File)\n \n-    def test_can_skip_class_with_test_attr(self, testdir):\n+    def test_patch_array_issue(self, testdir):\n+        \"\"\"Test for verifying the patching issue with np.array\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            from unittest.mock import patch\n+            import numpy as np\n+            class TestArrayPatch:\n+                @patch('module.FOO', new=np.array([-5.5, 3.0]))\n+                def test_patch_array(self):\n+                    assert True  # We only verify collection, not execution failure\n+            \"\"\"\n+        )\n+        result = testdir.runpytest()\n+        result.assert_outcomes(passed=1)\n         \"\"\"Assure test class is skipped when using `__test__=False` (See #2007).\"\"\"\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..02efdb5 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -126,8 +126,8 @@ class TestPaste(object):\n         assert len(mocked_urlopen) == 1\n         url, data = mocked_urlopen[0]\n         assert type(data) is bytes\n-        lexer = \"python3\" if sys.version_info[0] >= 3 else \"python\"\n+        lexer = \"text\"\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex fb6b260..f6e0e75 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -702,6 +702,26 @@ class Test_genitems:\n         assert items[1].name == \"testmethod_one\"\n         assert items[2].name == \"testmethod_one\"\n \n+    @pytest.mark.parametrize(\"arg0\", [\".[\"])\n+    def test_example_items_parametrized_special_characters(self, testdir, arg0):\n+        # Define a parameterized test case within a class to check special characters handling\n+        p = testdir.makepyfile(\n+            f\"\"\"\n+            import pytest\n+\n+            class TestSpecialCharacters:\n+                @pytest.mark.parametrize(\"arg\", [\"{arg0}\"])\n+                def test_special_arg(self, arg):\n+                    pass\n+            \"\"\"\n+        )\n+        items, reprec = testdir.inline_genitems(p)\n+        \n+        # Verify basic properties of the collected test\n+        assert len(items) == 1\n+        assert items[0].name == f\"test_special_arg[{arg0}]\"\n+        assert items[0].getmodpath() == f\"TestSpecialCharacters.test_special_arg[{arg0}]\"\n+\n         # let's also test getmodpath here\n         assert items[0].getmodpath() == \"testone\"\n         assert items[1].getmodpath() == \"TestX.testmethod_one\"\n",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..e5a789a 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,8 +201,21 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n \n-def test_dynamic_fixture_request(testdir):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..26b8628 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -152,9 +153,34 @@ class TestEvaluation:\n         assert skipped\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n+from _pytest.pytester import Testdir  # add this import at the top of the file\n \n class TestXFail:\n-    @pytest.mark.parametrize(\"strict\", [True, False])\n+    def test_dynamic_xfail_fail(self, testdir: Testdir) -> None:\n+        \"\"\"Test that dynamically setting an xfail in a failing test works.\"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xfail(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_pass(self, testdir: Testdir) -> None:\n+        \"\"\"Test that dynamically setting an xfail in a passing test does not fail.\"\"\"\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_dynamic_xpass(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 1\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(passed=1)\n     def test_xfail_simple(self, testdir, strict):\n         item = testdir.getitem(\n             \"\"\"\n",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..4bb9bb7 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,6 +513,15 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n+    @pytest.mark.parametrize(\"nl, expected\", [\n+        (\"\\n\", \"test\\n\"),\n+        (\"\\r\\n\", \"test\\r\\n\"),\n+        (\"\\r\", \"test\\r\"),\n+    ])\n+    def test_cafd_preserves_newlines(self, capfd, nl, expected):\n+        print(\"test\", end=nl)\n+        out, err = capfd.readouterr()\n+        assert out == expected\n \n     def test_capfdbinary(self, testdir):\n         reprec = testdir.inline_runsource(\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..3f04ab8 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -26,6 +27,29 @@ def test_change_level(caplog):\n     assert \"WARNING\" not in caplog.text\n     assert \"CRITICAL\" in caplog.text\n \n+def test_change_level_undos_handler_level(testdir: Testdir) -> None:\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler).\"\"\"\n+\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test1(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(41)\n+            assert caplog.handler.level == 41\n+\n+        def test2(caplog):\n+            assert caplog.handler.level == 0\n+\n+        def test3(caplog):\n+            assert caplog.handler.level == 0\n+            caplog.set_level(43)\n+            assert caplog.handler.level == 43\n+        \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=3)\n \n def test_change_level_undo(testdir):\n     \"\"\"Ensure that 'set_level' is undone after the end of the test\"\"\"\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..0f7579f 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1177,6 +1178,33 @@ def test_collect_symlink_out_of_tree(testdir):\n     )\n     assert result.ret == 0\n \n+def test_collect_symlink_empty_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked empty directory is collected with no tests.\"\"\"\n+    dir = pytester.mkdir(\"empty_dir\")\n+    pytester.path.joinpath(\"symlink_empty_dir\").symlink_to(dir)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=0)\n+\n+def test_collect_multiple_symlink_dirs(pytester: Pytester) -> None:\n+    \"\"\"Multiple symlinked directories are collected.\"\"\"\n+    dir1 = pytester.mkdir(\"dir1\")\n+    dir2 = pytester.mkdir(\"dir2\")\n+    dir1.joinpath(\"test_it_1.py\").write_text(\"def test_it_1(): pass\", \"utf-8\")\n+    dir2.joinpath(\"test_it_2.py\").write_text(\"def test_it_2(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_dir1\").symlink_to(dir1)\n+    pytester.path.joinpath(\"symlink_dir2\").symlink_to(dir2)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+def test_collect_symlinked_nested_dir(pytester: Pytester) -> None:\n+    \"\"\"A symlinked directory pointing to a nested directory structure is collected.\"\"\"\n+    base = pytester.mkdir(\"base_dir\")\n+    nested = base.mkdir(\"nested_dir\")\n+    nested.joinpath(\"test_nested.py\").write_text(\"def test_nested(): pass\", \"utf-8\")\n+    pytester.path.joinpath(\"symlink_nested_dir\").symlink_to(base)\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=1)\n+\n \n def test_collectignore_via_conftest(testdir):\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..e681088 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -300,7 +300,35 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     )\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n+from _pytest.pytester import Pytester\n+\n+def test_unittest_setUpClass_fixture_visibility(pytester: Pytester) -> None:\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class MyTestCaseWithSetUpClass(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+\n+            def test_func1(self):\n+                pass\n+\n+            @classmethod\n+            def tearDownClass(cls):\n+                pass\n+        \"\"\"\n+    )\n+    # Test without verbosity, expecting no \"no docstring available\" message\n+    result = pytester.runpytest(\"--fixtures\")\n+    assert result.ret == 0\n+    result.stdout.no_fnmatch_line(\"*no docstring available*\")\n \n+    # Test with verbosity, expecting \"no docstring available\" to appear\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    assert result.ret == 0\n+    result.stdout.fnmatch_lines([\"*no docstring available*\"])\n \n def test_setup_class(pytester: Pytester) -> None:\n     testpath = pytester.makepyfile(\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..ac1bfe9 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -564,7 +564,33 @@ def test_class_weights_cv():\n                   [1.0, 1.0], [1.0, 0.0]])\n     y = [1, 1, 1, -1, -1]\n \n-    reg = RidgeClassifierCV(class_weight=None, alphas=[.01, .1, 1])\n+import numpy as np\n+from sklearn.linear_model import RidgeClassifierCV\n+from sklearn.utils._testing import assert_array_equal\n+\n+# Add new test case for RidgeClassifierCV with store_cv_values\n+def test_ridge_classifier_cv_store_cv_values():\n+    rng = np.random.RandomState(42)\n+    n_samples = 8\n+    x = rng.randn(n_samples, 2)\n+    y = np.array([1, 1, 1, -1, -1, 1, -1, 1])\n+    alphas = [0.1, 1.0, 10.0]\n+    n_alphas = len(alphas)\n+\n+    # RidgeClassifierCV without store_cv_values should work normally\n+    r = RidgeClassifierCV(alphas=alphas)\n+    r.fit(x, y)\n+    assert hasattr(r, 'alpha_')  # Check if best alpha is available\n+\n+    # RidgeClassifierCV with store_cv_values should not raise an error and store cv_values_\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n+    r.fit(x, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, 1, n_alphas))  # cv_values_ should have the correct shape\n+\n+    # Test with multiple outputs\n+    Y = rng.choice([1, -1], size=(n_samples, 2))\n+    r.fit(x, Y)\n+    assert_equal(r.cv_values_.shape, (n_samples, 2, n_alphas))  # Check shape for multi-output\n     reg.fit(X, y)\n \n     # we give a small weights to class 1\n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..0212b73 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,6 +184,19 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n+def test_large_values_fowlkes_mallows_score():\n+    # Test overflow in fowlkes_mallows_score\n+    labels_true = np.array([0] * 100000 + [1] * 50000)\n+    labels_pred = np.array([0] * 75000 + [1] * 75000)\n+    \n+    # The original computation tk / np.sqrt(pk * qk) was prone to an overflow.\n+    # The expected behavior is that it should compute a valid FMI score\n+    # without any runtime warnings or returning NaN.\n+    score = fowlkes_mallows_score(labels_true, labels_pred)\n+    assert_all_finite(score)\n+    assert 0.0 <= score <= 1.0\n+\n+\n def test_entropy():\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..775278f 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -538,8 +538,32 @@ def test_hashing_vectorizer():\n     for i in range(X.shape[0]):\n         assert_almost_equal(np.linalg.norm(X[0].data, 1), 1.0)\n \n+from sklearn.feature_extraction.text import CountVectorizer\n+from numpy.testing import assert_array_equal, assert_raises\n+import six\n+from operator import itemgetter\n+\n+def test_countvectorizer_with_custom_vocabulary_no_fit():\n+    # Creating a CountVectorizer with a custom vocabulary\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    vectorizer = CountVectorizer(vocabulary=vocab)\n+\n+    # Ensure vectorizer can transform the corpus without being fitted\n+    corpus = [\n+        'This is the first document.',\n+        'This is the second second document.',\n+        'And the third one.',\n+        'Is this the first document?',\n+    ]\n+\n+    # Should not raise an error as vocabulary is provided\n+    feature_names = vectorizer.get_feature_names()\n+    assert_array_equal(feature_names, vocab)\n \n-def test_feature_names():\n+    # Verify transformation\n+    transformed = vectorizer.transform(corpus)\n+    assert transformed.shape == (4, 9)\n+    assert hasattr(vectorizer, \"vocabulary_\")\n     cv = CountVectorizer(max_df=0.5)\n \n     # test for Value error on unfitted/empty vocabulary\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..2c0ebf7 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1172,8 +1172,34 @@ def test_search_cv_timing():\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n+from sklearn.utils.testing import assert_true, assert_almost_equal\n \n-def test_grid_search_correct_score_results():\n+def test_search_refit_time():\n+    svc = LinearSVC(random_state=0)\n+    X = [[1, ], [2, ], [3, ], [4, ]]\n+    y = [0, 1, 1, 0]\n+    \n+    gs = GridSearchCV(svc, {'C': [0.1, 1]}, cv=2, refit=True)\n+    gs.fit(X, y)\n+    \n+    # Check if refit_time_ attribute is present\n+    assert_true(hasattr(gs, \"refit_time_\"))\n+    \n+    # Check if refit_time_ is a floating point number\n+    assert_true(isinstance(gs.refit_time_, float))\n+    \n+    # Verify refit_time_ is non-negative\n+    assert_greater_equal(gs.refit_time_, 0)\n+\n+    # Optionally, test that `refit_time_` is reasonably close within an expected range\n+    # since timing may not be deterministic due to varying workloads\n+    gs2 = GridSearchCV(svc, {'C': [0.1, 1]}, cv=2, refit=True)\n+    import time\n+    start_time = time.time()\n+    gs2.fit(X, y)\n+    end_time = time.time()\n+    full_fit_time = end_time - start_time\n+    assert_almost_equal(gs2.refit_time_, full_fit_time - np.sum(gs2.cv_results_['mean_fit_time']), decimal=1)\n     # test that correct scores are used\n     n_splits = 3\n     clf = LinearSVC(random_state=0)\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..bb04f9d 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -21,6 +21,13 @@ from sklearn.utils.testing import assert_true\n from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import ignore_warnings\n from sklearn.utils.testing import assert_warns_message\n+from sklearn.metrics.scorer import get_scorer\n+from sklearn.utils import check_random_state\n+from sklearn.datasets import make_classification\n+from sklearn.utils._testing import assert_array_almost_equal\n+import numpy as np\n+# Import the private function we're testing\n+from sklearn.linear_model import _log_reg_scoring_path\n \n from sklearn.exceptions import ConvergenceWarning\n from sklearn.exceptions import ChangedBehaviorWarning\n@@ -492,7 +499,30 @@ def test_logistic_cv():\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n \n-def test_multinomial_logistic_regression_string_inputs():\n+@pytest.mark.parametrize('scoring, multiclass_agg_list',\n+                         [('accuracy', ['']),\n+                          ('precision', ['_macro', '_weighted']),\n+                          ('f1', ['_macro', '_weighted']),\n+                          ('neg_log_loss', ['']),\n+                          ('recall', ['_macro', '_weighted'])])\n+def test_logistic_cv_multinomial_score(scoring, multiclass_agg_list):\n+    # Test that LogisticRegressionCV uses the right score to compute its\n+    # cross-validation scores when using a multinomial scoring\n+    # Based on issue description https://github.com/scikit-learn/scikit-learn/issues/8720\n+    X, y = make_classification(n_samples=100, random_state=0, n_classes=3,\n+                               n_informative=6)\n+    train, test = np.arange(80), np.arange(80, 100)\n+    lr = LogisticRegression(C=1., solver='lbfgs', multi_class='multinomial')\n+    params = lr.get_params()\n+    for key in ['C', 'n_jobs', 'warm_start']:\n+        del params[key]\n+    lr.fit(X[train], y[train])\n+    for averaging in multiclass_agg_list:\n+        scorer = get_scorer(scoring + averaging)\n+        assert_array_almost_equal(\n+            _log_reg_scoring_path(X, y, train, test, Cs=[1.],\n+                                  scoring=scorer, **params)[2][0],\n+            scorer(lr, X[test], y[test]))\n     # Test with string labels for LogisticRegression(CV)\n     n_samples, n_features, n_classes = 50, 5, 3\n     X_ref, y = make_classification(n_samples=n_samples, n_features=n_features,\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..0514612 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -167,6 +167,23 @@ def test_clone_sparse_matrices():\n         assert_array_equal(clf.empty.toarray(), clf_cloned.empty.toarray())\n \n \n+def test_clone_estimator_types():\n+    # Check that clone works when parameters are types (classes) instead of instances\n+    from sklearn.base import BaseEstimator\n+    from sklearn.utils import all_estimators\n+\n+    class MyEstimator(BaseEstimator):\n+        def __init__(self, empty=None):\n+            self.empty = empty\n+\n+    # Using a type rather than instance\n+    available_estimators = all_estimators()\n+\n+    for name, Estimator in available_estimators:\n+        est_class = MyEstimator(empty=Estimator)\n+        cloned_est = clone(est_class)\n+        assert est_class.empty is cloned_est.empty\n+\n def test_repr():\n     # Smoke test the repr of the base estimator.\n     my_estimator = MyEstimator()\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..b506a00 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -18,7 +18,8 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "diff --git a/sklearn/model_selection/tests/test_split.py b/sklearn/model_selection/tests/test_split.py\nindex 785bf42..c40a2bb 100644\n--- a/sklearn/model_selection/tests/test_split.py\n+++ b/sklearn/model_selection/tests/test_split.py\n@@ -494,7 +494,31 @@ def test_shuffle_stratifiedkfold():\n     check_cv_coverage(kf0, X_40, y, groups=None, expected_n_splits=5)\n \n \n-def test_kfold_can_detect_dependent_samples_on_digits():  # see #2372\n+def test_stratifiedkfold_shuffle_behavior():\n+    # Test that shuffling within each class happens correctly with different random states\n+    X = np.arange(20)\n+    y = np.array([0] * 10 + [1] * 10)\n+\n+    skf_no_shuffle = StratifiedKFold(n_splits=5, shuffle=False)\n+    no_shuffle_test_sets = [test for _, test in skf_no_shuffle.split(X, y)]\n+\n+    skf_shuffle_1 = StratifiedKFold(n_splits=5, shuffle=True, random_state=1)\n+    shuffle_test_sets_1 = [test for _, test in skf_shuffle_1.split(X, y)]\n+\n+    skf_shuffle_2 = StratifiedKFold(n_splits=5, shuffle=True, random_state=2)\n+    shuffle_test_sets_2 = [test for _, test in skf_shuffle_2.split(X, y)]\n+\n+    for no_shuffle, shuffle_1, shuffle_2 in zip(no_shuffle_test_sets, shuffle_test_sets_1, shuffle_test_sets_2):\n+        # Test if shuffling produces a different ordering vs no shuffle\n+        assert no_shuffle.tolist() != shuffle_1.tolist()\n+        assert no_shuffle.tolist() != shuffle_2.tolist()\n+\n+        # Test different random states produce different results\n+        assert shuffle_1.tolist() != shuffle_2.tolist()\n+\n+    # Ensure coverage on each class with different seeds\n+    check_cv_coverage(skf_shuffle_1, X, y, groups=None, expected_n_splits=5)\n+    check_cv_coverage(skf_shuffle_2, X, y, groups=None, expected_n_splits=5)\n     # The digits samples are dependent: they are apparently grouped by authors\n     # although we don't have any information on the groups segment locations\n     # for this data. We can highlight this fact by computing k-fold cross-\n",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..aa1e6d0 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -185,11 +185,11 @@ def test_invalid_strategy_option():\n \n \n @pytest.mark.parametrize(\n-    'strategy, expected_2bins, expected_3bins',\n-    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2]),\n-     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2]),\n-     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2])])\n-def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n+    'strategy, expected_2bins, expected_3bins, expected_5bins',\n+    [('uniform', [0, 0, 0, 0, 1, 1], [0, 0, 0, 0, 2, 2], [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 2, 2], [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 0, 0, 1, 1, 1], [0, 0, 1, 1, 2, 2], [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins, expected_5bins):\n     X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n \n     # with 2 bins\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..84b8755 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,13 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n-\n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict when n_init > 1\n+    X = np.random.RandomState(42).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=10, random_state=42)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..a691c03 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -7,6 +8,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n # License: BSD 3 clause\n \n import pytest\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n import numpy as np\n \n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..e0b614d 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -506,4 +506,34 @@ def test_transform():\n     assert_array_almost_equal(\n             eclf3.transform(X).swapaxes(0, 1).reshape((4, 6)),\n             eclf2.transform(X)\n-    )\n+    )\n+\n+from sklearn.linear_model import LogisticRegression\n+from sklearn.ensemble import RandomForestClassifier, VotingClassifier, VotingRegressor\n+import numpy as np\n+import pytest\n+from sklearn.datasets import load_iris\n+from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils.testing import assert_array_almost_equal\n+\n+@pytest.mark.filterwarnings('ignore: Default solver will be changed')  # 0.22\n+@pytest.mark.filterwarnings('ignore: Default multi_class will')  # 0.22\n+@pytest.mark.parametrize(\n+    \"X, y, voter\",\n+    [(load_iris(return_X_y=True), VotingClassifier(\n+        estimators=[('lr', LogisticRegression()),\n+                    ('rf', RandomForestClassifier(n_estimators=10))])),\n+     (load_iris(return_X_y=True), VotingRegressor(\n+         estimators=[('lr', LinearRegression()),\n+                     ('rf', RandomForestRegressor(n_estimators=10))]))]\n+)\n+def test_none_estimator_with_weights(X, y, voter):\n+    # check that an estimator can be set to None and passing some weight\n+    # regression test for\n+    # https://github.com/scikit-learn/scikit-learn/issues/13777\n+    X_data, y_data = X\n+    voter.fit(X_data, y_data, sample_weight=np.ones(y_data.shape))\n+    voter.set_params(lr=None)\n+    voter.fit(X_data, y_data, sample_weight=np.ones(y_data.shape))\n+    y_pred = voter.predict(X_data)\n+    assert y_pred.shape == y_data.shape\n",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..df62797 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -332,6 +332,23 @@ def test_export_text():\n     clf = DecisionTreeClassifier(max_depth=2, random_state=0)\n     clf.fit(X, y)\n \n+    # Testing export_text on a single-feature input\n+    X_single_feature = [[-2], [-1], [-1], [1], [1], [2]]\n+    y_single_feature = [-1, -1, -1, 1, 1, 1]\n+    \n+    clf_single = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf_single.fit(X_single_feature, y_single_feature)\n+    \n+    expected_report_single = dedent(\"\"\"\n+    |--- feature_0 <= 0.0\n+    |   |--- class: -1\n+    |--- feature_0 >  0.0\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+    \n+    assert export_text(clf_single) == expected_report_single\n+    assert export_text(clf_single, feature_names=['single_feature']) == expected_report_single\n+\n     expected_report = dedent(\"\"\"\n     |--- feature_1 <= 0.00\n     |   |--- class: -1\n@@ -345,6 +362,23 @@ def test_export_text():\n     # testing that the rest of the tree is truncated\n     assert export_text(clf, max_depth=10) == expected_report\n \n+    # Testing export_text on a single-feature input\n+    X_single_feature = [[-2], [-1], [-1], [1], [1], [2]]\n+    y_single_feature = [-1, -1, -1, 1, 1, 1]\n+    \n+    clf_single = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf_single.fit(X_single_feature, y_single_feature)\n+    \n+    expected_report_single = dedent(\"\"\"\n+    |--- feature_0 <= 0.0\n+    |   |--- class: -1\n+    |--- feature_0 >  0.0\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+    \n+    assert export_text(clf_single) == expected_report_single\n+    assert export_text(clf_single, feature_names=['single_feature']) == expected_report_single\n+\n     expected_report = dedent(\"\"\"\n     |--- b <= 0.00\n     |   |--- class: -1\n@@ -353,6 +387,23 @@ def test_export_text():\n     \"\"\").lstrip()\n     assert export_text(clf, feature_names=['a', 'b']) == expected_report\n \n+    # Testing export_text on a single-feature input\n+    X_single_feature = [[-2], [-1], [-1], [1], [1], [2]]\n+    y_single_feature = [-1, -1, -1, 1, 1, 1]\n+    \n+    clf_single = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf_single.fit(X_single_feature, y_single_feature)\n+    \n+    expected_report_single = dedent(\"\"\"\n+    |--- feature_0 <= 0.0\n+    |   |--- class: -1\n+    |--- feature_0 >  0.0\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+    \n+    assert export_text(clf_single) == expected_report_single\n+    assert export_text(clf_single, feature_names=['single_feature']) == expected_report_single\n+\n     expected_report = dedent(\"\"\"\n     |--- feature_1 <= 0.00\n     |   |--- weights: [3.00, 0.00] class: -1\n@@ -361,6 +412,23 @@ def test_export_text():\n     \"\"\").lstrip()\n     assert export_text(clf, show_weights=True) == expected_report\n \n+    # Testing export_text on a single-feature input\n+    X_single_feature = [[-2], [-1], [-1], [1], [1], [2]]\n+    y_single_feature = [-1, -1, -1, 1, 1, 1]\n+    \n+    clf_single = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf_single.fit(X_single_feature, y_single_feature)\n+    \n+    expected_report_single = dedent(\"\"\"\n+    |--- feature_0 <= 0.0\n+    |   |--- class: -1\n+    |--- feature_0 >  0.0\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+    \n+    assert export_text(clf_single) == expected_report_single\n+    assert export_text(clf_single, feature_names=['single_feature']) == expected_report_single\n+\n     expected_report = dedent(\"\"\"\n     |- feature_1 <= 0.00\n     | |- class: -1\n@@ -373,6 +441,23 @@ def test_export_text():\n     y_l = [-1, -1, -1, 1, 1, 1, 2]\n     clf = DecisionTreeClassifier(max_depth=4, random_state=0)\n     clf.fit(X_l, y_l)\n+    # Testing export_text on a single-feature input\n+    X_single_feature = [[-2], [-1], [-1], [1], [1], [2]]\n+    y_single_feature = [-1, -1, -1, 1, 1, 1]\n+    \n+    clf_single = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf_single.fit(X_single_feature, y_single_feature)\n+    \n+    expected_report_single = dedent(\"\"\"\n+    |--- feature_0 <= 0.0\n+    |   |--- class: -1\n+    |--- feature_0 >  0.0\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+    \n+    assert export_text(clf_single) == expected_report_single\n+    assert export_text(clf_single, feature_names=['single_feature']) == expected_report_single\n+\n     expected_report = dedent(\"\"\"\n     |--- feature_1 <= 0.00\n     |   |--- class: -1\n@@ -387,6 +472,23 @@ def test_export_text():\n     reg = DecisionTreeRegressor(max_depth=2, random_state=0)\n     reg.fit(X_mo, y_mo)\n \n+    # Testing export_text on a single-feature input\n+    X_single_feature = [[-2], [-1], [-1], [1], [1], [2]]\n+    y_single_feature = [-1, -1, -1, 1, 1, 1]\n+    \n+    clf_single = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    clf_single.fit(X_single_feature, y_single_feature)\n+    \n+    expected_report_single = dedent(\"\"\"\n+    |--- feature_0 <= 0.0\n+    |   |--- class: -1\n+    |--- feature_0 >  0.0\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+    \n+    assert export_text(clf_single) == expected_report_single\n+    assert export_text(clf_single, feature_names=['single_feature']) == expected_report_single\n+\n     expected_report = dedent(\"\"\"\n     |--- feature_1 <= 0.0\n     |   |--- value: [-1.0, -1.0]\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..bf34b0c 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1531,28 +1531,24 @@ def test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr():\n     assert (lrcv.predict(X_train) == gs.predict(X_train)).mean() >= .8\n     assert (lrcv.predict(X_test) == gs.predict(X_test)).mean() >= .8\n \n-\n-@pytest.mark.parametrize('multi_class', ('ovr', 'multinomial'))\n-def test_LogisticRegressionCV_no_refit(multi_class):\n-    # Test LogisticRegressionCV attribute shapes when refit is False\n-\n-    n_classes = 3\n-    n_features = 20\n-    X, y = make_classification(n_samples=200, n_classes=n_classes,\n-                               n_informative=n_classes, n_features=n_features,\n-                               random_state=0)\n-\n-    Cs = np.logspace(-4, 4, 3)\n-    l1_ratios = np.linspace(0, 1, 2)\n-\n-    lrcv = LogisticRegressionCV(penalty='elasticnet', Cs=Cs, solver='saga',\n-                                l1_ratios=l1_ratios, random_state=0,\n-                                multi_class=multi_class, refit=False)\n-    lrcv.fit(X, y)\n-    assert lrcv.C_.shape == (n_classes,)\n-    assert lrcv.l1_ratio_.shape == (n_classes,)\n-    assert lrcv.coef_.shape == (n_classes, n_features)\n-\n+@pytest.mark.parametrize('solver', ('saga', 'liblinear'))\n+def test_LogisticRegressionCV_no_refit_index_error(solver):\n+    # Test LogisticRegressionCV does not raise IndexError with refit=False\n+\n+    np.random.seed(29)\n+    X = np.random.normal(size=(1000, 3))\n+    beta = np.random.normal(size=3)\n+    intercept = np.random.normal(size=None)\n+    y = np.sign(intercept + X @ beta)\n+\n+    lrcv = LogisticRegressionCV(cv=5, solver=solver, tol=1e-2, refit=False)\n+    try:\n+        lrcv.fit(X, y)\n+        no_error = True\n+    except IndexError:\n+        no_error = False\n+\n+    assert no_error, f\"IndexError was raised with solver={solver}.\"\n \n def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n     # Make sure the shapes of scores_ and coefs_paths_ attributes are correct\n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/tests/test_show_versions.py b/sklearn/utils/tests/test_show_versions.py\nindex fa39255..140e0ac 100644\n--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n@@ -13,6 +13,11 @@ def test_get_sys_info():\n \n \n def test_get_deps_info():\n+    assert 'joblib' in deps_info\n+\n+def test_joblib_in_versions():\n+    \"\"\"Test that joblib is listed in the dependencies.\"\"\"\n+    deps_info = _get_deps_info()\n     deps_info = _get_deps_info()\n \n     assert 'pip' in deps_info\n@@ -30,4 +35,4 @@ def test_show_versions_with_blas(capsys):\n     out, err = capsys.readouterr()\n     assert 'python' in out\n     assert 'numpy' in out\n-    assert 'BLAS' in out\n+    assert 'BLAS' in out\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..6bfe13e 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -77,8 +77,21 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n \n     assert_array_equal(labels, expected)\n \n+def test_float_min_samples():\n+    rng = np.random.RandomState(42)\n+    n_points_per_cluster = 10\n+    C1 = [-5, -2] + .8 * rng.randn(n_points_per_cluster, 2)\n+    C2 = [4, -1] + .1 * rng.randn(n_points_per_cluster, 2)\n+    C3 = [1, -2] + .2 * rng.randn(n_points_per_cluster, 2)\n+    \n+    X = np.vstack((C1, C2, C3))\n+    expected_labels = np.r_[[0] * 10, [1] * 10, [2] * 10]\n+    X, expected_labels = shuffle(X, expected_labels, random_state=rng)\n \n-def test_extract_xi():\n+    # Check float min_samples\n+    clust = OPTICS(min_samples=0.1, min_cluster_size=0.1,\n+                   max_eps=20, cluster_method='xi', xi=0.5).fit(X)\n+    assert_array_equal(clust.labels_, expected_labels)\n     # small and easy test (no clusters around other clusters)\n     # but with a clear noise data.\n     rng = np.random.RandomState(0)\n",
  "scikit-learn__scikit-learn-14710": "diff --git a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\nindex 7e8bccd..6b08c85 100644\n--- a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n@@ -404,7 +404,7 @@ def test_infinite_values_missing_values():\n     # High level test making sure that inf and nan values are properly handled\n     # when both are present. This is similar to\n     # test_split_on_nan_with_infinite_values() in test_grower.py, though we\n-    # cannot check the predicitons for binned values here.\n+    # cannot check the predictions for binned values here.\n \n     X = np.asarray([-np.inf, 0, 1, np.inf, np.nan]).reshape(-1, 1)\n     y_isnan = np.isnan(X.ravel())\n@@ -414,4 +414,33 @@ def test_infinite_values_missing_values():\n                                                learning_rate=1, max_depth=2)\n \n     assert stump_clf.fit(X, y_isinf).score(X, y_isinf) == 1\n-    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+\n+@pytest.mark.parametrize(\"scoring\", [None, 'loss'])\n+def test_string_target_early_stopping(scoring):\n+    # Regression tests for when targets need to be encoded before\n+    # computing the score when early stopping is enabled\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10, scoring=scoring)\n+    gbrt.fit(X, y)\n+\n+def test_string_target_early_stopping_custom_scorer():\n+    # Ensure early stopping works with a custom scorer and string targets\n+    from sklearn.metrics import make_scorer, accuracy_score\n+    custom_scorer = make_scorer(accuracy_score)\n+    \n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10, scoring=custom_scorer)\n+    gbrt.fit(X, y)\n+\n+def test_early_stopping_without_string_targets():\n+    # Test early stopping with integer targets to ensure it still works correctly\n+    rng = np.random.RandomState(42)\n+    X = rng.randn(100, 10)\n+    y = np.array([0] * 50 + [1] * 50)\n+    gbrt = HistGradientBoostingClassifier(n_iter_no_change=10)\n+    gbrt.fit(X, y)\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..662e171 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,26 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+import numpy as np\n+import scipy.sparse as sp\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty_fix():\n+    # Regression test for handling ZeroDivisionError in sparse fit\n+    X_train = sp.csr_matrix([[0, 1, 0, 0],\n+                             [0, 0, 0, 1],\n+                             [0, 0, 1, 0],\n+                             [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear', C=316.227766017, max_iter=15000, tol=0.001)\n+    # This should no longer raise a ZeroDivisionError\n+    model.fit(X_train, y_train)\n+    \n+    # Check if the fix ensures the model can handle this situation correctly\n+    # Even if no support vectors are chosen, should not throw or have dual_coef_\n+    assert model.support_.size == 0\n+    assert model.support_vectors_.shape[0] == 0\n+    assert model.dual_coef_.shape[1] == 0\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..9b26f8c 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -97,6 +97,33 @@ def test_strip_accents():\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # single precomposed and decomposed form comparison\n+    s1 = chr(241)  # \u00f1 in precomposed form\n+    s2 = chr(110) + chr(771)  # n + ~ in decomposed NFKD form\n+    expected = \"n\"\n+    assert strip_accents_unicode(s1) == expected\n+    assert strip_accents_unicode(s2) == expected\n+\n+    # mixed composed and decomposed form\n+    a = \"\u00f1\\u0300\"\n+    expected = \"n\"\n+    assert strip_accents_unicode(a) == expected\n+\n \n def test_to_ascii():\n     # check some classical latin accentuated symbols\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..fca926b 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1524,9 +1524,34 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     assert_allclose(X_imputed[:, 1], 0)\n \n \n-@pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n-def test_knn_imputer_keep_empty_features(keep_empty_features):\n-    \"\"\"Check the behaviour of `keep_empty_features` for `KNNImputer`.\"\"\"\n+@pytest.mark.parametrize(\"fill_value\", [10, 0, -1, np.nan])\n+def test_iterative_imputer_fill_value_with_constant_strategy(fill_value):\n+    \"\"\"Test IterativeImputer with `initial_strategy` set to 'constant' and custom `fill_value`.\"\"\"\n+    X = np.array([\n+        [np.nan, 2, 3],\n+        [4, np.nan, 5],\n+        [6, 7, np.nan],\n+        [8, 9, 0]\n+    ])\n+    \n+    imputer = IterativeImputer(\n+        missing_values=np.nan,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+        random_state=0\n+    )\n+    \n+    X_imputed = imputer.fit_transform(X)\n+    \n+    expected = np.array([\n+        [fill_value, 2, 3],\n+        [4, fill_value, 5],\n+        [6, 7, fill_value],\n+        [8, 9, 0]\n+    ])\n+    \n+    assert_array_equal(X_imputed, expected)\n     X = np.array([[1, np.nan, 2], [3, np.nan, np.nan]])\n \n     imputer = KNNImputer(keep_empty_features=keep_empty_features)\n",
  "scikit-learn__scikit-learn-25931": "",
  "scikit-learn__scikit-learn-25973": "diff --git a/sklearn/feature_selection/tests/test_sequential.py b/sklearn/feature_selection/tests/test_sequential.py\nindex 42e1fbb..5f1f295 100644\n--- a/sklearn/feature_selection/tests/test_sequential.py\n+++ b/sklearn/feature_selection/tests/test_sequential.py\n@@ -302,7 +302,35 @@ def test_backward_neg_tol():\n     X, y = make_regression(n_features=10, random_state=0)\n     lr = LinearRegression()\n     initial_score = lr.fit(X, y).score(X, y)\n+from sklearn.datasets import make_classification\n+from sklearn.feature_selection import SequentialFeatureSelector\n+from sklearn.neighbors import KNeighborsClassifier\n+from sklearn.model_selection import LeaveOneGroupOut\n+import numpy as np\n+\n+def test_sequential_feature_selector_with_custom_cv_splits():\n+    # Create a mock dataset\n+    X, y = make_classification(random_state=0)\n+\n+    # Define the group splits\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2:] = 1\n+\n+    # Use LeaveOneGroupOut for cross-validation\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+\n+    # Define the classifier\n+    knc = KNeighborsClassifier(n_neighbors=5)\n+\n+    # Create and fit the SequentialFeatureSelector with splits\n+    sfs = SequentialFeatureSelector(knc, n_features_to_select=5, cv=splits)\n+    \n+    # Fit the selector to the data\n+    sfs.fit(X, y)\n \n+    # Check that the fitting process completes without error\n+    assert sfs.n_features_to_select_ == 5\n     sfs = SequentialFeatureSelector(\n         lr,\n         n_features_to_select=\"auto\",\n@@ -311,6 +339,34 @@ def test_backward_neg_tol():\n     )\n     Xr = sfs.fit_transform(X, y)\n     new_score = lr.fit(Xr, y).score(Xr, y)\n+from sklearn.datasets import make_classification\n+from sklearn.feature_selection import SequentialFeatureSelector\n+from sklearn.neighbors import KNeighborsClassifier\n+from sklearn.model_selection import LeaveOneGroupOut\n+import numpy as np\n+\n+def test_sequential_feature_selector_with_custom_cv_splits():\n+    # Create a mock dataset\n+    X, y = make_classification(random_state=0)\n+\n+    # Define the group splits\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2:] = 1\n+\n+    # Use LeaveOneGroupOut for cross-validation\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+\n+    # Define the classifier\n+    knc = KNeighborsClassifier(n_neighbors=5)\n+\n+    # Create and fit the SequentialFeatureSelector with splits\n+    sfs = SequentialFeatureSelector(knc, n_features_to_select=5, cv=splits)\n+    \n+    # Fit the selector to the data\n+    sfs.fit(X, y)\n \n+    # Check that the fitting process completes without error\n+    assert sfs.n_features_to_select_ == 5\n     assert 0 < sfs.get_support().sum() < X.shape[1]\n-    assert new_score < initial_score\n+    assert new_score < initial_score\n",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..5477c3a 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,6 +22,10 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+import pytest\n+import pandas as pd\n+import numpy as np\n+from sklearn.feature_selection import VarianceThreshold\n \n \n class Trans(TransformerMixin, BaseEstimator):\n@@ -2184,4 +2188,65 @@ def test_raise_error_if_index_not_aligned():\n         \" Indexes that do not match.\"\n     )\n     with pytest.raises(ValueError, match=msg):\n-        ct.fit_transform(X)\n+        ct.fit_transform(X)\n+\n+def test_remainder_set_output():\n+    \"\"\"Check that the output is set for the remainder.\n+\n+    Non-regression test for #26306.\n+    \"\"\"\n+    \n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n+def test_remainder_set_output_with_different_types():\n+    \"\"\"Check that setting output applies correctly with mixed column types in remainder.\"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1.0, 2.0, 3.0]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n+\n+def test_set_output_with_remainder_transformer():\n+    \"\"\"Test set_output functionality when the remainder is a full transformer with mixed data.\"\"\"\n+\n+    df = pd.DataFrame({\"a\": [True, False, True], \"b\": [1, 2, 3], \"c\": [4.0, 5.0, 6.0]})\n+\n+    ct = make_column_transformer(\n+        (VarianceThreshold(), make_column_selector(dtype_include=bool)),\n+        (VarianceThreshold(), make_column_selector(dtype_include=int)),\n+        remainder=VarianceThreshold(),\n+        verbose_feature_names_out=False,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+\n+    out = ct.fit_transform(df)\n+    pd.testing.assert_frame_equal(out, df)\n+\n+    ct.set_output(transform=\"default\")\n+    out = ct.fit_transform(df)\n+    assert isinstance(out, np.ndarray)\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..4ce3c37 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,8 +945,42 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+from sklearn.cluster import KMeans\n+from sklearn.datasets import make_blobs\n \n-def test_minibatch_kmeans_partial_fit_int_data():\n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+    \n+    # Basic test for consistency on random data\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n+\n+def test_kmeans_inertia_equal_in_diff_n_jobs():\n+    # Using make_blobs for synthetic data creation\n+    X, _ = make_blobs(n_samples=1000, centers=5, random_state=42)\n+    \n+    # Check inertia for different n_jobs\n+    inertia_1 = KMeans(n_clusters=5, random_state=42, n_jobs=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=5, random_state=42, n_jobs=2).fit(X).inertia_\n+    assert_almost_equal(inertia_1, inertia_2)\n+\n+def test_kmeans_labels_consistency():\n+    # Test with different random states and dataset\n+    X, _ = make_blobs(n_samples=500, centers=3, random_state=10)\n+    for random_state in range(3):\n+        result_1 = KMeans(n_clusters=3, random_state=random_state, n_jobs=1).fit(X).labels_\n+        result_2 = KMeans(n_clusters=3, random_state=random_state, n_jobs=3).fit(X).labels_\n+        assert_array_equal(result_1, result_2)\n+\n+def test_kmeans_clustering_with_higher_features():\n+    # High dimensional data\n+    X, _ = make_blobs(n_samples=100, centers=2, n_features=100, random_state=0)\n+    inertia_1 = KMeans(n_clusters=2, random_state=0, n_jobs=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=2, random_state=0, n_jobs=4).fit(X).inertia_\n+    assert_almost_equal(inertia_1, inertia_2)\n     # Issue GH #14314\n     X = np.array([[-1], [1]], dtype=np.int)\n     km = MiniBatchKMeans(n_clusters=2)\n",
  "sphinx-doc__sphinx-10323": "diff --git a/tests/test_directive_code.py b/tests/test_directive_code.py\nindex 949c70e..ba0bad1 100644\n--- a/tests/test_directive_code.py\n+++ b/tests/test_directive_code.py\n@@ -1,16 +1,62 @@\n-\"\"\"Test the code-block directive.\"\"\"\n \n+\"\"\"Test the code-block directive.\"\"\"\n+@pytest.mark.xfail(reason=\"The prepend option should preserve indentation.\")\n+def test_LiteralIncludeReader_prepend_with_indent(literal_inc_path):\n+    # Test the prepend option with specific indentation\n+    options = {'lines': '9-11', 'dedent': None, 'prepend': '    return'}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"    return\\n\"\n+                       \"def baz():\\n\"\n+                       \"    pass\\n\"\n+                       \"\\n\")\n import os\n-\n+@pytest.mark.xfail(reason=\"The prepend option should preserve indentation.\")\n+def test_LiteralIncludeReader_prepend_with_indent(literal_inc_path):\n+    # Test the prepend option with specific indentation\n+    options = {'lines': '9-11', 'dedent': None, 'prepend': '    return'}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"    return\\n\"\n+                       \"def baz():\\n\"\n+                       \"    pass\\n\"\n+                       \"\\n\")\n import pytest\n from docutils import nodes\n-\n+@pytest.mark.xfail(reason=\"The prepend option should preserve indentation.\")\n+def test_LiteralIncludeReader_prepend_with_indent(literal_inc_path):\n+    # Test the prepend option with specific indentation\n+    options = {'lines': '9-11', 'dedent': None, 'prepend': '    return'}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"    return\\n\"\n+                       \"def baz():\\n\"\n+                       \"    pass\\n\"\n+                       \"\\n\")\n from sphinx.config import Config\n from sphinx.directives.code import LiteralIncludeReader\n from sphinx.testing.util import etree_parse\n-\n+@pytest.mark.xfail(reason=\"The prepend option should preserve indentation.\")\n+def test_LiteralIncludeReader_prepend_with_indent(literal_inc_path):\n+    # Test the prepend option with specific indentation\n+    options = {'lines': '9-11', 'dedent': None, 'prepend': '    return'}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"    return\\n\"\n+                       \"def baz():\\n\"\n+                       \"    pass\\n\"\n+                       \"\\n\")\n DUMMY_CONFIG = Config({}, {})\n-\n+@pytest.mark.xfail(reason=\"The prepend option should preserve indentation.\")\n+def test_LiteralIncludeReader_prepend_with_indent(literal_inc_path):\n+    # Test the prepend option with specific indentation\n+    options = {'lines': '9-11', 'dedent': None, 'prepend': '    return'}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"    return\\n\"\n+                       \"def baz():\\n\"\n+                       \"    pass\\n\"\n+                       \"\\n\")\n \n @pytest.fixture(scope='module')\n def testroot(rootdir):\n@@ -241,7 +287,16 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n     assert content == (\"f baz():\\n\"\n                        \"  pass\\n\"\n                        \"\\n\")\n-\n+@pytest.mark.xfail(reason=\"The prepend option should preserve indentation.\")\n+def test_LiteralIncludeReader_prepend_with_indent(literal_inc_path):\n+    # Test the prepend option with specific indentation\n+    options = {'lines': '9-11', 'dedent': None, 'prepend': '    return'}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"    return\\n\"\n+                       \"def baz():\\n\"\n+                       \"    pass\\n\"\n+                       \"\\n\")\n     # dedent: None\n     options = {'lines': '9-11', 'dedent': None}\n     reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n@@ -249,7 +304,16 @@ def test_LiteralIncludeReader_dedent(literal_inc_path):\n     assert content == (\"def baz():\\n\"\n                        \"    pass\\n\"\n                        \"\\n\")\n-\n+@pytest.mark.xfail(reason=\"The prepend option should preserve indentation.\")\n+def test_LiteralIncludeReader_prepend_with_indent(literal_inc_path):\n+    # Test the prepend option with specific indentation\n+    options = {'lines': '9-11', 'dedent': None, 'prepend': '    return'}\n+    reader = LiteralIncludeReader(literal_inc_path, options, DUMMY_CONFIG)\n+    content, lines = reader.read()\n+    assert content == (\"    return\\n\"\n+                       \"def baz():\\n\"\n+                       \"    pass\\n\"\n+                       \"\\n\")\n \n @pytest.mark.xfail(os.name != 'posix', reason=\"Not working on windows\")\n def test_LiteralIncludeReader_tabwidth(testroot):\n",
  "sphinx-doc__sphinx-10449": "",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..57a6fd3 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,23 @@\n+\n+def test_catalog_no_duplicate_locations():\n+    \"\"\"Test that the Catalog properly handles duplicate locations.\"\"\"\n+    catalog = Catalog()\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))  # Duplicate\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 2))\n+    catalog.add('hello', MsgOrigin('/another/path/to/file', 3))\n+    catalog.add('hello', MsgOrigin('/path/to/filename', 1))  # Duplicate\n+    \n+    assert len(list(catalog)) == 1  # We should have only one message\n+    msg = list(catalog)[0]\n+    assert msg.text == 'hello'\n+    # Ensure no duplicate locations appear\n+    assert msg.locations == [\n+        ('/path/to/filename', 1),\n+        ('/path/to/filename', 2),\n+        ('/another/path/to/file', 3)\n+    ]\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -9,6 +29,7 @@ from subprocess import PIPE, CalledProcessError\n import pytest\n \n from sphinx.util.osutil import cd\n+from sphinx.builders.gettext import Catalog, MsgOrigin\n \n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n",
  "sphinx-doc__sphinx-10673": "diff --git a/tests/test_environment_toctree.py b/tests/test_environment_toctree.py\nindex d3bf6a2..3177dcc 100644\n--- a/tests/test_environment_toctree.py\n+++ b/tests/test_environment_toctree.py\n@@ -343,6 +343,17 @@ def test_get_toctree_for_includehidden(app):\n     assert_node(toctree[1][0][1][2][0][0], reference, refuri=\"foo#foo-2\", secnumber=[1, 3])\n     assert_node(toctree[1][1][0][0], reference, refuri=\"bar\", secnumber=[2])\n     assert_node(toctree[1][2][0][0], reference, refuri=\"http://sphinx-doc.org/\")\n-\n     assert_node(toctree[2],\n-                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+                [bullet_list, list_item, compact_paragraph, reference, \"baz\"])\n+\n+@pytest.mark.sphinx('xml', testroot='toctree-index')\n+def test_toctree_with_special_entries(app):\n+    app.build()  # Build the documentation\n+    toctree = app.env.tocs['index']  # Get the toctree for the index document\n+\n+    # Check that a toctree node exists with entries 'genindex', 'modindex', 'search'\n+    assert_node(toctree[1][1][0], addnodes.compact_paragraph, [addnodes.toctree])\n+    assert_node(toctree[1][1][0][0], addnodes.toctree,\n+                caption=\"Indices\", glob=False, hidden=False,\n+                titlesonly=False, maxdepth=-1, numbered=0,\n+                entries=[(None, 'genindex'), (None, 'modindex'), (None, 'search')])\n",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..664900a 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -147,6 +147,34 @@ def test_glossary(app):\n     assert (\"term3\", \"term3\", \"term\", \"index\", \"term-term3\", -1) in objects\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n+def test_glossary_case_sensitivity(app):\n+    text = (\".. glossary::\\n\"\n+            \"\\n\"\n+            \"   MySQL\\n\"\n+            \"       A popular open-source relational database management system.\\n\"\n+            \"\\n\"\n+            \"   mysql\\n\"\n+            \"       Refers to the command-line client that comes with MySQL Server.\\n\")\n+\n+    # doctree\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        [glossary, definition_list, \n+         ([definition_list_item, ([term, (\"MySQL\", index)],\n+                                  definition)],\n+          [definition_list_item, ([term, (\"mysql\", index)],\n+                                  definition)])],\n+    ))\n+    assert_node(doctree[0][0][0][0][1],\n+                entries=[(\"single\", \"MySQL\", \"term-MySQL\", \"main\", None)])\n+    assert_node(doctree[0][0][1][0][1],\n+                entries=[(\"single\", \"mysql\", \"term-mysql\", \"main\", None)])\n+\n+    # index\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects\n+\n \n def test_glossary_warning(app, status, warning):\n     # empty line between terms\n",
  "sphinx-doc__sphinx-7757": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex b3053d1..4608ff6 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -331,6 +331,22 @@ def test_signature_from_str_kwonly_args():\n     assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n     assert sig.parameters['b'].default == Parameter.empty\n \n+@pytest.mark.skipif(sys.version_info < (3, 8),\n+                    reason='python-3.8 or above is required')\n+def test_signature_from_str_positional_only_with_default():\n+    sig = inspect.signature_from_str('(a, b=0, /, c=1)')\n+    assert list(sig.parameters.keys()) == ['a', 'b', 'c']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].kind == Parameter.POSITIONAL_ONLY\n+    assert sig.parameters['b'].default == '0'\n+    assert sig.parameters['c'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['c'].default == '1'\n+    assert list(sig.parameters.keys()) == ['a', 'b']\n+    assert sig.parameters['a'].kind == Parameter.POSITIONAL_OR_KEYWORD\n+    assert sig.parameters['a'].default == Parameter.empty\n+    assert sig.parameters['b'].kind == Parameter.KEYWORD_ONLY\n+    assert sig.parameters['b'].default == Parameter.empty\n+\n \n @pytest.mark.skipif(sys.version_info < (3, 8),\n                     reason='python-3.8 or above is required')\n",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..bb17503 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -32,6 +33,8 @@ def test_MockModule():\n     assert repr(mock) == 'mocked_module'\n \n \n+from typing import TypeVar  # Import TypeVar needed for generic class tests\n+\n def test_MockObject():\n     mock = _MockObject()\n     assert isinstance(mock.some_attr, _MockObject)\n@@ -52,7 +55,15 @@ def test_MockObject():\n     assert isinstance(obj.other_method(), SubClass)\n \n \n-def test_mock():\n+def test_MockObject_with_generic():\n+    T = TypeVar('T')\n+\n+    class GenericSubClass(mock.SomeClass[T]):\n+        \"\"\"docstring of GenericSubClass\"\"\"\n+\n+    obj_generic = GenericSubClass()\n+    assert GenericSubClass.__doc__ == \"docstring of GenericSubClass\"\n+    assert isinstance(obj_generic, GenericSubClass)\n     modname = 'sphinx.unknown'\n     submodule = modname + '.submodule'\n     assert modname not in sys.modules\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..1235420 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -165,11 +166,33 @@ class SkipMemberTest(TestCase):\n                         SampleClass.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_class_init_decorated_doc(self):\n+        class SampleInitDecoratedClass:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"SampleInitDecoratedClass.__init__.DOCSTRING\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__',\n+                        SampleInitDecoratedClass.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_class_special_undoc(self):\n         self.assertSkip('class', '__special_undoc__',\n                         SampleClass.__special_undoc__, True,\n                         'napoleon_include_special_with_doc')\n \n+    def test_class_init_decorated_doc(self):\n+        class SampleInitDecoratedClass:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"SampleInitDecoratedClass.__init__.DOCSTRING\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__',\n+                        SampleInitDecoratedClass.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_private_doc(self):\n         self.assertSkip('exception', '_private_doc',\n                         SampleError._private_doc, False,\n@@ -185,6 +208,17 @@ class SkipMemberTest(TestCase):\n                         SampleError.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_class_init_decorated_doc(self):\n+        class SampleInitDecoratedClass:\n+            @simple_decorator\n+            def __init__(self):\n+                \"\"\"SampleInitDecoratedClass.__init__.DOCSTRING\"\"\"\n+                pass\n+\n+        self.assertSkip('class', '__init__',\n+                        SampleInitDecoratedClass.__init__, False,\n+                        'napoleon_include_init_with_doc')\n+\n     def test_exception_special_undoc(self):\n         self.assertSkip('exception', '__special_undoc__',\n                         SampleError.__special_undoc__, True,\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..8412961 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -32,9 +32,20 @@ def test_defaults(app, status, warning):\n     assert \"Not Found for url: https://www.google.com/image2.png\" in content\n     assert len(content.splitlines()) == 5\n \n-\n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n-def test_defaults_json(app, status, warning):\n+def test_local_links(app, status, warning):\n+    app.builder.build_all()\n+\n+    output_txt = (app.outdir / 'output.txt').read_text()\n+    assert \"ok        conf.py\" in output_txt  # Assuming conf.py is a valid local file\n+    assert \"broken    path/to/notfound\" in output_txt  # Assuming path/to/notfound does not exist\n+\n+    output_json = (app.outdir / 'output.json').read_text()\n+    rows = [json.loads(x) for x in output_json.splitlines()]\n+    rowsby = {row[\"uri\"]: row for row in rows}\n+    \n+    assert rowsby[\"conf.py\"]['status'] == 'local'\n+    assert rowsby[\"path/to/notfound\"]['status'] == 'broken'\n     app.builder.build_all()\n \n     assert (app.outdir / 'output.json').exists()\n",
  "sphinx-doc__sphinx-8035": "diff --git a/tests/test_ext_autodoc_private_members.py b/tests/test_ext_autodoc_private_members.py\nindex ad1d950..f009809 100644\n--- a/tests/test_ext_autodoc_private_members.py\n+++ b/tests/test_ext_autodoc_private_members.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_private_members\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -59,4 +60,37 @@ def test_private_field_and_private_members(app):\n         '',\n         '   :meta private:',\n         '',\n+    ]\n+\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"_specific_private_function\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n+        '',\n+        '.. py:function:: _specific_private_function(name)',\n+        '   :module: target.private',\n+        '',\n+        '   specific_private_function is a docstring().',\n+        '',\n+        '   :meta public:',\n+        '',\n+    ]\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc')\n+def test_no_specific_private_members(app):\n+    app.config.autoclass_content = 'class'\n+    options = {\"members\": None,\n+               \"private-members\": \"non_existent_private_member\"}\n+    actual = do_autodoc(app, 'module', 'target.private', options)\n+    assert list(actual) == [\n+        '',\n+        '.. py:module:: target.private',\n+        '',\n     ]\n",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..ba4e9e9 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1285,7 +1285,42 @@ def test_image_glob_intl_using_figure_language_filename(app):\n     assert_node(doctree[0][3][0], nodes.image, uri='subdir/svgimg.*',\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n+from babel.messages.catalog import Catalog\n+from sphinx import locale\n+import os\n \n-\n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+import pytest\n+from babel.messages import pofile\n+\n+@pytest.mark.sphinx('html', testroot='basic', confoverrides={'language': 'da'})\n+def test_danish_translation_override(make_app, app_params, sphinx_test_tempdir):\n+    try:\n+        # clear translators cache to ensure fresh state\n+        locale.translators.clear()\n+\n+        # prepare message catalog (.po) with Danish translation\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locales' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        assert (locale_dir / 'sphinx.mo').exists()  # ensure .mo file is created\n+\n+        # verify the gettext function returns the updated entries\n+        assert app.translator.gettext('Fig. %s') == 'Foobar %s'\n+        assert app.translator.gettext('Listing %s') == 'Whatever %s'\n+\n+        # Build the project and check the output HTML for proper translations\n+        app.build()\n+        content = (app.outdir / 'index.html').read_text()\n+        assert 'Foobar ' in content  # Confirm figure translation\n+        assert 'Whatever ' in content  # Confirm listing translation\n+    finally:\n+        locale.translators.clear()\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 7842f56..f4cf9ab 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -97,6 +97,43 @@ def test_defaults_json(app, status, warning):\n                        'https://www.google.com/image2.png',\n                        'path/to/notfound']\n                    })\n+@pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True, confoverrides={'linkcheck_anchors': True})\n+def test_http_error_reporting(app, status, warning):\n+    # Create a local HTTP server that returns a 404 error for testing\n+    server_thread = HttpServerThread(NotFoundHandler, daemon=True)\n+    server_thread.start()\n+    try:\n+        app.builder.build_all()\n+    finally:\n+        server_thread.terminate()\n+    \n+    content = (app.outdir / 'output.txt').read_text()\n+\n+    # Check that the output reports the 404 error, not just that the anchor wasn't found\n+    assert \"404 Client Error: Not Found\" in content\n+\n+\n+class HttpServerThread(threading.Thread):\n+    def __init__(self, handler, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.server = http.server.HTTPServer((\"localhost\", 7777), handler)\n+\n+    def run(self):\n+        self.server.serve_forever(poll_interval=0.01)\n+\n+    def terminate(self):\n+        self.server.shutdown()\n+        self.server.server_close()\n+        self.join()\n+\n+\n+class NotFoundHandler(http.server.BaseHTTPRequestHandler):\n+    def do_GET(self):\n+        self.send_error(404, \"Not Found\")\n+\n+import http.server\n+import threading\n+\n def test_anchors_ignored(app, status, warning):\n     app.builder.build_all()\n \n@@ -159,4 +196,11 @@ def test_linkcheck_request_headers(app, status, warning):\n                 assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n                 assert headers[\"X-Secret\"] == \"open sesami\"\n             else:\n-                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+                assert headers[\"Accept\"] == \"text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\"\n+\n+\n+\n+\n+\n+\n+\n",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..3bc6825 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -8,6 +9,42 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n+import pytest\n+import sys\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.skipif(sys.version_info < (3, 7), reason='python 3.7+ is required.')\n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    srcdir='autodoc_typehints_description_and_type_aliases',\n+                    confoverrides={'autodoc_typehints': \"description\",\n+                                   'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_typehints_with_type_aliases(app: SphinxTestApp):\n+    (app.srcdir / 'types.py').write_text(\"\"\"\n+    from typing import Any, Dict\n+    \n+    JSONObject = Dict[str, Any]\n+    \n+    def sphinx_doc(data: JSONObject) -> JSONObject:\n+        \\\"\"\"Does it work.\n+    \n+        Args:\n+            data: Does it args.\n+    \n+        Returns:\n+            Does it work in return.\n+        \\\"\"\"\n+        return {}\n+    \"\"\")\n+    \n+    app.config.extensions = ['sphinx.ext.autodoc', 'sphinx.ext.napoleon']\n+    app.build()\n+\n+    text_output = (app.outdir / 'types.txt').read_text()\n+\n+    assert 'types.sphinx_doc(data: types.JSONObject) -> types.JSONObject' in text_output\n+    assert 'Parameters\\n   data (types.JSONObject) -- Does it args.' in text_output\n+    assert 'Return type\\n   types.JSONObject' in text_output\n+\n import platform\n import sys\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..8ec683d 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -515,8 +515,22 @@ def test_dict_customtype():\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n \n+def test_object_description_enum():\n+    import enum\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    # Test that the enum value representation is as expected\n+    assert inspect.object_description(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+\n+    # Test with a function signature\n+    def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:\n+        \"\"\"Function to test how enum default values are rendered in doc.\"\"\"\n+        pass\n \n-def test_getslots():\n+    signature = inspect.signature(ugly_enum_func)\n+    assert str(signature) == \"(e: __main__.MyEnum = MyEnum.ValueA) -> None\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..ceb538c 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -12,7 +12,7 @@ import time\n from io import StringIO\n \n import pytest\n-\n+import sys\n from sphinx import application\n from sphinx.cmd import quickstart as qs\n from sphinx.util.console import coloron, nocolor\n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..6a2d059 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -846,8 +846,30 @@ def test_pyproperty(app):\n     assert 'Class.prop2' in domain.objects\n     assert domain.objects['Class.prop2'] == ('index', 'Class.prop2', 'property', False)\n \n-\n-def test_pydecorator_signature(app):\n+def test_pycrossref_property_type_annotation(app):\n+    text = (\".. py:class:: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: x\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: y\\n\"\n+            \"      :type: int\\n\"\n+            \"\\n\"\n+            \".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    # Verify if 'Point' in Square.start attribute's type is cross-referenced\n+    assert_node(doctree[1][1][0][2], pending_xref, **{\"py:class\": \"Point\"})\n+    \n+    # Verify if 'Point' in Square.end property's type is cross-referenced\n+    assert_node(doctree[1][1][1][3], pending_xref, **{\"py:class\": \"Point\"})\n     text = \".. py:decorator:: deco\"\n     domain = app.env.get_domain('py')\n     doctree = restructuredtext.parse(app, text)\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..b737f98 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])  # Removed parens for property\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 6ac780b..8fc20de 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -51,7 +51,7 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n                               'but it is not loaded.'), extname)\n             continue\n \n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        if extension.version == 'unknown version' or Version(requirement) > Version(extension.version):\n             raise VersionRequirementError(__('This project needs the extension %s at least in '\n                                              'version %s and therefore cannot be built with '\n                                              'the loaded version (%s).') %\n",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..9d02fa4 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -236,6 +236,44 @@ def test_Point2D():\n     assert p2.distance(p3) == sqrt(17)/2\n \n \n+def test_issue_11617():\n+    # Original test\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+    # Additional tests\n+    # Test distance from 3D to 3D point\n+    p3 = Point3D(1, 0, 2)\n+    p4 = Point3D(2, 0, 0)\n+    assert p3.distance(p4) == sqrt(5)\n+\n+    # Test distance from 2D to 3D point\n+    p5 = Point2D(1, 0)\n+    p6 = Point3D(2, 0, 2)\n+    assert p5.distance(p6) == sqrt(5)\n+\n+    # Test distance from 2D to 2D point\n+    p7 = Point2D(1, 0)\n+    p8 = Point2D(4, 3)\n+    assert p7.distance(p8) == 5\n+\n+    # Test distance from 3D to 3D with equal points (check for zero distance)\n+    p9 = Point3D(1, 1, 1)\n+    assert p9.distance(p9) == 0\n+\n+    # Test distance from 2D to 2D with equal points (check for zero distance)\n+    p10 = Point2D(1, 1)\n+    assert p10.distance(p10) == 0\n+\n+    # Test point with mixed coordinates (negative and positive)\n+    p11 = Point3D(-1, 2, 3)\n+    p12 = Point3D(-2, -1, -4)\n+    assert p11.distance(p12) == sqrt(67)\n+\n+from sympy.geometry import Point, Point2D, Point3D\n+from sympy import sqrt\n+\n def test_issue_9214():\n     p1 = Point3D(4, -2, 6)\n     p2 = Point3D(1, 2, 3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..5e5267a 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,9 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n@@ -752,7 +755,24 @@ def test_issue_2790():\n     assert lambdify(x, x + 1, dummify=False)(1) == 2\n \n \n-def test_ITE():\n+def test_issue_evalf_recursion():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    \n+    # Test evalf on individual implemented functions\n+    assert f(2).evalf() == Float(4)\n+    assert g(2).evalf() == Float(4)\n+    \n+    # Test evalf on composition to ensure recursion works\n+    assert f(g(2)).evalf() == Float(16)\n+\n+    # Additional nested compositions\n+    assert f(f(g(2))).evalf() == Float(256)\n+    assert g(f(g(2))).evalf() == Float(32)\n+    \n+    # Check when inputs are larger numbers\n+    assert f(g(10)).evalf() == Float(400)\n+    assert f(f(g(10))).evalf() == Float(160000)\n     assert lambdify((x, y, z), ITE(x, y, z))(True, 5, 3) == 5\n     assert lambdify((x, y, z), ITE(x, y, z))(False, 5, 3) == 3\n \n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..d7f6b71 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -90,8 +90,24 @@ def test_Identity_doit():\n     assert Inn.doit() == Identity(2*n)\n     assert isinstance(Inn.doit().rows, Mul)\n \n+def test_identity_matrix_sum():\n+    from sympy import Sum, MatrixSymbol, Identity\n+    from sympy import symbols\n \n-def test_addition():\n+    # Define symbols\n+    n = symbols('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+\n+    # Create Identity matrix\n+    In = Identity(n)\n+\n+    # Verify that the sum of all elements of an identity matrix equals 'n'\n+    total_sum = Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit()\n+    assert total_sum == n, f\"Expected sum to be {n}, got {total_sum}\"\n+    \n+    # Additional test: for specific value of n, ensuring sum is correct\n+    total_sum_3 = Sum(Sum(In[i, j], (i, 0, 2)), (j, 0, 2)).doit()\n+    assert total_sum_3 == 3, f\"Expected sum for n=3 to be 3, got {total_sum_3}\"\n     A = MatrixSymbol('A', n, m)\n     B = MatrixSymbol('B', n, m)\n \n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..738ba3d 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -354,6 +354,20 @@ def test_args():\n     # but this is ok because cycles imply that only those listed moved\n     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])\n \n+    # Additional test cases for non-disjoint cycles to verify issue is resolved\n+    # Should return identity permutation\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])\n+    \n+    # Non-disjoint cycles, applied left-to-right\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])\n+    assert Permutation([[0, 2], [0, 1]]) == Permutation([1, 0, 2])\n+    assert Permutation([[1, 2], [1, 2]]) == Permutation([0, 2, 1])\n+    assert Permutation([[0, 1], [0, 2], [0, 3]]) == Permutation([3, 2, 0, 1])\n+    \n+    # Testing with larger set and overlapping elements\n+    assert Permutation([[0, 1, 2], [1, 2, 3]]) == Permutation([1, 2, 3, 0])\n+    assert Permutation([[1, 2, 3], [2, 3, 4]]) == Permutation([0, 3, 4, 2, 1])\n+\n \n def test_Cycle():\n     assert str(Cycle()) == '()'\n",
  "sympy__sympy-13031": "",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..1a577ac 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -170,6 +170,35 @@ def test_evalf_ramanujan():\n \n # Input that for various reasons have failed at some point\n \n+from sympy import NS, Max, Mul, Symbol\n+\n+def test_issue_13076():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Original test case to verify the issue is resolved\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+\n+    # Additional test cases for the same scenario with varying inputs\n+    result = Mul(Max(0, y), x, evaluate=False).evalf().evalf()\n+    assert result == 'x*Max(0, y)'\n+\n+    z = Symbol('z', real=True)\n+    # Testing with more complex expressions\n+    expr = Mul(Max(0, y), x, z, evaluate=False)\n+    \n+    # Assuming the expected format of the expression string after evalf\n+    expected_str = 'x*Max(0, y)*z'\n+    assert NS(expr.evalf()) == expected_str\n+    assert NS(expr.evalf()) == expr.evalf().evalf()\n+\n+    # Testing when Max has constant numbers\n+    const_expr = Mul(Max(3, 5), x, evaluate=False).evalf()\n+    assert NS(const_expr) == '5*x'\n+\n+    # Testing nested Max\n+    nested_expr = Mul(Max(Max(0, y), x), z, evaluate=False).evalf()\n+    assert NS(nested_expr) == f'Max(Max(0, y), x)*z'\n+\n \n def test_evalf_bugs():\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..78b0b94 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -272,8 +272,26 @@ def test_coth():\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n \n-\n-def test_coth_series():\n+def test_issue_coth_log_tan_substitution():\n+    from sympy import coth, log, tan, I, pi\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+\n+    assert e.subs(x, 2) == coth(log(tan(2)))\n+    assert e.subs(x, 3) == coth(log(tan(3)))\n+    assert e.subs(x, 5) == coth(log(tan(5)))\n+    assert e.subs(x, 6) == coth(log(tan(6)))\n+    assert e.subs(x, 8) == coth(log(tan(8)))\n+    assert e.subs(x, 9) == coth(log(tan(9)))\n+    assert e.subs(x, 11) == coth(log(tan(11)))\n+    assert e.subs(x, 12) == coth(log(tan(12)))\n+    assert e.subs(x, 13) == coth(log(tan(13)))\n+    assert e.subs(x, 15) == coth(log(tan(15)))\n+    assert e.subs(x, 18) == coth(log(tan(18)))\n+\n+    # Original test patch assertions\n+    assert coth(log(tan(2))) == coth(log(-tan(2)))\n+    assert coth(1 + I*pi/2) == tanh(1)\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13615": "",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..d32bdcc 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,30 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_issue_13643():\n+    \"\"\"Test for issue #13643 regarding Matrix.col_insert.\"\"\"\n+    from sympy import Matrix, eye, ones\n+\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+    expected = Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert M.col_insert(3, V) == expected\n+\n+    # Additional cases\n+    # Insert at beginning\n+    expected_begin = Matrix.hstack(V, M)\n+    assert M.col_insert(0, V) == expected_begin\n+\n+    # Insert at end\n+    expected_end = Matrix.hstack(M, V)\n+    assert M.col_insert(6, V) == expected_end\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..a099876 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -665,8 +665,16 @@ def test_Poly_sub():\n def test_Poly_mul():\n     assert Poly(0, x).mul(Poly(0, x)) == Poly(0, x)\n     assert Poly(0, x) * Poly(0, x) == Poly(0, x)\n+from sympy import Poly, Symbol, S\n \n-    assert Poly(2, x).mul(Poly(4, x)) == Poly(8, x)\n+x = Symbol('x')\n+\n+def test_issue_13079():\n+    assert Poly(x)*x == Poly(x**2, x, domain='ZZ')\n+    assert x*Poly(x) == Poly(x**2, x, domain='ZZ')\n+    assert -2*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2)*Poly(x) == Poly(-2*x, x, domain='ZZ')\n+    assert Poly(x)*S(-2) == Poly(-2*x, x, domain='ZZ')\n     assert Poly(2, x, y) * Poly(4, x) == Poly(8, x, y)\n     assert Poly(4, x).mul(Poly(2, x, y)) == Poly(8, x, y)\n     assert Poly(4, x, y) * Poly(2, x, y) == Poly(8, x, y)\n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..6d6731a 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,21 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_custom_mul_symbol():\n+    # Test the original specific case from the issue\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    \n+    # Test with different expressions and the custom mul_symbol\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5\\,3^{x}\"\n+    assert latex(x*y*z, mul_symbol='\\\\,') == r\"x\\,y\\,z\"\n+    assert latex(2*x**3*y**2, mul_symbol='\\\\,') == r\"2\\,x^{3}\\,y^{2}\"\n+    \n+    # Test with existing integral functionality\n+    assert latex(Integral(2*x**2*y, x), mul_symbol='\\\\,') == r\"\\int 2\\,x^{2}\\,y\\,dx\"\n+\n+    # Ensure existing predefined symbols still work as expected\n+    assert latex(2*x*y, mul_symbol='times') == r\"2 \\times x \\times y\"\n+    assert latex(2*x*y, mul_symbol='dot') == r\"2 \\cdot x \\cdot y\"\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..dbb6639 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -313,9 +313,25 @@ def test_as_mutable():\n     assert zeros(0, 3).as_immutable() == ImmutableMatrix(zeros(0, 3))\n     assert zeros(3, 0).as_immutable() == ImmutableMatrix(zeros(3, 0))\n \n+from sympy import symbols, Matrix\n+from sympy.abc import a\n \n def test_determinant():\n \n+    # issue 13835 specific tests\n+    M_sym = lambda n: Matrix([[i + a*j for i in range(n)] for j in range(n)])\n+\n+    # Known cases\n+    assert M_sym(1).det() == 0\n+    assert M_sym(2).det() == -a\n+\n+    # Verify the fix for NaN and exception cases\n+    try:\n+        assert M_sym(5).det() == 0  # should not be NaN\n+        assert M_sym(6).det() == 0  # should not raise an exception\n+    except Exception as e:\n+        assert False, f\"Unexpected exception: {e}\"\n+\n     for M in [Matrix(), Matrix([[1]])]:\n         assert (\n             M.det() ==\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..6006a10 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -175,8 +175,77 @@ def test_ContinuousRV():\n     assert variance(X) == variance(Y)\n     assert P(X > 0) == P(Y > 0)\n \n+from sympy import pi, simplify, erf\n+from sympy.stats import Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse, Kumaraswamy\n+from sympy.stats import Laplace, Logistic, Nakagami, StudentT, UniformSum\n \n def test_arcsin():\n+    # Test precomputed CDF for various distributions\n+    x_val = S(1)/3\n+    # Arcsin distribution test\n+    X1 = Arcsin(\"x\", 0, 3)\n+    cdf_arcsin = cdf(X1)(1)\n+    true_cdf_arcsin = 2*asin(sqrt((1) / (3)))/pi\n+    assert tn(diff(cdf(X1)(x), x), density(X1)(x), x)\n+\n+    # Dagum distribution test\n+    X2 = Dagum(\"x\", S(1)/3, S(1)/5, 2)\n+    cdf_dagum = cdf(X2)(3)\n+    true_cdf_dagum = (1 + (3/2)**(-S(1)/3))**(-S(1)/5)\n+    assert tn(diff(cdf(X2)(x), x), density(X2)(x), x)\n+\n+    # Erlang distribution test\n+    X3 = Erlang(\"x\", 1, 1)\n+    cdf_erlang = cdf(X3)(1)\n+    true_cdf_erlang = lowergamma(1, 1)/gamma(1)\n+    assert tn(diff(cdf(X3)(x), x), density(X3)(x), x)\n+\n+    # Frechet distribution test\n+    X4 = Frechet(\"x\", S(4)/3, 1, 2)\n+    cdf_frechet = cdf(X4)(3)\n+    assert tn(diff(cdf(X4)(x), x), density(X4)(x), x)\n+\n+    # Gamma distribution test\n+    X5 = Gamma(\"x\", 0.1, 2)\n+    cdf_gamma = cdf(X5)(3)\n+    true_cdf_gamma = lowergamma(S(0.1), S(1.5)) / gamma(S(0.1))\n+    assert tn(diff(cdf(X5)(x), x), density(X5)(x), x)\n+\n+    # Gamma Inverse distribution test\n+    X6 = GammaInverse(\"x\", S(5)/7, 2)\n+    cdf_gamma_inverse = cdf(X6)(3)\n+    assert tn(diff(cdf(X6)(x), x), density(X6)(x), x)\n+\n+    # Kumaraswamy distribution test\n+    X7 = Kumaraswamy(\"x\", S(1)/123, 5)\n+    cdf_kumaraswamy = cdf(X7)(x_val)\n+    assert tn(diff(cdf(X7)(x), x), density(X7)(x), x)\n+\n+    # Laplace distribution test\n+    X8 = Laplace(\"x\", 2, 3)\n+    cdf_laplace = cdf(X8)(5)\n+    true_cdf_laplace = 0.5*(-exp(-1) + 1)\n+    assert tn(diff(cdf(X8)(x), x), density(X8)(x), x)\n+\n+    # Logistic distribution test\n+    X9 = Logistic(\"x\", 1, 0.1)\n+    cdf_logistic = cdf(X9)(2)\n+    assert tn(diff(cdf(X9)(x), x), density(X9)(x), x)\n+\n+    # Nakagami distribution test\n+    X10 = Nakagami(\"x\", S(7)/3, 1)\n+    cdf_nakagami = cdf(X10)(2)\n+    assert tn(diff(cdf(X10)(x), x), density(X10)(x), x)\n+\n+    # StudentT distribution test\n+    X11 = StudentT(\"x\", 10)\n+    cdf_student_t = cdf(X11)(2)\n+    assert tn(diff(cdf(X11)(x), x), density(X11)(x), x)\n+\n+    # UniformSum distribution test\n+    X12 = UniformSum(\"x\", 5)\n+    cdf_uniform_sum = cdf(X12)(2)\n+    assert tn(diff(cdf(X12)(x), x), density(X12)(x), x)\n     a = Symbol(\"a\", real=True)\n     b = Symbol(\"b\", real=True)\n \n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..e643b10 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -38,6 +38,11 @@ def test_tensor_product_expand():\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n \n+from sympy import symbols\n+from sympy.physics.quantum import TensorProduct as TP, tensor_product_simp, Dagger\n+from sympy.physics.paulialgebra import Pauli\n+from sympy import I, Pow  # Import additional necessary components\n+\n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n         TP(A*B, C) - TP(B*A, C)\n@@ -45,6 +50,31 @@ def test_tensor_product_commutator():\n         TP(A, B)*TP(B, C) - TP(B, C)*TP(A, B)\n \n \n+def test_tensor_product_powers():\n+    A, B, C, D = symbols('A B C D', commutative=False)\n+    x = symbols('x')\n+\n+    # Powers of symbols directly\n+    assert tensor_product_simp(TP(A, B)**x) == TP(A**x, B**x)\n+    assert tensor_product_simp(x*TP(A, B)**2) == x*TP(A**2, B**2)\n+\n+    # Combining tensor products with other tensor products\n+    assert tensor_product_simp(x*(TP(A, B)**2)*TP(C, D)) == x*TP(A**2*C, B**2*D)\n+\n+    # Subtracting powers of tensor products\n+    assert tensor_product_simp(TP(A, B) - TP(C, D)**x) == TP(A, B) - TP(C**x, D**x)\n+\n+    # Testing specific scenario given in the issue report\n+    a = symbols('a', commutative=False)\n+    t1 = TP(1, 1) * TP(1, 1)\n+    t2 = TP(1, Pauli(3)) * TP(1, Pauli(3))\n+    assert tensor_product_simp(t1) == TP(1, 1)**2\n+    assert tensor_product_simp(t2) == TP(1, Pauli(3))**2\n+\n+    # Ensure behavior with substitution\n+    assert tensor_product_simp(TP(1, 1) * TP(1, a)).subs(a, 1) == TP(1, 1)\n+    assert tensor_product_simp(TP(1, Pauli(3)) * TP(1, a)).subs(a, Pauli(3)) == TP(1, Pauli(3))**2\n+\n def test_tensor_product_simp():\n     assert tensor_product_simp(TP(A, B)*TP(B, C)) == TP(A*B, B*C)\n \n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_python.py b/sympy/printing/tests/test_python.py\nindex 73fc070..d55ded0 100644\n--- a/sympy/printing/tests/test_python.py\n+++ b/sympy/printing/tests/test_python.py\n@@ -80,6 +80,12 @@ def test_python_keyword_function_name_escaping():\n \n \n def test_python_relational():\n+    # Test case verifying issue regarding Eq symbol handling\n+    assert python(Eq(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = Eq(x, y)\"\n+    assert python(Ne(x/(y + 1), y**2)) in [\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(1 + y), y**2)\",\n+        \"x = Symbol('x')\\ny = Symbol('y')\\ne = Ne(x/(y + 1), y**2)\",\n+    ]\n     assert python(Eq(x, y)) == \"e = Eq(x, y)\"\n     assert python(Ge(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x >= y\"\n     assert python(Le(x, y)) == \"x = Symbol('x')\\ny = Symbol('y')\\ne = x <= y\"\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..34b8864 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -7,8 +7,24 @@ from sympy.utilities.pytest import raises\n Vector.simp = True\n A = ReferenceFrame('A')\n \n+from sympy.physics.vector import ReferenceFrame, Vector\n \n-def test_Vector():\n+def test_vector_zero_addition():\n+    A = ReferenceFrame('A')\n+    # Test adding 0\n+    assert A.x + 0 == A.x\n+    assert 0 + A.x == A.x\n+    \n+    # Test multiplying and then adding 0\n+    assert A.x + (0 * A.x) == A.x\n+    assert (0 * A.x) + A.x == A.x\n+    assert sum([A.x, (0 * A.x)]) == A.x\n+    assert sum([(0 * A.x), A.x]) == A.x\n+    \n+    # Test adding zero vector explicitly\n+    zero_vector = Vector([])\n+    assert A.x + zero_vector == A.x\n+    assert zero_vector + A.x == A.x\n     assert A.x != A.y\n     assert A.y != A.z\n     assert A.z != A.x\n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..38de785 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -144,6 +145,24 @@ def test_mpmath_lambda():\n            # if this succeeds, it can't be a mpmath function\n \n \n+@conserve_mpmath_dps\n+def test_mpmath_rational_conversion():\n+    mpmath.mp.dps = 50  # Set mpmath precision\n+    x = symbols('x')\n+    eqn = Eq(18, 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+\n+    # Check the Lambdified function source to ensure it uses mpmath.mpf\n+    source = inspect.getsource(f)\n+    assert 'mpmath.mpf(232)/mpmath.mpf(3)' in source\n+    assert '232/3' not in source\n+\n+    # Test the numerical solution maintains precision\n+    x0 = nsolve(eqn, Float('1.5', 64), prec=64)\n+    result = mpmath.rf(18, x0.evalf(64))\n+    expected = mpmath.mpf(77) + mpmath.mpf(1)/mpmath.mpf(3)\n+    assert abs(result - expected) < mpmath.mpf('1e-60')\n+\n @conserve_mpmath_dps\n def test_number_precision():\n     mpmath.mp.dps = 50\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..1d0592a 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -73,7 +74,9 @@ def test_ndim_array_initiation():\n \n     from sympy.abc import x\n     rank_zero_array = ImmutableDenseNDimArray(x)\n-    assert len(rank_zero_array) == 0\n+    # The issue is that len(rank_zero_array) should be 1, according to the expected correct behavior.\n+    # The rank of the array is 0-dimensional, but it contains a single scalar element.\n+    assert len(rank_zero_array) == 1\n     assert rank_zero_array.shape == ()\n     assert rank_zero_array.rank() == 0\n     assert rank_zero_array[()] == x\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..ce68455 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,24 @@\n+\n+def test_Max_Min():\n+    # Test with the Max function having two arguments\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    \n+    # Test with the Max function having more than two arguments\n+    assert mcode(Max(x, 2, y)) == \"Max[x, 2, y]\"\n+    \n+    # Test with the Min function as well\n+    assert mcode(Min(2, x)) == \"Min[2, x]\"\n+    assert mcode(Min(x, y, 5)) == \"Min[x, y, 5]\"\n+\n+    # Testing Max and Min combinations\n+    assert mcode(Max(x, y, z)*Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..0ad2be8 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,47 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_rotation_issue_1593():\n+    \"\"\"Test the fix for issue 1593 where the rotation matrix was incorrect.\"\"\"\n+    from sympy import symbols, cos, sin, pi\n+    from sympy.algebras.quaternion import Quaternion\n+    from sympy.simplify import trigsimp\n+\n+    x = symbols('x')\n+    # Test from the issue description\n+    q1 = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    expected_matrix_1 = Matrix([\n+        [1,      0,      0],\n+        [0, cos(x), -sin(x)],\n+        [0, sin(x),  cos(x)]\n+    ])\n+    assert trigsimp(q1.to_rotation_matrix()) == expected_matrix_1\n+    \n+    # Additional tests for different quaternion rotations\n+    q2 = Quaternion(cos(pi/4), sin(pi/4), 0, 0)\n+    expected_matrix_2 = Matrix([\n+        [1,      0,      0],\n+        [0, sqrt(2)/2, -sqrt(2)/2],\n+        [0, sqrt(2)/2,  sqrt(2)/2]\n+    ])\n+    assert trigsimp(q2.to_rotation_matrix()) == expected_matrix_2\n+\n+    q3 = Quaternion(cos(pi/4), 0, sin(pi/4), 0)\n+    expected_matrix_3 = Matrix([\n+        [sqrt(2)/2, 0, sqrt(2)/2],\n+        [0,         1,        0],\n+        [-sqrt(2)/2, 0, sqrt(2)/2]\n+    ])\n+    assert trigsimp(q3.to_rotation_matrix()) == expected_matrix_3\n+    \n+    q4 = Quaternion(cos(pi/4), 0, 0, sin(pi/4))\n+    expected_matrix_4 = Matrix([\n+        [sqrt(2)/2, -sqrt(2)/2, 0],\n+        [sqrt(2)/2,  sqrt(2)/2, 0],\n+        [0,          0,         1]\n+    ])\n+    assert trigsimp(q4.to_rotation_matrix()) == expected_matrix_4\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +160,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..416924b 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1622,6 +1622,27 @@ def test_Mod():\n     assert (x*(x + 1)) % (x + 1) == (x + 1)*Mod(x, 1)\n     assert Mod(5.0*x, 0.1*y) == 0.1*Mod(50*x, y)\n     i = Symbol('i', integer=True)\n+    # Additional test cases for issue #15493\n+    j = Symbol('j', integer=True)\n+    \n+    # Testing Mod(3*i, 2) == Mod(i, 2)\n+    assert Mod(3*i, 2) == Mod(i, 2)\n+    \n+    # Testing behavior with combinations of integers\n+    assert Mod(6*i, 4) == 2*Mod(i, 2)\n+    assert Mod(9*i, 3) == 0\n+    assert Mod(4*i, 2) == 0\n+    \n+    # Testing divisions, ensuring no unwanted simplification\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1)\n+    \n+    # More complex expression simplifications\n+    assert Mod(5*i + j, 2) == Mod(i + j, 2)\n+    assert Mod(5*i - 2*j, 2) == Mod(i, 2)\n+    assert Mod(12*i + 8, 4) == 0\n+\n+    # Edge cases with nested Mod\n+    assert Mod(Mod(6*i + 4*j, 2*i), j) == Mod(4*j, j)\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n",
  "sympy__sympy-15809": "diff --git a/sympy/functions/elementary/tests/test_miscellaneous.py b/sympy/functions/elementary/tests/test_miscellaneous.py\nindex 821fd0c..5743e38 100644\n--- a/sympy/functions/elementary/tests/test_miscellaneous.py\n+++ b/sympy/functions/elementary/tests/test_miscellaneous.py\n@@ -85,7 +85,8 @@ def test_Min():\n     assert Min(p, p_).func is Min\n \n     # lists\n-    raises(ValueError, lambda: Min())\n+    assert Min() == S.Infinity\n+    raises(ValueError, lambda: Max(a))  # Ensure single argument case still raises unless resolved elsewhere\n     assert Min(x, y) == Min(y, x)\n     assert Min(x, y, z) == Min(z, y, x)\n     assert Min(x, Min(y, z)) == Min(z, y, x)\n@@ -156,7 +157,8 @@ def test_Max():\n \n     # lists\n \n-    raises(ValueError, lambda: Max())\n+    assert Max() == S.NegativeInfinity\n+    raises(ValueError, lambda: Min(a))  # Ensure single argument case still raises unless resolved elsewhere\n     assert Max(x, y) == Max(y, x)\n     assert Max(x, y, z) == Max(z, y, x)\n     assert Max(x, Max(y, z)) == Max(z, y, x)\n",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..c2e03ef 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1986,11 +1986,35 @@ def test_Add_is_zero():\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n-\n-def test_issue_14392():\n+from sympy import I, simplify, symbols, sin, zoo, nan\n+from sympy.core.add import Add\n+\n+def test_issue_15873():\n+    # Original test case\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+\n+    # Additional test cases for thoroughness\n+    # Test with more complex expressions\n+    f = I - 1 + (1 - I)**2\n+    assert f.is_zero is None\n+\n+    g = 1 + I - (1 + I)\n+    assert g.is_zero is None  # Here, it should be None because it's not obvious\n+\n+    h = simplify(e)\n+    assert h.is_zero  # After simplification, it should be True\n+\n+    i = simplify(f)\n+    assert i.is_zero is None  # After simplification, it still can't be determined\n+    \n+    # Explicit zero known only after simplification\n+    j = (1 - I)*(1 + I) - 2 - 0\n+    assert j.is_zero is None\n+    assert simplify(j).is_zero is True\n     assert (sin(zoo)**2).as_real_imag() == (nan, nan)\n \n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..deb2b7e 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -486,7 +486,36 @@ def test_issue_5950():\n         log(Rational(3,4), evaluate=False)\n \n \n+from sympy import Symbol, posify, symbols\n+\n def test_posify():\n+    # Test preserving finite assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] is True\n+    assert eq.assumptions0['infinite'] is False\n+    \n+    # Test preserving integer assumption\n+    n = Symbol('n', integer=True)\n+    eq, rep = posify(n)\n+    assert eq.assumptions0['integer'] is True\n+\n+    # Test preserving rational assumption\n+    r = Symbol('r', rational=True)\n+    eq, rep = posify(r)\n+    assert eq.assumptions0['rational'] is True\n+\n+    # Test preserving even assumption\n+    e = Symbol('e', even=True)\n+    eq, rep = posify(e)\n+    assert eq.assumptions0['even'] is True\n+\n+    # Test preserving odd assumption\n+    o = Symbol('o', odd=True)\n+    eq, rep = posify(o)\n+    assert eq.assumptions0['odd'] is True\n+\n+    # Retesting original functionality to ensure no regression occurs\n     from sympy.abc import x\n \n     assert str(posify(\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..414cfec 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -16,7 +17,14 @@ from sympy.utilities.pytest import raises\n x, y, z = symbols('x y z')\n \n \n+from sympy.tensor import IndexedBase\n+\n def test_PythonCodePrinter():\n+    # Test case to verify the fix for the Indexed issue\n+    prntr = PythonCodePrinter()\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(p[x, y]) == 'p[x, y]'\n     prntr = PythonCodePrinter()\n     assert not prntr.module_imports\n     assert prntr.doprint(x**y) == 'x**y'\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_autowrap.py b/sympy/utilities/tests/test_autowrap.py\nindex 23fddca..2bddad9 100644\n--- a/sympy/utilities/tests/test_autowrap.py\n+++ b/sympy/utilities/tests/test_autowrap.py\n@@ -48,6 +48,20 @@ def test_cython_wrapper_scalar_function():\n     assert source == expected\n \n \n+def test_autowrap_cython_with_unused_array_argument():\n+    from sympy import MatrixSymbol\n+    from sympy.utilities.autowrap import autowrap\n+    import numpy as np\n+\n+    x = MatrixSymbol('x', 2, 1)\n+    expr = 1.0\n+    # Attempt to wrap an expression that doesn't use 'x'\n+    f = autowrap(expr, args=(x,), backend='cython')\n+\n+    # Ensure this returns 1.0 and does not raise a TypeError\n+    result = f(np.array([[1.0, 2.0]]))\n+    assert result == 1.0\n+\n def test_cython_wrapper_outarg():\n     from sympy import Equality\n     x, y, z = symbols('x,y,z')\n",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..b6b1a9c 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -239,6 +239,10 @@ def test_decipher_kid_rsa():\n \n \n def test_encode_morse():\n+    assert encode_morse('1') == '.----'\n+    assert encode_morse('0') == '-----'\n+    assert encode_morse('10') == '.----|-----'\n+    assert encode_morse('101') == '.----|-----|.----'\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n     assert encode_morse('SMS\\n') == '...|--|...||'\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..ecc994d 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,12 +1,20 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n-from sympy.simplify.sqrtdenest import _subsets as subsets\n+from sympy.simplify.sqrtdenest import _subsets as subsets, _sqrt_match\n+from sympy.core.expr import unchanged\n from sympy.utilities.pytest import slow\n \n r2, r3, r5, r6, r7, r10, r15, r29 = [sqrt(x) for x in [2, 3, 5, 6, 7, 10,\n                                           15, 29]]\n \n-\n-def test_sqrtdenest():\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    # Check if _sqrt_match works correctly and doesn't raise IndexError\n+    assert _sqrt_match(4 + I) == []\n+    # Verify if sqrtdenest returns the expression unchanged as expected\n+    assert sqrtdenest((3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2) == (3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e  # Expression should remain unchanged\n     d = {sqrt(5 + 2 * r6): r2 + r3,\n         sqrt(5. + 2 * r6): sqrt(5. + 2 * r6),\n         sqrt(5. + 4*sqrt(5 + 2 * r6)): sqrt(5.0 + 4*r2 + 4*r3),\n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..fb9f8fd 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -90,6 +91,17 @@ def test_point():\n     assert p1.__radd__(p2) == p1.midpoint(p2).scale(2, 2)\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n+    # Testing multiplication of Point and sympified number in different orders\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+\n+    # This should not raise an exception\n+    assert point1 + point2 * sympify(2.0) == Point(2, 2)\n+\n+    # This should not raise an exception after the fix\n+    assert point1 + sympify(2.0) * point2 == Point(2, 2)\n+\n+    # Original test case\n     assert p4 * 5 == Point(5, 5)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..0d9fed7 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -473,8 +473,29 @@ def test_descent():\n     # supposed to be square-free\n     raises(TypeError, lambda: descent(4, 3))\n \n+from sympy import symbols\n+from sympy.solvers.diophantine import diophantine\n+\n+x, y, m, n, t = symbols('x y m n t', integer=True)\n \n def test_diophantine():\n+    # Test case for issue with permutations\n+    # This is to ensure the solutions are consistent irrespective of the order of symbols\n+    eq = n**4 + m**4 - 2**4 - 3**4\n+    \n+    # Without permute option\n+    expected_base_solution = {(2, 3)}\n+\n+    # Autogenerated test from issue report\n+    assert diophantine(eq, syms=(m, n), permute=False) == expected_base_solution\n+    assert diophantine(eq, syms=(n, m), permute=False) == expected_base_solution\n+\n+    # With permute option\n+    expected_permuted_solution = {(-3, -2), (-3, 2), (-2, -3), (-2, 3), \n+                                  (2, -3), (2, 3), (3, -2), (3, 2)}\n+    # Added test to validate testing of unexpected behavior\n+    assert diophantine(eq, syms=(m, n), permute=True) == expected_permuted_solution\n+    assert diophantine(eq, syms=(n, m), permute=True) == expected_permuted_solution\n     assert check_solutions((x - y)*(y - z)*(z - x))\n     assert check_solutions((x - y)*(x**2 + y**2 - z**2))\n     assert check_solutions((x - 3*y + 7*z)*(x**2 + y**2 - z**2))\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..443735d 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -671,6 +671,31 @@ def test_latex_derivatives():\n     assert latex(diff(f(x), (x, Max(n1, n2)))) == \\\n         r'\\frac{d^{\\max\\left(n_{1}, n_{2}\\right)}}{d x^{\\max\\left(n_{1}, n_{2}\\right)}} f{\\left(x \\right)}'\n \n+    # Test for correct parenthesizing of Subs expressions\n+    def test_latex_subs_parenthesis():\n+        from sympy import Subs, sqrt\n+        from sympy.abc import a, b\n+        \n+        # Single substitution with negative sign\n+        assert latex(3*Subs(-x+y, (x,), (1,))) == \\\n+            r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+        \n+        # Multiple substitutions\n+        assert latex(Subs(a*x + b*y, (x, y), (1, 2))) == \\\n+            r'\\left. \\left(a x + b y\\right) \\right|_{\\substack{ x=1\\\\ y=2 }}'\n+\n+        # Test with more complex expressions wrapped with a function\n+        assert latex(Subs(sqrt(x + y), (x,), (1,))) == \\\n+            r'\\left. \\sqrt{x + y} \\right|_{\\substack{ x=1 }}'\n+\n+        # Expression leading with a constant\n+        assert latex(Subs(x + y, (x,), (1,)) + 4) == \\\n+            r'\\left. \\left(x + y\\right) \\right|_{\\substack{ x=1 }} + 4'\n+        \n+        # Nested expression should be parenthesized\n+        assert latex(2*Subs(x*(x + y), (x,), (1,))) == \\\n+            r'2 \\left. \\left(x \\left(x + y\\right)\\right) \\right|_{\\substack{ x=1 }}'\n+\n \n def test_latex_subs():\n     assert latex(Subs(x*y, (\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "diff --git a/sympy/sets/tests/test_conditionset.py b/sympy/sets/tests/test_conditionset.py\nindex 68ee5d6..d0aa278 100644\n--- a/sympy/sets/tests/test_conditionset.py\n+++ b/sympy/sets/tests/test_conditionset.py\n@@ -1,3 +1,4 @@\n+\n from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n     EmptySet, Union, Contains)\n from sympy import (Symbol, Eq, S, Abs, sin, pi, Interval,\n@@ -129,6 +130,17 @@ def test_subs_CondSet():\n     assert ConditionSet(f(x), f(x) < 1, {w, z}\n         ).subs(f(x), y) == ConditionSet(y, y < 1, {w, z})\n \n+    # Test for issue related to ConditionSet with ImageSet\n+    k = Symbol('k')\n+    img1 = imageset(Lambda(k, 2*k*pi + asin(y)), S.Integers)\n+    img2 = imageset(Lambda(k, 2*k*pi + asin(S.One/3)), S.Integers)\n+    conditionset1 = ConditionSet(x, Contains(y, Interval(-1, 1)), img1)\n+    assert conditionset1.subs(y, S.One/3).dummy_eq(img2)\n+\n+    # Further test subs on ImageSet\n+    assert img1.subs(y, S.One/3) == img2\n+    assert img1.subs(y, z) == imageset(Lambda(k, 2*k*pi + asin(z)), S.Integers)\n+\n \n def test_subs_CondSet_tebr():\n     with warns_deprecated_sympy():\n",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..4329321 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -476,6 +476,38 @@ def test_issue_4988_builtins():\n     assert exp2 == C  # Make sure it did not get mixed up with sympy.C\n \n \n+from sympy.abc import x, y, z\n+from sympy import Symbol, Add, Mul, Interval, exp, sin, cos\n+\n+def test_kernS_edge_cases():\n+    # Test with simple subtraction expressions\n+    assert kernS('x - (1 - x)') == x - (1 - x)\n+    \n+    # Test with nested parentheses and mixed operators\n+    assert kernS('3*(x + (y - (z - 1)))') == 3*(x + (y - (z - 1)))\n+    \n+    # Test with an expression that should remain unchanged\n+    assert kernS('-(x+1)') == -(x+1)\n+\n+    # Test an expression with nested and multiple implied multiplications\n+    assert kernS('2*(3*((x + y)*z))') == 2*(3*(x + y)*z)\n+    \n+    # Test sympification that involves addition and power\n+    assert kernS('x + 2**(2 + 3)') == x + 32\n+\n+    # Test using a symbol not affected by replacements\n+    assert kernS('a - (b - c)') == Symbol('a') - (Symbol('b') - Symbol('c'))\n+    \n+    # Test when parentheses are uneven (should raise an error)\n+    try:\n+        kernS('(x + (y - z)')\n+    except Exception as e:\n+        assert isinstance(e, ValueError)\n+        \n+    # Test with variables having underscores similar to kern\n+    kern_var = Symbol('_kern')\n+    assert kernS('_kern + x') == kern_var + x\n+\n def test_geometry():\n     p = sympify(Point(0, 1))\n     assert p == Point(0, 1) and isinstance(p, Point)\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..ca28d02 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -106,7 +107,18 @@ def test_identity():\n         assert represent(IdentityOperator(n)) == eye(n)\n \n \n-def test_outer_product():\n+def test_dagger_identity_operator():\n+    I = IdentityOperator()\n+    O = Operator('O')\n+    D = Dagger(O)\n+\n+    # Test multiplication with IdentityOperator\n+    assert I * D == D\n+    assert D * I == D\n+\n+    # Additionally check that the type is preserved\n+    assert isinstance(I * D, Operator)\n+    assert isinstance(D * I, Operator)\n     k = Ket('k')\n     b = Bra('b')\n     op = OuterProduct(k, b)\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..b7c54dc 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -854,7 +854,17 @@ def test_generator_product():\n     assert w == p\n \n \n+from sympy.combinatorics import DihedralGroup\n+\n def test_sylow_subgroup():\n+    # Test cases from the issue to ensure IndexError is resolved\n+    G = DihedralGroup(18)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n+\n+    G = DihedralGroup(50)\n+    S = G.sylow_subgroup(p=2)\n+    assert S.order() == 4\n     P = PermutationGroup(Permutation(1, 5)(2, 4), Permutation(0, 1, 2, 3, 4, 5))\n     S = P.sylow_subgroup(2)\n     assert S.order() == 4\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..e7536b7 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,18 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n-\n def test_partitions():\n+    import copy\n+    p_iter = partitions(6, k=2)\n+    first_partition = next(p_iter)\n+    second_partition = next(p_iter)\n+    # Check that two partitions have different id's, ensuring they are not the same object\n+    assert id(first_partition) != id(second_partition), \"Partitions are using the same dictionary instance.\"\n+\n+    # Test copy of an iteration to see if the elements are not identical\n+    partition_list = [p for p in partitions(6, k=2)]\n+    for i in range(len(partition_list) - 1):\n+        assert id(partition_list[i]) != id(partition_list[i + 1]), \"Partitions yielded the same dictionary object.\"\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..77b8461 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -571,25 +571,110 @@ def test_Float():\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=10))\n     raises(ValueError, lambda: Float(\"1.23\", dps=3, precision=\"\"))\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=\"\"))\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # Test the issue as described\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    \n+    # Additional test cases from the issue description\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+    # Additional related test cases for completeness\n+    assert (S.true != S(0.0))\n+    assert (S(0.0) != S.true)\n+    assert (S.true == S(1.0))\n+    assert (S(1.0) == S.true)\n+    assert (S(0.0) == S(0.0))\n+    assert (S.false == S.false)\n     # from NumberSymbol\n     assert same_and_same_prec(Float(pi, 32), pi.evalf(32))\n     assert same_and_same_prec(Float(Catalan), Catalan.evalf())\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # Test the issue as described\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    \n+    # Additional test cases from the issue description\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+    # Additional related test cases for completeness\n+    assert (S.true != S(0.0))\n+    assert (S(0.0) != S.true)\n+    assert (S.true == S(1.0))\n+    assert (S(1.0) == S.true)\n+    assert (S(0.0) == S(0.0))\n+    assert (S.false == S.false)\n     # oo and nan\n     u = ['inf', '-inf', 'nan', 'iNF', '+inf']\n     v = [oo, -oo, nan, oo, oo]\n     for i, a in zip(u, v):\n         assert Float(i) is a\n-\n-\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # Test the issue as described\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    \n+    # Additional test cases from the issue description\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+    # Additional related test cases for completeness\n+    assert (S.true != S(0.0))\n+    assert (S(0.0) != S.true)\n+    assert (S.true == S(1.0))\n+    assert (S(1.0) == S.true)\n+    assert (S(0.0) == S(0.0))\n+    assert (S.false == S.false)\n+\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # Test the issue as described\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    \n+    # Additional test cases from the issue description\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+    # Additional related test cases for completeness\n+    assert (S.true != S(0.0))\n+    assert (S(0.0) != S.true)\n+    assert (S.true == S(1.0))\n+    assert (S(1.0) == S.true)\n+    assert (S(0.0) == S(0.0))\n+    assert (S.false == S.false)\n @conserve_mpmath_dps\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n     mp_pi = mpmath.pi()\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # Test the issue as described\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    \n+    # Additional test cases from the issue description\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+    # Additional related test cases for completeness\n+    assert (S.true != S(0.0))\n+    assert (S(0.0) != S.true)\n+    assert (S.true == S(1.0))\n+    assert (S(1.0) == S.true)\n+    assert (S(0.0) == S(0.0))\n+    assert (S.false == S.false)\n     assert Float(mp_pi, 100) == Float(mp_pi._mpf_, 100) == pi.evalf(100)\n \n     mpmath.mp.dps = 15\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..c655aee 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n@@ -19,6 +20,67 @@ def test_subs():\n     e = e.subs(x, n3)\n     assert e == Rational(6)\n \n+    # Adding test cases for issue described (unexpected PolynomialError)\n+    # for expr = exp(sinh(Piecewise...)) when using subs({1: 1.0}) as described\n+\n+    from sympy.functions.elementary.trigonometric import sinh\n+    from sympy.functions.elementary.piecewise import Piecewise\n+    from sympy import clear_cache\n+\n+    # Test case when symbols have no assumptions\n+    x, y, z = symbols('x y z')\n+    clear_cache()\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    try:\n+        expr.subs({1: 1.0})\n+        print(\"Test passed: subs() successful without assumptions\")\n+    except Exception as e:\n+        print(f\"Test failed: {e}\")\n+\n+    # Test case when symbols x, y have real=True assumption\n+    x_r, y_r, z = symbols('x_r y_r z', real=True)\n+    clear_cache()\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    try:\n+        expr.subs({1: 1.0})\n+        print(\"Test passed: subs() successful with real=True assumption\")\n+    except Exception as e:\n+        print(f\"Test failed: {e}\")\n+\n+    # Additional test cases varying parameters to check fix versality\n+\n+    # Using cosh instead of sinh\n+    expr_cosh = exp(cosh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    try:\n+        expr_cosh.subs({1: 1.0})\n+        print(\"Test passed: subs() with cosh\")\n+    except Exception as e:\n+        print(f\"Test failed: {e}\")\n+\n+    # Removing division by z\n+    expr_no_div = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True))))\n+    try:\n+        expr_no_div.subs({1: 1.0})\n+        print(\"Test passed: subs() without division by z\")\n+    except Exception as e:\n+        print(f\"Test failed: {e}\")\n+\n+    # Removing exp but keeping sinh\n+    expr_no_exp = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z)\n+    try:\n+        expr_no_exp.subs({1: 1.0})\n+        print(\"Test passed: subs() without exp\")\n+    except Exception as e:\n+        print(f\"Test failed: {e}\")\n+\n+    # Tests for other functions like sin instead of sinh\n+    expr_sin = exp(sin(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    try:\n+        expr_sin.subs({1: 1.0})\n+        print(\"Test passed: subs() with sin instead of sinh\")\n+    except Exception as e:\n+        print(f\"Test failed: {e}\")\n+\n \n def test_subs_Matrix():\n     z = zeros(2)\n",
  "sympy__sympy-21847": "",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..bb9625b 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,7 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    assert st.func(*st.args) == st  # New test case to assert argument invariance\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..e679386 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,6 @@\n+\n from sympy.core.basic import Basic\n+from sympy.core.parameters import evaluate\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n@@ -451,8 +453,21 @@ def test__normalize_dimension():\n         Point(1, 2), Point(3, 4, 0), on_morph='ignore') == [\n         Point(1, 2, 0), Point(3, 4, 0)]\n \n-\n-def test_direction_cosine():\n+def test_issue_22684():\n+    # Used to give an error\n+    with evaluate(False):\n+        assert Point2D(1, 2) == Point2D(Integer(1), Integer(2))\n+\n+def test_nested_evaluate():\n+    # Test a nested evaluate context\n+    with evaluate(False):\n+        with evaluate(True):\n+            assert Point2D(1, 2) == Point2D(1, 2)\n+        assert Point2D(1, 2) != Point2D(0.5, 0.5)\n+\n+def test_no_imaginary_coordinates():\n+    with raises(ValueError, match=\"Imaginary coordinates are not permitted\"):\n+        Point2D(1 + I, 2)\n     p1 = Point3D(0, 0, 0)\n     p2 = Point3D(1, 1, 1)\n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..e2b6979 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..8b01ecc 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,23 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+\n+def test_single_element_tuple():\n+    # Test the issue with a single-element tuple\n+    func_single = lambdify([], (1,))\n+    assert func_single() == (1,)\n+\n+    # Test the generated source code to ensure tuple syntax with a comma is maintained\n+    source_code = inspect.getsource(func_single)\n+    assert 'return (1,)' in source_code\n+\n+\n+def test_two_element_tuple():\n+    # Ensure correctness of tuples with two elements\n+    func_two = lambdify([], (1, 2))\n+    assert func_two() == (1, 2)\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..02c6f33 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n from sympy.core.sympify import sympify  # can't import as S yet\n-from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n+from sympy.core.symbol import uniquely_named_symbol, _symbol, Str, symbols\n+from sympy.core.function import Function, UndefinedFunction\n \n from sympy.testing.pytest import raises\n from sympy.core.symbol import disambiguate\n@@ -294,8 +296,12 @@ def test_symbols():\n     assert symbols('aa:d,x:z') == (aa, ab, ac, ad, x, y, z)\n     assert symbols(('aa:d','x:z')) == ((aa, ab, ac, ad), (x, y, z))\n \n-\n-    # issue 6675\n+    # Test for the issue with creating functions from symbols using extra parentheses\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert type(q[0]) == UndefinedFunction\n+    assert type(u[1]) == UndefinedFunction\n+    assert q[0].__class__.__name__ == \"UndefinedFunction\"\n+    assert u[1].__class__.__name__ == \"UndefinedFunction\"\n     def sym(s):\n         return str(symbols(s))\n     assert sym('a0:4') == '(a0, a1, a2, a3)'\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..f96593e 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -262,7 +262,38 @@ def test_kahane_simplify1():\n     assert r.equals(-2*G(sigma)*G(rho)*G(nu))\n \n \n-def test_gamma_matrix_class():\n+def test_leading_uncontracted_gamma_matrices():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+\n+    # Test case where contracted indices are at the beginning\n+    t = G(mu) * G(-mu) * G(rho) * G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4 * G(rho) * G(sigma)), \"Error: Order of gamma matrices changed unexpectedly\"\n+\n+    # Test case where contracted indices are at the end\n+    t = G(rho) * G(sigma) * G(mu) * G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4 * G(rho) * G(sigma)), \"Error: Order of gamma matrices changed unexpectedly\"\n+\n+    # Additional cases to ensure robustness\n+    # Check with an additional uncontracted matrix in different positions\n+    t = G(alpha) * G(rho) * G(sigma) * G(mu) * G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4 * G(alpha) * G(rho) * G(sigma)), \"Error: Incorrect simplification with extra uncontracted matrix\"\n+\n+    t = G(rho) * G(sigma) * G(alpha) * G(mu) * G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4 * G(rho) * G(sigma) * G(alpha)), \"Error: Incorrect simplification with extra uncontracted matrix\"\n+\n+    # Case with no contractions\n+    t = G(sigma) * G(rho)\n+    r = kahane_simplify(t)\n+    assert r.equals(G(sigma) * G(rho)), \"Error: Simplification altered expression with no contractions\"\n+\n+    # Case with nested structures\n+    t = (G(mu) * G(rho) * G(-mu)) * G(nu)\n+    r = kahane_simplify(t)\n+    assert r.equals(-2 * G(rho) * G(nu)), \"Error: Incorrect simplification of nested structures\"\n     i, j, k = tensor_indices('i,j,k', LorentzIndex)\n \n     # define another type of TensorHead to see if exprs are correctly handled:\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..69708df 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -46,6 +46,19 @@ def test_as_set():\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n \n-def test_type_error():\n+def test_as_set_not_implemented_error():\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    # Test whether Contains.as_set() raises a NotImplementedError\n+    sets_to_test = [\n+        FiniteSet(y),\n+        S.Integers,\n+        S.Reals,\n+        Interval(0, 1),\n+        Union(FiniteSet(1, 2, 3)),\n+        S.Naturals,\n+    ]\n+    for s in sets_to_test:\n+        raises(NotImplementedError, lambda: Contains(x, s).as_set())\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..70e1df3 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,34 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+\n+    assert SI.get_dimension_system().is_dimensionless(dim), \"The dimension should be dimensionless but isn't.\"\n+\n+    exp_expr = 1 + exp(expr)\n+    result = SI._collect_factor_and_dimension(exp_expr)\n+\n+    assert result == (1 + E, Dimension(1)), f\"Expected result (1 + E, Dimension(1)), but got {result}\"\n+\n+from sympy.core.numbers import E\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+from sympy.physics.units import Quantity\n+from sympy import exp\n+from sympy.physics.units.systems.si import SI\n+from sympy.physics.units.dimensions import Dimension\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..fb1653e 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,42 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import Quantity, velocity, acceleration, time, meter, second\n+from sympy.physics.units.systems.si import SI\n+\n+def test_issue_collect_factor_and_dimension_with_equivalent_dimensions():\n+    v1 = Quantity('v1')\n+    SI.set_quantity_dimension(v1, velocity)\n+    SI.set_quantity_scale_factor(v1, 2 * meter / second)\n+\n+    a1 = Quantity('a1')\n+    SI.set_quantity_dimension(a1, acceleration)\n+    SI.set_quantity_scale_factor(a1, -9.8 * meter / second**2)\n+\n+    t1 = Quantity('t1')\n+    SI.set_quantity_dimension(t1, time)\n+    SI.set_quantity_scale_factor(t1, 5 * second)\n+\n+    expr1 = a1 * t1 + v1\n+    # Should not raise ValueError, as a1*t1 is equivalent to v1 in dimensions\n+    SI._collect_factor_and_dimension(expr1)\n+\n+def test_issue_24211():\n+    from sympy.physics.units import time, velocity, acceleration, second, meter\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1 * T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..55244c9 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -270,7 +270,27 @@ def test_PolyElement_as_expr():\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n-def test_PolyElement_from_expr():\n+def test_PolyElement_as_expr_custom_symbols():\n+    from sympy import symbols\n+\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = 3*x**2*y - x*y*z + 7*z**3 + 1\n+\n+    # Testing with a different set of symbols\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2*V - U*V*W + 7*W**3 + 1\n+\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Testing with some other variations\n+    A, B, C = symbols(\"a,b,c\")\n+    g_diff = 3*A**2*B - A*B*C + 7*C**3 + 1\n+\n+    assert f.as_expr(A, B, C) == g_diff\n+\n+    # Ensure that passing a different number of symbols raises a ValueError\n+    raises(ValueError, lambda: f.as_expr(U, V))  # too few symbols\n+    raises(ValueError, lambda: f.as_expr(U, V, W, A))  # too many symbols\n     x, y, z = symbols(\"x,y,z\")\n     R, X, Y, Z = ring((x, y, z), ZZ)\n \n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..441d1d5 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -266,6 +266,21 @@ def test_match_parentheses_implicit_multiplication():\n def test_convert_equals_signs():\n     transformations = standard_transformations + \\\n                         (convert_equals_signs, )\n+from sympy.core import Eq, Lt, Le, Gt, Ge, Ne\n+from sympy.parsing.sympy_parser import parse_expr\n+\n+def test_evaluate_false_relationals_issue_24288():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n     x = Symbol('x')\n     y = Symbol('y')\n     assert parse_expr(\"1*2=x\", transformations=transformations) == Eq(2, x)\n",
  "astropy__astropy-14369": "diff --git a/astropy/units/tests/test_format.py b/astropy/units/tests/test_format.py\nindex 062b5f4..fa44608 100644\n--- a/astropy/units/tests/test_format.py\n+++ b/astropy/units/tests/test_format.py\n@@ -87,6 +87,11 @@ def test_unit_grammar_fail(string):\n         ([\"\u00c5\"], u.AA),\n         ([\"\u00c5/s\"], u.AA / u.s),\n         ([\"\\\\h\"], si.h),\n+        # New test cases for verifying correct parsing of complex units in CDS format\n+        ([\"10+3J/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.kpc ** 2))),\n+        ([\"10-7J/s/kpc2\"], u.Unit(1e-7 * u.W / u.kpc ** 2)),\n+        ([\"1e3W/m/s/kpc2\"], u.Unit(1e3 * u.W / (u.m * u.kpc ** 2))),\n+        ([\"1e-7W/s/kpc2\"], u.Unit(1e-7 * u.W / u.kpc ** 2)),\n         ([\"[cm/s2]\"], dex(u.cm / u.s**2)),\n         ([\"[K]\"], dex(u.K)),\n         ([\"[-]\"], dex(u.dimensionless_unscaled)),\n",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..ece585d 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1898,6 +1898,26 @@ class OperationTests(OperationTestBase):\n         author = Author.objects.create(name='Albert', rebate='10%')\n         self.assertEqual(Author.objects.get(), author)\n \n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_check_constraint_complex_or_and(self):\n+        app_label = 'test_constraint_or_and'\n+        constraint_name = 'complex_constraint_or_and'\n+        from_state = self.set_up_test_model(app_label)\n+        check = models.Q(flag=True, field_1__isnull=False) | models.Q(flag=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        # Test constraint doesn't allow flag=True with field_1 as null\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(flag=True, field_1=None)\n+        # Test constraint allows flag=False regardless of field_1\n+        TestConstraint.objects.create(flag=False, field_1=None)\n+        TestConstraint.objects.create(flag=False, field_1=10)\n+\n     @skipUnlessDBFeature('supports_table_check_constraints')\n     def test_remove_constraint(self):\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\n",
  "django__django-11477": "",
  "django__django-12273": "",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..23d7131 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -603,9 +603,32 @@ class DeletionTests(TestCase):\n                 )\n                 signal.disconnect(receiver, sender=Referrer)\n \n+from django.test import TestCase\n+from .models import User, Avatar, M2MTo, M2MFrom, Child, Parent, Origin, Referrer, SecondReferrer\n \n class FastDeleteTests(TestCase):\n \n+    def test_fast_delete_all(self):\n+        User.objects.create()\n+        Avatar.objects.create()\n+        with self.assertNumQueries(1) as ctx:\n+            # Ensure User.objects.all().delete() executes in one query\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # No subqueries should be used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+        self.assertEqual(User.objects.count(), 0)\n+        self.assertEqual(Avatar.objects.count(), 1)\n+\n+    def test_fast_delete_all_large(self):\n+        User.objects.bulk_create(User() for _ in range(1000))\n+        with self.assertNumQueries(1) as ctx:\n+            # Ensure bulk delete executes in one query\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        self.assertNotIn('SELECT', sql)\n+        self.assertEqual(User.objects.count(), 0)\n+\n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n             avatar=Avatar.objects.create()\n@@ -702,4 +725,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..a891676 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,11 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_dict_value_raises_validation_error(self):\n+        f = models.DecimalField(max_digits=4, decimal_places=2)\n+        msg = '\u201c%s\u201d value must be a decimal number.'\n+        with self.assertRaisesMessage(ValidationError, msg % ({})):\n+            f.to_python({})\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..60b4c69 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n import pickle\n \n import django\n from django.db import models\n+from django.db.models import Sum\n from django.test import TestCase\n \n from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n@@ -12,6 +14,10 @@ class PickleabilityTestCase(TestCase):\n     @classmethod\n     def setUpTestData(cls):\n         Happening.objects.create()  # make sure the defaults are working (#20158)\n+        # Create sample Toy instances\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n \n     def assert_pickles(self, qs):\n         self.assertEqual(list(pickle.loads(pickle.dumps(qs))), list(qs))\n@@ -259,6 +265,28 @@ class PickleabilityTestCase(TestCase):\n         event.edition_set.create()\n         self.assert_pickles(event.edition_set.order_by('event'))\n \n+    def test_pickle_values_annotate(self):\n+        \"\"\"\n+        Test pickling and unpickling of a queryset using values() and annotate(),\n+        ensuring it returns a list of dicts after pickling.\n+        \"\"\"\n+        prices = Toy.objects.values('material').annotate(total_price=Sum('price'))\n+        self.assertEqual(type(prices[0]), dict, f\"Expected dict, got {type(prices[0])}\")\n+        reloaded = Toy.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(prices.query))\n+        self.assertEqual(list(reloaded), list(prices), \"Reloaded queryset should match original\")\n+\n+    def test_pickle_values_list(self):\n+        \"\"\"\n+        Test pickling and unpickling of a queryset using values_list(),\n+        ensuring it returns a list of tuples after pickling.\n+        \"\"\"\n+        materials = Toy.objects.values_list('material', flat=True)\n+        self.assertEqual(type(materials[0]), str, f\"Expected str, got {type(materials[0])}\")\n+        reloaded = Toy.objects.all()\n+        reloaded.query = pickle.loads(pickle.dumps(materials.query))\n+        self.assertEqual(list(reloaded), list(materials), \"Reloaded queryset should match original\")\n+\n \n class InLookupTests(TestCase):\n \n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..d9c7568 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -11,4 +11,5 @@ class Employee(models.Model):\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n",
  "django__django-13512": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex a61da37..4827cdb 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -187,6 +187,8 @@ class UtilsTests(SimpleTestCase):\n             (['a', 'b'], '[\"a\", \"b\"]'),\n             ('a', '\"a\"'),\n             ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),  # Invalid JSON.\n+            ({\"a\": \"\u4f60\u597d \u4e16\u754c\"}, '{\"a\": \"\u4f60\u597d \u4e16\u754c\"}'),\n+            ({\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}, '{\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}'),\n         ]\n         for value, display_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-14404": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 8fb91af..d827796 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -6602,6 +6602,19 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertRedirects(response, known_url, status_code=301, target_status_code=403)\n \n+    @override_settings(APPEND_SLASH=False, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_missing_slash_append_slash_false_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertEqual(response.status_code, 404)\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n@@ -6628,8 +6641,32 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n         response = self.client.get(known_url[:-1])\n         self.assertEqual(response.status_code, 404)\n \n+    @override_settings(APPEND_SLASH=False, FORCE_SCRIPT_NAME='/prefix/')\n+    def test_missing_slash_append_slash_false_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertEqual(response.status_code, 404)\n+\n     @override_settings(APPEND_SLASH=True)\n-    def test_single_model_no_append_slash(self):\n+    @override_settings(APPEND_SLASH=False, FORCE_SCRIPT_NAME=None)\n+    def test_missing_slash_no_force_script_name(self):\n+        superuser = User.objects.create_user(\n+            username='staff',\n+            password='secret',\n+            email='staff@example.com',\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse('admin:admin_views_article_changelist')\n+        response = self.client.get(known_url[:-1])\n+        self.assertRedirects(response, known_url, status_code=301, fetch_redirect_response=False)\n         superuser = User.objects.create_user(\n             username='staff',\n             password='secret',\n",
  "django__django-14580": "",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..ebecf68 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1630,7 +1630,10 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertAlmostEqual(result['value'], Decimal('61.72'), places=2)\n \n-    def test_exists_none_with_aggregate(self):\n+    def test_annotate_then_aggregate_with_default(self):\n+        # Test the issue where using Sum with default after annotate causes a crash.\n+        result = Book.objects.annotate(idx=F(\"id\")).aggregate(Sum(\"id\", default=0))\n+        self.assertEqual(result['id__sum'], 4560)\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.none()),\n@@ -1642,4 +1645,4 @@ class AggregateTestCase(TestCase):\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..ba0c32b 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2988,7 +2988,24 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n-        # Deconstruction.\n+        # Test backward operation restores the old auto-generated index name.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"old_pony_test_idx\")\n+\n+        # Test re-application of RenameIndex without crashing.\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+        # Test multiple forward and backward operations.\n+        with connection.schema_editor() as editor:\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, \"old_pony_test_idx\")\n+\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n         self.assertEqual(definition[1], [])\n",
  "django__django-15732": "",
  "django__django-15916": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex cc5e08c..38c9c6b 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -3497,7 +3497,50 @@ class FormFieldCallbackTests(SimpleTestCase):\n             )\n \n \n-class LocalizedModelFormTest(TestCase):\n+from django.test import TestCase\n+from django import forms\n+from django.forms import modelform_factory\n+from .models import Person, Triple\n+\n+class ModelFormFormfieldCallbackTest(TestCase):\n+    def test_formfield_callback_in_meta_used_in_modelform_factory(self):\n+        def custom_callback(db_field, **kwargs):\n+            formfield = forms.CharField()\n+            formfield.widget = forms.PasswordInput()\n+            return formfield\n+\n+        class MyForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+                formfield_callback = custom_callback\n+\n+        FactoryForm = modelform_factory(Person, form=MyForm)\n+\n+        for field_name, form_field in FactoryForm.base_fields.items():\n+            self.assertEqual(type(form_field.widget), forms.PasswordInput)\n+\n+    def test_override_formfield_callback_on_modelform_factory(self):\n+        def custom_callback(db_field, **kwargs):\n+            formfield = forms.CharField()\n+            formfield.widget = forms.PasswordInput()\n+            return formfield\n+\n+        def override_callback(db_field, **kwargs):\n+            formfield = forms.CharField()\n+            formfield.widget = forms.Textarea()\n+            return formfield\n+            \n+        class MyForm(forms.ModelForm):\n+            class Meta:\n+                model = Person\n+                fields = ['id', 'name']\n+                formfield_callback = custom_callback\n+\n+        FactoryForm = modelform_factory(Person, form=MyForm, formfield_callback=override_callback)\n+\n+        for field_name, form_field in FactoryForm.base_fields.items():\n+            self.assertEqual(type(form_field.widget), forms.Textarea)\n     def test_model_form_applies_localize_to_some_fields(self):\n         class PartiallyLocalizedTripleForm(forms.ModelForm):\n             class Meta:\n",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..7db49c9 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -5,7 +5,10 @@ import re\n \n from django.core import serializers\n from django.core.serializers.base import DeserializationError\n-from django.core.serializers.json import DjangoJSONEncoder\n+from django.core import serializers\n+from django.core.exceptions import FieldError\n+from django.db import models\n+from django.db.models import Manager\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n@@ -14,6 +17,24 @@ from django.utils.translation import gettext_lazy, override\n from .models import Score\n from .tests import SerializersTestBase, SerializersTransactionTestBase\n \n+class TestTagManager(Manager):\n+    def get_queryset(self):\n+        qs = super().get_queryset()\n+        qs = qs.select_related(\"master\")\n+        return qs\n+\n+class TestTagMaster(models.Model):\n+    name = models.CharField(max_length=120)\n+\n+class TestTag(models.Model):\n+    objects = TestTagManager()\n+    name = models.CharField(max_length=120)\n+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)\n+\n+class Test(models.Model):\n+    name = models.CharField(max_length=120)\n+    tags = models.ManyToManyField(TestTag, blank=True)\n+\n \n class JsonSerializerTestCase(SerializersTestBase, TestCase):\n     serializer_name = \"json\"\n@@ -67,7 +88,18 @@ class JsonSerializerTestCase(SerializersTestBase, TestCase):\n             if field_name in obj_dict[\"fields\"]\n         ]\n \n-    def test_indentation_whitespace(self):\n+    def test_m2m_serialization_with_custom_manager_select_related(self):\n+        \"\"\"\n+        Test serialization of many-to-many fields with a custom manager using select_related.\n+        This should raise a FieldError.\n+        \"\"\"\n+        tag_master = TestTagMaster.objects.create(name=\"master\")\n+        tag = TestTag.objects.create(name=\"tag\", master=tag_master)\n+        test = Test.objects.create(name=\"test\")\n+        test.tags.add(tag)\n+\n+        with self.assertRaises(FieldError):\n+            serializers.serialize(\"json\", [test])\n         s = serializers.json.Serializer()\n         json_data = s.serialize([Score(score=5.0), Score(score=6.0)], indent=2)\n         for line in json_data.splitlines():\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_backend_macosx.py b/lib/matplotlib/tests/test_backend_macosx.py\nindex 06d044f..79a99a5 100644\n--- a/lib/matplotlib/tests/test_backend_macosx.py\n+++ b/lib/matplotlib/tests/test_backend_macosx.py\n@@ -9,9 +9,18 @@ try:\n except ImportError:\n     pytest.skip(\"These are mac only tests\", allow_module_level=True)\n \n+import pytest\n+import matplotlib.pyplot as plt\n+import pickle\n \n @pytest.mark.backend('macosx')\n-def test_cached_renderer():\n+def test_dpi_after_unpickle():\n+    fig = plt.figure(dpi=200)\n+    with open('test_dpi.pickle', 'wb') as f:\n+        pickle.dump(fig, f)\n+    with open('test_dpi.pickle', 'rb') as f:\n+        fig_unpickled = pickle.load(f)\n+    assert fig_unpickled.dpi == 200, \"DPI should remain the same after unpickling\"\n     # Make sure that figures have an associated renderer after\n     # a fig.canvas.draw() call\n     fig = plt.figure(1)\n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..0cc3d22 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6586,7 +6586,12 @@ def test_integrate(dask):\n     assert isinstance(actual.data, type(da.data))\n \n     # along y\n-    actual = da.integrate(\"y\")\n+    # Old behavior test with deprecated warning\n+    with pytest.warns(FutureWarning):\n+        da.integrate(dim=\"y\")\n+\n+    # New behavior test with coord argument\n+    actual = da.integrate(coord=\"y\")\n     expected_y = xr.DataArray(\n         np.trapz(da, da[\"y\"], axis=1),\n         dims=[\"x\"],\n",
  "pydata__xarray-4094": "",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..9f1c9ac 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -107,6 +107,37 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+import pytest\n+import re\n+from pylint.lint import Run\n+from typing import Any\n+\n+CSV_REGEX_COMMA_CASES = [\n+    (\"foo\", [\"foo\"]),\n+    (\"foo,bar\", [\"foo\", \"bar\"]),\n+    (\"foo, bar\", [\"foo\", \"bar\"]),\n+    (\"foo{1,3}\", [\"foo{1,3}\"]),\n+    (\"(foo{1,3})\", [\"(foo{1,3})\"]),\n+    # Add more cases as necessary to verify complex use cases\n+]\n+\n+\n+@pytest.mark.parametrize(\"in_string,expected\", CSV_REGEX_COMMA_CASES)\n+def test_csv_regex_comma_in_quantifier(in_string: str, expected: list[str]) -> None:\n+    \"\"\"Check that we correctly parse a comma-separated regex when there are one\n+    or more commas within quantifier expressions.\n+    \"\"\"\n+\n+    def _template_run(in_string: str) -> list[re.Pattern[Any]]:\n+        r = Run(\n+            [str(EMPTY_MODULE), rf\"--bad-names-rgxs={in_string}\"],\n+            exit=False,\n+        )\n+        bad_names_rgxs: list[re.Pattern[Any]] = r.linter.config.bad_names_rgxs\n+        return bad_names_rgxs\n+\n+    assert _template_run(in_string) == [re.compile(regex) for regex in expected]\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..29120bf 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,19 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"expression_input\",\n+    (\n+        \"None\",\n+        \"True\",\n+        \"False\",\n+    ),\n+)\n+def test_compile_with_reserved_keywords(expression_input: str) -> None:\n+    with pytest.raises(AssertionError):\n+        Expression.compile(expression_input)\n+\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..f5a5e23 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -249,7 +249,42 @@ def test_set_output_mro():\n         def transform(self, X):\n             return \"Base\"  # noqa\n \n-    class A(Base):\n+    import numpy as np\n+    import pandas as pd\n+    import pytest\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.utils._testing import assert_array_equal\n+    from sklearn.pipeline import make_union\n+    from sklearn import set_config\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series | None = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series | None = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum()\n+\n+    def test_feature_union_with_pandas_output():\n+        \"\"\"Test FeatureUnion with a pandas output configuration.\"\"\"\n+        \n+        index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+        data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+        data[\"date\"] = index.date\n+\n+        # This works with default configuration\n+        set_config(transform_output=\"default\")\n+        output_default = make_union(MyTransformer()).fit_transform(data)\n+\n+        # Using pandas configuration\n+        set_config(transform_output=\"pandas\")\n+        output_pandas = make_union(MyTransformer()).fit_transform(data)\n+\n+        # Ensure outputs are not raising errors and are equal\n+        assert_array_equal(output_default, output_pandas)\n+\n+        # Ensure that the index is preserved as required\n+        expected_index = pd.unique(data[\"date\"])\n+        assert_array_equal(output_pandas.index, expected_index)\n         pass\n \n     class B(Base):\n@@ -259,4 +294,4 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..00996e2 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -12,8 +12,34 @@ import pytest\n \n from sphinx import addnodes\n \n-\n-@pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n+from sphinx import nodes\n+from sphinx.testing.util import SphinxTestApp\n+    \n+@pytest.mark.sphinx('html', testroot='ext-autodoc-typehints')\n+def test_autodoc_typehints_none_in_description(app: SphinxTestApp, status, warning):\n+    # Set the configuration for 'description'\n+    app.config.autodoc_typehints = 'description'\n+    app.builder.build_all()\n+    \n+    content = app.env.get_doctree('index')\n+    assert isinstance(content[2], nodes.field_list)\n+    fields = list(content[2])\n+    \n+    # Check that the return type link for 'None' is created\n+    assert \"https://docs.python.org/3/library/constants.html#None\" in fields[0][0][1].astext()\n+\n+@pytest.mark.sphinx('html', testroot='ext-autodoc-typehints')\n+def test_autodoc_typehints_none_in_signature(app: SphinxTestApp, status, warning):\n+    # Set the configuration for 'signature'\n+    app.config.autodoc_typehints = 'signature'\n+    app.builder.build_all()\n+    \n+    content = app.env.get_doctree('index')\n+    assert isinstance(content[3], addnodes.desc_signature)\n+    \n+    # Check that no link for 'None' is created in the signature\n+    assert 'None' in content[3][2].astext()\n+    assert not content[3][2][0][0].hasattr('refuri')  # 'None' should not be a link\n def test_autodoc(app, status, warning):\n     app.builder.build_all()\n \n@@ -30,4 +56,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "",
  "sphinx-doc__sphinx-8551": "",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..2009de3 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -922,7 +922,8 @@ def test_info_field_list(app):\n             \"   :param age: blah blah\\n\"\n             \"   :type age: int\\n\"\n             \"   :param items: blah blah\\n\"\n-            \"   :type items: Tuple[str, ...]\\n\")\n+            \"   :type items: Tuple[str, ...]\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n     doctree = restructuredtext.parse(app, text)\n     print(doctree)\n \n@@ -976,6 +977,18 @@ def test_info_field_list(app):\n                  \")\",\n                  \" -- \",\n                  \"blah blah\"))\n+    assert_node(doctree[3][1][0][0][1][0][3][0],\n+                ([addnodes.literal_strong, \"items\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"Tuple\"],\n+                 [addnodes.literal_emphasis, \"[\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [addnodes.literal_emphasis, \"...\"],\n+                 [addnodes.literal_emphasis, \"]\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"blah blah\"))\n     assert_node(doctree[3][1][0][0][1][0][2][0][2], pending_xref,\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"Tuple\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..81df19c 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -998,6 +998,26 @@ def test_info_field_list(app):\n                  \")\",\n                  \" -- \",\n                  \"blah blah\"))\n+\n+def test_info_field_list_union_type(app):\n+    text = (\".. py:function:: bar\\n\"\n+            \"\\n\"\n+            \"   :param text: a text\\n\"\n+            \"   :type text: bytes | str\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.paragraph, ([addnodes.literal_strong, \"text\"],\n+                                            \" (\",\n+                                            [pending_xref, addnodes.literal_emphasis, \"bytes\"],\n+                                            [addnodes.literal_emphasis, \" | \"],\n+                                            [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                                            \")\",\n+                                            \" -- \",\n+                                            \"a text\")))\n+    assert_node(doctree[0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"bytes\")\n+    assert_node(doctree[0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\")\n     assert_node(doctree[3][1][0][0][1][0][3][0][2], pending_xref,\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"Dict\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "diff --git a/sympy/solvers/tests/test_solveset.py b/sympy/solvers/tests/test_solveset.py\nindex 7bd9e29..62750ea 100644\n--- a/sympy/solvers/tests/test_solveset.py\n+++ b/sympy/solvers/tests/test_solveset.py\n@@ -1047,8 +1047,35 @@ def test__solveset_multi():\n             ImageSet(Lambda(((r,),), (r, 0)), ImageSet(Lambda(r, (r,)), Interval(0, 1))),\n             ImageSet(Lambda(((theta,),), (0, theta)), ImageSet(Lambda(theta, (theta,)), Interval(0, pi))))\n \n+from sympy import Eq, cos, sin, sqrt, ConditionSet, Reals, symbols\n+from sympy.solvers.solveset import solveset\n \n-def test_conditionset():\n+x, n = symbols('x n')\n+\n+def test_issue_18188():\n+    # Test case 1: The original problem described in the issue\n+    expr1 = Eq(n*cos(n) - 3*sin(n), 0)\n+    assert solveset(expr1, n, domain=Reals) == ConditionSet(n, expr1, Reals)\n+\n+    # Test case 2: A similar equation that should also return a ConditionSet\n+    expr2 = Eq(x**2 + sqrt(x*2) + sin(x), 0)\n+    assert solveset(expr2, x, domain=Reals) == ConditionSet(x, expr2, Reals)\n+\n+    # Test case 3: An equation with trigonometric functions and polynomials\n+    expr3 = Eq(x**5 + cos(x), 0)\n+    assert solveset(expr3, x, domain=Reals) == ConditionSet(x, expr3, Reals)\n+\n+    # Test case 4: Complex trigonometric with polynomials\n+    expr4 = Eq(x**2 + sin(x) + cos(x), 0)\n+    assert solveset(expr4, x, domain=Reals) == ConditionSet(x, expr4, Reals)\n+\n+    # Test case 5: More complex expression with multiple terms\n+    expr5 = Eq(x**4 + 2*x**3 + sqrt(x)*sin(x) + cos(x), 0)\n+    assert solveset(expr5, x, domain=Reals) == ConditionSet(x, expr5, Reals)\n+\n+    # Test case 6: A case with exponential and trigonometric functions\n+    expr6 = Eq(cos(x) - x**x, 0)\n+    assert solveset(expr6, x, domain=Reals) == ConditionSet(x, expr6, Reals)\n     assert solveset(Eq(sin(x)**2 + cos(x)**2, 1), x, domain=S.Reals) == \\\n         ConditionSet(x, True, S.Reals)\n \n",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..2846087 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3276,7 +3276,21 @@ def test_factor_terms():\n     assert sqf_list(x*(x + y)) == (1, [(x, 1), (x + y, 1)])\n \n \n-def test_as_list():\n+def test_issue_8695():\n+    # Test case from the issue description\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    expected = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == expected\n+\n+    # Additional test for consistency with multiplicities\n+    p2 = (x - 2)**4 * (x + 1)**3\n+    expected2 = (1, [(x - 2, 4), (x + 1, 3)])\n+    assert sqf_list(p2) == expected2\n+\n+    # Another known polynomial with a mix of multiplicities\n+    p3 = (x - 5)**2 * (x**2 + x + 1)**2\n+    expected3 = (1, [(x - 5, 2), (x**2 + x + 1, 2)])\n+    assert sqf_list(p3) == expected3\n     # issue 14496\n     assert Poly(x**3 + 2, x, domain='ZZ').as_list() == [1, 0, 0, 2]\n     assert Poly(x**2 + y + 1, x, y, domain='ZZ').as_list() == [[1], [], [1, 1]]\n",
  "sympy__sympy-19040": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 6ddf041..8f801ee 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3255,7 +3255,20 @@ def test_issue_5786():\n         (x - I*y)*(z - I*t)), extension=[I])) == -I*t*x - t*y + x*z - I*y*z\n \n \n-def test_noncommutative():\n+def test_issue_18895():\n+    # Test case derived from the issue description\n+    z = (x - 1)*(y - 1)\n+    expanded_z = expand(z)\n+\n+    # The normal factorization should include both (x - 1) and (y - 1)\n+    assert factor(expanded_z) == (x - 1)*(y - 1)\n+\n+    # The problem described was when an extension is used\n+    # The expected behavior is the same factorization including (y - 1)\n+    assert factor(expanded_z, extension=[I]) == (x - 1)*(y - 1)\n+\n+    # Additional test case to verify no regression when using a different extension\n+    assert factor(expanded_z, extension=[I, sqrt(2)]) == (x - 1)*(y - 1)\n     class foo(Expr):\n         is_commutative=False\n     e = x/(x + x*y)\n",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..9cb5caf 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -14,6 +15,7 @@ from sympy.core.compatibility import default_sort_key\n from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum\n from sympy.functions.elementary.exponential import exp\n from sympy.testing.pytest import raises\n+from sympy.core.symbol import Symbol\n from sympy.core import I, pi\n \n b1 = Basic()\n@@ -24,7 +26,11 @@ b21 = Basic(b2, b1)\n \n def test__aresame():\n     assert not _aresame(Basic([]), Basic())\n-    assert not _aresame(Basic([]), Basic(()))\n+def test_symbol_no_dict():\n+    s = Symbol('s')\n+    assert not hasattr(s, '__dict__')\n+    with raises(AttributeError):\n+        _ = s.__dict__\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n",
  "sympy__sympy-24562": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 13e3235..6852e5d 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -364,6 +364,20 @@ def test_Rational_new():\n     assert Rational(mpq(2, 6)) == Rational(1, 3)\n     assert Rational(PythonRational(2, 6)) == Rational(1, 3)\n \n+def test_issue_24543():\n+    for p in ('1.5', 1.5, 2):\n+        for q in ('1.5', 1.5, 2):\n+            assert Rational(p, q).as_numer_denom() == Rational('%s/%s'%(p,q)).as_numer_denom()\n+\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+\n+def test_rational_str_input():\n+    # Test for specific issue with string inputs in Rational\n+    assert Rational('0.5', '100') == Rational(1, 200)\n+    assert Rational('1.5', '3') == Rational(1.5, 3)  # Additional check that similar use cases handle correctly\n+    assert Rational('3.0', '2') == Rational(1.5)\n+    assert Rational('0.1', '10') == Rational(1, 100)\n+\n     assert Rational(2, 4, gcd=1).q == 4\n     n = Rational(2, -4, gcd=1)\n     assert n.q == 4\n",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..f5a4cbf 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,20 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_choicewidget_subwidgets_id_respects_auto_id(self):\n+        \"\"\"\n+        Check if BoundWidget.id_for_label uses id from widget's attrs when auto_id is provided.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('a', 'A'), ('b', 'B')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom_id'}),\n+            )\n+\n+        form = SomeForm(auto_id='custom_prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_id_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_id_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "matplotlib__matplotlib-20676": "",
  "scikit-learn__scikit-learn-12682": "",
  "scikit-learn__scikit-learn-14629": "",
  "sphinx-doc__sphinx-9658": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 072cdc7..de7ad31 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -158,6 +158,33 @@ def test_restify_pep_585():\n                                                    \"[:py:class:`int`, ...]]\")\n \n \n+from sphinx.ext.autodoc import mock\n+from sphinx.util.typing import restify, stringify\n+\n+def test_restify_mock_with_inherited_class():\n+    # Scenario where the base class is mocked and should be reported correctly\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        class MockBase(nn.Module):\n+            pass\n+        \n+        class InheritedClass(MockBase):\n+            pass\n+\n+        assert restify(InheritedClass) == ':py:class:`tests.test_util_typing.InheritedClass`'\n+\n+def test_stringify_mock_with_inherited_class():\n+    # Scenario where the base class is mocked and should be reported correctly\n+    with mock(['torch.nn']):\n+        import torch.nn as nn\n+        class MockBase(nn.Module):\n+            pass\n+        \n+        class InheritedClass(MockBase):\n+            pass\n+\n+        assert stringify(InheritedClass) == 'tests.test_util_typing.InheritedClass'\n+\n @pytest.mark.skipif(sys.version_info < (3, 10), reason='python 3.10+ is required.')\n def test_restify_type_union_operator():\n     assert restify(int | None) == \":py:class:`int` | :py:obj:`None`\"  # type: ignore\n",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..e92ea95 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -347,6 +347,16 @@ def test_reverse_order():\n     assert Product(x*y, (x, a, b), (y, 2, 5)).reverse_order(y, x) == \\\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n+def test_issue_13546():\n+    from sympy import Symbol, Product, S\n+    n = Symbol('n')\n+    k = Symbol('k')\n+    # Test the specific example given where n = 2\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+    # General test cases to check the product for different values of 'n'\n+    assert p.subs(n, 1).doit() == S(3)  # (1 + 2**0) = 3\n+    assert p.subs(n, 3).doit() == S(105)/8  # (3 + 2**0)*(3 + 2**-1)*(3 + 2**-2) = 105/8\n \n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n@@ -357,4 +367,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}