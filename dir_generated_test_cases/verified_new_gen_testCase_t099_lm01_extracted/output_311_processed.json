{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..abfd3e3 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -55,6 +55,38 @@ compound_models = {\n             )\n }\n \n+# Additional test cases to check if the separability_matrix function works correctly for the nested CompoundModel issue\n+def test_separability_matrix_nested_compound_model():\n+    # Import necessary components inside the test module\n+    import numpy as np\n+    from astropy.modeling import models as m\n+    from astropy.modeling.separable import separability_matrix\n+    from numpy.testing import assert_array_equal\n+    \n+    # Define the models\n+    cm = m.Linear1D(10) & m.Linear1D(5)\n+    \n+    # Case 1: Simple compound model\n+    expected_simple = np.array([[True, False],\n+                                [False, True]])\n+    assert_array_equal(separability_matrix(cm), expected_simple)\n+    \n+    # Case 2: More complex compound model\n+    complex_model = m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)\n+    expected_complex = np.array([[True, True, False, False],\n+                                 [True, True, False, False],\n+                                 [False, False, True, False],\n+                                 [False, False, False, True]])\n+    assert_array_equal(separability_matrix(complex_model), expected_complex)\n+    \n+    # Case 3: Nested compound model\n+    nested_cm = m.Pix2Sky_TAN() & cm\n+    expected_nested = np.array([[True, True, False, False],\n+                                [True, True, False, False],\n+                                [False, False, True, False],\n+                                [False, False, False, True]])\n+    assert_array_equal(separability_matrix(nested_cm), expected_nested)\n+\n \n def test_coord_matrix():\n     c = _coord_matrix(p2, 'left', 2)\n",
  "astropy__astropy-13236": "",
  "astropy__astropy-13453": "",
  "astropy__astropy-13579": "",
  "astropy__astropy-14096": "",
  "astropy__astropy-14309": "",
  "astropy__astropy-14508": "",
  "astropy__astropy-14539": "diff --git a/astropy/io/fits/tests/test_diff.py b/astropy/io/fits/tests/test_diff.py\nindex 9bf4897..829d5b0 100644\n--- a/astropy/io/fits/tests/test_diff.py\n+++ b/astropy/io/fits/tests/test_diff.py\n@@ -601,7 +601,25 @@ class TestDiff(FitsTestCase):\n         assert \"13 different table data element(s) found (65.00% different)\" in report\n         assert report.count(\"more indices\") == 1\n \n-    def test_identical_files_basic(self):\n+    def test_fitsdiff_identical_vla_files(self):\n+        \"\"\"Test that FITSDiff does not report differences for identical files with VLAs.\"\"\"\n+\n+        # Create a FITS file with a VLA column\n+        col = fits.Column(name='a', format='QD', array=[[0], [0, 0]])\n+        hdu = fits.BinTableHDU.from_columns([col])\n+        filename = 'test_vla_identical.fits'\n+        \n+        # Write the HDU to a file\n+        hdu.writeto(filename, overwrite=True)\n+\n+        # Compare the file to itself using FITSDiff\n+        diff = fits.FITSDiff(filename, filename)\n+\n+        # Assert no differences are found\n+        assert diff.identical, \"FITSDiff incorrectly reported differences for identical VLA files\"\n+\n+        # Optionally print the diff report\n+        # print(diff.report())\n         \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n \n         a = np.arange(100).reshape(10, 10)\n",
  "astropy__astropy-14995": "",
  "astropy__astropy-7166": "diff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\nindex 77667e4..6891c5b 100644\n--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n@@ -84,6 +84,7 @@ def test_inherit_docstrings():\n         def __call__(self, *args):\n             pass\n \n+    # Test for normal method docstring inheritance\n     if Base.__call__.__doc__ is not None:\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\n         assert Subclass.__call__.__doc__ == \"FOO\"\n",
  "astropy__astropy-7336": "",
  "astropy__astropy-7606": "",
  "astropy__astropy-7671": "diff --git a/astropy/utils/tests/test_introspection.py b/astropy/utils/tests/test_introspection.py\nindex 852d721..f5d3130 100644\n--- a/astropy/utils/tests/test_introspection.py\n+++ b/astropy/utils/tests/test_introspection.py\n@@ -62,14 +62,15 @@ def test_find_mod_objs():\n     assert 'collections.namedtuple' not in fqns\n     assert namedtuple not in objs\n \n+from distutils.version import LooseVersion\n \n def test_minversion():\n     from types import ModuleType\n     test_module = ModuleType(str(\"test_module\"))\n     test_module.__version__ = '0.12.2'\n     good_versions = ['0.12', '0.12.1', '0.12.0.dev']\n-    bad_versions = ['1', '1.2rc1']\n+    bad_versions = ['1', '1.2rc1', '1.14dev', '1.14.0.dev']\n     for version in good_versions:\n         assert minversion(test_module, version)\n     for version in bad_versions:\n-        assert not minversion(test_module, version)\n+        assert not minversion(test_module, version)\n",
  "astropy__astropy-8707": "diff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a2103c6..fbe2586 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -79,6 +79,53 @@ class TestHeaderFunctions(FitsTestCase):\n         assert header['B'] == 'B'\n         assert header.comments['B'] == 'C'\n \n+    def test_card_from_bytes(self):\n+        \"\"\"\n+        Test loading a Card from a `bytes` object (assuming latin-1 encoding).\n+        \"\"\"\n+\n+        c = fits.Card.fromstring(b\"ABC     = 'abc'\")\n+        assert c.keyword == 'ABC'\n+        assert c.value == 'abc'\n+\n+    def test_card_from_unicode_string(self):\n+        \"\"\"\n+        Test loading a Card from a unicode `str` object.\n+        \"\"\"\n+        c = fits.Card.fromstring(\"DEF     = 'def'\")\n+        assert c.keyword == 'DEF'\n+        assert c.value == 'def'\n+\n+    def test_header_fromstring_bytes(self):\n+        \"\"\"\n+        Test reading a Header from a `bytes` string.\n+\n+        See https://github.com/astropy/astropy/issues/8706\n+        \"\"\"\n+\n+        with open(self.data('test0.fits'), 'rb') as fobj:\n+            pri_hdr_from_bytes = fits.Header.fromstring(fobj.read())\n+\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_bytes['NAXIS']\n+        assert pri_hdr == pri_hdr_from_bytes\n+        assert pri_hdr.tostring() == pri_hdr_from_bytes.tostring()\n+\n+    def test_header_fromstring_unicode_string(self):\n+        \"\"\"\n+        Test reading a Header from a unicode `str`.\n+        \"\"\"\n+\n+        with open(self.data('test0.fits'), 'r', encoding='latin-1') as fobj:\n+            header_str = fobj.read()\n+\n+        pri_hdr_from_str = fits.Header.fromstring(header_str)\n+        pri_hdr = fits.getheader(self.data('test0.fits'))\n+\n+        assert pri_hdr['NAXIS'] == pri_hdr_from_str['NAXIS']\n+        assert pri_hdr == pri_hdr_from_str\n+        assert pri_hdr.tostring() == pri_hdr_from_str.tostring()\n+\n     def test_card_constructor_default_args(self):\n         \"\"\"Test Card constructor with default argument values.\"\"\"\n \n",
  "astropy__astropy-8872": "diff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\nindex 283420f..2b5ef93 100644\n--- a/astropy/units/tests/test_quantity.py\n+++ b/astropy/units/tests/test_quantity.py\n@@ -137,8 +137,13 @@ class TestQuantityCreation:\n         assert q2.dtype == float\n         assert q2.value == float(q1.value)\n         assert q2.unit == q1.unit\n-\n-        # but we should preserve float32\n+        # but we should preserve any float32 or even float16\n+        a3_32 = np.array([1., 2.], dtype=np.float32)\n+        q3_32 = u.Quantity(a3_32, u.yr)\n+        assert q3_32.dtype == a3_32.dtype\n+        a3_16 = np.array([1., 2.], dtype=np.float16)\n+        q3_16 = u.Quantity(a3_16, u.yr)\n+        assert q3_16.dtype == a3_16.dtype\n         a3 = np.array([1., 2.], dtype=np.float32)\n         q3 = u.Quantity(a3, u.yr)\n         assert q3.dtype == a3.dtype\n@@ -150,7 +155,20 @@ class TestQuantityCreation:\n         q5 = u.Quantity(decimal.Decimal('10.25'), u.m, dtype=object)\n         assert q5.dtype == object\n \n-    def test_copy(self):\n+    def test_preserve_float64(self):\n+        # To ensure that other float types are properly tested as well\n+        a3_64 = np.array([1., 2.], dtype=np.float64)\n+        q3_64 = u.Quantity(a3_64, u.yr)\n+        assert q3_64.dtype == a3_64.dtype\n+\n+        a3_128 = np.array([1., 2.], dtype=np.float128)\n+        q3_128 = u.Quantity(a3_128, u.yr)\n+        assert q3_128.dtype == a3_128.dtype\n+        # Ensure np.float remains float64\n+        q_float = u.Quantity(np.float(1), u.yr)\n+        assert q_float.dtype == np.dtype('float64')\n+        q_float_ = u.Quantity(np.float_(1), u.yr)\n+        assert q_float_.dtype == np.dtype('float64')\n \n         # By default, a new quantity is constructed, but not if copy=False\n \n",
  "django__django-10097": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex 90c3285..237fc3b 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -24,8 +24,8 @@ except ImportError:\n     PILLOW_IS_INSTALLED = False\n else:\n     PILLOW_IS_INSTALLED = True\n-\n-NOW = datetime.now()\n+from django.core.exceptions import ValidationError\n+from django.core.validators import URLValidator\n EXTENDED_SCHEMES = ['http', 'https', 'ftp', 'ftps', 'git', 'file', 'git+ssh']\n \n TEST_DATA = [\n@@ -216,6 +216,15 @@ TEST_DATA = [\n     (URLValidator(EXTENDED_SCHEMES), 'file://localhost/path', None),\n     (URLValidator(EXTENDED_SCHEMES), 'git://example.com/', None),\n     (URLValidator(EXTENDED_SCHEMES), 'git+ssh://git@github.com/example/hg-git.git', None),\n+    \n+    # Test cases for invalid characters in userinfo of URL\n+    (URLValidator(), 'http://foo@bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo/bar@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar:baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar@baz@example.com', ValidationError),\n+    (URLValidator(), 'http://foo:bar/baz@example.com', ValidationError),\n+    (URLValidator(), 'http://invalid-.com/?m=foo@example.com', ValidationError),\n+    (URLValidator(), \"http://-.~_!$&'()*+,;=%40:80%2f@example.com\", ValidationError),\n \n     (URLValidator(EXTENDED_SCHEMES), 'git://-invalid.com', ValidationError),\n     # Trailing newlines not accepted\n",
  "django__django-10880": "",
  "django__django-10914": "diff --git a/tests/test_utils/tests.py b/tests/test_utils/tests.py\nindex 3760491..5b5f2ca 100644\n--- a/tests/test_utils/tests.py\n+++ b/tests/test_utils/tests.py\n@@ -1093,6 +1093,12 @@ class OverrideSettingsTests(SimpleTestCase):\n         with self.settings(MEDIA_URL='/test_value/'):\n             self.assertEqual(default_storage.base_url, '/test_value/')\n \n+    def test_default_file_upload_permissions(self):\n+        \"\"\"\n+        By default, the FILE_UPLOAD_PERMISSIONS should be set to 0o644.\n+        \"\"\"\n+        self.assertEqual(default_storage.file_permissions_mode, 0o644)\n+\n     def test_override_file_upload_permissions(self):\n         \"\"\"\n         Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\n",
  "django__django-10973": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex 9eb05c7..2e8f89f 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -1,8 +1,10 @@\n+\n import os\n import signal\n from unittest import mock\n \n from django.db.backends.postgresql.client import DatabaseClient\n+import subprocess\n from django.test import SimpleTestCase\n \n \n@@ -26,7 +28,7 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         self.subprocess_args = None\n         self.pgpass = None\n         with mock.patch('subprocess.call', new=_mock_subprocess_call):\n-            DatabaseClient.runshell_db(dbinfo)\n+            DatabaseClient.runshell_db(dbinfo, mock_env=env)\n         return self.subprocess_args, self.pgpass\n \n     def test_basic(self):\n@@ -84,7 +86,29 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n-    def test_accent(self):\n+    def test_subprocess_run_with_pgpassword(self):\n+        \"\"\"\n+        Test that subprocess.run is called with the correct environment, including PGPASSWORD.\n+        \"\"\"\n+        def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.subprocess_args = list(*args)\n+            self.pgpassword = env.get('PGPASSWORD')\n+            return subprocess.CompletedProcess(self.subprocess_args, 0)\n+\n+        dbinfo = {\n+            'database': 'dbname',\n+            'user': 'someuser',\n+            'password': 'somepassword',\n+            'host': 'somehost',\n+            'port': '444',\n+        }\n+        \n+        with mock.patch('subprocess.run', new=_mock_subprocess_run):\n+            subprocess_args, pgpassword = self._run_it(dbinfo)\n+        \n+        expected_command = ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname']\n+        self.assertEqual(subprocess_args, expected_command)\n+        self.assertEqual(pgpassword, 'somepassword')\n         username = 'r\u00f4le'\n         password = 's\u00e9same'\n         pgpass_string = 'somehost:444:dbname:%s:%s' % (username, password)\n@@ -113,4 +137,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         with mock.patch('subprocess.check_call', new=_mock_subprocess_call):\n             DatabaseClient.runshell_db({})\n         # dbshell restores the original handler.\n-        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n+        self.assertEqual(sigint_handler, signal.getsignal(signal.SIGINT))\n",
  "django__django-11066": "diff --git a/tests/contenttypes_tests/test_operations.py b/tests/contenttypes_tests/test_operations.py\nindex ff1d778..ef5ff05 100644\n--- a/tests/contenttypes_tests/test_operations.py\n+++ b/tests/contenttypes_tests/test_operations.py\n@@ -3,6 +3,7 @@ from django.conf import settings\n from django.contrib.contenttypes import management as contenttypes_management\n from django.contrib.contenttypes.models import ContentType\n from django.core.management import call_command\n+from django.contrib.contenttypes.models import ContentType\n from django.db import migrations, models\n from django.test import TransactionTestCase, override_settings\n \n@@ -47,7 +48,22 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n \n-    def test_missing_content_type_rename_ignore(self):\n+    def test_existing_content_type_rename_other_database(self):\n+        class TestRouter:\n+            def db_for_write(self, model, **hints):\n+                return 'other'\n+\n+        with override_settings(DATABASE_ROUTERS=[TestRouter()]):\n+            ContentType.objects.using('other').create(app_label='contenttypes_tests', model='foo')\n+            other_content_types = ContentType.objects.using('other').filter(app_label='contenttypes_tests')\n+            \n+            call_command('migrate', 'contenttypes_tests', database='other', interactive=False, verbosity=0)\n+            self.assertFalse(other_content_types.filter(model='foo').exists())\n+            self.assertTrue(other_content_types.filter(model='renamedfoo').exists())\n+            \n+            call_command('migrate', 'contenttypes_tests', 'zero', database='other', interactive=False, verbosity=0)\n+            self.assertTrue(other_content_types.filter(model='foo').exists())\n+            self.assertFalse(other_content_types.filter(model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', database='default', interactive=False, verbosity=0,)\n         self.assertFalse(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n@@ -63,4 +79,4 @@ class ContentTypeOperationsTests(TransactionTestCase):\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n         call_command('migrate', 'contenttypes_tests', 'zero', database='default', interactive=False, verbosity=0)\n         self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='foo').exists())\n-        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n+        self.assertTrue(ContentType.objects.filter(app_label='contenttypes_tests', model='renamedfoo').exists())\n",
  "django__django-11095": "diff --git a/tests/generic_inline_admin/tests.py b/tests/generic_inline_admin/tests.py\nindex 9dd9fd9..8dcf3e4 100644\n--- a/tests/generic_inline_admin/tests.py\n+++ b/tests/generic_inline_admin/tests.py\n@@ -420,12 +420,49 @@ class GenericInlineModelAdminTest(SimpleTestCase):\n         class AlternateInline(GenericTabularInline):\n             form = MediaForm\n             model = Media\n+from django.test import RequestFactory, TestCase\n+from django.contrib import admin\n+from .models import Media, Episode\n+\n+class TestGetInlines(TestCase):\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.site = admin.AdminSite()\n+\n+    def test_get_inlines_method(self):\n+        class MediaInline(GenericTabularInline):\n+            model = Media\n+\n+        class AlternateInline(GenericTabularInline):\n+            model = Media\n \n         class EpisodeAdmin(admin.ModelAdmin):\n+            inlines = (AlternateInline, MediaInline)\n+\n+            def get_inlines(self, request, obj=None):\n+                if hasattr(request, 'name'):\n+                    if request.name == 'alternate':\n+                        return self.inlines[:1]\n+                    elif request.name == 'media':\n+                        return self.inlines[1:2]\n+                return []\n+\n+        ma = EpisodeAdmin(Episode, self.site)\n+\n+        request = self.factory.get('/')\n+        self.assertEqual(ma.get_inlines(request, None), [])\n+        self.assertEqual(ma.get_inline_instances(request), [])\n+\n+        for name, inline_class in (('alternate', AlternateInline), ('media', MediaInline)):\n+            request.name = name\n+            self.assertEqual(ma.get_inlines(request, None), (inline_class,))\n+            inlines = ma.get_inline_instances(request)\n+            self.assertEqual(len(inlines), 1)\n+            self.assertEqual(type(inlines[0]), inline_class)\n             inlines = [\n                 AlternateInline, MediaInline\n             ]\n         ma = EpisodeAdmin(Episode, self.site)\n         inlines = ma.get_inline_instances(request)\n         for (formset, inline), other_inline in zip(ma.get_formsets_with_inlines(request), inlines):\n-            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n+            self.assertIsInstance(formset, other_inline.get_formset(request).__class__)\n",
  "django__django-11099": "diff --git a/tests/auth_tests/test_validators.py b/tests/auth_tests/test_validators.py\nindex 688e6ff..e5f4d1a 100644\n--- a/tests/auth_tests/test_validators.py\n+++ b/tests/auth_tests/test_validators.py\n@@ -237,8 +237,19 @@ class UsernameValidatorsTests(SimpleTestCase):\n         invalid_usernames = [\n             \"o'connell\", \"\u0639\u0628\u062f \u0627\u0644\",\n             \"zerowidth\\u200Bspace\", \"nonbreaking\\u00A0space\",\n-            \"en\\u2013dash\",\n+            \"en\\u2013dash\", \"trailingnewline\\n\",\n+            'trailingnewline\\u000A'\n         ]\n+\n+    def test_unicode_validator_trailing_newline(self):\n+        v = validators.UnicodeUsernameValidator()\n+        with self.assertRaises(ValidationError):\n+            v('username_with_newline\\n')\n+\n+    def test_ascii_validator_trailing_newline(self):\n+        v = validators.ASCIIUsernameValidator()\n+        with self.assertRaises(ValidationError):\n+            v('username_with_newline\\n')\n         v = validators.UnicodeUsernameValidator()\n         for valid in valid_usernames:\n             with self.subTest(valid=valid):\n@@ -258,4 +269,4 @@ class UsernameValidatorsTests(SimpleTestCase):\n         for invalid in invalid_usernames:\n             with self.subTest(invalid=invalid):\n                 with self.assertRaises(ValidationError):\n-                    v(invalid)\n+                    v(invalid)\n",
  "django__django-11119": "diff --git a/tests/template_tests/test_engine.py b/tests/template_tests/test_engine.py\nindex ba32db8..0c57470 100644\n--- a/tests/template_tests/test_engine.py\n+++ b/tests/template_tests/test_engine.py\n@@ -10,11 +10,34 @@ from .utils import ROOT, TEMPLATE_DIR\n OTHER_DIR = os.path.join(ROOT, 'other_templates')\n \n \n+from django.utils.safestring import mark_safe\n+\n class RenderToStringTest(SimpleTestCase):\n \n     def setUp(self):\n         self.engine = Engine(dirs=[TEMPLATE_DIR])\n \n+    def test_autoescape_on(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': '<script>'}),\n+            'obj:&lt;script&gt;\\n',\n+        )\n+\n+    def test_autoescape_off_with_safe_string(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=False)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': mark_safe('<script>')}),\n+            'obj:<script>\\n',\n+        )\n+\n+    def test_autoescape_on_with_escaped_string(self):\n+        engine = Engine(dirs=[TEMPLATE_DIR], autoescape=True)\n+        self.assertEqual(\n+            engine.render_to_string('test_context.html', {'obj': mark_safe('<script>')}),\n+            'obj:<script>\\n',\n+        )\n+\n     def test_basic_context(self):\n         self.assertEqual(\n             self.engine.render_to_string('test_context.html', {'obj': 'test'}),\n",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..fd14b56 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -458,7 +458,34 @@ class HttpResponseTests(unittest.TestCase):\n                 HttpResponsePermanentRedirect(url)\n \n \n-class HttpResponseSubclassesTests(SimpleTestCase):\n+    def test_memoryview_content(self):\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n+    def test_memoryview_large_content(self):\n+        large_content = memoryview(b'a' * 1024 * 1024)  # 1 MB of data\n+        r = HttpResponse(large_content)\n+        self.assertEqual(r.content, b'a' * 1024 * 1024)\n+\n+    def test_memoryview_with_text_content(self):\n+        text_content = memoryview(b'This is a test.')\n+        r = HttpResponse(text_content)\n+        self.assertEqual(r.content, b'This is a test.')\n+\n+    def test_memoryview_empty_content(self):\n+        empty_content = memoryview(b'')\n+        r = HttpResponse(empty_content)\n+        self.assertEqual(r.content, b'')\n+\n+    def test_memoryview_non_contiguous(self):\n+        content = memoryview(bytearray(b'abcdefgh'))[::2]  # Non-contiguous memoryview\n+        r = HttpResponse(content)\n+        self.assertEqual(r.content, b'aceg')\n+\n+    def test_memoryview_immutable(self):\n+        immut_mem = memoryview(b'immut')\n+        r = HttpResponse(immut_mem)\n+        self.assertEqual(r.content, b'immut')\n     def test_redirect(self):\n         response = HttpResponseRedirect('/redirected/')\n         self.assertEqual(response.status_code, 302)\n",
  "django__django-11141": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex b5a87e7..070f91f 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -501,7 +501,25 @@ class LoaderTests(TestCase):\n         self.assertEqual(plan, expected_plan)\n \n     @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_private'})\n-    def test_ignore_files(self):\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_namespace_package'})\n+    def test_loading_namespace_package_without_init_py(self):\n+        \"\"\"Test loading of migration directories without an __init__.py file.\"\"\"\n+        migration_loader = MigrationLoader(connection)\n+        migration_loader.load_disk()\n+        migrations = [name for app, name in migration_loader.disk_migrations if app == 'migrations']\n+        self.assertEqual(migrations, ['0001_initial'])\n+\n+    def test_loading_namespace_package_with_init_py(self):\n+        \"\"\"Test loading of migration directories with an __init__.py file.\"\"\"\n+        with self.temporary_migration_module() as migration_dir:\n+            # Create an __init__.py file in the migrations directory.\n+            init_file = os.path.join(migration_dir, '__init__.py')\n+            with open(init_file, 'w') as f:\n+                f.write('# Init file for migrations package')\n+            migration_loader = MigrationLoader(connection)\n+            migration_loader.load_disk()\n+            migrations = [name for app, name in migration_loader.disk_migrations if app == 'migrations']\n+            self.assertEqual(migrations, ['0001_initial'])\n         \"\"\"Files prefixed with underscore, tilde, or dot aren't loaded.\"\"\"\n         loader = MigrationLoader(connection)\n         loader.load_disk()\n@@ -509,6 +527,12 @@ class LoaderTests(TestCase):\n         self.assertEqual(migrations, ['0001_initial'])\n \n \n+import os\n+import compileall\n+from django.test import override_settings\n+from django.db.migrations.loader import MigrationLoader\n+from django.db import connection\n+\n class PycLoaderTests(MigrationTestBase):\n \n     def test_valid(self):\n",
  "django__django-11149": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 296cfba..6de9980 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -654,8 +654,42 @@ class TestInlinePermissions(TestCase):\n         self.assertContains(response, 'Add another Inner2')\n         self.assertContains(response, '<input type=\"hidden\" id=\"id_inner2_set-TOTAL_FORMS\" '\n                             'value=\"3\" name=\"inner2_set-TOTAL_FORMS\">', html=True)\n+    def test_inline_add_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(reverse('admin:admin_inlines_author_add'))\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"0\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertNotContains(response, 'Add another Author-Book Relationship')\n \n-    def test_inline_change_m2m_add_perm(self):\n+    def test_inline_change_m2m_view_only_perm(self):\n+        permission = Permission.objects.get(codename='view_book', content_type=self.book_ct)\n+        self.user.user_permissions.add(permission)\n+        response = self.client.get(self.author_change_url)\n+        self.assertIs(response.context['inline_admin_formset'].has_view_permission, True)\n+        self.assertIs(response.context['inline_admin_formset'].has_add_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_change_permission, False)\n+        self.assertIs(response.context['inline_admin_formset'].has_delete_permission, False)\n+        self.assertContains(response, '<h2>Author-book relationships</h2>')\n+        self.assertContains(\n+            response,\n+            '<input type=\"hidden\" name=\"Author_books-TOTAL_FORMS\" value=\"1\" id=\"id_Author_books-TOTAL_FORMS\">',\n+            html=True,\n+        )\n+        self.assertContains(response, '<p>%s</p>' % Author.books.all().first())\n+        self.assertNotContains(\n+            response,\n+            '<input type=\"checkbox\" name=\"Author_books-0-DELETE\" id=\"id_Author_books-0-DELETE\">',\n+            html=True,\n+        )\n         permission = Permission.objects.get(codename='add_book', content_type=self.book_ct)\n         self.user.user_permissions.add(permission)\n         response = self.client.get(self.author_change_url)\n",
  "django__django-11163": "",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..f55ccfe 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,7 +1,9 @@\n+\n from math import ceil\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n+from django.db.models.deletion import Collector\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n \n from .models import (\n",
  "django__django-11206": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 5fc4bdd..049908c 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -95,6 +95,12 @@ class TestNumberFormat(SimpleTestCase):\n             ('1e-11', 8, '0.00000000'),\n             ('1' + ('0' * 300), 3, '1.000e+300'),\n             ('0.{}1234'.format('0' * 299), 3, '1.234e-300'),\n+            ('0.{}1234'.format('0' * 199), 2, '0.00'),\n+            ('0.{}56789'.format('0' * 199), 5, '0.00000'),\n+            ('0.{}1'.format('0' * 250), 2, '0.00'),\n+            ('0.{}1'.format('0' * 200), None, '1e-200'),\n+            ('1e-199', 2, '0.00'),\n+            ('1e-200', 2, '0.00'),\n         ]\n         for value, decimal_pos, expected_value in tests:\n             with self.subTest(value=value):\n",
  "django__django-11211": "diff --git a/tests/prefetch_related/models.py b/tests/prefetch_related/models.py\nindex 3ce4b3f..96d1ea3 100644\n--- a/tests/prefetch_related/models.py\n+++ b/tests/prefetch_related/models.py\n@@ -1,3 +1,18 @@\n+\n+import uuid\n+\n+class Foo(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n+    name = models.CharField(max_length=50)\n+\n+class Bar(models.Model):\n+    foo_content_type = models.ForeignKey(\n+        ContentType, related_name='actor',\n+        on_delete=models.CASCADE, db_index=True\n+    )\n+    foo_object_id = models.CharField(max_length=255, db_index=True)\n+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')\n+\n import uuid\n \n from django.contrib.contenttypes.fields import (\n",
  "django__django-11239": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex b843072..3449483 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -17,12 +17,13 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         - The the value of the PGPASSWORD environment variable, or None.\n         \"\"\"\n         def _mock_subprocess_run(*args, env=os.environ, **kwargs):\n+            self.pg_env = {key: env[key] for key in env if key.startswith('PG')}\n             self.subprocess_args = list(*args)\n             self.pgpassword = env.get('PGPASSWORD')\n             return subprocess.CompletedProcess(self.subprocess_args, 0)\n         with mock.patch('subprocess.run', new=_mock_subprocess_run):\n             DatabaseClient.runshell_db(dbinfo)\n-        return self.subprocess_args, self.pgpassword\n+        return self.subprocess_args, self.pg_env\n \n     def test_basic(self):\n         self.assertEqual(\n@@ -38,6 +39,28 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n             )\n         )\n \n+    def test_ssl_certificate(self):\n+        self.assertEqual(\n+            self._run_it({\n+                'database': 'dbname',\n+                'user': 'someuser',\n+                'host': 'somehost',\n+                'port': '444',\n+                'sslmode': 'verify-ca',\n+                'sslrootcert': 'root.crt',\n+                'sslcert': 'client.crt',\n+                'sslkey': 'client.key',\n+            }), (\n+                ['psql', '-U', 'someuser', '-h', 'somehost', '-p', '444', 'dbname'],\n+                {\n+                    'PGSSLMODE': 'verify-ca',\n+                    'PGSSLROOTCERT': 'root.crt',\n+                    'PGSSLCERT': 'client.crt',\n+                    'PGSSLKEY': 'client.key',\n+                },\n+            )\n+        )\n+\n     def test_nopass(self):\n         self.assertEqual(\n             self._run_it({\n",
  "django__django-11265": "diff --git a/tests/filtered_relation/tests.py b/tests/filtered_relation/tests.py\nindex a587c22..9999a72 100644\n--- a/tests/filtered_relation/tests.py\n+++ b/tests/filtered_relation/tests.py\n@@ -81,6 +81,29 @@ class FilteredRelationTests(TestCase):\n                     (self.book3, self.author2),\n                     (self.book4, self.author1),\n                 ], lambda x: (x, x.author_join))\n+    \n+    def test_with_exclude(self):\n+        \"\"\"\n+        Verify that using exclude on a queryset with an annotated FilteredRelation\n+        doesn't throw a FieldError and behaves as expected.\n+        \"\"\"\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).exclude(book_alice__isnull=False),\n+            [self.author2],\n+        )\n+\n+    def test_filter_exclude_combination(self):\n+        \"\"\"\n+        Test a combination where a filter and exclude are used together on an annotated FilteredRelation.\n+        \"\"\"\n+        self.assertSequenceEqual(\n+            Author.objects.annotate(\n+                book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),\n+            ).filter(book_alice__isnull=False).exclude(book_alice__author__name='Author 1'),\n+            []\n+        )\n \n     def test_without_join(self):\n         self.assertSequenceEqual(\n",
  "django__django-11276": "",
  "django__django-11292": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex b016284..cbd0ce0 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -243,6 +243,24 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertNoOutput(err)\n         self.assertEqual(out.strip(), '/PREFIX/some/url/')\n \n+    def test_skip_checks_option(self):\n+        \"\"\"\n+        Test that the --skip-checks option skips system checks when running a command.\n+        \"\"\"\n+        # Ensure the settings file triggers a check error when `skip_checks` is not used.\n+        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n+            'STATICFILES_DIRS': '\"foo\"',  # Incorrect type for STATICFILES_DIRS.\n+        })\n+        \n+        # Run with --skip-checks and ensure no error output is produced.\n+        out, err = self.run_manage(['set_option', '--skip-checks', '--set', 'foo'])\n+        self.assertNoOutput(err)\n+        self.assertEqual(out.strip(), 'Set foo')\n+\n+        # Run without --skip-checks and check for error output indicating checks failed.\n+        _, err_no_skip = self.run_manage(['set_option', '--set', 'foo'])\n+        self.assertIn('staticfiles.E001', err_no_skip)\n+\n     def test_disallowed_abbreviated_options(self):\n         \"\"\"\n         To avoid conflicts with custom options, commands don't allow\n",
  "django__django-11333": "diff --git a/tests/urlpatterns/test_resolvers.py b/tests/urlpatterns/test_resolvers.py\nindex a9c1edd..faa19c2 100644\n--- a/tests/urlpatterns/test_resolvers.py\n+++ b/tests/urlpatterns/test_resolvers.py\n@@ -1,9 +1,34 @@\n+\n from django.test import SimpleTestCase\n-from django.urls.resolvers import RegexPattern, RoutePattern\n+from django.test.utils import override_settings\n+from django.urls.resolvers import RegexPattern, RoutePattern, get_resolver\n from django.utils.translation import gettext_lazy as _\n \n \n-class RegexPatternTests(SimpleTestCase):\n+class ResolverCacheTests(SimpleTestCase):\n+    \n+    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n+    def test_resolver_cache_default__root_urlconf(self):\n+        # resolver for a default URLconf (passing no argument) and for the\n+        # settings.ROOT_URLCONF is the same cached object.\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        self.assertIsNot(get_resolver(), get_resolver('urlpatterns.path_dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF='urlpatterns.dynamic_urls')\n+    def test_resolver_cache_after_request_handling_with_different_urls(self):\n+        # Test if the cache shares URLResolver object for the same URLs after request handling\n+        self.assertIs(get_resolver(), get_resolver('urlpatterns.dynamic_urls'))\n+        with override_settings(ROOT_URLCONF='urlpatterns.path_urls'):\n+            # Even after changing the ROOT_URLCONF, the cache is different for different paths\n+            self.assertIsNot(get_resolver(), get_resolver('urlpatterns.dynamic_urls'))\n+\n+    @override_settings(ROOT_URLCONF=None)\n+    def test_resolver_cache_without_set_urlconf_called(self):\n+        # Ensure that without set_urlconf being called, resolver uses ROOT_URLCONF\n+        try:\n+            self.assertIs(get_resolver(), get_resolver('urlpatterns.path_urls'))\n+        except Exception as e:\n+            self.fail(f\"Unexpected exception occurred: {e}\")\n \n     def test_str(self):\n         self.assertEqual(str(RegexPattern(_('^translated/$'))), '^translated/$')\n@@ -12,4 +37,4 @@ class RegexPatternTests(SimpleTestCase):\n class RoutePatternTests(SimpleTestCase):\n \n     def test_str(self):\n-        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n+        self.assertEqual(str(RoutePattern(_('translated/'))), 'translated/')\n",
  "django__django-11451": "diff --git a/tests/auth_tests/test_auth_backends.py b/tests/auth_tests/test_auth_backends.py\nindex b010b42..9ac31ff 100644\n--- a/tests/auth_tests/test_auth_backends.py\n+++ b/tests/auth_tests/test_auth_backends.py\n@@ -226,8 +226,41 @@ class BaseModelBackendTest:\n         authenticate(username='no_such_user', password='test')\n         self.assertEqual(CountingMD5PasswordHasher.calls, 1)\n \n+from django.test import override_settings\n+from django.contrib.auth import authenticate\n+from django.contrib.auth.models import User\n+\n+class CountingMD5PasswordHasher:\n+    calls = 0\n+\n+    def set_password(self, password):\n+        CountingMD5PasswordHasher.calls += 1\n \n class ModelBackendTest(BaseModelBackendTest, TestCase):\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_without_username_and_password(self):\n+        \"\"\"Ensure no DB query and no password hash if both username and password are None.\"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            self.assertIsNone(authenticate())\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_with_username_none(self):\n+        \"\"\"Ensure no DB query and no password hash if username is None.\"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            self.assertIsNone(authenticate(username=None, password='somepassword'))\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n+\n+    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n+    def test_authentication_with_password_none(self):\n+        \"\"\"Ensure no DB query and no password hash if password is None.\"\"\"\n+        CountingMD5PasswordHasher.calls = 0\n+        with self.assertNumQueries(0):\n+            self.assertIsNone(authenticate(username='someusername', password=None))\n+        self.assertEqual(CountingMD5PasswordHasher.calls, 0)\n     \"\"\"\n     Tests for the ModelBackend using the default User model.\n     \"\"\"\n",
  "django__django-11490": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex e627a0d..e529fc2 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -124,7 +124,16 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    def test_union_with_two_annotated_values_list(self):\n+    def test_union_with_values_list_column_change(self):\n+        ReservedName.objects.create(name='a', order=2)\n+        qs1 = ReservedName.objects.all()\n+        \n+        # Test when values_list changes columns\n+        reserved_name = qs1.union(qs1).values_list('name', 'order').get()\n+        self.assertEqual(reserved_name, ('a', 2))\n+        \n+        reserved_order = qs1.union(qs1).values_list('order').get()\n+        self.assertEqual(reserved_order, (2,))\n         qs1 = Number.objects.filter(num=1).annotate(\n             count=Value(0, IntegerField()),\n         ).values_list('num', 'count')\n",
  "django__django-11532": "diff --git a/tests/mail/tests.py b/tests/mail/tests.py\nindex a6f0e17..714a119 100644\n--- a/tests/mail/tests.py\n+++ b/tests/mail/tests.py\n@@ -7,6 +7,7 @@ import smtpd\n import sys\n import tempfile\n import threading\n+from unittest import mock\n from email import charset, message_from_binary_file, message_from_bytes\n from email.header import Header\n from email.mime.text import MIMEText\n",
  "django__django-11551": "diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py\nindex debaf8a..7654473 100644\n--- a/tests/modeladmin/test_checks.py\n+++ b/tests/modeladmin/test_checks.py\n@@ -1,10 +1,11 @@\n+\n from django import forms\n from django.contrib.admin import BooleanFieldListFilter, SimpleListFilter\n from django.contrib.admin.options import VERTICAL, ModelAdmin, TabularInline\n from django.contrib.admin.sites import AdminSite\n from django.core.checks import Error\n from django.db.models import F\n-from django.db.models.functions import Upper\n+from django.db.models import F, Field, Model\n from django.forms.models import BaseModelFormSet\n from django.test import SimpleTestCase\n \n",
  "django__django-11555": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex d1363b3..dcf3eda 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -9,7 +9,9 @@ from django.db.models.functions import Upper\n from django.test import TestCase\n from django.utils.deprecation import RemovedInDjango31Warning\n \n-from .models import Article, Author, OrderedByFArticle, Reference\n+from .models import Article, Author, ChildArticle, OrderedByFArticle, Reference\n+from datetime import datetime\n+from django.db import models\n \n \n class OrderingTests(TestCase):\n@@ -462,7 +464,33 @@ class OrderingTests(TestCase):\n             attrgetter('headline')\n         )\n \n-    def test_deprecated_values_annotate(self):\n+    def test_order_by_ptr_field_with_default_ordering_by_expression(self):\n+        ca1 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_2,\n+        )\n+        ca2 = ChildArticle.objects.create(\n+            headline='h2',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca3 = ChildArticle.objects.create(\n+            headline='h3',\n+            pub_date=datetime(2005, 7, 27),\n+            author=self.author_1,\n+        )\n+        ca4 = ChildArticle.objects.create(headline='h1', pub_date=datetime(2005, 7, 28))\n+        articles = ChildArticle.objects.order_by('article_ptr')\n+        self.assertSequenceEqual(articles, [ca4, ca2, ca1, ca3])\n+\n+    def test_order_by_with_ordering_expression(self):\n+        obfa1 = OrderedByFArticle.objects.create(headline=\"OF Article 1\", pub_date=datetime(2005, 7, 26), author=self.author_2)\n+        obfa2 = OrderedByFArticle.objects.create(headline=\"OF Article 2\", pub_date=datetime(2005, 7, 27), author=self.author_1)\n+        obfa3 = OrderedByFArticle.objects.create(headline=\"OF Article 3\", pub_date=datetime(2005, 7, 28))\n+      \n+        articles = OrderedByFArticle.objects.order_by('id')\n+        self.assertSequenceEqual(articles, [obfa1, obfa2, obfa3])\n         msg = (\n             \"Article QuerySet won't use Meta.ordering in Django 3.1. Add \"\n             \".order_by('-pub_date', 'headline', OrderBy(F(author__name), \"\n",
  "django__django-11603": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 2b8f813..f761c5b 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -391,6 +391,30 @@ class AggregateTestCase(TestCase):\n         vals = Book.objects.aggregate(Count(\"rating\", distinct=True))\n         self.assertEqual(vals, {\"rating__count\": 4})\n \n+    def test_distinct_on_multiple_aggregates(self):\n+        \"\"\"\n+        Test DISTINCT support on Avg, Sum, Min, and Max aggregates.\n+        \"\"\"\n+        from django.db.models import Avg, Sum, Min, Max\n+\n+        data = Book.objects.all()\n+\n+        # Test DISTINCT Avg\n+        avg_rating = data.aggregate(distinct_avg=Avg('rating', distinct=True))\n+        self.assertEqual(avg_rating['distinct_avg'], 4.125)\n+\n+        # Test DISTINCT Sum\n+        sum_rating = data.aggregate(distinct_sum=Sum('rating', distinct=True))\n+        self.assertEqual(sum_rating['distinct_sum'], 16.5)\n+\n+        # Test DISTINCT Min\n+        min_rating = data.aggregate(distinct_min=Min('rating', distinct=True))\n+        self.assertEqual(min_rating['distinct_min'], 3.0)\n+\n+        # Test DISTINCT Max\n+        max_rating = data.aggregate(distinct_max=Max('rating', distinct=True))\n+        self.assertEqual(max_rating['distinct_max'], 5.0)\n+\n     def test_count_star(self):\n         with self.assertNumQueries(1) as ctx:\n             Book.objects.aggregate(n=Count(\"*\"))\n",
  "django__django-11740": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex a98fff5..235b498 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -718,7 +718,40 @@ class AutodetectorTests(TestCase):\n         self.assertOperationTypes(changes, 'testapp', 0, [\"RemoveField\"])\n         self.assertOperationAttributes(changes, \"testapp\", 0, 0, name=\"name\")\n \n-    def test_alter_field(self):\n+    def test_alter_uuid_field_to_fk(self):\n+        \"\"\"\n+        Test that altering a UUIDField to a ForeignKey generates the correct migration\n+        with dependencies for the target model.\n+        \"\"\"\n+        # Define states with a UUID field\n+        before = [\n+            ModelState(\"testapp1\", \"App1\", [\n+                (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                (\"text\", models.CharField(max_length=100)),\n+                (\"another_app\", models.UUIDField(null=True, blank=True)),\n+            ]),\n+            ModelState(\"testapp2\", \"App2\", [\n+                (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                (\"text\", models.CharField(max_length=100)),\n+            ])\n+        ]\n+        # Define states after changing UUID to ForeignKey\n+        after = [\n+            ModelState(\"testapp1\", \"App1\", [\n+                (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                (\"text\", models.CharField(max_length=100)),\n+                (\"another_app\", models.ForeignKey(\"testapp2.App2\", null=True, blank=True, on_delete=models.SET_NULL)),\n+            ]),\n+            ModelState(\"testapp2\", \"App2\", [\n+                (\"id\", models.UUIDField(primary_key=True, unique=True, default=uuid.uuid4, editable=False)),\n+                (\"text\", models.CharField(max_length=100)),\n+            ])\n+        ]\n+        changes = self.get_changes(before, after)\n+        # Ensure there's a migration that alters the field to a ForeignKey\n+        self.assertNumberMigrations(changes, 'testapp1', 1)\n+        self.assertOperationTypes(changes, 'testapp1', 0, [\"AlterField\"])\n+        self.assertMigrationDependencies(changes, 'testapp1', 0, [(\"testapp2\", \"__first__\")])\n         \"\"\"Tests autodetection of new fields.\"\"\"\n         changes = self.get_changes([self.author_name], [self.author_name_longer])\n         # Right number/type of migrations?\n@@ -2399,4 +2432,4 @@ class AutodetectorTests(TestCase):\n         changes = self.get_changes([Animal, Dog], [Animal])\n         self.assertNumberMigrations(changes, 'app', 1)\n         self.assertOperationTypes(changes, 'app', 0, ['DeleteModel'])\n-        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n+        self.assertOperationAttributes(changes, 'app', 0, 0, name='Dog')\n",
  "django__django-11749": "",
  "django__django-11790": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 440150b..e7b8602 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -436,8 +436,29 @@ class AuthenticationFormTest(TestDataMixin, TestCase):\n         form = AuthenticationForm(None, data)\n         self.assertEqual(form.fields['username'].max_length, 254)\n         self.assertEqual(form.errors, {})\n+    \n+    def test_username_field_html_maxlength_attribute(self):\n+        \"\"\"Test whether the maxlength attribute is set for username field\"\"\"\n+        data = {\n+            'username': 'userwithlongusername',  # To ensure field is considered\n+            'password': 'password',\n+        }\n+        form = AuthenticationForm(None, data)\n+        \n+        # Check if maxlength attribute is correctly set to 255\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 255)\n+        \n+    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n+    def test_username_field_html_maxlength_attribute_custom_model(self):\n+        \"\"\"Test the maxlength attribute set correctly when a custom user model is used.\"\"\"\n+        data = {\n+            'username': 'user',\n+            'password': 'pwd12345',\n+        }\n+        form = AuthenticationForm(None, data)\n \n-    def test_username_field_label(self):\n+        # Since IntegerUsernameUser default maxlength is 254, check it here.\n+        self.assertEqual(form.fields['username'].widget.attrs.get('maxlength'), 254)\n \n         class CustomAuthenticationForm(AuthenticationForm):\n             username = CharField(label=\"Name\", max_length=75)\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..ef61124 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -246,8 +246,24 @@ class WriterTests(SimpleTestCase):\n             [list, tuple, dict, set, frozenset],\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n+    def test_serialize_enum_usage_in_migrations(self):\n+        class TextTranslatedEnum(enum.Enum):\n+            A = _('a-value')\n+            B = _('value-b')\n \n-    def test_serialize_lazy_objects(self):\n+        # This tests if the default usages serialize to the enum names instead of their values.\n+        field = models.CharField(\n+            default=TextTranslatedEnum.A,\n+            choices=[(m.value, m) for m in TextTranslatedEnum],\n+        )\n+        string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            string,\n+            \"models.CharField(choices=[\"\n+            \"('a-value', migrations.test_writer.TextTranslatedEnum['A']), \"\n+            \"('value-b', migrations.test_writer.TextTranslatedEnum['B'])], \"\n+            \"default=migrations.test_writer.TextTranslatedEnum['A'])\"\n+        )\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..12e1740 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,7 +1,9 @@\n+\n import unittest\n from datetime import datetime\n \n from django.test import SimpleTestCase, ignore_warnings\n+from unittest import mock\n from django.utils.datastructures import MultiValueDict\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.http import (\n@@ -324,7 +326,32 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_year_less_than_70(self):\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850_dates(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+\n+        # Prepare different 'current' times for testing purposes\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+\n+        # Test cases: (current time, RFC 850 date string, expected datetime)\n+        test_cases = [\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(2069, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(2070, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        ]\n+\n+        for utcnow, rfc850_date, expected in test_cases:\n+            with self.subTest(rfc850_date=rfc850_date):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850_date)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected)\n         parsed = parse_http_date('Sun Nov  6 08:49:37 0037')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(2037, 11, 6, 8, 49, 37))\n \n",
  "django__django-11880": "",
  "django__django-11951": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex f2f6bbd..f6a2792 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -1,3 +1,5 @@\n+\n+from math import ceil\n from operator import attrgetter\n \n from django.db import IntegrityError, NotSupportedError, connection\n",
  "django__django-11964": "diff --git a/tests/model_fields/test_charfield.py b/tests/model_fields/test_charfield.py\nindex c6162e5..e77ce60 100644\n--- a/tests/model_fields/test_charfield.py\n+++ b/tests/model_fields/test_charfield.py\n@@ -1,14 +1,36 @@\n+\n from unittest import skipIf\n \n from django.core.exceptions import ValidationError\n+from django.utils.translation import gettext_lazy as _\n from django.db import connection, models\n from django.test import SimpleTestCase, TestCase\n \n from .models import Post\n \n \n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice, it is\")\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n class TestCharField(TestCase):\n \n+    def setUp(self):\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n     def test_max_length_passed_to_formfield(self):\n         \"\"\"\n         CharField passes its max_length attribute to form fields created using\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..58ab009 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -168,7 +168,37 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertIsInstance(val, str)\n         self.assertEqual(val, 'translated')\n \n-    def test_iterator_choices(self):\n+class OverrideGetFieldDisplayTest(TestCase):\n+\n+    def test_overriding_FIELD_display(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something'\n+\n+        f = FooBar(foo_bar=1)\n+        self.assertEqual(f.get_foo_bar_display(), 'something')\n+\n+    def test_overriding_FIELD_display_charfield(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.CharField(_(\"foo\"), max_length=10, choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'something else'\n+\n+        f = FooBar(foo_bar='1')\n+        self.assertEqual(f.get_foo_bar_display(), 'something else')\n+\n+    def test_overriding_FIELD_display_different_value(self):\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'another thing'\n+\n+        f = FooBar(foo_bar=2)\n+        self.assertEqual(f.get_foo_bar_display(), 'another thing')\n         \"\"\"\n         get_choices() works with Iterators.\n         \"\"\"\n",
  "django__django-12039": "diff --git a/tests/indexes/tests.py b/tests/indexes/tests.py\nindex 700f574..4b1c002 100644\n--- a/tests/indexes/tests.py\n+++ b/tests/indexes/tests.py\n@@ -22,6 +22,46 @@ class SchemaIndexesTests(TestCase):\n     Test index handling by the db.backends.schema infrastructure.\n     \"\"\"\n \n+    def test_columns_list_sql(self):\n+        index = Index(fields=['headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_descending_columns_list_sql(self):\n+        index = Index(fields=['-headline'], name='whitespace_idx')\n+        editor = connection.schema_editor()\n+        self.assertIn(\n+            '(%s DESC)' % editor.quote_name('headline'),\n+            str(index.create_sql(Article, editor)),\n+        )\n+\n+    def test_ops_class_columns_lists_sql(self):\n+        index = Index(\n+            fields=['headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n+    def test_ops_class_descending_columns_list_sql(self):\n+        index = Index(\n+            fields=['-headline'],\n+            name='whitespace_idx',\n+            opclasses=['text_pattern_ops'],\n+        )\n+        with connection.schema_editor() as editor:\n+            self.assertIn(\n+                '(%s text_pattern_ops DESC)' % editor.quote_name('headline'),\n+                str(index.create_sql(Article, editor)),\n+            )\n+\n     def test_index_name_hash(self):\n         \"\"\"\n         Index names should be deterministic.\n",
  "django__django-12050": "diff --git a/tests/queries/test_query.py b/tests/queries/test_query.py\nindex 49d26f3..6f623d2 100644\n--- a/tests/queries/test_query.py\n+++ b/tests/queries/test_query.py\n@@ -1,3 +1,4 @@\n+\n from datetime import datetime\n \n from django.core.exceptions import FieldError\n@@ -8,6 +9,7 @@ from django.db.models.functions import Lower\n from django.db.models.lookups import Exact, GreaterThan, IsNull, LessThan\n from django.db.models.sql.query import Query\n from django.db.models.sql.where import OR\n+from django.db.models import PickledObjectField\n from django.test import SimpleTestCase\n from django.test.utils import register_lookup\n \n@@ -15,7 +17,24 @@ from .models import Author, Item, ObjectC, Ranking\n \n \n class TestQuery(SimpleTestCase):\n-    def test_simple_query(self):\n+    def test_iterable_lookup_value(self):\n+        # Test to ensure the input list is not coerced to a tuple\n+        query = Query(Item)\n+        where = query.build_where(Q(name=['a', 'b']))\n+        name_exact = where.children[0]\n+        self.assertIsInstance(name_exact, Exact)\n+        self.assertEqual(name_exact.rhs, ['a', 'b'])  # Lists should be retained as lists\n+\n+    def test_pickled_field_with_list(self):\n+        # Specifically tests related to PickledField, to ensure lists are unchanged\n+        class MockModel:\n+            my_field = PickledObjectField()\n+\n+        query = Query(MockModel)\n+        where = query.build_where(Q(my_field=['x', 'y', 'z']))\n+        field_exact = where.children[0]\n+        self.assertIsInstance(field_exact, Exact)\n+        self.assertEqual(field_exact.rhs, ['x', 'y', 'z'])  # Expect list to remain as is\n         query = Query(Author)\n         where = query.build_where(Q(num__gt=2))\n         lookup = where.children[0]\n",
  "django__django-12125": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex e62f7b0..253b65e 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -575,12 +575,40 @@ class WriterTests(SimpleTestCase):\n         self.assertSerializedEqual(datetime.timedelta())\n         self.assertSerializedEqual(datetime.timedelta(minutes=42))\n \n-    def test_serialize_functools_partial(self):\n-        value = functools.partial(datetime.timedelta, 1, seconds=2)\n-        result = self.serialize_round_trip(value)\n-        self.assertEqual(result.func, value.func)\n-        self.assertEqual(result.args, value.args)\n-        self.assertEqual(result.keywords, value.keywords)\n+    def test_serialize_inner_class_field(self):\n+        class Outer:\n+            class Inner(models.CharField):\n+                pass\n+        \n+        class TestModel(models.Model):\n+            field = Outer.Inner(max_length=20)\n+\n+        field = TestModel._meta.get_field('field')\n+        serialized = MigrationWriter.serialize(field)[0]\n+        self.assertIn('Outer.Inner', serialized)\n+\n+    def test_serialize_inner_enum_field(self):\n+        class TestModelWithEnum(models.Model):\n+            @enum.unique\n+            class State(enum.Enum):\n+                ON = 'on'\n+                OFF = 'off'\n+                \n+            state = models.CharField(max_length=10, choices=[(e.value, e.name) for e in State])\n+\n+        field = TestModelWithEnum._meta.get_field('state')\n+        serialized = MigrationWriter.serialize(field)[0]\n+        self.assertIn('TestModelWithEnum.State', serialized)\n+\n+    def test_serialize_nested_field(self):\n+        instance = DeconstructibleInstances()\n+        string = MigrationWriter.serialize(instance.NestedChoices)[0]\n+        self.assertIn(\"NestedChoices\", string)\n+        \n+    def test_serialize_enum_member(self):\n+        instance = DeconstructibleInstances.NestedEnum.A\n+        string, imports = MigrationWriter.serialize(instance)\n+        self.assertIn(\"migrations.test_writer.WriterTests.NestedEnum['A']\", string)\n \n     def test_serialize_functools_partialmethod(self):\n         value = functools.partialmethod(datetime.timedelta, 1, seconds=2)\n@@ -746,4 +774,4 @@ class WriterTests(SimpleTestCase):\n \n     def test_register_non_serializer(self):\n         with self.assertRaisesMessage(ValueError, \"'TestModel1' must inherit from 'BaseSerializer'.\"):\n-            MigrationWriter.register_serializer(complex, TestModel1)\n+            MigrationWriter.register_serializer(complex, TestModel1)\n",
  "django__django-12143": "",
  "django__django-12155": "diff --git a/tests/admin_docs/test_utils.py b/tests/admin_docs/test_utils.py\nindex 6cae16b..da62d1a 100644\n--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n@@ -1,5 +1,8 @@\n+\n import unittest\n \n+import re\n+from django.test.utils import captured_stderr\n from django.contrib.admindocs.utils import (\n     docutils_is_available, parse_docstring, parse_rst, trim_docstring,\n )\n@@ -90,7 +93,31 @@ class TestUtils(AdminDocsSimpleTestCase):\n         )\n         self.assertHTMLEqual(description_output, description_rendered)\n \n-    def test_initial_header_level(self):\n+    def test_parse_rst_with_docstring_no_leading_line_feed(self):\n+        \"\"\"\n+        Test parsing a docstring without a leading line feed.\n+        \"\"\"\n+        title, body, _ = parse_docstring('firstline\\n\\n    second line')\n+        with captured_stderr() as stderr:\n+            self.assertEqual(parse_rst(title, ''), '<p>firstline</p>\\n')\n+            self.assertEqual(parse_rst(body, ''), '<p>second line</p>\\n')\n+        self.assertEqual(stderr.getvalue(), '')\n+\n+    def test_trim_docstring_with_first_line_not_empty(self):\n+        \"\"\"\n+        Test trimming a docstring where the first line is not empty.\n+        \"\"\"\n+        docstring = 'First line\\n    Second line\\n    Third line'\n+        expected_output = 'First line\\nSecond line\\nThird line'\n+        self.assertEqual(trim_docstring(docstring), expected_output)\n+\n+    def test_trim_docstring_with_leading_and_trailing_whitespace(self):\n+        \"\"\"\n+        Test trimming a docstring with leading and trailing whitespace.\n+        \"\"\"\n+        docstring = '   First line\\n    Second line\\n\\n    Third line   '\n+        expected_output = 'First line\\nSecond line\\n\\nThird line'\n+        self.assertEqual(trim_docstring(docstring), expected_output)\n         header = 'should be h3...\\n\\nHeader\\n------\\n'\n         output = parse_rst(header, 'header')\n         self.assertIn('<h3>Header</h3>', output)\n",
  "django__django-12193": "diff --git a/tests/postgres_tests/test_array.py b/tests/postgres_tests/test_array.py\nindex 6228cbc..bbf1e7c 100644\n--- a/tests/postgres_tests/test_array.py\n+++ b/tests/postgres_tests/test_array.py\n@@ -1103,7 +1103,44 @@ class TestSplitFormWidget(PostgreSQLWidgetTestCase):\n             }\n         )\n \n-    def test_render(self):\n+    def test_checkbox_splitarrayfield(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=4)\n+        context = widget.get_context('bool_array', [True, False, False, True])\n+        self.assertEqual(context['widget']['value'], '[True, False, False, True]')\n+        expected_attrs = [\n+            {'checked': True},\n+            {},\n+            {},\n+            {'checked': True},\n+        ]\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            expected_attrs\n+        )\n+\n+    def test_checkbox_splitarrayfield_all_true(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('bool_array', [True, True, True])\n+        self.assertEqual(context['widget']['value'], '[True, True, True]')\n+        expected_attrs = [\n+            {'checked': True},\n+            {'checked': True},\n+            {'checked': True},\n+        ]\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            expected_attrs\n+        )\n+\n+    def test_checkbox_splitarrayfield_all_false(self):\n+        widget = SplitArrayWidget(forms.CheckboxInput(), size=3)\n+        context = widget.get_context('bool_array', [False, False, False])\n+        self.assertEqual(context['widget']['value'], '[False, False, False]')\n+        expected_attrs = [{}, {}, {}]\n+        self.assertEqual(\n+            [subwidget['attrs'] for subwidget in context['widget']['subwidgets']],\n+            expected_attrs\n+        )\n         self.check_html(\n             SplitArrayWidget(forms.TextInput(), size=2), 'array', None,\n             \"\"\"\n",
  "django__django-12209": "diff --git a/tests/serializers/models/data.py b/tests/serializers/models/data.py\nindex 946715d..3ba1d01 100644\n--- a/tests/serializers/models/data.py\n+++ b/tests/serializers/models/data.py\n@@ -246,11 +246,12 @@ class SlugPKData(models.Model):\n class SmallPKData(models.Model):\n     data = models.SmallIntegerField(primary_key=True)\n \n-# class TextPKData(models.Model):\n+from uuid import uuid4\n #     data = models.TextField(primary_key=True)\n \n # class TimePKData(models.Model):\n-#    data = models.TimeField(primary_key=True)\n+class UUIDDefaultData(models.Model):\n+    data = models.UUIDField(primary_key=True, default=uuid4)\n \n \n class UUIDData(models.Model):\n",
  "django__django-12262": "diff --git a/tests/template_tests/templatetags/inclusion.py b/tests/template_tests/templatetags/inclusion.py\nindex da4058d..2979a87 100644\n--- a/tests/template_tests/templatetags/inclusion.py\n+++ b/tests/template_tests/templatetags/inclusion.py\n@@ -136,6 +136,14 @@ def inclusion_one_default(one, two='hi'):\n inclusion_one_default.anything = \"Expected inclusion_one_default __dict__\"\n \n \n+@register.inclusion_tag('inclusion.html')\n+def inclusion_keyword_only_default(*, kwarg=42):\n+    \"\"\"Test inclusion_keyword_only_default with a keyword-only argument that has a default.\"\"\"\n+    return {\"result\": \"inclusion_keyword_only_default - Expected result: %s\" % kwarg}\n+\n+inclusion_keyword_only_default.anything = \"Expected inclusion_keyword_only_default __dict__\"\n+\n+\n @register.inclusion_tag(engine.get_template('inclusion.html'))\n def inclusion_one_default_from_template(one, two='hi'):\n     \"\"\"Expected inclusion_one_default_from_template __doc__\"\"\"\n",
  "django__django-12276": "",
  "django__django-12304": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 6cabf01..711c910 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import decimal\n import ipaddress\n@@ -137,7 +138,33 @@ class ChoicesTests(SimpleTestCase):\n                 # A string is not permitted as the second argument to int().\n                 ONE = 1, 'X', 'Invalid'\n \n-        msg = \"duplicate values found in <enum 'Fruit'>: PINEAPPLE -> APPLE\"\n+    def test_enumeration_in_template(self):\n+        # Assuming YearInSchool is defined with similar structure to Suit:\n+        # class YearInSchool(models.TextChoices):\n+        #     FRESHMAN = 'FR', _('Freshman')\n+        #     SOPHOMORE = 'SO', _('Sophomore')\n+    \n+        class YearInSchool(models.TextChoices):\n+            FRESHMAN = 'FR', 'Freshman'\n+            SOPHOMORE = 'SO', 'Sophomore'\n+\n+        # Create a student instance with year_in_school as FRESHMAN\n+        class Student:\n+            def __init__(self, year_in_school):\n+                self.year_in_school = year_in_school\n+\n+        student = Student(YearInSchool.FRESHMAN)\n+\n+        template = Template(\n+            '{% if student.year_in_school == YearInSchool.FRESHMAN %}Yes{% else %}No{% endif %}'\n+        )\n+        output = template.render(Context({'student': student, 'YearInSchool': YearInSchool}))\n+        self.assertEqual(output, 'Yes')\n+\n+        # Negative case: SOPHOMORE\n+        student.year_in_school = YearInSchool.SOPHOMORE\n+        output = template.render(Context({'student': student, 'YearInSchool': YearInSchool}))\n+        self.assertEqual(output, 'No')\n         with self.assertRaisesMessage(ValueError, msg):\n             class Fruit(models.IntegerChoices):\n                 APPLE = 1, 'Apple'\n",
  "django__django-12308": "",
  "django__django-12325": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex fffd9ab..6afa0a3 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -998,6 +998,33 @@ class OtherModelTests(SimpleTestCase):\n                 through_fields=('method', 'from_country'),\n                 related_name='+',\n             )\n+            \n+    def test_onetoone_with_multiple_references_order_matter(self):\n+        \"\"\"\n+        Test if the order of OneToOneField definitions matters in the presence of parent_link.\n+        \"\"\"\n+        class Document(models.Model):\n+            pass\n+\n+        class Picking(Document):\n+            document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n+            origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+\n+        # Expect this not to raise an error with the correct order\n+        self.assertEqual(Picking.check(), [])\n+\n+    def test_onetoone_with_multiple_references_reverse_order(self):\n+        \"\"\"\n+        Test inappropriate order of OneToOneField definitions without parent_link causing issues.\n+        \"\"\"\n+        msg = \"Add parent_link=True to invalid_models_tests.Picking.origin.\"\n+        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            class Document(models.Model):\n+                pass\n+\n+            class Picking(Document):\n+                origin = models.OneToOneField(Document, related_name='picking', on_delete=models.PROTECT)\n+                document_ptr = models.OneToOneField(Document, on_delete=models.CASCADE, parent_link=True, related_name='+')\n \n         class ShippingMethodPrice(models.Model):\n             method = models.ForeignKey(ShippingMethod, models.CASCADE)\n",
  "django__django-12419": "diff --git a/tests/middleware/test_security.py b/tests/middleware/test_security.py\nindex 7af62eb..d8e38cd 100644\n--- a/tests/middleware/test_security.py\n+++ b/tests/middleware/test_security.py\n@@ -230,6 +230,14 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         \"Referrer-Policy\" header to the response.\n         \"\"\"\n         self.assertNotIn('Referrer-Policy', self.process_response())\n+    @override_settings(SECURE_REFERRER_POLICY=None)\n+    def test_referrer_policy_default(self):\n+        \"\"\"\n+        With SECURE_REFERRER_POLICY set to None (or not set), the middleware\n+        should add a \"Referrer-Policy\" header with the value \"same-origin\" \n+        by default.\n+        \"\"\"\n+        self.assertEqual(self.process_response()['Referrer-Policy'], 'same-origin')\n \n     def test_referrer_policy_on(self):\n         \"\"\"\n@@ -254,4 +262,4 @@ class SecurityMiddlewareTest(SimpleTestCase):\n         present in the response.\n         \"\"\"\n         response = self.process_response(headers={'Referrer-Policy': 'unsafe-url'})\n-        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n+        self.assertEqual(response['Referrer-Policy'], 'unsafe-url')\n",
  "django__django-12663": "",
  "django__django-12708": "",
  "django__django-12713": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex dc4dadc..e66ce38 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -18,7 +18,7 @@ from django.db.models import CharField, DateField, DateTimeField, UUIDField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n-\n+from django.forms import CheckboxSelectMultiple, SelectMultiple\n from .models import (\n     Advisor, Album, Band, Bee, Car, Company, Event, Honeycomb, Individual,\n     Inventory, Member, MyFileField, Profile, School, Student,\n@@ -117,7 +117,32 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         self.assertFormfield(Band, 'members', widgets.FilteredSelectMultiple,\n                              filter_vertical=['members'])\n \n-    def test_formfield_overrides(self):\n+    def test_formfield_overrides_m2m_custom_widget(self):\n+        \"\"\"\n+        Ensure that the widget can be overridden in formfield_for_manytomany.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': SelectMultiple},\n+            }\n+\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, SelectMultiple)\n+\n+    def test_formfield_overrides_m2m_with_autocomplete(self):\n+        \"\"\"\n+        Test overriding widget with autocomplete using formfield_for_manytomany.\n+        \"\"\"\n+        class BandAdmin(admin.ModelAdmin):\n+            autocomplete_fields = ['members']\n+            formfield_overrides = {\n+                ManyToManyField: {'widget': CheckboxSelectMultiple},\n+            }\n+\n+        ma = BandAdmin(Band, admin.site)\n+        field = ma.formfield_for_dbfield(Band._meta.get_field('members'), request=None)\n+        self.assertIsInstance(field.widget, CheckboxSelectMultiple)\n         self.assertFormfield(Event, 'start_date', forms.TextInput,\n                              formfield_overrides={DateField: {'widget': forms.TextInput}})\n \n",
  "django__django-12741": "diff --git a/tests/backends/base/test_operations.py b/tests/backends/base/test_operations.py\nindex 089eb18..b0ffe95 100644\n--- a/tests/backends/base/test_operations.py\n+++ b/tests/backends/base/test_operations.py\n@@ -172,7 +172,7 @@ class SqlFlushTests(TransactionTestCase):\n             reset_sequences=True,\n             allow_cascade=True,\n         )\n-        connection.ops.execute_sql_flush(connection.alias, sql_list)\n+        connection.ops.execute_sql_flush(sql_list)\n \n         with transaction.atomic():\n             self.assertIs(Author.objects.exists(), False)\n@@ -181,4 +181,4 @@ class SqlFlushTests(TransactionTestCase):\n                 author = Author.objects.create(name='F. Scott Fitzgerald')\n                 self.assertEqual(author.pk, 1)\n                 book = Book.objects.create(author=author)\n-                self.assertEqual(book.pk, 1)\n+                self.assertEqual(book.pk, 1)\n",
  "django__django-12754": "",
  "django__django-12774": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 057eac3..80e26cc 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -9,6 +9,8 @@ from django.db.models import Exists, Max, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n from django.utils.deprecation import RemovedInDjango40Warning\n+from django.db import models\n+from django.test.utils import isolate_apps\n \n from .models import (\n     Article, Author, Freebie, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n@@ -194,7 +196,40 @@ class LookupTests(TestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             Article.objects.in_bulk([self.au1], field_name='author')\n \n-    def test_values(self):\n+    @isolate_apps('lookup')\n+    def test_in_bulk_unique_constraint(self):\n+        class TestModel(models.Model):\n+            slug = models.CharField(max_length=255)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['slug'], name='unique_slug_constraint'),\n+                ]\n+\n+        test_instance1 = TestModel.objects.create(slug='unique-slug-1')\n+        test_instance2 = TestModel.objects.create(slug='unique-slug-2')\n+\n+        self.assertEqual(\n+            TestModel.objects.in_bulk(['unique-slug-1', 'unique-slug-2'], field_name='slug'),\n+            {\n+                'unique-slug-1': test_instance1,\n+                'unique-slug-2': test_instance2,\n+            }\n+        )\n+\n+    @isolate_apps('lookup')\n+    def test_in_bulk_non_unique_constraint(self):\n+        class TestModel(models.Model):\n+            slug = models.CharField(max_length=255)\n+            non_unique_field = models.CharField(max_length=100)\n+\n+            class Meta:\n+                constraints = [\n+                    models.UniqueConstraint(fields=['slug'], name='unique_slug_constraint'),\n+                ]\n+\n+        with self.assertRaisesMessage(ValueError, \"in_bulk()'s field_name must be a unique field but 'non_unique_field' isn't.\"):\n+            TestModel.objects.in_bulk([], field_name='non_unique_field')\n         # values() returns a list of dictionaries instead of object instances --\n         # and you can specify which fields you want to retrieve.\n         self.assertSequenceEqual(\n",
  "django__django-12858": "diff --git a/tests/invalid_models_tests/test_models.py b/tests/invalid_models_tests/test_models.py\nindex 3b6974f..cddbb64 100644\n--- a/tests/invalid_models_tests/test_models.py\n+++ b/tests/invalid_models_tests/test_models.py\n@@ -893,7 +893,20 @@ class OtherModelTests(SimpleTestCase):\n         with register_lookup(models.CharField, Lower):\n             self.assertEqual(Model.check(), [])\n \n-    def test_ordering_pointing_to_related_model_pk(self):\n+    def test_ordering_using_isnull_on_related_field(self):\n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', models.CASCADE, null=True)\n+\n+        class Supply(models.Model):\n+            product = models.ForeignKey(Product, models.CASCADE)\n+\n+        class Stock(models.Model):\n+            supply = models.ForeignKey(Supply, models.CASCADE)\n+\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        self.assertEqual(Stock.check(), [])\n         class Parent(models.Model):\n             pass\n \n",
  "django__django-13012": "",
  "django__django-13028": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 70329a0..6a1a4ec 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -1211,7 +1211,27 @@ class Queries1Tests(TestCase):\n         )\n \n \n+from django.db.utils import NotSupportedError\n+\n class Queries2Tests(TestCase):\n+\n+    def test_filter_with_non_filterable_field(self):\n+        # Assumption: There exists a setup for ProductMetaData and ProductMetaDataType models.\n+\n+        # Create an instance of ProductMetaDataType where filterable is False\n+        metadata_type = ProductMetaDataType.objects.create(label=\"Test Type\", filterable=False)\n+\n+        # Create an instance of ProductMetaData\n+        metadata = ProductMetaData.objects.create(\n+            product=Produit.objects.create(...),  # You should replace with the valid constructor parameters or mock objects\n+            value=\"Test Value\",\n+            marketplace=Plateforme.objects.create(...),  # Mock or real object\n+            metadata_type=metadata_type\n+        )\n+\n+        # Attempt to filter ProductMetaData using the non-filterable field\n+        with self.assertRaises(NotSupportedError):\n+            ProductMetaData.objects.filter(metadata_type=metadata_type)\n     @classmethod\n     def setUpTestData(cls):\n         Number.objects.create(num=4)\n",
  "django__django-13033": "diff --git a/tests/ordering/models.py b/tests/ordering/models.py\nindex ec1f9e4..0a3f8d5 100644\n--- a/tests/ordering/models.py\n+++ b/tests/ordering/models.py\n@@ -28,6 +28,18 @@ class Article(models.Model):\n     second_author = models.ForeignKey(Author, models.SET_NULL, null=True, related_name='+')\n     headline = models.CharField(max_length=100)\n     pub_date = models.DateTimeField()\n+    \n+class OneModel(models.Model):\n+    class Meta:\n+        ordering = (\"-id\",)\n+    id = models.BigAutoField(primary_key=True)\n+    root = models.ForeignKey(\"self\", on_delete=models.CASCADE, null=True)\n+    oneval = models.BigIntegerField(null=True)\n+\n+class TwoModel(models.Model):\n+    id = models.BigAutoField(primary_key=True)\n+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)\n+    twoval = models.BigIntegerField(null=True)\n \n     class Meta:\n         ordering = (\n",
  "django__django-13089": "diff --git a/django/core/cache/backends/db.py b/django/core/cache/backends/db.py\nindex a65b985..4d67c18 100644\n--- a/django/core/cache/backends/db.py\n+++ b/django/core/cache/backends/db.py\n@@ -267,13 +267,15 @@ class DatabaseCache(BaseDatabaseCache):\n                 cursor.execute(\n                     connection.ops.cache_key_culling_sql() % table,\n                     [cull_num])\n-                cursor.execute(\"DELETE FROM %s \"\n-                               \"WHERE cache_key < %%s\" % table,\n-                               [cursor.fetchone()[0]])\n+                result = cursor.fetchone()\n+                if result is not None:\n+                    cursor.execute(\"DELETE FROM %s \"\n+                                   \"WHERE cache_key < %%s\" % table,\n+                                   [result[0]])\n \n     def clear(self):\n         db = router.db_for_write(self.cache_model_class)\n         connection = connections[db]\n         table = connection.ops.quote_name(self._table)\n         with connection.cursor() as cursor:\n-            cursor.execute('DELETE FROM %s' % table)\n+            cursor.execute('DELETE FROM %s' % table)\n",
  "django__django-13109": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex d60d822..d263fe8 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -1644,8 +1644,47 @@ class ModelFormBasicTests(TestCase):\n         obj.name = 'Alice'\n         obj.full_clean()\n \n+from django import forms\n+from django.db import models\n+from django.test import TestCase\n+import datetime\n+\n+class ForeignKeyValidationTests(TestCase):\n+    def setUp(self):\n+        class ArticleManager(models.Manager):\n+            def get_queryset(self):\n+                return super().get_queryset().filter(archived=False)\n+\n+        class Article(models.Model):\n+            title = models.CharField(max_length=100)\n+            archived = models.BooleanField(default=False)\n+            objects = ArticleManager()\n+\n+        class FavoriteArticle(models.Model):\n+            article = models.ForeignKey(Article, on_delete=models.CASCADE)\n+\n+        class FavoriteArticleForm(forms.ModelForm):\n+            class Meta:\n+                model = FavoriteArticle\n+                fields = '__all__'\n+\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                self.fields['article'].queryset = Article._base_manager.all()\n+\n+        self.Article = Article\n+        self.FavoriteArticle = FavoriteArticle\n+        self.FavoriteArticleForm = FavoriteArticleForm\n+\n+    def test_foreign_key_validation_with_base_manager(self):\n+        archived_article = self.Article.objects.create(title=\"Archived Article\", archived=True)\n+        form = self.FavoriteArticleForm({'article': archived_article.pk})\n+        self.assertTrue(form.is_valid(), \"Form should be valid when using base manager for ForeignKey validation.\")\n \n-class ModelMultipleChoiceFieldTests(TestCase):\n+    def test_foreign_key_validation_with_default_manager(self):\n+        article = self.Article.objects.create(title=\"Active Article\", archived=False)\n+        form = self.FavoriteArticleForm({'article': article.pk})\n+        self.assertTrue(form.is_valid(), \"Form should be valid for non-archived articles with default manager.\")\n     @classmethod\n     def setUpTestData(cls):\n         cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')\n",
  "django__django-13112": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 081eff8..88616fd 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -867,7 +867,33 @@ class StateTests(SimpleTestCase):\n         with self.assertRaisesMessage(ValueError, msg):\n             project_state.apps\n \n-    def test_real_apps(self):\n+    def test_reference_mixed_case_app_label_with_installed_app(self):\n+        new_apps = Apps()\n+\n+        class Author(models.Model):\n+            class Meta:\n+                app_label = 'DJ_RegLogin'\n+                apps = new_apps\n+\n+        class Book(models.Model):\n+            author = models.ForeignKey(Author, models.CASCADE)\n+\n+            class Meta:\n+                app_label = 'DJ_RegLogin'\n+                apps = new_apps\n+\n+        class Magazine(models.Model):\n+            authors = models.ManyToManyField(Author)\n+\n+            class Meta:\n+                app_label = 'DJ_RegLogin'\n+                apps = new_apps\n+\n+        project_state = ProjectState()\n+        project_state.add_model(ModelState.from_model(Author))\n+        project_state.add_model(ModelState.from_model(Book))\n+        project_state.add_model(ModelState.from_model(Magazine))\n+        self.assertEqual(len(project_state.apps.get_models()), 3)\n         \"\"\"\n         Including real apps can resolve dangling FK errors.\n         This test relies on the fact that contenttypes is always loaded.\n",
  "django__django-13121": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex a684d7e..e9f9a5d 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1209,13 +1209,37 @@ class ExpressionOperatorTests(TestCase):\n         Number.objects.filter(pk=self.n.pk).update(integer=F('integer') ** 2, float=F('float') ** 1.5)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 1764)\n         self.assertEqual(Number.objects.get(pk=self.n.pk).float, Approximate(61.02, places=2))\n-\n-    @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n-    def test_lefthand_bitwise_xor(self):\n-        Number.objects.update(integer=F('integer').bitxor(48))\n-        self.assertEqual(Number.objects.get(pk=self.n.pk).integer, 26)\n-        self.assertEqual(Number.objects.get(pk=self.n1.pk).integer, -26)\n-\n+    from datetime import timedelta\n+    from django.db.models import F\n+    from django.test import TestCase\n+    from .models import Experiment\n+\n+    class DurationExpressionTests(TestCase):\n+        def setUp(self):\n+            self.deltas = [timedelta(days=1), timedelta(hours=5), timedelta(minutes=30)]\n+            # Create objects for testing\n+            self.experiment1 = Experiment.objects.create(estimated_time=timedelta(days=3))\n+            self.experiment2 = Experiment.objects.create(estimated_time=timedelta(hours=6))\n+        \n+        def test_duration_expressions(self):\n+            for delta in self.deltas:\n+                qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+                for obj in qs:\n+                    self.assertEqual(obj.duration, obj.estimated_time + delta)\n+        \n+        def test_duration_with_zero_delta(self):\n+            # Add test for zero delta duration\n+            delta = timedelta()\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time)\n+        \n+        def test_duration_with_negative_delta(self):\n+            # Add test for negative delta duration\n+            delta = timedelta(days=-1)\n+            qs = Experiment.objects.annotate(duration=F('estimated_time') + delta)\n+            for obj in qs:\n+                self.assertEqual(obj.duration, obj.estimated_time + delta)\n     @unittest.skipIf(connection.vendor == 'oracle', \"Oracle doesn't support bitwise XOR.\")\n     def test_lefthand_bitwise_xor_null(self):\n         employee = Employee.objects.create(firstname='John', lastname='Doe')\n",
  "django__django-13128": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 82e96fa..56be5b9 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1627,7 +1627,18 @@ class FTimeDeltaTests(TestCase):\n         for e in qs:\n             self.assertEqual(e.delta, delta)\n \n-    def test_duration_with_datetime(self):\n+    def test_temporal_subtraction_without_expression_wrapper(self):\n+        # Create sample experiments with well-defined start and end times\n+        Experiment.objects.create(name='test1', start=datetime.datetime(2023, 1, 1, 12, 0), end=datetime.datetime(2023, 1, 1, 14, 0))\n+        Experiment.objects.create(name='test2', start=datetime.datetime(2023, 1, 1, 8, 30), end=datetime.datetime(2023, 1, 1, 10, 0))\n+        \n+        # Annotate with temporal subtraction and directly check the duration\n+        queryset = Experiment.objects.annotate(delta=F('end') - F('start'))\n+        deltas = {exp.name: exp.delta for exp in queryset}\n+        \n+        # Assert that the deltas are correctly calculated as timedelta objects\n+        self.assertEqual(deltas['test1'], datetime.timedelta(hours=2))\n+        self.assertEqual(deltas['test2'], datetime.timedelta(hours=1, minutes=30))\n         # Exclude e1 which has very high precision so we can test this on all\n         # backends regardless of whether or not it supports\n         # microsecond_precision.\n",
  "django__django-13158": "diff --git a/tests/queries/test_qs_combinators.py b/tests/queries/test_qs_combinators.py\nindex 070e08e..ab30280 100644\n--- a/tests/queries/test_qs_combinators.py\n+++ b/tests/queries/test_qs_combinators.py\n@@ -1,5 +1,10 @@\n import operator\n \n+from django import forms\n+from django.contrib.admin.sites import AdminSite\n+from django.test import RequestFactory\n+from .models import Publication, Article, ArticleAdmin\n+\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import Exists, F, IntegerField, OuterRef, Value\n from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n@@ -39,7 +44,11 @@ class QuerySetSetOperationTests(TestCase):\n         reserved_name = qs1.intersection(qs1).values_list('name', 'order', 'id').get()\n         self.assertEqual(reserved_name[:2], ('a', 2))\n \n-    @skipUnlessDBFeature('supports_select_difference')\n+    def test_union_with_none_returns_none(self):\n+        qs1 = Number.objects.filter(num__lte=1)\n+        qs2 = Number.objects.filter(num__gte=8)\n+        qs_union = qs1.union(qs2)\n+        self.assertQuerysetEqual(qs_union.none(), [])\n     def test_simple_difference(self):\n         qs1 = Number.objects.filter(num__lte=5)\n         qs2 = Number.objects.filter(num__lte=4)\n",
  "django__django-13279": "diff --git a/tests/sessions_tests/tests.py b/tests/sessions_tests/tests.py\nindex e3a089f..55bc42d 100644\n--- a/tests/sessions_tests/tests.py\n+++ b/tests/sessions_tests/tests.py\n@@ -34,6 +34,7 @@ from django.test import (\n     RequestFactory, TestCase, ignore_warnings, override_settings,\n )\n from django.utils import timezone\n+from django.utils.deprecation import RemovedInDjango40Warning\n \n from .models import SessionStore as CustomDatabaseSession\n \n@@ -323,6 +324,27 @@ class SessionTestsMixin:\n             {'a test key': 'a test value'},\n         )\n \n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_legacy_encode_decode(self):\n+        # Test that data can be encoded with the legacy method and successfully decoded.\n+        data = {'key1': 'value1', 'key2': 'value2'}\n+        encoded = self.session.encode(data)\n+        decoded = self.session._legacy_decode(encoded)\n+        self.assertEqual(decoded, data)\n+\n+    @ignore_warnings(category=RemovedInDjango40Warning)\n+    @override_settings(DEFAULT_HASHING_ALGORITHM='sha1')\n+    def test_legacy_decode_with_modified_data(self):\n+        # Test that tampered legacy data is detected.\n+        data = {'key1': 'value1'}\n+        encoded = self.session.encode(data)\n+        # Modify the encoded string to simulate tampering.\n+        tampered = encoded[:-3] + 'abc'\n+        with self.assertLogs('django.security.SuspiciousSession', 'WARNING'):\n+            decoded = self.session._legacy_decode(tampered)\n+            self.assertEqual(decoded, {})\n+\n     def test_decode_failure_logged_to_security(self):\n         bad_encode = base64.b64encode(b'flaskdj:alkdjf').decode('ascii')\n         with self.assertLogs('django.security.SuspiciousSession', 'WARNING') as cm:\n",
  "django__django-13297": "diff --git a/tests/generic_views/test_base.py b/tests/generic_views/test_base.py\nindex 26c885d..f18a2f3 100644\n--- a/tests/generic_views/test_base.py\n+++ b/tests/generic_views/test_base.py\n@@ -2,6 +2,7 @@ import time\n \n from django.core.exceptions import ImproperlyConfigured\n from django.http import HttpResponse\n+from django.http import HttpRequest\n from django.test import (\n     RequestFactory, SimpleTestCase, ignore_warnings, override_settings,\n )\n@@ -10,7 +11,7 @@ from django.urls import resolve\n from django.utils.deprecation import RemovedInDjango40Warning\n from django.views.generic import RedirectView, TemplateView, View\n \n-from . import views\n+from .models import Artist\n \n \n class SimpleView(View):\n@@ -570,7 +571,22 @@ class SingleObjectTemplateResponseMixinTest(SimpleTestCase):\n             view.get_template_names()\n \n \n-@override_settings(ROOT_URLCONF='generic_views.urls')\n+class SimpleLazyObjectTests(TestCase):\n+    rf = RequestFactory()\n+\n+    def test_get_context_data_with_simple_lazy_object(self):\n+        class OfferView(TemplateView):\n+            template_name = \"generic_views/about.html\"\n+            def get_context_data(self, **kwargs):\n+                offer_slug = kwargs.get(\"offer_slug\", \"\")\n+                offer = Artist.objects.get(name=str(offer_slug))\n+                return {\"artist\": offer, \"offer_slug\": offer_slug}\n+\n+        artist = Artist.objects.create(name='Test Artist')\n+        request = self.rf.get('/offers/test-artist/')\n+        response = OfferView.as_view()(request, offer_slug=SimpleLazyObject(lambda: 'test-artist'))\n+        self.assertEqual(response.context_data['artist'], artist)\n+        self.assertEqual(response.context_data['offer_slug'], 'test-artist')\n class DeprecationTests(SimpleTestCase):\n     @ignore_warnings(category=RemovedInDjango40Warning)\n     def test_template_params(self):\n",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..101d16f 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -4,6 +4,7 @@ from decimal import Decimal\n from unittest import mock, skipUnless\n \n from django import forms\n+from django.test.utils import isolate_apps\n from django.core.exceptions import (\n     NON_FIELD_ERRORS, FieldError, ImproperlyConfigured, ValidationError,\n )\n@@ -2815,7 +2816,76 @@ class LimitChoicesToTests(TestCase):\n         f = StumpJokeWithCustomFieldForm()\n         self.assertEqual(f.fields['custom'].queryset, 42)\n \n-    def test_fields_for_model_applies_limit_choices_to(self):\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates(self):\n+        # Setup initial data\n+        marley = Character.objects.create(username=\"Marley\", last_action=\"2023-10-01T12:00:00\")\n+        threepwood = Character.objects.create(username=\"Threepwood\", last_action=\"2023-10-02T12:00:00\")\n+\n+        joke1 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=threepwood,\n+        )\n+        joke2 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=threepwood,\n+        )\n+        joke3 = StumpJoke.objects.create(\n+            funny=True,\n+            most_recently_fooled=marley,\n+        )\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class CharacterDetails(models.Model):\n+            character1 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_1',\n+            )\n+            character2 = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_2',\n+            )\n+            character3 = models.ManyToManyField(\n+                Character,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_m2m_1',\n+            )\n+\n+        class CharacterDetailsForm(forms.ModelForm):\n+            class Meta:\n+                model = CharacterDetails\n+                fields = '__all__'\n+\n+        form = CharacterDetailsForm()\n+        self.assertCountEqual(\n+            form.fields['character1'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character2'].queryset,\n+            [marley, threepwood],\n+        )\n+        self.assertCountEqual(\n+            form.fields['character3'].queryset,\n+            [marley, threepwood],\n+        )\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n",
  "django__django-13343": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex a5ab3a0..f4282ba 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -29,7 +29,7 @@ from django.test.utils import requires_tz_support\n from django.urls import NoReverseMatch, reverse_lazy\n from django.utils import timezone\n \n-from .models import Storage, temp_storage, temp_storage_location\n+from .models import Storage, callable_storage, temp_storage, temp_storage_location\n \n FILE_SUFFIX_REGEX = '[A-Za-z0-9]{7}'\n \n@@ -82,6 +82,15 @@ class FileSystemStorageTests(unittest.TestCase):\n         path, args, kwargs = storage.deconstruct()\n         self.assertEqual(kwargs, kwargs_orig)\n \n+    def test_filefield_callable_storage_deconstruction(self):\n+        \"\"\"\n+        Test that FileField with callable storage deconstructs to reference the callable, not evaluated storage.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field('storage_callable').deconstruct()\n+        storage = kwargs['storage']\n+        self.assertIs(storage, callable_storage)\n+\n     def test_lazy_base_url_init(self):\n         \"\"\"\n         FileSystemStorage.__init__() shouldn't evaluate base_url.\n",
  "django__django-13346": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex b918d5c..fd0f46a 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -623,6 +623,34 @@ class TestQuerying(TestCase):\n                     expected,\n                 )\n \n+    def test_key_in_lookup(self):\n+        # Set up a similar situation to the issue\n+        obj_match = NullableJSONModel.objects.create(value={'key': 0})\n+        obj_no_match = NullableJSONModel.objects.create(value={'key': 1})\n+        \n+        # Case where __in is used, expecting to find one object\n+        self.assertEqual(\n+            list(NullableJSONModel.objects.filter(value__key__in=[0])),\n+            [obj_match]\n+        )\n+\n+        # Case where exact match is used, expecting to find one object\n+        self.assertEqual(\n+            list(NullableJSONModel.objects.filter(value__key=0)),\n+            [obj_match]\n+        )\n+\n+        # Further cases to ensure robustness\n+        obj_complex = NullableJSONModel.objects.create(value={'key': [1, 2, 3]})\n+        self.assertEqual(\n+            list(NullableJSONModel.objects.filter(value__key__in=[[1, 2, 3]])),\n+            [obj_complex]\n+        )\n+        self.assertEqual(\n+            list(NullableJSONModel.objects.filter(value__key=[1, 2, 3])),\n+            [obj_complex]\n+        )\n+\n     def test_key_iexact(self):\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='BaR').exists(), True)\n         self.assertIs(NullableJSONModel.objects.filter(value__foo__iexact='\"BaR\"').exists(), False)\n",
  "django__django-13363": "diff --git a/tests/db_functions/datetime/test_extract_trunc.py b/tests/db_functions/datetime/test_extract_trunc.py\nindex 82d5e36..f7c2cfb 100644\n--- a/tests/db_functions/datetime/test_extract_trunc.py\n+++ b/tests/db_functions/datetime/test_extract_trunc.py\n@@ -18,6 +18,10 @@ from django.test import (\n     TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n )\n from django.utils import timezone\n+import pytz\n+from datetime import datetime\n+from django.db.models import Count\n+from .models import TimeSlots  # Assuming TimeSlots is defined in the same directory's models.py\n \n from ..models import Author, DTModel, Fan\n \n@@ -1133,7 +1137,57 @@ class DateFunctionWithTimeZoneTests(DateFunctionTests):\n         self.assertEqual(model.melb_year.year, 2016)\n         self.assertEqual(model.pacific_year.year, 2015)\n \n-    def test_trunc_ambiguous_and_invalid_times(self):\n+    def test_trunc_date_with_tzinfo(self):\n+        # Test case to verify TruncDate with tzinfo parameter\n+        start_datetime = datetime(2022, 3, 13, 5, 0, 0)  # DST change in America/New_York\n+        start_datetime = timezone.make_aware(start_datetime, timezone=pytz.UTC)\n+\n+        melb = pytz.timezone('Australia/Melbourne')\n+        pacific = pytz.timezone('US/Pacific')\n+        ny = pytz.timezone('America/New_York')\n+\n+        time_slot = TimeSlots.objects.create(start_at=start_datetime)\n+\n+        report = TimeSlots.objects.annotate(\n+            melb_date=TruncDate('start_at', tzinfo=melb),\n+            pacific_date=TruncDate('start_at', tzinfo=pacific),\n+            ny_date=TruncDate('start_at', tzinfo=ny),\n+        ).values('melb_date', 'pacific_date', 'ny_date').annotate(timeslot_count=Count('id'))\n+\n+        for entry in report:\n+            melb_start_datetime = start_datetime.astimezone(melb)\n+            pacific_start_datetime = start_datetime.astimezone(pacific)\n+            ny_start_datetime = start_datetime.astimezone(ny)\n+\n+            self.assertEqual(entry['melb_date'], melb_start_datetime.date())\n+            self.assertEqual(entry['pacific_date'], pacific_start_datetime.date())\n+            self.assertEqual(entry['ny_date'], ny_start_datetime.date())\n+\n+    def test_trunc_time_with_tzinfo(self):\n+        # Test case to verify TruncTime with tzinfo parameter\n+        start_datetime = datetime(2022, 3, 13, 5, 0, 0)  # DST change in America/New_York\n+        start_datetime = timezone.make_aware(start_datetime, timezone=pytz.UTC)\n+\n+        melb = pytz.timezone('Australia/Melbourne')\n+        pacific = pytz.timezone('US/Pacific')\n+        ny = pytz.timezone('America/New_York')\n+\n+        time_slot = TimeSlots.objects.create(start_at=start_datetime)\n+\n+        report = TimeSlots.objects.annotate(\n+            melb_time=TruncTime('start_at', tzinfo=melb),\n+            pacific_time=TruncTime('start_at', tzinfo=pacific),\n+            ny_time=TruncTime('start_at', tzinfo=ny),\n+        ).values('melb_time', 'pacific_time', 'ny_time').annotate(timeslot_count=Count('id'))\n+\n+        for entry in report:\n+            melb_start_datetime = start_datetime.astimezone(melb)\n+            pacific_start_datetime = start_datetime.astimezone(pacific)\n+            ny_start_datetime = start_datetime.astimezone(ny)\n+\n+            self.assertEqual(entry['melb_time'], melb_start_datetime.time())\n+            self.assertEqual(entry['pacific_time'], pacific_start_datetime.time())\n+            self.assertEqual(entry['ny_time'], ny_start_datetime.time())\n         sao = pytz.timezone('America/Sao_Paulo')\n         utc = pytz.timezone('UTC')\n         start_datetime = utc.localize(datetime(2016, 10, 16, 13))\n",
  "django__django-13401": "",
  "django__django-13410": "diff --git a/tests/files/tests.py b/tests/files/tests.py\nindex 1285e22..dd160ab 100644\n--- a/tests/files/tests.py\n+++ b/tests/files/tests.py\n@@ -1,3 +1,4 @@\n+\n import errno\n import gzip\n import os\n@@ -8,7 +9,7 @@ from io import BytesIO, StringIO, TextIOWrapper\n from pathlib import Path\n from unittest import mock\n \n-from django.core.files import File\n+from django.core.files import File, locks\n from django.core.files.base import ContentFile\n from django.core.files.move import file_move_safe\n from django.core.files.temp import NamedTemporaryFile\n",
  "django__django-13417": "diff --git a/tests/queries/tests.py b/tests/queries/tests.py\nindex 8130de5..e06c329 100644\n--- a/tests/queries/tests.py\n+++ b/tests/queries/tests.py\n@@ -2076,6 +2076,33 @@ class QuerysetOrderedTests(unittest.TestCase):\n     def test_empty_queryset(self):\n         self.assertIs(Annotation.objects.none().ordered, True)\n \n+    def test_annotated_default_ordering(self):\n+        qs = Tag.objects.annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_annotated_values_default_ordering(self):\n+        qs = Tag.objects.values('name').annotate(num_notes=Count('pk'))\n+        self.assertIs(qs.ordered, False)\n+        self.assertIs(qs.order_by('name').ordered, True)\n+\n+    def test_group_by_with_meta_ordering(self):\n+        # This test is specifically aimed at testing the issue described.\n+        qs = Foo.objects.annotate(Count('pk')).all()\n+        self.assertIs(qs.ordered, False)  # We expect the ordered property to be False, since no ORDER BY in SQL.\n+        qs_with_order = qs.order_by('name')  # By forcing an order_by, ordered should be True.\n+        self.assertIs(qs_with_order.ordered, True)\n+\n+    def test_explicit_order_by_overrides_meta(self):\n+        qs = Foo.objects.all()  # Default ordering from Meta\n+        self.assertIs(qs.ordered, True)\n+        # Applying a count that might remove ordering:\n+        qs_annotated = qs.annotate(Count('pk'))\n+        self.assertIs(qs_annotated.ordered, False)\n+        # Applying explicit ordering afterwards:\n+        qs_explicitly_ordered = qs_annotated.order_by('name')\n+        self.assertIs(qs_explicitly_ordered.ordered, True)\n+\n     def test_order_by_extra(self):\n         self.assertIs(Annotation.objects.all().extra(order_by=['id']).ordered, True)\n \n",
  "django__django-13516": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 89f7c38..8098eda 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -341,6 +341,24 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser('prog_name', 'subcommand', epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n+    def test_flush_in_management_command(self):\n+        # This test is to ensure flush() works as intended in management commands.\n+        from django.core.management import call_command\n+        from unittest import mock\n+        from io import StringIO\n+\n+        out = StringIO()\n+        # Patch the flush method of the StringIO instance that will be used as stdout.\n+        with mock.patch.object(out, 'flush') as mocked_flush:\n+            call_command('outputwrapper', stdout=out)\n+\n+        # Check if the flush method was indeed called.\n+        self.assertTrue(mocked_flush.called)\n+        # Ensure 'Working...' is among the output.\n+        self.assertIn('Working...', out.getvalue())\n+        # Ensure 'OK' is also part of the output, indicating subsequent writes after flush.\n+        self.assertIn('OK', out.getvalue())\n+\n \n class CommandRunTests(AdminScriptTestCase):\n     \"\"\"\n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..612bff4 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,9 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n from django.test import TestCase\n+from .models.with_custom_email_field import CustomEmailField\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n \n@@ -37,7 +39,25 @@ class TokenGeneratorTest(TestCase):\n         tk2 = p0.make_token(user_reload)\n         self.assertEqual(tk1, tk2)\n \n-    def test_timeout(self):\n+    def test_token_with_email_change(self):\n+        \"\"\"Updating the user's email address invalidates the token.\"\"\"\n+        user = User.objects.create_user('changeemailuser', 'test@example.com', 'testpw')\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertTrue(p0.check_token(user, tk1))\n+        user.email = 'newemail@example.com'\n+        user.save()\n+        self.assertFalse(p0.check_token(user, tk1))\n+\n+    def test_token_with_custom_email_field(self):\n+        \"\"\"Ensure token for CustomEmailField user is invalidated after email change.\"\"\"\n+        user = CustomEmailField.objects.create_user('customuser', email='custom@example.com', password='testpw')\n+        p0 = PasswordResetTokenGenerator()\n+        tk1 = p0.make_token(user)\n+        self.assertTrue(p0.check_token(user, tk1))\n+        user.email_address = 'newcustom@example.com'\n+        user.save()\n+        self.assertFalse(p0.check_token(user, tk1))\n         \"\"\"The token is valid after n seconds, but no greater.\"\"\"\n         # Uses a mocked version of PasswordResetTokenGenerator so we can change\n         # the value of 'now'.\n",
  "django__django-13568": "diff --git a/tests/auth_tests/test_checks.py b/tests/auth_tests/test_checks.py\nindex c47b5c2..4bd3aca 100644\n--- a/tests/auth_tests/test_checks.py\n+++ b/tests/auth_tests/test_checks.py\n@@ -1,9 +1,11 @@\n+\n from django.contrib.auth.checks import (\n     check_models_permissions, check_user_model,\n )\n from django.contrib.auth.models import AbstractBaseUser\n from django.core import checks\n from django.db import models\n+from django.db.models import Q, UniqueConstraint\n from django.test import (\n     SimpleTestCase, override_settings, override_system_checks,\n )\n@@ -138,6 +140,47 @@ class ModelsPermissionsChecksTests(SimpleTestCase):\n             ),\n         ])\n \n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserNoUniqueConstraint')\n+    def test_username_no_unique_constraint(self):\n+        class CustomUserNoUniqueConstraint(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Error(\n+                \"'CustomUserNoUniqueConstraint.username' must be unique because it is named as the 'USERNAME_FIELD'.\",\n+                obj=CustomUserNoUniqueConstraint,\n+                id='auth.E003',\n+            ),\n+        ])\n+\n+    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithUniqueConstraintAndCondition')\n+    def test_username_unique_constraint_with_condition(self):\n+        class CustomUserWithUniqueConstraintAndCondition(AbstractBaseUser):\n+            username = models.CharField(max_length=30)\n+            USERNAME_FIELD = 'username'\n+\n+            class Meta:\n+                constraints = [\n+                    UniqueConstraint(\n+                        fields=['username'],\n+                        name='username_unique_non_null_password',\n+                        condition=Q(password__isnull=False),\n+                    ),\n+                ]\n+\n+        errors = checks.run_checks(app_configs=self.apps.get_app_configs())\n+        self.assertEqual(errors, [\n+            checks.Warning(\n+                \"'CustomUserWithUniqueConstraintAndCondition.username' is named as the 'USERNAME_FIELD', \"\n+                \"but it is not unique across all records.\",\n+                hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n+                obj=CustomUserWithUniqueConstraintAndCondition,\n+                id='auth.W004',\n+            ),\n+        ])\n+\n     def test_non_clashing_custom_permissions(self):\n         class Checked(models.Model):\n             class Meta:\n",
  "django__django-13569": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex a44d0b6..9db806f 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1314,4 +1314,34 @@ class AggregateTestCase(TestCase):\n         # non-multivalued JOINs, see Col.possibly_multivalued (refs #31150):\n         # with self.assertNumQueries(1) as ctx:\n         #     self.assertSequenceEqual(books_qs, [book])\n-        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+        # self.assertEqual(ctx[0]['sql'].count('SELECT'), 2)\n+\n+    def test_aggregation_random_ordering(self):\n+        \"\"\"Random() is not included in the GROUP BY when used for ordering.\"\"\"\n+        authors = Author.objects.annotate(contact_count=Count('book')).order_by('?')\n+        self.assertQuerysetEqual(authors, [\n+            ('Adrian Holovaty', 1),\n+            ('Jacob Kaplan-Moss', 1),\n+            ('Brad Dayley', 1),\n+            ('James Bennett', 1),\n+            ('Jeffrey Forcier', 1),\n+            ('Paul Bissex', 1),\n+            ('Wesley J. Chun', 1),\n+            ('Stuart Russell', 1),\n+            ('Peter Norvig', 2),\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n+    \n+    def test_random_order_does_not_affect_count(self):\n+        \"\"\"Ensure random ordering doesn't split the count aggregation.\"\"\"\n+        things = Thing.objects.annotate(related_count=Count('related')).order_by('?')\n+        expected_count = [{'id': thing.id, 'related_count': 2} for thing in things]\n+        self.assertEqual(list(things.values('id', 'related_count')), expected_count)\n+\n+    def test_random_order_multiple_calls(self):\n+        \"\"\"Test multiple calls to random order don't disrupt grouping.\"\"\"\n+        results_set = set()\n+        for _ in range(5):  # Run multiple times to ensure randomness doesn't create issues.\n+            things = Thing.objects.annotate(rc=Count('related')).order_by('?')\n+            result = tuple(things.values('id', 'rc'))\n+            results_set.add(result)\n+        self.assertTrue(all(result == ({'id': 1, 'rc': 2},) for result in results_set))\n",
  "django__django-13590": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 0b4f73f..1d7fc9c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n import unittest\n@@ -6,6 +7,7 @@ from copy import deepcopy\n from decimal import Decimal\n from unittest import mock\n \n+from collections import namedtuple\n from django.core.exceptions import FieldError\n from django.db import DatabaseError, NotSupportedError, connection\n from django.db.models import (\n@@ -814,8 +816,30 @@ class IterableLookupInnerExpressionsTests(TestCase):\n         Company.objects.create(name='5050 Ltd', num_employees=50, num_chairs=50, ceo=ceo)\n         Company.objects.create(name='5060 Ltd', num_employees=50, num_chairs=60, ceo=ceo)\n         Company.objects.create(name='99300 Ltd', num_employees=99, num_chairs=300, ceo=ceo)\n-\n-    def test_in_lookup_allows_F_expressions_and_expressions_for_integers(self):\n+    \n+    def test_range_lookup_namedtuple(self):\n+        # Verify that named tuples work correctly with range lookups.\n+        ceo = Employee.objects.create(firstname='Sample', lastname='Employee', salary=45)\n+        Company.objects.create(name='New Co', num_employees=75, num_chairs=300, ceo=ceo)\n+        EmployeeRange = namedtuple('EmployeeRange', ['minimum', 'maximum'])\n+        \n+        qs = Company.objects.filter(num_employees__range=EmployeeRange(minimum=70, maximum=80))\n+        self.assertQuerysetEqual(qs, ['<Company: New Co>'], ordered=False)\n+\n+    def test_range_lookup_namedtuple_with_other_data(self):\n+        # Test another named tuple to ensure various ranges are covered\n+        ceo = Employee.objects.create(firstname='Another', lastname='Ceo', salary=50)\n+        Company.objects.create(name='Different Co', num_employees=150, num_chairs=400, ceo=ceo)\n+        EmployeeRange = namedtuple('EmployeeRange', ['low', 'high'])\n+        \n+        qs = Company.objects.filter(num_employees__range=EmployeeRange(low=140, high=160))\n+        self.assertQuerysetEqual(qs, ['<Company: Different Co>'], ordered=False)\n+\n+    def test_range_lookup_namedtuple_empty_result(self):\n+        # Ensure that a range not matching any results also works with named tuple.\n+        NotMatchingRange = namedtuple('NotMatchingRange', ['start', 'end'])\n+        qs = Company.objects.filter(num_employees__range=NotMatchingRange(start=200, end=300))\n+        self.assertFalse(qs.exists())\n         # __in lookups can use F() expressions for integers.\n         queryset = Company.objects.filter(num_employees__in=([F('num_chairs') - 10]))\n         self.assertQuerysetEqual(queryset, ['<Company: 5060 Ltd>'], ordered=False)\n",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..2b12280 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -16,6 +16,7 @@ from unittest import mock\n \n from django import conf, get_version\n from django.conf import settings\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n@@ -37,6 +38,55 @@ custom_templates_dir = os.path.join(os.path.dirname(__file__), 'custom_templates\n SYSTEM_CHECK_MSG = 'System check identified no issues'\n \n \n+class ExecuteFromCommandLineTest(SimpleTestCase):\n+    def test_program_name_from_argv(self):\n+        \"\"\"\n+        Program name is computed from the execute_from_command_line()'s argv\n+        argument, not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', [None] + args):\n+                execute_from_command_line(['django-admin'] + args)\n+        self.assertIn('usage: django-admin shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_with_main_py(self):\n+        \"\"\"\n+        Program name should resolve to 'python -m django' when argv[0] is '__main__.py',\n+        not sys.argv.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['__main__.py'] + args):\n+                execute_from_command_line(['python -m django'] + args)\n+        self.assertIn('usage: python -m django shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_program_name_explicit_argv(self):\n+        \"\"\"\n+        An explicit argv argument passed to execute_from_command_line should be\n+        used to determine the program name instead of sys.argv.\n+        \"\"\"\n+        custom_argv = ['custom-prog', 'help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['sys-prog', 'help', 'shell']):\n+                execute_from_command_line(custom_argv)\n+        self.assertIn('usage: custom-prog shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+    def test_no_program_name_in_argv(self):\n+        \"\"\"\n+        Test behavior when argv does not contain a proper program name.\n+        \"\"\"\n+        args = ['help', 'shell']\n+        with captured_stdout() as out, captured_stderr() as err:\n+            with mock.patch('sys.argv', ['', 'help', 'shell']):\n+                execute_from_command_line([''] + args)\n+        self.assertIn('usage:  shell', out.getvalue())\n+        self.assertEqual(err.getvalue(), '')\n+\n+\n class AdminScriptTestCase(SimpleTestCase):\n     def setUp(self):\n         tmpdir = tempfile.TemporaryDirectory()\n",
  "django__django-13670": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 6f0b13f..f54503b 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -1,3 +1,4 @@\n+\n from datetime import date, datetime\n \n from django.test import SimpleTestCase, override_settings\n@@ -60,8 +61,19 @@ class DateFormatTests(SimpleTestCase):\n     def test_epoch(self):\n         udt = datetime(1970, 1, 1, tzinfo=utc)\n         self.assertEqual(format(udt, 'U'), '0')\n-\n-    def test_empty_format(self):\n+    def test_year_before_1000(self):\n+        tests = [\n+            (476, '76'),\n+            (42, '42'),\n+            (4, '04'),\n+            (123, '23'),  # Additional case from the issue example\n+        ]\n+        for year, expected_date in tests:\n+            with self.subTest(year=year):\n+                self.assertEqual(\n+                    dateformat.format(datetime(year, 9, 8, 5, 0), 'y'),\n+                    expected_date,\n+                )\n         my_birthday = datetime(1979, 7, 8, 22, 00)\n \n         self.assertEqual(dateformat.format(my_birthday, ''), '')\n@@ -164,4 +176,4 @@ class DateFormatTests(SimpleTestCase):\n             self.assertEqual(\n                 dateformat.format(dt, 'r'),\n                 'Sun, 08 Jul 1979 22:00:00 +0100',\n-            )\n+            )\n",
  "django__django-13741": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex ca66cd5..98dcef1 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1020,6 +1020,10 @@ class ReadOnlyPasswordHashTest(SimpleTestCase):\n             \"\"\"\n         )\n \n+    def test_readonly_password_hash_field_disabled(self):\n+        field = ReadOnlyPasswordHashField()\n+        self.assertIs(field.disabled, True)\n+\n     def test_readonly_field_has_changed(self):\n         field = ReadOnlyPasswordHashField()\n         self.assertFalse(field.has_changed('aaa', 'bbb'))\n",
  "django__django-13786": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3782589..ea1d437 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -119,6 +119,46 @@ class OptimizerTests(SimpleTestCase):\n             ]\n         )\n \n+    def test_create_model_and_remove_model_options_scenario_empty(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'SampleModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Sample Model', 'ordering': ['-id']},\n+                ),\n+                migrations.AlterModelOptions('SampleModel', options={}),\n+            ],\n+            [\n+                migrations.CreateModel('SampleModel', fields=[]),\n+            ],\n+        )\n+\n+    def test_create_model_and_alter_model_options_scenario_reduction(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    'ComplexModel',\n+                    fields=[],\n+                    options={\n+                        'verbose_name': 'Complex',\n+                        'verbose_name_plural': 'Complexes',\n+                        'ordering': ['name'],\n+                    },\n+                ),\n+                migrations.AlterModelOptions(\n+                    'ComplexModel', options={'verbose_name': 'Complex'}\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    'ComplexModel',\n+                    fields=[],\n+                    options={'verbose_name': 'Complex'},\n+                ),\n+            ],\n+        )\n+\n     def _test_create_alter_foo_delete_model(self, alter_foo):\n         \"\"\"\n         CreateModel, AlterModelTable, AlterUniqueTogether/AlterIndexTogether/\n",
  "django__django-13794": "diff --git a/tests/template_tests/filter_tests/test_add.py b/tests/template_tests/filter_tests/test_add.py\nindex 7ba4955..8234b9b 100644\n--- a/tests/template_tests/filter_tests/test_add.py\n+++ b/tests/template_tests/filter_tests/test_add.py\n@@ -1,12 +1,51 @@\n+\n from datetime import date, timedelta\n \n from django.template.defaultfilters import add\n+from django.utils.translation import gettext_lazy\n from django.test import SimpleTestCase\n \n from ..utils import setup\n \n \n class AddTests(SimpleTestCase):\n+\n+    @setup({'add08': '{{ s1|add:lazy_s2 }}'})\n+    def test_add08(self):\n+        output = self.engine.render_to_string(\n+            'add08',\n+            {'s1': 'string', 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    @setup({'add09': '{{ lazy_s1|add:lazy_s2 }}'})\n+    def test_add09(self):\n+        output = self.engine.render_to_string(\n+            'add09',\n+            {'lazy_s1': gettext_lazy('string'), 'lazy_s2': gettext_lazy('lazy')},\n+        )\n+        self.assertEqual(output, 'stringlazy')\n+\n+    def test_lazy_add(self):\n+        lazy_4 = lazy(lambda: 4, int)\n+        lazy_5 = lazy(lambda: 5, int)\n+        self.assertEqual(lazy_4() + lazy_5(), 9)\n+\n+    @setup({'add10': '{{ s1|add:s2|add:lazy_s3 }}'})\n+    def test_add10(self):\n+        output = self.engine.render_to_string(\n+            'add10',\n+            {'s1': 'first', 's2': 'second', 'lazy_s3': gettext_lazy('third')},\n+        )\n+        self.assertEqual(output, 'firstsecondthird')\n+\n+    @setup({'add11': '{{ lazy_s1|add:s2 }}'})\n+    def test_add11(self):\n+        output = self.engine.render_to_string(\n+            'add11',\n+            {'lazy_s1': gettext_lazy('lazy'), 's2': 'string'},\n+        )\n+        self.assertEqual(output, 'lazystring')\n     \"\"\"\n     Tests for #11687 and #16676\n     \"\"\"\n",
  "django__django-13807": "diff --git a/tests/backends/tests.py b/tests/backends/tests.py\nindex 0aee2b6..13b5470 100644\n--- a/tests/backends/tests.py\n+++ b/tests/backends/tests.py\n@@ -21,7 +21,8 @@ from django.test import (\n from .models import (\n     Article, Object, ObjectReference, Person, Post, RawData, Reporter,\n     ReporterProxy, SchoolClass, Square,\n-    VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ,\n+    VeryLongModelNameZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ, \n+    SQLKeywordsModel\n )\n \n \n@@ -630,7 +631,25 @@ class ThreadTests(TransactionTestCase):\n \n     available_apps = ['backends']\n \n-    def test_default_connection_thread_local(self):\n+class SQLKeywordsTest(TransactionTestCase):\n+    available_apps = ['backends']\n+\n+    def setUp(self):\n+        self.reporter = Reporter.objects.create(id=1, first_name=\"John\", last_name=\"Doe\", email=\"john.doe@example.com\")\n+    \n+    def test_check_constraints_sql_keywords(self):\n+        \"\"\"\n+        Test that constraints are properly checked for tables with SQL keyword names.\n+        \"\"\"\n+        with transaction.atomic():\n+            obj = SQLKeywordsModel.objects.create(reporter=self.reporter)\n+            obj.refresh_from_db()\n+            obj.reporter_id = 30\n+            with connection.constraint_checks_disabled():\n+                obj.save()\n+                with self.assertRaises(IntegrityError):\n+                    connection.check_constraints(table_names=['order'])\n+            transaction.set_rollback(True)\n         \"\"\"\n         The default connection (i.e. django.db.connection) is different for\n         each thread (#17258).\n",
  "django__django-13809": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex d88ea78..987efc8 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -1342,8 +1342,30 @@ class ManageRunserverMigrationWarning(TestCase):\n             'app_waiting_migration.', output\n         )\n \n+import mock\n+from django.core.management import call_command\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from io import StringIO\n+\n+...\n+\n+class ManageRunserverSkipChecks(AdminScriptTestCase):\n+    def setUp(self):\n+        self.stdout = StringIO()\n+\n+    @mock.patch('django.core.management.commands.runserver.Command.check')\n+    def test_runserver_with_skip_checks(self, mock_check):\n+        call_command('runserver', skip_checks=True, stdout=self.stdout)\n+        output = self.stdout.getvalue()\n+        self.assertNotIn('Performing system checks...', output)\n+        mock_check.assert_not_called()\n \n-class ManageRunserverEmptyAllowedHosts(AdminScriptTestCase):\n+    @mock.patch('django.core.management.commands.runserver.Command.check')\n+    def test_runserver_without_skip_checks(self, mock_check):\n+        call_command('runserver', skip_checks=False, stdout=self.stdout)\n+        output = self.stdout.getvalue()\n+        self.assertIn('Performing system checks...', output)\n+        mock_check.assert_called()\n     def setUp(self):\n         super().setUp()\n         self.write_settings('settings.py', sdict={\n",
  "django__django-13810": "",
  "django__django-13820": "diff --git a/tests/migrations/test_loader.py b/tests/migrations/test_loader.py\nindex 594c01e..558fa0c 100644\n--- a/tests/migrations/test_loader.py\n+++ b/tests/migrations/test_loader.py\n@@ -1,3 +1,4 @@\n+\n import compileall\n import os\n \n@@ -6,6 +7,7 @@ from django.db.migrations.exceptions import (\n     AmbiguityError, InconsistentMigrationHistory, NodeNotFoundError,\n )\n from django.db.migrations.loader import MigrationLoader\n+from importlib import import_module\n from django.db.migrations.recorder import MigrationRecorder\n from django.test import TestCase, modify_settings, override_settings\n \n@@ -512,6 +514,36 @@ class LoaderTests(TestCase):\n         migrations = [name for app, name in loader.disk_migrations if app == 'migrations']\n         self.assertEqual(migrations, [])\n \n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_without_file'})\n+    def test_loading_package_without_file_in_frozen_environment(self):\n+        \"\"\"\n+        To support frozen environments, MigrationLoader should load migrations from\n+        regular packages with no __file__ attribute.\n+        \"\"\"\n+        test_module = import_module('migrations.test_migrations_without_file')\n+        loader = MigrationLoader(connection)\n+        # Backup original attributes\n+        module_file = test_module.__file__\n+        module_origin = test_module.__spec__.origin\n+        module_has_location = test_module.__spec__.has_location\n+        try:\n+            # Simulate frozen environment by removing __file__\n+            del test_module.__file__\n+            test_module.__spec__.origin = None\n+            test_module.__spec__.has_location = False\n+            loader.load_disk()\n+            migrations = [\n+                name\n+                for app, name in loader.disk_migrations\n+                if app == 'migrations'\n+            ]\n+            self.assertCountEqual(migrations, ['0001_initial', '0002_second'])\n+        finally:\n+            # Restore original attributes\n+            test_module.__file__ = module_file\n+            test_module.__spec__.origin = module_origin\n+            test_module.__spec__.has_location = module_has_location\n+\n \n class PycLoaderTests(MigrationTestBase):\n \n",
  "django__django-13821": "diff --git a/tests/backends/sqlite/tests.py b/tests/backends/sqlite/tests.py\nindex e602447..272b968 100644\n--- a/tests/backends/sqlite/tests.py\n+++ b/tests/backends/sqlite/tests.py\n@@ -9,6 +9,9 @@ from unittest import mock\n \n from django.core.exceptions import ImproperlyConfigured\n from django.db import NotSupportedError, connection, transaction\n+import unittest\n+from unittest import mock\n+from django.core.exceptions import ImproperlyConfigured\n from django.db.models import Aggregate, Avg, CharField, StdDev, Sum, Variance\n from django.db.utils import ConnectionHandler\n from django.test import (\n@@ -36,7 +39,20 @@ class Tests(TestCase):\n                 self.assertRaisesMessage(ImproperlyConfigured, msg):\n             check_sqlite_version()\n \n-    def test_aggregation(self):\n+    def test_check_sqlite_version_3_8_11_1(self):\n+        msg = 'SQLite 3.9.0 or later is required (found 3.8.11.1).'\n+        with mock.patch('django.db.backends.sqlite3.base.Database.sqlite_version_info', (3, 8, 11, 1)), \\\n+                mock.patch('django.db.backends.sqlite3.base.Database.sqlite_version', '3.8.11.1'), \\\n+                self.assertRaisesMessage(ImproperlyConfigured, msg):\n+            check_sqlite_version()\n+\n+    def test_check_sqlite_version_3_9_0(self):\n+        try:\n+            with mock.patch('django.db.backends.sqlite3.base.Database.sqlite_version_info', (3, 9, 0)), \\\n+                    mock.patch('django.db.backends.sqlite3.base.Database.sqlite_version', '3.9.0'):\n+                check_sqlite_version()\n+        except ImproperlyConfigured:\n+            self.fail(\"check_sqlite_version() raised ImproperlyConfigured unexpectedly!\")\n         \"\"\"Raise NotSupportedError when aggregating on date/time fields.\"\"\"\n         for aggregate in (Sum, Avg, Variance, StdDev):\n             with self.assertRaises(NotSupportedError):\n",
  "django__django-13837": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 10ffa22..459e997 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -158,7 +158,14 @@ class TestIterModulesAndFiles(SimpleTestCase):\n \n class TestChildArguments(SimpleTestCase):\n     @mock.patch('sys.argv', [django.__main__.__file__, 'runserver'])\n+    @mock.patch('sys.argv', ['utils_tests/test_module', 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_package(self):\n+        with mock.patch.dict(sys.modules, {'__main__': test_main}):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+            )\n     def test_run_as_module(self):\n         self.assertEqual(\n             autoreload.get_child_arguments(),\n@@ -173,7 +180,14 @@ class TestChildArguments(SimpleTestCase):\n             [sys.executable, '-Werror', __file__, 'runserver']\n         )\n \n+    @mock.patch('sys.argv', ['utils_tests/test_module', 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n+    def test_run_as_non_django_package(self):\n+        with mock.patch.dict(sys.modules, {'__main__': test_main}):\n+            self.assertEqual(\n+                autoreload.get_child_arguments(),\n+                [sys.executable, '-m', 'utils_tests.test_module', 'runserver']\n+            )\n     def test_exe_fallback(self):\n         with tempfile.TemporaryDirectory() as tmpdir:\n             exe_path = Path(tmpdir) / 'django-admin.exe'\n",
  "django__django-13925": "",
  "django__django-13933": "",
  "django__django-13964": "diff --git a/tests/many_to_one/models.py b/tests/many_to_one/models.py\nindex 1078928..957e609 100644\n--- a/tests/many_to_one/models.py\n+++ b/tests/many_to_one/models.py\n@@ -63,6 +63,12 @@ class Third(models.Model):\n     third = models.ForeignKey('self', models.SET_NULL, null=True, related_name='child_set')\n \n \n+class ParentStringPrimaryKey(models.Model):\n+    name = models.CharField(primary_key=True, max_length=15)\n+\n+class ChildStringPrimaryKeyParent(models.Model):\n+    parent = models.ForeignKey(ParentStringPrimaryKey, on_delete=models.CASCADE)\n+\n class Parent(models.Model):\n     name = models.CharField(max_length=20, unique=True)\n     bestchild = models.ForeignKey('Child', models.SET_NULL, null=True, related_name='favored_by')\n",
  "django__django-14007": "diff --git a/tests/custom_pk/tests.py b/tests/custom_pk/tests.py\nindex cbae2d9..a38d292 100644\n--- a/tests/custom_pk/tests.py\n+++ b/tests/custom_pk/tests.py\n@@ -1,5 +1,8 @@\n+\n from django.db import IntegrityError, transaction\n-from django.test import TestCase, skipIfDBFeature\n+from django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n+from .fields import MyWrapper\n+from .models import CustomAutoFieldModel\n \n from .models import Bar, Business, Employee, Foo\n \n@@ -220,9 +223,22 @@ class CustomPKTests(TestCase):\n         self.assertEqual(f, new_foo),\n         self.assertEqual(f.bar, new_bar)\n \n-    # SQLite lets objects be saved with an empty primary key, even though an\n-    # integer is expected. So we can't check for an error being raised in that\n-    # case for SQLite. Remove it from the suite for this next bit.\n+class MyAutoFieldTests(TestCase):\n+    def test_auto_field_subclass_create(self):\n+        \"\"\"\n+        Test creation of a model with a custom AutoField.\n+        \"\"\"\n+        obj = CustomAutoFieldModel.objects.create()\n+        self.assertIsInstance(obj.id, MyWrapper)\n+\n+    @skipUnlessDBFeature('can_return_rows_from_bulk_insert')\n+    def test_auto_field_subclass_bulk_create(self):\n+        \"\"\"\n+        Test bulk creation of models with a custom AutoField.\n+        \"\"\"\n+        obj = CustomAutoFieldModel()\n+        CustomAutoFieldModel.objects.bulk_create([obj])\n+        self.assertIsInstance(obj.id, MyWrapper)\n     @skipIfDBFeature('supports_unspecified_pk')\n     def test_required_pk(self):\n         # The primary key must be specified, so an error is raised if you\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..d4c8937 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -816,6 +816,21 @@ class BasicExpressionsTests(TestCase):\n             [self.example_inc.ceo, self.max],\n         )\n \n+    def test_commutativity_of_Q_and_Exists(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n+        self.gmbh.point_of_contact = self.max\n+        self.gmbh.save()\n+        conditions = [\n+            (Q(salary__gte=30) & Exists(is_ceo)),  # Should not raise TypeError\n+            (Exists(is_ceo) & Q(salary__gte=30)),  # Should not raise TypeError\n+            (Q(salary__lt=15) | Exists(is_poc)),   # Should not raise TypeError\n+            (Exists(is_poc) | Q(salary__lt=15)),   # Should not raise TypeError\n+        ]\n+        for condition in conditions:\n+            with self.subTest(condition=condition):\n+                self.assertIsInstance(Employee.objects.filter(condition), QuerySet)\n+\n \n class IterableLookupInnerExpressionsTests(TestCase):\n     @classmethod\n",
  "django__django-14053": "diff --git a/tests/staticfiles_tests/test_storage.py b/tests/staticfiles_tests/test_storage.py\nindex 76f3d3e..15c231a 100644\n--- a/tests/staticfiles_tests/test_storage.py\n+++ b/tests/staticfiles_tests/test_storage.py\n@@ -202,6 +202,12 @@ class TestHashedFiles:\n         stats = collectstatic_cmd.collect()\n         self.assertIn(os.path.join('cached', 'css', 'window.css'), stats['post_processed'])\n         self.assertIn(os.path.join('cached', 'css', 'img', 'window.png'), stats['unmodified'])\n+\n+        # New test case verifying no duplicate yields\n+        # Collect the post-processed files and ensure there are no duplicates.\n+        post_processed_files = stats['post_processed']\n+        self.assertEqual(len(post_processed_files), len(set(post_processed_files)), \n+                         \"Duplicate files found in post_processed files, indicating multiple yields for the same file.\")\n         self.assertIn(os.path.join('test', 'nonascii.css'), stats['post_processed'])\n         self.assertPostCondition()\n \n",
  "django__django-14089": "diff --git a/tests/utils_tests/test_datastructures.py b/tests/utils_tests/test_datastructures.py\nindex 7fb3d83..0c06f59 100644\n--- a/tests/utils_tests/test_datastructures.py\n+++ b/tests/utils_tests/test_datastructures.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Tests for stuff in django.utils.datastructures.\n \"\"\"\n@@ -5,6 +6,7 @@ Tests for stuff in django.utils.datastructures.\n import copy\n import pickle\n \n+import collections.abc\n from django.test import SimpleTestCase\n from django.utils.datastructures import (\n     CaseInsensitiveMapping, DictWrapper, ImmutableList, MultiValueDict,\n@@ -18,7 +20,30 @@ class OrderedSetTests(SimpleTestCase):\n         s = OrderedSet([1, 2, 3])\n         self.assertEqual(list(s.dict.keys()), [1, 2, 3])\n \n-    def test_remove(self):\n+    def test_reversed(self):\n+        # Basic test to check reverse of a simple OrderedSet\n+        s = reversed(OrderedSet([1, 2, 3]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [3, 2, 1])\n+        \n+    def test_reversed_empty(self):\n+        # Test reversing an empty OrderedSet\n+        s = reversed(OrderedSet([]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [])\n+\n+    def test_reversed_single_element(self):\n+        # Test reversing an OrderedSet with a single element\n+        s = reversed(OrderedSet([42]))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), [42])\n+\n+    def test_reversed_various_types(self):\n+        # Test reversing an OrderedSet with various types of elements\n+        data = [1, 'a', 3.14, (1, 2), None]\n+        s = reversed(OrderedSet(data))\n+        self.assertIsInstance(s, collections.abc.Iterator)\n+        self.assertEqual(list(s), list(reversed(data)))\n         s = OrderedSet()\n         self.assertEqual(len(s), 0)\n         s.add(1)\n",
  "django__django-14122": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex b2ec8af..96476c0 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from decimal import Decimal\n@@ -418,6 +419,19 @@ class AggregateTestCase(TestCase):\n                 books = Book.objects.aggregate(ratings=aggregate('rating', distinct=True))\n                 self.assertEqual(books['ratings'], expected_result)\n \n+    def test_meta_ordering_not_in_group_by(self):\n+        \"\"\"\n+        Fields specified in Meta.ordering should not be included in the GROUP BY clause.\n+        This tests for the issue where Meta.ordering fields improperly affect the GROUP BY.\n+        \"\"\"\n+        # Assuming Book model has Meta.ordering based on 'rating', for example\n+        books = Book.objects.values('publisher').annotate(count=Count('id')).order_by()\n+        # Without Meta.ordering fields in the GROUP BY, it should correctly reflect publisher counts.\n+        expected_results = [{'publisher': book.publisher.id, 'count': book_count} for book, book_count in [\n+            (self.b1, 1), (self.b2, 1), (self.b3, 1), (self.b4, 1), (self.b5, 1), (self.b6, 1),\n+        ]]\n+        self.assertCountEqual(list(books), expected_results)\n+\n     def test_non_grouped_annotation_not_in_group_by(self):\n         \"\"\"\n         An annotation not included in values() before an aggregate should be\n@@ -1339,4 +1353,4 @@ class AggregateTestCase(TestCase):\n             ('Wesley J. Chun', 1),\n             ('Stuart Russell', 1),\n             ('Peter Norvig', 2),\n-        ], lambda a: (a.name, a.contact_count), ordered=False)\n+        ], lambda a: (a.name, a.contact_count), ordered=False)\n",
  "django__django-14140": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex 7e095fe..c1fd692 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,6 +1,10 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n+from django.db.models import Exists, OuterRef\n+from django.contrib.auth import get_user_model\n+\n \n class QTests(SimpleTestCase):\n     def test_combine_and_empty(self):\n@@ -93,7 +97,25 @@ class QTests(SimpleTestCase):\n         path, args, kwargs = q.deconstruct()\n         self.assertEqual(Q(*args, **kwargs), q)\n \n-    def test_reconstruct_negated(self):\n+    def test_deconstruct_exists(self):\n+        User = get_user_model()\n+        users = User.objects.filter(username=OuterRef('username'))\n+        q = Q(Exists(users))\n+        path, args, kwargs = q.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(users),))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_combine_exists_with_Q(self):\n+        User = get_user_model()\n+        users = User.objects.filter(username=OuterRef('username'))\n+        q1 = Q(Exists(users))\n+        q2 = Q(x=1)\n+        q_combined = q1 & q2\n+        path, args, kwargs = q_combined.deconstruct()\n+        self.assertEqual(path, 'django.db.models.Q')\n+        self.assertEqual(args, (Exists(users), ('x', 1)))\n+        self.assertEqual(kwargs, {})\n         q = ~Q(price__gt=F('discounted_price'))\n         path, args, kwargs = q.deconstruct()\n         self.assertEqual(Q(*args, **kwargs), q)\n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..b847b2f 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,5 +1,7 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n+from django.db import models\n from django.test import SimpleTestCase, override_settings\n from django.test.utils import isolate_apps\n \n@@ -66,7 +68,31 @@ class TestDefaultPK(SimpleTestCase):\n             class Model(models.Model):\n                 pass\n \n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n@@ -82,7 +108,31 @@ class TestDefaultPK(SimpleTestCase):\n \n         self.assertIsInstance(Model._meta.pk, models.SmallAutoField)\n \n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField'\n+    )\n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @override_settings(\n+        DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField'\n+    )\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+\n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n",
  "django__django-14311": "",
  "django__django-14349": "diff --git a/tests/validators/tests.py b/tests/validators/tests.py\nindex f726e49..072e66c 100644\n--- a/tests/validators/tests.py\n+++ b/tests/validators/tests.py\n@@ -226,7 +226,11 @@ TEST_DATA = [\n     (URLValidator(), None, ValidationError),\n     (URLValidator(), 56, ValidationError),\n     (URLValidator(), 'no_scheme', ValidationError),\n-    # Trailing newlines not accepted\n+    # Trailing newlines, carriage returns, and tabs not accepted\n+    (URLValidator(), 'http://www.djangoproject.com/\\r', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\r', ValidationError),\n+    (URLValidator(), 'http://www.djangoproject.com/\\t', ValidationError),\n+    (URLValidator(), 'http://[::ffff:192.9.5.5]\\t', ValidationError),\n     (URLValidator(), 'http://www.djangoproject.com/\\n', ValidationError),\n     (URLValidator(), 'http://[::ffff:192.9.5.5]\\n', ValidationError),\n     # Trailing junk does not take forever to reject\n",
  "django__django-14351": "diff --git a/tests/aggregation_regress/tests.py b/tests/aggregation_regress/tests.py\nindex 79963c3..09fe0f6 100644\n--- a/tests/aggregation_regress/tests.py\n+++ b/tests/aggregation_regress/tests.py\n@@ -1526,6 +1526,50 @@ class AggregationTests(TestCase):\n         DistinctAggregate('foo', distinct=True)\n \n \n+from django.test import TestCase\n+from django.db.models import Count, Q\n+from .models import Author, Book  # Assuming Author and Book models exist in the same test package\n+\n+class SubqueryInGroupByTests(TestCase):\n+    def setUp(self):\n+        # Setting up initial data for Author and Book models\n+        self.author1 = Author.objects.create(name=\"Author One\")\n+        self.author2 = Author.objects.create(name=\"Author Two\")\n+        \n+        self.book1 = Book.objects.create(title=\"Book One\")\n+        self.book2 = Book.objects.create(title=\"Book Two\")\n+        self.book3 = Book.objects.create(title=\"Book Three\")\n+        \n+        self.book1.authors.add(self.author1)\n+        self.book2.authors.add(self.author2)\n+        self.book3.authors.add(self.author1, self.author2)\n+\n+    def test_having_subquery_select(self):\n+        authors = Author.objects.filter(pk=self.author1.pk)\n+        books = Book.objects.annotate(Count('authors')).filter(\n+            Q(authors__in=authors) | Q(authors__count__gt=1)\n+        )\n+        self.assertEqual(set(books), {self.book1, self.book3})\n+\n+    def test_fix_q_object_subquery_error(self):\n+        # This test is designed to reproduce the issue described in the problem statement\n+        property_groups = PropertyGroup.objects.agent_groups(management_agent=1)  # Replace with appropriate function\n+        queryset = Book.objects.annotate(Count(\"authors__property_groups\"))\n+        \n+        working_case = queryset.filter(\n+            Q(authors__property_groups__id__in=property_groups.values_list(\"id\", flat=True))\n+            | Q(authors__property_groups__count=0)\n+        ).distinct()\n+        self.assertTrue(working_case.exists())\n+\n+        failing_case = queryset.filter(\n+            Q(authors__property_groups__in=property_groups)\n+            | Q(authors__property_groups__count=0)\n+        ).distinct()\n+        \n+        with self.assertRaises(ProgrammingError):\n+            failing_case.exists()\n+\n class JoinPromotionTests(TestCase):\n     def test_ticket_21150(self):\n         b = Bravo.objects.create()\n",
  "django__django-14373": "diff --git a/tests/utils_tests/test_dateformat.py b/tests/utils_tests/test_dateformat.py\nindex 2f7c68b..6785e63 100644\n--- a/tests/utils_tests/test_dateformat.py\n+++ b/tests/utils_tests/test_dateformat.py\n@@ -157,6 +157,11 @@ class DateFormatTests(SimpleTestCase):\n             with self.assertRaisesMessage(TypeError, msg):\n                 dateformat.format(my_birthday, specifier)\n \n+from datetime import datetime\n+from django.utils import dateformat\n+\n+class TestDateFormat(TestCase):\n+        \n     def test_r_format_with_non_en_locale(self):\n         # Changing the locale doesn't change the \"r\" format.\n         dt = datetime(1979, 7, 8, 22, 00)\n",
  "django__django-14376": "",
  "django__django-14434": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex 39c82bf..fb3b8f9 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -2198,6 +2198,18 @@ class SchemaTests(TransactionTestCase):\n             AuthorWithUniqueNameAndBirthday._meta.constraints = []\n             editor.remove_constraint(AuthorWithUniqueNameAndBirthday, constraint)\n \n+    def test_unique_constraint_with_wrong_type(self):\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+        # Intentional mistake: passing a Table() instance instead of a string\n+        constraint = UniqueConstraint(fields=[Author._meta.db_table], name='wrong_type_uq')\n+        # Add constraint.\n+        with connection.schema_editor() as editor:\n+            try:\n+                editor.add_constraint(Author, constraint)\n+            except TypeError as e:\n+                self.assertEqual(str(e), \"Expected str but got 'Table' instance.\")\n+\n     @skipUnlessDBFeature('supports_expression_indexes')\n     def test_func_unique_constraint(self):\n         with connection.schema_editor() as editor:\n",
  "django__django-14493": "",
  "django__django-14500": "diff --git a/tests/migrations/test_executor.py b/tests/migrations/test_executor.py\nindex d884fe4..8872ee0 100644\n--- a/tests/migrations/test_executor.py\n+++ b/tests/migrations/test_executor.py\n@@ -653,7 +653,45 @@ class ExecutorTests(MigrationTestBase):\n             recorder.applied_migrations(),\n         )\n \n-    # When the feature is False, the operation and the record won't be\n+    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_squashed'})\n+    def test_migrate_marks_squashed_migration_unapplied(self):\n+        \"\"\"Ensure squashed migration marked as unapplied properly.\"\"\"\n+        executor = MigrationExecutor(connection)\n+        executor.migrate([('migrations', '0001_squashed_0002')])\n+        recorder = MigrationRecorder(connection)\n+        try:\n+            # Verify squashed migration initially applied\n+            self.assertIn(\n+                ('migrations', '0001_squashed_0002'),\n+                recorder.applied_migrations(),\n+            )\n+            # Now unapply all migrations\n+            executor.loader.build_graph()\n+            executor.migrate([('migrations', None)])\n+            # Verify squashed migration is unapplied\n+            self.assertNotIn(\n+                ('migrations', '0001_squashed_0002'),\n+                recorder.applied_migrations(),\n+            )\n+        finally:\n+            # Clean-up\n+            recorder.flush()\n+\n+    def test_individual_replaced_migrations_unapplied(self):\n+        \"\"\"Test individual replaced migrations are marked unapplied.\"\"\"\n+        executor = MigrationExecutor(connection)\n+        recorder = MigrationRecorder(connection)\n+        try:\n+            # Apply all migrations\n+            executor.migrate([('migrations', '0001_squashed_0002')])\n+            # Unapply squashed migration\n+            executor.migrate([('migrations', None)])\n+            # Verify individual migrations in replaces are unapplied\n+            self.assertNotIn(('migrations', '0001_initial'), recorder.applied_migrations())\n+            self.assertNotIn(('migrations', '0002_second'), recorder.applied_migrations())\n+        finally:\n+            # Clean-up\n+            recorder.flush()\n     # performed in a transaction and the test will systematically pass.\n     @skipUnlessDBFeature('can_rollback_ddl')\n     def test_migrations_applied_and_recorded_atomically(self):\n",
  "django__django-14539": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex 23a1e0a..b8e8b4d 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -256,6 +256,26 @@ class TestUtilsHtml(SimpleTestCase):\n             ),\n             ('foo@example.com', '<a href=\"mailto:foo@example.com\">foo@example.com</a>'),\n         )\n+        # Test case for the specific issue with HTML escaped URLs and trailing punctuation\n+        test_data = 'Search for google.com/?q=1&lt! and see.'\n+        expected_output = 'Search for <a href=\"http://google.com/?q=1%3C\">google.com/?q=1&lt</a>! and see.'\n+        with self.subTest(value=test_data):\n+            self.assertEqual(urlize(test_data), expected_output)\n+\n+        # Additional edge case tests for HTML escaped characters and punctuation\n+        additional_tests = (\n+            (\n+                'Visit example.com/path?query=1%26another=2!',\n+                'Visit <a href=\"http://example.com/path?query=1%26another=2\">example.com/path?query=1%26another=2</a>!',\n+            ),\n+            (\n+                'Check out www.example.com/test_path?q=1%20and%20two.',\n+                'Check out <a href=\"http://www.example.com/test_path?q=1%20and%20two\">www.example.com/test_path?q=1%20and%20two</a>.',\n+            ),\n+        )\n+        for value, output in additional_tests:\n+            with self.subTest(value=value):\n+                self.assertEqual(urlize(value), output)\n         for value, output in tests:\n             with self.subTest(value=value):\n                 self.assertEqual(urlize(value), output)\n",
  "django__django-14559": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex b579834..311f4b2 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -127,7 +127,29 @@ class BulkUpdateTests(TestCase):\n         with self.assertNumQueries(0):\n             Note.objects.bulk_update([], ['note'])\n \n-    def test_large_batch(self):\n+    def test_bulk_update_return_value_empty(self):\n+        \"\"\"Test return value when bulk_update is called with an empty list.\"\"\"\n+        rows_updated = Note.objects.bulk_update([], ['note'])\n+        self.assertEqual(rows_updated, 0)\n+\n+    def test_bulk_update_return_value_large_batch(self):\n+        \"\"\"Test that bulk_update returns the correct number of updated rows for a large batch.\"\"\"\n+        Note.objects.bulk_create([\n+            Note(note=str(i), misc=str(i))\n+            for i in range(0, 2000)\n+        ])\n+        notes = list(Note.objects.all())\n+        rows_updated = Note.objects.bulk_update(notes, ['note'])\n+        self.assertEqual(rows_updated, 2000)\n+\n+    def test_bulk_update_return_value_with_duplicates(self):\n+        \"\"\"Test return value when bulk_update is called with duplicates.\"\"\"\n+        note = Note.objects.create(note='test-note', misc='test')\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'])\n+        self.assertEqual(rows_updated, 1)\n+        # Check with duplicates in different batches\n+        rows_updated = Note.objects.bulk_update([note, note], ['note'], batch_size=1)\n+        self.assertEqual(rows_updated, 2)\n         Note.objects.bulk_create([\n             Note(note=str(i), misc=str(i))\n             for i in range(0, 2000)\n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..724b586 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -360,6 +360,26 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['Please submit at least 3 forms.'])\n \n+    def test_formset_non_form_errors_with_class(self):\n+        \"\"\"\n+        Test that non-form errors in a FormSet include the 'nonform' CSS class.\n+        \"\"\"\n+        data = {\n+            'choices-TOTAL_FORMS': '2',\n+            'choices-INITIAL_FORMS': '0',\n+            'choices-MIN_NUM_FORMS': '0',\n+            'choices-MAX_NUM_FORMS': '1',\n+            'choices-0-choice': 'Apple Juice',\n+            'choices-0-votes': '10',\n+            'choices-1-choice': 'Apple Juice',\n+            'choices-1-votes': '20',\n+        }\n+        ChoiceFormSet = formset_factory(Choice, extra=1, validate_max=True)\n+        formset = ChoiceFormSet(data, auto_id=False, prefix='choices')\n+        self.assertFalse(formset.is_valid())\n+        self.assertIn('<ul class=\"errorlist nonform\">', str(formset.non_form_errors()))\n+        self.assertIn('<li>Please submit at most 1 form.</li>', str(formset.non_form_errors()))\n+\n     def test_formset_validate_min_unchanged_forms(self):\n         \"\"\"\n         min_num validation doesn't consider unchanged forms with initial data\n",
  "django__django-14631": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex a48e4b6..1618d71 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -2129,7 +2129,47 @@ Password: <input type=\"password\" name=\"password\" required></li>\n         form = DateTimeForm({'dt': '2006-10-25 14:30:45'})\n         self.assertEqual(form.changed_data, [])\n \n-    def test_help_text(self):\n+    def test_datetime_clean_bound_field(self):\n+        \"\"\"\n+        Ensure that BaseForm._clean_fields() correctly uses BoundField to access value,\n+        and that cleaned_data reflects the initial value of the BoundField.\n+        \"\"\"\n+        now = datetime.datetime(2023, 10, 10, 12, 0, 0)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+        \n+        form = DateTimeForm({})\n+        cleaned = form.cleaned_data['dt']\n+        bf = form['dt']\n+        self.assertEqual(cleaned, bf.initial)  # Ensure that cleaned_data uses BoundField's initial\n+\n+    def test_changed_data_uses_bound_field(self):\n+        \"\"\"\n+        Test that changed_data is determined using the value from BoundField.\n+        \"\"\"\n+        now = datetime.datetime(2023, 10, 10, 12, 0, 0)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now)\n+        \n+        form = DateTimeForm({'dt': '2023-10-10 12:00:01'})\n+        self.assertEqual(form.changed_data, ['dt'])  # Time has changed by one second, hence it's in changed_data\n+\n+        form_same = DateTimeForm({'dt': '2023-10-10 12:00:00'})\n+        self.assertEqual(form_same.changed_data, [])  # Time is the same, hence changed_data is empty\n+\n+    def test_changed_data_with_disabled_field(self):\n+        \"\"\"\n+        Verify that a disabled field is not considered changed in changed_data.\n+        \"\"\"\n+        now = datetime.datetime(2023, 10, 10, 12, 0, 0)\n+\n+        class DateTimeForm(forms.Form):\n+            dt = DateTimeField(initial=lambda: now, disabled=True)\n+        \n+        form = DateTimeForm({'dt': 'SomeInvalidDate'})\n+        self.assertEqual(form.changed_data, [])  # Disabled fields should not appear in changed_data\n         # You can specify descriptive text for a field by using the 'help_text' argument)\n         class UserRegistration(Form):\n             username = CharField(max_length=10, help_text='e.g., user@example.com')\n",
  "django__django-14672": "diff --git a/tests/m2m_through/tests.py b/tests/m2m_through/tests.py\nindex d9eaabe..3fab1b1 100644\n--- a/tests/m2m_through/tests.py\n+++ b/tests/m2m_through/tests.py\n@@ -10,8 +10,45 @@ from .models import (\n     Relationship, SymmetricalFriendship,\n )\n \n+from django.db import models\n+from django.core.checks import Error\n \n class M2mThroughTests(TestCase):\n+    def test_many_to_many_rel_with_through_fields_list_hashable(self):\n+        \"\"\"Test M2M with list in through_fields is hashable including proxy model.\"\"\"\n+        # Define models for testing\n+        class Parent(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class ProxyParent(Parent):\n+            class Meta:\n+                proxy = True\n+\n+        class Child(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+            many_to_many_field = models.ManyToManyField(\n+                to=Parent,\n+                through=\"ManyToManyModel\",\n+                through_fields=['child', 'parent'],\n+                related_name=\"something\"\n+            )\n+\n+        class ManyToManyModel(models.Model):\n+            parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+            child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+            second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+        # Make sure no error related to unhashable type occurs\n+        errors = Child.check()\n+        self.assertNotIn(\n+            Error(\n+                \"The field 'clash' clashes with the field 'clash_id' from model \"\n+                \"'invalid_models_tests.parent'.\",\n+                obj=Child._meta.get_field('many_to_many_field'),\n+                id='models.E006',\n+            ), \n+            errors\n+        )\n     @classmethod\n     def setUpTestData(cls):\n         cls.bob = Person.objects.create(name='Bob')\n",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..c7d3b0f 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -1,3 +1,4 @@\n+\n import json\n from contextlib import contextmanager\n \n@@ -7,8 +8,10 @@ from django.contrib.admin.views.autocomplete import AutocompleteJsonView\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n from django.core.exceptions import PermissionDenied\n-from django.http import Http404\n-from django.test import RequestFactory, override_settings\n+import datetime\n+import json\n+from django.http import Http404, JsonResponse\n+from django.test import RequestFactory, override_settings, TestCase\n from django.urls import reverse, reverse_lazy\n \n from .admin import AnswerAdmin, QuestionAdmin\n@@ -281,7 +284,41 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'results': [{'id': str(q.pk), 'text': q.question} for q in Question.objects.all()[:PAGINATOR_SIZE]],\n             'pagination': {'more': True},\n         })\n-        # The second page of results.\n+class AutocompleteJsonSerializeResultViewTestCase(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        from .models import Question\n+        cls.superuser = User.objects.create_superuser(\n+            username='super', password='secret', email='super@example.com',\n+        )\n+        cls.url = reverse('autocomplete_url')\n+        cls.factory = RequestFactory()\n+        cls.opts = {'app_label': 'admin_views', 'model_name': 'question', 'field_name': 'question'}\n+\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+\n+    def test_serialize_result(self):\n+        from .models import Question\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(admin_site=admin.site)(request)\n+        self.assertEqual(response.status_code, 200)\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(data, {\n+            'results': [\n+                {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                for q in Question.objects.order_by('-posted')\n+            ],\n+            'pagination': {'more': False},\n+        })\n         request = self.factory.get(self.url, {'term': '', 'page': '2', **self.opts})\n         request.user = self.superuser\n         with model_admin(Question, PKOrderingQuestionAdmin):\n",
  "django__django-14765": "diff --git a/tests/migrations/test_state.py b/tests/migrations/test_state.py\nindex 11009e5..c224af8 100644\n--- a/tests/migrations/test_state.py\n+++ b/tests/migrations/test_state.py\n@@ -914,8 +914,18 @@ class StateTests(SimpleTestCase):\n         project_state.add_model(ModelState.from_model(TestModel))\n         with self.assertRaises(ValueError):\n             project_state.apps\n-\n-        # If we include the real app it should succeed\n+    def test_real_apps_is_set(self):\n+        \"\"\"\n+        Test that ProjectState raises AssertionError if real_apps is not a set.\n+        \"\"\"\n+        with self.assertRaises(AssertionError):\n+            ProjectState(real_apps=['contenttypes'])\n+        \n+        # Should not raise an error if real_apps is a set\n+        try:\n+            ProjectState(real_apps={'contenttypes'})\n+        except AssertionError:\n+            self.fail(\"ProjectState raised AssertionError unexpectedly!\")\n         project_state = ProjectState(real_apps={'contenttypes'})\n         project_state.add_model(ModelState.from_model(TestModel))\n         rendered_state = project_state.apps\n",
  "django__django-14771": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 1875424..a6dd035 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -195,6 +195,16 @@ class TestChildArguments(SimpleTestCase):\n         )\n \n     @mock.patch('__main__.__spec__', None)\n+    @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_passing(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', ['error'])\n     def test_warnoptions(self):\n@@ -235,6 +245,16 @@ class TestChildArguments(SimpleTestCase):\n         with self.assertRaisesMessage(RuntimeError, msg):\n             autoreload.get_child_arguments()\n \n+    @mock.patch('__main__.__spec__', None)\n+    @mock.patch('sys._xoptions', {'utf8': True, 'a': 'b'})\n+    @mock.patch('sys.argv', [__file__, 'runserver'])\n+    @mock.patch('sys.warnoptions', [])\n+    def test_xoptions_passing(self):\n+        self.assertEqual(\n+            autoreload.get_child_arguments(),\n+            [sys.executable, '-Xutf8', '-Xa=b', __file__, 'runserver']\n+        )\n+\n     @mock.patch('sys.argv', [__file__, 'runserver'])\n     @mock.patch('sys.warnoptions', [])\n     def test_module_no_spec(self):\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..a6cf89f 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -271,7 +271,49 @@ class MethodDecoratorTests(SimpleTestCase):\n                 self.assertEqual(Test.method.__doc__, 'A method')\n                 self.assertEqual(Test.method.__name__, 'method')\n \n-    def test_new_attribute(self):\n+    def test_wrapper_assignments(self):\n+        \"\"\"@method_decorator preserves wrapper assignments.\"\"\"\n+        func_name = None\n+        func_module = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                return 'tests'\n+\n+        Test().method()\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+\n+    def test_partial_function_handling(self):\n+        \"\"\"Ensure that method_decorator handles partial functions correctly.\"\"\"\n+        from functools import partial\n+\n+        def sample_decorator(func):\n+            @wraps(func)\n+            def wrapper(*args, **kwargs):\n+                return func(*args, **kwargs)\n+            return wrapper\n+\n+        class TestClass:\n+            def method(self, a, b):\n+                return a + b\n+\n+        test_instance = TestClass()\n+        partial_method = method_decorator(sample_decorator)(partial(test_instance.method, 1))\n+        \n+        self.assertEqual(partial_method(2), 3)\n+        self.assertEqual(partial_method.__name__, 'method')\n+        self.assertEqual(partial_method.__module__, test_instance.method.__module__)\n         \"\"\"A decorator that sets a new attribute on the method.\"\"\"\n         def decorate(func):\n             func.x = 1\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..6f02be3 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5093,7 +5093,31 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n         response = self.client.get(reverse('admin:admin_views_choice_change', args=(choice.pk,)))\n         self.assertContains(response, '<div class=\"readonly\">No opinion</div>', html=True)\n \n-    def test_readonly_foreignkey_links(self):\n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        chapter = Chapter.objects.create(\n+            title='Chapter 1',\n+            content='content',\n+            book=Book.objects.create(name='Book 1'),\n+        )\n+        language = Language.objects.create(iso='_40', name='Test')\n+        url_name = f'{admin_site}:admin_views_language_change'\n+        language_url = reverse(\n+            url_name,\n+            args=(quote(language.pk),),\n+        )\n+\n+        response = self.client.get(reverse(url_name, args=(chapter.pk,)))\n+        self.assertContains(\n+            response,\n+            '<div class=\"readonly\"><a href=\"%s\">_40</a></div>' % language_url,\n+            html=True,\n+        )\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        self._test_readonly_foreignkey_links('custom-admin')\n         \"\"\"\n         ForeignKey readonly fields render as links if the target model is\n         registered in admin.\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..6c4c51d 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,10 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n+import json\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -279,7 +281,32 @@ class ModelChoiceFieldTests(TestCase):\n         field = CustomModelChoiceField(Category.objects.all())\n         self.assertIsInstance(field.choices, CustomModelChoiceIterator)\n \n-    def test_choice_iterator_passes_model_to_widget(self):\n+    def test_model_choice_iterator_value_hashability(self):\n+        # Test that ModelChoiceIteratorValue can be used in a dict as a key\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        value_3 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        \n+        test_dict = {value_1: 'first_instance', value_2: 'second_instance'}\n+        \n+        # Ensure values can be retrieved using ModelChoiceIteratorValue keys\n+        self.assertEqual(test_dict[value_1], 'first_instance')\n+        self.assertEqual(test_dict[value_3], 'first_instance')\n+        self.assertEqual(test_dict[value_2], 'second_instance')\n+\n+    def test_model_choice_iterator_value_equality_and_hash(self):\n+        # Test equality and hash between different ModelChoiceIteratorValue instances\n+        value_a = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_b = ModelChoiceIteratorValue(self.c1.pk, None)\n+        value_c = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+\n+        # Check equality\n+        self.assertEqual(value_a, value_b)  # Same key value though different instances\n+        self.assertNotEqual(value_a, value_c)  # Different key values\n+\n+        # Check hash equality\n+        self.assertEqual(hash(value_a), hash(value_b))\n+        self.assertNotEqual(hash(value_a), hash(value_c))\n         class CustomCheckboxSelectMultiple(CheckboxSelectMultiple):\n             def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n                 option = super().create_option(name, value, label, selected, index, subindex, attrs)\n",
  "django__django-14999": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 3e4c6c7..e2e4906 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -793,6 +793,48 @@ class OperationTests(OperationTestBase):\n         self.assertEqual(Rider.objects.count(), 2)\n         self.assertEqual(Pony._meta.get_field('riders').remote_field.through.objects.count(), 2)\n \n+    def test_rename_model_with_db_table_noop_postgres(self):\n+        app_label = 'test_rmwdbtn_postgres'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+        \n+        with connections['postgres'].schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+    \n+    def test_rename_model_with_db_table_noop_sqlite(self):\n+        app_label = 'test_rmwdbtn_sqlite'\n+        project_state = self.apply_operations(app_label, ProjectState(), operations=[\n+            migrations.CreateModel('Rider', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+            ], options={'db_table': 'rider'}),\n+            migrations.CreateModel('Pony', fields=[\n+                ('id', models.AutoField(primary_key=True)),\n+                ('rider', models.ForeignKey('%s.Rider' % app_label, models.CASCADE)),\n+            ]),\n+        ])\n+        new_state = project_state.clone()\n+        operation = migrations.RenameModel('Rider', 'Runner')\n+        operation.state_forwards(app_label, new_state)\n+        \n+        with connections['sqlite'].schema_editor() as editor:\n+            with self.assertNumQueries(0):\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            with self.assertNumQueries(0):\n+                operation.database_backwards(app_label, editor, new_state, project_state)\n+\n     def test_rename_m2m_target_model(self):\n         app_label = \"test_rename_m2m_target_model\"\n         project_state = self.apply_operations(app_label, ProjectState(), operations=[\n",
  "django__django-15022": "",
  "django__django-15037": "",
  "django__django-15103": "",
  "django__django-15104": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex 04452fa..78d48bd 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -2835,7 +2835,55 @@ class AutodetectorTests(TestCase):\n                 )\n \n \n-class MigrationSuggestNameTests(SimpleTestCase):\n+from django.db import models\n+from django.db.migrations.state import ModelState\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.test import SimpleTestCase\n+\n+class AutodetectorKeyErrorTests(SimpleTestCase):\n+    def test_add_custom_fk_with_hardcoded_to(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                del kwargs['to']\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n+\n+    def test_custom_fk_correct_deconstruction(self):\n+        class HardcodedForeignKey(models.ForeignKey):\n+            def __init__(self, *args, **kwargs):\n+                kwargs['to'] = 'testapp.Author'\n+                super().__init__(*args, **kwargs)\n+\n+            def deconstruct(self):\n+                name, path, args, kwargs = super().deconstruct()\n+                # Intentionally not deleting 'to' to test default logic\n+                return name, path, args, kwargs\n+\n+        book_hardcoded_fk_to = ModelState('testapp', 'Book', [\n+            ('author', HardcodedForeignKey(on_delete=models.CASCADE)),\n+        ])\n+        changes = self.get_changes(\n+            [self.author_empty],\n+            [self.author_empty, book_hardcoded_fk_to],\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['CreateModel'])\n+        self.assertOperationAttributes(changes, 'testapp', 0, 0, name='Book')\n     def test_no_operations(self):\n         class Migration(migrations.Migration):\n             operations = []\n",
  "django__django-15127": "diff --git a/tests/messages_tests/base.py b/tests/messages_tests/base.py\nindex 85a7769..cbb66ef 100644\n--- a/tests/messages_tests/base.py\n+++ b/tests/messages_tests/base.py\n@@ -1,3 +1,4 @@\n+\n from django.contrib.messages import constants, get_level, set_level, utils\n from django.contrib.messages.api import MessageFailure\n from django.contrib.messages.constants import DEFAULT_LEVELS\n@@ -361,6 +362,45 @@ class BaseTests:\n         tags = [msg.tags for msg in storage]\n         self.assertEqual(tags, ['info', '', 'extra-tag debug', 'warning', 'error', 'success', 'info'])\n \n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'info',\n+        constants.DEBUG: 'debug',\n+        constants.WARNING: 'warn',\n+        constants.ERROR: 'bad',\n+        constants.SUCCESS: 'cool',\n+    })\n+    def test_override_settings_updates_level_tags(self):\n+        storage = self.get_storage()\n+        msg = Message(constants.INFO, \"Test message\")\n+        storage.add(msg.level, msg.message)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertEqual(tags, ['info'])\n+\n+    @override_settings_tags(MESSAGE_TAGS={})\n+    def test_empty_override_reverts_to_default_tags(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        add_level_messages(storage)\n+        tags = [msg.level_tag for msg in storage]\n+        # Defaults: info='', debug='', warning='', error='error', success='success'\n+        self.assertEqual(tags, ['info', '', 'debug', 'warning', 'error', 'success'])\n+\n+    @override_settings_tags(MESSAGE_TAGS={\n+        constants.INFO: 'i',\n+        constants.DEBUG: 'd',\n+        constants.WARNING: 'w',\n+        constants.ERROR: 'e',\n+        constants.SUCCESS: 's',\n+        15: 'custom_level',\n+    })\n+    def test_custom_levels_and_tags(self):\n+        storage = self.get_storage()\n+        storage.level = 0\n+        msg = Message(15, \"Custom level message\")\n+        storage.add(msg.level, msg.message)\n+        tags = [msg.level_tag for msg in storage]\n+        self.assertIn('custom_level', tags)\n+\n     def test_level_tag(self):\n         storage = self.get_storage()\n         storage.level = 0\n",
  "django__django-15128": "diff --git a/tests/queries/models.py b/tests/queries/models.py\nindex a7bb7e8..672cc2b 100644\n--- a/tests/queries/models.py\n+++ b/tests/queries/models.py\n@@ -612,8 +612,30 @@ class OrderItem(models.Model):\n         return str(self.pk)\n \n \n+from django.db import models\n+from django.db.models import Q\n+\n class BaseUser(models.Model):\n-    pass\n+    annotation = models.ForeignKey('Annotation', models.CASCADE, null=True, blank=True, related_name='baseuser_set')\n+\n+class Annotation(models.Model):\n+    tag = models.ForeignKey('Tag', models.CASCADE)\n+    notes = models.ManyToManyField('Note', related_name='annotations')\n+\n+class Tag(models.Model):\n+    name = models.CharField(max_length=50)\n+\n+class Note(models.Model):\n+    tag = models.ForeignKey(Tag, on_delete=models.CASCADE, null=True, blank=True)\n+\n+class Task(models.Model):\n+    title = models.CharField(max_length=10)\n+    owner = models.ForeignKey(BaseUser, models.CASCADE, related_name='owner')\n+    creator = models.ForeignKey(BaseUser, models.CASCADE, related_name='creator')\n+    note = models.ForeignKey(Note, on_delete=models.CASCADE, null=True, blank=True)\n+\n+    def __str__(self):\n+        return self.title\n \n \n class Task(models.Model):\n",
  "django__django-15161": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 5fdccc5..d40c09f 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1775,6 +1775,22 @@ class ValueTests(TestCase):\n         self.assertEqual(len(kwargs), 1)\n         self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n \n+    def test_deconstruct_F(self):\n+        \"\"\"Test the deconstruct method for F expression.\"\"\"\n+        f_expr = F('name')\n+        path, args, kwargs = f_expr.deconstruct()\n+        self.assertEqual(path, 'django.db.models.F')\n+        self.assertEqual(args, (f_expr.name,))\n+        self.assertEqual(kwargs, {})\n+\n+    def test_deconstruct_Value(self):\n+        \"\"\"Test the deconstruct method for Value expression with a CharField.\"\"\"\n+        value_expr = Value('example', output_field=CharField())\n+        path, args, kwargs = value_expr.deconstruct()\n+        self.assertEqual(path, 'django.db.models.expressions.Value')\n+        self.assertEqual(args, (value_expr.value,))\n+        self.assertEqual(kwargs['output_field'].deconstruct(), CharField().deconstruct())\n+\n     def test_repr(self):\n         tests = [\n             (None, 'Value(None)'),\n",
  "django__django-15268": "",
  "django__django-15277": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 11f86ed..3432cff 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1847,6 +1847,37 @@ class ValueTests(TestCase):\n                 expr = Value(value)\n                 self.assertIsInstance(expr.output_field, output_field_type)\n \n+    def test_output_field_does_not_create_broken_validators(self):\n+        \"\"\"\n+        The output field for a given Value doesn't get cleaned & validated,\n+        however validators may still be instantiated for a given field type\n+        and this demonstrates that they don't throw an exception.\n+        \"\"\"\n+        import datetime\n+        from decimal import Decimal\n+        import uuid\n+        from django.db.models import fields\n+\n+        value_types = [\n+            ('str', fields.CharField),\n+            (True, fields.BooleanField),\n+            (42, fields.IntegerField),\n+            (3.14, fields.FloatField),\n+            (datetime.date(2019, 5, 15), fields.DateField),\n+            (datetime.datetime(2019, 5, 15), fields.DateTimeField),\n+            (datetime.time(3, 16), fields.TimeField),\n+            (datetime.timedelta(1), fields.DurationField),\n+            (Decimal('3.14'), fields.DecimalField),\n+            (b'', fields.BinaryField),\n+            (uuid.uuid4(), fields.UUIDField),\n+        ]\n+        for value, field_cls in value_types:\n+            with self.subTest(type=type(value)):\n+                field = Value(value)._resolve_output_field()\n+                self.assertIsInstance(field, field_cls)\n+                # Ensure that clean method does not raise exceptions.\n+                field.clean(value, model_instance=None)\n+\n     def test_resolve_output_field_failure(self):\n         msg = 'Cannot resolve expression type, unknown output_field'\n         with self.assertRaisesMessage(FieldError, msg):\n",
  "django__django-15278": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex dd02aee..e1e3624 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -638,6 +638,39 @@ class SchemaTests(TransactionTestCase):\n             editor.add_field(Author, new_field)\n         columns = self.column_classes(Author)\n         # MySQL annoyingly uses the same backend, so it'll come back as one of\n+\n+    def test_add_field_o2o_nullable(self):\n+        \"\"\"\n+        Test adding a nullable OneToOneField on SQLite.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        # Check for nullability\n+        self.assertTrue(columns['note_id'][1][6])\n+\n+    def test_add_field_o2o_non_nullable(self):\n+        \"\"\"\n+        Test adding a non-nullable OneToOneField on SQLite.\n+        This ensures that non-nullable fields are added correctly.\n+        \"\"\"\n+        with connection.schema_editor() as editor:\n+            editor.create_model(Author)\n+            editor.create_model(Note)\n+        new_field = OneToOneField(Note, CASCADE, null=False, unique=True)\n+        new_field.set_attributes_from_name('note')\n+        with connection.schema_editor() as editor:\n+            editor.add_field(Author, new_field)\n+        columns = self.column_classes(Author)\n+        self.assertIn('note_id', columns)\n+        # Check for non-nullability\n+        self.assertFalse(columns['note_id'][1][6])\n         # these two types.\n         self.assertIn(columns['bits'][0], (\"BinaryField\", \"TextField\"))\n \n",
  "django__django-15315": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex e4daf0e..cdc0119 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -10,6 +10,8 @@ from .models import (\n     Bar, Choiceful, Foo, RenamedField, VerboseNameField, Whiz, WhizDelayed,\n     WhizIter, WhizIterEmpty,\n )\n+from django.test import SimpleTestCase\n+from django.db import models\n \n \n class Nested:\n@@ -19,7 +21,42 @@ class Nested:\n \n class BasicFieldTests(SimpleTestCase):\n \n-    def test_show_hidden_initial(self):\n+    def test_hash_immutability(self):\n+        # Test case to ensure that the hash of a field is immutable\n+        field = models.IntegerField()\n+        field_hash_before = hash(field)\n+        \n+        class MyModel(models.Model):\n+            rank = field\n+        \n+        field_hash_after = hash(field)\n+        \n+        # Assert that the hash value did not change after assignment\n+        self.assertEqual(field_hash_before, field_hash_after)\n+\n+        # Additional checks\n+        f = models.CharField(max_length=200)\n+        d = {f: 1}\n+        class Book(models.Model):\n+            title = f\n+        \n+        # Assert that field can still be found in the dictionary\n+        self.assertTrue(f in d)\n+\n+        # Re-create the field and ensure it behaves similarly\n+        f2 = models.CharField(max_length=100)\n+        f2_hash_before = hash(f2)\n+        \n+        class Article(models.Model):\n+            content = f2\n+        \n+        f2_hash_after = hash(f2)\n+        \n+        # Assert that the hash remains unchanged\n+        self.assertEqual(f2_hash_before, f2_hash_after)\n+        \n+        d2 = {f2: 2}\n+        self.assertTrue(f2 in d2)\n         \"\"\"\n         Fields with choices respect show_hidden_initial as a kwarg to\n         formfield().\n",
  "django__django-15368": "diff --git a/tests/queries/test_bulk_update.py b/tests/queries/test_bulk_update.py\nindex 447c150..fd67632 100644\n--- a/tests/queries/test_bulk_update.py\n+++ b/tests/queries/test_bulk_update.py\n@@ -204,7 +204,20 @@ class BulkUpdateTests(TestCase):\n             [cat.special_name for cat in special_categories]\n         )\n \n-    def test_field_references(self):\n+    from django.db.models import F\n+    from exampleapp.models import SelfRef\n+\n+    def test_plain_f_expression(self):\n+        # Create a SelfRef instance\n+        instance = SelfRef.objects.create(c8='', name='test_name')\n+        # Assign a plain F expression to the `c8` field\n+        instance.c8 = F('name')\n+        # Perform the bulk update\n+        SelfRef.objects.bulk_update([instance], ['c8'])\n+        # Refresh from the database to check the updated value\n+        instance.refresh_from_db()\n+        # Assert that the `c8` field has been correctly populated with the value of `name`\n+        self.assertEqual(instance.c8, 'test_name')\n         numbers = [Number.objects.create(num=0) for _ in range(10)]\n         for number in numbers:\n             number.num = F('num') + 1\n",
  "django__django-15380": "diff --git a/tests/migrations/test_autodetector.py b/tests/migrations/test_autodetector.py\nindex e2de333..e151269 100644\n--- a/tests/migrations/test_autodetector.py\n+++ b/tests/migrations/test_autodetector.py\n@@ -1049,6 +1049,32 @@ class AutodetectorTests(TestCase):\n             new_name='renamed_foo',\n         )\n \n+\n+    def test_rename_field_with_renamed_model_and_field(self):\n+        \"\"\"\n+        Test renaming a model and a field in one operation.\n+        This test is designed to replicate the issue described where the\n+        migration autodetector crashes.\n+        \"\"\"\n+        changes = self.get_changes(\n+            [self.author_name],\n+            [\n+                ModelState('testapp', 'RenamedAuthor', [\n+                    ('id', models.AutoField(primary_key=True)),\n+                    ('renamed_name', models.CharField(max_length=200)),\n+                ]),\n+            ],\n+            MigrationQuestioner({'ask_rename_model': True, 'ask_rename': True}),\n+        )\n+        self.assertNumberMigrations(changes, 'testapp', 1)\n+        self.assertOperationTypes(changes, 'testapp', 0, ['RenameModel', 'RenameField'])\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 0, old_name='Author', new_name='RenamedAuthor',\n+        )\n+        self.assertOperationAttributes(\n+            changes, 'testapp', 0, 1, old_name='name', new_name='renamed_name',\n+        )\n+\n     def test_rename_model(self):\n         \"\"\"Tests autodetection of renamed models.\"\"\"\n         changes = self.get_changes(\n",
  "django__django-15382": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex bd890ac..96c4294 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -1906,6 +1906,35 @@ class ExistsTests(TestCase):\n         self.assertNotIn('ORDER BY', captured_sql)\n \n \n+class ManagerExistsTests(TestCase):\n+    def setUp(self):\n+        Manager.objects.all().delete()\n+\n+    def test_negated_empty_exists(self):\n+        manager = Manager.objects.create()\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()) & Q(pk=manager.pk)\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+    def test_negated_empty_exists_only(self):\n+        Manager.objects.create(name='test')\n+        \n+        qs = Manager.objects.filter(~Exists(Manager.objects.none()))\n+        self.assertTrue(qs.exists(), \"Negated empty Exists should not remove all entries\")\n+\n+    def test_negated_empty_exists_with_other_conditions(self):\n+        manager = Manager.objects.create(name='test')\n+        other_manager = Manager.objects.create(name='other')\n+\n+        # This query should only return 'manager' because of the name filter\n+        qs = Manager.objects.filter(\n+            ~Exists(Manager.objects.none()),\n+            name='test'\n+        )\n+        self.assertSequenceEqual(qs, [manager])\n+\n+\n class FieldTransformTests(TestCase):\n \n     @classmethod\n",
  "django__django-15467": "diff --git a/tests/admin_widgets/tests.py b/tests/admin_widgets/tests.py\nindex f5af59b..141e6b4 100644\n--- a/tests/admin_widgets/tests.py\n+++ b/tests/admin_widgets/tests.py\n@@ -24,6 +24,7 @@ from django.db.models import (\n     ManyToManyField,\n     UUIDField,\n )\n+from django.db.models import ForeignKey\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.urls import reverse\n from django.utils import translation\n@@ -141,7 +142,18 @@ class AdminFormfieldForDBFieldTests(SimpleTestCase):\n         )\n         self.assertIsNone(ff.empty_label)\n \n-    def test_many_to_many(self):\n+    def test_radio_fields_foreignkey_custom_empty_label(self):\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {\"main_band\": admin.VERTICAL}\n+\n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == \"main_band\":\n+                    kwargs[\"empty_label\"] = \"Custom empty label\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+        ma = MyModelAdmin(Event, admin.site)\n+        ff = ma.formfield_for_dbfield(Event._meta.get_field(\"main_band\"), request=None)\n+        self.assertEqual(ff.empty_label, \"Custom empty label\")\n         self.assertFormfield(Band, \"members\", forms.SelectMultiple)\n \n     def test_raw_id_many_to_many(self):\n",
  "django__django-15499": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 5df1b06..280606d 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -129,6 +129,59 @@ class OptimizerTests(SimpleTestCase):\n             ],\n         )\n \n+    def test_create_alter_model_managers(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Foo\", fields=[]),\n+                migrations.AlterModelManagers(\n+                    name=\"Foo\",\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Foo\",\n+                    fields=[],\n+                    managers=[\n+                        (\"objects\", models.Manager()),\n+                        (\"things\", models.Manager()),\n+                    ],\n+                ),\n+            ],\n+        )\n+\n+    def test_create_alter_model_managers_no_change(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\", fields=[], managers=[(\"objects\", models.Manager())]\n+                ),\n+                migrations.AlterModelManagers(\n+                    name=\"Bar\",\n+                    managers=[(\"objects\", models.Manager())],\n+                ),\n+            ],\n+            [\n+                migrations.CreateModel(\n+                    \"Bar\", fields=[], managers=[(\"objects\", models.Manager())]\n+                ),\n+            ],\n+        )\n+\n+    def test_create_alter_model_managers_empty(self):\n+        self.assertOptimizesTo(\n+            [\n+                migrations.CreateModel(\"Baz\", fields=[]),\n+                migrations.AlterModelManagers(name=\"Baz\", managers=[]),\n+            ],\n+            [\n+                migrations.CreateModel(\"Baz\", fields=[], managers=[]),\n+            ],\n+        )\n+\n     def test_create_model_and_remove_model_options(self):\n         self.assertOptimizesTo(\n             [\n",
  "django__django-15525": "diff --git a/tests/fixtures_regress/tests.py b/tests/fixtures_regress/tests.py\nindex 3640e99..1801af9 100644\n--- a/tests/fixtures_regress/tests.py\n+++ b/tests/fixtures_regress/tests.py\n@@ -790,8 +790,44 @@ class NaturalKeyFixtureTests(TestCase):\n             transform=repr,\n         )\n \n+from django.test import TestCase\n+from django.core import management\n+from .models import Author, Book\n+\n+class NaturalKeyForeignDependencyTests(TestCase):\n+    databases = {\"other\"}\n+\n+    def setUp(self):\n+        self.author_data = [\n+            {\n+                \"model\": \"fixtures_regress.author\",\n+                \"fields\": {\n+                    \"name\": \"J.K. Rowling\"\n+                }\n+            }\n+        ]\n+        self.book_data = [\n+            {\n+                \"model\": \"fixtures_regress.book\",\n+                \"fields\": {\n+                    \"title\": \"Harry Potter\",\n+                    \"author\": [\"J.K. Rowling\"]\n+                }\n+            }\n+        ]\n+\n+    def test_loaddata_on_non_default_db(self):\n+        management.call_command(\n+            \"loaddata\",\n+            self.author_data,\n+            self.book_data,\n+            database='other'\n+        )\n+\n+        author = Author.objects.using('other').get(name=\"J.K. Rowling\")\n+        book = Book.objects.using('other').get(title=\"Harry Potter\")\n \n-class M2MNaturalKeyFixtureTests(TestCase):\n+        self.assertEqual(book.author, author)\n     \"\"\"Tests for ticket #14426.\"\"\"\n \n     def test_dependency_sorting_m2m_simple(self):\n",
  "django__django-15561": "diff --git a/tests/schema/tests.py b/tests/schema/tests.py\nindex b8137da..a5ba6e5 100644\n--- a/tests/schema/tests.py\n+++ b/tests/schema/tests.py\n@@ -3961,7 +3961,24 @@ class SchemaTests(TransactionTestCase):\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             editor.alter_field(Book, new_field, old_field, strict=True)\n \n-    def test_add_textfield_unhashable_default(self):\n+    def test_alter_field_choices_noop_sqlite(self):\n+        \"\"\"\n+        Test that altering the 'choices' attribute of a CharField\n+        should be a no-op on SQLite and should not generate any SQL.\n+        \"\"\"\n+        if connection.vendor == 'sqlite':\n+            with connection.schema_editor() as editor:\n+                editor.create_model(Author)\n+            old_field = Author._meta.get_field(\"name\")\n+            new_field = CharField(\n+                choices=((\"Alice\", \"Alice\"), (\"Bob\", \"Bob\")),\n+                max_length=255,\n+            )\n+            new_field.set_attributes_from_name(\"name\")\n+            with connection.schema_editor() as editor, self.assertNumQueries(0):\n+                editor.alter_field(Author, old_field, new_field, strict=True)\n+            with connection.schema_editor() as editor, self.assertNumQueries(0):\n+                editor.alter_field(Author, new_field, old_field, strict=True)\n         # Create the table\n         with connection.schema_editor() as editor:\n             editor.create_model(Author)\n",
  "django__django-15569": "",
  "django__django-15572": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 188dca4..cdbd031 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -76,7 +76,17 @@ class TemplateReloadTests(SimpleTestCase):\n             },\n         )\n \n-    @mock.patch(\"django.template.loaders.base.Loader.reset\")\n+    @override_settings(\n+        TEMPLATES=[\n+            {\n+                \"DIRS\": [\"\", \"/some/absolute/dir/\", \"\"],\n+                \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n+            }\n+        ]\n+    )\n+    def test_template_dirs_ignore_multiple_empty_paths(self):\n+        expected_directories = {Path(\"/some/absolute/dir/\")}\n+        self.assertSetEqual(autoreload.get_template_directories(), expected_directories)\n     def test_reset_all_loaders(self, mock_reset):\n         autoreload.reset_loaders()\n         self.assertEqual(mock_reset.call_count, 2)\n",
  "django__django-15731": "diff --git a/tests/basic/tests.py b/tests/basic/tests.py\nindex 902f114..2a8c23a 100644\n--- a/tests/basic/tests.py\n+++ b/tests/basic/tests.py\n@@ -1,3 +1,4 @@\n+\n import threading\n from datetime import datetime, timedelta\n from unittest import mock\n@@ -5,7 +6,9 @@ from unittest import mock\n from django.core.exceptions import MultipleObjectsReturned, ObjectDoesNotExist\n from django.db import DEFAULT_DB_ALIAS, DatabaseError, connections, models\n from django.db.models.manager import BaseManager\n+import inspect\n from django.db.models.query import MAX_GET_RESULTS, EmptyQuerySet\n+from django.db import models\n from django.test import (\n     SimpleTestCase,\n     TestCase,\n@@ -736,8 +739,24 @@ class ManagerTest(SimpleTestCase):\n             sorted(self.QUERYSET_PROXY_METHODS),\n         )\n \n-\n-class SelectOnSaveTests(TestCase):\n+class ManagerMethodSignatureTests(TestCase):\n+    def test_bulk_create_signature(self):\n+        # Verify that inspect.signature for bulk_create has the correct signature\n+        expected_signature = \"(objs, batch_size=None, ignore_conflicts=False, update_conflicts=False, update_fields=None, unique_fields=None)\"\n+        actual_signature = str(inspect.signature(models.QuerySet.bulk_create))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_get_signature(self):\n+        # Additional test for another method, e.g., get(), to ensure wraps inclusion\n+        expected_signature = \"(self, *args, **kwargs)\"\n+        actual_signature = str(inspect.signature(models.QuerySet.get))\n+        self.assertEqual(actual_signature, expected_signature)\n+\n+    def test_count_signature(self):\n+        # Additional test for count method signature\n+        expected_signature = \"(self)\"\n+        actual_signature = str(inspect.signature(models.QuerySet.count))\n+        self.assertEqual(actual_signature, expected_signature)\n     def test_select_on_save(self):\n         a1 = Article.objects.create(pub_date=datetime.now())\n         with self.assertNumQueries(1):\n",
  "django__django-15741": "diff --git a/tests/template_tests/filter_tests/test_date.py b/tests/template_tests/filter_tests/test_date.py\nindex c6dbc53..6e5c4fe 100644\n--- a/tests/template_tests/filter_tests/test_date.py\n+++ b/tests/template_tests/filter_tests/test_date.py\n@@ -1,4 +1,6 @@\n+\n from datetime import datetime, time\n+from django.utils.translation import gettext_lazy\n \n from django.template.defaultfilters import date\n from django.test import SimpleTestCase\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..533b8f6 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -398,6 +398,15 @@ class ProxyModelTests(TestCase):\n     def test_eq(self):\n         self.assertEqual(MyPerson(id=100), Person(id=100))\n \n+    def test_select_related_only_on_proxy(self):\n+        custom_model = CustomModel.objects.create(name=\"Test Name\")\n+        ProxyCustomModel.objects.create(name=\"Proxy Test Name\")\n+        another_model = AnotherModel.objects.create(custom=custom_model)\n+\n+        # This should not raise a ValueError if the issue is fixed\n+        queryset = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        self.assertEqual(queryset.get(), another_model)\n+\n \n @override_settings(ROOT_URLCONF=\"proxy_models.urls\")\n class ProxyModelAdminTests(TestCase):\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..9f98132 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -145,16 +145,44 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n                     \"PORT\": \"444\",\n                 }\n             ),\n+            # Test case to verify that additional psql parameters are passed before the database name\n+            (\n+                [\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"],\n+                None\n+            ),\n             (\n                 [\"psql\", \"-U\", username, \"-h\", \"somehost\", \"-p\", \"444\", \"dbname\"],\n                 {\"PGPASSWORD\": password},\n             ),\n+            # Test case to verify that additional psql parameters are passed before the database name\n+            (\n+                [\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"],\n+                None\n+            ),\n+        )\n+\n+    @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n+    def test_additional_parameters(self):\n+        \"\"\"Verify additional parameters are passed before the database name.\"\"\"\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n         )\n \n     def test_parameters(self):\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n-            ([\"psql\", \"dbname\", \"--help\"], None),\n+            # Adjusted expected command structure: parameters before the database name\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+            ([\"psql\", \"--help\", \"dbname\"], None),\n+        )\n+\n+    @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n+    def test_additional_parameters(self):\n+        \"\"\"Verify additional parameters are passed before the database name.\"\"\"\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n         )\n \n     @skipUnless(connection.vendor == \"postgresql\", \"Requires a PostgreSQL connection\")\n",
  "django__django-15863": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 08f08e1..7fcb1ba 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -74,7 +74,32 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(1.5e-15, -20), \"0.00000000000000150000\")\n         self.assertEqual(floatformat(1.00000000000000015, 16), \"1.0000000000000002\")\n \n-    def test_force_grouping(self):\n+    def test_decimal_precision(self):\n+        # Test the original issue's case to ensure it is resolved\n+        self.assertEqual(\n+            floatformat(Decimal(\"42.12345678901234567890\"), 20),\n+            \"42.12345678901234567890\",\n+        )\n+        # Additional test case to verify larger decimals are handled correctly\n+        self.assertEqual(\n+            floatformat(Decimal(\"123456.123456789012345678901\"), 21),\n+            \"123456.123456789012345678901\",\n+        )\n+        # Test a case with fewer decimal places than requested\n+        self.assertEqual(\n+            floatformat(Decimal(\"1.23\"), 5),\n+            \"1.23000\",\n+        )\n+        # Test a case with no decimal places\n+        self.assertEqual(\n+            floatformat(Decimal(\"100\"), 0),\n+            \"100\",\n+        )\n+        # Test a negative decimal position\n+        self.assertEqual(\n+            floatformat(Decimal(\"123.456\"), -2),\n+            \"123.46\",\n+        )\n         with translation.override(\"en\"):\n             self.assertEqual(floatformat(10000, \"g\"), \"10,000\")\n             self.assertEqual(floatformat(66666.666, \"1g\"), \"66,666.7\")\n",
  "django__django-15930": "diff --git a/tests/expressions_case/tests.py b/tests/expressions_case/tests.py\nindex 696f4d0..1a4a131 100644\n--- a/tests/expressions_case/tests.py\n+++ b/tests/expressions_case/tests.py\n@@ -405,6 +405,16 @@ class CaseExpressionTests(TestCase):\n             [1, 4, 3, 3, 3, 2, 2],\n         )\n \n+    def test_annotate_case_with_negated_empty_q(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n+\n     def test_annotate_with_empty_when(self):\n         objects = CaseTestModel.objects.annotate(\n             selected=Case(\n@@ -412,6 +422,16 @@ class CaseExpressionTests(TestCase):\n                 default=Value(\"not selected\"),\n             )\n         )\n+\n+    def test_annotate_case_with_negated_empty_q(self):\n+        objects = CaseTestModel.objects.annotate(\n+            selected=Case(\n+                When(~Q(pk__in=[]), then=Value(\"selected\")),\n+                default=Value(\"not selected\"),\n+            )\n+        )\n+        self.assertEqual(len(objects), CaseTestModel.objects.count())\n+        self.assertTrue(all(obj.selected == \"selected\" for obj in objects))\n         self.assertEqual(len(objects), CaseTestModel.objects.count())\n         self.assertTrue(all(obj.selected == \"not selected\" for obj in objects))\n \n",
  "django__django-15987": "",
  "django__django-16032": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex bcf8df9..92ff61d 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -988,6 +988,29 @@ class NonAggregateAnnotationTestCase(TestCase):\n         self.assertCountEqual(\n             publisher_books_qs, [{\"name\": \"Sams\"}, {\"name\": \"Morgan Kaufmann\"}]\n         )\n+    def test_annotation_and_alias_filter_in_subquery(self):\n+        long_books_qs = (\n+            Book.objects.filter(\n+                pages__gt=400,\n+            )\n+            .annotate(book_annotate=Value(1))\n+            .alias(book_alias=Value(1))\n+        )\n+        publisher_books_qs = (\n+            Publisher.objects.filter(\n+                book__in=long_books_qs\n+            )\n+            .values(\"name\")\n+        )\n+        self.assertCountEqual(\n+            publisher_books_qs,\n+            [\n+                {'name': 'Apress'},\n+                {'name': 'Sams'},\n+                {'name': 'Prentice Hall'},\n+                {'name': 'Morgan Kaufmann'}\n+            ]\n+        )\n \n     def test_annotation_exists_aggregate_values_chaining(self):\n         qs = (\n",
  "django__django-16082": "",
  "django__django-16100": "diff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 0ab2941..4c8d6da 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib import admin\n@@ -21,7 +22,9 @@ from django.db.models import F, Field, IntegerField\n from django.db.models.functions import Upper\n from django.db.models.lookups import Contains, Exact\n from django.template import Context, Template, TemplateSyntaxError\n-from django.test import TestCase, override_settings\n+from unittest import mock\n+from django.db import DatabaseError\n+from django.test import TestCase, override_settings, skipUnlessDBFeature\n from django.test.client import RequestFactory\n from django.test.utils import CaptureQueriesContext, isolate_apps, register_lookup\n from django.urls import reverse\n@@ -400,6 +403,42 @@ class ChangeListTests(TestCase):\n         with self.assertRaises(IncorrectLookupParameters):\n             m.get_changelist_instance(request)\n \n+    @skipUnlessDBFeature(\"supports_transactions\")\n+    def test_list_editable_atomicity_on_changelist_view(self):\n+        sw1 = Swallow.objects.create(origin=\"Swallow C\", load=5, speed=5)\n+        sw2 = Swallow.objects.create(origin=\"Swallow D\", load=6, speed=6)\n+\n+        self.client.force_login(self.superuser)\n+        changelist_url = reverse(\"admin:admin_changelist_swallow_changelist\")\n+        data = {\n+            \"form-TOTAL_FORMS\": \"2\",\n+            \"form-INITIAL_FORMS\": \"2\",\n+            \"form-MIN_NUM_FORMS\": \"0\",\n+            \"form-MAX_NUM_FORMS\": \"1000\",\n+            \"form-0-uuid\": str(sw1.pk),\n+            \"form-1-uuid\": str(sw2.pk),\n+            \"form-0-load\": \"15.0\",\n+            \"form-0-speed\": \"25.0\",\n+            \"form-1-load\": \"16.0\",\n+            \"form-1-speed\": \"26.0\",\n+            \"_save\": \"Save\",\n+        }\n+\n+        # Simulating a DatabaseError during save and checking for atomicity\n+        with mock.patch(\n+            \"django.contrib.admin.ModelAdmin.log_change\", side_effect=DatabaseError\n+        ):\n+            with self.assertRaises(DatabaseError):\n+                self.client.post(changelist_url, data)\n+        \n+        # Ensure original values are preserved after DatabaseError\n+        sw1.refresh_from_db()\n+        self.assertEqual(sw1.load, 5)\n+        self.assertEqual(sw1.speed, 5)\n+        sw2.refresh_from_db()\n+        self.assertEqual(sw2.load, 6)\n+        self.assertEqual(sw2.speed, 6)\n+\n     def test_custom_paginator(self):\n         new_parent = Parent.objects.create(name=\"parent\")\n         for i in range(1, 201):\n",
  "django__django-16116": "",
  "django__django-16136": "diff --git a/tests/async/tests.py b/tests/async/tests.py\nindex 72e103e..ebf94b2 100644\n--- a/tests/async/tests.py\n+++ b/tests/async/tests.py\n@@ -1,3 +1,4 @@\n+\n import asyncio\n import os\n from unittest import mock\n@@ -6,15 +7,41 @@ from asgiref.sync import async_to_sync\n \n from django.core.cache import DEFAULT_CACHE_ALIAS, caches\n from django.core.exceptions import ImproperlyConfigured, SynchronousOnlyOperation\n-from django.http import HttpResponse\n-from django.test import SimpleTestCase\n+from django.http import HttpResponse, HttpResponseNotAllowed\n+from django.test import RequestFactory, SimpleTestCase\n from django.utils.asyncio import async_unsafe\n+from django.http import HttpResponseNotAllowed\n+import asyncio\n from django.views.generic.base import View\n \n from .models import SimpleModel\n \n \n class CacheTest(SimpleTestCase):\n+    def test_http_method_not_allowed_responds_correctly(self):\n+        \"\"\"\n+        Test the behavior when http_method_not_allowed() is invoked.\n+        This checks if the response is a coroutine or not and if the result \n+        is an instance of HttpResponseNotAllowed.\n+        \"\"\"\n+        request_factory = RequestFactory()\n+        tests = [\n+            (SyncView, False),\n+            (AsyncView, True),\n+        ]\n+        for view_cls, is_coroutine in tests:\n+            with self.subTest(view_cls=view_cls, is_coroutine=is_coroutine):\n+                instance = view_cls()\n+                response = instance.http_method_not_allowed(request_factory.post(\"/\"))\n+                self.assertIs(\n+                    asyncio.iscoroutine(response),\n+                    is_coroutine,\n+                )\n+                if is_coroutine:\n+                    response = asyncio.run(response)\n+\n+                self.assertIsInstance(response, HttpResponseNotAllowed)\n+\n     def test_caches_local(self):\n         @async_to_sync\n         async def async_cache():\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..7a196b3 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -22,6 +23,8 @@ from django.core.mail import EmailMultiAlternatives\n from django.forms import forms\n from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n+from django.urls import reverse\n+import urllib.parse\n from django.utils import translation\n from django.utils.text import capfirst\n from django.utils.translation import gettext as _\n@@ -892,6 +895,47 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_with_pk(self):\n+        user = User.objects.create(username=\"testclient2\", pk=\"11111111-2222-3333-4444-555566667777\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin using pk.\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.pk,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_with_to_field(self):\n+        user = User.objects.create(username=\"testclient3\", uuid=\"22222222-3333-4444-5555-666677778888\", pk=\"33333333-4444-5555-6666-777788889999\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search(r'<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (e.g., uuid instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.uuid,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16145": "",
  "django__django-16255": "diff --git a/tests/sitemaps_tests/test_http.py b/tests/sitemaps_tests/test_http.py\nindex 1469efd..28b1eb1 100644\n--- a/tests/sitemaps_tests/test_http.py\n+++ b/tests/sitemaps_tests/test_http.py\n@@ -507,6 +507,29 @@ class HTTPSitemapTests(SitemapTestsBase):\n         self.assertXMLEqual(index_response.content.decode(), expected_content_index)\n         self.assertXMLEqual(sitemap_response.content.decode(), expected_content_sitemap)\n \n+    def test_get_latest_lastmod_with_no_items(self):\n+        \"\"\"Test that get_latest_lastmod avoids raising ValueError for empty item list.\"\"\"\n+        class EmptyItemsSitemap(Sitemap):\n+            def items(self):\n+                return []\n+\n+            def lastmod(self, obj):\n+                return obj.lastmod\n+\n+        sitemap = EmptyItemsSitemap()\n+        self.assertIsNone(sitemap.get_latest_lastmod())\n+\n+    def test_lastmod_non_callable_no_items(self):\n+        \"\"\"Ensure no exception when lastmod is not callable and items are empty.\"\"\"\n+        class NonCallableLastmodSitemap(Sitemap):\n+            lastmod = \"2023-01-01\"\n+\n+            def items(self):\n+                return []\n+\n+        sitemap = NonCallableLastmodSitemap()\n+        self.assertEqual(sitemap.get_latest_lastmod(), \"2023-01-01\")\n+\n \n # RemovedInDjango50Warning\n class DeprecatedTests(SitemapTestsBase):\n",
  "django__django-16315": "",
  "django__django-16333": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex 714f137..7171bdb 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n import urllib.parse\n@@ -34,6 +35,7 @@ from .models.custom_user import (\n     ExtensionUser,\n )\n from .models.with_custom_email_field import CustomEmailField\n+from .models.with_many_to_many import CustomUserWithM2M, Organization\n from .models.with_integer_username import IntegerUsernameUser\n from .settings import AUTH_TEMPLATES\n \n@@ -261,6 +263,62 @@ class UserCreationFormTest(TestDataMixin, TestCase):\n         form = UserCreationForm(data)\n         self.assertTrue(form.is_valid())\n         self.assertEqual(form.cleaned_data[\"password1\"], data[\"password1\"])\n+\n+    def test_custom_form_saves_many_to_many_field_with_multiple_organizations(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization1 = Organization.objects.create(name=\"organization 1\")\n+        organization2 = Organization.objects.create(name=\"organization 2\")\n+\n+        data = {\n+            \"username\": \"multimanager@example.com\",\n+            \"password1\": \"testpassword\",\n+            \"password2\": \"testpassword\",\n+            \"orgs\": [str(organization1.pk), str(organization2.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [organization1, organization2])\n+\n+    def test_custom_form_does_not_save_many_to_many_field_on_validation_error(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        organization = Organization.objects.create(name=\"organization 1\")\n+\n+        data = {\n+            \"username\": \"invaliduser\",\n+            \"password1\": \"short\",\n+            \"password2\": \"mismatched\",  # Invalid data; passwords do not match\n+            \"orgs\": [str(organization.pk)],\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertFalse(form.is_valid())\n+        with self.assertRaises(Exception):\n+            form.save(commit=True)\n+\n+    def test_custom_form_with_empty_many_to_many_field(self):\n+        class CustomUserCreationForm(UserCreationForm):\n+            class Meta(UserCreationForm.Meta):\n+                model = CustomUserWithM2M\n+                fields = UserCreationForm.Meta.fields + (\"orgs\",)\n+\n+        data = {\n+            \"username\": \"nouserorg@example.com\",\n+            \"password1\": \"testpassword\",\n+            \"password2\": \"testpassword\",\n+            \"orgs\": [],  # No organization selected\n+        }\n+        form = CustomUserCreationForm(data)\n+        self.assertTrue(form.is_valid())\n+        user = form.save(commit=True)\n+        self.assertSequenceEqual(user.orgs.all(), [])\n         self.assertEqual(form.cleaned_data[\"password2\"], data[\"password2\"])\n \n     @override_settings(\n",
  "django__django-16429": "diff --git a/tests/utils_tests/test_timesince.py b/tests/utils_tests/test_timesince.py\nindex f795bf7..5c02ec6 100644\n--- a/tests/utils_tests/test_timesince.py\n+++ b/tests/utils_tests/test_timesince.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.test import TestCase\n@@ -175,7 +176,27 @@ class TimesinceTests(TestCase):\n         self.assertEqual(timesince(t, self.t), \"1000\\xa0years\")\n         self.assertEqual(timeuntil(self.t, t), \"1000\\xa0years\")\n \n-    def test_depth(self):\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_tz_aware_long_interval(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(d), \"1\\xa0month\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_tz_aware_two_months_interval(self):\n+        now = timezone.now()\n+        d = now - datetime.timedelta(days=62)\n+        self.assertEqual(timesince(d), \"2\\xa0months\")\n+\n+    @requires_tz_support\n+    @override_settings(USE_TZ=True)\n+    def test_naive_tz_conversion(self):\n+        naive_now = datetime.datetime.now()\n+        aware_now = timezone.make_aware(naive_now, timezone.get_default_timezone())\n+        d = aware_now - datetime.timedelta(days=31)\n+        self.assertEqual(timesince(d, now=aware_now), \"1\\xa0month\")\n         t = (\n             self.t\n             + self.oneyear\n",
  "django__django-16454": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 8d0729b..e71e038 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -469,6 +469,51 @@ class CommandRunTests(AdminScriptTestCase):\n         self.assertEqual(out.strip(), \"Set foo\")\n \n \n+class SubparserTests(SimpleTestCase):\n+    def test_subparser_required_argument_missing(self):\n+        \"\"\"\n+        Test that missing a required argument for a subparser\n+        does not cause a stack trace and provides a clear error message.\n+        \"\"\"\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(required=True)\n+                create = subparsers.add_parser(\"create\")\n+                create.add_argument(\"name\")\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        command = Command()\n+        parser = Command.create_parser('manage.py', 'cheeses')\n+        with self.assertRaises(CommandError) as cm:\n+            # Simulate managing command missing the 'name' argument\n+            parser.parse_args(['create'])\n+        self.assertIn(\"the following arguments are required: name\", str(cm.exception))\n+\n+\n+    def test_subparser_invalid_type_argument(self):\n+        \"\"\"\n+        Test that supplying an incorrect type for a subparser argument\n+        provides a clear error message.\n+        \"\"\"\n+        class Command(BaseCommand):\n+            def add_arguments(self, parser):\n+                subparsers = parser.add_subparsers(required=True)\n+                foo = subparsers.add_parser(\"foo\")\n+                foo.add_argument(\"bar\", type=int)\n+\n+            def handle(self, *args, **options):\n+                pass\n+\n+        command = Command()\n+        parser = Command.create_parser('manage.py', 'subparser')\n+        with self.assertRaises(CommandError) as cm:\n+            # Simulate managing command with wrong type 'twelve' for an int argument\n+            parser.parse_args(['foo', 'twelve'])\n+        self.assertIn(\"argument bar: invalid int value: 'twelve'\", str(cm.exception))\n+\n+\n class UtilsTests(SimpleTestCase):\n     def test_no_existent_external_program(self):\n         msg = \"Error executing a_42_command_that_doesnt_exist_42\"\n",
  "django__django-16485": "diff --git a/tests/template_tests/filter_tests/test_floatformat.py b/tests/template_tests/filter_tests/test_floatformat.py\nindex 1623d39..6b91a25 100644\n--- a/tests/template_tests/filter_tests/test_floatformat.py\n+++ b/tests/template_tests/filter_tests/test_floatformat.py\n@@ -110,7 +110,22 @@ class FunctionTests(SimpleTestCase):\n         self.assertEqual(floatformat(0, 10), \"0.0000000000\")\n         self.assertEqual(\n             floatformat(0.000000000000000000015, 20), \"0.00000000000000000002\"\n-        )\n+        )    \n+        \n+    def test_issue_zero_decimal_string(self):\n+        # Original test patch and additional test\n+        self.assertEqual(floatformat(\"0.00\", 0), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), 0), \"0\")\n+\n+        # Additional edge cases\n+        self.assertEqual(floatformat(\"0.0\", 0), \"0\")\n+        self.assertEqual(floatformat(\"0.000\", 0), \"0\")\n+        self.assertEqual(floatformat(\"0.00\", 2), \"0.00\")\n+        self.assertEqual(floatformat(Decimal(\"0.000\"), 0), \"0\")\n+\n+        # Testing with negative precision\n+        self.assertEqual(floatformat(\"0.00\", -1), \"0\")\n+        self.assertEqual(floatformat(Decimal(\"0.00\"), -2), \"0\")\n \n     def test_negative_zero_values(self):\n         tests = [\n",
  "django__django-16493": "diff --git a/tests/file_storage/tests.py b/tests/file_storage/tests.py\nindex 20567e7..0e08140 100644\n--- a/tests/file_storage/tests.py\n+++ b/tests/file_storage/tests.py\n@@ -1018,6 +1018,30 @@ class FieldCallableFileStorageTests(SimpleTestCase):\n         storage = kwargs[\"storage\"]\n         self.assertIs(storage, callable_storage)\n \n+    def test_deconstruction_storage_callable_default(self):\n+        \"\"\"\n+        A callable that returns default_storage is not omitted when\n+        deconstructing.\n+        \"\"\"\n+        obj = Storage()\n+        *_, kwargs = obj._meta.get_field(\"storage_callable_default\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], callable_default_storage)\n+\n+    def test_random_callable_deconstruction(self):\n+        \"\"\"\n+        Ensure that a callable returning default_storage or another storage\n+        properly records the callable itself rather than its result.\n+        \"\"\"\n+        def random_storage_callable():\n+            import random\n+            return random.choice([default_storage, temp_storage])\n+\n+        class RandomStorageModel(models.Model):\n+            random_storage_file = models.FileField(storage=random_storage_callable)\n+\n+        *_, kwargs = RandomStorageModel._meta.get_field(\"random_storage_file\").deconstruct()\n+        self.assertIs(kwargs[\"storage\"], random_storage_callable)\n+\n \n # Tests for a race condition on file saving (#4948).\n # This is written in such a way that it'll always pass on platforms\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..4f8312a 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -7,6 +8,8 @@ from django.contrib.auth.admin import UserAdmin\n from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n+from django.contrib.auth import get_permission_codename\n+from .tests import get_perm\n \n from .admin import ArticleAdmin, site\n from .models import Article, Question\n@@ -54,7 +57,42 @@ class AdminTemplateTagsTest(AdminViewBasicTestCase):\n                     template_context[\"show_save_and_add_another\"], expected_flag\n                 )\n \n-    def test_override_change_form_template_tags(self):\n+    def test_submit_row_save_as_new_add_permission_required(self):\n+        \"\"\"\n+        Test that the 'show_save_as_new' button is shown only when add\n+        and change permissions are present, and not shown with only change\n+        permission.\n+        \"\"\"\n+        change_user = User.objects.create_user(\n+            username=\"change_user\", password=\"secret\", is_staff=True\n+        )\n+        change_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = change_user\n+        admin = UserAdmin(User, site)\n+        admin.save_as = True\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], False)\n+\n+        add_user = User.objects.create_user(\n+            username=\"add_user\", password=\"secret\", is_staff=True\n+        )\n+        add_user.user_permissions.add(\n+            get_perm(User, get_permission_codename(\"add\", User._meta)),\n+            get_perm(User, get_permission_codename(\"change\", User._meta)),\n+        )\n+        request = self.request_factory.get(\n+            reverse(\"admin:auth_user_change\", args=[self.superuser.pk])\n+        )\n+        request.user = add_user\n+        response = admin.change_view(request, str(self.superuser.pk))\n+        template_context = submit_row(response.context_data)\n+        self.assertIs(template_context[\"show_save_as_new\"], True)\n         \"\"\"\n         admin_modify template tags follow the standard search pattern\n         admin/app_label/model/template.html.\n",
  "django__django-16560": "",
  "django__django-16569": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 55da562..e698fad 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1471,6 +1471,25 @@ class FormsFormsetTestCase(SimpleTestCase):\n             extra=2,\n         )\n         formset = ChoiceFormFormset()\n+        \n+        # Test case to verify the issue related to `add_fields()` method with index=None\n+        class MyForm(forms.Form):\n+            my_field = forms.CharField()\n+        \n+        MyFormSet = forms.formset_factory(\n+            form=MyForm,\n+            can_delete=True,\n+            can_delete_extra=False,\n+        )\n+        \n+        # Create a formset instance without initial data\n+        my_formset = MyFormSet(initial=None)\n+        \n+        # Accessing the empty_form should not raise an error\n+        empty_form = my_formset.empty_form\n+        \n+        # Assertion to ensure \"DELETE\" is not included in the empty_form's fields\n+        self.assertNotIn(\"DELETE\", empty_form.fields)\n         self.assertEqual(len(formset), 2)\n         self.assertNotIn(\"DELETE\", formset.forms[0].fields)\n         self.assertNotIn(\"DELETE\", formset.forms[1].fields)\n",
  "django__django-16595": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex 3979e76..0d40099 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -43,6 +43,42 @@ class OptimizerTests(SimpleTestCase):\n     def assertDoesNotOptimize(self, operations, **kwargs):\n         self.assertOptimizesTo(operations, operations, **kwargs)\n \n+    def test_alter_alter_field(self):\n+        \"\"\"\n+        Test that multiple AlterField operations on the same field are reduced to a single operation.\n+        \"\"\"\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=256, null=True),\n+                ),\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, null=True),\n+                ),\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, null=True, help_text=\"help\"),\n+                ),\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+                ),\n+            ],\n+            [\n+                migrations.AlterField(\n+                    model_name=\"book\",\n+                    name=\"title\",\n+                    field=models.CharField(max_length=128, null=True, help_text=\"help\", default=None),\n+                ),\n+            ]\n+        )\n+\n     def test_none_app_label(self):\n         optimizer = MigrationOptimizer()\n         with self.assertRaisesMessage(TypeError, \"app_label must be a str\"):\n",
  "django__django-16612": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 9120571..4fcb914 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -8481,6 +8481,45 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_preserved(self):\n+        # Test to ensure query strings are preserved in the redirect\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?filter=active\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?filter=active\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_complex_query_string(self):\n+        # Test to ensure complex query strings are preserved\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        query_string = \"filter=active&sort=desc&page=2\"\n+        response = self.client.get(f\"{known_url[:-1]}?{query_string}\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?{query_string}\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True, FORCE_SCRIPT_NAME=\"/prefix/\")\n     def test_missing_slash_append_slash_true_force_script_name(self):\n         superuser = User.objects.create_user(\n@@ -8499,6 +8538,45 @@ class AdminSiteFinalCatchAllPatternTests(TestCase):\n             fetch_redirect_response=False,\n         )\n \n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_with_query_string_preserved(self):\n+        # Test to ensure query strings are preserved in the redirect\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        response = self.client.get(\"%s?filter=active\" % known_url[:-1])\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?filter=active\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n+    @override_settings(APPEND_SLASH=True)\n+    def test_redirect_complex_query_string(self):\n+        # Test to ensure complex query strings are preserved\n+        superuser = User.objects.create_user(\n+            username=\"staff\",\n+            password=\"secret\",\n+            email=\"staff@example.com\",\n+            is_staff=True,\n+        )\n+        self.client.force_login(superuser)\n+        known_url = reverse(\"admin:admin_views_article_changelist\")\n+        query_string = \"filter=active&sort=desc&page=2\"\n+        response = self.client.get(f\"{known_url[:-1]}?{query_string}\")\n+        self.assertRedirects(\n+            response,\n+            f\"{known_url}?{query_string}\",\n+            status_code=301,\n+            fetch_redirect_response=False,\n+        )\n+\n     @override_settings(APPEND_SLASH=True)\n     def test_missing_slash_append_slash_true_non_staff_user(self):\n         user = User.objects.create_user(\n",
  "django__django-16642": "diff --git a/tests/responses/test_fileresponse.py b/tests/responses/test_fileresponse.py\nindex 499356e..5a61b97 100644\n--- a/tests/responses/test_fileresponse.py\n+++ b/tests/responses/test_fileresponse.py\n@@ -256,6 +256,16 @@ class FileResponseTests(SimpleTestCase):\n             (\".tar.bz2\", \"application/x-bzip\"),\n             (\".tar.xz\", \"application/x-xz\"),\n         )\n+        test_tuples_additional = (\n+            (\".tar.br\", \"application/x-brotli\"),\n+            (\".tar.Z\", \"application/x-compress\"),\n+        )\n+        for extension, mimetype in test_tuples_additional:\n+            with self.subTest(ext=extension):\n+                with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n+                    response = FileResponse(tmp)\n+                self.assertEqual(response.headers[\"Content-Type\"], mimetype)\n+                self.assertFalse(response.has_header(\"Content-Encoding\"))\n         for extension, mimetype in test_tuples:\n             with self.subTest(ext=extension):\n                 with tempfile.NamedTemporaryFile(suffix=extension) as tmp:\n",
  "django__django-16661": "diff --git a/tests/modeladmin/tests.py b/tests/modeladmin/tests.py\nindex 8cb88da..6d89fac 100644\n--- a/tests/modeladmin/tests.py\n+++ b/tests/modeladmin/tests.py\n@@ -149,6 +149,64 @@ class ModelAdminTests(TestCase):\n         self.assertIs(\n             ma.lookup_allowed(\"employee__employeeinfo__description\", \"test_value\"), True\n         )\n+\n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_foreign_primary_original(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class Place(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Restaurant(models.Model):\n+            place = models.OneToOneField(Place, models.CASCADE, primary_key=True)\n+\n+        class Waiter(models.Model):\n+            restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n+\n+        class WaiterAdmin(ModelAdmin):\n+            list_filter = [\n+                \"restaurant__place__country\",\n+                \"restaurant__place__country__name\",\n+            ]\n+\n+        ma = WaiterAdmin(Waiter, self.site)\n+        self.assertIs(ma.lookup_allowed(\"restaurant__place__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"restaurant__place__country__name\", \"test_value\"), True\n+        )\n+\n+    @isolate_apps(\"modeladmin\")\n+    def test_lookup_allowed_foreign_primary_additional(self):\n+        class Country(models.Model):\n+            name = models.CharField(max_length=256)\n+\n+        class City(models.Model):\n+            country = models.ForeignKey(Country, models.CASCADE)\n+\n+        class Landmark(models.Model):\n+            city = models.OneToOneField(City, models.CASCADE, primary_key=True)\n+\n+        class TourGuide(models.Model):\n+            landmark = models.ForeignKey(Landmark, models.CASCADE)\n+\n+        class TourGuideAdmin(ModelAdmin):\n+            list_filter = [\n+                \"landmark__city__country\",\n+                \"landmark__city__country__name\",\n+            ]\n+\n+        ma = TourGuideAdmin(TourGuide, self.site)\n+        self.assertIs(ma.lookup_allowed(\"landmark__city__country\", \"1\"), True)\n+        self.assertIs(\n+            ma.lookup_allowed(\"landmark__city__country__id__exact\", \"1\"), True\n+        )\n+        self.assertIs(\n+            ma.lookup_allowed(\"landmark__city__country__name\", \"test_value\"), True\n+        )\n         # OneToOneField and ForeignKey\n         self.assertIs(\n             ma.lookup_allowed(\"employee__department__code\", \"test_value\"), True\n",
  "django__django-16662": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex f0046ca..b752551 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -922,7 +922,35 @@ class WriterTests(SimpleTestCase):\n             output,\n         )\n \n-    def test_migration_file_header_comments(self):\n+    def test_migration_import_order_compliance(self):\n+        \"\"\"\n+        Verify migration imports comply with Django style and isort defaults.\n+        \"\"\"\n+        migration = type(\n+            \"Migration\",\n+            (migrations.Migration,),\n+            {\n+                \"operations\": [\n+                    migrations.AddField(\n+                        \"mymodel\", \n+                        \"myfield1\", \n+                        models.CharField(max_length=255)\n+                    ),\n+                    migrations.AddField(\n+                        \"mymodel\",\n+                        \"myfield2\",\n+                        models.FloatField(default=time.time),\n+                    ),\n+                ],\n+            },\n+        )\n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        # Check that import statements are sorted correctly\n+        self.assertIn(\n+            \"import datetime\\nimport time\\nfrom django.db import migrations, models\\n\",\n+            output,\n+        )\n         \"\"\"\n         Test comments at top of file.\n         \"\"\"\n",
  "django__django-16801": "",
  "django__django-16819": "diff --git a/tests/migrations/test_optimizer.py b/tests/migrations/test_optimizer.py\nindex ac93153..6d6248b 100644\n--- a/tests/migrations/test_optimizer.py\n+++ b/tests/migrations/test_optimizer.py\n@@ -1148,6 +1148,26 @@ class OptimizerTests(SimpleTestCase):\n             ],\n             [migrations.RenameIndex(\"Pony\", new_name=\"new_name\", old_name=\"old_name\")],\n         )\n+        self.assertOptimizesTo(\n+            [\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink\"),\n+                migrations.AddIndex(\n+                    \"Pony\",\n+                    models.Index(\n+                        fields=[\"weight\", \"pink\"], name=\"idx_pony_weight_pink_2\"\n+                    ),\n+                ),\n+                migrations.RemoveIndex(\"Pony\", \"idx_pony_weight_pink_2\"),\n+            ],\n+            [],\n+        )\n+\n         self.assertDoesNotOptimize(\n             [\n                 migrations.RenameIndex(\n@@ -1157,4 +1177,4 @@ class OptimizerTests(SimpleTestCase):\n                     \"Pony\", new_name=\"new_name\", old_fields=(\"weight\", \"pink\")\n                 ),\n             ]\n-        )\n+        )\n",
  "django__django-16877": "",
  "django__django-16899": "diff --git a/tests/admin_checks/tests.py b/tests/admin_checks/tests.py\nindex 5130136..6b0bb36 100644\n--- a/tests/admin_checks/tests.py\n+++ b/tests/admin_checks/tests.py\n@@ -291,8 +291,35 @@ class SystemChecksTestCase(SimpleTestCase):\n         finally:\n             admin.site.unregister(Book)\n             admin.site.unregister(Author)\n+    \n+    def test_readonly_fields_includes_field_name_on_inline(self):\n+        class CityInline(admin.TabularInline):\n+            model = City\n+            readonly_fields = [\"i_dont_exist\"]  # Nonexistent field\n+\n+        errors = CityInline(State, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'i_dont_exist', which is not a callable, an attribute of 'CityInline', or an attribute of 'admin_checks.City'.\",\n+                obj=CityInline,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n \n-    def test_field_name_not_in_list_display(self):\n+    def test_readonly_fields_includes_field_name(self):\n+        class SongAdmin(admin.ModelAdmin):\n+            readonly_fields = (\"nonexistent\",)\n+\n+        errors = SongAdmin(Song, AdminSite()).check()\n+        expected = [\n+            checks.Error(\n+                \"The value of 'readonly_fields[0]' refers to 'nonexistent', which is not a callable, an attribute of 'SongAdmin', or an attribute of 'admin_checks.Song'.\",\n+                obj=SongAdmin,\n+                id=\"admin.E035\",\n+            )\n+        ]\n+        self.assertEqual(errors, expected)\n         class SongAdmin(admin.ModelAdmin):\n             list_editable = [\"original_release\"]\n \n",
  "django__django-16901": "diff --git a/tests/xor_lookups/tests.py b/tests/xor_lookups/tests.py\nindex 389d908..9d2289e 100644\n--- a/tests/xor_lookups/tests.py\n+++ b/tests/xor_lookups/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import Q\n from django.test import TestCase\n \n@@ -37,7 +38,28 @@ class XorLookupsTests(TestCase):\n             self.numbers[:2] + self.numbers[3:8],\n         )\n \n-    def test_exclude(self):\n+    def test_xor_odd_number_parity(self):\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5)),\n+            [self.numbers[1], self.numbers[2], self.numbers[4]],\n+        )\n+        self.assertCountEqual(\n+            Number.objects.filter(Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5) ^ Q(num__gte=7)),\n+            [self.numbers[1], self.numbers[2], self.numbers[4], self.numbers[6]],\n+        )\n+        self.assertCountEqual(\n+            Number.objects.filter(\n+                Q(num__gte=1) ^ Q(num__gte=3) ^ Q(num__gte=5) ^ Q(num__gte=7) ^ Q(num__gte=9)\n+            ),\n+            [self.numbers[1], self.numbers[2], self.numbers[4], self.numbers[6], self.numbers[8]],\n+        )\n+        # Ensuring combinations with negations work as expected\n+        self.assertCountEqual(\n+            Number.objects.filter(\n+                Q(num__lt=5) ^ Q(num__gte=3) ^ Q(num__lt=2)\n+            ),\n+            [self.numbers[2], self.numbers[4]],\n+        )\n         self.assertCountEqual(\n             Number.objects.exclude(Q(num__lte=7) ^ Q(num__gte=3)),\n             self.numbers[3:8],\n@@ -64,4 +86,4 @@ class XorLookupsTests(TestCase):\n         self.assertCountEqual(\n             Number.objects.filter(Q(pk__in=[]) ^ Q(num__gte=5)),\n             self.numbers[5:],\n-        )\n+        )\n",
  "django__django-17029": "",
  "django__django-17084": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1e0d80c..d55970d 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -28,7 +28,10 @@ from django.db.models import (\n     Value,\n     Variance,\n     When,\n+    Avg,  # Added to use Avg in new test cases\n )\n+from django.db.models import F, Count  # Added for F expression and Count aggregation\n+from django.db.models.functions.window import Window  # Added to use Window functions\n from django.db.models.expressions import Func, RawSQL\n from django.db.models.functions import (\n     Cast,\n",
  "django__django-17087": "",
  "django__django-7530": "",
  "django__django-9296": "diff --git a/tests/pagination/tests.py b/tests/pagination/tests.py\nindex b9b5fbc..9c9e593 100644\n--- a/tests/pagination/tests.py\n+++ b/tests/pagination/tests.py\n@@ -309,7 +309,37 @@ class ModelPaginationTests(TestCase):\n             a = Article(headline='Article %s' % x, pub_date=datetime(2005, 7, 29))\n             a.save()\n \n-    def test_first_page(self):\n+    def test_paginator_iteration(self):\n+        paginator = Paginator([1, 2, 3], 2)\n+        page_iterator = iter(paginator)\n+        for page, expected in enumerate(([1, 2], [3]), start=1):\n+            with self.subTest(page=page):\n+                self.assertEqual(expected, list(next(page_iterator)))\n+\n+    def test_paginator_iteration_empty(self):\n+        # Test iterating over an empty paginator\n+        paginator = Paginator([], 2)\n+        page_iterator = iter(paginator)\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_iteration_single_page(self):\n+        # Test a paginator with exactly one page of items\n+        paginator = Paginator([1], 5)\n+        page_iterator = iter(paginator)\n+        self.assertEqual([1], list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n+\n+    def test_paginator_iteration_multiple_full_pages(self):\n+        # Test iterating over a paginator with multiple full pages\n+        paginator = Paginator([1,2,3,4,5,6], 2)\n+        page_iterator = iter(paginator)\n+        expected_pages = [[1, 2], [3, 4], [5, 6]]\n+        for expected in expected_pages:\n+            self.assertEqual(expected, list(next(page_iterator)))\n+        with self.assertRaises(StopIteration):\n+            next(page_iterator)\n         paginator = Paginator(Article.objects.order_by('id'), 5)\n         p = paginator.page(1)\n         self.assertEqual(\"<Page 1 of 2>\", str(p))\n",
  "matplotlib__matplotlib-13989": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 5483eef..628b222 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6359,8 +6359,14 @@ def test_hist_auto_bins():\n \n def test_hist_nan_data():\n     fig, (ax1, ax2) = plt.subplots(2)\n+import matplotlib.pyplot as plt\n+import numpy as np\n \n-    data = [1, 2, 3]\n+def test_hist_range_and_density():\n+    # Test that plt.hist respects range when density=True\n+    _, bins, _ = plt.hist(np.random.rand(10), \"auto\", range=(0, 1), density=True)\n+    assert bins[0] == 0, \"The first bin edge should be 0\"\n+    assert bins[-1] == 1, \"The last bin edge should be 1\"\n     nan_data = data + [np.nan]\n \n     bins, edges, _ = ax1.hist(data)\n@@ -6368,4 +6374,4 @@ def test_hist_nan_data():\n         nanbins, nanedges, _ = ax2.hist(nan_data)\n \n     assert np.allclose(bins, nanbins)\n-    assert np.allclose(edges, nanedges)\n+    assert np.allclose(edges, nanedges)\n",
  "matplotlib__matplotlib-14623": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c9ad946..d496de0 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -938,6 +938,25 @@ def test_inverted_limits():\n     assert ax.get_ylim() == (5, -3)\n     plt.close()\n \n+def test_log_scale_inverted_limits():\n+    # Test the inversion of y-axis on a logarithmic scale using set_ylim.\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.set_ylim(100, 1)  # Intentionally inverted limits for testing\n+    inverted_ylim = ax.get_ylim()\n+    assert inverted_ylim == (100, 1), f\"Expected (100, 1), got {inverted_ylim}\"\n+    plt.close()\n+\n+def test_log_scale_invert_yaxis():\n+    # Test the inversion of y-axis on a logarithmic scale using invert_yaxis.\n+    fig, ax = plt.subplots()\n+    ax.set_yscale(\"log\")\n+    ax.invert_yaxis()\n+    # Here inversion doesn't change limits, just checks if axis can accommodate inversion\n+    expected_ylim = ax.get_ylim()\n+    assert expected_ylim[0] > expected_ylim[1], \"Y-axis is not inverted with invert_yaxis\"\n+    plt.close()\n+\n \n @image_comparison(baseline_images=['nonfinite_limits'])\n def test_nonfinite_limits():\n",
  "matplotlib__matplotlib-20488": "",
  "matplotlib__matplotlib-20826": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex 24b5fb5..79c5ffd 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -6960,6 +6960,32 @@ def test_2dcolor_plot(fig_test, fig_ref):\n     axs[3].hist(np.arange(10), color=color.reshape((1, -1)))\n     axs[4].bar(np.arange(10), np.arange(10), color=color.reshape((1, -1)))\n \n+from matplotlib.testing.decorators import check_figures_equal\n+import matplotlib.pyplot as plt\n+import numpy as np\n+\n+@check_figures_equal(extensions=['png'])\n+def test_shared_axes_clear(fig_test, fig_ref):\n+    # Set up data\n+    x = np.arange(0.0, 2*np.pi, 0.01)\n+    y = np.sin(x)\n+\n+    # Reference figure: No ax.clear() call\n+    axs_ref = fig_ref.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_ref.flat:\n+        ax.plot(x, y)\n+\n+    # Test figure: ax.clear() called\n+    axs_test = fig_test.subplots(2, 2, sharex=True, sharey=True)\n+    for ax in axs_test.flat:\n+        ax.clear()\n+        ax.plot(x, y)\n+\n+    # Explicitly check shared axis properties post-clear\n+    for i, ax in enumerate(axs_test.flat):\n+        if i in [1, 2, 3]:  # These should not have visible x or y tick labels\n+            assert not ax.get_xaxis().get_visible()\n+            assert not ax.get_yaxis().get_visible()\n \n def test_shared_axes_retick():\n     fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')\n",
  "matplotlib__matplotlib-20859": "",
  "matplotlib__matplotlib-22719": "diff --git a/lib/matplotlib/tests/test_category.py b/lib/matplotlib/tests/test_category.py\nindex 40c4dcf..143b3c8 100644\n--- a/lib/matplotlib/tests/test_category.py\n+++ b/lib/matplotlib/tests/test_category.py\n@@ -311,4 +311,37 @@ def test_hist():\n     fig, ax = plt.subplots()\n     n, bins, patches = ax.hist(['a', 'b', 'a', 'c', 'ff'])\n     assert n.shape == (10,)\n-    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n+\n+def test_no_deprecation_on_empty_data():\n+    \"\"\"\n+    Smoke test to check that no deprecation warning is emitted when plotting\n+    empty data on an axis with categorical units. \n+    \"\"\"\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    with pytest.warns(None) as record:\n+        ax.plot([], [])\n+    # Ensure no warnings are issued\n+    assert len(record) == 0\n+\n+def test_deprecation_on_non_empty_data():\n+    \"\"\"\n+    Test that no deprecation warning is emitted when plotting non-empty data.\n+    \"\"\"\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    with pytest.warns(None) as record:\n+        ax.plot([\"a\", \"b\"], [1, 2])\n+    # Ensure no warnings are issued\n+    assert len(record) == 0\n+\n+def test_convert_units_with_empty_data():\n+    \"\"\"\n+    Test using the `convert_xunits` method with empty data and ensure no warnings.\n+    \"\"\"\n+    f, ax = plt.subplots()\n+    ax.xaxis.update_units([\"a\", \"b\"])\n+    with pytest.warns(None) as record:\n+        ax.convert_xunits([])\n+    assert len(record) == 0\n+    np.testing.assert_allclose(n, [2., 0., 0., 1., 0., 0., 1., 0., 0., 1.])\n",
  "matplotlib__matplotlib-22865": "",
  "matplotlib__matplotlib-23299": "diff --git a/lib/matplotlib/tests/test_rcparams.py b/lib/matplotlib/tests/test_rcparams.py\nindex 144880c..37cae9f 100644\n--- a/lib/matplotlib/tests/test_rcparams.py\n+++ b/lib/matplotlib/tests/test_rcparams.py\n@@ -495,8 +495,25 @@ def test_keymaps():\n     for k in key_list:\n         assert isinstance(mpl.rcParams[k], list)\n \n+import matplotlib.pyplot as plt\n+from matplotlib import get_backend, rc_context\n+from matplotlib.testing.decorators import check_figures_equal\n+\n+def test_retain_figures_within_rc_context():\n+    # This test checks if a figure created within an rc_context\n+    # is retained in Gcf.figs after calling get_backend().\n+\n+    # Create a figure inside an rc_context.\n+    with rc_context():\n+        fig1 = plt.figure()\n+\n+    before_figs = dict(plt._pylab_helpers.Gcf.figs)\n+    get_backend()\n+    after_figs = dict(plt._pylab_helpers.Gcf.figs)\n \n-def test_rcparams_reset_after_fail():\n+    # The before and after state of figures should be the same\n+    # if the bug has been fixed.\n+    assert before_figs == after_figs, f\"Figures cleared: before {before_figs}, after {after_figs}\"\n     # There was previously a bug that meant that if rc_context failed and\n     # raised an exception due to issues in the supplied rc parameters, the\n     # global rc parameters were left in a modified state.\n",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..8500431 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -15,12 +15,22 @@ from matplotlib.patches import Circle\n \n import matplotlib.pyplot as plt\n import numpy as np\n+from matplotlib.testing.decorators import check_figures_equal\n \n \n mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n+@check_figures_equal()\n+def test_3d_axes_set_visible_false(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(projection='3d')\n+    ax_test.scatter(1, 1, 1, c='b')\n+    ax_test.set_visible(False)  # This should make the subplot invisible\n+\n+    ax_ref = fig_ref.add_subplot(projection='3d')\n+    # No elements in the reference figure for comparison with invisible subplot\n+\n def test_aspect_equal_error():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23412": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\nindex 6db3e7e..c9cdd37 100644\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -148,8 +148,32 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     rect_test.set_angle(angle)\n     assert rect_test.get_angle() == angle\n \n+from matplotlib.patches import Rectangle\n+from matplotlib.testing.decorators import check_figures_equal\n \n-def test_negative_rect():\n+@check_figures_equal(extensions=['png'])\n+def test_patch_offset_dash_property(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot(111)\n+    ax_ref = fig_ref.add_subplot(111)\n+\n+    # Test Rectangle with different offset dash styles\n+    rect1_test = Rectangle((0.1, 0.1), 0.6, 0.6, edgecolor='r', linewidth=4, linestyle=(0, (10, 10)))\n+    rect2_test = Rectangle((0.1, 0.1), 0.6, 0.6, edgecolor='b', linewidth=4, linestyle=(10, (10, 10)))\n+\n+    rect1_ref = Rectangle((0.1, 0.1), 0.6, 0.6, edgecolor='r', linewidth=4, linestyle=(0, (10, 10)))\n+    rect2_ref = Rectangle((0.1, 0.1), 0.6, 0.6, edgecolor='b', linewidth=4, linestyle=(10, (10, 10)))\n+\n+    ax_test.add_patch(rect1_test)\n+    ax_test.add_patch(rect2_test)\n+\n+    ax_ref.add_patch(rect1_ref)\n+    ax_ref.add_patch(rect2_ref)\n+\n+    # Setting limits to ensure both axes show the entire rectangles\n+    ax_test.set_xlim(0, 1)\n+    ax_test.set_ylim(0, 1)\n+    ax_ref.set_xlim(0, 1)\n+    ax_ref.set_ylim(0, 1)\n     # These two rectangles have the same vertices, but starting from a\n     # different point.  (We also drop the last vertex, which is a duplicate.)\n     pos_vertices = Rectangle((-3, -2), 3, 2).get_verts()[:-1]\n",
  "matplotlib__matplotlib-24026": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex f408084..4f7f953 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -2866,9 +2866,29 @@ def test_stackplot():\n     ax.set_xlim((0, 10))\n     ax.set_ylim((0, 70))\n \n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.testing.decorators import image_comparison\n+\n+def test_stackplot_with_Cn_colors():\n+    # Create test data\n+    x = np.array([1, 2, 3])\n+    y = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+\n+    # Create plot \n+    fig, ax = plt.subplots()\n+\n+    # Use a plot line with C0 color\n+    ax.plot([1, 3], [1, 3], color='C0')\n+\n+    # Add a rectangle with facecolor C1\n+    ax.add_patch(plt.Rectangle((1.5, 1.5), 0.5, 0.5, facecolor='C1'))\n+\n+    # Use stackplot with C2, C3, C4 colors\n+    ax.stackplot(x, y, colors=['C2', 'C3', 'C4'])\n \n-@image_comparison(['stackplot_test_baseline'], remove_text=True)\n-def test_stackplot_baseline():\n+    # Check that color cycler wasn't altered unexpectedly\n+    assert next(ax._get_patches_for_fill().get_facecolor()[:1][0]) == (0.20784313725490197, 0.592156862745098, 0.5607843137254902, 1.0), \"Color cycle altered unexpectedly\"\n     np.random.seed(0)\n \n     def layers(n, m):\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24570": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\nindex 45f9c04..df6709e 100644\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -2,6 +2,28 @@ from collections import namedtuple\n import io\n \n import numpy as np\n+@pytest.mark.parametrize(\"align\", [\"top\", \"bottom\"])\n+def test_hpacker_align_top_bottom(align):\n+    fig = plt.figure(dpi=72)\n+    x1, y1 = 10, 30\n+    x2, y2 = 20, 60\n+    r1 = DrawingArea(x1, y1)\n+    r2 = DrawingArea(x2, y2)\n+\n+    hpacker = HPacker(children=[r1, r2], pad=0, sep=0, align=align)\n+    renderer = fig.canvas.get_renderer()\n+\n+    # HPacker verification\n+    *extents, offset_pairs = hpacker.get_extent_offsets(renderer)\n+    assert_allclose((x1 + x2, max(y1, y2), 0, 0), extents)\n+\n+    if align == \"bottom\":\n+        y_height = 0\n+    elif align == \"top\":\n+        y_height = y2 - y1\n+\n+    assert_allclose([(0, y_height), (x1, 0)], offset_pairs)\n+\n from numpy.testing import assert_allclose\n import pytest\n \n@@ -12,6 +34,7 @@ import matplotlib.lines as mlines\n from matplotlib.backend_bases import MouseButton, MouseEvent\n \n from matplotlib.offsetbox import (\n+    HPacker, VPacker,\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n     OffsetImage, TextArea, _get_packed_offsets)\n \n",
  "matplotlib__matplotlib-24627": "",
  "matplotlib__matplotlib-24637": "diff --git a/lib/matplotlib/tests/test_backend_svg.py b/lib/matplotlib/tests/test_backend_svg.py\nindex 8817464..a0e9aa7 100644\n--- a/lib/matplotlib/tests/test_backend_svg.py\n+++ b/lib/matplotlib/tests/test_backend_svg.py\n@@ -576,7 +576,71 @@ def test_svg_font_string(font_str, include_generic):\n         rest = rest + [generic]\n     plt.rcParams[f\"font.{generic}\"] = rest\n     plt.rcParams[\"font.size\"] = size\n-    plt.rcParams[\"svg.fonttype\"] = \"none\"\n+from io import BytesIO\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.offsetbox import (OffsetImage, AnnotationBbox)\n+\n+def test_annotationbbox_gid():\n+    # Test that object gid appears in the AnnotationBbox\n+    # in output svg.\n+    fig, ax = plt.subplots()\n+    arr_img = np.random.rand(32, 32, 3)\n+    xy = (0.3, 0.55)\n+\n+    imagebox = OffsetImage(arr_img, zoom=0.1)\n+    imagebox.image.axes = ax\n+\n+    ab = AnnotationBbox(imagebox, xy,\n+                        xybox=(120., -80.),\n+                        xycoords='data',\n+                        boxcoords=\"offset points\",\n+                        pad=0.5,\n+                        arrowprops=dict(\n+                            arrowstyle=\"->\",\n+                            connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                        )\n+    ab.set_gid(\"a test for issue 20044\")\n+    ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    expected = '<g id=\"a test for issue 20044\">'\n+    assert expected in buf\n+\n+def test_annotationbbox_multiple_gid():\n+    # Test multiple Annotations with different gids\n+    fig, ax = plt.subplots()\n+    arr_img = np.random.rand(32, 32, 3)\n+\n+    g_ids = [\"label1\", \"label2\", \"label3\"]\n+    positions = [(0.3, 0.55), (0.5, 0.7), (0.7, 0.9)]\n+\n+    for gid, xy in zip(g_ids, positions):\n+        imagebox = OffsetImage(arr_img, zoom=0.1)\n+        imagebox.image.axes = ax\n+\n+        ab = AnnotationBbox(imagebox, xy,\n+                            xybox=(120., -80.),\n+                            xycoords='data',\n+                            boxcoords=\"offset points\",\n+                            pad=0.5,\n+                            arrowprops=dict(\n+                                arrowstyle=\"->\",\n+                                connectionstyle=\"angle,angleA=0,angleB=90,rad=3\")\n+                            )\n+        ab.set_gid(gid)\n+        ax.add_artist(ab)\n+\n+    with BytesIO() as fd:\n+        fig.savefig(fd, format='svg')\n+        buf = fd.getvalue().decode('utf-8')\n+\n+    for gid in g_ids:\n+        expected = f'<g id=\"{gid}\">'\n+        assert expected in buf\n \n     fig, ax = plt.subplots()\n     if generic == \"sans-serif\":\n",
  "matplotlib__matplotlib-24970": "diff --git a/lib/matplotlib/tests/test_colors.py b/lib/matplotlib/tests/test_colors.py\nindex 2be14fe..0a3fb36 100644\n--- a/lib/matplotlib/tests/test_colors.py\n+++ b/lib/matplotlib/tests/test_colors.py\n@@ -20,6 +20,17 @@ import matplotlib.scale as mscale\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n \n \n+import pytest\n+import numpy as np\n+import matplotlib as mpl\n+from numpy.testing import assert_array_equal\n+\n+@pytest.mark.parametrize(\"dtype\", [np.uint8, int, np.float16, float, np.int64])\n+def test_get_cmap_deprecation_warning(dtype):\n+    # Test that no deprecation warnings are thrown for various dtypes\n+    cm = mpl.colormaps[\"viridis\"]\n+    cm(dtype(0))  # Check without triggering deprecation warnings\n+\n @pytest.mark.parametrize('N, result', [\n     (5, [1, .6, .2, .1, 0]),\n     (2, [1, 0]),\n",
  "matplotlib__matplotlib-25122": "",
  "matplotlib__matplotlib-25287": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex c24a832..3cb5b62 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -7801,6 +7801,36 @@ def test_xtickcolor_is_not_xticklabelcolor():\n         assert tick.label1.get_color() == 'blue'\n \n \n+# Existing test cases remain unchanged\n+\n+def test_xaxis_offsetText_color():\n+    plt.rcParams['xtick.labelcolor'] = 'blue'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'blue'\n+\n+    plt.rcParams['xtick.color'] = 'yellow'\n+    plt.rcParams['xtick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.xaxis.offsetText.get_color() == 'yellow'\n+\n+\n+def test_yaxis_offsetText_color():\n+    plt.rcParams['ytick.labelcolor'] = 'green'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'green'\n+\n+    plt.rcParams['ytick.color'] = 'red'\n+    plt.rcParams['ytick.labelcolor'] = 'inherit'\n+    ax = plt.axes()\n+    ax.plot([1.01e9, 1.02e9, 1.03e9])\n+    assert ax.yaxis.offsetText.get_color() == 'red'\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_ytickcolor_is_not_yticklabelcolor():\n     plt.rcParams['ytick.color'] = 'yellow'\n     plt.rcParams['ytick.labelcolor'] = 'blue'\n",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..fed0639 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -89,8 +90,22 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n-\n @mpl.style.context(\"default\")\n+def test_pickle_figure_with_draggable_legend():\n+    fig, ax = plt.subplots()\n+    ax.plot([0, 1, 2], [0, 1, 0], label='Test line')\n+\n+    legend = ax.legend(draggable=True)\n+    assert legend.get_draggable() is True\n+\n+    # Attempt to pickle the figure\n+    pkl = pickle.dumps(fig, protocol=pickle.HIGHEST_PROTOCOL)\n+\n+    # Check that 'FigureCanvasAgg' is not in the pickle stream\n+    assert \"FigureCanvasAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+\n+    loaded_fig = pickle.loads(pkl)\n+    assert isinstance(loaded_fig, mfigure.Figure)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..325e201 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,11 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n-\n-@mpl.style.context(\"default\")\n+import numpy as np\n+import matplotlib.pyplot as plt\n+import matplotlib as mpl\n+import pickle\n+from io import BytesIO\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n@@ -105,8 +108,28 @@ def test_complete(fig_test, fig_ref):\n \n     plt.close(loaded)\n \n-\n-def _pickle_load_subprocess():\n+def test_pickle_figure_with_aligned_labels():\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    \n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    \n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+\n+    fig.align_labels()  # Ensure labels are aligned\n+\n+    # Test pickling the figure\n+    try:\n+        pickle.dumps(fig)\n+        print(\"Test Passed: Figure with aligned labels pickled successfully.\")\n+    except Exception as e:\n+        print(f\"Test Failed: Could not pickle figure with aligned labels. Error: {e}\")\n     import os\n     import pickle\n \n",
  "matplotlib__matplotlib-25775": "",
  "matplotlib__matplotlib-26113": "diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py\nindex ebe9106..e06081b 100644\n--- a/lib/matplotlib/tests/test_axes.py\n+++ b/lib/matplotlib/tests/test_axes.py\n@@ -991,8 +991,78 @@ def test_hexbin_linear():\n     ax.hexbin(x, y, gridsize=(10, 5), marginals=True,\n               reduce_C_function=np.sum)\n \n+import numpy as np\n+from matplotlib import pyplot as plt\n+from matplotlib.testing.decorators import check_figures_equal\n \n-def test_hexbin_log_clim():\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_behavior_upon_C_parameter(fig_test, fig_ref):\n+    # see: gh:12926\n+    datapoints = [\n+        # list of (x, y)\n+        (0, 0),\n+        (0, 0),\n+        (6, 0),\n+        (0, 6),\n+    ]\n+    X, Y = zip(*datapoints)\n+    C = [1] * len(X)\n+    extent = [-10., 10, -10., 10]\n+    gridsize = (7, 7)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # without C parameter\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=1,\n+    )\n+    ax_ref.set_facecolor(\"green\")  # for contrast of background\n+\n+    # with C parameter\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=1,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n+\n+@check_figures_equal(extensions=['png'])\n+def test_hexbin_mincnt_zero_with_C(fig_test, fig_ref):\n+    X = [1, 2, 3]\n+    Y = [4, 5, 6]\n+    C = [1, 1, 1]\n+    extent = [0, 10, 0, 10]\n+    gridsize = (5, 5)\n+\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+\n+    # Without C, mincnt=0 should show all bins with any data\n+    ax_ref.hexbin(\n+        X, Y,\n+        extent=extent,\n+        gridsize=gridsize,\n+        mincnt=0,\n+    )\n+    ax_ref.set_facecolor(\"green\")\n+\n+    # With C, mincnt=0 should have the same behavior\n+    ax_test.hexbin(\n+        X, Y,\n+        C=C,\n+        reduce_C_function=lambda v: sum(v),\n+        mincnt=0,\n+        extent=extent,\n+        gridsize=gridsize,\n+    )\n+    ax_test.set_facecolor(\"green\")\n     x, y = np.arange(200).reshape((2, 100))\n     fig, ax = plt.subplots()\n     h = ax.hexbin(x, y, bins='log', vmin=2, vmax=100)\n",
  "matplotlib__matplotlib-26291": "",
  "matplotlib__matplotlib-26342": "diff --git a/lib/matplotlib/tests/test_contour.py b/lib/matplotlib/tests/test_contour.py\nindex 700190c..677ca4c 100644\n--- a/lib/matplotlib/tests/test_contour.py\n+++ b/lib/matplotlib/tests/test_contour.py\n@@ -88,8 +88,30 @@ def test_contour_no_valid_levels():\n     # no warning if z is uniform.\n     ax.contour(np.ones((9, 9)))\n \n-\n-def test_contour_Nlevels():\n+@check_figures_equal(extensions=['png'])\n+def test_contour_set_paths_functionality(fig_test, fig_ref):\n+    ax_test = fig_test.subplots()\n+    ax_ref = fig_ref.subplots()\n+    \n+    z = np.array([[0, 1], [1, 2]])\n+    \n+    # Create contours\n+    cs_test = ax_test.contour(z)\n+    cs_ref = ax_ref.contour(z)\n+    \n+    # Initialize new paths by manually transforming existing paths\n+    transformed_paths = [Path(p.vertices + np.array([1, 0]), p.codes) for p in cs_ref.get_paths()]\n+    \n+    # Apply set_paths on test\n+    cs_test.set_paths(transformed_paths)\n+    \n+    # Draw the images on which they'll be compared\n+    ax_test.set_xlim(0, 2)\n+    ax_ref.set_xlim(1, 3)\n+    ax_test.set_ylim(0, 2)\n+    ax_ref.set_ylim(0, 2)\n+    ax_ref.set_xticks([])\n+    ax_ref.set_yticks([])\n     # A scalar levels arg or kwarg should trigger auto level generation.\n     # https://github.com/matplotlib/matplotlib/issues/11913\n     z = np.arange(12).reshape((3, 4))\n",
  "mwaskom__seaborn-3069": "",
  "pallets__flask-5014": "diff --git a/tests/test_blueprints.py b/tests/test_blueprints.py\nindex 94a27b3..b03c8a0 100644\n--- a/tests/test_blueprints.py\n+++ b/tests/test_blueprints.py\n@@ -244,6 +244,15 @@ def test_default_static_max_age(app):\n         app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = max_age_default\n \n \n+import pytest\n+import flask\n+\n+...\n+def test_empty_name_not_allowed(app, client):\n+    with pytest.raises(ValueError):\n+        flask.Blueprint(\"\", __name__)\n+\n+\n def test_templates_list(test_apps):\n     from blueprintapp import app\n \n",
  "psf__requests-1142": "",
  "psf__requests-1724": "diff --git a/requests/api.py b/requests/api.py\nindex 66d7f21..a863562 100644\n--- a/requests/api.py\n+++ b/requests/api.py\n@@ -13,6 +13,40 @@ This module implements the Requests API.\n \n from . import sessions\n \n+def httpbin(endpoint):\n+    return f\"http://httpbin.org/{endpoint}\"\n+\n+class TestUnicodeMethodNames(unittest.TestCase):\n+\n+    def test_unicode_method_name(self):\n+        files = {'file': open('test_requests.py', 'rb')}\n+        r = requests.request(method=u'POST', url=httpbin('post'), files=files)\n+        assert r.status_code == 200\n+\n+    def test_unicode_method_get(self):\n+        r = requests.request(method=u'GET', url=httpbin('get'))\n+        assert r.status_code == 200\n+\n+    def test_unicode_method_put(self):\n+        r = requests.request(method=u'PUT', url=httpbin('put'), data='data')\n+        assert r.status_code == 200\n+\n+    def test_unicode_method_delete(self):\n+        r = requests.request(method=u'DELETE', url=httpbin('delete'))\n+        assert r.status_code == 200\n+\n+    def test_unicode_method_patch(self):\n+        r = requests.request(method=u'PATCH', url=httpbin('patch'), data='data')\n+        assert r.status_code == 200\n+\n+    def test_unicode_method_head(self):\n+        r = requests.request(method=u'HEAD', url=httpbin('get'))\n+        assert r.status_code == 200\n+\n+    def test_unicode_method_options(self):\n+        r = requests.request(method=u'OPTIONS', url=httpbin('get'))\n+        assert r.status_code == 200\n+\n \n def request(method, url, **kwargs):\n     \"\"\"Constructs and sends a :class:`Request <Request>`.\n",
  "psf__requests-1766": "",
  "psf__requests-1921": "",
  "psf__requests-2317": "",
  "psf__requests-2931": "",
  "psf__requests-5414": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 7279149..aca1577 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -81,6 +81,10 @@ class TestRequests:\n             (InvalidSchema, 'localhost.localdomain:3128/'),\n             (InvalidSchema, '10.122.1.1:3128/'),\n             (InvalidURL, 'http://'),\n+            (InvalidURL, 'http://.example.com'),  # Adding test for leading dot in domain\n+            (InvalidURL, 'http://..example.com'), # Adding test for consecutive dots\n+            (InvalidURL, 'http://example..com'),  # Adding test for trailing dots\n+            (InvalidURL, 'http://.example.com/path'), # Test with path\n         ))\n     def test_invalid_url(self, exception, url):\n         with pytest.raises(exception):\n",
  "pydata__xarray-2905": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex e1452a7..145c156 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -2308,8 +2308,35 @@ class TestAsCompatibleData:\n         orig = Variable(dims=(\"x\"), data=array, attrs={\"foo\": \"bar\"})\n         assert isinstance(orig._data, CustomIndexable)\n \n-\n-def test_raise_no_warning_for_nan_in_binary_ops():\n+def test_variable_setitem_with_values_property():\n+    import numpy as np\n+    from xarray import Variable\n+\n+    # Type with data stored in values attribute\n+    class CustomWithValuesAttr:\n+        def __init__(self, array):\n+            self.values = array\n+\n+    # Test behavior for array with values attribute\n+    array_instance = CustomWithValuesAttr(np.arange(3))\n+    orig = Variable(dims=(), data=array_instance)\n+    assert isinstance(orig._data.item(), CustomWithValuesAttr), \"The item should maintain its original class\"\n+\n+    # Extend test scenario for the given issue\n+    class HasValues:\n+        values = 5\n+\n+    # Create two DataArrays from xarray for test purpose\n+    good_indexed = Variable(dims=(\"dim_0\",), data=[None])\n+    bad_indexed = Variable(dims=(\"dim_0\",), data=[None])\n+\n+    # Assign objects to these DataArrays\n+    good_indexed[{'dim_0': 0}] = set()  # Set type\n+    bad_indexed[{'dim_0': 0}] = HasValues()  # Custom object with 'values'\n+\n+    # Assert expected outcomes\n+    assert good_indexed.data[0] == set(), \"good_indexed should correctly store set\"\n+    assert isinstance(bad_indexed.data[0], HasValues), \"bad_indexed should store the instance of HasValues\"\n     with pytest.warns(None) as record:\n         Variable(\"x\", [1, 2, np.NaN]) > 0\n     assert len(record) == 0\n",
  "pydata__xarray-3095": "diff --git a/xarray/tests/test_variable.py b/xarray/tests/test_variable.py\nindex 9329f73..20cb4bd 100644\n--- a/xarray/tests/test_variable.py\n+++ b/xarray/tests/test_variable.py\n@@ -475,8 +475,16 @@ class VariableSubclassobjects:\n         expected = Variable('x', np.array([0, 1, 'two'], dtype=object))\n         assert_identical(expected, actual)\n         assert actual.dtype == object\n-\n+    \n     @pytest.mark.parametrize('deep', [True, False])\n+    def test_copy_unicode_index(self, deep):\n+        # Create a Variable with a Unicode dtype index\n+        var = self.cls('x', np.array(['foo'], dtype='<U3'))\n+        copied_var = var.copy(deep=deep)\n+        assert_identical(var, copied_var)\n+        assert var.dtype == copied_var.dtype\n+        assert var.dtype.kind == 'U'\n+        assert copied_var.dtype.kind == 'U'\n     def test_copy(self, deep):\n         v = self.cls('x', 0.5 * np.arange(10), {'foo': 'bar'})\n         w = v.copy(deep=deep)\n",
  "pydata__xarray-3151": "diff --git a/xarray/tests/test_combine.py b/xarray/tests/test_combine.py\nindex 026dec9..4e9e74d 100644\n--- a/xarray/tests/test_combine.py\n+++ b/xarray/tests/test_combine.py\n@@ -574,7 +574,22 @@ class TestCombineAuto:\n         def test_empty_input(self):\n             assert_identical(Dataset(), combine_by_coords([]))\n \n-    def test_infer_order_from_coords(self):\n+    def test_non_monotonic_identical_coords(self):\n+        # Test non-monotonic identical coordinates are allowed\n+        ycoord = ['a', 'c', 'b']\n+        data = np.random.rand(7, 3)\n+\n+        ds1 = Dataset(data_vars=dict(data=(['x', 'y'], data[:3, :])),\n+                      coords=dict(x=[1, 2, 3], y=ycoord))\n+\n+        ds2 = Dataset(data_vars=dict(data=(['x', 'y'], data[3:, :])),\n+                      coords=dict(x=[4, 5, 6, 7], y=ycoord))\n+\n+        expected = Dataset(data_vars=dict(data=(['x', 'y'], data)),\n+                           coords=dict(x=[1, 2, 3, 4, 5, 6, 7], y=ycoord))\n+\n+        actual = combine_by_coords((ds1, ds2))\n+        assert_identical(expected, actual)\n         data = create_test_data()\n         objs = [data.isel(dim2=slice(4, 9)), data.isel(dim2=slice(4))]\n         actual = combine_by_coords(objs)\n",
  "pydata__xarray-3305": "diff --git a/xarray/tests/test_dataarray.py b/xarray/tests/test_dataarray.py\nindex b0e2440..6e33b90 100644\n--- a/xarray/tests/test_dataarray.py\n+++ b/xarray/tests/test_dataarray.py\n@@ -2309,6 +2309,29 @@ class TestDataArray:\n                     self.dv.values, np.array(q) * 100, axis=axis\n                 )\n                 np.testing.assert_allclose(actual.values, expected)\n+    def test_quantile_keep_attrs(self):\n+        # Create a DataArray with attributes\n+        da = DataArray([0, 0, 1, 2], dims=\"x\", attrs={'units': 'K'})\n+        \n+        # Calculate the quantile while keeping attributes\n+        out = da.quantile(0.5, dim='x', keep_attrs=True)\n+        \n+        # Verify that attributes are retained\n+        assert out.attrs == da.attrs\n+\n+    def test_quantile_keep_attrs_multiple_dims(self):\n+        # Create a more complex DataArray with attributes and multiple dimensions\n+        da = DataArray(\n+            [[0, 1], [1, 2]], \n+            dims=[\"x\", \"y\"], \n+            attrs={'description': 'test array'}\n+        )\n+        \n+        # Calculate the quantile across one dimension only\n+        out = da.quantile(0.5, dim='x', keep_attrs=True)\n+        \n+        # Verify that attributes are retained\n+        assert out.attrs == da.attrs\n \n     def test_reduce_keep_attrs(self):\n         # Test dropped attrs\n",
  "pydata__xarray-3677": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex cd14bf3..486bf91 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -1,3 +1,4 @@\n+\n import numpy as np\n import pytest\n \n@@ -159,7 +160,27 @@ class TestMergeMethod:\n         with raises_regex(ValueError, \"should be coordinates or not\"):\n             data.merge(data.reset_coords())\n \n-    def test_merge_broadcast_equals(self):\n+    from xarray.testing import assert_identical\n+\n+    def test_merge_dataarray(self):\n+        ds = xr.Dataset({\"a\": 0})\n+        da = xr.DataArray(data=1, name=\"b\")\n+        \n+        # Test merging dataset with dataarray using Dataset.merge()\n+        expected = xr.merge([ds, da])\n+        actual = ds.merge(da)\n+        assert_identical(actual, expected)\n+\n+        # Test merging when there's a conflict\n+        with pytest.raises(xr.MergeError):\n+            ds.merge(xr.DataArray(data=2, name=\"a\"))  # 'a' already exists in ds\n+\n+        # Test merging with a DataArray that has coordinates\n+        da_with_coords = xr.DataArray(data=[1, 2, 3], dims=\"x\", name=\"c\", coords={\"x\": [0, 1, 2]})\n+        ds_with_coords = xr.Dataset({\"a\": (\"x\", [10, 20, 30])}, coords={\"x\": [0, 1, 2]})\n+        expected_with_coords = xr.merge([ds_with_coords, da_with_coords])\n+        actual_with_coords = ds_with_coords.merge(da_with_coords)\n+        assert_identical(actual_with_coords, expected_with_coords)\n         ds1 = xr.Dataset({\"x\": 0})\n         ds2 = xr.Dataset({\"x\": (\"y\", [0, 0])})\n         actual = ds1.merge(ds2)\n",
  "pydata__xarray-4075": "",
  "pydata__xarray-4356": "",
  "pydata__xarray-4629": "diff --git a/xarray/tests/test_merge.py b/xarray/tests/test_merge.py\nindex ef48e47..8d153fd 100644\n--- a/xarray/tests/test_merge.py\n+++ b/xarray/tests/test_merge.py\n@@ -109,6 +109,23 @@ class TestMergeFunction:\n             expected.attrs = expected_attrs\n             assert actual.identical(expected)\n \n+    def test_merge_attrs_override_copy(self):\n+        ds1 = xr.Dataset(attrs={\"x\": 0, \"y\": 1})\n+        ds2 = xr.Dataset(attrs={\"x\": 1, \"z\": 2})\n+        ds3 = xr.merge([ds1, ds2], combine_attrs=\"override\")\n+\n+        # Modify ds3 attrs and check ds1 remains unaffected\n+        ds3.attrs[\"x\"] = 3\n+        ds3.attrs[\"y\"] = 4\n+        assert ds1.attrs[\"x\"] == 0\n+        assert ds1.attrs[\"y\"] == 1\n+\n+        # Further modify ds3 and ensure ds2 is unaffected\n+        ds3.attrs[\"z\"] = 5\n+        assert \"z\" not in ds1.attrs\n+        assert \"z\" in ds2.attrs\n+        assert ds2.attrs[\"z\"] == 2\n+\n     def test_merge_dicts_simple(self):\n         actual = xr.merge([{\"foo\": 0}, {\"bar\": \"one\"}, {\"baz\": 3.5}])\n         expected = xr.Dataset({\"foo\": 0, \"bar\": \"one\", \"baz\": 3.5})\n",
  "pydata__xarray-4687": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex 636c1f4..a6ddd2c 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1921,6 +1921,20 @@ def test_where() -> None:\n     expected = xr.DataArray([1, 0], dims=\"x\")\n     assert_identical(expected, actual)\n \n+def test_where_attrs() -> None:\n+    # Test that attributes are preserved with keep_attrs=True\n+    cond = xr.DataArray([True, False], dims=\"x\", attrs={\"attr\": \"cond\"})\n+    x = xr.DataArray([1, 1], dims=\"x\", attrs={\"attr\": \"x\"})\n+    y = xr.DataArray([0, 0], dims=\"x\", attrs={\"attr\": \"y\"})\n+    actual = xr.where(cond, x, y, keep_attrs=True)\n+    expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n+    assert_identical(expected, actual)\n+\n+    # Test that attributes are not preserved by default\n+    actual_no_attrs = xr.where(cond, x, y)\n+    expected_no_attrs = xr.DataArray([1, 0], dims=\"x\")\n+    assert_identical(expected_no_attrs, actual_no_attrs)\n+\n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n @pytest.mark.parametrize(\"use_datetime\", [True, False])\n",
  "pydata__xarray-4695": "",
  "pydata__xarray-4966": "diff --git a/xarray/tests/test_coding.py b/xarray/tests/test_coding.py\nindex 2dbb0b4..f47c37c 100644\n--- a/xarray/tests/test_coding.py\n+++ b/xarray/tests/test_coding.py\n@@ -9,10 +9,7 @@ from xarray.coding import variables\n from xarray.conventions import decode_cf_variable, encode_cf_variable\n \n from . import assert_allclose, assert_equal, assert_identical, requires_dask\n-\n-with suppress(ImportError):\n-    import dask.array as da\n-\n+import numpy as np\n \n def test_CFMaskCoder_decode():\n     original = xr.Variable((\"x\",), [0, -1, 1], {\"_FillValue\": -1})\n",
  "pydata__xarray-6461": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f0b426a..7edcd01 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -1927,6 +1927,12 @@ def test_where_attrs() -> None:\n     actual = xr.where(cond, x, y, keep_attrs=True)\n     expected = xr.DataArray([1, 0], dims=\"x\", attrs={\"attr\": \"x\"})\n     assert_identical(expected, actual)\n+def test_where_with_scalar_and_keep_attrs_true() -> None:\n+    cond = xr.DataArray([True, False, True], dims=\"x\")\n+    # Test where scalar second argument with keep_attrs=True\n+    actual = xr.where(cond, 1, 0, keep_attrs=True)\n+    expected = xr.DataArray([1, 0, 1], dims=\"x\")\n+    assert_identical(expected, actual)\n \n \n @pytest.mark.parametrize(\"use_dask\", [True, False])\n",
  "pydata__xarray-6599": "diff --git a/xarray/tests/test_computation.py b/xarray/tests/test_computation.py\nindex f1ec005..c0f6173 100644\n--- a/xarray/tests/test_computation.py\n+++ b/xarray/tests/test_computation.py\n@@ -2000,6 +2000,14 @@ def test_where_attrs() -> None:\n             xr.Dataset({\"a\": (\"x\", [1, 2, 3]), \"b\": (\"y\", [3, 4, 5])}),\n             id=\"dataset-dataset\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n         pytest.param(\n             xr.DataArray(pd.date_range(\"1970-01-01\", freq=\"s\", periods=3), dims=\"x\"),\n             xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n@@ -2010,6 +2018,14 @@ def test_where_attrs() -> None:\n             ),\n             id=\"datetime\",\n         ),\n+        pytest.param(\n+            xr.DataArray(\n+                np.array([1000, 2000, 3000], dtype=\"timedelta64[ns]\"), dims=\"x\"\n+            ),\n+            xr.DataArray([0, 1], dims=\"degree\", coords={\"degree\": [0, 1]}),\n+            xr.DataArray([1000.0, 2000.0, 3000.0], dims=\"x\"),\n+            id=\"timedelta\",\n+        ),\n     ],\n )\n def test_polyval(\n",
  "pydata__xarray-6721": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex cab9007..a6595ed 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -221,7 +221,19 @@ class InaccessibleVariableDataStore(backends.InMemoryDataStore):\n \n \n class TestDataset:\n-    def test_repr(self) -> None:\n+    def test_chunks_attribute_does_not_load_data(self) -> None:\n+        # Test that accessing the `chunks` attribute on a zarr-backed dataset\n+        # does not load data into memory. This is a regression test for \n+        # the reported issue.\n+        store = InaccessibleVariableDataStore()\n+        create_test_data().dump_to_store(store)\n+        ds = open_dataset(store)\n+\n+        # Access the chunks, which should not raise an error or cause data to be loaded\n+        try:\n+            chunks = ds.chunks\n+        except UnexpectedDataAccess:\n+            self.fail(\"Accessing `chunks` unexpectedly loaded data into memory.\")\n         data = create_test_data(seed=123)\n         data.attrs[\"foo\"] = \"bar\"\n         # need to insert str dtype at runtime to handle different endianness\n",
  "pydata__xarray-6744": "",
  "pydata__xarray-7233": "",
  "pydata__xarray-7393": "diff --git a/xarray/tests/test_indexes.py b/xarray/tests/test_indexes.py\nindex fa8bd84..7d3e183 100644\n--- a/xarray/tests/test_indexes.py\n+++ b/xarray/tests/test_indexes.py\n@@ -688,12 +688,34 @@ def test_safe_cast_to_index_cftimeindex():\n         assert isinstance(actual, type(expected))\n \n \n-# Test that datetime.datetime objects are never used in a CFTimeIndex\n-@requires_cftime\n-def test_safe_cast_to_index_datetime_datetime():\n-    dates = [datetime(1, 1, day) for day in range(1, 20)]\n+import pytest\n+import numpy as np\n+import xarray as xr\n \n-    expected = pd.Index(dates)\n-    actual = safe_cast_to_index(np.array(dates))\n-    assert_array_equal(expected, actual)\n-    assert isinstance(actual, pd.Index)\n+@pytest.mark.parametrize(\"dtype\", [\"int32\", \"float32\"])\n+def test_restore_dtype_on_multiindexes(dtype: str) -> None:\n+    foo = xr.Dataset(coords={\"bar\": (\"bar\", np.array([0, 1], dtype=dtype))})\n+    foo = foo.stack(baz=(\"bar\",))\n+    assert str(foo[\"bar\"].values.dtype) == dtype\n+\n+def test_stack_preserve_dtype_int32() -> None:\n+    ds = xr.Dataset(coords={'a': np.array([0], dtype='int32')})\n+    stacked_ds = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked_ds['a'].values.dtype\n+\n+def test_stack_preserve_dtype_float32() -> None:\n+    ds = xr.Dataset(coords={'a': np.array([0.0], dtype='float32')})\n+    stacked_ds = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked_ds['a'].values.dtype\n+\n+def test_stack_preserve_dtype_int16() -> None:\n+    ds = xr.Dataset(coords={'a': np.array([0], dtype='int16')})\n+    stacked_ds = ds.stack(b=('a',))\n+    assert ds['a'].values.dtype == stacked_ds['a'].values.dtype\n+\n+def test_stack_no_change_on_dtypes() -> None:\n+    ds = xr.Dataset(coords={'a': np.array([1, 2], dtype='int32'), \n+                            'b': np.array([3.0, 4.0], dtype='float32')})\n+    stacked_ds = ds.stack(c=('a', 'b'))\n+    assert ds['a'].values.dtype == stacked_ds['a'].values.dtype\n+    assert ds['b'].values.dtype == stacked_ds['b'].values.dtype\n",
  "pylint-dev__pylint-4970": "diff --git a/tests/checkers/unittest_similar.py b/tests/checkers/unittest_similar.py\nindex 97cd4d0..b41e62b 100644\n--- a/tests/checkers/unittest_similar.py\n+++ b/tests/checkers/unittest_similar.py\n@@ -494,6 +494,38 @@ def test_get_map_data() -> None:\n         # The map bit, can you tell? ;)\n         data.extend(sim.get_map_data())\n \n+from io import StringIO\n+from contextlib import redirect_stdout\n+import pytest\n+\n+def test_set_duplicate_lines_to_zero() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([\"--duplicates=0\", SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n+\n+def test_set_duplicate_lines_to_positive() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([\"--duplicates=5\", SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 0\n+    assert \"Some duplicated lines detected\" in output.getvalue()\n+\n+def test_ignore_comments_with_zero_duplicates() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([\"--duplicates=0\", \"--ignore-comments\", SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n+\n+def test_ignore_docstring_with_zero_duplicates() -> None:\n+    output = StringIO()\n+    with redirect_stdout(output), pytest.raises(SystemExit) as ex:\n+        similar.Run([\"--duplicates=0\", \"--ignore-docstrings\", SIMILAR1, SIMILAR2])\n+    assert ex.value.code == 0\n+    assert output.getvalue() == \"\"\n+\n     assert len(expected_linelists) == len(data)\n     for source_fname, expected_lines, lineset_obj in zip(\n         source_streams, expected_linelists, data\n@@ -501,4 +533,4 @@ def test_get_map_data() -> None:\n         assert source_fname == lineset_obj.name\n         # There doesn't seem to be a faster way of doing this, yet.\n         lines = (linespec.text for linespec in lineset_obj.stripped_lines)\n-        assert tuple(expected_lines) == tuple(lines)\n+        assert tuple(expected_lines) == tuple(lines)\n",
  "pylint-dev__pylint-6386": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex a0b1b64..baee03a 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -94,9 +94,25 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from pylint.lint import Run\n+from pytest import CaptureFixture\n+from mypy import EMPTY_MODULE\n+\n+def test_long_verbose(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that we correctly handle the --verbose flag.\"\"\"\n+    Run([str(EMPTY_MODULE), \"--verbose\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"Using config file\" in output.err\n+\n+def test_short_verbose_argument(capsys: CaptureFixture) -> None:\n+    \"\"\"Check that the -v flag does not expect an argument.\"\"\"\n+    Run([str(EMPTY_MODULE), \"-v\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"argument --verbose/-v: expected one argument\" not in output.err\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--py-version=the-newest\"], exit=False)\n     output = capsys.readouterr()\n-    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n+    assert \"the-newest has an invalid format, should be a version string.\" in output.err\n",
  "pylint-dev__pylint-6528": "",
  "pylint-dev__pylint-6903": "",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..39063b3 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1324,6 +1324,11 @@ class TestRunTC:\n                 if not os.path.basename(path) == \"regrtest_data\"\n             ]\n             with _test_cwd():\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\", \"ignored_subdirectory\"))\n+                self._runtest(\n+                    [\".\", \"--recursive=y\", \"--ignore-paths=^ignored_subdirectory/.*\"],\n+                    code=0,\n+                )\n                 os.chdir(join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"))\n                 self._runtest(\n                     [\".\", \"--recursive=y\"],\n",
  "pylint-dev__pylint-7277": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex 9f95f7b..f25b28d 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -765,6 +765,24 @@ a.py:1:4: E0001: Parsing failed: 'invalid syntax (<unknown>, line 1)' (syntax-er\n                 modify_sys_path()\n             assert sys.path == paths[1:]\n \n+            paths = [\"\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], f\"Failed with sys.path={sys.path}\"\n+\n+            paths = [\".\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths[1:], f\"Failed with sys.path={sys.path}\"\n+\n+            paths = [\"/do_not_remove\", *default_paths]\n+            sys.path = copy(paths)\n+            with _test_environ_pythonpath():\n+                modify_sys_path()\n+            assert sys.path == paths, f\"Unexpected removal with sys.path={sys.path}\"\n+\n             paths = [cwd, \"/custom_pythonpath\", *default_paths]\n             sys.path = copy(paths)\n             with _test_environ_pythonpath(\"/custom_pythonpath\"):\n",
  "pytest-dev__pytest-10051": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex 26c4c15..dd37da3 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -160,6 +160,43 @@ def logging_during_setup_and_teardown(caplog):\n     assert [x.message for x in caplog.get_records(\"teardown\")] == [\"a_teardown_log\"]\n \n \n+import logging\n+...\n+\n+def test_caplog_clear_consistency(caplog):\n+    \"\"\"Test consistency of caplog.get_records and caplog.records after clearing.\"\"\"\n+    def verify_consistency():\n+        assert caplog.get_records(\"call\") == caplog.records\n+\n+    # Initial state: logs should be consistent and empty\n+    verify_consistency()\n+    \n+    # Log a warning and verify consistency\n+    logging.warning(\"test_warning\")\n+    verify_consistency()\n+\n+    # Clear logs and verify consistency\n+    caplog.clear()\n+    verify_consistency()\n+    assert caplog.get_records(\"call\") == []\n+    assert caplog.records == []\n+\n+    # Log again and verify consistency\n+    logging.warning(\"test_warning_after_clear\")\n+    verify_consistency()\n+    assert caplog.records\n+    assert [x.message for x in caplog.records] == [\"test_warning_after_clear\"]\n+\n+def test_caplog_clear_partial_consistency(caplog, logging_during_setup_and_teardown):\n+    \"\"\"Test partial clearing as affected by caplog.clear\"\"\"\n+    logger.info(\"a_call_log\")\n+    caplog.clear()  # Clear only call stage\n+    assert caplog.get_records(\"call\") == []\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+    logger.info(\"another_call_log\")\n+    assert [x.message for x in caplog.get_records(\"call\")] == [\"another_call_log\"]\n+    assert [x.message for x in caplog.get_records(\"setup\")] == [\"a_setup_log\"]\n+\n def test_caplog_captures_for_all_stages(caplog, logging_during_setup_and_teardown):\n     assert not caplog.records\n     assert not caplog.get_records(\"call\")\n",
  "pytest-dev__pytest-10081": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 561df7f..1f27361 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -1274,6 +1274,37 @@ def test_pdb_teardown_skipped(\n     assert tracked == []\n \n \n+def test_pdb_teardown_not_executed_for_skipped_classes(pytester: Pytester, monkeypatch: MonkeyPatch) -> None:\n+    \"\"\"Ensure tearDown() is not executed for classes skipped with @unittest.skip when using --pdb.\"\"\"\n+    tracked: List[str] = []\n+    monkeypatch.setattr(pytest, \"track_pdb_teardown_skipped\", tracked, raising=False)\n+\n+    # Create a test case class that is skipped.\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+        import pytest\n+\n+        @unittest.skip(\"class skipped\")\n+        class SkippedTestCase(unittest.TestCase):\n+            def setUp(self):\n+                pytest.track_pdb_teardown_skipped.append(\"setUp:\" + self.id())\n+\n+            def tearDown(self):\n+                pytest.track_pdb_teardown_skipped.append(\"tearDown:\" + self.id())\n+\n+            def test_skipped_method(self):\n+                pass\n+    \"\"\"\n+    )\n+    # Run pytest with the --pdb option.\n+    result = pytester.runpytest_inprocess(\"--pdb\")\n+    # Check that the test was indeed skipped.\n+    result.stdout.fnmatch_lines(\"* 1 skipped in *\")\n+    # Verify that neither setUp nor tearDown was executed by ensuring tracked is empty.\n+    assert tracked == []\n+\n+\n def test_async_support(pytester: Pytester) -> None:\n     pytest.importorskip(\"unittest.async_case\")\n \n",
  "pytest-dev__pytest-5262": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 1f092b0..633add4 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -1042,6 +1042,30 @@ class TestFDCapture(object):\n             os.write(1, b\"world\")\n             sys.stdout.write(\"qlwkej\")\n             assert not cap.snap()\n+\n+    def test_capfd_sys_stdout_mode(self, capfd):\n+        import sys\n+        capfd.readouterr()  # Clear any existing output\n+        assert \"b\" not in sys.stdout.mode  # Check that `b` is not in sys.stdout.mode\n+\n+    def test_encodedfile_write_text(self):\n+        from _pytest.capture import EncodedFile\n+        import io\n+        buffer = io.StringIO()\n+        encoded_file = EncodedFile(buffer, encoding='utf-8')\n+        encoded_file.write(\"This is a test.\")\n+        encoded_file.buffer.seek(0)\n+        assert encoded_file.buffer.read() == \"This is a test.\"\n+\n+    def test_encodedfile_write_bytes_error(self):\n+        from _pytest.capture import EncodedFile\n+        import io\n+        buffer = io.StringIO()\n+        encoded_file = EncodedFile(buffer, encoding='utf-8')\n+        try:\n+            encoded_file.write(b\"This should fail.\")\n+        except TypeError as e:\n+            assert str(e) == \"write() argument must be str, not bytes\"\n             cap.resume()\n             os.write(1, b\"but now\")\n             sys.stdout.write(\" yes\\n\")\n",
  "pytest-dev__pytest-5631": "diff --git a/testing/python/integration.py b/testing/python/integration.py\nindex 044a31a..f3b2ad0 100644\n--- a/testing/python/integration.py\n+++ b/testing/python/integration.py\n@@ -178,6 +178,28 @@ class TestMockDecoration:\n         reprec = testdir.inline_run()\n         reprec.assertoutcome(passed=2)\n \n+    def test_mock_patch_with_array(self, testdir):\n+        testdir.makepyfile(\n+            dummy_module=\"\"\"\n+            import numpy as np\n+            \n+            class MockClass:\n+                MY_ARRAY = np.array([-5.5, 3.0])\n+            \"\"\",\n+            test_case=\"\"\"\n+            from unittest.mock import patch\n+            import dummy_module\n+            import numpy as np\n+\n+            class TestMockArray:\n+                @patch(\"dummy_module.MockClass.MY_ARRAY\", new=np.array([1.0, 2.0, 3.0]))\n+                def test_array_patch(self):\n+                    assert np.all(dummy_module.MockClass.MY_ARRAY == np.array([1.0, 2.0, 3.0]))\n+            \"\"\"\n+        )\n+        reprec = testdir.inline_run()\n+        reprec.assertoutcome(passed=1)\n+\n     def test_mock(self, testdir):\n         pytest.importorskip(\"mock\", \"1.0.1\")\n         testdir.makepyfile(\n",
  "pytest-dev__pytest-5809": "diff --git a/testing/test_pastebin.py b/testing/test_pastebin.py\nindex c6a6cae..d492a1d 100644\n--- a/testing/test_pastebin.py\n+++ b/testing/test_pastebin.py\n@@ -116,9 +116,29 @@ class TestPaste(object):\n             monkeypatch.setattr(urllib, \"urlopen\", mocked)\n         else:\n             import urllib.request\n+import pytest\n+import sys\n+import urllib.request\n+\n+@pytest.fixture\n+def pastebin():\n+    from _pytest.pastebin import create_new_paste\n+    return create_new_paste\n+\n+@pytest.fixture\n+def mocked_urlopen(monkeypatch):\n+    calls = []\n+\n+    def mocked(url, data=None):\n+        calls.append((url, data))\n+        class MockResponse:\n+            def read(self):\n+                # Simulate a typical response from bpaste.net\n+                return '<html><a href=\"/raw/dummy_id\">paste link</a></html>'.encode('utf-8')\n+        return MockResponse()\n \n-            monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n-        return calls\n+    monkeypatch.setattr(urllib.request, \"urlopen\", mocked)\n+    return calls\n \n     def test_create_new_paste(self, pastebin, mocked_urlopen):\n         result = pastebin.create_new_paste(b\"full-paste-contents\")\n@@ -130,4 +150,4 @@ class TestPaste(object):\n         assert url == \"https://bpaste.net\"\n         assert \"lexer=%s\" % lexer in data.decode()\n         assert \"code=full-paste-contents\" in data.decode()\n-        assert \"expiry=1week\" in data.decode()\n+        assert \"expiry=1week\" in data.decode()\n",
  "pytest-dev__pytest-6202": "",
  "pytest-dev__pytest-7205": "diff --git a/testing/test_setuponly.py b/testing/test_setuponly.py\nindex 8211d39..e5a789a 100644\n--- a/testing/test_setuponly.py\n+++ b/testing/test_setuponly.py\n@@ -1,3 +1,4 @@\n+\n import pytest\n from _pytest.config import ExitCode\n \n@@ -200,8 +201,21 @@ def test_show_fixtures_with_parameter_ids_function(testdir, mode):\n \n     result.stdout.fnmatch_lines([\"*SETUP    F foobar?FOO?\", \"*SETUP    F foobar?BAR?\"])\n \n+def test_show_fixture_action_with_bytes(testdir):\n+    # Issue 7126, BytesWarning when using --setup-show with bytes parameter\n+    test_file = testdir.makepyfile(\n+        \"\"\"\n+        import pytest\n \n-def test_dynamic_fixture_request(testdir):\n+        @pytest.mark.parametrize('data', [b'Hello World'])\n+        def test_data(data):\n+            pass\n+        \"\"\"\n+    )\n+    result = testdir.run(\n+        sys.executable, \"-bb\", \"-m\", \"pytest\", \"--setup-show\", str(test_file)\n+    )\n+    assert result.ret == 0\n     p = testdir.makepyfile(\n         \"\"\"\n         import pytest\n",
  "pytest-dev__pytest-7236": "",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..f3b1d66 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -607,6 +607,32 @@ class TestSkip:\n         result = testdir.runpytest(\"-rs\")\n         result.stdout.fnmatch_lines([\"*unconditional skip*\", \"*1 skipped*\"])\n \n+    def test_xfail_run_with_skip_mark_and_reason(self, testdir):\n+        \"\"\"Check skip mark location with reason under --runxfail option.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skip(reason=\"This test is skipped\")\n+            def test_skip_with_reason():\n+                pass\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"*test_skip_with_reason.py:*: This test is skipped\", \"*1 skipped*\"])\n+\n+    def test_xfail_run_with_skip_if(self, testdir):\n+        \"\"\"Check conditional skip location under --runxfail option.\"\"\"\n+        testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            @pytest.mark.skipif(True, reason=\"Conditionally skipped\")\n+            def test_skip_if():\n+                pass\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(\"-rs\", \"--runxfail\")\n+        result.stdout.fnmatch_lines([\"*test_skip_if.py:*: Conditionally skipped\", \"*1 skipped*\"])\n+\n     def test_skip_with_reason(self, testdir):\n         testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-7490": "",
  "pytest-dev__pytest-7521": "diff --git a/testing/test_capture.py b/testing/test_capture.py\nindex 9d70acf..b906f8d 100644\n--- a/testing/test_capture.py\n+++ b/testing/test_capture.py\n@@ -513,8 +513,17 @@ class TestCaptureFixture:\n             \"\"\"\n         )\n         reprec.assertoutcome(passed=1)\n-\n-    def test_capfdbinary(self, testdir):\n+    @pytest.mark.parametrize(\"nl\", (\"\\n\", \"\\r\\n\", \"\\r\"))\n+    def test_cafd_preserves_newlines(self, testdir, nl):\n+        reprec = testdir.inline_runsource(\n+            f\"\"\"\n+            def test_newlines(capfd):\n+                print(\"test\", end={repr(nl)})\n+                out, err = capfd.readouterr()\n+                assert out.endswith({repr(nl)})\n+            \"\"\"\n+        )\n+        reprec.assertoutcome(passed=1)\n         reprec = testdir.inline_runsource(\n             \"\"\"\\\n             def test_hello(capfdbinary):\n",
  "pytest-dev__pytest-7571": "diff --git a/testing/logging/test_fixture.py b/testing/logging/test_fixture.py\nindex a9649e4..978ee52 100644\n--- a/testing/logging/test_fixture.py\n+++ b/testing/logging/test_fixture.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import pytest\n@@ -50,6 +51,27 @@ def test_change_level_undo(testdir):\n     result.stdout.no_fnmatch_line(\"*log from test2*\")\n \n \n+def test_change_handler_level_restore(testdir):\n+    \"\"\"Ensure that 'set_level' is undone after the end of the test (handler level).\"\"\"\n+    testdir.makepyfile(\n+        \"\"\"\n+        import logging\n+\n+        def test_set_level(caplog):\n+            initial_level = caplog.handler.level\n+            assert caplog.handler.level == initial_level  # Verify initial state\n+            caplog.set_level(logging.WARNING)\n+            assert caplog.handler.level == logging.WARNING\n+\n+        def test_restore_level(caplog):\n+            # Ensure caplog level is restored to its initial state after the test\n+            assert caplog.handler.level == 0  # Assuming 0 is the default or initial level\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.assert_outcomes(passed=2)\n+\n+\n def test_with_statement(caplog):\n     with caplog.at_level(logging.INFO):\n         logger.debug(\"handler DEBUG level\")\n",
  "pytest-dev__pytest-7982": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex b774a67..442e067 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -1,3 +1,4 @@\n+\n import os\n import pprint\n import sys\n@@ -9,7 +10,7 @@ from _pytest.config import ExitCode\n from _pytest.main import _in_venv\n from _pytest.main import Session\n from _pytest.pathlib import symlink_or_skip\n-from _pytest.pytester import Testdir\n+from _pytest.pytester import Testdir, Pytester\n \n \n class TestCollector:\n@@ -1178,6 +1179,17 @@ def test_collect_symlink_out_of_tree(testdir):\n     assert result.ret == 0\n \n \n+def test_symlinked_directory_collection(pytester: Pytester) -> None:\n+    \"\"\"Ensure that a symlinked directory containing tests is collected.\"\"\"\n+    dir = pytester.mkdir(\"real_dir\")\n+    dir.joinpath(\"test_in_real_dir.py\").write_text(\"def test_real(): pass\")\n+    symlink_dir = pytester.path.joinpath(\"symlink_to_real_dir\")\n+    symlink_dir.symlink_to(dir)\n+\n+    result = pytester.runpytest()\n+    result.assert_outcomes(passed=2)  # Since both the original and symlinked directory should be collected\n+\n+\n def test_collectignore_via_conftest(testdir):\n     \"\"\"collect_ignore in parent conftest skips importing child (issue #4592).\"\"\"\n     tests = testdir.mkpydir(\"tests\")\n",
  "pytest-dev__pytest-8399": "diff --git a/testing/test_unittest.py b/testing/test_unittest.py\nindex 2c720b0..e88d2cc 100644\n--- a/testing/test_unittest.py\n+++ b/testing/test_unittest.py\n@@ -301,8 +301,36 @@ def test_setup_setUpClass(pytester: Pytester) -> None:\n     reprec = pytester.inline_run(testpath)\n     reprec.assertoutcome(passed=3)\n \n+def test_unittest_fixtures_visibility(pytester: Pytester) -> None:\n+    # Test to verify that unittest fixtures are hidden by default and shown in verbose mode.\n+    pytester.makepyfile(\n+        \"\"\"\n+        import unittest\n+\n+        class MyTestCase(unittest.TestCase):\n+            @classmethod\n+            def setUpClass(cls):\n+                pass\n+\n+            @classmethod\n+            def tearDownClass(cls):\n+                pass\n+\n+            def test_func(self):\n+                pass\n+        \"\"\"\n+    )\n+\n+    # Check non-verbose fixture list\n+    result = pytester.runpytest(\"--fixtures\")\n+    result.stdout.no_fnmatch_line(\"*unittest_setUpClass_fixture_MyTestCase*\")\n+    result.stdout.no_fnmatch_line(\"*unittest_tearDownClass_fixture_MyTestCase*\")\n \n-def test_setup_class(pytester: Pytester) -> None:\n+    # Check verbose fixture list\n+    result = pytester.runpytest(\"--fixtures\", \"-v\")\n+    result.stdout.fnmatch_lines(\n+        [\"*unittest_setUpClass_fixture_MyTestCase*\", \"*unittest_tearDownClass_fixture_MyTestCase*\"]\n+    )\n     testpath = pytester.makepyfile(\n         \"\"\"\n         import unittest\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..12fd0aa 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -597,8 +597,38 @@ def test_ridgecv_store_cv_values():\n     r.fit(x, y)\n     assert_equal(r.cv_values_.shape, (n_samples, n_responses, n_alphas))\n \n+from sklearn.linear_model import RidgeClassifierCV\n+import numpy as np\n+from numpy.testing import assert_equal\n+\n+def test_ridge_classifier_cv_store_cv_values():\n+    # Test RidgeClassifierCV's store_cv_values parameter.\n+    x = np.array([[-1.0, -1.0], [-1.0, 0.0], [-0.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+    n_samples = x.shape[0]\n+    alphas = [1e-1, 1e0, 1e1]\n+    n_alphas = len(alphas)\n+\n+    # Initialize with store_cv_values=True\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=True)\n \n-def test_ridgecv_sample_weight():\n+    # Test when y has shape (n_samples, )\n+    r.fit(x, y)\n+    assert_equal(r.cv_values_.shape, (n_samples, n_alphas))\n+\n+    # Test when y has shape (n_samples, n_targets)\n+    y_multi = np.array([[1, 1, 1, -1, -1],\n+                        [1, -1, 1, -1, 1],\n+                        [-1, -1, 1, -1, -1]]).transpose()\n+    n_targets = y_multi.shape[1]\n+    r.fit(x, y_multi)\n+    assert_equal(r.cv_values_.shape, (n_samples, n_targets, n_alphas))\n+\n+    # Ensure store_cv_values warning/assertion does not occur\n+    r = RidgeClassifierCV(alphas=alphas, store_cv_values=False)\n+    r.fit(x, y)\n+    assert not hasattr(r, 'cv_values_')\n     rng = np.random.RandomState(0)\n     alphas = (0.1, 1.0, 10.0)\n \n",
  "scikit-learn__scikit-learn-10844": "diff --git a/sklearn/metrics/cluster/tests/test_supervised.py b/sklearn/metrics/cluster/tests/test_supervised.py\nindex f5edf7a..deb679e 100644\n--- a/sklearn/metrics/cluster/tests/test_supervised.py\n+++ b/sklearn/metrics/cluster/tests/test_supervised.py\n@@ -184,7 +184,20 @@ def test_int_overflow_mutual_info_score():\n     assert_all_finite(mutual_info_score(x.ravel(), y.ravel()))\n \n \n-def test_entropy():\n+import numpy as np\n+from sklearn.metrics.cluster import fowlkes_mallows_score\n+from sklearn.utils.testing import assert_all_finite\n+\n+def test_int_overflow_fowlkes_mallows_score():\n+    # Large input to test integer overflow in fowlkes_mallows_score\n+    x = np.array([1] * (52632 + 2529) + [2] * (14660 + 793) + [3] * (3271 +\n+                 204) + [4] * (814 + 39) + [5] * (316 + 20))\n+    y = np.array([0] * 52632 + [1] * 2529 + [0] * 14660 + [1] * 793 +\n+                 [0] * 3271 + [1] * 204 + [0] * 814 + [1] * 39 + [0] * 316 +\n+                 [1] * 20)\n+\n+    score = fowlkes_mallows_score(x.ravel(), y.ravel())\n+    assert_all_finite(score)\n     ent = entropy([0, 0, 42.])\n     assert_almost_equal(ent, 0.6365141, 5)\n     assert_almost_equal(entropy([]), 1)\n",
  "scikit-learn__scikit-learn-10908": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 0a2b603..d0b1d2a 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -538,8 +538,23 @@ def test_hashing_vectorizer():\n     for i in range(X.shape[0]):\n         assert_almost_equal(np.linalg.norm(X[0].data, 1), 1.0)\n \n-\n-def test_feature_names():\n+def test_countvectorizer_with_custom_vocabulary_get_feature_names():\n+    # Test CountVectorizer's get_feature_names with a custom vocabulary\n+    vocab = ['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n+    vectorizer = CountVectorizer(vocabulary=vocab)\n+    \n+    # Check that get_feature_names returns the vocabulary in sorted order\n+    feature_names = vectorizer.get_feature_names()\n+    expected_feature_names = sorted(vocab)\n+    assert_array_equal(feature_names, expected_feature_names)\n+\n+    # There should be no NotFittedError since the vocabulary is provided\n+    transformed = vectorizer.transform([\n+        'This is a test document.',\n+        'Second document here.',\n+        'And a third document.'\n+    ])\n+    assert_equal(transformed.shape, (3, len(vocab)))\n     cv = CountVectorizer(max_df=0.5)\n \n     # test for Value error on unfitted/empty vocabulary\n",
  "scikit-learn__scikit-learn-11310": "diff --git a/sklearn/model_selection/tests/test_search.py b/sklearn/model_selection/tests/test_search.py\nindex 0b1d5f9..89c24dd 100644\n--- a/sklearn/model_selection/tests/test_search.py\n+++ b/sklearn/model_selection/tests/test_search.py\n@@ -1167,11 +1167,31 @@ def test_search_cv_timing():\n             assert_true(np.all(search.cv_results_[key] >= 0))\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n+        # Test for refit_time_ attribute\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n+\n+        # Timing refit separately to verify refit_time_\n+        start_refit = time.time()\n+        search.refit_time_ = start_refit - time.time()\n+        assert_true(search.refit_time_ < 0)\n+\n         for key in ['mean_score_time', 'std_score_time']:\n             assert_true(search.cv_results_[key][1] >= 0)\n             assert_true(search.cv_results_[key][0] == 0.0)\n             assert_true(np.all(search.cv_results_[key] < 1))\n \n+        # Test for refit_time_ attribute\n+        assert_true(hasattr(search, \"refit_time_\"))\n+        assert_true(isinstance(search.refit_time_, float))\n+        assert_greater_equal(search.refit_time_, 0)\n+\n+        # Timing refit separately to verify refit_time_\n+        start_refit = time.time()\n+        search.refit_time_ = start_refit - time.time()\n+        assert_true(search.refit_time_ < 0)\n+\n \n def test_grid_search_correct_score_results():\n     # test that correct scores are used\n",
  "scikit-learn__scikit-learn-11578": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex daa75d1..9b99172 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -491,6 +491,39 @@ def test_logistic_cv():\n     scores = np.asarray(list(lr_cv.scores_.values()))\n     assert_array_equal(scores.shape, (1, 3, 1))\n \n+from sklearn.metrics import log_loss\n+\n+def test_logistic_regressioncv_multinomial_vs_ovr():\n+    # Test that LogisticRegressionCV with multi_class='multinomial'\n+    # uses softmax probabilities instead of OvR probabilities.\n+    \n+    X, y = make_classification(n_samples=100, n_features=20, n_classes=3, \n+                               n_informative=10, random_state=42)\n+\n+    lr_multinom = LogisticRegressionCV(cv=3, multi_class='multinomial', solver='lbfgs')\n+    lr_multinom.fit(X, y)\n+\n+    lr_ovr = LogisticRegressionCV(cv=3, multi_class='ovr', solver='lbfgs')\n+    lr_ovr.fit(X, y)\n+\n+    # Get predicted probabilities\n+    proba_multinom = lr_multinom.predict_proba(X)\n+    proba_ovr = lr_ovr.predict_proba(X)\n+\n+    # Check if the probabilities generated by the multinomial approach do not\n+    # match those generated by the OvR approach\n+    assert not np.allclose(proba_multinom, proba_ovr), (\n+        \"Multinomial probabilities should not match OvR probabilities\")\n+\n+    # Validate log loss scorer reflects the correct approach\n+    scorer = get_scorer('neg_log_loss')\n+\n+    score_multinom = scorer(lr_multinom, X, y)\n+    score_ovr = scorer(lr_ovr, X, y)\n+\n+    # Ensure the log loss scores with the correct calculation are not identical\n+    assert score_multinom != score_ovr, (\n+        \"Scores using multinomial and OvR should not be identical\")\n \n def test_multinomial_logistic_regression_string_inputs():\n     # Test with string labels for LogisticRegression(CV)\n",
  "scikit-learn__scikit-learn-12585": "diff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\nindex 4752f9c..87e3dba 100644\n--- a/sklearn/tests/test_base.py\n+++ b/sklearn/tests/test_base.py\n@@ -154,6 +154,23 @@ def test_clone_nan():\n     assert clf.empty is clf2.empty\n \n \n+from sklearn.base import clone\n+import pytest\n+\n+def test_clone_estimator_types():\n+    # Check that clone works for parameters that are types rather than instances\n+    class MyEstimator:\n+        def __init__(self, empty=None):\n+            self.empty = empty\n+        \n+        def get_params(self, deep=True):\n+            return {'empty': self.empty}\n+\n+    clf = MyEstimator(empty=MyEstimator)\n+    clf2 = clone(clf)\n+\n+    assert clf.empty is clf2.empty\n+\n def test_clone_sparse_matrices():\n     sparse_matrix_classes = [\n         getattr(sp, name)\n",
  "scikit-learn__scikit-learn-12973": "diff --git a/sklearn/linear_model/tests/test_least_angle.py b/sklearn/linear_model/tests/test_least_angle.py\nindex 790b864..b506a00 100644\n--- a/sklearn/linear_model/tests/test_least_angle.py\n+++ b/sklearn/linear_model/tests/test_least_angle.py\n@@ -18,7 +18,8 @@ from sklearn.utils.testing import assert_warns\n from sklearn.utils.testing import TempMemmap\n from sklearn.exceptions import ConvergenceWarning\n from sklearn import linear_model, datasets\n-from sklearn.linear_model.least_angle import _lars_path_residues\n+from sklearn.linear_model.least_angle import _lars_path_residues, LassoLarsIC\n+import numpy as np\n \n diabetes = datasets.load_diabetes()\n X, y = diabetes.data, diabetes.target\n",
  "scikit-learn__scikit-learn-13124": "",
  "scikit-learn__scikit-learn-13135": "diff --git a/sklearn/preprocessing/tests/test_discretization.py b/sklearn/preprocessing/tests/test_discretization.py\nindex a18a1c5..da54404 100644\n--- a/sklearn/preprocessing/tests/test_discretization.py\n+++ b/sklearn/preprocessing/tests/test_discretization.py\n@@ -202,6 +202,19 @@ def test_nonuniform_strategies(strategy, expected_2bins, expected_3bins):\n     Xt = est.fit_transform(X)\n     assert_array_equal(expected_3bins, Xt.ravel())\n \n+@pytest.mark.parametrize(\n+    'strategy, expected_5bins',\n+    [('uniform', [0, 0, 1, 1, 4, 4]),\n+     ('kmeans', [0, 0, 1, 2, 3, 4]),\n+     ('quantile', [0, 1, 2, 3, 4, 4])])\n+def test_nonuniform_strategies_5bins(strategy, expected_5bins):\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+\n+    # Test with 5 bins\n+    est = KBinsDiscretizer(n_bins=5, strategy=strategy, encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert_array_equal(expected_5bins, Xt.ravel())\n+\n \n @pytest.mark.parametrize('strategy', ['uniform', 'kmeans', 'quantile'])\n @pytest.mark.parametrize('encode', ['ordinal', 'onehot', 'onehot-dense'])\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..9066669 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -591,7 +591,28 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n                             max_iter=max_iter, tol=tol)\n \n         # check if fit_predict(X) is equivalent to fit(X).predict(X)\n-        f = copy.deepcopy(g)\n+def test_gaussian_mixture_fit_predict_n_init_discrepancy():\n+    # Test to check whether the discrepancy with n_init > 1 is resolved\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+    \n+    # Ensure the predict method is consistent under multiple fits\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=1)\n+    gm.fit(X)\n+    y_pred1 = gm.predict(X)\n+    gm.fit(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+    \n+    # Test GaussianMixture with different n_init settings\n+    for n_init in [1, 3, 10]:\n+        gm = GaussianMixture(n_components=5, n_init=n_init, random_state=0)\n+        y_pred1 = gm.fit_predict(X)\n+        y_pred2 = gm.predict(X)\n+        assert_array_equal(y_pred1, y_pred2)\n         Y_pred1 = f.fit(X).predict(X)\n         Y_pred2 = g.fit_predict(X)\n         assert_array_equal(Y_pred1, Y_pred2)\n",
  "scikit-learn__scikit-learn-13328": "",
  "scikit-learn__scikit-learn-13439": "",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..f4289c2 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -9,6 +10,8 @@ Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n import pytest\n \n import numpy as np\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n \n from sklearn.utils.testing import assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n",
  "scikit-learn__scikit-learn-13779": "",
  "scikit-learn__scikit-learn-14053": "diff --git a/sklearn/tree/tests/test_export.py b/sklearn/tree/tests/test_export.py\nindex 50eb697..4ad35ed 100644\n--- a/sklearn/tree/tests/test_export.py\n+++ b/sklearn/tree/tests/test_export.py\n@@ -396,6 +396,22 @@ def test_export_text():\n     assert export_text(reg, decimals=1) == expected_report\n     assert export_text(reg, decimals=1, show_weights=True) == expected_report\n \n+    # Test case for issue with a single feature\n+    X_single = [[-2], [-1], [0], [1], [2]]\n+    y_single = [0, 0, 0, 1, 1]\n+    single_feature_tree = DecisionTreeClassifier(max_depth=2, random_state=0)\n+    single_feature_tree.fit(X_single, y_single)\n+\n+    expected_report_single_feature = dedent(\"\"\"\n+    |--- feature_0 <= 0.50\n+    |   |--- class: 0\n+    |--- feature_0 >  0.50\n+    |   |--- class: 1\n+    \"\"\").lstrip()\n+\n+    assert export_text(single_feature_tree) == expected_report_single_feature\n+    assert export_text(single_feature_tree, feature_names=['single_feature']) == expected_report_single_feature.replace('feature_0', 'single_feature')\n+\n \n def test_plot_tree_entropy(pyplot):\n     # mostly smoke tests\n",
  "scikit-learn__scikit-learn-14087": "diff --git a/sklearn/linear_model/tests/test_logistic.py b/sklearn/linear_model/tests/test_logistic.py\nindex 2a87dbf..7dd885b 100644\n--- a/sklearn/linear_model/tests/test_logistic.py\n+++ b/sklearn/linear_model/tests/test_logistic.py\n@@ -1554,7 +1554,43 @@ def test_LogisticRegressionCV_no_refit(multi_class):\n     assert lrcv.coef_.shape == (n_classes, n_features)\n \n \n-def test_LogisticRegressionCV_elasticnet_attribute_shapes():\n+def test_LogisticRegressionCV_no_refit_l2():\n+    # Test LogisticRegressionCV with l2 penalty and refit=False\n+\n+    n_classes = 2\n+    n_features = 10\n+    X, y = make_classification(n_samples=100, n_classes=n_classes,\n+                               n_informative=n_classes, n_features=n_features,\n+                               random_state=1)\n+\n+    Cs = np.logspace(-3, 3, 3)\n+\n+    lrcv = LogisticRegressionCV(penalty='l2', Cs=Cs, solver='liblinear',\n+                                random_state=0, multi_class='ovr', refit=False)\n+    lrcv.fit(X, y)\n+    assert lrcv.C_.shape == (n_classes,)\n+    assert lrcv.coef_.shape == (n_classes, n_features)\n+\n+def test_LogisticRegressionCV_no_refit_multiclass():\n+    # Test LogisticRegressionCV for multiclass problems with refit=False\n+\n+    n_classes = 4\n+    n_features = 15\n+    X, y = make_classification(n_samples=120, n_classes=n_classes,\n+                               n_informative=n_classes, n_features=n_features,\n+                               random_state=42)\n+\n+    Cs = np.logspace(-3, 3, 4)\n+\n+    lrcv = LogisticRegressionCV(Cs=Cs, solver='saga', random_state=0,\n+                                multi_class='multinomial', refit=False)\n+    lrcv.fit(X, y)\n+    assert lrcv.C_.shape == (n_classes,)\n+    assert lrcv.coef_.shape == (n_classes, n_features)\n+\n+    # Ensure no IndexError due to incorrect dimensionality assumptions\n+    assert not np.any(np.isnan(lrcv.coef_))\n+    assert not np.any(np.isinf(lrcv.coef_))\n     # Make sure the shapes of scores_ and coefs_paths_ attributes are correct\n     # when using elasticnet (added one dimension for l1_ratios)\n \n",
  "scikit-learn__scikit-learn-14141": "diff --git a/sklearn/utils/_show_versions.py b/sklearn/utils/_show_versions.py\nindex 72f054a..6ac2ea5 100644\n--- a/sklearn/utils/_show_versions.py\n+++ b/sklearn/utils/_show_versions.py\n@@ -48,6 +48,7 @@ def _get_deps_info():\n         \"Cython\",\n         \"pandas\",\n         \"matplotlib\",\n+        \"joblib\",  # Newly added 'joblib' dependency\n     ]\n \n     def get_version(module):\n",
  "scikit-learn__scikit-learn-14496": "diff --git a/sklearn/cluster/tests/test_optics.py b/sklearn/cluster/tests/test_optics.py\nindex 6c9dac3..dc11ca4 100644\n--- a/sklearn/cluster/tests/test_optics.py\n+++ b/sklearn/cluster/tests/test_optics.py\n@@ -77,6 +77,29 @@ def test_the_extract_xi_labels(ordering, clusters, expected):\n \n     assert_array_equal(labels, expected)\n \n+from sklearn.cluster import OPTICS\n+import numpy as np\n+from sklearn.utils import shuffle\n+from sklearn.utils._testing import assert_array_equal\n+\n+def test_float_min_samples():\n+    # Generate random data\n+    rng = np.random.RandomState(42)\n+    X = rng.rand(100, 2)  # 100 samples, 2 features\n+\n+    # Take data subsets to simulate different dataset sizes\n+    for subset_fraction in [0.1, 0.25, 0.5, 0.75, 1.0]:\n+        n_samples = int(subset_fraction * 100)\n+        data_subset = X[:n_samples]\n+\n+        # Test with different min_samples fractions\n+        for min_samples_fraction in [0.1, 0.2, 0.3]:\n+            clust = OPTICS(min_samples=min_samples_fraction)\n+            try:\n+                clust.fit(data_subset)\n+                print(f\"PASS: min_samples={min_samples_fraction}, n_samples={n_samples}\")\n+            except TypeError:\n+                assert False, f\"TypeError: min_samples={min_samples_fraction}, n_samples={n_samples}\"\n \n def test_extract_xi():\n     # small and easy test (no clusters around other clusters)\n",
  "scikit-learn__scikit-learn-14710": "diff --git a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\nindex 7e8bccd..f125c21 100644\n--- a/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n+++ b/sklearn/ensemble/_hist_gradient_boosting/tests/test_gradient_boosting.py\n@@ -403,15 +403,26 @@ def test_infinite_values():\n def test_infinite_values_missing_values():\n     # High level test making sure that inf and nan values are properly handled\n     # when both are present. This is similar to\n-    # test_split_on_nan_with_infinite_values() in test_grower.py, though we\n-    # cannot check the predicitons for binned values here.\n-\n-    X = np.asarray([-np.inf, 0, 1, np.inf, np.nan]).reshape(-1, 1)\n-    y_isnan = np.isnan(X.ravel())\n-    y_isinf = X.ravel() == np.inf\n-\n-    stump_clf = HistGradientBoostingClassifier(min_samples_leaf=1, max_iter=1,\n-                                               learning_rate=1, max_depth=2)\n-\n-    assert stump_clf.fit(X, y_isinf).score(X, y_isinf) == 1\n-    assert stump_clf.fit(X, y_isnan).score(X, y_isnan) == 1\n+    import pytest\n+    import numpy as np\n+    from sklearn.experimental import enable_hist_gradient_boosting\n+    from sklearn.ensemble import HistGradientBoostingClassifier\n+\n+    @pytest.mark.parametrize(\"scoring\", [None, 'loss'])\n+    def test_string_target_early_stopping(scoring):\n+        # Regression test for #14709 where targets need to be encoded before\n+        # computing the score\n+        rng = np.random.RandomState(42)\n+        X = rng.randn(100, 10)\n+        y = np.array(['x'] * 50 + ['y'] * 50, dtype=object)\n+        gbrt = HistGradientBoostingClassifier(n_iter_no_change=10, scoring=scoring)\n+        gbrt.fit(X, y)\n+\n+    @pytest.mark.parametrize(\"early_stopping\", [True, False])\n+    def test_string_target_without_early_stopping(early_stopping):\n+        # Test to ensure no errors with string targets when early stopping is both enabled and disabled\n+        rng = np.random.RandomState(42)\n+        X = rng.randn(100, 10)\n+        y = np.array(['class1'] * 50 + ['class2'] * 50, dtype=object)\n+        gbrt = HistGradientBoostingClassifier(n_iter_no_change=10 if early_stopping else None)\n+        gbrt.fit(X, y)\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..c09c98a 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,7 +680,21 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n-def test_sparse_precomputed():\n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for the issue being fixed\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n     try:\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15100": "diff --git a/sklearn/feature_extraction/tests/test_text.py b/sklearn/feature_extraction/tests/test_text.py\nindex 96ea20a..22dfb3b 100644\n--- a/sklearn/feature_extraction/tests/test_text.py\n+++ b/sklearn/feature_extraction/tests/test_text.py\n@@ -83,20 +83,120 @@ def test_strip_accents():\n     expected = 'aaaaaaceeee'\n     assert strip_accents_unicode(a) == expected\n \n+    # Test cases from the issue\n+    # These strings contain accents and are in NFKD form\n+    s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n+    expected_s = 'n'\n+\n+    assert strip_accents_unicode(s1) == expected_s\n+    assert strip_accents_unicode(s2) == expected_s\n+\n+    # Additional test cases from the original test patch\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n     a = '\u00ec\u00ed\u00ee\u00ef\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f9\u00fa\u00fb\u00fc\u00fd'\n     expected = 'iiiinooooouuuuy'\n     assert strip_accents_unicode(a) == expected\n \n+    # Test cases from the issue\n+    # These strings contain accents and are in NFKD form\n+    s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n+    expected_s = 'n'\n+\n+    assert strip_accents_unicode(s1) == expected_s\n+    assert strip_accents_unicode(s2) == expected_s\n+\n+    # Additional test cases from the original test patch\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n     # check some arabic\n     a = '\\u0625'  # alef with a hamza below: \u0625\n     expected = '\\u0627'  # simple alef: \u0627\n     assert strip_accents_unicode(a) == expected\n \n+    # Test cases from the issue\n+    # These strings contain accents and are in NFKD form\n+    s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n+    expected_s = 'n'\n+\n+    assert strip_accents_unicode(s1) == expected_s\n+    assert strip_accents_unicode(s2) == expected_s\n+\n+    # Additional test cases from the original test patch\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n     # mix letters accentuated and not\n     a = \"this is \u00e0 test\"\n     expected = 'this is a test'\n     assert strip_accents_unicode(a) == expected\n \n+    # Test cases from the issue\n+    # These strings contain accents and are in NFKD form\n+    s1 = chr(241)  # LATIN SMALL LETTER N WITH TILDE\n+    s2 = chr(110) + chr(771)  # LATIN SMALL LETTER N followed by COMBINING TILDE\n+    expected_s = 'n'\n+\n+    assert strip_accents_unicode(s1) == expected_s\n+    assert strip_accents_unicode(s2) == expected_s\n+\n+    # Additional test cases from the original test patch\n+    # strings that are already decomposed\n+    a = \"o\\u0308\"  # o with diaresis\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # combining marks by themselves\n+    a = \"\\u0300\\u0301\\u0302\\u0303\"\n+    expected = \"\"\n+    assert strip_accents_unicode(a) == expected\n+\n+    # Multiple combining marks on one character\n+    a = \"o\\u0308\\u0304\"\n+    expected = \"o\"\n+    assert strip_accents_unicode(a) == expected\n+\n \n def test_to_ascii():\n     # check some classical latin accentuated symbols\n",
  "scikit-learn__scikit-learn-25102": "",
  "scikit-learn__scikit-learn-25232": "diff --git a/sklearn/impute/tests/test_impute.py b/sklearn/impute/tests/test_impute.py\nindex ee482a8..cb12a70 100644\n--- a/sklearn/impute/tests/test_impute.py\n+++ b/sklearn/impute/tests/test_impute.py\n@@ -1524,7 +1524,66 @@ def test_iterative_imputer_keep_empty_features(initial_strategy):\n     assert_allclose(X_imputed[:, 1], 0)\n \n \n-@pytest.mark.parametrize(\"keep_empty_features\", [True, False])\n+from numpy.testing import assert_array_equal\n+import numpy as np\n+import pytest\n+from sklearn.impute import IterativeImputer\n+\n+def test_iterative_imputer_constant_fill_value():\n+    \"\"\"Check that we propagate properly the parameter `fill_value`.\"\"\"\n+    X = np.array([[-1, 2, 3, -1], [4, -1, 5, -1], [6, 7, -1, -1], [8, 9, 0, -1]])\n+\n+    fill_value = 100\n+    imputer = IterativeImputer(\n+        missing_values=-1,\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_transformed = imputer.fit_transform(X)\n+    assert_array_equal(imputer.initial_imputer_.statistics_, fill_value)\n+    assert not np.any(X_transformed == -1)  # Ensure no missing values left\n+\n+def test_iterative_imputer_constant_fill_string_value():\n+    \"\"\"Check handling of string data when using constant strategy with a fill value.\"\"\"\n+    X = np.array([[\"?\", \"b\"], [\"c\", \"?\"], [\"?\", \"?\"], [\"d\", \"e\"]], dtype=object)\n+\n+    fill_value = \"missing\"\n+    imputer = IterativeImputer(\n+        missing_values=\"?\",\n+        initial_strategy=\"constant\",\n+        fill_value=fill_value,\n+        max_iter=0,\n+    )\n+    X_transformed = imputer.fit_transform(X)\n+    # Check if missing values are correctly filled\n+    assert_array_equal(X_transformed[X == \"?\"], fill_value)\n+\n+def test_iterative_imputer_default_fill_value():\n+    \"\"\"Check default fill value based on data type when using constant strategy.\"\"\"\n+    X_num = np.array([[np.nan, 2.0], [3.0, np.nan]])\n+    X_str = np.array([[\"?\", \"a\"], [\"b\", \"?\"]], dtype=object)\n+\n+    # Check for numerical data\n+    imputer_num = IterativeImputer(\n+        missing_values=np.nan,\n+        initial_strategy=\"constant\",\n+        max_iter=0,\n+    )\n+    X_transformed_num = imputer_num.fit_transform(X_num)\n+    # Default fill_value is zero for numerical data\n+    assert_array_equal(imputer_num.initial_imputer_.statistics_, [0.0, 0.0])\n+\n+    # Check for string data\n+    imputer_str = IterativeImputer(\n+        missing_values=\"?\",\n+        initial_strategy=\"constant\",\n+        max_iter=0,\n+    )\n+    X_transformed_str = imputer_str.fit_transform(X_str)\n+    # Default fill_value should be \"missing_value\" for string data\n+    expected_fill_value = [\"missing_value\", \"missing_value\"]\n+    assert_array_equal(imputer_str.initial_imputer_.statistics_, expected_fill_value)\n def test_knn_imputer_keep_empty_features(keep_empty_features):\n     \"\"\"Check the behaviour of `keep_empty_features` for `KNNImputer`.\"\"\"\n     X = np.array([[1, np.nan, 2], [3, np.nan, np.nan]])\n",
  "scikit-learn__scikit-learn-25931": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3714d1a..77373a2 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -331,6 +331,52 @@ def test_base_estimator_property_deprecated():\n     X = np.array([[1, 2], [3, 4]])\n     y = np.array([1, 0])\n     model = IsolationForest()\n+\n+def test_iforest_preserve_feature_names():\n+    \"\"\"Check that feature names are preserved when contamination is not \"auto\".\n+    \n+    Feature names are required for consistency checks during scoring.\n+    \n+    Non-regression test for Issue ##25844\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    rng = np.random.RandomState(0)\n+    \n+    # Original test case\n+    X = pd.DataFrame(data=rng.randn(4, 1), columns=[\"a\"])\n+    model = IsolationForest(random_state=0, contamination=0.05)\n+    \n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+\n+def test_iforest_prediction_with_dataframe():\n+    \"\"\"Verify predictions run without warnings when using DataFrame input.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    rng = np.random.RandomState(42)\n+    \n+    X_train = pd.DataFrame(data=rng.normal(size=(100, 5)), columns=list('abcde'))\n+    X_test = pd.DataFrame(data=rng.normal(size=(20, 5)), columns=list('abcde'))\n+    \n+    model = IsolationForest(random_state=0, contamination=0.1)\n+    model.fit(X_train)\n+    \n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        predictions = model.predict(X_test)\n+\n+def test_iforest_fit_predict_with_same_dataframe():\n+    \"\"\"Check no warnings raised when fitting and predicting with the same DataFrame.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    rng = np.random.RandomState(123)\n+    \n+    X = pd.DataFrame(data=rng.normal(size=(50, 3)), columns=['f1', 'f2', 'f3'])\n+    model = IsolationForest(random_state=0, contamination=0.2)\n+    \n+    with warnings.catch_warnings():\n+        warnings.simplefilter(\"error\", UserWarning)\n+        model.fit(X)\n+        _ = model.predict(X)\n     model.fit(X, y)\n \n     warn_msg = (\n@@ -338,4 +384,4 @@ def test_base_estimator_property_deprecated():\n         \"will be removed in 1.4. Use `estimator_` instead.\"\n     )\n     with pytest.warns(FutureWarning, match=warn_msg):\n-        model.base_estimator_\n+        model.base_estimator_\n",
  "scikit-learn__scikit-learn-25973": "diff --git a/sklearn/feature_selection/tests/test_sequential.py b/sklearn/feature_selection/tests/test_sequential.py\nindex 42e1fbb..b6a3618 100644\n--- a/sklearn/feature_selection/tests/test_sequential.py\n+++ b/sklearn/feature_selection/tests/test_sequential.py\n@@ -313,4 +313,23 @@ def test_backward_neg_tol():\n     new_score = lr.fit(Xr, y).score(Xr, y)\n \n     assert 0 < sfs.get_support().sum() < X.shape[1]\n-    assert new_score < initial_score\n+\n+def test_sequential_feature_selector_with_iterable_of_splits():\n+    \"\"\"Test SequentialFeatureSelector with an iterable of splits.\"\"\"\n+    X, y = make_classification(random_state=0)\n+\n+    groups = np.zeros_like(y, dtype=int)\n+    groups[y.size // 2 :] = 1\n+\n+    cv = LeaveOneGroupOut()\n+    splits = cv.split(X, y, groups=groups)\n+\n+    knc = KNeighborsClassifier(n_neighbors=5)\n+\n+    sfs = SequentialFeatureSelector(knc, n_features_to_select=5, cv=splits)\n+    try:\n+        sfs.fit(X, y)\n+        print(\"Test passed: SequentialFeatureSelector works with iterable of splits.\")\n+    except Exception as e:\n+        print(f\"Test failed: SequentialFeatureSelector raised an exception: {e}\")\n+    assert new_score < initial_score\n",
  "scikit-learn__scikit-learn-26323": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex b52e888..aced1ca 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -22,6 +22,10 @@ from sklearn.compose import (\n from sklearn.exceptions import NotFittedError\n from sklearn.preprocessing import FunctionTransformer\n from sklearn.preprocessing import StandardScaler, Normalizer, OneHotEncoder\n+import pytest\n+import pandas as pd\n+import numpy as np\n+from sklearn.feature_selection import VarianceThreshold\n \n \n class Trans(TransformerMixin, BaseEstimator):\n",
  "scikit-learn__scikit-learn-9288": "diff --git a/sklearn/cluster/tests/test_k_means.py b/sklearn/cluster/tests/test_k_means.py\nindex abeeff0..2deae13 100644\n--- a/sklearn/cluster/tests/test_k_means.py\n+++ b/sklearn/cluster/tests/test_k_means.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Testing for K-means\"\"\"\n import sys\n \n@@ -944,8 +945,26 @@ def test_k_means_empty_cluster_relocated():\n     assert len(set(km.labels_)) == 2\n     assert_allclose(km.cluster_centers_, [[-1], [1]])\n \n+def test_result_of_kmeans_equal_in_diff_n_jobs():\n+    # PR 9288\n+    rnd = np.random.RandomState(0)\n+    X = rnd.normal(size=(50, 10))\n+\n+    result_1 = KMeans(n_clusters=3, random_state=0, n_jobs=1).fit(X).labels_\n+    result_2 = KMeans(n_clusters=3, random_state=0, n_jobs=2).fit(X).labels_\n+    assert_array_equal(result_1, result_2)\n+\n+def test_kmeans_inertia_consistency():\n+    # Test to ensure KMeans gives the same inertia for n_jobs=1 and n_jobs>1\n+    X, _ = make_blobs(n_samples=1000, centers=5, n_features=10, random_state=42)\n+\n+    inertia_1 = KMeans(n_clusters=5, random_state=42, n_jobs=1).fit(X).inertia_\n+    inertia_2 = KMeans(n_clusters=5, random_state=42, n_jobs=2).fit(X).inertia_\n+    inertia_3 = KMeans(n_clusters=5, random_state=42, n_jobs=3).fit(X).inertia_\n \n-def test_minibatch_kmeans_partial_fit_int_data():\n+    # Since there might still be minor computational differences, we use almost equal here.\n+    assert_almost_equal(inertia_1, inertia_2, decimal=5)\n+    assert_almost_equal(inertia_1, inertia_3, decimal=5)\n     # Issue GH #14314\n     X = np.array([[-1], [1]], dtype=np.int)\n     km = MiniBatchKMeans(n_clusters=2)\n",
  "sphinx-doc__sphinx-10323": "",
  "sphinx-doc__sphinx-10449": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex 82ec43a..8b2c3df 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1022,7 +1022,27 @@ def test_autodoc_typehints_description_no_undoc_doc_rtype(app):\n             '\\n'\n             '   Return type:\\n'\n             '      None\\n' == context)\n+import pytest\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_with_undocumented_return(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints._ClassWithInit\\n'\n+        '   :members:\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints._ClassWithInit(x)\\n'\n+            '\\n'\n+            '   Class docstring.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      **x** (*int*) --\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      None\\n' == context)\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\"})\n@@ -1053,7 +1073,27 @@ def test_autodoc_typehints_description_with_documented_init(app):\n             '\\n'\n             '      Return type:\\n'\n             '         None\\n' == context)\n+import pytest\n \n+@pytest.mark.sphinx('text', testroot='ext-autodoc',\n+                    confoverrides={'autodoc_typehints': \"description\"})\n+def test_autodoc_typehints_description_with_undocumented_return(app):\n+    (app.srcdir / 'index.rst').write_text(\n+        '.. autoclass:: target.typehints._ClassWithInit\\n'\n+        '   :members:\\n',\n+        encoding='utf8'\n+    )\n+    app.build()\n+    context = (app.outdir / 'index.txt').read_text(encoding='utf8')\n+    assert ('class target.typehints._ClassWithInit(x)\\n'\n+            '\\n'\n+            '   Class docstring.\\n'\n+            '\\n'\n+            '   Parameters:\\n'\n+            '      **x** (*int*) --\\n'\n+            '\\n'\n+            '   Return type:\\n'\n+            '      None\\n' == context)\n \n @pytest.mark.sphinx('text', testroot='ext-autodoc',\n                     confoverrides={'autodoc_typehints': \"description\",\n",
  "sphinx-doc__sphinx-10466": "diff --git a/tests/test_build_gettext.py b/tests/test_build_gettext.py\nindex a6fc946..47f5dc3 100644\n--- a/tests/test_build_gettext.py\n+++ b/tests/test_build_gettext.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Test the build process with gettext builder with the test root.\"\"\"\n \n import gettext\n@@ -8,8 +9,38 @@ from subprocess import PIPE, CalledProcessError\n \n import pytest\n \n+from sphinx.builders.gettext import Catalog, MsgOrigin\n from sphinx.util.osutil import cd\n \n+def test_catalag_with_duplicate_locations():\n+    # Create an instance of Catalog\n+    catalog = Catalog()\n+    \n+    # Add messages with duplicate locations\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/file', 1))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/file', 1))\n+    catalog.add('duplicate_test', MsgOrigin('/path/to/file', 2))\n+\n+    # Ensure the catalog has only one entry for the message text\n+    assert len(list(catalog)) == 1\n+\n+    # Ensure locations are unique\n+    message = list(catalog)[0]\n+    assert message.text == 'duplicate_test'\n+    assert message.locations == [('/path/to/file', 1), ('/path/to/file', 2)]\n+\n+    # Testing another message\n+    catalog.add('unique_test', MsgOrigin('/path/to/file2', 3))\n+    \n+    # Catalog should now have two distinct messages\n+    assert len(list(catalog)) == 2\n+    \n+    # Ensure both messages have correct contents\n+    msg1, msg2 = list(catalog)\n+    assert msg1.text == 'duplicate_test'\n+    assert msg2.text == 'unique_test'\n+    assert msg2.locations == [('/path/to/file2', 3)]\n+\n \n @pytest.mark.sphinx('gettext', srcdir='root-gettext')\n def test_build_gettext(app):\n",
  "sphinx-doc__sphinx-10673": "",
  "sphinx-doc__sphinx-7440": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 975a00f..74a7c3b 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -147,6 +147,23 @@ def test_glossary(app):\n     assert (\"term3\", \"term3\", \"term\", \"index\", \"term-term3\", -1) in objects\n     assert (\"term4\", \"term4\", \"term\", \"index\", \"term-term4\", -1) in objects\n \n+    # Added test for terms with different cases\n+    text_case_sensitive = (\".. glossary::\\n\"\n+                           \"\\n\"\n+                           \"   mysql\\n\"\n+                           \"       A database management system\\n\"\n+                           \"\\n\"\n+                           \"   MySQL\\n\"\n+                           \"       A popular relational database\\n\")\n+\n+    # parsing the glossary with case-sensitive terms\n+    doctree_case_sensitive = restructuredtext.parse(app, text_case_sensitive)\n+    objects_case_sensitive = list(app.env.get_domain(\"std\").get_objects())\n+\n+    # Verify that both entries exist and are treated differently\n+    assert (\"mysql\", \"mysql\", \"term\", \"index\", \"term-mysql\", -1) in objects_case_sensitive\n+    assert (\"MySQL\", \"MySQL\", \"term\", \"index\", \"term-MySQL\", -1) in objects_case_sensitive\n+\n \n def test_glossary_warning(app, status, warning):\n     # empty line between terms\n",
  "sphinx-doc__sphinx-7757": "",
  "sphinx-doc__sphinx-7889": "diff --git a/tests/test_ext_autodoc_mock.py b/tests/test_ext_autodoc_mock.py\nindex 7302feb..5090a6f 100644\n--- a/tests/test_ext_autodoc_mock.py\n+++ b/tests/test_ext_autodoc_mock.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_mock\n     ~~~~~~~~~~~~~~~~~~~~~\n@@ -47,6 +48,16 @@ def test_MockObject():\n \n     obj = SubClass()\n     assert SubClass.__doc__ == \"docstring of SubClass\"\n+\n+    # New test case for generic-typed class\n+    T = TypeVar('T')  # Type Variable for Generic class\n+\n+    class GenericSubClass(mock.SomeClass[T]):\n+        \"\"\"docstring of GenericSubClass\"\"\"\n+    \n+    obj_generic = GenericSubClass()\n+    assert GenericSubClass.__doc__ == \"docstring of GenericSubClass\"\n+    assert isinstance(obj_generic, GenericSubClass)\n     assert isinstance(obj, SubClass)\n     assert obj.method() == \"string\"\n     assert isinstance(obj.other_method(), SubClass)\n",
  "sphinx-doc__sphinx-7910": "diff --git a/tests/test_ext_napoleon.py b/tests/test_ext_napoleon.py\nindex 0676869..7670b18 100644\n--- a/tests/test_ext_napoleon.py\n+++ b/tests/test_ext_napoleon.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_napoleon\n     ~~~~~~~~~~~~~\n@@ -12,6 +13,8 @@\n import sys\n from collections import namedtuple\n from unittest import TestCase, mock\n+from sphinx.testing.util import simple_decorator\n+import functools\n \n from sphinx.application import Sphinx\n from sphinx.ext.napoleon import _process_docstring, _skip_member, Config, setup\n@@ -165,6 +168,17 @@ class SkipMemberTest(TestCase):\n                         SampleClass.__special_doc__, False,\n                         'napoleon_include_special_with_doc')\n \n+    def test_class_decorated_init(self):\n+        class SampleClass:\n+            \"\"\"Sample class with a decorated __init__ method.\"\"\"\n+\n+            @simple_decorator\n+            def __init__(self, x):\n+                \"\"\"Initializer docstring.\"\"\"\n+                self.x = x\n+\n+        self.assertSkip('class', '__init__', SampleClass.__init__, False, 'napoleon_include_init_with_doc')\n+\n     def test_class_special_undoc(self):\n         self.assertSkip('class', '__special_undoc__',\n                         SampleClass.__special_undoc__, True,\n",
  "sphinx-doc__sphinx-7985": "diff --git a/tests/test_build_linkcheck.py b/tests/test_build_linkcheck.py\nindex 5b1b2ed..90546a1 100644\n--- a/tests/test_build_linkcheck.py\n+++ b/tests/test_build_linkcheck.py\n@@ -22,6 +22,10 @@ def test_defaults(app, status, warning):\n     content = (app.outdir / 'output.txt').read_text()\n \n     print(content)\n+    # Check for local file that exists\n+    assert \"ok        conf.py\" in content\n+    # Check for local file that doesn't exist\n+    assert \"[broken] path/to/notfound\" in content\n     # looking for '#top' and '#does-not-exist' not found should fail\n     assert \"Anchor 'top' not found\" in content\n     assert \"Anchor 'does-not-exist' not found\" in content\n@@ -30,7 +34,7 @@ def test_defaults(app, status, warning):\n     # images should fail\n     assert \"Not Found for url: https://www.google.com/image.png\" in content\n     assert \"Not Found for url: https://www.google.com/image2.png\" in content\n-    assert len(content.splitlines()) == 5\n+    assert len(content.splitlines()) == 7\n \n \n @pytest.mark.sphinx('linkcheck', testroot='linkcheck', freshenv=True)\n@@ -47,7 +51,7 @@ def test_defaults_json(app, status, warning):\n                  \"info\"]:\n         assert attr in row\n \n-    assert len(content.splitlines()) == 8\n+    assert len(content.splitlines()) == 10\n     assert len(rows) == 8\n     # the output order of the rows is not stable\n     # due to possible variance in network latency\n",
  "sphinx-doc__sphinx-8035": "",
  "sphinx-doc__sphinx-8120": "diff --git a/tests/test_intl.py b/tests/test_intl.py\nindex 58339b1..e228816 100644\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -1285,7 +1285,39 @@ def test_image_glob_intl_using_figure_language_filename(app):\n     assert_node(doctree[0][3][0], nodes.image, uri='subdir/svgimg.*',\n                 candidates={'application/pdf': 'subdir/svgimg.pdf',\n                             'image/svg+xml': 'subdir/svgimg.svg'})\n-\n-\n-def getwarning(warnings):\n-    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n+from babel.messages import pofile\n+from babel.messages.catalog import Catalog\n+from sphinx import locale\n+\n+\n+def test_locale_custom_translation(make_app, app_params, sphinx_test_tempdir):\n+    \"\"\"Test loading custom translations from locale/<language>/LC_MESSAGES/.\"\"\"\n+    try:\n+        # Clear translators cache\n+        locale.translators.clear()\n+\n+        # Prepare message catalog (.po)\n+        locale_dir = sphinx_test_tempdir / 'basic' / 'locale' / 'da' / 'LC_MESSAGES'\n+        locale_dir.makedirs()\n+        with (locale_dir / 'sphinx.po').open('wb') as f:\n+            catalog = Catalog()\n+            catalog.add('Fig. %s', 'Foobar %s')\n+            catalog.add('Listing %s', 'Whatever %s')\n+            pofile.write_po(f, catalog)\n+\n+        # Construct application and convert po file to .mo\n+        args, kwargs = app_params\n+        app = make_app(*args, **kwargs)\n+        app.builder.build_all()\n+\n+        assert (locale_dir / 'sphinx.mo').exists()\n+        content = (app.outdir / 'index.html').read_text()\n+\n+        # Test replacements in the built content\n+        assert 'Foobar 1' in content\n+        assert 'Whatever 1' in content\n+   \n+    finally:\n+        # Clear translators cache again to clean up\n+        locale.translators.clear()\n+    return strip_escseq(warnings.getvalue().replace(os.sep, '/'))\n",
  "sphinx-doc__sphinx-8269": "",
  "sphinx-doc__sphinx-8459": "diff --git a/tests/test_ext_autodoc_configs.py b/tests/test_ext_autodoc_configs.py\nindex d1881df..eae1fbf 100644\n--- a/tests/test_ext_autodoc_configs.py\n+++ b/tests/test_ext_autodoc_configs.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_ext_autodoc_configs\n     ~~~~~~~~~~~~~~~~~~~~~~~~\n@@ -13,7 +14,27 @@ import sys\n \n import pytest\n \n+import pytest\n from sphinx.testing import restructuredtext\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.sphinx('text', testroot='ext-autodoc', \n+                    srcdir='autodoc_typehints_description_and_type_aliases_alt',\n+                    confoverrides={\n+                        'autodoc_typehints': \"description\",\n+                        'autodoc_type_aliases': {'JSONObject': 'types.JSONObject'}})\n+def test_autodoc_type_aliases_with_description(app: SphinxTestApp):\n+    (app.srcdir / 'types.py').write_text(\n+        \"from typing import Any, Dict\\n\"\n+        \"JSONObject = Dict[str, Any]\\n\"\n+        \"def sphinx_doc(data: JSONObject) -> JSONObject:\\n\"\n+        \"    return {}\\n\"\n+    )\n+    app.build()\n+    context = (app.outdir / 'types.txt').read_text()\n+    assert 'sphinx_doc(data)' in context\n+    assert 'data (*types.JSONObject*)' in context\n+    assert 'Return type:\\n   *types.JSONObject*' in context\n \n from .test_ext_autodoc import do_autodoc\n \n",
  "sphinx-doc__sphinx-8475": "",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..9c8ec0e 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,15 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+import pytest\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.mark.sphinx('epub', testroot='ext-viewcode',\n+                    confoverrides={'viewcode_enable_epub': False})\n+def test_viewcode_epub_disabled(app: SphinxTestApp, status, warning):\n+    app.builder.build_all()\n+    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n",
  "sphinx-doc__sphinx-9281": "diff --git a/tests/test_util_inspect.py b/tests/test_util_inspect.py\nindex 3c31d3d..c5abad4 100644\n--- a/tests/test_util_inspect.py\n+++ b/tests/test_util_inspect.py\n@@ -514,9 +514,16 @@ def test_dict_customtype():\n     description = inspect.object_description(dictionary)\n     # Type is unsortable, just check that it does not crash\n     assert \"<CustomType(2)>: 2\" in description\n+import enum\n \n \n-def test_getslots():\n+def test_object_description_enum():\n+    class MyEnum(enum.Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    assert repr(MyEnum.ValueA) == \"MyEnum.ValueA\"\n+    assert repr(MyEnum.ValueB) == \"MyEnum.ValueB\"\n     class Foo:\n         pass\n \n",
  "sphinx-doc__sphinx-9320": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\nindex ff8df08..20f4f0e 100644\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -9,6 +9,7 @@\n \"\"\"\n \n import time\n+import sys\n from io import StringIO\n \n import pytest\n@@ -241,7 +242,26 @@ def test_default_filename(tempdir):\n     exec(conffile.read_text(), ns)\n \n \n-def test_extensions(tempdir):\n+def test_exits_when_existing_confpy_and_enter_pressed(monkeypatch):\n+    \"\"\"Test `sphinx-quickstart` exits when existing `conf.py` is detected and Enter is pressed.\"\"\"\n+    # Mock the filesystem to simulate the presence of `conf.py`\n+    def mock_isfile(path):\n+        return True\n+\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    # Mock user input to press Enter on prompt for a new root path\n+    def mock_input(prompt):\n+        if 'Please enter a new root path' in prompt:\n+            return ''  # Simulate pressing Enter\n+\n+    # Monkeypatch input function\n+    monkeypatch.setattr('builtins.input', mock_input)\n+\n+    # Capture the system exit\n+    with pytest.raises(SystemExit):\n+        d = {}\n+        qs.ask_user(d)\n     qs.main(['-q', '-p', 'project_name', '-a', 'author',\n              '--extensions', 'foo,bar,baz', tempdir])\n \n",
  "sphinx-doc__sphinx-9367": "diff --git a/tests/test_pycode_ast.py b/tests/test_pycode_ast.py\nindex a3de258..285ce81 100644\n--- a/tests/test_pycode_ast.py\n+++ b/tests/test_pycode_ast.py\n@@ -54,6 +54,7 @@ from sphinx.pycode import ast\n     (\"- 1\", \"- 1\"),                             # UnaryOp\n     (\"- a\", \"- a\"),                             # USub\n     (\"(1, 2, 3)\", \"(1, 2, 3)\"),                   # Tuple\n+    (\"(1,)\", \"(1,)\"),                             # Tuple (single element)\n     (\"()\", \"()\"),                               # Tuple (empty)\n ])\n def test_unparse(source, expected):\n",
  "sphinx-doc__sphinx-9591": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 29731ea..63d75b4 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -804,6 +804,30 @@ def test_pyattribute(app):\n                                                                         [desc_sig_punctuation, \"]\"])],\n                                                      [desc_annotation, \" = ''\"])],\n                                    [desc_content, ()]))\n+\n+def test_property_cross_references(app):\n+    text = (\".. py:class:: Square\\n\"\n+            \"\\n\"\n+            \"   .. py:property:: end\\n\"\n+            \"      :type: Point\\n\"\n+            \"\\n\"\n+            \".. py:class:: Rectangle\\n\"\n+            \"\\n\"\n+            \"   .. py:attribute:: start\\n\"\n+            \"      :type: Point\\n\")\n+    domain = app.env.get_domain('py')\n+    doctree = restructuredtext.parse(app, text)\n+\n+    # Check for the Square.end property with cross-ref in type\n+    assert_node(doctree[0][1][1], addnodes.desc_annotation, \": \")\n+    assert_node(doctree[0][1][2], pending_xref, refdomain='py', reftype='class', reftarget='Point')\n+\n+    # Check for the Rectangle.start attribute with cross-ref in type\n+    assert_node(doctree[1][1][1], addnodes.desc_annotation, \": \")\n+    assert_node(doctree[1][1][2], pending_xref, refdomain='py', reftype='class', reftarget='Point')\n+    \n+    assert 'Square.end' in domain.objects\n+    assert 'Rectangle.start' in domain.objects\n     assert_node(doctree[1][1][1][0][1][1], pending_xref, **{\"py:class\": \"Class\"})\n     assert_node(doctree[1][1][1][0][1][3], pending_xref, **{\"py:class\": \"Class\"})\n     assert 'Class.attr' in domain.objects\n",
  "sphinx-doc__sphinx-9698": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex 4731988..c636965 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
  "sphinx-doc__sphinx-9711": "",
  "sympy__sympy-11618": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 399f58e..dfa32fa 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -255,7 +255,29 @@ def test_transform():\n         Point(5, 6)\n \n \n-def test_concyclic_doctest_bug():\n+from sympy import sqrt\n+from sympy.geometry import Point, Point2D, Point3D\n+\n+def test_issue_11617():\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point2D(2, 0)\n+    assert p1.distance(p2) == sqrt(5)\n+\n+def test_point_distance_dimension_mismatch():\n+    # Testing with two 3D points\n+    p1 = Point3D(1, 0, 2)\n+    p2 = Point3D(2, 0, 3)\n+    assert p1.distance(p2) == sqrt(1 + 0 + 1)\n+\n+    # Testing with two 2D points\n+    p3 = Point2D(1, 1)\n+    p4 = Point2D(4, 5)\n+    assert p3.distance(p4) == sqrt(9 + 16)\n+\n+    # 3D vs 1D Point, equivalent to ignoring the z dimension in Point3D\n+    p5 = Point3D(7, 0, 2)\n+    p6 = Point2D(7, 0)\n+    assert p5.distance(p6) == 2  # Equivalent to distance between (7, 0, 2) and (7, 0, 0)\n     p1, p2 = Point(-1, 0), Point(1, 0)\n     p3, p4 = Point(0, 1), Point(-1, 2)\n     assert Point.is_concyclic(p1, p2, p3)\n",
  "sympy__sympy-12096": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex 386dc7c..d0978da 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -741,6 +741,28 @@ def test_special_printers():\n     assert isinstance(func1(), mpi)\n     assert isinstance(func2(), mpi)\n \n+from sympy.utilities.lambdify import implemented_function\n+from sympy import Float\n+\n+def test_issue_12092():\n+    f = implemented_function('f', lambda x: x**2)\n+    assert f(f(2)).evalf() == Float(16)\n+\n+def test_issue_recursive_evalf():\n+    f = implemented_function('f', lambda x: x**2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+\n+    # Simple checks from the issue\n+    assert f(2).evalf() == Float(4)\n+    assert g(2).evalf() == Float(4)\n+    \n+    # Recursive check\n+    assert f(g(2)).evalf() == Float(16)\n+    \n+    # Test with more nesting\n+    assert f(f(g(2))).evalf() == Float(256)\n+    assert g(f(g(2))).evalf() == Float(32)\n+\n def test_true_false():\n     # We want exact is comparison here, not just ==\n     assert lambdify([], true)() is True\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..fff42aa 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -83,8 +83,19 @@ def test_Identity():\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n+def test_Identity_sum():\n+    from sympy import Identity, Sum, symbols\n \n-def test_Identity_doit():\n+    n = symbols('n', integer=True, positive=True)\n+    i, j = symbols('i j', integer=True)\n+    In = Identity(n)\n+    \n+    # Check sum of all elements directly\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit() == n\n+\n+    # Check sum of all elements for specific instance\n+    In3 = Identity(3)\n+    assert Sum(Sum(In3[i, j], (i, 0, 2)), (j, 0, 2)).doit() == 3\n     Inn = Identity(Add(n, n, evaluate=False))\n     assert isinstance(Inn.rows, Add)\n     assert Inn.doit() == Identity(2*n)\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..8e60dec 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -330,6 +330,21 @@ def test_args():\n     assert p._array_form == [3, 2, 0, 1, 5, 4]\n     p = Permutation((0, 3, 1, 2))\n     assert p._cyclic_form is None\n+\n+    # Test case to check if non-disjoint cycles produce the identity permutation\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1, 2])\n+\n+    # Test case to ensure non-disjoint cycles are applied correctly\n+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])\n+\n+    # Test case where multiple identical cycles are given\n+    assert Permutation([[0, 1], [0, 1], [0, 1]]) == Permutation([0, 1, 2])\n+\n+    # Test more non-disjoint cycles where elements are moved internally and externally\n+    assert Permutation([[0, 2], [1, 2], [1, 3]]) == Permutation([2, 3, 0, 1])\n+\n+    # Test using disjoint and non-disjoint cycles together\n+    assert Permutation([[0, 1], [2, 3], [0, 2]]) == Permutation([1, 3, 0, 2])\n     assert p._array_form == [0, 3, 1, 2]\n     assert Permutation([0]) == Permutation((0, ))\n     assert Permutation([[0], [1]]) == Permutation(((0, ), (1, ))) == \\\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..d92c007 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -489,8 +489,16 @@ def test_errors():\n     raises(ShapeError,\n         lambda: SparseMatrix(1, 2, [1, 2]) + SparseMatrix(2, 1, [2, 1]))\n \n-\n-def test_len():\n+def test_hstack_vstack_zero_row():\n+    # Test horizontal stacking of 0 x n matrices\n+    sparse_matrices_h = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    result_h = SparseMatrix.hstack(*sparse_matrices_h)\n+    assert result_h.shape == (0, 6)\n+\n+    # Test vertical stacking of n x 0 matrices\n+    sparse_matrices_v = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    result_v = SparseMatrix.vstack(*sparse_matrices_v)\n+    assert result_v.shape == (6, 0)\n     assert not SparseMatrix()\n     assert SparseMatrix() == SparseMatrix([])\n     assert SparseMatrix() == SparseMatrix([[]])\n",
  "sympy__sympy-13372": "diff --git a/sympy/core/tests/test_evalf.py b/sympy/core/tests/test_evalf.py\nindex e95146a..8a9e265 100644\n--- a/sympy/core/tests/test_evalf.py\n+++ b/sympy/core/tests/test_evalf.py\n@@ -170,6 +170,19 @@ def test_evalf_ramanujan():\n \n # Input that for various reasons have failed at some point\n \n+from sympy import Mul, Max, NS, oo, symbols, sin, exp, I, Rational, pi, sqrt, E, S\n+\n+x, y, n = symbols('x y n')\n+\n+def test_evalf_issue_13076():\n+    # Original test case from the issue\n+    assert NS(Mul(Max(0, y), x, evaluate=False).evalf()) == 'x*Max(0, y)'\n+    # Additional test cases for different permutations\n+    assert NS(Mul(x, Max(0, y), evaluate=False).evalf()) == 'x*Max(0, y)'\n+    assert NS(Mul(y, Max(x, 0), evaluate=False).evalf()) == 'y*Max(x, 0)'\n+    assert NS(Mul(Max(x, y), 0, evaluate=False).evalf()) == '0'\n+    assert NS(Mul(Max(x, y), 1, evaluate=False).evalf()) == 'Max(x, y)'\n+    assert NS(Mul(x, x, Max(x, y), evaluate=False).evalf()) == 'x**2*Max(x, y)'\n \n def test_evalf_bugs():\n     assert NS(sin(1) + exp(-10**10), 10) == NS(sin(1), 10)\n",
  "sympy__sympy-13480": "diff --git a/sympy/functions/elementary/tests/test_hyperbolic.py b/sympy/functions/elementary/tests/test_hyperbolic.py\nindex 9ac371d..56eb9fe 100644\n--- a/sympy/functions/elementary/tests/test_hyperbolic.py\n+++ b/sympy/functions/elementary/tests/test_hyperbolic.py\n@@ -271,9 +271,22 @@ def test_coth():\n     assert coth(17*k*pi*I) == -cot(17*k*pi)*I\n \n     assert coth(k*pi*I) == -cot(k*pi)*I\n-\n-\n-def test_coth_series():\n+def test_coth_substitution_issue():\n+    from sympy import coth, log, tan\n+    x = Symbol('x')\n+    e = coth(log(tan(x)))\n+    # Testing known problematic integral values\n+    assert e.subs(x, 2) is not None\n+    assert e.subs(x, 3) is not None\n+    assert e.subs(x, 5) is not None\n+    assert e.subs(x, 6) is not None\n+    assert e.subs(x, 8) is not None\n+    assert e.subs(x, 9) is not None\n+    assert e.subs(x, 11) is not None\n+    assert e.subs(x, 12) is not None\n+    assert e.subs(x, 13) is not None\n+    assert e.subs(x, 15) is not None\n+    assert e.subs(x, 18) is not None\n     x = Symbol('x')\n     assert coth(x).series(x, 0, 8) == \\\n         1/x + x/3 - x**3/45 + 2*x**5/945 - x**7/4725 + O(x**8)\n",
  "sympy__sympy-13615": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 6d534c0..83801d9 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -175,6 +175,21 @@ def test_Complement():\n     assert not 3 in Complement(Interval(0, 5), Interval(1, 4), evaluate=False)\n     assert -1 in Complement(S.Reals, S.Naturals, evaluate=False)\n     assert not 1 in Complement(S.Reals, S.Naturals, evaluate=False)\n+    \n+    # Test case for issue with Complement involving mixture of symbols and numbers\n+    x, y = symbols('x y')\n+    a = FiniteSet(x, y, 2)\n+    b = Interval(-10, 10)\n+    assert Complement(a, b) == Complement(FiniteSet(x, y), b)\n+\n+    # Additional edge case tests\n+    c = FiniteSet(x, y, 10)\n+    d = Interval(-5, 5)\n+    assert Complement(c, d) == Complement(FiniteSet(x, y, 10), d)\n+\n+    e = FiniteSet(x)\n+    f = Interval(0, 1)\n+    assert Complement(e, f) == FiniteSet(x)\n \n     assert Complement(S.Integers, S.UniversalSet) == EmptySet()\n     assert S.UniversalSet.complement(S.Integers) == EmptySet()\n",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..41c49e0 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -201,7 +201,20 @@ def test_col_insert():\n         l.insert(i, 4)\n         assert flatten(zeros_Shaping(3).col_insert(i, c4).row(0).tolist()) == l\n \n-def test_extract():\n+def test_col_insert_issue():\n+    import sympy as sm\n+    M = sm.eye(6)\n+    V = 2 * sm.ones(6, 2)\n+    result = M.col_insert(3, V)\n+    expected = sm.Matrix([\n+        [1, 0, 0, 2, 2, 0, 0, 0],\n+        [0, 1, 0, 2, 2, 0, 0, 0],\n+        [0, 0, 1, 2, 2, 0, 0, 0],\n+        [0, 0, 0, 2, 2, 1, 0, 0],\n+        [0, 0, 0, 2, 2, 0, 1, 0],\n+        [0, 0, 0, 2, 2, 0, 0, 1]\n+    ])\n+    assert result == expected\n     m = ShapingOnlyMatrix(4, 3, lambda i, j: i*3 + j)\n     assert m.extract([0, 1, 3], [0, 1]) == Matrix(3, 2, [0, 1, 3, 4, 9, 10])\n     assert m.extract([0, 3], [0, 0, 2]) == Matrix(2, 3, [0, 0, 2, 9, 9, 11])\n",
  "sympy__sympy-13757": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex a463b22..199aacc 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -673,6 +673,14 @@ def test_Poly_mul():\n \n     assert Poly(1, x) * x == Poly(x, x)\n     assert Poly(1, x) * sin(x) == sin(x)\n+    # Additional test cases for issue verification\n+    assert x*Poly(x, x) == Poly(x**2, x, domain='ZZ')\n+    assert Poly(x, x) * x == Poly(x**2, x, domain='ZZ')\n+    assert Poly(x, x) * S(-2) == Poly(-2*x, x, domain='ZZ')\n+    assert -2 * Poly(x, x) == Poly(-2*x, x, domain='ZZ')\n+    assert S(-2) * Poly(x, x) == Poly(-2*x, x, domain='ZZ')\n+    assert x * Poly(x, x, domain='RR') == Poly(x**2, x, domain='RR')\n+    assert Poly(x, x, domain='RR') * x == Poly(x**2, x, domain='RR')\n \n     assert Poly(x, x) * 2 == Poly(2*x, x)\n     assert 2 * Poly(x, x) == Poly(2*x, x)\n",
  "sympy__sympy-13798": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex b1f9614..a894ebd 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -54,6 +54,26 @@ def test_printmethod():\n             return \"foo\"\n     assert latex(R(x)) == \"foo\"\n \n+def test_latex_mul_symbol_arbitrary():\n+    # Original test cases\n+    assert latex(3*x**2*y, mul_symbol='\\\\,') == r\"3\\,x^{2}\\,y\"\n+    assert latex(1.5*3**x, mul_symbol='\\\\,') == r\"1.5 \\cdot 3^{x}\"\n+    \n+    # New test cases to test arbitrary mul_symbol\n+    assert latex(3*x**2*y, mul_symbol='*') == \"3*x^{2}*y\"\n+    assert latex(3*x**2*y, mul_symbol='custom') == \"3customx^{2}customy\"\n+\n+    # Test with different style of multiplication symbols\n+    assert latex(3*x**2*y, mul_symbol='.') == \"3.x^{2}.y\"\n+    assert latex(3*x**2*y, mul_symbol='times') == r\"3 \\times x^{2} \\times y\"\n+\n+    # Edge case: empty mul_symbol\n+    assert latex(3*x**2*y, mul_symbol='') == \"3x^{2}y\"\n+\n+    # Verify backward compatibility with predefined options\n+    assert latex(2*x*y, mul_symbol='dot') == r\"2 \\cdot x \\cdot y\"\n+    assert latex(2*x*y, mul_symbol='times') == r\"2 \\times x \\times y\"\n+\n \n def test_latex_basic():\n     assert latex(1 + x) == \"x + 1\"\n",
  "sympy__sympy-13877": "diff --git a/sympy/matrices/tests/test_matrices.py b/sympy/matrices/tests/test_matrices.py\nindex 2018055..7d9da11 100644\n--- a/sympy/matrices/tests/test_matrices.py\n+++ b/sympy/matrices/tests/test_matrices.py\n@@ -402,8 +402,19 @@ def test_determinant():\n     assert M.det(method=\"bareiss\") == z**2 - x*y\n     assert M.det(method=\"berkowitz\") == z**2 - x*y\n \n-\n-def test_det_LU_decomposition():\n+def test_issue_13835():\n+    from sympy import Matrix, symbols\n+\n+    a = symbols('a')\n+    f = lambda n: det(Matrix([[i + a*j for i in range(n)] for j in range(n)]))\n+\n+    # Test cases for various n values to ensure issues like NaN or exceptions don't occur\n+    assert f(1) == 0\n+    assert f(2) == -a\n+    assert f(4) == 0\n+    assert f(5) == 0  # Originally gave 'nan', should now be resolvable.\n+    assert f(6) == 0  # Originally threw exception, should be correctly calculated now.\n+    assert f(3).simplify() == 0  # Simplified form should be zero as the series expands and simplifies.\n \n     for M in [Matrix(), Matrix([[1]])]:\n         assert M.det(method=\"lu\") == 1\n",
  "sympy__sympy-13878": "diff --git a/sympy/stats/tests/test_continuous_rv.py b/sympy/stats/tests/test_continuous_rv.py\nindex ff0c413..4efc5da 100644\n--- a/sympy/stats/tests/test_continuous_rv.py\n+++ b/sympy/stats/tests/test_continuous_rv.py\n@@ -710,6 +710,48 @@ def test_issue_10003():\n     assert P(G < -1) == S.Zero\n \n def test_precomputed_cdf():\n+    x = symbols(\"x\", real=True, finite=True)\n+    a, b, p, mu, s, omega, nu = symbols(\"a b p mu s omega nu\", real=True, positive=True)\n+    k, theta = symbols(\"k theta\", real=True, positive=True)\n+\n+    # Verifying additional distributions with precomputed CDFs\n+    arcsin = Arcsin(\"A\", 0, 3)\n+    assert cdf(arcsin)(1).simplify() == 2 * asin(sqrt(1/3)) / pi\n+\n+    dagum = Dagum(\"D\", 1/3, 1/5, 2)\n+    assert cdf(dagum)(3).simplify() is not None\n+\n+    erlang = Erlang(\"E\", 1, 1)\n+    expected_cdf_erlang = 1 - exp(-1)\n+    assert cdf(erlang)(1).simplify() == expected_cdf_erlang\n+\n+    frechet = Frechet(\"F\", 4/3, 1, 2)\n+    assert cdf(frechet)(3).simplify() is not None\n+\n+    gamma = Gamma(\"G\", 0.1, 2)\n+    assert cdf(gamma)(3).evalf() is not None\n+\n+    gammainverse = GammaInverse(\"GI\", 5/7, 2)\n+    assert cdf(gammainverse)(3).simplify() is not None\n+\n+    kumaraswamy = Kumaraswamy(\"K\", 1/123, 5)\n+    assert cdf(kumaraswamy)(1/3).simplify() is not None\n+\n+    laplace = Laplace(\"LA\", 2, 3)\n+    expected_cdf_laplace = 1 - exp(-1)\n+    assert cdf(laplace)(5).simplify() == expected_cdf_laplace\n+\n+    logistic = Logistic(\"L\", 1, 0.1)\n+    assert cdf(logistic)(2).simplify() is not None\n+\n+    nakagami = Nakagami(\"N\", 7/3, 1)\n+    assert cdf(nakagami)(2).simplify() is not None\n+\n+    student_t = StudentT(\"S\", 10)\n+    assert cdf(student_t)(2).simplify() is not None\n+\n+    uniform_sum = UniformSum(\"US\", 5)\n+    assert cdf(uniform_sum)(2).simplify() is not None\n     x = symbols(\"x\", real=True, finite=True)\n     mu = symbols(\"mu\", real=True, finite=True)\n     sigma, xm, alpha = symbols(\"sigma xm alpha\", positive=True, finite=True)\n",
  "sympy__sympy-13974": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bd3e825..0701ef4 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -37,6 +37,31 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n+def test_tensor_product_powers():\n+    # Test 1: Powers of tensor products with commutative scalars\n+    t1 = TP(1, 1) * TP(1, 1)\n+    assert tensor_product_simp(t1) == TP(1, 1)**2\n+    assert t1.expand(tensorproduct=True) == TP(1, 1)**2\n+    \n+    # Test 2: Powers of tensor products with non-commutative symbols\n+    t2 = TP(1, Pauli(3)) * TP(1, Pauli(3))\n+    assert tensor_product_simp(t2) == TP(1, Pauli(3))**2\n+    assert t2.expand(tensorproduct=True) == TP(1, Pauli(3))**2\n+    \n+    # Test 3: Mixed tensor products and simplified expressions\n+    a = Symbol('a', commutative=False)\n+    assert tensor_product_simp(TP(1, 1) * TP(1, a)).subs(a, 1) == TP(1, 1)\n+    assert tensor_product_simp(TP(1, Pauli(3)) * TP(1, a)).subs(a, Pauli(3)) == TP(1, 1)\n+\n+def test_tensor_product_simp_new():\n+    A, B, C, D = symbols('A B C D', commutative=False)\n+    x = Symbol('x')\n+    # Additional thorough test cases for tensor_product_simp\n+    assert tensor_product_simp(TP(A, B)**x) == TP(A**x, B**x)\n+    assert tensor_product_simp(x*TP(A, B)**2) == x*TP(A**2, B**2)\n+    assert tensor_product_simp(x*(TP(A, B)**2)*TP(C, D)) == x*TP(A**2 * C, B**2 * D)\n+    assert tensor_product_simp(TP(A, B) - TP(C, D)**x) == TP(A, B) - TP(C**x, D**x)\n+\n \n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n",
  "sympy__sympy-14531": "diff --git a/sympy/printing/tests/test_str.py b/sympy/printing/tests/test_str.py\nindex 29c7fd2..fefbd22 100644\n--- a/sympy/printing/tests/test_str.py\n+++ b/sympy/printing/tests/test_str.py\n@@ -491,6 +491,11 @@ def test_Rational():\n \n     assert sstr(Rational(2, 3), sympy_integers=True) == \"S(2)/3\"\n     assert sstr(Symbol(\"x\")**Rational(2, 3), sympy_integers=True) == \"x**(S(2)/3)\"\n+    \n+    # Additional test cases for the issue\n+    x = Symbol(\"x\")\n+    assert sstr(Eq(x, Rational(1, 2)), sympy_integers=True) == \"Eq(x, S(1)/2)\"\n+    assert sstr(Limit(x, x, Rational(1, 2)), sympy_integers=True) == \"Limit(x, x, S(1)/2)\"\n \n \n def test_Float():\n",
  "sympy__sympy-14711": "diff --git a/sympy/physics/vector/tests/test_vector.py b/sympy/physics/vector/tests/test_vector.py\nindex de6a8ff..fb56971 100644\n--- a/sympy/physics/vector/tests/test_vector.py\n+++ b/sympy/physics/vector/tests/test_vector.py\n@@ -4,6 +4,22 @@ from sympy.abc import x, y, z\n from sympy.utilities.pytest import raises\n \n \n+from sympy.physics.vector import ReferenceFrame, Vector\n+\n+def test_vector_add_zero():\n+    N = ReferenceFrame('N')\n+    \n+    # Check that adding a zero-scaled vector does not raise an error and returns the original vector\n+    v = N.x\n+    zero_scaled_v = 0 * N.x\n+    assert v + zero_scaled_v == v\n+    assert sum([v, zero_scaled_v]) == v\n+    \n+    # Additionally, check with negative zero-scaled vector\n+    negative_zero_scaled_v = -0 * N.x\n+    assert v + negative_zero_scaled_v == v\n+    assert sum([v, negative_zero_scaled_v]) == v\n+\n Vector.simp = True\n A = ReferenceFrame('A')\n \n",
  "sympy__sympy-14976": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..5200fb8 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1,3 +1,4 @@\n+\n from distutils.version import LooseVersion as V\n from itertools import product\n import math\n@@ -144,6 +145,16 @@ def test_mpmath_lambda():\n            # if this succeeds, it can't be a mpmath function\n \n \n+@conserve_mpmath_dps\n+def test_lambdify_rational_mpmath():\n+    x = symbols('x')\n+    eqn = Eq(18, 77 + Rational(1, 3))\n+    f = lambdify(x, eqn.lhs - eqn.rhs, 'mpmath')\n+    source_code = inspect.getsource(f)\n+    # Ensure mpmath is used in the lambdified function for Rationals\n+    assert 'mpmath' in source_code\n+    assert 'mpmath.mpf(232) / mpmath.mpf(3)' in source_code\n+\n @conserve_mpmath_dps\n def test_number_precision():\n     mpmath.mp.dps = 50\n",
  "sympy__sympy-15017": "diff --git a/sympy/tensor/array/tests/test_immutable_ndim_array.py b/sympy/tensor/array/tests/test_immutable_ndim_array.py\nindex 18941a7..eedbf60 100644\n--- a/sympy/tensor/array/tests/test_immutable_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_immutable_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from copy import copy\n \n from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n@@ -7,8 +8,24 @@ from sympy.matrices import Matrix\n from sympy.tensor.array.sparse_ndim_array import ImmutableSparseNDimArray\n from sympy.utilities.pytest import raises\n \n+from sympy.tensor.array.dense_ndim_array import ImmutableDenseNDimArray\n+from sympy import Symbol\n+import sympy\n \n def test_ndim_array_initiation():\n+    # Test rank-0 array len() behavior\n+    rank_zero_array = ImmutableDenseNDimArray(3)  # equivalent to sympy.Array(3)\n+    assert len(rank_zero_array) == 1, \"Length of rank-0 array should be 1\"\n+    assert len(list(rank_zero_array)) == 1, \"Iterator length of rank-0 array should be 1\"\n+    assert rank_zero_array.shape == ()\n+    assert rank_zero_array.rank() == 0\n+    assert rank_zero_array[()] == 3\n+    raises(ValueError, lambda: rank_zero_array[0])\n+\n+    # Numpy test for comparison\n+    import numpy as np\n+    np_array = np.asarray(1)\n+    assert np_array.size == 1, \"Numpy array size for rank-0 should be 1\"\n     arr_with_one_element = ImmutableDenseNDimArray([23])\n     assert len(arr_with_one_element) == 1\n     assert arr_with_one_element[0] == 23\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..48385fa 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -29,6 +30,18 @@ def test_Function():\n     assert mcode(sin(x) ** cos(x)) == \"Sin[x]^Cos[x]\"\n     assert mcode(conjugate(x)) == \"Conjugate[x]\"\n \n+def test_Max_Min():\n+    # Original test case\n+    assert mcode(Max(x,y,z)*Min(y,z)) == \"Max[x, y, z]*Min[y, z]\"\n+\n+    # New test cases specifically for the issue\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[2, x]\"\n+    assert mcode(Max(2, 3, x)) == \"Max[2, 3, x]\"\n+    assert mcode(Max(x, y, 5)) == \"Max[x, y, 5]\"\n+    assert mcode(Max(x + y, 3)) == \"Max[x + y, 3]\"\n+    assert mcode(Max(x, x**2)) == \"Max[x, x^2]\"\n+\n \n def test_Pow():\n     assert mcode(x**3) == \"x^3\"\n",
  "sympy__sympy-15349": "diff --git a/sympy/algebras/tests/test_quaternion.py b/sympy/algebras/tests/test_quaternion.py\nindex c486cc1..cec442d 100644\n--- a/sympy/algebras/tests/test_quaternion.py\n+++ b/sympy/algebras/tests/test_quaternion.py\n@@ -112,6 +112,39 @@ def test_quaternion_conversions():\n                                                [sin(theta),  cos(theta), 0],\n                                                [0,           0,          1]])\n \n+def test_quaternion_rotation_iss1593():\n+    \"\"\"\n+    This test checks the fix for a sign mistake in the quaternion to rotation matrix conversion.\n+    \"\"\"\n+    # Original issue test\n+    q1 = Quaternion(cos(x/2), sin(x/2), 0, 0)\n+    assert(trigsimp(q1.to_rotation_matrix()) == Matrix([\n+                [1,      0,      0],\n+                [0, cos(x), -sin(x)],\n+                [0, sin(x), cos(x)]]))\n+\n+    # Additional test cases\n+    # 180 degree rotation around y-axis\n+    q2 = Quaternion(0, 1, 0, 0)\n+    assert(trigsimp(q2.to_rotation_matrix()) == Matrix([\n+                [-1,  0,  0],\n+                [ 0,  1,  0],\n+                [ 0,  0, -1]]))\n+\n+    # 90 degree rotation around z-axis\n+    q3 = Quaternion(sqrt(2)/2, 0, 0, sqrt(2)/2)\n+    assert(trigsimp(q3.to_rotation_matrix()) == Matrix([\n+                [0, -1, 0],\n+                [1,  0, 0],\n+                [0,  0, 1]]))\n+\n+    # 360 degree (or 0 degree) rotation around x-axis\n+    q4 = Quaternion(1, 0, 0, 0)\n+    assert(trigsimp(q4.to_rotation_matrix()) == Matrix([\n+                [1, 0, 0],\n+                [0, 1, 0],\n+                [0, 0, 1]]))\n+\n     assert q2.to_axis_angle() == ((0, 0, sin(theta/2)/Abs(sin(theta/2))),\n                                    2*acos(cos(theta/2)))\n \n@@ -119,4 +152,4 @@ def test_quaternion_conversions():\n                [cos(theta), -sin(theta), 0, sin(theta) - cos(theta) + 1],\n                [sin(theta),  cos(theta), 0, -sin(theta) - cos(theta) + 1],\n                [0,           0,          1,  0],\n-               [0,           0,          0,  1]])\n+               [0,           0,          0,  1]])\n",
  "sympy__sympy-15599": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex d8e8fc4..1ebc810 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1625,7 +1625,23 @@ def test_Mod():\n     assert (3*i*x) % (2*i*y) == i*Mod(3*x, 2*y)\n     assert Mod(4*i, 4) == 0\n \n-    # issue 8677\n+    \n+    # issue 15493\n+    i, j = symbols('i j', integer=True, positive=True)\n+    assert Mod(3*i, 2) == Mod(i, 2), \"Expected Mod(3*i, 2) to simplify to Mod(i, 2)\"\n+    assert Mod(8*i/j, 4) == 4*Mod(2*i/j, 1), \"Expected Mod(8*i/j, 4) to simplify\"\n+    assert Mod(8*i, 4) == 0, \"Expected Mod(8*i, 4) to be 0\"\n+\n+    # Additional tests for robustness\n+    # Negative integers\n+    assert Mod(-3*i, 2) == Mod(-i, 2), \"Expected Mod(-3*i, 2) to simplify to Mod(-i, 2)\"\n+    # Modulo by 1\n+    assert Mod(3*i, 1) == 0, \"Expected Mod(3*i, 1) to be 0\"\n+    # Larger constants\n+    assert Mod(9*i, 2) == Mod(i, 2), \"Expected Mod(9*i, 2) to simplify to Mod(i, 2)\"\n+    # Non-integer symbol case\n+    k = Symbol('k')\n+    assert Mod(3*k, 2) == Mod(k, 2), \"Expected Mod(3*k, 2) to simplify to Mod(k, 2)\"\n     n = Symbol('n', integer=True, positive=True)\n     assert factorial(n) % n == 0\n     assert factorial(n + 2) % n == 0\n",
  "sympy__sympy-15809": "",
  "sympy__sympy-15875": "diff --git a/sympy/core/tests/test_arit.py b/sympy/core/tests/test_arit.py\nindex 58ab306..32e0139 100644\n--- a/sympy/core/tests/test_arit.py\n+++ b/sympy/core/tests/test_arit.py\n@@ -1981,8 +1981,30 @@ def test_issue_8247_8354():\n         2) - 2*2**(1/3))**2''')\n     assert z.is_positive is False  # it's 0 (and a single _mexpand isn't enough)\n \n+from sympy import I, simplify, symbols\n \n-def test_Add_is_zero():\n+def test_issues_is_zero():\n+    # Original test for issue 15873\n+    e = -2*I + (1 + I)**2\n+    assert e.is_zero is None\n+    assert simplify(e).is_zero\n+\n+    # Additional tests\n+    f = 1 + I - I - 1  # This should be zero\n+    assert f.is_zero is True\n+\n+    g = (2 + 3*I) - (2 + 3*I)  # This should also be zero\n+    assert g.is_zero is True\n+\n+    h = 2*I + (3 - 2*I) - 3  # This should be zero too\n+    assert h.is_zero is True\n+\n+    i = 2*I + (3 - 2*I) + 3  # This is not zero\n+    assert i.is_zero is False\n+\n+    x, y = symbols('x y', zero=True)\n+    j = x + y\n+    assert j.is_zero is True\n     x, y = symbols('x y', zero=True)\n     assert (x + y).is_zero\n \n@@ -1993,4 +2015,4 @@ def test_issue_14392():\n def test_divmod():\n     assert divmod(x, y) == (x//y, x % y)\n     assert divmod(x, 3) == (x//3, x % 3)\n-    assert divmod(3, x) == (3//x, 3 % x)\n+    assert divmod(3, x) == (3//x, 3 % x)\n",
  "sympy__sympy-16450": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex aba4711..504457d 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -477,8 +477,45 @@ def test_logcombine_complex_coeff():\n     assert logcombine(i + 2*log(x), force=True) == \\\n         i + log(x**2)\n \n-\n-def test_issue_5950():\n+from sympy import Symbol, posify, symbols\n+\n+def test_posify_preserves_finite_assumption():\n+    # Test to ensure posify preserves 'finite' assumption\n+    k = Symbol('k', finite=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['finite'] is True\n+    assert eq.assumptions0['infinite'] is False\n+\n+def test_posify_preserves_integer_assumption():\n+    # Test to ensure posify preserves 'integer' assumption\n+    k = Symbol('k', integer=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['integer'] is True\n+\n+def test_posify_preserves_rational_assumption():\n+    # Test to ensure posify preserves 'rational' assumption\n+    k = Symbol('k', rational=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['rational'] is True\n+\n+def test_posify_preserves_prime_assumption():\n+    # Test to ensure posify preserves 'prime' assumption\n+    k = Symbol('k', prime=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['prime'] is True\n+\n+def test_posify_preserves_even_odd_assumption():\n+    # Test to ensure posify preserves 'even' assumption\n+    k = Symbol('k', even=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['even'] is True\n+    assert eq.assumptions0['odd'] is False\n+\n+    # Test to ensure posify preserves 'odd' assumption\n+    k = Symbol('k', odd=True)\n+    eq, rep = posify(k)\n+    assert eq.assumptions0['odd'] is True\n+    assert eq.assumptions0['even'] is False\n     x, y = symbols(\"x,y\", positive=True)\n     assert logcombine(log(3) - log(2)) == log(Rational(3,2), evaluate=False)\n     assert logcombine(log(x) - log(y)) == log(x/y)\n",
  "sympy__sympy-16766": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex 51a287f..b60b0e9 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n # -*- coding: utf-8 -*-\n from __future__ import absolute_import\n \n@@ -12,6 +13,7 @@ from sympy.printing.pycode import (\n     MpmathPrinter, NumPyPrinter, PythonCodePrinter, pycode, SciPyPrinter\n )\n from sympy.utilities.pytest import raises\n+from sympy.tensor import IndexedBase\n \n x, y, z = symbols('x y z')\n \n@@ -36,7 +38,12 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(sign(x)) == '(0.0 if x == 0 else math.copysign(1, x))'\n \n \n-def test_MpmathPrinter():\n+def test_indexed_support_in_PythonCodePrinter():\n+    prntr = PythonCodePrinter()\n+    p = IndexedBase(\"p\")\n+    assert prntr.doprint(p[0, 1]) == 'p[0, 1]'\n+    assert prntr.doprint(p[x]) == 'p[x]'\n+    assert prntr.doprint(p[x, y, z]) == 'p[x, y, z]'\n     p = MpmathPrinter()\n     assert p.doprint(sign(x)) == 'mpmath.sign(x)'\n     assert p.doprint(Rational(1, 2)) == 'mpmath.mpf(1)/mpmath.mpf(2)'\n",
  "sympy__sympy-16792": "",
  "sympy__sympy-16886": "diff --git a/sympy/crypto/tests/test_crypto.py b/sympy/crypto/tests/test_crypto.py\nindex 8b39574..3a57842 100644\n--- a/sympy/crypto/tests/test_crypto.py\n+++ b/sympy/crypto/tests/test_crypto.py\n@@ -237,8 +237,24 @@ def test_decipher_kid_rsa():\n     assert decipher_kid_rsa(3, (8, 3)) == 1\n     assert decipher_kid_rsa(2, (7, 4)) == 1\n \n+from sympy.crypto.crypto import encode_morse, decode_morse\n \n def test_encode_morse():\n+    # Test case provided in the original test patch\n+    assert encode_morse('12345') == '.----|..---|...--|....-|.....'\n+    assert encode_morse('67890') == '-....|--...|---..|----.|-----'\n+\n+    # Additional test to verify single number encoding\n+    assert encode_morse('1') == '.----'\n+    \n+    # Ensuring the rest of the numbers are not affected\n+    assert encode_morse('0') == '-----'\n+    assert encode_morse('9') == '----.'\n+    assert encode_morse('2') == '..---'\n+    assert encode_morse('3') == '...--'\n+    \n+    # Ensure the space is still encoded correctly\n+    assert encode_morse('1 2') == '.----||..---'\n     assert encode_morse('ABC') == '.-|-...|-.-.'\n     assert encode_morse('SMS ') == '...|--|...||'\n     assert encode_morse('SMS\\n') == '...|--|...||'\n@@ -248,8 +264,24 @@ def test_encode_morse():\n     assert encode_morse(' ', sep='``') == '````'\n     assert encode_morse('!@#$%^&*()_+') == '-.-.--|.--.-.|...-..-|-.--.|-.--.-|..--.-|.-.-.'\n \n+from sympy.crypto.crypto import encode_morse, decode_morse\n \n def test_decode_morse():\n+    # Ensure decoding works correctly for morse representation of numbers\n+    assert decode_morse('.----|..---|...--|....-|.....') == '12345'\n+    assert decode_morse('-....|--...|---..|----.|-----') == '67890'\n+    \n+    # Additional test to verify single number decoding\n+    assert decode_morse('.----') == '1'\n+    \n+    # Ensuring the rest of the numbers are not affected\n+    assert decode_morse('-----') == '0'\n+    assert decode_morse('----.') == '9'\n+    assert decode_morse('..---') == '2'\n+    assert decode_morse('...--') == '3'\n+    \n+    # Test for incorrect or malformed Morse code\n+    raises(KeyError, lambda: decode_morse('------'))\n     assert decode_morse('-.-|.|-.--') == 'KEY'\n     assert decode_morse('.-.|..-|-.||') == 'RUN'\n     raises(KeyError, lambda: decode_morse('.....----'))\n",
  "sympy__sympy-17139": "diff --git a/sympy/simplify/tests/test_simplify.py b/sympy/simplify/tests/test_simplify.py\nindex daf5f69..06b58f8 100644\n--- a/sympy/simplify/tests/test_simplify.py\n+++ b/sympy/simplify/tests/test_simplify.py\n@@ -808,10 +808,29 @@ def test_issue_15965():\n     bnew = y*Integral(x, x)\n     assert simplify(A + B) == anew + bnew\n     assert simplify(A) == anew\n+\n+def test_issue_17137_additional_cases():\n+    from sympy import cos, sin, Symbol, I, simplify, pi\n+    \n+    x = Symbol('x')\n+    y = Symbol('y')\n+    \n+    # Test cases to ensure simplify handles complex exponents correctly.\n+    assert simplify(cos(x)**I) == cos(x)**I, \"Failed on cos(x)**I\"\n+    assert simplify(cos(x)**(2 + 3*I)) == cos(x)**(2 + 3*I), \"Failed on cos(x)**(2 + 3*I)\"\n+    assert simplify(sin(x)**I) == sin(x)**I, \"Failed on sin(x)**I\"\n+    assert simplify(sin(x)**(2*I + 1)) == sin(x)**(2*I + 1), \"Failed on sin(x)**(2*I + 1)\"\n+    \n+    # A more complex expression\n+    assert simplify((cos(x)**I * sin(x)**I)) == (cos(x)**I * sin(x)**I), \"Failed on mixed trig complex\"\n+    \n+    # Edge case with numerical evaluation\n+    expr = simplify(cos(pi/3)**I)\n+    assert expr == cos(pi/3)**I or expr == 1/sin(pi/6)**I, \"Failed on numerical evaluation case\"\n     assert simplify(B) == bnew\n \n \n def test_issue_7971():\n     z = Integral(x, (x, 1, 1))\n     assert z != 0\n-    assert simplify(z) is S.Zero\n+    assert simplify(z) is S.Zero\n",
  "sympy__sympy-17318": "diff --git a/sympy/simplify/tests/test_sqrtdenest.py b/sympy/simplify/tests/test_sqrtdenest.py\nindex 7a6c0e1..4fd844c 100644\n--- a/sympy/simplify/tests/test_sqrtdenest.py\n+++ b/sympy/simplify/tests/test_sqrtdenest.py\n@@ -1,3 +1,4 @@\n+\n from sympy import sqrt, root, S, Symbol, sqrtdenest, Integral, cos\n from sympy.simplify.sqrtdenest import _subsets as subsets\n from sympy.utilities.pytest import slow\n@@ -174,9 +175,16 @@ def test_subsets():\n         [1, 0, 0, 0], [0, 1, 0, 0], [1, 1, 0, 0], [0, 0, 1, 0], [1, 0, 1, 0],\n         [0, 1, 1, 0], [1, 1, 1, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 1, 0, 1],\n         [1, 1, 0, 1], [0, 0, 1, 1], [1, 0, 1, 1], [0, 1, 1, 1], [1, 1, 1, 1]]\n-\n-\n-def test_issue_5653():\n+from sympy.simplify.sqrtdenest import _sqrt_match\n+from sympy.core.expr import unchanged\n+\n+def test_issue_12420():\n+    I = S.ImaginaryUnit\n+    assert _sqrt_match(4 + I) == []\n+    result = sqrtdenest((3 - sqrt(2)*sqrt(4 + 3*I) + 3*I)/2)\n+    assert result == (3/2 - sqrt(2)*sqrt(4 + 3*I)/2 + 3*I/2)\n+    e = 3 - sqrt(2)*sqrt(4 + I) + 3*I\n+    assert sqrtdenest(e) == e\n     assert sqrtdenest(\n         sqrt(2 + sqrt(2 + sqrt(2)))) == sqrt(2 + sqrt(2 + sqrt(2)))\n \n",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..8fb5042 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,5 @@\n-from sympy import I, Rational, Symbol, pi, sqrt, S\n+\n+from sympy import I, Rational, Symbol, pi, sqrt, S, sympify\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n from sympy.matrices import Matrix\n@@ -91,6 +92,15 @@ def test_point():\n     assert (-p3).__rsub__(p4) == p3.midpoint(p4).scale(2, 2)\n \n     assert p4 * 5 == Point(5, 5)\n+\n+    # New test cases to verify multiplication with sympified numbers\n+    point1 = Point(0, 0)\n+    point2 = Point(1, 1)\n+    sym_num = sympify(2.0)\n+\n+    # This test case verifies the issue mentioned\n+    assert point1 + point2 * sym_num == Point(2, 2)\n+    assert point1 + sym_num * point2 == Point(2, 2)\n     assert p4 / 5 == Point(0.2, 0.2)\n \n     raises(ValueError, lambda: Point(0, 0) + 10)\n",
  "sympy__sympy-18189": "diff --git a/sympy/solvers/tests/test_diophantine.py b/sympy/solvers/tests/test_diophantine.py\nindex 5de4546..d308adf 100644\n--- a/sympy/solvers/tests/test_diophantine.py\n+++ b/sympy/solvers/tests/test_diophantine.py\n@@ -474,6 +474,10 @@ def test_descent():\n     raises(TypeError, lambda: descent(4, 3))\n \n \n+from sympy import symbols\n+\n+x, y = symbols('x y', integer=True)\n+\n def test_diophantine():\n     assert check_solutions((x - y)*(y - z)*(z - x))\n     assert check_solutions((x - y)*(x**2 + y**2 - z**2))\n@@ -547,6 +551,13 @@ def test_diophantine():\n     assert diophantine(x**2 + y**2 +3*x- 5, permute=True) == \\\n         set([(-1, 1), (-4, -1), (1, -1), (1, 1), (-4, 1), (-1, -1), (4, 1), (4, -1)])\n \n+    # Additional test cases for issue 18186\n+    # Testing diophantine with different order of symbols and permute=True\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(x, y), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+    assert diophantine(y**4 + x**4 - 2**4 - 3**4, syms=(y, x), permute=True) == \\\n+        set([(-3, -2), (-3, 2), (-2, -3), (-2, 3), (2, -3), (2, 3), (3, -2), (3, 2)])\n+\n     # issue 18122\n     assert check_solutions(x**2-y)\n     assert check_solutions(y**2-x)\n",
  "sympy__sympy-18763": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex ba93bdc..e06caf3 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -672,12 +672,21 @@ def test_latex_derivatives():\n         r'\\frac{d^{\\max\\left(n_{1}, n_{2}\\right)}}{d x^{\\max\\left(n_{1}, n_{2}\\right)}} f{\\left(x \\right)}'\n \n \n+from sympy import Subs\n+from sympy.abc import x, y\n+\n def test_latex_subs():\n     assert latex(Subs(x*y, (\n         x, y), (1, 2))) == r'\\left. x y \\right|_{\\substack{ x=1\\\\ y=2 }}'\n \n \n-def test_latex_integrals():\n+def test_latex_subs_parenthesized_expression():\n+    # Testing the correct parenthesization after fix\n+    assert latex(3*Subs(-x+y, (x,), (1,))) == r'3 \\left. \\left(- x + y\\right) \\right|_{\\substack{ x=1 }}'\n+    # Additional test to ensure multiplication with Subs parenthesizes correctly\n+    assert latex(2*Subs(x*y - x, (x, y), (2, 3))) == r'2 \\left. \\left(x y - x\\right) \\right|_{\\substack{ x=2\\\\ y=3 }}'\n+    # Additional test case to ensure nested Subs parenthesizes correctly\n+    assert latex(Subs(Subs(-x+y, (x,), (1,)), (y,), (2,))) == r'\\left. \\left( \\left.- x + y\\right|_{\\substack{ x=1 }} \\right) \\right|_{\\substack{ y=2 }}'\n     assert latex(Integral(log(x), x)) == r\"\\int \\log{\\left(x \\right)}\\, dx\"\n     assert latex(Integral(x**2, (x, 0, 1))) == \\\n         r\"\\int\\limits_{0}^{1} x^{2}\\, dx\"\n",
  "sympy__sympy-19346": "",
  "sympy__sympy-19495": "",
  "sympy__sympy-19637": "diff --git a/sympy/core/tests/test_sympify.py b/sympy/core/tests/test_sympify.py\nindex 4d20fb4..699c867 100644\n--- a/sympy/core/tests/test_sympify.py\n+++ b/sympy/core/tests/test_sympify.py\n@@ -476,7 +476,34 @@ def test_issue_4988_builtins():\n     assert exp2 == C  # Make sure it did not get mixed up with sympy.C\n \n \n-def test_geometry():\n+from sympy.core.sympify import kernS\n+from sympy import Rational, Interval, Add, Mul, Symbol, exp\n+from sympy.abc import x, y\n+\n+def test_kernS_issue():\n+    # Original test case: check if kernS does not error and simplifies correctly\n+    assert kernS(\"(2*x)/(x-1)\") == 2*x/(x-1)\n+    \n+    # Additional test cases to ensure robustness and avoid UnboundLocalError\n+\n+    # Test with space-less input\n+    assert kernS(\"2*x+3\") == 2*x + 3\n+    # Test a number input, should return number\n+    assert kernS(\"5\") == 5\n+    # Test a single variable\n+    assert kernS(\"x\") == x\n+    # Test input with special symbols\n+    assert kernS(\"x*y\") == x*y\n+    # Test complex expression\n+    assert kernS(\"x^2+2*x+1\") == (x**2 + 2*x + 1)\n+    # Edge case: empty string\n+    try:\n+        kernS(\"\") \n+    except:\n+        pass  # expect an exception since empty input is invalid\n+    # Test a starting complex expression\n+    test = '(1-2**-(4+1)*(1-y)*x)'\n+    assert kernS(test) == (1 - x*(1 - y)/32)\n     p = sympify(Point(0, 1))\n     assert p == Point(0, 1) and isinstance(p, Point)\n     L = sympify(Line(p, (1, 0)))\n",
  "sympy__sympy-19783": "diff --git a/sympy/physics/quantum/tests/test_operator.py b/sympy/physics/quantum/tests/test_operator.py\nindex 799aaae..9757508 100644\n--- a/sympy/physics/quantum/tests/test_operator.py\n+++ b/sympy/physics/quantum/tests/test_operator.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Derivative, diff, Function, Integer, Mul, pi, sin, Symbol,\n                    symbols)\n from sympy.physics.quantum.qexpr import QExpr\n@@ -7,6 +8,7 @@ from sympy.physics.quantum.operator import (Operator, UnitaryOperator,\n                                             HermitianOperator, OuterProduct,\n                                             DifferentialOperator,\n                                             IdentityOperator)\n+from sympy.physics.quantum import qapply\n from sympy.physics.quantum.state import Ket, Bra, Wavefunction\n from sympy.physics.quantum.qapply import qapply\n from sympy.physics.quantum.represent import represent\n@@ -85,6 +87,13 @@ def test_unitary():\n \n \n def test_identity():\n+    O = Operator('O')\n+    I = IdentityOperator()\n+    D_O = Dagger(O)\n+\n+    # Ensuring the specific issue is resolved\n+    assert I * D_O == D_O\n+    assert D_O * I == D_O\n     I = IdentityOperator()\n     O = Operator('O')\n     x = Symbol(\"x\")\n",
  "sympy__sympy-19954": "diff --git a/sympy/combinatorics/tests/test_perm_groups.py b/sympy/combinatorics/tests/test_perm_groups.py\nindex 3f4bb48..fbcd3bc 100644\n--- a/sympy/combinatorics/tests/test_perm_groups.py\n+++ b/sympy/combinatorics/tests/test_perm_groups.py\n@@ -906,7 +906,33 @@ def test_sylow_subgroup():\n     assert G.order()/S.order() % 2 > 0\n \n \n-@slow\n+def test_sylow_subgroup_indexerror():\n+    from sympy.combinatorics import DihedralGroup\n+\n+    # Test case for DihedralGroup(18) which previously caused IndexError\n+    G = DihedralGroup(18)\n+    try:\n+        S2 = G.sylow_subgroup(p=2)\n+        assert S2.order() == 4\n+    except IndexError as e:\n+        assert False, f\"Unexpected IndexError: {e}\"\n+\n+    # Test case for DihedralGroup(2*25) which previously caused IndexError\n+    G = DihedralGroup(50)\n+    try:\n+        S2 = G.sylow_subgroup(p=2)\n+        assert S2.order() == 4\n+    except IndexError as e:\n+        assert False, f\"Unexpected IndexError: {e}\"\n+\n+    # Additional test cases\n+    G = DihedralGroup(24)\n+    S3 = G.sylow_subgroup(p=3)\n+    assert S3.order() == 3\n+\n+    G = DihedralGroup(32)\n+    S2 = G.sylow_subgroup(p=2)\n+    assert S2.order() == 32\n def test_presentation():\n     def _test(P):\n         G = P.presentation()\n",
  "sympy__sympy-20154": "",
  "sympy__sympy-20801": "diff --git a/sympy/core/tests/test_numbers.py b/sympy/core/tests/test_numbers.py\nindex 8e1c7e2..a98de32 100644\n--- a/sympy/core/tests/test_numbers.py\n+++ b/sympy/core/tests/test_numbers.py\n@@ -571,25 +571,85 @@ def test_Float():\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=10))\n     raises(ValueError, lambda: Float(\"1.23\", dps=3, precision=\"\"))\n     raises(ValueError, lambda: Float(\"1.23\", dps=\"\", precision=\"\"))\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # Test cases for issue https://github.com/sympy/sympy/issues/20796\n+    # Verify that S(0.0) and S.false comparisons return False\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+    # Additional test cases to verify commutativity and mixed type comparison\n+    assert (S(0.0) == S.false) == (S.false == S(0.0))\n+    assert (S(0) == S.false) == (S.false == S(0))\n     # from NumberSymbol\n     assert same_and_same_prec(Float(pi, 32), pi.evalf(32))\n     assert same_and_same_prec(Float(Catalan), Catalan.evalf())\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # Test cases for issue https://github.com/sympy/sympy/issues/20796\n+    # Verify that S(0.0) and S.false comparisons return False\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+    # Additional test cases to verify commutativity and mixed type comparison\n+    assert (S(0.0) == S.false) == (S.false == S(0.0))\n+    assert (S(0) == S.false) == (S.false == S(0))\n     # oo and nan\n     u = ['inf', '-inf', 'nan', 'iNF', '+inf']\n     v = [oo, -oo, nan, oo, oo]\n     for i, a in zip(u, v):\n         assert Float(i) is a\n-\n-\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # Test cases for issue https://github.com/sympy/sympy/issues/20796\n+    # Verify that S(0.0) and S.false comparisons return False\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+    # Additional test cases to verify commutativity and mixed type comparison\n+    assert (S(0.0) == S.false) == (S.false == S(0.0))\n+    assert (S(0) == S.false) == (S.false == S(0))\n+\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # Test cases for issue https://github.com/sympy/sympy/issues/20796\n+    # Verify that S(0.0) and S.false comparisons return False\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+    # Additional test cases to verify commutativity and mixed type comparison\n+    assert (S(0.0) == S.false) == (S.false == S(0.0))\n+    assert (S(0) == S.false) == (S.false == S(0))\n @conserve_mpmath_dps\n def test_float_mpf():\n     import mpmath\n     mpmath.mp.dps = 100\n     mp_pi = mpmath.pi()\n-\n+from sympy import S\n+\n+def test_zero_not_false():\n+    # Test cases for issue https://github.com/sympy/sympy/issues/20796\n+    # Verify that S(0.0) and S.false comparisons return False\n+    assert (S(0.0) == S.false) is False\n+    assert (S.false == S(0.0)) is False\n+    assert (S(0) == S.false) is False\n+    assert (S.false == S(0)) is False\n+\n+    # Additional test cases to verify commutativity and mixed type comparison\n+    assert (S(0.0) == S.false) == (S.false == S(0.0))\n+    assert (S(0) == S.false) == (S.false == S(0))\n     assert Float(mp_pi, 100) == Float(mp_pi._mpf_, 100) == pi.evalf(100)\n \n     mpmath.mp.dps = 15\n",
  "sympy__sympy-21379": "diff --git a/sympy/core/tests/test_subs.py b/sympy/core/tests/test_subs.py\nindex 3ae623b..1252c40 100644\n--- a/sympy/core/tests/test_subs.py\n+++ b/sympy/core/tests/test_subs.py\n@@ -1,14 +1,47 @@\n+\n from sympy import (\n     Symbol, Wild, sin, cos, exp, sqrt, pi, Function, Derivative,\n     Integer, Eq, symbols, Add, I, Float, log, Rational,\n     Lambda, atan2, cse, cot, tan, S, Tuple, Basic, Dict,\n     Piecewise, oo, Mul, factor, nsimplify, zoo, Subs, RootOf,\n     AccumBounds, Matrix, zeros, ZeroMatrix)\n-from sympy.core.basic import _aresame\n+from sympy.functions.elementary.hyperbolic import sinh\n+from sympy.functions.elementary.piecewise import Piecewise\n+from sympy.core.cache import clear_cache\n from sympy.testing.pytest import XFAIL\n from sympy.abc import a, x, y, z, t\n \n-def test_subs():\n+def test_issue_21373():\n+    # Test to verify fix for issue 21373\n+\n+    # Clear cache initially\n+    clear_cache()\n+    # Define symbols with 'real' assumption\n+    x_r, y_r, z_r = symbols('x_r y_r z_r', real=True)\n+    \n+    # Define the expression subject to the issue\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    \n+    # Check substitution does not raise PolynomialError\n+    try:\n+        result = expr.subs({1: 1.0})\n+    except PolynomialError:\n+        result = None\n+    \n+    assert result is not None, \"Expected substitution to succeed without PolynomialError\"\n+\n+    # No cache clearing here, just repeat\n+    expr.subs({1: 1.0})\n+\n+    # Test with variations\n+    clear_cache()\n+    z_r = Symbol('z_r')  # z does not need to be real\n+    expr2 = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r))\n+    assert expr2.subs({1: 1.0}) is not None\n+\n+    clear_cache()\n+    expr3 = sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z_r)\n+    assert expr3.subs({1: 1.0}) is not None\n     n3 = Rational(3)\n     e = x\n     e = e.subs(x, n3)\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..8c2dc6f 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -9,13 +9,32 @@ from sympy.polys.monomials import (\n     Monomial,\n )\n \n-from sympy.polys.polyerrors import ExactQuotientFailed\n+from sympy.polys.monomials import itermonomials\n+from sympy.polys.orderings import monomial_key\n \n from sympy.abc import a, b, c, x, y, z\n from sympy.core import S, symbols\n from sympy.testing.pytest import raises\n \n \n+def test_itermonomials_min_degrees_issue():\n+    x, y, z = symbols('x y z')\n+\n+    # Issue scenarios:\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y], 3, 2)) == {x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3}\n+\n+    assert set(itermonomials([x, y, z], 3, 3)) == {x**3, y**3, z**3, x**2*y, x**2*z, y**2*x, y**2*z, z**2*x, z**2*y, x*y**2, x*z**2, y*z**2, x*y*z}\n+    assert set(itermonomials([x, y, z], 3, 2)) == {x**2, y**2, z**2, x*y, x*z, y*z, x**3, y**3, z**3, x**2*y, x**2*z, y**2*x, y**2*z, z**2*x, z**2*y, x*y**2, x*z**2, y*z**2, x*y*z}\n+\n+    # General functionality tests\n+    assert set(itermonomials([x, y], 2, 1)) == {x, y, x**2, x*y, y**2}\n+    assert set(itermonomials([x, y, z], 2, 1)) == {x, y, z, x**2, y**2, z**2, x*y, x*z, y*z}\n+\n+    # Test including commutative variables with degrees\n+    a, b = symbols('a b', commutative=False)\n+    assert set(itermonomials([a, b, x], 2, 1)) == {a, b, x, a**2, b**2, x**2, a*b, b*a, a*x, b*x, x*a, x*b}\n+\n def test_monomials():\n \n     # total_degree tests\n",
  "sympy__sympy-22456": "diff --git a/sympy/codegen/tests/test_ast.py b/sympy/codegen/tests/test_ast.py\nindex 6c38ed6..9d18b70 100644\n--- a/sympy/codegen/tests/test_ast.py\n+++ b/sympy/codegen/tests/test_ast.py\n@@ -267,6 +267,8 @@ def test_String():\n     assert st == String('foobar')\n     assert st.text == 'foobar'\n     assert st.func(**st.kwargs()) == st\n+    # Added test to verify expr.func(*expr.args) == expr for String\n+    assert st.func(*st.args) == st\n \n \n     class Signifier(String):\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..063eee7 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,4 +1,8 @@\n+\n from sympy.core.basic import Basic\n+from sympy.core.numbers import Integer\n+from sympy.core.parameters import evaluate\n+from sympy.testing.pytest import raises\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n@@ -440,7 +444,20 @@ def test_unit():\n     assert Point(1, 1).unit == Point(sqrt(2)/2, sqrt(2)/2)\n \n \n-def test_dot():\n+def test_issue_22684():\n+    # Test evaluating Point2D within evaluate(False) context\n+    with evaluate(False):\n+        assert Point2D(Integer(1), Integer(2)) == Point2D(1, 2)\n+        # Ensure that imaginary coordinates raise an error\n+        raises(ValueError, lambda: Point2D(Integer(1), Integer(2) + I))\n+\n+    # Directly testing with evaluate=False argument in Point2D creation\n+    p1 = Point2D(Integer(1), Integer(2), evaluate=False)\n+    assert p1 == Point2D(1, 2)\n+\n+    # Testing without evaluate=False should automatically evaluate\n+    p2 = Point2D(Integer(1), Integer(2))\n+    assert p2 == Point2D(1, 2)\n     raises(TypeError, lambda: Point(1, 2).dot(Line((0, 0), (1, 1))))\n \n \n",
  "sympy__sympy-22914": "diff --git a/sympy/printing/tests/test_pycode.py b/sympy/printing/tests/test_pycode.py\nindex ab6551d..30c8312 100644\n--- a/sympy/printing/tests/test_pycode.py\n+++ b/sympy/printing/tests/test_pycode.py\n@@ -1,3 +1,4 @@\n+\n from sympy.codegen import Assignment\n from sympy.codegen.ast import none\n from sympy.codegen.cfunctions import expm1, log1p\n@@ -6,7 +7,7 @@ from sympy.codegen.matrix_nodes import MatrixSolve\n from sympy.core import Expr, Mod, symbols, Eq, Le, Gt, zoo, oo, Rational, Pow\n from sympy.core.numbers import pi\n from sympy.core.singleton import S\n-from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt\n+from sympy.functions import acos, KroneckerDelta, Piecewise, sign, sqrt, Min, Max\n from sympy.logic import And, Or\n from sympy.matrices import SparseMatrix, MatrixSymbol, Identity\n from sympy.printing.pycode import (\n@@ -29,6 +30,28 @@ def test_PythonCodePrinter():\n \n     assert not prntr.module_imports\n \n+    # Test cases for Min and Max\n+    assert prntr.doprint(Min(x, y)) == 'min(x, y)'\n+    assert prntr.doprint(Max(x, y)) == 'max(x, y)'\n+    assert prntr.doprint(Min(x, y, z)) == 'min(x, y, z)'\n+    assert prntr.doprint(Max(x, y, z)) == 'max(x, y, z)'\n+\n+    # Test with nested Min and Max\n+    assert prntr.doprint(Min(Max(x, y), z)) == 'min(max(x, y), z)'\n+    assert prntr.doprint(Max(Min(x, y), z)) == 'max(min(x, y), z)'\n+\n+    # Test with constants and expressions\n+    assert prntr.doprint(Min(x + 2, 3*y)) == 'min(x + 2, 3*y)'\n+    assert prntr.doprint(Max(x**2, y**2)) == 'max(x**2, y**2)'\n+\n+    # Test with single argument\n+    assert prntr.doprint(Min(x)) == 'min(x)'\n+    assert prntr.doprint(Max(y)) == 'max(y)'\n+\n+    # Test with expressions that should return only the argument itself\n+    assert prntr.doprint(Min(x, x)) == 'min(x, x)'\n+    assert prntr.doprint(Max(y, y)) == 'max(y, y)'\n+\n     assert prntr.doprint(x**y) == 'x**y'\n     assert prntr.doprint(Mod(x, 2)) == 'x % 2'\n     assert prntr.doprint(-Mod(x, y)) == '-(x % y)'\n@@ -37,6 +60,28 @@ def test_PythonCodePrinter():\n     assert prntr.doprint(Or(x, y)) == 'x or y'\n     assert not prntr.module_imports\n \n+    # Test cases for Min and Max\n+    assert prntr.doprint(Min(x, y)) == 'min(x, y)'\n+    assert prntr.doprint(Max(x, y)) == 'max(x, y)'\n+    assert prntr.doprint(Min(x, y, z)) == 'min(x, y, z)'\n+    assert prntr.doprint(Max(x, y, z)) == 'max(x, y, z)'\n+\n+    # Test with nested Min and Max\n+    assert prntr.doprint(Min(Max(x, y), z)) == 'min(max(x, y), z)'\n+    assert prntr.doprint(Max(Min(x, y), z)) == 'max(min(x, y), z)'\n+\n+    # Test with constants and expressions\n+    assert prntr.doprint(Min(x + 2, 3*y)) == 'min(x + 2, 3*y)'\n+    assert prntr.doprint(Max(x**2, y**2)) == 'max(x**2, y**2)'\n+\n+    # Test with single argument\n+    assert prntr.doprint(Min(x)) == 'min(x)'\n+    assert prntr.doprint(Max(y)) == 'max(y)'\n+\n+    # Test with expressions that should return only the argument itself\n+    assert prntr.doprint(Min(x, x)) == 'min(x, x)'\n+    assert prntr.doprint(Max(y, y)) == 'max(y, y)'\n+\n     assert prntr.doprint(pi) == 'math.pi'\n     assert prntr.module_imports == {'math': {'pi'}}\n \n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..25e078e 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,6 +1175,10 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+from sympy import lambdify\n+from sympy.abc import x, y\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n@@ -1182,7 +1186,19 @@ def test_lambdify_inspect():\n     assert 'x**2' in inspect.getsource(f)\n \n \n-def test_issue_14941():\n+def test_single_element_tuple():\n+    # Test that lambdify correctly converts a single-element tuple\n+    f2b = lambdify([], (1,))\n+    assert f2b() == (1,)\n+    source_code = inspect.getsource(f2b)\n+    assert 'return (1,)' in source_code\n+\n+def test_multiple_element_tuple():\n+    # Test that lambdify converts a multiple-element tuple correctly\n+    f2c = lambdify([], (1, 2))\n+    assert f2c() == (1, 2)\n+    source_code = inspect.getsource(f2c)\n+    assert 'return (1, 2)' in source_code\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-23534": "diff --git a/sympy/core/tests/test_symbol.py b/sympy/core/tests/test_symbol.py\nindex 645c231..86063d1 100644\n--- a/sympy/core/tests/test_symbol.py\n+++ b/sympy/core/tests/test_symbol.py\n@@ -1,3 +1,10 @@\n+\n+def test_symbols_with_function_class():\n+    # Verify that using symbols with extra parentheses and cls=Function creates UndefinedFunction objects\n+    q, u = symbols(('q:2', 'u:2'), cls=Function)\n+    assert isinstance(q[0], UndefinedFunction), \"Expected an UndefinedFunction instance, but got {}\".format(type(q[0]))\n+    assert isinstance(u[1], UndefinedFunction), \"Expected an UndefinedFunction instance, but got {}\".format(type(u[1]))\n+\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.relational import (GreaterThan, LessThan, StrictGreaterThan, StrictLessThan)\n from sympy.core.symbol import (Dummy, Symbol, Wild, symbols)\n@@ -5,6 +12,7 @@ from sympy.core.sympify import sympify  # can't import as S yet\n from sympy.core.symbol import uniquely_named_symbol, _symbol, Str\n \n from sympy.testing.pytest import raises\n+from sympy.core.function import Function, UndefinedFunction\n from sympy.core.symbol import disambiguate\n \n def test_Str():\n",
  "sympy__sympy-23824": "diff --git a/sympy/physics/hep/tests/test_gamma_matrices.py b/sympy/physics/hep/tests/test_gamma_matrices.py\nindex a4e0962..68b38ee 100644\n--- a/sympy/physics/hep/tests/test_gamma_matrices.py\n+++ b/sympy/physics/hep/tests/test_gamma_matrices.py\n@@ -191,6 +191,31 @@ def test_kahane_algorithm():\n \n     execute_gamma_simplify_tests_for_function(tfunc, D=4)\n \n+def test_kahane_leading_gamma_matrix_order():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\", LorentzIndex)\n+    \n+    # Test case 1\n+    t1 = G(mu) * G(-mu) * G(rho) * G(sigma)\n+    r1 = kahane_simplify(t1)\n+    assert r1.equals(4 * G(rho) * G(sigma)), \"Failed test case with simplified first order\"\n+    \n+    # Test case 2 (order sensitivity)\n+    t2 = G(rho) * G(sigma) * G(mu) * G(-mu)\n+    r2 = kahane_simplify(t2)\n+    assert r2.equals(4 * G(rho) * G(sigma)), \"Failed test case with simplified second order\"\n+\n+    # Additional test cases for robustness\n+    t3 = G(rho) * G(mu) * G(-mu) * G(sigma)\n+    r3 = kahane_simplify(t3)\n+    assert r3.equals(4 * G(rho) * G(sigma)), \"Failed test case with mixed order\"\n+\n+    t4 = G(mu) * G(rho) * G(sigma) * G(-mu)\n+    r4 = kahane_simplify(t4)\n+    assert r4.equals(4 * G(rho) * G(sigma)), \"Failed test case with different order\"\n+    \n+    t5 = G(mu) * G(-mu) * G(nu) * G(rho) * G(sigma)\n+    r5 = kahane_simplify(t5)\n+    assert r5.equals(4 * G(nu) * G(rho) * G(sigma)), \"Failed test case with extra gamma matrix\"\n \n def test_kahane_simplify1():\n     i0,i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,i11,i12,i13,i14,i15 = tensor_indices('i0:16', LorentzIndex)\n",
  "sympy__sympy-23950": "diff --git a/sympy/sets/tests/test_contains.py b/sympy/sets/tests/test_contains.py\nindex 4bcc7c8..3706968 100644\n--- a/sympy/sets/tests/test_contains.py\n+++ b/sympy/sets/tests/test_contains.py\n@@ -41,11 +41,22 @@ def test_binary_symbols():\n def test_as_set():\n     x = Symbol('x')\n     y = Symbol('y')\n-    # Contains is a BooleanFunction whose value depends on an arg's\n+    # Additional tests to ensure Contains.as_set() raises NotImplementedError, as expected.\n+    # This confirms that it does not return a Contains object.\n+    \n+    # Test with Integers\n+    raises(NotImplementedError, lambda: Contains(x, S.Integers).as_set())\n+    # Test with Reals\n+    raises(NotImplementedError, lambda: Contains(x, S.Reals).as_set())\n+    # Existing tests should still pass after the fix\n+\n+def test_piecewise_contains():\n+    # Verify that Piecewise correctly raises an error when Contains.as_set() is incorrectly used\n+    raises(AttributeError, lambda: Piecewise((6, Contains(x, S.Reals)), (7, True)))\n     # containment in a Set -- rewriting as a Set is not yet implemented\n     raises(NotImplementedError, lambda:\n            Contains(x, FiniteSet(y)).as_set())\n \n def test_type_error():\n     # Pass in a parameter not of type \"set\"\n-    raises(TypeError, lambda: Contains(2, None))\n+    raises(TypeError, lambda: Contains(2, None))\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..a7edada 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,30 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    from sympy.core.numbers import E\n+    from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+    from sympy.physics.units.quantities import Quantity\n+    from sympy.physics.units.systems.si import SI\n+    from sympy import exp\n+    from sympy.physics.units.dimensions import Dimension\n+\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..0016830 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -562,6 +562,41 @@ def test_issue_24062():\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n \n+from sympy.physics.units import Quantity\n+from sympy.physics.units.systems.si import SI\n+from sympy.physics.units import meter, second\n+\n+def test_issue_equivalent_dimensions_in_addition():\n+    from sympy.physics.units import velocity, acceleration, time\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+\n+    expr = A1 * T1 + V1\n+    # should not throw ValueError here if dimensions are equivalent\n+    factor, dimension = SI._collect_factor_and_dimension(expr)\n+    assert dimension == SI.get_quantity_dimension(V1)\n+\n+def test_collect_factor_and_dimension_with_various_units():\n+    from sympy.physics.units import frequency, hertz\n+\n+    F1 = Quantity('F1')\n+    SI.set_quantity_dimension(F1, frequency)\n+    SI.set_quantity_scale_factor(F1, 1 * hertz)\n+\n+    expr = F1\n+    factor, dimension = SI._collect_factor_and_dimension(expr)\n+    assert dimension == SI.get_quantity_dimension(F1)\n+\n def test_prefixed_property():\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n",
  "sympy__sympy-24443": "diff --git a/sympy/combinatorics/tests/test_homomorphisms.py b/sympy/combinatorics/tests/test_homomorphisms.py\nindex 0a025da..b93f126 100644\n--- a/sympy/combinatorics/tests/test_homomorphisms.py\n+++ b/sympy/combinatorics/tests/test_homomorphisms.py\n@@ -1,3 +1,4 @@\n+\n from sympy.combinatorics import Permutation\n from sympy.combinatorics.perm_groups import PermutationGroup\n from sympy.combinatorics.homomorphisms import homomorphism, group_isomorphism, is_isomorphic\n@@ -106,4 +107,22 @@ def test_check_homomorphism():\n     a = Permutation(1,2,3,4)\n     b = Permutation(1,3)\n     G = PermutationGroup([a, b])\n-    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+    raises(ValueError, lambda: homomorphism(G, G, [a], [a]))\n+\n+    # Test case for issue fix: Check that the correct homomorphism doesn't raise an error\n+    D3 = DihedralGroup(3)\n+    # This should create a valid homomorphism\n+    T = homomorphism(D3, D3, D3.generators, D3.generators)\n+    assert T.is_isomorphism()\n+\n+    # Additional test case: Check homomorphism when inverting a generator\n+    D4 = DihedralGroup(4)\n+    p1, p2 = D4.generators\n+    # Create a homomorphism mapping each generator to its inverse\n+    T_inv = homomorphism(D4, D4, D4.generators, [p1**-1, p2**-1])\n+    assert not T_inv.is_isomorphism()\n+\n+    # Test case with more complex generator manipulation including inversions and identity elements\n+    G2 = PermutationGroup([p1, p1**-1 * p2])\n+    T_complex = homomorphism(G2, D4, G2.generators, [p2, p1**-1])\n+    assert not T_complex.is_isomorphism()\n",
  "sympy__sympy-24539": "diff --git a/sympy/polys/tests/test_rings.py b/sympy/polys/tests/test_rings.py\nindex 1f0e405..7d776bb 100644\n--- a/sympy/polys/tests/test_rings.py\n+++ b/sympy/polys/tests/test_rings.py\n@@ -270,7 +270,35 @@ def test_PolyElement_as_expr():\n     R, = ring(\"\", ZZ)\n     assert R(3).as_expr() == 3\n \n-def test_PolyElement_from_expr():\n+def test_PolyElement_as_expr_with_symbols():\n+    from sympy import symbols\n+\n+    # Test for single variable polynomial\n+    R, x = ring(\"x\", ZZ)\n+    f = 2*x + 5\n+    A = symbols(\"a\")\n+    g = 2*A + 5\n+    assert f.as_expr(A) == g\n+\n+    # Test for extra symbols beyond what is needed\n+    B = symbols(\"b\")\n+    raises(ValueError, lambda: f.as_expr(A, B))\n+\n+    # Test for no variables\n+    R, = ring(\"\", ZZ)\n+    f = R(10)\n+    assert f.as_expr() == 10\n+\n+    # Test a ring with different number of generators\n+    R, x, y, z = ring(\"x,y,z\", ZZ)\n+    f = 3*x**2 + 2*y + z\n+    U, V, W = symbols(\"u,v,w\")\n+    g = 3*U**2 + 2*V + W\n+    assert f.as_expr(U, V, W) == g\n+\n+    # Test for more variables in ring\n+    U, V = symbols(\"u,v\")\n+    raises(ValueError, lambda: f.as_expr(U, V))\n     x, y, z = symbols(\"x,y,z\")\n     R, X, Y, Z = ring((x, y, z), ZZ)\n \n",
  "sympy__sympy-24661": "diff --git a/sympy/parsing/tests/test_sympy_parser.py b/sympy/parsing/tests/test_sympy_parser.py\nindex 3723931..e9585ab 100644\n--- a/sympy/parsing/tests/test_sympy_parser.py\n+++ b/sympy/parsing/tests/test_sympy_parser.py\n@@ -274,13 +274,43 @@ def test_convert_equals_signs():\n         transformations=transformations) == Eq(Eq(2*y, x), False)\n \n \n+from sympy.core import Symbol, Function, Float, Rational, Integer, I, Mul, Pow, Eq, Lt, Le, Gt, Ge, Ne\n+from sympy.parsing.sympy_parser import parse_expr\n+\n def test_parse_function_issue_3539():\n     x = Symbol('x')\n     f = Function('f')\n     assert parse_expr('f(x)') == f(x)\n \n \n-def test_split_symbols_numeric():\n+def test_issue_24288():\n+    inputs = {\n+        \"1 < 2\": Lt(1, 2, evaluate=False),\n+        \"1 <= 2\": Le(1, 2, evaluate=False),\n+        \"1 > 2\": Gt(1, 2, evaluate=False),\n+        \"1 >= 2\": Ge(1, 2, evaluate=False),\n+        \"1 != 2\": Ne(1, 2, evaluate=False),\n+        \"1 == 2\": Eq(1, 2, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n+\n+def test_issue_24288_additional_cases():\n+    # Test cases with variables and expressions\n+    x = Symbol('x')\n+    y = Symbol('y')\n+    inputs = {\n+        \"x < y\": Lt(x, y, evaluate=False),\n+        \"x <= y\": Le(x, y, evaluate=False),\n+        \"x > y\": Gt(x, y, evaluate=False),\n+        \"x >= y\": Ge(x, y, evaluate=False),\n+        \"x != y\": Ne(x, y, evaluate=False),\n+        \"x == y\": Eq(x, y, evaluate=False),\n+        \"2*x < 3*y + 1\": Lt(2*x, 3*y + 1, evaluate=False),\n+        \"x + 2 <= x + 3\": Le(x + 2, x + 3, evaluate=False)\n+    }\n+    for text, result in inputs.items():\n+        assert parse_expr(text, evaluate=False) == result\n     transformations = (\n         standard_transformations +\n         (implicit_multiplication_application,))\n",
  "astropy__astropy-14369": "",
  "astropy__astropy-14598": "",
  "django__django-11299": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex b3dc643..ad9c155 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -1898,6 +1898,27 @@ class OperationTests(OperationTestBase):\n         author = Author.objects.create(name='Albert', rebate='10%')\n         self.assertEqual(Author.objects.get(), author)\n \n+    @skipUnlessDBFeature('supports_table_check_constraints')\n+    def test_check_constraint_with_or_and(self):\n+        app_label = 'test_checkconstraint_or_and'\n+        constraint_name = 'check_constraint_or_and'\n+        from_state = self.set_up_test_model(app_label)\n+        # Define a CheckConstraint using a combination of OR and AND\n+        check = models.Q(field_1__isnull=False, flag__exact=True) | models.Q(flag__exact=False)\n+        constraint = models.CheckConstraint(check=check, name=constraint_name)\n+        operation = migrations.AddConstraint('TestConstraint', constraint)\n+        to_state = from_state.clone()\n+        operation.state_forwards(app_label, to_state)\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, from_state, to_state)\n+        TestConstraint = to_state.apps.get_model(app_label, 'TestConstraint')\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=None, flag=True)\n+        with self.assertRaises(IntegrityError), transaction.atomic():\n+            TestConstraint.objects.create(field_1=1, flag=False)\n+        TestConstraint.objects.create(field_1=1, flag=True)\n+        TestConstraint.objects.create(field_1=None, flag=False)\n+\n     @skipUnlessDBFeature('supports_table_check_constraints')\n     def test_remove_constraint(self):\n         project_state = self.set_up_test_model(\"test_removeconstraint\", constraints=[\n",
  "django__django-11477": "diff --git a/tests/i18n/patterns/tests.py b/tests/i18n/patterns/tests.py\nindex e4898b6..7a46e39 100644\n--- a/tests/i18n/patterns/tests.py\n+++ b/tests/i18n/patterns/tests.py\n@@ -164,6 +164,27 @@ class URLTranslationTests(URLTestCaseBase):\n             self.assertEqual(translation.get_language(), 'nl')\n \n \n+    def test_translate_url_with_optional_parameters(self):\n+        with translation.override('en'):\n+            # Case 1: No optional parameter provided in URL, check translation\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/', 'nl'),\n+                '/nl/with-arguments/regular-argument/',\n+            )\n+            # Case 2: Optional parameter is present in the URL, check translation\n+            self.assertEqual(\n+                translate_url('/en/with-arguments/regular-argument/optional.html', 'nl'),\n+                '/nl/with-arguments/regular-argument/optional.html',\n+            )\n+            # Case 3: Optional parameter is absent in URL pattern, check translation\n+            for url in ['/en/regex_optional/1/2/', '/en/regex_optional/1/']:\n+                match = resolve(url.replace('/en/', '/'))\n+                translated_url = translate_url(url, 'nl').replace('/nl/', '/')\n+                self.assertEqual(\n+                    resolve(translated_url).kwargs,\n+                    match.kwargs\n+                )\n+\n class URLNamespaceTests(URLTestCaseBase):\n     \"\"\"\n     Tests if the translations are still working within namespaces.\n",
  "django__django-12273": "",
  "django__django-12965": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 19cff3e..75ac3ab 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -605,6 +605,14 @@ class DeletionTests(TestCase):\n \n \n class FastDeleteTests(TestCase):\n+    def test_fast_delete_all_without_subquery(self):\n+        User.objects.bulk_create(User() for _ in range(100))\n+        with self.assertNumQueries(1) as ctx:\n+            User.objects.all().delete()\n+        sql = ctx.captured_queries[0]['sql']\n+        # Ensure no subquery is used when performing a full delete.\n+        self.assertNotIn('SELECT', sql)\n+        self.assertEqual(User.objects.count(), 0)\n \n     def test_fast_delete_fk(self):\n         u = User.objects.create(\n@@ -702,4 +710,4 @@ class FastDeleteTests(TestCase):\n         origin = Origin.objects.create()\n         referer = Referrer.objects.create(origin=origin, unique_field=42)\n         with self.assertNumQueries(2):\n-            referer.delete()\n+            referer.delete()\n",
  "django__django-13023": "diff --git a/tests/model_fields/test_decimalfield.py b/tests/model_fields/test_decimalfield.py\nindex ab04b0d..e2e4b7f 100644\n--- a/tests/model_fields/test_decimalfield.py\n+++ b/tests/model_fields/test_decimalfield.py\n@@ -1,3 +1,4 @@\n+\n import unittest\n from decimal import Decimal\n \n@@ -25,7 +26,12 @@ class DecimalFieldTests(TestCase):\n         with self.assertRaisesMessage(ValidationError, msg):\n             f.to_python('abc')\n \n-    def test_default(self):\n+    def test_invalid_value_dict(self):\n+        f = models.DecimalField(max_digits=4, decimal_places=2)\n+        value = {'invalid': 'value'}\n+        msg = '\u201c%s\u201d value must be a decimal number.' % (value,)\n+        with self.assertRaisesMessage(ValidationError, msg):\n+            f.to_python(value)\n         f = models.DecimalField(default=Decimal('0.00'))\n         self.assertEqual(f.get_default(), Decimal('0.00'))\n \n",
  "django__django-13406": "diff --git a/tests/queryset_pickle/tests.py b/tests/queryset_pickle/tests.py\nindex d0a7de1..ea35005 100644\n--- a/tests/queryset_pickle/tests.py\n+++ b/tests/queryset_pickle/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import pickle\n \n@@ -5,10 +6,47 @@ import django\n from django.db import models\n from django.test import TestCase\n \n-from .models import Container, Event, Group, Happening, M2MModel, MyEvent\n+from .models import Container, Event, Group, Happening, M2MModel, MyEvent, Toy\n \n \n class PickleabilityTestCase(TestCase):\n+    \n+    def test_pickle_values_queryset(self):\n+        # Create test data\n+        Toy.objects.create(name='foo', price=10, material='wood')\n+        Toy.objects.create(name='bar', price=20, material='plastic')\n+        Toy.objects.create(name='baz', price=100, material='wood')\n+        \n+        # Original queryset\n+        prices = Toy.objects.values('material').annotate(total_price=models.Sum('price'))\n+        self.assertEqual(type(prices[0]), dict)\n+        \n+        # Pickle and unpickle the query\n+        prices2 = Toy.objects.all()\n+        prices2.query = pickle.loads(pickle.dumps(prices.query))\n+        \n+        # Check that the unpickled queryset behaves correctly\n+        self.assertEqual(type(prices2[0]), dict)\n+        self.assertEqual(\n+            list(prices2),\n+            list(prices)\n+        )\n+        \n+    def test_pickle_values_list_queryset(self):\n+        # Create test data\n+        Toy.objects.create(name='alpha', price=50, material='metal')\n+        Toy.objects.create(name='beta', price=75, material='stone')\n+        \n+        # Original queryset with values_list\n+        values_list_qs = Toy.objects.values_list('name', flat=True)\n+        self.assertIsInstance(list(values_list_qs), list)\n+        \n+        # Pickle and unpickle the query\n+        unpickled_qs = Toy.objects.all()\n+        unpickled_qs.query = pickle.loads(pickle.dumps(values_list_qs.query))\n+        \n+        # Check that the unpickled queryset behaves correctly\n+        self.assertListEqual(list(unpickled_qs), list(values_list_qs))\n     @classmethod\n     def setUpTestData(cls):\n         Happening.objects.create()  # make sure the defaults are working (#20158)\n",
  "django__django-13449": "diff --git a/tests/expressions_window/models.py b/tests/expressions_window/models.py\nindex 3f59cdf..ccd7bda 100644\n--- a/tests/expressions_window/models.py\n+++ b/tests/expressions_window/models.py\n@@ -5,10 +5,13 @@ class Classification(models.Model):\n     code = models.CharField(max_length=10)\n \n \n+from decimal import Decimal\n+\n class Employee(models.Model):\n+    bonus = models.DecimalField(decimal_places=2, max_digits=15, null=True)\n     name = models.CharField(max_length=40, blank=False, null=False)\n     salary = models.PositiveIntegerField()\n     department = models.CharField(max_length=40, blank=False, null=False)\n     hire_date = models.DateField(blank=False, null=False)\n     age = models.IntegerField(blank=False, null=False)\n-    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n+    classification = models.ForeignKey('Classification', on_delete=models.CASCADE, null=True)\n",
  "django__django-13512": "diff --git a/tests/forms_tests/field_tests/test_jsonfield.py b/tests/forms_tests/field_tests/test_jsonfield.py\nindex e31bff4..e3a00b0 100644\n--- a/tests/forms_tests/field_tests/test_jsonfield.py\n+++ b/tests/forms_tests/field_tests/test_jsonfield.py\n@@ -30,7 +30,19 @@ class JSONFieldTest(SimpleTestCase):\n         self.assertEqual(field.prepare_value(None), 'null')\n         self.assertEqual(field.prepare_value('foo'), '\"foo\"')\n \n-    def test_widget(self):\n+    def test_unicode_prepare_value(self):\n+        field = JSONField()\n+\n+        # Test Chinese characters serialization\n+        self.assertEqual(field.prepare_value({'a': '\u4e2d\u56fd'}), '{\"a\": \"\u4e2d\u56fd\"}')\n+        self.assertEqual(field.prepare_value(\"\u4f60\u597d\u4e16\u754c\"), '\"\u4f60\u597d\u4e16\u754c\"')\n+\n+        # Test emoji serialization\n+        self.assertEqual(field.prepare_value({'emoji': '\ud83d\ude00\ud83d\udc31'}), '{\"emoji\": \"\ud83d\ude00\ud83d\udc31\"}')\n+        self.assertEqual(field.prepare_value(\"\ud83d\ude00\ud83d\udc31\"), '\"\ud83d\ude00\ud83d\udc31\"')\n+\n+        # Test mixed content with accented characters\n+        self.assertEqual(field.prepare_value([\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]), '[\"\u4f60\u597d\uff0c\u4e16\u754c\", \"ja\u017a\u0144\"]')\n         field = JSONField()\n         self.assertIsInstance(field.widget, Textarea)\n \n",
  "django__django-14404": "",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..92fac19 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -691,6 +691,39 @@ class WriterTests(SimpleTestCase):\n         result = self.safe_exec(output)\n         self.assertIn(\"Migration\", result)\n \n+    def test_import_for_mixin_and_model(self):\n+        \"\"\"\n+        Tests that a migration file with a model using a mixin imports 'models' correctly.\n+        \"\"\"\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(models.Model, MyMixin):\n+            name = models.CharField(max_length=100)\n+\n+        migration = type(\"Migration\", (migrations.Migration,), {\n+            \"operations\": [\n+                migrations.CreateModel(\n+                    \"MyModel\",\n+                    fields=[\n+                        (\"name\", models.CharField(max_length=100)),\n+                    ],\n+                    options={\n+                        \"abstract\": False,\n+                    },\n+                    bases=(MyMixin, models.Model),\n+                ),\n+            ],\n+            \"dependencies\": [],\n+        })\n+        \n+        writer = MigrationWriter(migration)\n+        output = writer.as_string()\n+        self.assertIn(\"from django.db import models\", output)\n+        self.assertIn(\"class Migration(migrations.Migration)\", output)\n+        result = self.safe_exec(output)\n+        self.assertIn(\"Migration\", result)\n+\n     def test_migration_path(self):\n         test_apps = [\n             'migrations.migrations_test_apps.normal',\n",
  "django__django-15375": "diff --git a/tests/aggregation/tests.py b/tests/aggregation/tests.py\nindex 1d4ef56..2989377 100644\n--- a/tests/aggregation/tests.py\n+++ b/tests/aggregation/tests.py\n@@ -1637,9 +1637,43 @@ class AggregateTestCase(TestCase):\n         )\n         self.assertEqual(len(qs), 6)\n \n+    def test_aggregation_with_default_after_annotation(self):\n+        result = Publisher.objects.annotate(\n+            double_num_awards=F('num_awards') * 2,\n+        ).aggregate(value=Sum('double_num_awards', default=0))\n+        self.assertEqual(result['value'], 40)\n+\n+    def test_aggregation_with_default_no_annotation(self):\n+        result = Book.objects.aggregate(value=Sum('pages', default=0))\n+        expected = Book.objects.aggregate(value=Sum('pages'))\n+        self.assertEqual(result['value'], expected['value'])\n+\n+    def test_aggregate_coalesce_behavior(self):\n+        result = Publisher.objects.annotate(\n+            idx=F('id'),\n+        ).aggregate(total_awards=Coalesce(Sum('num_awards', default=0), 0))\n+        self.assertEqual(result['total_awards'], 20)\n+\n     def test_exists_extra_where_with_aggregate(self):\n         qs = Book.objects.all().annotate(\n             count=Count('id'),\n             exists=Exists(Author.objects.extra(where=['1=0'])),\n         )\n-        self.assertEqual(len(qs), 6)\n+        self.assertEqual(len(qs), 6)\n+\n+    def test_aggregation_with_default_after_annotation(self):\n+        result = Publisher.objects.annotate(\n+            double_num_awards=F('num_awards') * 2,\n+        ).aggregate(value=Sum('double_num_awards', default=0))\n+        self.assertEqual(result['value'], 40)\n+\n+    def test_aggregation_with_default_no_annotation(self):\n+        result = Book.objects.aggregate(value=Sum('pages', default=0))\n+        expected = Book.objects.aggregate(value=Sum('pages'))\n+        self.assertEqual(result['value'], expected['value'])\n+\n+    def test_aggregate_coalesce_behavior(self):\n+        result = Publisher.objects.annotate(\n+            idx=F('id'),\n+        ).aggregate(total_awards=Coalesce(Sum('num_awards', default=0), 0))\n+        self.assertEqual(result['total_awards'], 20)\n",
  "django__django-15695": "diff --git a/tests/migrations/test_operations.py b/tests/migrations/test_operations.py\nindex 99db46a..c486349 100644\n--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n@@ -2984,10 +2984,46 @@ class OperationTests(OperationTestBase):\n         with connection.schema_editor() as editor:\n             operation.database_forwards(app_label, editor, project_state, new_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+      \n+        # Additional test case: Ensure RenameIndex restores old name when the index is moved backward\n+        old_auto_generated_index_name = \"pony_test_old_idx\"\n+        operation = RenameIndex(\"Pony\", old_auto_generated_index_name, \"new_pony_test_idx\")\n+        with connection.schema_editor() as editor:\n+            # Rename the index forward\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+        with connection.schema_editor() as editor:\n+            # Move the index backward, it should restore the old autogenerated name\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, old_auto_generated_index_name)\n+      \n+        # Reapply renaming, should be no-op since we are renaming to the same name\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         # Reverse is a no-op.\n         with connection.schema_editor() as editor, self.assertNumQueries(0):\n             operation.database_backwards(app_label, editor, new_state, project_state)\n         self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+      \n+        # Additional test case: Ensure RenameIndex restores old name when the index is moved backward\n+        old_auto_generated_index_name = \"pony_test_old_idx\"\n+        operation = RenameIndex(\"Pony\", old_auto_generated_index_name, \"new_pony_test_idx\")\n+        with connection.schema_editor() as editor:\n+            # Rename the index forward\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n+\n+        with connection.schema_editor() as editor:\n+            # Move the index backward, it should restore the old autogenerated name\n+            operation.database_backwards(app_label, editor, new_state, project_state)\n+        self.assertIndexNameExists(table_name, old_auto_generated_index_name)\n+      \n+        # Reapply renaming, should be no-op since we are renaming to the same name\n+        with connection.schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        self.assertIndexNameExists(table_name, \"new_pony_test_idx\")\n         # Deconstruction.\n         definition = operation.deconstruct()\n         self.assertEqual(definition[0], \"RenameIndex\")\n",
  "django__django-15732": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..db110d6 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -595,16 +595,64 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         )\n \n \n-class AlterUniqueTogether(AlterTogetherOptionOperation):\n+class AlterUniqueTogetherTests(TransactionTestCase):\n     \"\"\"\n-    Change the value of unique_together to the target one.\n+    Tests for the AlterUniqueTogether operation to ensure unique constraints are managed properly.\n     Input value of unique_together must be a set of tuples.\n     \"\"\"\n \n     option_name = \"unique_together\"\n \n-    def __init__(self, name, unique_together):\n-        super().__init__(name, unique_together)\n+    @skipUnlessDBFeature(\"supports_table_check_constraints\")\n+    def test_remove_invalid_unique_together_constraint(self):\n+        \"\"\"\n+        Ensure that attempting to remove a unique_together constraint\n+        that does not exist does not raise an error.\n+        \"\"\"\n+        app_label = \"test_invalid_rut\"\n+        project_state = self.apply_operations(\n+            app_label,\n+            ProjectState(),\n+            operations=[\n+                migrations.CreateModel(\n+                    \"Horse\",\n+                    fields=[\n+                        (\"id\", models.AutoField(primary_key=True)),\n+                        (\"name\", models.CharField(max_length=30)),\n+                    ],\n+                ),\n+            ],\n+        )\n+        table_name = f\"{app_label}_horse\"\n+        constraints_before = self.get_constraints(table_name)\n+        \n+        new_state = project_state.clone()\n+        operation = migrations.AlterUniqueTogether(\"Horse\", set([(\"name\",)]))\n+        operation.state_forwards(app_label, new_state)\n+        \n+        with connection.schema_editor() as editor:\n+            try:\n+                operation.database_forwards(app_label, editor, project_state, new_state)\n+            except OperationalError as e:\n+                self.fail(f\"Unexpected OperationalError: {e}\")\n+        \n+        constraints_after = self.get_constraints(table_name)\n+        self.assertEqual(constraints_before, constraints_after, \"Constraints should be unchanged\")\n+\n+    def get_constraints(self, table_name):\n+        \"\"\" Helper method to get current constraints for a table. \"\"\"\n+        with connection.cursor() as cursor:\n+            cursor.execute(f\"SELECT conname FROM pg_constraint WHERE conrelid = '{table_name}'::regclass;\")\n+            return {row[0] for row in cursor.fetchall()}\n+\n+    # Helper methods to apply operations to mimic actual migrations\n+    def apply_operations(self, app_label, project_state, operations):\n+        for operation in operations:\n+            operation.state_forwards(app_label, project_state)\n+        with connection.schema_editor() as editor:\n+            for operation in operations:\n+                operation.database_forwards(app_label, editor, project_state, project_state)\n+        return project_state.clone()\n \n \n class AlterIndexTogether(AlterTogetherOptionOperation):\n",
  "django__django-15916": "",
  "django__django-16938": "diff --git a/tests/serializers/test_json.py b/tests/serializers/test_json.py\nindex d77ef46..17659b1 100644\n--- a/tests/serializers/test_json.py\n+++ b/tests/serializers/test_json.py\n@@ -5,7 +5,8 @@ import re\n \n from django.core import serializers\n from django.core.serializers.base import DeserializationError\n-from django.core.serializers.json import DjangoJSONEncoder\n+from django.core import serializers\n+from django.core.exceptions import FieldError\n from django.db import models\n from django.test import SimpleTestCase, TestCase, TransactionTestCase\n from django.test.utils import isolate_apps\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 53fdd55..95a0b12 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -221,8 +221,22 @@ def test_mpl_toolkits():\n     ax = parasite_axes.host_axes([0, 0, 1, 1])\n     assert type(pickle.loads(pickle.dumps(ax))) == parasite_axes.HostAxes\n \n-\n-def test_standard_norm():\n+def test_dpi_remains_constant_after_unpickle():\n+    import platform\n+    import matplotlib.pyplot as plt\n+\n+    if platform.system() == \"Darwin\" and platform.machine() == \"arm64\":\n+        original_dpi = 200\n+        fig = plt.figure(dpi=original_dpi)\n+\n+        for _ in range(10):\n+            out = BytesIO()\n+            pickle.dump(fig, out)\n+            out.seek(0)\n+            fig = pickle.load(out)\n+\n+            # Assert that DPI remains constant after unpickling.\n+            assert fig.dpi == original_dpi\n     assert type(pickle.loads(pickle.dumps(mpl.colors.LogNorm()))) \\\n         == mpl.colors.LogNorm\n \n",
  "pydata__xarray-3993": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex 87375f2..f27f807 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -6596,7 +6596,22 @@ def test_integrate(dask):\n     assert_equal(actual, ds.integrate(\"y\")[\"var\"])\n     assert_equal(ds[\"var\"].integrate(\"y\"), ds.integrate(\"y\")[\"var\"])\n \n-    # along x and y\n+    # Test that integrate accepts 'coord' argument\n+    da = xr.DataArray(np.random.random((4, 5)), dims=('x', 'y'), coords={'x': np.arange(4), 'y': np.arange(5)})\n+    ds = da.to_dataset(name='var')\n+    with pytest.warns(None) as record:\n+        result_da = da.integrate(coord=\"x\")\n+        result_ds = ds.integrate(coord=\"x\")\n+    # There should be no warnings if using coord\n+    assert not record, \"There should be no warnings when using 'coord' argument.\"\n+\n+    expected = xr.DataArray(\n+        np.trapz(da, da[\"x\"], axis=0),\n+        dims=[\"y\"],\n+        coords={k: v for k, v in da.coords.items() if \"x\" not in v.dims},\n+    )\n+    assert_allclose(expected, result_da.compute())\n+    assert_equal(result_da, result_ds[\"var\"])\n     actual = da.integrate((\"y\", \"x\"))\n     assert actual.ndim == 0\n \n",
  "pydata__xarray-4094": "diff --git a/xarray/tests/test_dataset.py b/xarray/tests/test_dataset.py\nindex a2826fa..82f4785 100644\n--- a/xarray/tests/test_dataset.py\n+++ b/xarray/tests/test_dataset.py\n@@ -3045,7 +3045,13 @@ class TestDataset:\n         d0 = D.isel(x=0)\n         assert_identical(d0, x0)\n \n-    def test_to_stacked_array_to_unstacked_dataset_different_dimension(self):\n+    def test_to_unstacked_dataset_single_dimension(self):\n+        # single dimension: regression test for issue\n+        arr = xr.DataArray(np.arange(3), coords=[(\"x\", [0, 1, 2])])\n+        data = xr.Dataset({\"a\": arr, \"b\": arr})\n+        stacked = data.to_stacked_array(\"y\", sample_dims=[\"x\"])\n+        unstacked = stacked.to_unstacked_dataset(\"y\")\n+        assert_identical(unstacked, data)\n         # test when variables have different dimensionality\n         a, b = create_test_stacked_array()\n         sample_dims = [\"x\"]\n",
  "pylint-dev__pylint-8898": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex ae541fc..ac68269 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -107,6 +107,9 @@ def test_unknown_yes_no(capsys: CaptureFixture) -> None:\n     assert \"Invalid yn value 'maybe', should be in \" in output.err\n \n \n+from typing import Any\n+import re\n+\n def test_unknown_py_version(capsys: CaptureFixture) -> None:\n     \"\"\"Check that we correctly error on an unknown python-version.\"\"\"\n     with pytest.raises(SystemExit):\n",
  "pytest-dev__pytest-6197": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex d7aed6e..3bfd2d6 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1156,6 +1156,9 @@ def test_summary_list_after_errors(testdir):\n     )\n \n \n+import pytest\n+from _pytest.main import ExitCode\n+\n def test_importorskip():\n     with pytest.raises(\n         pytest.skip.Exception,\n@@ -1184,4 +1187,4 @@ def test_skip_package(testdir):\n \n     result = testdir.inline_run()\n     _, skipped, _ = result.listoutcomes()\n-    assert len(skipped) == 2\n+    assert len(skipped) == 2\n",
  "pytest-dev__pytest-7324": "diff --git a/testing/test_mark_expression.py b/testing/test_mark_expression.py\nindex 10b71e9..46c1865 100644\n--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n@@ -139,6 +139,18 @@ def test_valid_idents(ident: str) -> None:\n     assert evaluate(ident, {ident: True}.__getitem__)\n \n \n+@pytest.mark.parametrize(\n+    \"ident\",\n+    (\n+        \"None\",\n+        \"True\",\n+        \"False\",\n+    ),\n+)\n+def test_invalid_idents(ident: str) -> None:\n+    with pytest.raises(AssertionError):\n+        Expression.compile(ident)\n+\n @pytest.mark.parametrize(\n     \"ident\",\n     (\n",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..6a12655 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -258,5 +258,29 @@ def test_set_output_mro():\n \n     class C(A, B):\n         pass\n+    assert C().transform(None) == \"B\"\n \n-    assert C().transform(None) == \"B\"\n+    def test_feature_union_with_pandas_output():\n+        import pandas as pd\n+        from sklearn.base import BaseEstimator, TransformerMixin\n+        from sklearn.pipeline import FeatureUnion\n+\n+        index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+        data = pd.DataFrame(index=index, data=[10] * len(index), columns=[\"value\"])\n+        data[\"date\"] = index.date\n+\n+        class MyTransformer(BaseEstimator, TransformerMixin):\n+            def fit(self, X: pd.DataFrame, y=None):\n+                return self\n+\n+            def transform(self, X: pd.DataFrame, y=None) -> pd.DataFrame:\n+                return pd.DataFrame(X[\"value\"].groupby(X[\"date\"]).sum())\n+\n+        # Create feature union with MyTransformer\n+        union = FeatureUnion([(\"my_transformer\", MyTransformer())])\n+        union.set_output(transform=\"pandas\")\n+\n+        # Perform fit_transform and check the output\n+        result = union.fit_transform(data)\n+        assert isinstance(result, pd.DataFrame)\n+        assert len(result) == data[\"date\"].nunique()  # Number of unique dates after aggregation\n",
  "sphinx-doc__sphinx-7454": "diff --git a/tests/test_ext_autodoc.py b/tests/test_ext_autodoc.py\nindex f07be18..045ccc5 100644\n--- a/tests/test_ext_autodoc.py\n+++ b/tests/test_ext_autodoc.py\n@@ -12,8 +12,33 @@ import pytest\n \n from sphinx import addnodes\n \n+import pytest\n+from sphinx.addnodes import desc_signature, pending_xref, desc_content, desc\n+\n+@pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n+\n+def test_autodoc_typehint_none_description(app, status, warning):\n+    app.config.autodoc_typehints = 'description'\n+    app.builder.build_all()\n+\n+    content = app.env.get_doctree('index')\n+    # Check that None is turned into a link when in 'description' mode\n+    none_field = content[3].traverse(pending_xref)\n+    assert any(n.reftarget == \"None\" for n in none_field), \"Expected a reference to None\"\n+\n+    assert warning.getvalue() == ''\n \n @pytest.mark.sphinx('dummy', testroot='ext-autodoc')\n+def test_autodoc_typehint_none_signature(app, status, warning):\n+    app.config.autodoc_typehints = 'signature'\n+    app.builder.build_all()\n+\n+    content = app.env.get_doctree('index')\n+    # Check that None is not turned into a link when in 'signature' mode.\n+    none_field = content[3].traverse(pending_xref)\n+    assert not any(n.reftarget == \"None\" for n in none_field), \"Did not expect a reference to None\"\n+\n+    assert warning.getvalue() == ''\n def test_autodoc(app, status, warning):\n     app.builder.build_all()\n \n@@ -30,4 +55,4 @@ def test_autodoc(app, status, warning):\n my_name\n \n alias of bug2437.autodoc_dummy_foo.Foo\"\"\"\n-    assert warning.getvalue() == ''\n+    assert warning.getvalue() == ''\n",
  "sphinx-doc__sphinx-8056": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 1d6a8cf..7ffe5db 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -2201,9 +2201,32 @@ definition_after_normal_text : int\n         actual = str(NumpyDocstring(docstring, config))\n         self.assertEqual(expected, actual)\n \n+    def test_multiple_parameters_with_optional(self):\n+        docstring = \"\"\"\\\n+        Parameters\n+        ----------\n+        x1, x2 : array_like, optional\n+            Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n \n-@contextmanager\n-def warns(warning, match):\n+        # Test with napoleon_use_param=False\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :Parameters: **x1, x2** (:class:`array_like, optional`) -- Input arrays, description of `x1`, `x2`.\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n+\n+        # Test with napoleon_use_param=True\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(dedent(docstring), config))\n+        expected = \"\"\"\\\n+        :param x1: Input arrays, description of `x1`, `x2`.\n+        :type x1: :class:`array_like, optional`\n+        :param x2: Input arrays, description of `x1`, `x2`.\n+        :type x2: :class:`array_like, optional`\n+        \"\"\"\n+        self.assertEqual(expected, actual)\n     match_re = re.compile(match)\n     try:\n         yield warning\n",
  "sphinx-doc__sphinx-8551": "",
  "sphinx-doc__sphinx-8593": "",
  "sphinx-doc__sphinx-9230": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex e86a758..ada0205 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -984,6 +984,48 @@ def test_info_field_list(app):\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n \n+def test_param_dict_rendering(app):\n+    text = (\".. py:module:: example\\n\"\n+            \".. py:class:: Class\\n\"\n+            \"\\n\"\n+            \"   :param dict(str, str) opc_meta: (optional)\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+\n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          addnodes.index,\n+                          [desc, ([desc_signature, ([desc_annotation, \"class \"],\n+                                                    [desc_addname, \"example.\"],\n+                                                    [desc_name, \"Class\"])],\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[3][1][0][0],\n+                ([nodes.field_name, \"Parameters\"],\n+                 [nodes.field_body, nodes.bullet_list, [nodes.list_item, nodes.paragraph]]))\n+\n+    # :param dict(str, str) opc_meta:\n+    assert_node(doctree[3][1][0][0][1][0][0][0],\n+                ([addnodes.literal_strong, \"opc_meta\"],\n+                 \" (\",\n+                 [pending_xref, addnodes.literal_emphasis, \"dict\"],\n+                 [addnodes.literal_emphasis, \"(\"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \", \"],\n+                 [pending_xref, addnodes.literal_emphasis, \"str\"],\n+                 [addnodes.literal_emphasis, \")\"],\n+                 \")\",\n+                 \" -- \",\n+                 \"(optional)\"))\n+    assert_node(doctree[3][1][0][0][1][0][0][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"dict\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+    assert_node(doctree[3][1][0][0][1][0][0][0][6], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n+\n+\n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n             \"\\n\"\n",
  "sphinx-doc__sphinx-9258": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\nindex a7d51b6..d4777af 100644\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -1008,6 +1008,48 @@ def test_info_field_list(app):\n                 refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n                 **{\"py:module\": \"example\", \"py:class\": \"Class\"})\n \n+def test_info_field_list_piped_type_function(app):\n+    text = (\".. py:function:: example_function\\n\"\n+            \"\\n\"\n+            \"   :param text: a text parameter\\n\"\n+            \"   :type text: bytes | str\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[2][1][0][0], ([nodes.field_name, \"Parameters\"],\n+                                      [nodes.field_body, nodes.paragraph]))\n+    assert_node(doctree[2][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"bytes\",\n+                **{\"py:module\": \"example_function\"})\n+    assert_node(doctree[2][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"str\",\n+                **{\"py:module\": \"example_function\"})\n+\n+def test_info_field_list_piped_type_method(app):\n+    text = (\".. py:class:: ExampleClass\\n\"\n+            \"\\n\"\n+            \"   .. py:method:: example_method(param: list | tuple) -> None\\n\"\n+            \"\\n\"\n+            \"       :param param: a list or tuple\\n\"\n+            \"       :type param: list | tuple\\n\")\n+    doctree = restructuredtext.parse(app, text)\n+    \n+    assert_node(doctree, (nodes.target,\n+                          addnodes.index,\n+                          [desc, (desc_signature,\n+                                  [desc_content, nodes.field_list, nodes.field])]))\n+    assert_node(doctree[2][1][0][0], ([nodes.field_name, \"Parameters\"],\n+                                      [nodes.field_body, nodes.paragraph]))\n+    assert_node(doctree[2][1][0][0][1][0][2], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"list\",\n+                **{\"py:module\": \"ExampleClass\"})\n+    assert_node(doctree[2][1][0][0][1][0][4], pending_xref,\n+                refdomain=\"py\", reftype=\"class\", reftarget=\"tuple\",\n+                **{\"py:module\": \"ExampleClass\"})\n+\n \n def test_info_field_list_var(app):\n     text = (\".. py:class:: Class\\n\"\n",
  "sphinx-doc__sphinx-9673": "",
  "sympy__sympy-18211": "",
  "sympy__sympy-18698": "diff --git a/sympy/polys/tests/test_polytools.py b/sympy/polys/tests/test_polytools.py\nindex 38de6f6..4020b1e 100644\n--- a/sympy/polys/tests/test_polytools.py\n+++ b/sympy/polys/tests/test_polytools.py\n@@ -3265,6 +3265,10 @@ def test_noncommutative():\n     assert cancel(e*foo(c)) == c*foo(c)\n \n \n+from sympy import symbols, sqf_list, expand\n+\n+x, y = symbols('x y')\n+\n def test_to_rational_coeffs():\n     assert to_rational_coeffs(\n         Poly(x**3 + y*x**2 + sqrt(y), x, domain='EX')) is None\n@@ -3330,6 +3334,24 @@ def test_issue_17988():\n     M = Matrix([[poly(x + 1), poly(x + 1)]])\n     assert p * M == M * p == Matrix([[poly(x**2 - 1), poly(x**2 - 1)]])\n \n-def test_issue_18205():\n+def test_issue_8695():\n+    p = (x**2 + 1) * (x - 1)**2 * (x - 2)**3 * (x - 3)**3\n+    result = (1, [(x**2 + 1, 1), (x - 1, 2), (x**2 - 5*x + 6, 3)])\n+    assert sqf_list(p) == result\n+\n+    # Further test cases for similar behavior\n+    q = (x**2 - 3*x + 2) * (x + 1)**4\n+    result_q = (1, [(x**2 - 3*x + 2, 1), (x + 1, 4)])\n+    assert sqf_list(q) == result_q\n+\n+    # Test with expanded polynomial form\n+    r = expand((x + 1)**3 * (x - 1)**2)\n+    result_r = (1, [(x + 1, 3), (x - 1, 2)])\n+    assert sqf_list(r) == result_r\n+\n+    # Test with a simple polynomial\n+    s = x**4 - 5*x**3 + 8*x**2 - 5*x + 1\n+    result_s = (1, [(x**2 - 2*x + 1, 2)])   # (x-1)^2 * (x-1)^2 hence 2*2 multiplicity to x^2 - 2*x + 1.\n+    assert sqf_list(s) == result_s\n     assert cancel((2 + I)*(3 - I)) == 7 + I\n     assert cancel((2 + I)*(2 - I)) == 5\n",
  "sympy__sympy-19040": "",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..829987c 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"This tests sympy/core/basic.py with (ideally) no reference to subclasses\n of Basic or Atom.\"\"\"\n \n@@ -11,7 +12,7 @@ from sympy.core.sympify import SympifyError\n from sympy.core.function import Function, Lambda\n from sympy.core.compatibility import default_sort_key\n \n-from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum\n+from sympy import sin, Q, cos, gamma, Tuple, Integral, Sum, Symbol\n from sympy.functions.elementary.exponential import exp\n from sympy.testing.pytest import raises\n from sympy.core import I, pi\n",
  "sympy__sympy-24562": "",
  "django__django-14534": "",
  "matplotlib__matplotlib-20676": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex b009975..0cde90c 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -302,6 +302,38 @@ def test_tool_line_handle():\n     assert tool_line_handle.positions == positions\n \n \n+import matplotlib.pyplot as plt\n+from matplotlib.widgets import SpanSelector\n+import pytest\n+\n+@pytest.mark.parametrize('direction', (\"horizontal\", \"vertical\"))\n+def test_span_selector_bound_preserve_margins(direction):\n+    fig, ax = plt.subplots(1, 1)\n+    ax.plot([10, 20], [10, 30])\n+    ax.figure.canvas.draw()\n+    x_bound = ax.get_xbound()\n+    y_bound = ax.get_ybound()\n+\n+    tol = 1e-10  # small tolerance for floating point comparisons with margins.\n+    \n+    # Create the span selector\n+    tool = SpanSelector(ax, print, direction, interactive=True)\n+    \n+    # Ensure the bounds remain the same after creation\n+    assert ax.get_xbound() == pytest.approx(x_bound, rel=tol)\n+    assert ax.get_ybound() == pytest.approx(y_bound, rel=tol)\n+\n+    # After interaction, bounds should not include zero\n+    press_data = [10.5, 11.5]\n+    move_data = [11, 13]\n+    release_data = move_data\n+    do_event(tool, 'press', xdata=press_data[0], ydata=press_data[1], button=1)\n+    do_event(tool, 'onmove', xdata=move_data[0], ydata=move_data[1], button=1)\n+    do_event(tool, 'release', xdata=release_data[0], ydata=release_data[1], button=1)\n+    \n+    assert ax.get_xbound() == pytest.approx(x_bound, rel=tol)\n+    assert ax.get_ybound() == pytest.approx(y_bound, rel=tol)\n+\n def check_lasso_selector(**kwargs):\n     ax = get_ax()\n \n",
  "scikit-learn__scikit-learn-12682": "diff --git a/sklearn/decomposition/tests/test_dict_learning.py b/sklearn/decomposition/tests/test_dict_learning.py\nindex 35a43f8..e8edc42 100644\n--- a/sklearn/decomposition/tests/test_dict_learning.py\n+++ b/sklearn/decomposition/tests/test_dict_learning.py\n@@ -51,6 +51,58 @@ def test_dict_learning_shapes():\n     assert_equal(dico.transform(X).shape, (X.shape[0], n_components))\n \n \n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.exceptions import ConvergenceWarning\n+import numpy as np\n+\n+def test_sparse_coder_lasso_max_iter():\n+    def ricker_function(resolution, center, width):\n+        \"\"\"Discrete sub-sampled Ricker (Mexican hat) wavelet\"\"\"\n+        x = np.linspace(0, resolution - 1, resolution)\n+        x = ((2 / (np.sqrt(3 * width) * np.pi ** .25))\n+             * (1 - (x - center) ** 2 / width ** 2)\n+             * np.exp(-(x - center) ** 2 / (2 * width ** 2)))\n+        return x\n+\n+    def ricker_matrix(width, resolution, n_components):\n+        \"\"\"Dictionary of Ricker (Mexican hat) wavelets\"\"\"\n+        centers = np.linspace(0, resolution - 1, n_components)\n+        D = np.empty((n_components, resolution))\n+        for i, center in enumerate(centers):\n+            D[i] = ricker_function(resolution, center, width)\n+        D /= np.sqrt(np.sum(D ** 2, axis=1))[:, np.newaxis]\n+        return D\n+\n+    transform_algorithm = 'lasso_cd'\n+    resolution = 1024\n+    subsampling = 3  # subsampling factor\n+    n_components = resolution // subsampling\n+\n+    # Compute a wavelet dictionary\n+    D_multi = np.r_[tuple(ricker_matrix(width=w, resolution=resolution,\n+                          n_components=n_components // 5)\n+                          for w in (10, 50, 100, 500, 1000))]\n+\n+    X = np.linspace(0, resolution - 1, resolution)\n+    first_quarter = X < resolution / 4\n+    X[first_quarter] = 3.\n+    X[np.logical_not(first_quarter)] = -1.\n+    X = X.reshape(1, -1)\n+\n+    # check that the underlying model fails to converge\n+    with pytest.warns(ConvergenceWarning):\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=1)\n+        model.fit_transform(X)\n+\n+    # check that the underlying model converges w/o warnings\n+    with pytest.warns(None) as record:\n+        model = SparseCoder(D_multi, transform_algorithm=transform_algorithm,\n+                            transform_max_iter=2000)\n+        model.fit_transform(X)\n+    assert not record.list\n+\n def test_dict_learning_overcomplete():\n     n_components = 12\n     dico = DictionaryLearning(n_components, random_state=0).fit(X)\n",
  "scikit-learn__scikit-learn-14629": "diff --git a/sklearn/tests/test_multioutput.py b/sklearn/tests/test_multioutput.py\nindex 4b401f3..a2bd21e 100644\n--- a/sklearn/tests/test_multioutput.py\n+++ b/sklearn/tests/test_multioutput.py\n@@ -148,6 +148,29 @@ def test_multi_target_sample_weights():\n     assert_almost_equal(rgr.predict(X_test), rgr_w.predict(X_test))\n \n \n+import pytest\n+import numpy as np\n+from sklearn.utils._testing import assert_array_equal\n+from sklearn.multioutput import MultiOutputClassifier\n+from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n+from sklearn.model_selection import cross_val_predict\n+from sklearn.datasets import make_multilabel_classification\n+\n+def test_cross_val_predict_with_multioutput_classifier_predict_proba():\n+    # Generate a multilabel dataset\n+    X, Y = make_multilabel_classification(n_samples=100, n_features=20, n_classes=3, n_labels=2, random_state=0)\n+\n+    # Initialize the MultiOutputClassifier with a classifier that supports predict_proba\n+    mo_clf = MultiOutputClassifier(LinearDiscriminantAnalysis())\n+\n+    # Test that cross_val_predict using predict_proba runs without error and produces outputs of the expected shape\n+    pred_proba = cross_val_predict(mo_clf, X, Y, cv=5, method='predict_proba')\n+\n+    # Assert that output probability arrays are retrieved for each class of each output\n+    assert isinstance(pred_proba, list)\n+    for output in pred_proba:\n+        assert output.shape == (X.shape[0], Y.shape[1])\n+\n # Import the data\n iris = datasets.load_iris()\n # create a multiple targets by randomized shuffling and concatenating y.\n",
  "sphinx-doc__sphinx-9658": "",
  "sympy__sympy-13551": "diff --git a/sympy/concrete/tests/test_products.py b/sympy/concrete/tests/test_products.py\nindex 1f1aaf7..484b096 100644\n--- a/sympy/concrete/tests/test_products.py\n+++ b/sympy/concrete/tests/test_products.py\n@@ -348,6 +348,18 @@ def test_reverse_order():\n            Product(x*y, (x, b + 1, a - 1), (y, 6, 1))\n \n \n+def test_issue_13546():\n+    from sympy import S, Symbol, Product\n+    n = Symbol('n', integer=True)\n+    k = Symbol('k', integer=True)\n+    p = Product(n + 1 / 2**k, (k, 0, n-1)).doit()\n+    assert p.subs(n, 2).doit() == S(15)/2\n+\n+    # Additional test case for n = 3\n+    # For n=3, the product should be (3+1/2^0)*(3+1/2^1)*(3+1/2^2) = 315/8\n+    assert p.subs(n, 3).doit() == S(315)/8\n+\n+\n def test_issue_9983():\n     n = Symbol('n', integer=True, positive=True)\n     p = Product(1 + 1/n**(S(2)/3), (n, 1, oo))\n@@ -357,4 +369,4 @@ def test_issue_9983():\n \n def test_rewrite_Sum():\n     assert Product(1 - S.Half**2/k**2, (k, 1, oo)).rewrite(Sum) == \\\n-        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n+        exp(Sum(log(1 - 1/(4*k**2)), (k, 1, oo)))\n"
}