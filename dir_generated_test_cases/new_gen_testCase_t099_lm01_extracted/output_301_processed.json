{
  "astropy__astropy-12907": "diff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\nindex 88711b0..2bb8638 100644\n--- a/astropy/modeling/tests/test_separable.py\n+++ b/astropy/modeling/tests/test_separable.py\n@@ -18,6 +18,12 @@ from astropy.modeling.core import ModelDefinitionError\n sh1 = models.Shift(1, name='shift1')\n sh2 = models.Shift(2, name='sh2')\n scl1 = models.Scale(1, name='scl1')\n+from astropy.modeling import models\n+import numpy as np\n+from astropy.modeling.separable import separability_matrix, is_separable\n+import pytest\n+from numpy.testing import assert_allclose\n+\n scl2 = models.Scale(2, name='scl2')\n map1 = Mapping((0, 1, 0, 1), name='map1')\n map2 = Mapping((0, 0, 1), name='map2')\n@@ -133,9 +139,30 @@ def test_arith_oper():\n def test_separable(compound_model, result):\n     assert_allclose(is_separable(compound_model), result[0])\n     assert_allclose(separability_matrix(compound_model), result[1])\n-\n-\n-def test_custom_model_separable():\n+def test_nested_compound_models_separability():\n+    # Set up the simple linear combination model\n+    cm = models.Linear1D(10) & models.Linear1D(5)\n+\n+    # Check separability matrix of the nested compound model\n+    nested_cm = models.Pix2Sky_TAN() & cm\n+    expected_separability_nested = np.array(\n+        [[True, True, False, False],\n+         [True, True, False, False],\n+         [False, False, True, False],\n+         [False, False, False, True]]\n+    )\n+    assert_allclose(separability_matrix(nested_cm), expected_separability_nested)\n+\n+    # Combine another layer of nesting\n+    nested_cm2 = cm & (models.Pix2Sky_TAN() & models.RotateNative2Celestial(1, 2, 3))\n+    expected_separability_nested2 = np.array(\n+        [[True, False, False, False, False],\n+         [False, True, False, False, False],\n+         [False, False, True, True, False],\n+         [False, False, True, True, False],\n+         [False, False, False, False, True]]\n+    )\n+    assert_allclose(separability_matrix(nested_cm2), expected_separability_nested2)\n     @custom_model\n     def model_a(x):\n         return x\n",
  "astropy__astropy-14182": "diff --git a/astropy/io/ascii/tests/test_rst.py b/astropy/io/ascii/tests/test_rst.py\nindex e786c06..9fad163 100644\n--- a/astropy/io/ascii/tests/test_rst.py\n+++ b/astropy/io/ascii/tests/test_rst.py\n@@ -1,10 +1,12 @@\n+\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n \n from io import StringIO\n \n from astropy.io import ascii\n-\n-from .common import assert_almost_equal, assert_equal\n+from astropy.table import QTable\n+import numpy as np\n+import astropy.units as u\n \n \n def assert_equal_splitlines(arg1, arg2):\n@@ -184,4 +186,54 @@ Col1      Col2 Col3 Col4\n  2.4 's worlds    2    2\n ==== ========= ==== ====\n \"\"\",\n-    )\n+    ) \n+    \n+def test_write_rst_with_header_rows():\n+    \"\"\"Test writing a table with header_rows in RestructuredText format\"\"\"\n+    tbl = QTable(\n+        {\n+            \"wave\": [350, 950] * u.nm,\n+            \"response\": [1.0, 2.0] * u.ct,\n+            \"ints\": [1, 2],\n+        }\n+    )\n+    \n+    # Expected lines with headers as name, unit, and dtype respectively\n+    expected_lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    \n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    \n+    assert out.getvalue().splitlines() == expected_lines\n+\n+def test_read_write_cycle_rst_with_header_rows():\n+    \"\"\"Test round-trip of reading and writing a table with header_rows specified\"\"\"\n+    lines = [\n+        \"======= ======== ====\",\n+        \"   wave response ints\",\n+        \"     nm       ct     \",\n+        \"float64  float32 int8\",\n+        \"======= ======== ====\",\n+        \"  350.0      1.0    1\",\n+        \"  950.0      2.0    2\",\n+        \"======= ======== ====\",\n+    ]\n+    tbl = QTable.read(lines, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert tbl[\"wave\"].unit == u.nm\n+    assert tbl[\"response\"].unit == u.ct\n+    assert tbl[\"wave\"].dtype == np.float64\n+    assert tbl[\"response\"].dtype == np.float32\n+    assert tbl[\"ints\"].dtype == np.int8\n+\n+    out = StringIO()\n+    tbl.write(out, format=\"ascii.rst\", header_rows=[\"name\", \"unit\", \"dtype\"])\n+    assert out.getvalue().splitlines() == lines\n",
  "astropy__astropy-14365": "diff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\nindex 9b66109..07eafb3 100644\n--- a/astropy/io/ascii/tests/test_qdp.py\n+++ b/astropy/io/ascii/tests/test_qdp.py\n@@ -108,8 +108,33 @@ def test_roundtrip(tmp_path):\n     for meta_name in [\"initial_comments\", \"comments\"]:\n         assert meta_name in new_table.meta\n \n+import pytest\n+from astropy.utils.exceptions import AstropyUserWarning\n+\n+def test_case_insensitive_commands(tmp_path):\n+    \"\"\"Test that QDP commands are case-insensitive.\"\"\"\n+    mixed_case_qdp = \"\"\"\n+    ! Test mixed-case commands and their interpretation.\n+    read terr 1\n+    Read Serr 2\n+    !MJD            Err (pos)       Err(neg)        Rate            Error\n+    53000.0 0.1 -0.1 1.0 0.1\n+    55000.0 0.1 -0.1 2.0 0.2\n+    NO NO NO NO NO\n+    \"\"\"\n+\n+    path = str(tmp_path / \"mixed_case_test.qdp\")\n+    with open(path, \"w\") as fp:\n+        print(mixed_case_qdp, file=fp)\n+\n+    # Expect no error due to command case.\n+    with pytest.warns(AstropyUserWarning, match=\"This file contains multiple command blocks\"):\n+        table = _read_table_qdp(path, names=[\"MJD\", \"Rate\"], table_id=0)\n \n-def test_read_example():\n+    # Check that the data was read correctly.\n+    assert np.allclose(table['MJD'], [53000.0, 55000.0])\n+    assert np.allclose(table['Rate'], [1.0, 2.0])\n+    assert np.allclose(table['MJD_perr'], [0.1, 0.1])\n     example_qdp = \"\"\"\n         ! Initial comment line 1\n         ! Initial comment line 2\n",
  "astropy__astropy-14995": "diff --git a/astropy/nddata/mixins/tests/test_ndarithmetic.py b/astropy/nddata/mixins/tests/test_ndarithmetic.py\nindex fc27f69..e9e6f8c 100644\n--- a/astropy/nddata/mixins/tests/test_ndarithmetic.py\n+++ b/astropy/nddata/mixins/tests/test_ndarithmetic.py\n@@ -28,7 +28,47 @@ class StdDevUncertaintyUncorrelated(StdDevUncertainty):\n         return False\n \n \n-# Test with Data covers:\n+import numpy as np\n+import pytest\n+from astropy.nddata import NDDataRef\n+\n+def test_nddata_bitmask_arithmetic():\n+    # NDData.mask is usually assumed to be boolean, but could be\n+    # a bitmask. Ensure bitmask works:\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+    nref_nomask = NDDataRef(array)\n+    nref_masked = NDDataRef(array, mask=mask)\n+\n+    # multiply no mask by constant (no mask * no mask)\n+    assert nref_nomask.multiply(1.0, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply no mask by itself (no mask * no mask)\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\n+\n+    # multiply masked by constant (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(1.0, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by itself (mask * mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_masked, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # multiply masked by no mask (mask * no mask)\n+    np.testing.assert_equal(\n+        nref_masked.multiply(nref_nomask, handle_mask=np.bitwise_or).mask, mask\n+    )\n+\n+    # check bitwise logic still works\n+    other_mask = np.array([[64, 1, 0], [2, 1, 0], [8, 0, 2]])\n+    nref_mask_other = NDDataRef(array, mask=other_mask)\n+    np.testing.assert_equal(\n+        nref_mask_other.multiply(nref_masked, handle_mask=np.bitwise_or).mask,\n+        np.bitwise_or(mask, other_mask),\n+    )\n # scalars, 1D, 2D and 3D\n # broadcasting between them\n @pytest.mark.filterwarnings(\"ignore:divide by zero encountered.*\")\n",
  "astropy__astropy-6938": "diff --git a/astropy/io/fits/tests/test_table.py b/astropy/io/fits/tests/test_table.py\nindex 485705a..963de5f 100644\n--- a/astropy/io/fits/tests/test_table.py\n+++ b/astropy/io/fits/tests/test_table.py\n@@ -254,6 +254,40 @@ class TestTableFunctions(FitsTestCase):\n \n         t.close()\n \n+    def test_d_exponent_replacement(self):\n+        # Test if 'E' is replaced by 'D' in a double precision column\n+        r1 = np.array([3.14159e1, 2.71828e2, 1.41421e3])\n+        c1 = fits.Column(name='values', format='D', array=r1)\n+        hdu = fits.TableHDU.from_columns([c1])\n+        hdu.writeto(self.temp('test_d_exponent_replacement.fits'), overwrite=True)\n+\n+        with open(self.temp('test_d_exponent_replacement.fits')) as f:\n+            data = f.read()\n+            assert '3.14159D+01' in data, \"Expected '3.14159D+01' in the FITS file\"\n+            assert '2.71828D+02' in data, \"Expected '2.71828D+02' in the FITS file\"\n+            assert '1.41421D+03' in data, \"Expected '1.41421D+03' in the FITS file\"\n+\n+    def test_inplace_exponent_replacement(self):\n+        # Directly test the _scale_back_ascii function using mock columns\n+        input_values = np.array([3.14159e1, 2.71828e2], dtype=np.float64)\n+        output_values = np.zeros_like(input_values, dtype='|S20')\n+        col_idx = 0\n+        format = 'D12.5'\n+        spans = [20]\n+        starts = [0, 20]\n+        \n+        fake_coldefs = lambda: None\n+        fake_coldefs.spans = spans\n+        fake_coldefs.starts = starts\n+        fake_coldefs.format = format\n+        \n+        record = fits.fitsrec.FITS_rec(input_values)\n+        record._coldefs = fake_coldefs\n+        record._scale_back_ascii(col_idx, input_values, output_values)\n+        \n+        for out_val in output_values:\n+            assert b'D' in out_val, f\"Expected 'D' in the output, got {out_val}\"\n+\n     def test_ascii_table(self):\n         # ASCII table\n         a = fits.open(self.data('ascii.fits'))\n",
  "django__django-10914": "",
  "django__django-10924": "",
  "django__django-11001": "",
  "django__django-11039": "",
  "django__django-11049": "diff --git a/tests/model_fields/test_durationfield.py b/tests/model_fields/test_durationfield.py\nindex e5c5e39..e319b10 100644\n--- a/tests/model_fields/test_durationfield.py\n+++ b/tests/model_fields/test_durationfield.py\n@@ -67,7 +67,23 @@ class TestSerialization(SimpleTestCase):\n \n class TestValidation(SimpleTestCase):\n \n-    def test_invalid_string(self):\n+    def test_invalid_duration_format(self):\n+        field = models.DurationField()\n+        invalid_durations = [\n+            '14:00',        # interpreted as \"00:14:00\" (incorrect, but error message format test)\n+            '1:00',         # interpreted as \"00:01:00\"\n+            '25',           # ambiguous, seconds expected\n+            '1 24:00:00',   # day overflow\n+            ':01',          # invalid format, leading colon\n+        ]\n+        for duration in invalid_durations:\n+            with self.assertRaises(exceptions.ValidationError) as cm:\n+                field.clean(duration, None)\n+            self.assertEqual(cm.exception.code, 'invalid')\n+            self.assertIn(\n+                \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\",\n+                cm.exception.message % cm.exception.params\n+            )\n         field = models.DurationField()\n         with self.assertRaises(exceptions.ValidationError) as cm:\n             field.clean('not a datetime', None)\n@@ -75,7 +91,7 @@ class TestValidation(SimpleTestCase):\n         self.assertEqual(\n             cm.exception.message % cm.exception.params,\n             \"'not a datetime' value has an invalid format. \"\n-            \"It must be in [DD] [HH:[MM:]]ss[.uuuuuu] format.\"\n+            \"It must be in [DD] [[HH:]MM:]ss[.uuuuuu] format.\"\n         )\n \n \n@@ -84,4 +100,4 @@ class TestFormField(SimpleTestCase):\n \n     def test_formfield(self):\n         field = models.DurationField()\n-        self.assertIsInstance(field.formfield(), forms.DurationField)\n+        self.assertIsInstance(field.formfield(), forms.DurationField)\n",
  "django__django-11099": "",
  "django__django-11133": "diff --git a/tests/httpwrappers/tests.py b/tests/httpwrappers/tests.py\nindex 32aaf3b..8ba872a 100644\n--- a/tests/httpwrappers/tests.py\n+++ b/tests/httpwrappers/tests.py\n@@ -356,6 +356,11 @@ class HttpResponseTests(unittest.TestCase):\n         r = HttpResponse()\n         self.assertIsNone(r.get('test'))\n \n+    def test_memoryview_content(self):\n+        # Test handling of memoryview objects in HttpResponse.\n+        r = HttpResponse(memoryview(b'memoryview'))\n+        self.assertEqual(r.content, b'memoryview')\n+\n     def test_non_string_content(self):\n         # Bug 16494: HttpResponse should behave consistently with non-strings\n         r = HttpResponse(12345)\n",
  "django__django-11179": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 4966d82..d7e4229 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -1,4 +1,5 @@\n-from math import ceil\n+\n+from django.db.models.deletion import Collector\n \n from django.db import IntegrityError, connection, models\n from django.db.models.sql.constants import GET_ITERATOR_CHUNK_SIZE\n@@ -464,7 +465,37 @@ class FastDeleteTests(TestCase):\n         # 1 to delete t, 1 to fast-delete t's m_set\n         self.assertNumQueries(2, f.delete)\n \n-    def test_fast_delete_qs(self):\n+    def test_fast_delete_instance_set_pk_none(self):\n+        # Original test for User, already present\n+        u = User.objects.create()\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(u))\n+        u.delete()\n+        self.assertIsNone(u.pk)\n+\n+    def test_fast_delete_avatar_instance_set_pk_none(self):\n+        # Additional test for Avatar model\n+        a = Avatar.objects.create(desc='test avatar')\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(a))\n+        a.delete()\n+        self.assertIsNone(a.pk)\n+\n+    def test_fast_delete_base_instance_set_pk_none(self):\n+        # Additional test for Base model (assuming it has no dependencies)\n+        b = Base.objects.create()\n+        collector = Collector(using='default')\n+        self.assertTrue(collector.can_fast_delete(b))\n+        b.delete()\n+        self.assertIsNone(b.pk)\n+\n+    def test_delete_instance_with_dependencies_does_not_set_pk_none(self):\n+        # Test that an instance with dependencies does not have its PK set to None\n+        parent = Parent.objects.create()\n+        child = Child.objects.create(parent=parent)\n+        parent.delete()\n+        self.assertIsNotNone(parent.pk)\n+        self.assertIsNone(Child.objects.filter(pk=child.pk).first())\n         u1 = User.objects.create()\n         u2 = User.objects.create()\n         self.assertNumQueries(1, User.objects.filter(pk=u1.pk).delete)\n",
  "django__django-11283": "diff --git a/tests/auth_tests/test_migrations.py b/tests/auth_tests/test_migrations.py\nindex 3d9b0fc..a87b433 100644\n--- a/tests/auth_tests/test_migrations.py\n+++ b/tests/auth_tests/test_migrations.py\n@@ -1,8 +1,10 @@\n+\n from importlib import import_module\n \n from django.apps import apps\n from django.contrib.auth.models import Permission, User\n from django.contrib.contenttypes.models import ContentType\n+from django.db.utils import IntegrityError\n from django.test import TestCase\n \n from .models import Proxy, UserProxy\n",
  "django__django-11422": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex d8e4469..4b1a651 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -16,6 +16,7 @@ from unittest import mock, skip, skipIf\n from django.apps.registry import Apps\n from django.test import SimpleTestCase\n from django.test.utils import extend_sys_path\n+import os\n from django.utils import autoreload\n from django.utils.autoreload import WatchmanUnavailable\n \n",
  "django__django-11583": "diff --git a/tests/utils_tests/test_autoreload.py b/tests/utils_tests/test_autoreload.py\nindex 99e5edd..d2df939 100644\n--- a/tests/utils_tests/test_autoreload.py\n+++ b/tests/utils_tests/test_autoreload.py\n@@ -136,11 +136,39 @@ class TestIterModulesAndFiles(SimpleTestCase):\n         main_module = sys.modules['__main__']\n         self.assertFileFound(Path(main_module.__file__))\n \n-    def test_main_module_without_file_is_not_resolved(self):\n+    def test_null_byte_in_path(self):\n+        invalid_paths = [\n+            '/invalid/null_byte\\x00.py',\n+            '/invalid/with_null_byte/\\x00file.py'\n+        ]\n+        for invalid_path in invalid_paths:\n+            with self.subTest(invalid_path=invalid_path):\n+                with self.assertRaises(ValueError):\n+                    p = pathlib.Path(invalid_path)\n+                    p.resolve(strict=True)\n+\n+    def test_valid_path_with_null_byte_in_string(self):\n+        with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n+            temp_file_path = temp_file.name\n+        try:\n+            # Valid file does not contain any null bytes in the actual path,\n+            # but we include a null byte in the string representation to test resolution handling.\n+            path_with_extra_data = temp_file_path + '\\x00extra_data'\n+            self.assertRaises(ValueError, pathlib.Path(path_with_extra_data).resolve, strict=True)\n+\n+            # Ensure that a normal path without null bytes resolves correctly.\n+            resolved_path = pathlib.Path(temp_file_path).resolve(strict=True)\n+            self.assertTrue(os.path.exists(resolved_path))\n+        finally:\n+            os.remove(temp_file_path)\n         fake_main = types.ModuleType('__main__')\n         self.assertEqual(autoreload.iter_modules_and_files((fake_main,), frozenset()), frozenset())\n \n \n+import os\n+import tempfile\n+import pathlib\n+\n class TestCommonRoots(SimpleTestCase):\n     def test_common_roots(self):\n         paths = (\n",
  "django__django-11620": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 485796f..c039d3a 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -7,6 +7,8 @@ import tempfile\n import threading\n from io import StringIO\n from pathlib import Path\n+from django.http import Http404\n+from django.urls.converters import IntConverter\n from unittest import mock\n \n from django.core import mail\n@@ -242,6 +244,19 @@ class DebugViewQueriesAllowedTests(SimpleTestCase):\n     # May need a query to initialize MySQL connection\n     databases = {'default'}\n \n+    def test_technical_404_converter_raise_404(self):\n+        \"\"\"\n+        Test that Http404 exception raised in a path converter's to_python method\n+        results in a technical 404 page when DEBUG is True.\n+        \"\"\"\n+        class CustomIntConverter(IntConverter):\n+            def to_python(self, value):\n+                raise Http404\n+\n+        with mock.patch('django.urls.path', return_value=CustomIntConverter):\n+            response = self.client.get('/path-that-raises-404/')\n+            self.assertContains(response, 'Page not found', status_code=404)\n+\n     def test_handle_db_exception(self):\n         \"\"\"\n         Ensure the debug view works when a database exception is raised by\n",
  "django__django-11742": "diff --git a/tests/invalid_models_tests/test_ordinary_fields.py b/tests/invalid_models_tests/test_ordinary_fields.py\nindex fc2ea82..49d2c89 100644\n--- a/tests/invalid_models_tests/test_ordinary_fields.py\n+++ b/tests/invalid_models_tests/test_ordinary_fields.py\n@@ -79,6 +79,35 @@ class BinaryFieldTests(SimpleTestCase):\n                 id='fields.E170',\n             ),\n         ])\n+    \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n \n \n @isolate_apps('invalid_models_tests')\n@@ -110,6 +139,35 @@ class CharFieldTests(SimpleTestCase):\n                 id='fields.E120',\n             ),\n         ])\n+    \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n \n     def test_negative_max_length(self):\n         class Model(models.Model):\n@@ -123,6 +181,35 @@ class CharFieldTests(SimpleTestCase):\n                 id='fields.E121',\n             ),\n         ])\n+    \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n \n     def test_bad_max_length_value(self):\n         class Model(models.Model):\n@@ -136,6 +223,35 @@ class CharFieldTests(SimpleTestCase):\n                 id='fields.E121',\n             ),\n         ])\n+    \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n \n     def test_str_max_length_value(self):\n         class Model(models.Model):\n@@ -149,6 +265,35 @@ class CharFieldTests(SimpleTestCase):\n                 id='fields.E121',\n             ),\n         ])\n+    \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n \n     def test_str_max_length_type(self):\n         class Model(models.Model):\n@@ -162,6 +307,35 @@ class CharFieldTests(SimpleTestCase):\n                 id='fields.E121'\n             ),\n         ])\n+    \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n \n     def test_non_iterable_choices(self):\n         class Model(models.Model):\n@@ -175,6 +349,35 @@ class CharFieldTests(SimpleTestCase):\n                 id='fields.E004',\n             ),\n         ])\n+    \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n \n     def test_non_iterable_choices_two_letters(self):\n         \"\"\"Two letters isn't a valid choice pair.\"\"\"\n@@ -190,6 +393,35 @@ class CharFieldTests(SimpleTestCase):\n                 id='fields.E005',\n             ),\n         ])\n+    \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n \n     def test_iterable_of_iterable_choices(self):\n         class ThingItem:\n@@ -271,6 +503,35 @@ class CharFieldTests(SimpleTestCase):\n                 id='fields.E005',\n             ),\n         ])\n+    \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n \n     def test_choices_named_group_bad_structure(self):\n         class Model(models.Model):\n@@ -292,6 +553,35 @@ class CharFieldTests(SimpleTestCase):\n                 id='fields.E005',\n             ),\n         ])\n+    \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n \n     def test_choices_named_group_lazy(self):\n         class Model(models.Model):\n@@ -316,6 +606,35 @@ class CharFieldTests(SimpleTestCase):\n                 id='fields.E006',\n             ),\n         ])\n+    \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n \n     def test_bad_validators(self):\n         class Model(models.Model):\n@@ -333,6 +652,35 @@ class CharFieldTests(SimpleTestCase):\n                 id='fields.E008',\n             ),\n         ])\n+    \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n \n     @unittest.skipUnless(connection.vendor == 'mysql',\n                          \"Test valid only for MySQL\")\n@@ -351,6 +699,35 @@ class CharFieldTests(SimpleTestCase):\n                 id='mysql.E001',\n             )\n         ])\n+    \n+    def test_choices_in_max_length(self):\n+        class Model(models.Model):\n+            field = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('ABC', 'Value Too Long!'), \n+                    ('OK', 'Good')\n+                ],\n+            )\n+            group = models.CharField(\n+                max_length=2, \n+                choices=[\n+                    ('Nested', [('OK', 'Good'), ('Longer', 'Longer')]),\n+                    ('Grouped', [('Bad', 'Bad')]),\n+                ],\n+            )\n+\n+        for name, choice_max_length in (('field', 3), ('group', 6)):\n+            with self.subTest(name=name):\n+                field = Model._meta.get_field(name)\n+                self.assertEqual(field.check(), [\n+                    Error(\n+                        \"'max_length' is too small to fit the longest value \"\n+                        \"in 'choices' (%d characters).\" % choice_max_length,\n+                        obj=field,\n+                        id='fields.E009',\n+                    ),\n+                ])\n \n \n @isolate_apps('invalid_models_tests')\n",
  "django__django-11815": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex eec2872..61fdc1a 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -247,7 +247,25 @@ class WriterTests(SimpleTestCase):\n             (\"[list, tuple, dict, set, frozenset]\", set())\n         )\n \n-    def test_serialize_lazy_objects(self):\n+    def test_serialize_enum_translation_issue(self):\n+        class Status(enum.Enum):\n+            GOOD = _('Good')\n+            BAD = _('Bad')\n+        \n+        field = models.CharField(\n+            default=Status.GOOD,\n+            max_length=128,\n+            choices=[(status.value, status) for status in Status],\n+        )\n+        serialized_string = MigrationWriter.serialize(field)[0]\n+        self.assertEqual(\n+            serialized_string,\n+            \"models.CharField(choices=[\"\n+            \"('Good', migrations.test_writer.Status['GOOD']), \"\n+            \"('Bad', migrations.test_writer.Status['BAD'])], \"\n+            \"default=migrations.test_writer.Status['GOOD'], \"\n+            \"max_length=128)\"\n+        )\n         pattern = re.compile(r'^foo$')\n         lazy_pattern = SimpleLazyObject(lambda: pattern)\n         self.assertEqual(self.serialize_round_trip(lazy_pattern), pattern)\n",
  "django__django-11848": "diff --git a/tests/utils_tests/test_http.py b/tests/utils_tests/test_http.py\nindex f59e0ec..bc25ac4 100644\n--- a/tests/utils_tests/test_http.py\n+++ b/tests/utils_tests/test_http.py\n@@ -1,6 +1,8 @@\n+\n import unittest\n from datetime import datetime\n \n+from unittest import mock\n from django.test import SimpleTestCase, ignore_warnings\n from django.utils.datastructures import MultiValueDict\n from django.utils.deprecation import RemovedInDjango40Warning\n@@ -316,9 +318,27 @@ class HttpDateProcessingTests(unittest.TestCase):\n         parsed = parse_http_date('Sun, 06 Nov 1994 08:49:37 GMT')\n         self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n \n-    def test_parsing_rfc850(self):\n-        parsed = parse_http_date('Sunday, 06-Nov-94 08:49:37 GMT')\n-        self.assertEqual(datetime.utcfromtimestamp(parsed), datetime(1994, 11, 6, 8, 49, 37))\n+    @mock.patch('django.utils.http.datetime.datetime')\n+    def test_parsing_rfc850(self, mocked_datetime):\n+        mocked_datetime.side_effect = datetime\n+        mocked_datetime.utcnow = mock.Mock()\n+        utcnow_1 = datetime(2019, 11, 6, 8, 49, 37)\n+        utcnow_2 = datetime(2020, 11, 6, 8, 49, 37)\n+        utcnow_3 = datetime(2048, 11, 6, 8, 49, 37)\n+        tests = (\n+            (utcnow_1, 'Tuesday, 31-Dec-69 08:49:37 GMT', datetime(1969, 12, 31, 8, 49, 37)),\n+            (utcnow_1, 'Tuesday, 10-Nov-70 08:49:37 GMT', datetime(1970, 11, 10, 8, 49, 37)),\n+            (utcnow_1, 'Sunday, 06-Nov-94 08:49:37 GMT', datetime(1994, 11, 6, 8, 49, 37)),\n+            (utcnow_2, 'Wednesday, 31-Dec-70 08:49:37 GMT', datetime(1970, 12, 31, 8, 49, 37)),\n+            (utcnow_2, 'Friday, 31-Dec-71 08:49:37 GMT', datetime(1971, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Sunday, 31-Dec-00 08:49:37 GMT', datetime(2000, 12, 31, 8, 49, 37)),\n+            (utcnow_3, 'Friday, 31-Dec-99 08:49:37 GMT', datetime(1999, 12, 31, 8, 49, 37)),\n+        )\n+        for utcnow, rfc850str, expected_date in tests:\n+            with self.subTest(rfc850str=rfc850str):\n+                mocked_datetime.utcnow.return_value = utcnow\n+                parsed = parse_http_date(rfc850str)\n+                self.assertEqual(datetime.utcfromtimestamp(parsed), expected_date)\n \n     def test_parsing_asctime(self):\n         parsed = parse_http_date('Sun Nov  6 08:49:37 1994')\n",
  "django__django-11964": "diff --git a/tests/model_enums/tests.py b/tests/model_enums/tests.py\nindex 837d657..a92dba2 100644\n--- a/tests/model_enums/tests.py\n+++ b/tests/model_enums/tests.py\n@@ -39,6 +39,29 @@ class Gender(models.TextChoices):\n \n     __empty__ = '(Undeclared)'\n \n+from django.test import TestCase\n+from django.db import models\n+\n+class MyChoice(models.TextChoices):\n+    FIRST_CHOICE = \"first\", \"The first choice, it is\"\n+    SECOND_CHOICE = \"second\", \"The second choice, it is\"\n+\n+class MyObject(models.Model):\n+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\n+\n+class EnumTest(TestCase):\n+    def setUp(self) -> None:\n+        self.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n+\n+    def test_created_object_is_str(self):\n+        my_object = self.my_object\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n+\n+    def test_retrieved_object_is_str(self):\n+        my_object = MyObject.objects.last()\n+        self.assertIsInstance(my_object.my_str_value, str)\n+        self.assertEqual(str(my_object.my_str_value), \"first\")\n \n class ChoicesTests(SimpleTestCase):\n     def test_integerchoices(self):\n",
  "django__django-11999": "diff --git a/tests/model_fields/tests.py b/tests/model_fields/tests.py\nindex a9aa33c..7fa2af3 100644\n--- a/tests/model_fields/tests.py\n+++ b/tests/model_fields/tests.py\n@@ -187,7 +187,23 @@ class GetFieldDisplayTests(SimpleTestCase):\n         self.assertEqual(WhizIterEmpty(c='').c, '')        # Empty value\n \n \n-class GetChoicesTests(SimpleTestCase):\n+class FooBarOverrideDisplayTest(TestCase):\n+\n+    def test_overriding_get_FIELD_display(self):\n+        \"\"\"\n+        Test that overriding get_FIELD_display works with choice fields.\n+        \"\"\"\n+\n+        class FooBar(models.Model):\n+            foo_bar = models.IntegerField(choices=[(1, 'foo'), (2, 'bar')])\n+\n+            def get_foo_bar_display(self):\n+                return 'overridden value'\n+\n+        # Create instance of FooBar, mocking what would happen in a real use case\n+        f = FooBar(foo_bar=1)\n+        # Check that our overridden method returns the expected custom value\n+        self.assertEqual(f.get_foo_bar_display(), 'overridden value')\n \n     def test_empty_choices(self):\n         choices = []\n",
  "django__django-12113": "",
  "django__django-12125": "",
  "django__django-12184": "diff --git a/tests/urlpatterns/path_urls.py b/tests/urlpatterns/path_urls.py\nindex 12487f2..13e96dd 100644\n--- a/tests/urlpatterns/path_urls.py\n+++ b/tests/urlpatterns/path_urls.py\n@@ -14,4 +14,5 @@ urlpatterns = [\n     re_path(r'^regex_optional/(?P<arg1>\\d+)/(?:(?P<arg2>\\d+)/)?', views.empty_view, name='regex_optional'),\n     path('', include('urlpatterns.more_urls')),\n     path('<lang>/<path:url>/', views.empty_view, name='lang-and-path'),\n-]\n+    re_path(r'^module/(?P<format>(html|json|xml))?/?$', views.modules, name='modules'),\n+]\n",
  "django__django-12284": "",
  "django__django-12286": "diff --git a/tests/check_framework/test_translation.py b/tests/check_framework/test_translation.py\nindex 7c90b94..75a93b2 100644\n--- a/tests/check_framework/test_translation.py\n+++ b/tests/check_framework/test_translation.py\n@@ -1,9 +1,10 @@\n+\n from django.core.checks import Error\n from django.core.checks.translation import (\n     check_language_settings_consistent, check_setting_language_code,\n     check_setting_languages, check_setting_languages_bidi,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, override_settings\n \n \n class TranslationCheckTests(SimpleTestCase):\n@@ -75,6 +76,30 @@ class TranslationCheckTests(SimpleTestCase):\n                     Error(msg % tag, id='translation.E003'),\n                 ])\n \n+    @override_settings(\n+        USE_I18N=True,\n+        LANGUAGES=[\n+            ('de', 'German'),\n+            ('es', 'Spanish'),\n+            ('fr', 'French'),\n+            ('en-us', 'English (United States)'),\n+        ],\n+    )\n+    def test_sublanguage_with_base_language_available(self):\n+        \"\"\"Test for sublanguages when a base language is available.\"\"\"\n+        msg = (\n+            'You have provided a value for the LANGUAGE_CODE setting that is '\n+            'not in the LANGUAGES setting.'\n+        )\n+        # Sublanguages with base languages available\n+        valid_cases = [\n+            'de-at',  # Sub-language 'de-at' with 'de' available\n+            'es-mx',  # Example additional case: 'es-mx' with 'es' available\n+        ]\n+        for tag in valid_cases:\n+            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n+                self.assertEqual(check_language_settings_consistent(None), [])\n+\n     def test_inconsistent_language_settings(self):\n         msg = (\n             'You have provided a value for the LANGUAGE_CODE setting that is '\n",
  "django__django-12308": "diff --git a/tests/admin_utils/tests.py b/tests/admin_utils/tests.py\nindex acbcf33..1173a02 100644\n--- a/tests/admin_utils/tests.py\n+++ b/tests/admin_utils/tests.py\n@@ -176,6 +176,19 @@ class UtilsTests(SimpleTestCase):\n         display_value = display_for_field(None, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, self.empty_value)\n \n+    def test_json_display_for_readonly_field(self):\n+        tests = [\n+            ({'a': {'b': 'c'}}, '{\"a\": {\"b\": \"c\"}}'),\n+            (['a', 'b'], '[\"a\", \"b\"]'),\n+            ('a', '\"a\"'),\n+            # Invalid JSON test case\n+            ({('a', 'b'): 'c'}, \"{('a', 'b'): 'c'}\"),\n+        ]\n+        for value, expected_display in tests:\n+            with self.subTest(value=value):\n+                display_value = display_for_field(value, models.JSONField(), self.empty_value)\n+                self.assertEqual(display_value, expected_display)\n+\n     def test_number_formats_display_for_field(self):\n         display_value = display_for_field(12345.6789, models.FloatField(), self.empty_value)\n         self.assertEqual(display_value, '12345.6789')\n",
  "django__django-12453": "diff --git a/tests/backends/base/test_creation.py b/tests/backends/base/test_creation.py\nindex 7186dae..57990d6 100644\n--- a/tests/backends/base/test_creation.py\n+++ b/tests/backends/base/test_creation.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from unittest import mock\n \n@@ -5,7 +6,11 @@ from django.db import DEFAULT_DB_ALIAS, connection, connections\n from django.db.backends.base.creation import (\n     TEST_DATABASE_PREFIX, BaseDatabaseCreation,\n )\n-from django.test import SimpleTestCase\n+from django.test import SimpleTestCase, TransactionTestCase\n+from ..models import Object, ObjectReference\n+from django.core import serializers\n+from django.db import transaction, IntegrityError\n+import json\n \n \n def get_connection_copy():\n",
  "django__django-12497": "diff --git a/tests/invalid_models_tests/test_relative_fields.py b/tests/invalid_models_tests/test_relative_fields.py\nindex 057ec3a..ba5c8c7 100644\n--- a/tests/invalid_models_tests/test_relative_fields.py\n+++ b/tests/invalid_models_tests/test_relative_fields.py\n@@ -158,8 +158,34 @@ class RelativeFieldTests(SimpleTestCase):\n                 id='fields.E335',\n             ),\n         ])\n+    def test_corrected_recursive_relationship_hint(self):\n+        class Node(models.Model):\n+            pass\n+\n+        class Connection(models.Model):\n+            node1 = models.ForeignKey(Node, models.CASCADE, related_name='node1_connections')\n+            node2 = models.ForeignKey(Node, models.CASCADE, related_name='node2_connections')\n+            description = models.CharField(max_length=100)\n+\n+        class Link(models.Model):\n+            links = models.ManyToManyField('Node', through='Connection')\n \n-    def test_relationship_model_with_foreign_key_to_wrong_model(self):\n+        field = Link._meta.get_field('links')\n+        self.assertEqual(field.check(from_model=Link), [\n+            Error(\n+                \"The model is used as an intermediate model by \"\n+                \"'invalid_models_tests.Link.links', but it has more than one \"\n+                \"foreign key from 'invalid_models_tests.Node', which is ambiguous. You must \"\n+                \"specify which foreign key Django should use via the \"\n+                \"through_fields keyword argument.\",\n+                hint=(\n+                    'If you want to create a recursive relationship, use '\n+                    'ManyToManyField(\"self\", through=\"Connection\").'\n+                ),\n+                obj=field,\n+                id='fields.E334',\n+            ),\n+        ])\n         class WrongModel(models.Model):\n             pass\n \n",
  "django__django-12700": "diff --git a/tests/view_tests/tests/test_debug.py b/tests/view_tests/tests/test_debug.py\nindex 010daca..1894255 100644\n--- a/tests/view_tests/tests/test_debug.py\n+++ b/tests/view_tests/tests/test_debug.py\n@@ -1249,6 +1249,49 @@ class ExceptionReporterFilterTests(ExceptionReportTestMixin, LoggingCaptureMixin\n             {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n         )\n \n+    def test_cleanse_setting_recurses_in_lists_and_tuples(self):\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = [\n+            {\n+                'username': 'myuser',\n+                'password': 'mypassword',\n+                'keys': (\n+                    {'key': 'key1', 'value': 'val1'},\n+                    {'key': 'SECRET_KEY', 'value': 'sensitive_value'},\n+                ),\n+                'tokens': ['token1', 'another_secret_token'],\n+            },\n+            {'SECRET_TOKEN': 'very_secret'},\n+            ('not_secret', {'must_clean': 'top_secret'}),\n+        ]\n+        cleansed = [\n+            {\n+                'username': 'myuser',\n+                'password': reporter_filter.cleansed_substitute,\n+                'keys': (\n+                    {'key': 'key1', 'value': 'val1'},\n+                    {'key': 'SECRET_KEY', 'value': reporter_filter.cleansed_substitute},\n+                ),\n+                'tokens': [reporter_filter.cleansed_substitute, reporter_filter.cleansed_substitute],\n+            },\n+            {'SECRET_TOKEN': reporter_filter.cleansed_substitute},\n+            ('not_secret', {'must_clean': reporter_filter.cleansed_substitute}),\n+        ]\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SOME_SETTING', initial),\n+            cleansed,\n+        )\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SOME_SETTING', tuple(initial)),\n+            tuple(cleansed),\n+        )\n+        reporter_filter = SafeExceptionReporterFilter()\n+        initial = {'login': 'cooper', 'password': 'secret'}\n+        self.assertEqual(\n+            reporter_filter.cleanse_setting('SETTING_NAME', initial),\n+            {'login': 'cooper', 'password': reporter_filter.cleansed_substitute},\n+        )\n+\n     def test_request_meta_filtering(self):\n         request = self.rf.get('/', HTTP_SECRET_HEADER='super_secret')\n         reporter_filter = SafeExceptionReporterFilter()\n",
  "django__django-12708": "diff --git a/tests/migrations/test_base.py b/tests/migrations/test_base.py\nindex d6e6fdb..b8d9b5b 100644\n--- a/tests/migrations/test_base.py\n+++ b/tests/migrations/test_base.py\n@@ -45,16 +45,148 @@ class MigrationTestBase(TransactionTestCase):\n \n     def assertColumnNotExists(self, table, column, using='default'):\n         self.assertNotIn(column, [c.name for c in self.get_table_description(table, using=using)])\n+from django.db import connections, migrations, models\n+from django.test import TestCase, skipUnlessDBFeature\n \n+class TestIndexTogetherMigration(TestCase):\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_together_with_unique_together(self):\n+        app_label = 'test_index_together_unique_together'\n+        table_name = '%s_pony' % app_label\n+\n+        # Setup initial state with unique_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connections['default'].schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Assert index exists\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        \n+        # Remove index_together\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connections['default'].schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Assert index is removed, unique constraint still exists\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def _get_column_allows_null(self, table, column, using):\n         return [c.null_ok for c in self.get_table_description(table, using=using) if c.name == column][0]\n+from django.db import connections, migrations, models\n+from django.test import TestCase, skipUnlessDBFeature\n+\n+class TestIndexTogetherMigration(TestCase):\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_together_with_unique_together(self):\n+        app_label = 'test_index_together_unique_together'\n+        table_name = '%s_pony' % app_label\n \n+        # Setup initial state with unique_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connections['default'].schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Assert index exists\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        \n+        # Remove index_together\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connections['default'].schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Assert index is removed, unique constraint still exists\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def assertColumnNull(self, table, column, using='default'):\n         self.assertTrue(self._get_column_allows_null(table, column, using))\n+from django.db import connections, migrations, models\n+from django.test import TestCase, skipUnlessDBFeature\n+\n+class TestIndexTogetherMigration(TestCase):\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_together_with_unique_together(self):\n+        app_label = 'test_index_together_unique_together'\n+        table_name = '%s_pony' % app_label\n+\n+        # Setup initial state with unique_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n \n+        # Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connections['default'].schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Assert index exists\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        \n+        # Remove index_together\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connections['default'].schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Assert index is removed, unique constraint still exists\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def assertColumnNotNull(self, table, column, using='default'):\n         self.assertFalse(self._get_column_allows_null(table, column, using))\n+from django.db import connections, migrations, models\n+from django.test import TestCase, skipUnlessDBFeature\n+\n+class TestIndexTogetherMigration(TestCase):\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_together_with_unique_together(self):\n+        app_label = 'test_index_together_unique_together'\n+        table_name = '%s_pony' % app_label\n+\n+        # Setup initial state with unique_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connections['default'].schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Assert index exists\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        \n+        # Remove index_together\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connections['default'].schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n \n+        # Assert index is removed, unique constraint still exists\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def assertIndexExists(self, table, columns, value=True, using='default', index_type=None):\n         with connections[using].cursor() as cursor:\n             self.assertEqual(\n@@ -65,10 +197,76 @@ class MigrationTestBase(TransactionTestCase):\n                     if c['columns'] == list(columns) and (index_type is None or c['type'] == index_type)\n                 ),\n             )\n+from django.db import connections, migrations, models\n+from django.test import TestCase, skipUnlessDBFeature\n \n+class TestIndexTogetherMigration(TestCase):\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_together_with_unique_together(self):\n+        app_label = 'test_index_together_unique_together'\n+        table_name = '%s_pony' % app_label\n+\n+        # Setup initial state with unique_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connections['default'].schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Assert index exists\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        \n+        # Remove index_together\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connections['default'].schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Assert index is removed, unique constraint still exists\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def assertIndexNotExists(self, table, columns):\n         return self.assertIndexExists(table, columns, False)\n+from django.db import connections, migrations, models\n+from django.test import TestCase, skipUnlessDBFeature\n+\n+class TestIndexTogetherMigration(TestCase):\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_together_with_unique_together(self):\n+        app_label = 'test_index_together_unique_together'\n+        table_name = '%s_pony' % app_label\n+\n+        # Setup initial state with unique_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connections['default'].schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Assert index exists\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        \n+        # Remove index_together\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connections['default'].schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n \n+        # Assert index is removed, unique constraint still exists\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def assertConstraintExists(self, table, name, value=True, using='default'):\n         with connections[using].cursor() as cursor:\n             constraints = connections[using].introspection.get_constraints(cursor, table).items()\n@@ -76,10 +274,76 @@ class MigrationTestBase(TransactionTestCase):\n                 value,\n                 any(c['check'] for n, c in constraints if n == name),\n             )\n+from django.db import connections, migrations, models\n+from django.test import TestCase, skipUnlessDBFeature\n+\n+class TestIndexTogetherMigration(TestCase):\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_together_with_unique_together(self):\n+        app_label = 'test_index_together_unique_together'\n+        table_name = '%s_pony' % app_label\n+\n+        # Setup initial state with unique_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n \n+        # Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connections['default'].schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Assert index exists\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        \n+        # Remove index_together\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connections['default'].schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+\n+        # Assert index is removed, unique constraint still exists\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def assertConstraintNotExists(self, table, name):\n         return self.assertConstraintExists(table, name, False)\n+from django.db import connections, migrations, models\n+from django.test import TestCase, skipUnlessDBFeature\n+\n+class TestIndexTogetherMigration(TestCase):\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_together_with_unique_together(self):\n+        app_label = 'test_index_together_unique_together'\n+        table_name = '%s_pony' % app_label\n+\n+        # Setup initial state with unique_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connections['default'].schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Assert index exists\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        \n+        # Remove index_together\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connections['default'].schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n \n+        # Assert index is removed, unique constraint still exists\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def assertFKExists(self, table, columns, to, value=True, using='default'):\n         with connections[using].cursor() as cursor:\n             self.assertEqual(\n@@ -90,7 +354,40 @@ class MigrationTestBase(TransactionTestCase):\n                     if c['columns'] == list(columns)\n                 ),\n             )\n+from django.db import connections, migrations, models\n+from django.test import TestCase, skipUnlessDBFeature\n+\n+class TestIndexTogetherMigration(TestCase):\n+    @skipUnlessDBFeature('allows_multiple_constraints_on_same_fields')\n+    def test_index_together_with_unique_together(self):\n+        app_label = 'test_index_together_unique_together'\n+        table_name = '%s_pony' % app_label\n+\n+        # Setup initial state with unique_together\n+        project_state = self.set_up_test_model(app_label, unique_together=True)\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n+\n+        # Add index_together\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', [('pink', 'weight')])\n+        operation.state_forwards(app_label, new_state)\n+        with connections['default'].schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n+        \n+        # Assert index exists\n+        self.assertIndexExists(table_name, ['pink', 'weight'])\n+        \n+        # Remove index_together\n+        project_state = new_state\n+        new_state = project_state.clone()\n+        operation = migrations.AlterIndexTogether('Pony', set())\n+        operation.state_forwards(app_label, new_state)\n+        with connections['default'].schema_editor() as editor:\n+            operation.database_forwards(app_label, editor, project_state, new_state)\n \n+        # Assert index is removed, unique constraint still exists\n+        self.assertIndexNotExists(table_name, ['pink', 'weight'])\n+        self.assertUniqueConstraintExists(table_name, ['pink', 'weight'])\n     def assertFKNotExists(self, table, columns, to):\n         return self.assertFKExists(table, columns, to, False)\n \n",
  "django__django-12747": "diff --git a/tests/delete/tests.py b/tests/delete/tests.py\nindex 8fb8c27..83dcfb6 100644\n--- a/tests/delete/tests.py\n+++ b/tests/delete/tests.py\n@@ -697,7 +697,30 @@ class FastDeleteTests(TestCase):\n                 (0, {'delete.User': 0})\n             )\n \n-    def test_fast_delete_combined_relationships(self):\n+    def test_zero_deletions_foreign_key(self):\n+        \"\"\"\n+        Test zero deletions for models with foreign keys should return\n+        a dictionary with model-label keys and zero values.\n+        \"\"\"\n+        existed_objs = {\n+            HiddenUser._meta.label: 0,\n+            HiddenUserProfile._meta.label: 0,\n+        }\n+        deleted, deleted_objs = HiddenUser.objects.filter(id__lt=0).delete()  # No objects should be deleted\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, existed_objs)\n+\n+    def test_zero_deletions_simple_model(self):\n+        \"\"\"\n+        Test zero deletions for simple models without foreign keys should return\n+        a dictionary with model-label keys and zero values.\n+        \"\"\"\n+        existed_objs = {\n+            MR._meta.label: 0,\n+        }\n+        deleted, deleted_objs = MR.objects.filter(id__lt=0).delete()  # No objects should be deleted\n+        self.assertEqual(deleted, 0)\n+        self.assertEqual(deleted_objs, existed_objs)\n         # The cascading fast-delete of SecondReferrer should be combined\n         # in a single DELETE WHERE referrer_id OR unique_field.\n         origin = Origin.objects.create()\n",
  "django__django-12856": "",
  "django__django-12915": "diff --git a/tests/asgi/tests.py b/tests/asgi/tests.py\nindex 72f5bd1..3d6c07e 100644\n--- a/tests/asgi/tests.py\n+++ b/tests/asgi/tests.py\n@@ -79,6 +79,36 @@ class ASGITest(SimpleTestCase):\n         # Allow response.close() to finish.\n         await communicator.wait()\n \n+    async def test_async_static_file_handler(self):\n+        # Setting up the application with ASGIStaticFilesHandler\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        # Constructing a request factory for asynchronous requests\n+        async_req_factory = AsyncRequestFactory()\n+        \n+        # Test case for an existing static file\n+        request = async_req_factory.get('/static/file.txt')\n+        handler = ASGIStaticFilesHandler(application)\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 200)\n+        file_path = TEST_STATIC_ROOT / 'file.txt'\n+        with open(file_path, 'rb') as test_file:\n+            expected_contents = test_file.read()\n+        self.assertEqual(response.content, expected_contents)\n+\n+        # Test case for a non-existent static file\n+        request = async_req_factory.get('/static/nonexistent.txt')\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 404)\n+\n+    async def test_async_handler_with_invalid_method(self):\n+        # Testing with an unsupported HTTP method\n+        application = ASGIStaticFilesHandler(get_asgi_application())\n+        async_req_factory = AsyncRequestFactory()\n+        request = async_req_factory.post('/static/file.txt')  # POST instead of GET\n+        handler = ASGIStaticFilesHandler(application)\n+        response = await handler.get_response_async(request)\n+        self.assertEqual(response.status_code, 405)  # 405 Method Not Allowed\n+\n     async def test_headers(self):\n         application = get_asgi_application()\n         communicator = ApplicationCommunicator(\n",
  "django__django-12983": "diff --git a/tests/utils_tests/test_text.py b/tests/utils_tests/test_text.py\nindex bb1d0a3..314bed5 100644\n--- a/tests/utils_tests/test_text.py\n+++ b/tests/utils_tests/test_text.py\n@@ -197,6 +197,14 @@ class TestUtilsText(SimpleTestCase):\n             ('    foo \u0131\u00e7 bar', 'foo-\u0131\u00e7-bar', True),\n             ('\u4f60\u597d', '\u4f60\u597d', True),\n             ('\u0130stanbul', 'istanbul', True),\n+            # Fix verification for leading/trailing dashes and underscores\n+            ('___This is a test ---', 'this-is-a-test', False),\n+            ('___Django__utils---test___', 'django-utils-test', False),\n+            ('___multiple_underscores___', 'multiple-underscores', False),\n+            ('---multiple-dashes---', 'multiple-dashes', False),\n+            # Unicode case\n+            ('--\u0130stanbul__is---beautiful___', 'istanbul-is-beautiful', True),\n+            ('---\u4f60\u597d\u4e16\u754c---', '\u4f60\u597d\u4e16\u754c', True),\n         )\n         for value, output, is_unicode in items:\n             self.assertEqual(text.slugify(value, allow_unicode=is_unicode), output)\n",
  "django__django-13028": "",
  "django__django-13158": "",
  "django__django-13230": "",
  "django__django-13315": "diff --git a/tests/model_forms/tests.py b/tests/model_forms/tests.py\nindex 64b15bf..0de75d4 100644\n--- a/tests/model_forms/tests.py\n+++ b/tests/model_forms/tests.py\n@@ -2819,6 +2819,62 @@ class LimitChoicesToTests(TestCase):\n         fields = fields_for_model(StumpJoke, ['has_fooled_today'])\n         self.assertSequenceEqual(fields['has_fooled_today'].queryset, [self.threepwood])\n \n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates_with_q_object(self):\n+        marley = Character.objects.create(username='Marley', last_action='2023-01-01')\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-01-02')\n+\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class ExtendedCharacterDetails(models.Model):\n+            character_fooled = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to=models.Q(\n+                    jokes__funny=True,\n+                    jokes_today__funny=True,\n+                ),\n+                related_name='details_fk_extended',\n+            )\n+\n+        form = forms.modelform_factory(ExtendedCharacterDetails, fields=\"__all__\")()\n+        self.assertCountEqual(form.fields['character_fooled'].queryset, [marley, threepwood])\n+\n+    @isolate_apps('model_forms')\n+    def test_limit_choices_to_no_duplicates_with_dictionary(self):\n+        marley = Character.objects.create(username='Marley', last_action='2023-01-01')\n+        threepwood = Character.objects.create(username='Threepwood', last_action='2023-01-02')\n+\n+        joke1 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke2 = StumpJoke.objects.create(funny=True, most_recently_fooled=threepwood)\n+        joke3 = StumpJoke.objects.create(funny=True, most_recently_fooled=marley)\n+        StumpJoke.objects.create(funny=False, most_recently_fooled=marley)\n+\n+        joke1.has_fooled_today.add(marley, threepwood)\n+        joke2.has_fooled_today.add(marley)\n+        joke3.has_fooled_today.add(marley, threepwood)\n+\n+        class ExtendedCharacterDetailsDict(models.Model):\n+            character_fooled = models.ForeignKey(\n+                Character,\n+                models.CASCADE,\n+                limit_choices_to={\n+                    'jokes__funny': True,\n+                    'jokes_today__funny': True,\n+                },\n+                related_name='details_fk_extended_dict',\n+            )\n+\n+        form = forms.modelform_factory(ExtendedCharacterDetailsDict, fields=\"__all__\")()\n+        self.assertCountEqual(form.fields['character_fooled'].queryset, [marley, threepwood])\n+\n     def test_callable_called_each_time_form_is_instantiated(self):\n         field = StumpJokeForm.base_fields['most_recently_fooled']\n         with mock.patch.object(field, 'limit_choices_to') as today_callable_dict:\n",
  "django__django-13321": "",
  "django__django-13401": "",
  "django__django-13447": "diff --git a/tests/admin_views/test_adminsite.py b/tests/admin_views/test_adminsite.py\nindex 16a02bb..3748778 100644\n--- a/tests/admin_views/test_adminsite.py\n+++ b/tests/admin_views/test_adminsite.py\n@@ -48,6 +48,16 @@ class SiteEachContextTest(TestCase):\n     def test_available_apps(self):\n         ctx = self.ctx\n         apps = ctx['available_apps']\n+\n+        # Test to verify model class is correctly included in app_list context\n+        for app in apps:\n+            for model in app['models']:\n+                # Check model class presence\n+                self.assertIn('model', model)\n+                # Check model class instance\n+                self.assertTrue(isinstance(model['model'], type))\n+        ctx = self.ctx\n+        apps = ctx['available_apps']\n         # we have registered two models from two different apps\n         self.assertEqual(len(apps), 2)\n \n",
  "django__django-13551": "diff --git a/tests/auth_tests/test_tokens.py b/tests/auth_tests/test_tokens.py\nindex a6c14e0..f77d62c 100644\n--- a/tests/auth_tests/test_tokens.py\n+++ b/tests/auth_tests/test_tokens.py\n@@ -1,8 +1,11 @@\n+\n from datetime import datetime, timedelta\n \n from django.conf import settings\n from django.contrib.auth.models import User\n from django.contrib.auth.tokens import PasswordResetTokenGenerator\n+from .with_custom_email_field import CustomEmailField\n+from .models import CustomEmailField, IntegerUsernameUser\n from django.test import TestCase\n from django.test.utils import ignore_warnings\n from django.utils.deprecation import RemovedInDjango40Warning\n",
  "django__django-13590": "",
  "django__django-13658": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex be37800..172c296 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -19,7 +19,10 @@ from django.conf import settings\n from django.core.management import (\n     BaseCommand, CommandError, call_command, color,\n )\n-from django.core.management.commands.loaddata import Command as LoaddataCommand\n+from unittest import mock\n+from django.core.management import execute_from_command_line\n+from django.core.management.base import CommandError\n+from django.test.utils import captured_stderr, captured_stdout\n from django.core.management.commands.runserver import (\n     Command as RunserverCommand,\n )\n",
  "django__django-13660": "diff --git a/tests/shell/tests.py b/tests/shell/tests.py\nindex fd9932f..fc1deae 100644\n--- a/tests/shell/tests.py\n+++ b/tests/shell/tests.py\n@@ -1,3 +1,4 @@\n+\n import sys\n import unittest\n from unittest import mock\n@@ -44,9 +45,51 @@ class ShellCommandTestCase(SimpleTestCase):\n         with self.assertRaisesMessage(CommandError, \"Couldn't import bpython interface.\"):\n             call_command('shell', interface='bpython')\n \n+    script_globals = 'print(\"__name__\" in globals())'\n+    script_with_inline_function = (\n+        'import django\\n'\n+        'def f():\\n'\n+        '    print(django.__version__)\\n'\n+        'f()'\n+    )\n+\n+    def test_command_option_globals(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_globals)\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    def test_command_option_inline_function_call(self):\n+        with captured_stdout() as stdout:\n+            call_command('shell', command=self.script_with_inline_function)\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_globals(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_globals)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), 'True')\n+\n+    @unittest.skipIf(\n+        sys.platform == 'win32',\n+        \"Windows select() doesn't support file descriptors.\",\n+    )\n+    @mock.patch('django.core.management.commands.shell.select')\n+    def test_stdin_read_inline_function_call(self, select):\n+        with captured_stdin() as stdin, captured_stdout() as stdout:\n+            stdin.write(self.script_with_inline_function)\n+            stdin.seek(0)\n+            call_command('shell')\n+        self.assertEqual(stdout.getvalue().strip(), __version__)\n+\n     # [1] Patch select to prevent tests failing when when the test suite is run\n     # in parallel mode. The tests are run in a subprocess and the subprocess's\n     # stdin is closed and replaced by /dev/null. Reading from /dev/null always\n     # returns EOF and so select always shows that sys.stdin is ready to read.\n     # This causes problems because of the call to select.select() towards the\n-    # end of shell's handle() method.\n+    # end of shell's handle() method.\n",
  "django__django-13710": "diff --git a/tests/admin_inlines/tests.py b/tests/admin_inlines/tests.py\nindex 2d83d62..0d61af8 100644\n--- a/tests/admin_inlines/tests.py\n+++ b/tests/admin_inlines/tests.py\n@@ -1013,7 +1013,29 @@ class TestVerboseNameInlineForms(TestDataMixin, TestCase):\n         self.assertContains(response, 'Add another Model with both - name')\n         self.assertNotContains(response, '<h2>Model with both - plural name</h2>')\n \n-    def test_both_verbose_names_inline(self):\n+    def test_inline_defaults_verbose_name_plural_from_verbose_name(self):\n+        class DefaultVerboseProfileInline(TabularInline):\n+            model = Profile\n+            verbose_name = 'Special profile'\n+\n+        class NoVerboseProfileInline(TabularInline):\n+            model = Profile\n+\n+        modeladmin = ModelAdmin(ProfileCollection, admin_site)\n+        modeladmin.inlines = [DefaultVerboseProfileInline, NoVerboseProfileInline]\n+        obj = ProfileCollection.objects.create()\n+        url = reverse('admin:admin_inlines_profilecollection_change', args=(obj.pk,))\n+        request = self.factory.get(url)\n+        request.user = self.superuser\n+        response = modeladmin.changeform_view(request)\n+\n+        # Default verbose_name_plural should be 'Special profiles'\n+        self.assertContains(response, '<h2>Special profiles</h2>')\n+        self.assertContains(response, 'Add another Special profile')\n+\n+        # Without verbose_name and verbose_name_plural, it defaults to the model's verbose_name_plural\n+        self.assertContains(response, '<h2>Profiles</h2>')\n+        self.assertContains(response, 'Add another Profile')\n         class NonVerboseProfileInline(TabularInline):\n             model = Profile\n             verbose_name = 'Non-verbose childs - name'\n",
  "django__django-13757": "diff --git a/tests/model_fields/test_jsonfield.py b/tests/model_fields/test_jsonfield.py\nindex f53ff8c..d4521cf 100644\n--- a/tests/model_fields/test_jsonfield.py\n+++ b/tests/model_fields/test_jsonfield.py\n@@ -595,6 +595,14 @@ class TestQuerying(TestCase):\n             [self.objs[4]],\n         )\n \n+    def test_keytransform_isnull_true(self):\n+        # This test should ensure that __isnull=True does not match JSON null values on SQLite and Oracle.\n+        # It should only match objects that do not have the key.\n+        self.assertSequenceEqual(\n+            NullableJSONModel.objects.filter(value__j__isnull=True),\n+            self.objs[:4] + self.objs[5:],\n+        )\n+\n     def test_isnull_key_or_none(self):\n         obj = NullableJSONModel.objects.create(value={'a': None})\n         self.assertSequenceEqual(\n",
  "django__django-13768": "",
  "django__django-13925": "",
  "django__django-13933": "diff --git a/tests/forms_tests/tests/test_error_messages.py b/tests/forms_tests/tests/test_error_messages.py\nindex 881a5a8..a66a561 100644\n--- a/tests/forms_tests/tests/test_error_messages.py\n+++ b/tests/forms_tests/tests/test_error_messages.py\n@@ -281,8 +281,61 @@ class FormsErrorMessagesTestCase(SimpleTestCase, AssertFormErrorsMixin):\n             '</ul></li></ul>'\n         )\n \n+from django.test import TestCase\n+from django.forms import ModelChoiceField, ModelMultipleChoiceField\n+from .models import ChoiceModel\n+from .mixins import AssertFormErrorsMixin\n \n class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n+    \n+    def test_modelchoicefield_value_placeholder(self):\n+        # Test for the invalid choice value being displayed in an error message\n+        field = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={'invalid_choice': '\"%(value)s\" is not one of the available choices.'},\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            field.clean,\n+            'invalid'\n+        )\n+\n+    def test_modelchoicefield_with_integer_invalid_choice(self):\n+        # Ensure the invalid integer value is displayed correctly\n+        field = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={'invalid_choice': '\"%(value)s\" is not one of the available choices.'},\n+        )\n+        self.assertFormErrors(\n+            ['\"999\" is not one of the available choices.'],\n+            field.clean,\n+            999\n+        )\n+\n+    def test_modelchoicefield_with_none_as_invalid_choice(self):\n+        # Test handling of None as a choice\n+        field = ModelChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            required=False,\n+            error_messages={'invalid_choice': 'Choice cannot be None.'},\n+        )\n+        self.assertFormErrors(\n+            ['Choice cannot be None.'],\n+            field.clean,\n+            None\n+        )\n+\n+    def test_modelmultiplechoicefield_value_placeholder(self):\n+        # Ensure ModelMultipleChoiceField handles invalid choices with detailed error messages\n+        field = ModelMultipleChoiceField(\n+            queryset=ChoiceModel.objects.all(),\n+            error_messages={'invalid_choice': '\"%(value)s\" is not one of the available choices.'},\n+        )\n+        self.assertFormErrors(\n+            ['\"invalid\" is not one of the available choices.'],\n+            field.clean,\n+            ['invalid']\n+        )\n     def test_modelchoicefield(self):\n         # Create choices for the model choice field tests below.\n         ChoiceModel.objects.create(pk=1, name='a')\n@@ -307,4 +360,4 @@ class ModelChoiceFieldErrorMessagesTestCase(TestCase, AssertFormErrorsMixin):\n         f = ModelMultipleChoiceField(queryset=ChoiceModel.objects.all(), error_messages=e)\n         self.assertFormErrors(['REQUIRED'], f.clean, '')\n         self.assertFormErrors(['NOT A LIST OF VALUES'], f.clean, '3')\n-        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n+        self.assertFormErrors(['4 IS INVALID CHOICE'], f.clean, ['4'])\n",
  "django__django-13964": "diff --git a/tests/many_to_one/tests.py b/tests/many_to_one/tests.py\nindex 8af1b8e..ba13813 100644\n--- a/tests/many_to_one/tests.py\n+++ b/tests/many_to_one/tests.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n from copy import deepcopy\n \n@@ -5,8 +6,8 @@ from django.core.exceptions import FieldError, MultipleObjectsReturned\n from django.db import IntegrityError, models, transaction\n from django.test import TestCase\n from django.utils.translation import gettext_lazy\n-\n from .models import (\n+    ParentStringPrimaryKey, ChildStringPrimaryKeyParent,\n     Article, Category, Child, ChildNullableParent, City, Country, District,\n     First, Parent, Record, Relation, Reporter, School, Student, Third,\n     ToFieldChild,\n@@ -549,7 +550,25 @@ class ManyToOneTests(TestCase):\n         self.assertEqual(child.parent, parent)\n         self.assertEqual(child.parent_id, parent.name)\n \n-    def test_fk_to_bigautofield(self):\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child_without_pk(self):\n+        # Testing the scenario where the product is assigned without a primary key\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey()\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            child.parent.name = 'new_sku'\n+            parent.save()\n+            child.save()\n+            self.assertTrue(ChildStringPrimaryKeyParent.objects.filter(parent_id='').exists())\n+            self.assertFalse(ChildStringPrimaryKeyParent.objects.filter(parent=child.parent).exists())\n+\n+    def test_save_fk_after_parent_with_non_numeric_pk_set_on_child_with_pk(self):\n+        # Testing the scenario where the product is assigned with a primary key\n+        with transaction.atomic():\n+            parent = ParentStringPrimaryKey(name='new_sku')\n+            child = ChildStringPrimaryKeyParent(parent=parent)\n+            parent.save()\n+            child.save()\n+            self.assertTrue(ChildStringPrimaryKeyParent.objects.filter(parent=child.parent).exists())\n         ch = City.objects.create(name='Chicago')\n         District.objects.create(city=ch, name='Far South')\n         District.objects.create(city=ch, name='North')\n",
  "django__django-14016": "diff --git a/tests/queries/test_q.py b/tests/queries/test_q.py\nindex c0384a9..5e5d15c 100644\n--- a/tests/queries/test_q.py\n+++ b/tests/queries/test_q.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import F, Q\n from django.test import SimpleTestCase\n \n@@ -19,6 +20,15 @@ class QTests(SimpleTestCase):\n     def test_combine_or_both_empty(self):\n         self.assertEqual(Q() | Q(), Q())\n \n+    def test_q_combination_with_dict_keys(self):\n+        # Test combining Q objects with dict_keys using | and & operators\n+        empty_dict_keys = {}.keys()\n+        q = Q(x__in=empty_dict_keys)\n+        self.assertEqual(q & Q(), q)\n+        self.assertEqual(Q() & q, q)\n+        self.assertEqual(q | Q(), q)\n+        self.assertEqual(Q() | q, q)\n+\n     def test_combine_not_q_object(self):\n         obj = object()\n         q = Q(x=1)\n",
  "django__django-14017": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 707f339..14050d1 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -30,6 +30,7 @@ from django.test.utils import (\n )\n from django.utils.functional import SimpleLazyObject\n \n+from django.db.models import Q, Exists, OuterRef\n from .models import (\n     UUID, UUIDPK, Company, Employee, Experiment, Manager, Number,\n     RemoteEmployee, Result, SimulationRun, Time,\n@@ -794,7 +795,20 @@ class BasicExpressionsTests(TestCase):\n         )\n         self.assertCountEqual(qs, [self.example_inc.ceo, self.foobar_ltd.ceo, self.max])\n \n-    def test_boolean_expression_combined(self):\n+    def test_q_and_exists_combination(self):\n+        is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n+        test_cases = [\n+            (Q() & Exists(is_ceo), \"Q & Exists\"),\n+            (Exists(is_ceo) & Q(), \"Exists & Q\"),\n+            (Q() | Exists(is_ceo), \"Q | Exists\"),\n+            (Exists(is_ceo) | Q(), \"Exists | Q\")\n+        ]\n+        for condition, description in test_cases:\n+            with self.subTest(description=description):\n+                self.assertCountEqual(\n+                    Employee.objects.filter(condition),\n+                    [self.example_inc.ceo],\n+                )\n         is_ceo = Company.objects.filter(ceo=OuterRef('pk'))\n         is_poc = Company.objects.filter(point_of_contact=OuterRef('pk'))\n         self.gmbh.point_of_contact = self.max\n",
  "django__django-14155": "diff --git a/tests/urlpatterns_reverse/tests.py b/tests/urlpatterns_reverse/tests.py\nindex 0f968fa..bb1495f 100644\n--- a/tests/urlpatterns_reverse/tests.py\n+++ b/tests/urlpatterns_reverse/tests.py\n@@ -1127,6 +1127,30 @@ class ResolverMatchTests(SimpleTestCase):\n                 self.assertEqual(match[0], func)\n                 self.assertEqual(match[1], args)\n                 self.assertEqual(match[2], kwargs)\n+    @override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n+    def test_repr_functools_partial(self):\n+        \"\"\"Test ResolverMatch.__repr__ with functools.partial views.\"\"\"\n+        tests = [\n+            ('partial', 'template.html'),\n+            ('partial_nested', 'nested_partial.html'),\n+            ('partial_wrapped', 'template.html'),\n+        ]\n+        for name, template_name in tests:\n+            with self.subTest(name=name):\n+                # Create partial views\n+                func = functools.partial(views.empty_view, template_name=template_name)\n+                resolved = resolve(f'/{name}/')\n+                # Repr validation\n+                expected_func_repr = (\n+                    f\"functools.partial({views.empty_view!r}, \"\n+                    f\"template_name='{template_name}')\"\n+                )\n+                expected_repr = (\n+                    f\"ResolverMatch(func={expected_func_repr}, args=(), kwargs={{}}, \"\n+                    f\"url_name='{name}', app_names=[], namespaces=[], \"\n+                    f\"route='{name}/')\"\n+                )\n+                self.assertEqual(repr(resolved), expected_repr)\n \n     def test_resolver_match_on_request(self):\n         response = self.client.get('/resolver_match/')\n@@ -1146,6 +1170,10 @@ class ResolverMatchTests(SimpleTestCase):\n         )\n \n \n+import functools\n+from django.urls import resolve\n+from urlpatterns_reverse import views\n+\n @override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n class ErroneousViewTests(SimpleTestCase):\n \n",
  "django__django-14238": "diff --git a/tests/model_options/test_default_pk.py b/tests/model_options/test_default_pk.py\nindex 6d8c5d8..0e0d5a9 100644\n--- a/tests/model_options/test_default_pk.py\n+++ b/tests/model_options/test_default_pk.py\n@@ -1,3 +1,4 @@\n+\n from django.core.exceptions import ImproperlyConfigured\n from django.db import models\n from django.test import SimpleTestCase, override_settings\n@@ -68,6 +69,28 @@ class TestDefaultPK(SimpleTestCase):\n \n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     def test_default_auto_field_setting(self):\n         class Model(models.Model):\n             pass\n@@ -84,6 +107,28 @@ class TestDefaultPK(SimpleTestCase):\n \n     @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n     @override_settings(DEFAULT_AUTO_FIELD='django.db.models.SmallAutoField')\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MyBigAutoField')\n+    def test_default_auto_field_setting_bigautofield_subclass(self):\n+        class MyBigAutoField(models.BigAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MyBigAutoField)\n+\n+    @isolate_apps('model_options.apps.ModelDefaultPKConfig')\n+    @override_settings(DEFAULT_AUTO_FIELD='model_options.test_default_pk.MySmallAutoField')\n+    def test_default_auto_field_setting_smallautofield_subclass(self):\n+        class MySmallAutoField(models.SmallAutoField):\n+            pass\n+        \n+        class Model(models.Model):\n+            pass\n+\n+        self.assertIsInstance(Model._meta.pk, MySmallAutoField)\n     def test_m2m_default_auto_field_setting(self):\n         class M2MModel(models.Model):\n             m2m = models.ManyToManyField('self')\n",
  "django__django-14382": "diff --git a/tests/admin_scripts/tests.py b/tests/admin_scripts/tests.py\nindex afeed3e..d2d62a0 100644\n--- a/tests/admin_scripts/tests.py\n+++ b/tests/admin_scripts/tests.py\n@@ -2168,8 +2168,29 @@ class StartApp(AdminScriptTestCase):\n                     \"sure the name is a valid identifier.\".format(bad_name)\n                 )\n                 self.assertFalse(os.path.exists(testproject_dir))\n+    def test_trailing_slash_in_target_app_directory_name(self):\n+        app_dir = os.path.join(self.test_dir, 'apps', 'app1')\n+        os.makedirs(app_dir)\n+        _, err = self.run_django_admin(['startapp', 'app', os.path.join('apps', 'app1', '')])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(app_dir, 'apps.py')), True)\n+\n+    def test_trailing_slash_in_existing_directory(self):\n+        # Test when the directory already exists with a trailing slash\n+        existing_dir = os.path.join(self.test_dir, 'apps', 'existing_app/')\n+        os.makedirs(existing_dir)\n+        _, err = self.run_django_admin(['startapp', 'another_app', existing_dir])\n+        self.assertNoOutput(err)\n+        self.assertIs(os.path.exists(os.path.join(existing_dir, 'apps.py')), True)\n \n-    def test_importable_name(self):\n+    def test_trailing_slash_no_existing_directory(self):\n+        # Test when directory does not exist with a trailing slash\n+        non_existing_dir = os.path.join(self.test_dir, 'apps', 'new_app/')\n+        _, err = self.run_django_admin(['startapp', 'another_app', non_existing_dir])\n+        self.assertOutput(\n+            err,\n+            \"Destination directory '{}' does not exist, please create it first.\".format(non_existing_dir.rstrip('/'))\n+        )\n         \"\"\"\n         startapp validates that app name doesn't clash with existing Python\n         modules.\n",
  "django__django-14411": "",
  "django__django-14580": "diff --git a/tests/migrations/test_writer.py b/tests/migrations/test_writer.py\nindex dc4f94a..99cae27 100644\n--- a/tests/migrations/test_writer.py\n+++ b/tests/migrations/test_writer.py\n@@ -655,6 +655,33 @@ class WriterTests(SimpleTestCase):\n         self.assertEqual(result.args, value.args)\n         self.assertEqual(result.keywords, value.keywords)\n \n+    def test_serialize_model_with_mixin_and_base(self):\n+        \"\"\"\n+        Ensure that migrations correctly import models when\n+        a new model inherits from a mixin and an abstract base model.\n+        \"\"\"\n+        class MyField(models.TextField):\n+            pass\n+\n+        class MyBaseModel(models.Model):\n+            class Meta:\n+                abstract = True\n+\n+        class MyMixin:\n+            pass\n+\n+        class MyModel(MyMixin, MyBaseModel):\n+            name = MyField(primary_key=True)\n+\n+        def serialize_model(instance):\n+            return MigrationWriter.serialize(instance)\n+\n+        migration_code, imports = serialize_model(models.Model)\n+        self.assertIn(\"from django.db import models\", imports)\n+        self.assertIn('app.models.MyMixin', migration_code)\n+        self.assertIn('app.models.MyBaseModel', migration_code)\n+        self.assertIn(\"models.Model\", imports)\n+\n     def test_serialize_type_none(self):\n         self.assertSerializedEqual(type(None))\n \n",
  "django__django-14608": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 8d2f689..f83bd6e 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -984,6 +984,22 @@ class FormsFormsetTestCase(SimpleTestCase):\n         self.assertFalse(formset.is_valid())\n         self.assertEqual(formset.non_form_errors(), ['You may only specify a drink once.'])\n \n+    def test_formset_non_form_errors_with_class(self):\n+        \"\"\"\n+        Test that non_form_errors is rendered with the 'nonform' CSS class in the ErrorList.\n+        \"\"\"\n+        data = {\n+            'drinks-TOTAL_FORMS': '2',\n+            'drinks-INITIAL_FORMS': '0',\n+            'drinks-MIN_NUM_FORMS': '0',\n+            'drinks-MAX_NUM_FORMS': '0',\n+            'drinks-0-name': 'Gin and Tonic',\n+            'drinks-1-name': 'Gin and Tonic',\n+        }\n+        formset = FavoriteDrinksFormSet(data, prefix='drinks')\n+        self.assertFalse(formset.is_valid())\n+        self.assertIn('<ul class=\"errorlist nonform\"><li>You may only specify a drink once.</li></ul>', str(formset.non_form_errors()))\n+\n     def test_formset_iteration(self):\n         \"\"\"Formset instances are iterable.\"\"\"\n         ChoiceFormset = formset_factory(Choice, extra=3)\n",
  "django__django-14672": "",
  "django__django-14752": "diff --git a/tests/admin_views/test_autocomplete_view.py b/tests/admin_views/test_autocomplete_view.py\nindex 7ef6d86..38339cd 100644\n--- a/tests/admin_views/test_autocomplete_view.py\n+++ b/tests/admin_views/test_autocomplete_view.py\n@@ -293,6 +293,45 @@ class AutocompleteJsonViewTests(AdminViewBasicTestCase):\n             'pagination': {'more': False},\n         })\n \n+    def test_serialize_result_with_extra_fields(self):\n+        class AutocompleteJsonSerializeResultView(AutocompleteJsonView):\n+            def serialize_result(self, obj, to_field_name):\n+                return {\n+                    **super().serialize_result(obj, to_field_name),\n+                    'posted': str(obj.posted),\n+                }\n+\n+        # Create sample Question objects\n+        Question.objects.create(question='Question 1', posted=datetime.date(2021, 8, 9))\n+        Question.objects.create(question='Question 2', posted=datetime.date(2021, 8, 7))\n+        \n+        # Test request\n+        request = self.factory.get(self.url, {'term': 'question', **self.opts})\n+        request.user = self.superuser\n+        response = AutocompleteJsonSerializeResultView.as_view(**self.as_view_args)(request)\n+\n+        # Check that the response status is OK\n+        self.assertEqual(response.status_code, 200)\n+        \n+        # Verify that the JSON response is as expected\n+        data = json.loads(response.content.decode('utf-8'))\n+        self.assertEqual(\n+            data,\n+            {\n+                'results': [\n+                    {'id': str(q.pk), 'text': q.question, 'posted': str(q.posted)}\n+                    for q in Question.objects.order_by('-posted')\n+                ],\n+                'pagination': {'more': False},\n+            }\n+        )\n+\n+\n+import datetime\n+import json\n+from django.http import JsonResponse\n+from .models import Question\n+from django.test import TestCase\n \n @override_settings(ROOT_URLCONF='admin_views.urls')\n class SeleniumTests(AdminSeleniumTestCase):\n",
  "django__django-14787": "diff --git a/tests/decorators/tests.py b/tests/decorators/tests.py\nindex 5ea3da6..80b95a1 100644\n--- a/tests/decorators/tests.py\n+++ b/tests/decorators/tests.py\n@@ -426,7 +426,39 @@ class MethodDecoratorTests(SimpleTestCase):\n                     return \"tests\"\n \n \n-class XFrameOptionsDecoratorsTests(TestCase):\n+from functools import wraps\n+from django.utils.decorators import method_decorator\n+\n+class WrapperAssignmentsTests(TestCase):\n+    def test_wrapper_preservation(self):\n+        \"\"\"Test that method_decorator preserves function attributes.\"\"\"\n+        func_name = None\n+        func_module = None\n+        func_doc = None\n+\n+        def decorator(func):\n+            @wraps(func)\n+            def inner(*args, **kwargs):\n+                nonlocal func_name, func_module, func_doc\n+                func_name = getattr(func, '__name__', None)\n+                func_module = getattr(func, '__module__', None)\n+                func_doc = getattr(func, '__doc__', None)\n+                return func(*args, **kwargs)\n+            return inner\n+\n+        class Test:\n+            @method_decorator(decorator)\n+            def method(self):\n+                \"\"\"This is a test method.\"\"\"\n+                return \"success\"\n+\n+        test_instance = Test()\n+        result = test_instance.method()\n+\n+        self.assertEqual(func_name, 'method')\n+        self.assertIsNotNone(func_module)\n+        self.assertEqual(func_doc, \"This is a test method.\")\n+        self.assertEqual(result, \"success\")\n     \"\"\"\n     Tests for the X-Frame-Options decorators.\n     \"\"\"\n",
  "django__django-14855": "diff --git a/tests/admin_views/tests.py b/tests/admin_views/tests.py\nindex 507855b..1434afd 100644\n--- a/tests/admin_views/tests.py\n+++ b/tests/admin_views/tests.py\n@@ -5083,6 +5083,43 @@ class ReadonlyTest(AdminFieldExtractionMixin, TestCase):\n     def test_user_password_change_limited_queryset(self):\n         su = User.objects.filter(is_superuser=True)[0]\n         response = self.client.get(reverse('admin2:auth_user_password_change', args=(su.pk,)))\n+\n+    def _test_readonly_foreignkey_links(self, admin_site):\n+        \"\"\"\n+        Internal helper to test whether the readonly ForeignKey fields across the custom and default admin\n+        generate the correct URLs.\n+        \"\"\"\n+        chapter = Chapter.objects.create(\n+            title='Chapter Title',\n+            content='Sample content',\n+            book=Book.objects.create(name='Sample Book'),\n+        )\n+        language = Language.objects.create(iso='xyz', name='Sample Language')\n+        obj = ReadOnlyRelatedField.objects.create(\n+            chapter=chapter,\n+            language=language,\n+            user=self.superuser,\n+        )\n+        response = self.client.get(\n+            reverse(f'{admin_site}:admin_views_readonlyrelatedfield_change', args=(obj.pk,))\n+        )\n+        self.assertContains(\n+            response,\n+            reverse(f'{admin_site}:admin_views_language_change', args=(language.pk,)),\n+            msg_prefix=f\"URL for admin site {admin_site} did not contain a correct readonly ForeignKey link\"\n+        )\n+\n+    def test_readonly_foreignkey_links_default_admin_site(self):\n+        \"\"\"\n+        Tests the default admin site for generating correct readonly ForeignKey links.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('admin')\n+\n+    def test_readonly_foreignkey_links_custom_admin_site(self):\n+        \"\"\"\n+        Tests a custom admin site for generating correct readonly ForeignKey links.\n+        \"\"\"\n+        self._test_readonly_foreignkey_links('custom_admin_site_name')\n         self.assertEqual(response.status_code, 404)\n \n     def test_change_form_renders_correct_null_choice_value(self):\n",
  "django__django-14915": "diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py\nindex dbab026..a94431f 100644\n--- a/tests/model_forms/test_modelchoicefield.py\n+++ b/tests/model_forms/test_modelchoicefield.py\n@@ -1,8 +1,9 @@\n+\n import datetime\n \n from django import forms\n from django.core.exceptions import ValidationError\n-from django.forms.models import ModelChoiceIterator\n+from django.forms.models import ModelChoiceIterator, ModelChoiceIteratorValue\n from django.forms.widgets import CheckboxSelectMultiple\n from django.template import Context, Template\n from django.test import TestCase\n@@ -340,8 +341,32 @@ class ModelChoiceFieldTests(TestCase):\n <div><label><input type=\"checkbox\" name=\"name\" value=\"%d\" data-slug=\"third-test\">Third</label></div>\n </div>\"\"\" % (self.c1.pk, self.c2.pk, self.c3.pk),\n         )\n-\n-    def test_choices_not_fetched_when_not_rendering(self):\n+    def test_choice_value_hash(self):\n+        # Create instances of ModelChoiceIteratorValue\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+        \n+        # Test for consistency between different instances with same pk\n+        self.assertEqual(hash(value_1), hash(ModelChoiceIteratorValue(self.c1.pk, None)))\n+\n+        # Test that two different ModelChoiceIteratorValues produce different hashes\n+        self.assertNotEqual(hash(value_1), hash(value_2))\n+\n+        # Verify that instances are actually hashable and can be used in sets\n+        test_set = {value_1}\n+        self.assertIn(ModelChoiceIteratorValue(self.c1.pk, self.c1), test_set)\n+\n+    def test_choice_value_dict_key(self):\n+        # Test that ModelChoiceIteratorValue can be used as a dictionary key\n+        value_1 = ModelChoiceIteratorValue(self.c1.pk, self.c1)\n+        value_2 = ModelChoiceIteratorValue(self.c2.pk, self.c2)\n+\n+        test_dict = {value_1: 'category_1'}\n+        self.assertEqual(test_dict[ModelChoiceIteratorValue(self.c1.pk, self.c1)], 'category_1')\n+        \n+        # Ensure different values do not conflict\n+        test_dict[value_2] = 'category_2'\n+        self.assertEqual(test_dict[ModelChoiceIteratorValue(self.c2.pk, self.c2)], 'category_2')\n         with self.assertNumQueries(1):\n             field = forms.ModelChoiceField(Category.objects.order_by('-name'))\n             self.assertEqual('Entertainment', field.clean(self.c1.pk).name)\n",
  "django__django-14999": "",
  "django__django-15061": "",
  "django__django-15202": "diff --git a/tests/forms_tests/field_tests/test_urlfield.py b/tests/forms_tests/field_tests/test_urlfield.py\nindex acda5dd..5faca0f 100644\n--- a/tests/forms_tests/field_tests/test_urlfield.py\n+++ b/tests/forms_tests/field_tests/test_urlfield.py\n@@ -100,6 +100,8 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n             # even on domains that don't fail the domain label length check in\n             # the regex.\n             'http://%s' % (\"X\" * 200,),\n+            '////]@N.AN',  # Invalid URL from the issue for testing.\n+            '#@A.bO',      # Another invalid URL resembling test patch example.\n         ]\n         msg = \"'Enter a valid URL.'\"\n         for value in tests:\n@@ -107,6 +109,18 @@ class URLFieldTest(FormFieldAssertionsMixin, SimpleTestCase):\n                 with self.assertRaisesMessage(ValidationError, msg):\n                     f.clean(value)\n \n+    def test_urlfield_invalid_ipv6(self):\n+        f = URLField()\n+        invalid_ipv6_urls = [\n+            'http://[invalid::address]/',        # Invalid IPv6 address.\n+            'http://[1200::AB00:1234::2552:7777:1313]/',  # Double \"::\" in IPv6.\n+        ]\n+        msg = \"'Enter a valid URL.'\"\n+        for url in invalid_ipv6_urls:\n+            with self.subTest(url=url):\n+                with self.assertRaisesMessage(ValidationError, msg):\n+                    f.clean(url)\n+\n     def test_urlfield_clean_required(self):\n         f = URLField()\n         msg = \"'This field is required.'\"\n",
  "django__django-15213": "diff --git a/tests/annotations/tests.py b/tests/annotations/tests.py\nindex a07e97b..c2e7625 100644\n--- a/tests/annotations/tests.py\n+++ b/tests/annotations/tests.py\n@@ -210,7 +210,26 @@ class NonAggregateAnnotationTestCase(TestCase):\n         self.assertEqual(len(books), Book.objects.count())\n         self.assertTrue(all(not book.selected for book in books))\n \n-    def test_empty_queryset_annotation(self):\n+    def test_expressionwrapper_negated_empty_q_object(self):\n+        books = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField())\n+        )\n+        self.assertEqual(len(books), Book.objects.count())\n+        self.assertTrue(all(book.selected for book in books))\n+\n+    def test_expressionwrapper_negated_empty_q_object_with_aggregation(self):\n+        qs = Book.objects.filter(pages__gt=300).annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+            rating_count=Count('rating'),\n+        )\n+        self.assertTrue(all(book.selected for book in qs))\n+        self.assertTrue(all(book.rating_count == 1 for book in qs))\n+\n+    def test_aggregate_over_negated_empty_q_object(self):\n+        qs = Book.objects.annotate(\n+            selected=ExpressionWrapper(~Q(pk__in=[]), output_field=BooleanField()),\n+        ).aggregate(Sum('selected'))\n+        self.assertEqual(qs['selected__sum'], Book.objects.count())\n         qs = Author.objects.annotate(\n             empty=Subquery(Author.objects.values('id').none())\n         )\n",
  "django__django-15347": "diff --git a/tests/messages_tests/test_cookie.py b/tests/messages_tests/test_cookie.py\nindex b756f61..c68584e 100644\n--- a/tests/messages_tests/test_cookie.py\n+++ b/tests/messages_tests/test_cookie.py\n@@ -1,3 +1,4 @@\n+\n import json\n import random\n \n@@ -163,7 +164,16 @@ class CookieTests(BaseTests, SimpleTestCase):\n         decoded_messages = json.loads(value, cls=MessageDecoder)\n         self.assertEqual(messages, decoded_messages)\n \n-    def test_safedata(self):\n+    def test_extra_tags_preservation(self):\n+        \"\"\"\n+        Test that a message's extra_tags attribute is correctly preserved as an empty string\n+        after encoding and decoding.\n+        \"\"\"\n+        storage = self.get_storage()\n+        message = Message(constants.INFO, 'Test message', extra_tags='')\n+        encoded = storage._encode(message)\n+        decoded = storage._decode(encoded)\n+        self.assertEqual(decoded.extra_tags, '', \"Expected extra_tags to be an empty string.\")\n         \"\"\"\n         A message containing SafeData is keeping its safe status when\n         retrieved from the message storage.\n",
  "django__django-15388": "diff --git a/tests/template_tests/test_autoreloader.py b/tests/template_tests/test_autoreloader.py\nindex 42ab5ba..9f8b31d 100644\n--- a/tests/template_tests/test_autoreloader.py\n+++ b/tests/template_tests/test_autoreloader.py\n@@ -1,5 +1,7 @@\n from pathlib import Path\n from unittest import mock\n+from pathlib import Path\n+from django.utils.autoreload import autoreload_started, file_changed\n \n from django.template import autoreload\n from django.test import SimpleTestCase, override_settings\n@@ -39,7 +41,27 @@ class TemplateReloadTests(SimpleTestCase):\n         self.assertIsNone(autoreload.template_changed(None, Path(__file__)))\n         mock_reset.assert_not_called()\n \n-    def test_watch_for_template_changes(self):\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [ROOT],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    def test_dev_server_restart_with_base_dir_in_templates(self, mock_reset):\n+        \"\"\"\n+        Simulates the scenario described in the issue:\n+        - Adding BASE_DIR to TEMPLATES['DIRS'] should not prevent the dev server from restarting.\n+        \"\"\"\n+        # Simulate the scenario where a non-template file is modified\n+        file_path = Path(__file__)\n+        \n+        # Trigger the signal and emulate file change detection\n+        autoreload.template_changed(None, file_path)\n+        \n+        # Since the issue states that the dev server fails to restart because reset_loaders isn't called,\n+        # we need to assert that reset_loaders is indeed called when BASE_DIR is in TEMPLATES['DIRS']\n+        mock_reset.assert_called_once()\n         mock_reloader = mock.MagicMock()\n         autoreload.watch_for_template_changes(mock_reloader)\n         self.assertSequenceEqual(\n@@ -88,7 +110,27 @@ class TemplateReloadTests(SimpleTestCase):\n @require_jinja2\n @override_settings(INSTALLED_APPS=['template_tests'])\n class Jinja2TemplateReloadTests(SimpleTestCase):\n-    def test_watch_for_template_changes(self):\n+    @mock.patch('django.template.autoreload.reset_loaders')\n+    @override_settings(\n+        TEMPLATES=[{\n+            'DIRS': [ROOT],\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        }]\n+    )\n+    def test_dev_server_restart_with_base_dir_in_templates(self, mock_reset):\n+        \"\"\"\n+        Simulates the scenario described in the issue:\n+        - Adding BASE_DIR to TEMPLATES['DIRS'] should not prevent the dev server from restarting.\n+        \"\"\"\n+        # Simulate the scenario where a non-template file is modified\n+        file_path = Path(__file__)\n+        \n+        # Trigger the signal and emulate file change detection\n+        autoreload.template_changed(None, file_path)\n+        \n+        # Since the issue states that the dev server fails to restart because reset_loaders isn't called,\n+        # we need to assert that reset_loaders is indeed called when BASE_DIR is in TEMPLATES['DIRS']\n+        mock_reset.assert_called_once()\n         mock_reloader = mock.MagicMock()\n         autoreload.watch_for_template_changes(mock_reloader)\n         self.assertSequenceEqual(\n",
  "django__django-15400": "",
  "django__django-15498": "diff --git a/tests/view_tests/tests/test_static.py b/tests/view_tests/tests/test_static.py\nindex 3cb5428..fc3dea6 100644\n--- a/tests/view_tests/tests/test_static.py\n+++ b/tests/view_tests/tests/test_static.py\n@@ -1,3 +1,4 @@\n+\n import mimetypes\n import unittest\n from os import path\n@@ -183,8 +184,50 @@ class StaticHelperTest(StaticTests):\n         self.assertEqual(static(\"//example.org\"), [])\n \n \n+from datetime import datetime\n+\n class StaticUtilsTests(unittest.TestCase):\n-    def test_was_modified_since_fp(self):\n+    def test_was_modified_since_empty_string(self):\n+        \"\"\"\n+        Test that an empty If-Modified-Since header does not raise an exception\n+        and returns True (indicating the resource was modified, by default behavior).\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"\", mtime=1))\n+\n+    def test_was_modified_since_no_header(self):\n+        \"\"\"\n+        Test that no If-Modified-Since header is treated like an empty header,\n+        returning True, indicating the resource is modified.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=None, mtime=1))\n+\n+    def test_was_modified_since_valid_header(self):\n+        \"\"\"\n+        Test that a valid If-Modified-Since header works correctly by returning\n+        False when the header date is greater than or equal to the resource mtime.\n+        \"\"\"\n+        mtime = 1633072800  # Some constant mtime value\n+        header = http_date(mtime)\n+        self.assertFalse(was_modified_since(header, mtime))\n+        # Check with future date\n+        future_date = http_date(mtime + 3600)\n+        self.assertFalse(was_modified_since(future_date, mtime))\n+\n+    def test_was_modified_since_invalid_header(self):\n+        \"\"\"\n+        Test that an invalid If-Modified-Since header does not raise an exception\n+        and returns True by default.\n+        \"\"\"\n+        self.assertTrue(was_modified_since(header=\"Invalid-Date\", mtime=1))\n+\n+    def test_was_modified_since_past_header(self):\n+        \"\"\"\n+        Test that a past If-Modified-Since header returns True indicating the\n+        resource is modified.\n+        \"\"\"\n+        mtime = 1633072800  # Current mtime\n+        past_date = http_date(mtime - 3600)  # 1 hour before\n+        self.assertTrue(was_modified_since(past_date, mtime))\n         \"\"\"\n         A floating point mtime does not disturb was_modified_since (#18675).\n         \"\"\"\n",
  "django__django-15781": "diff --git a/tests/user_commands/tests.py b/tests/user_commands/tests.py\nindex 29530a0..0e95ac1 100644\n--- a/tests/user_commands/tests.py\n+++ b/tests/user_commands/tests.py\n@@ -1,3 +1,4 @@\n+\n import os\n from io import StringIO\n from unittest import mock\n@@ -7,6 +8,7 @@ from admin_scripts.tests import AdminScriptTestCase\n from django.apps import apps\n from django.core import management\n from django.core.checks import Tags\n+from argparse import ArgumentDefaultsHelpFormatter\n from django.core.management import BaseCommand, CommandError, find_commands\n from django.core.management.utils import (\n     find_command,\n@@ -411,6 +413,39 @@ class CommandTests(SimpleTestCase):\n         parser = BaseCommand().create_parser(\"prog_name\", \"subcommand\", epilog=epilog)\n         self.assertEqual(parser.epilog, epilog)\n \n+    def test_command_help_output_format(self):\n+        \"\"\"\n+        Test that the command help output format matches the expected format.\n+        \"\"\"\n+        class CustomCommand(BaseCommand):\n+            help = '''\n+            Import a contract from tzkt.\n+            Example usage:\n+                ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n+            '''\n+\n+            def add_arguments(self, parser):\n+                parser.add_argument('blockchain', type=str, help='Name of the blockchain to import into')\n+                parser.add_argument('target', type=str, help='Id of the contract to import')\n+\n+        command = CustomCommand()\n+        parser = command.create_parser('manage.py', 'tzkt_import')\n+        with StringIO() as output, mock.patch('sys.stdout', new=output):\n+            parser.print_help()\n+            help_output = output.getvalue()\n+\n+        expected_help_output = (\n+            \"usage: manage.py tzkt_import [-h]\\n\\n\"\n+            \"Import a contract from tzkt.\\n\\n\"\n+            \"positional arguments:\\n\"\n+            \"  blockchain  Name of the blockchain to import into\\n\"\n+            \"  target      Id of the contract to import\\n\\n\"\n+            \"Example usage:\\n\"\n+            \"    ./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\\n\"\n+        )\n+\n+        self.assertIn(expected_help_output, help_output)\n+\n     def test_outputwrapper_flush(self):\n         out = StringIO()\n         with mock.patch.object(out, \"flush\") as mocked_flush:\n",
  "django__django-15789": "diff --git a/tests/utils_tests/test_html.py b/tests/utils_tests/test_html.py\nindex f300e4f..7fb9f18 100644\n--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n@@ -1,5 +1,8 @@\n+\n import os\n+import json\n from datetime import datetime\n+from django.core.serializers.json import DjangoJSONEncoder\n \n from django.test import SimpleTestCase\n from django.utils.functional import lazystr\n@@ -217,7 +220,33 @@ class TestUtilsHtml(SimpleTestCase):\n             '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n         )\n \n-    def test_smart_urlquote(self):\n+    def test_json_script_custom_encoder(self):\n+        class CustomDjangoJSONEncoder(DjangoJSONEncoder):\n+            def encode(self, o):\n+                return json.dumps({'custom': 'output'})\n+\n+        self.assertHTMLEqual(\n+            json_script({}, encoder=CustomDjangoJSONEncoder),\n+            '<script type=\"application/json\">{\"custom\": \"output\"}</script>',\n+        )\n+\n+    def test_json_script_default_encoder(self):\n+        obj = {'key': 'value'}\n+        self.assertHTMLEqual(\n+            json_script(obj),\n+            '<script type=\"application/json\">{\"key\": \"value\"}</script>',\n+        )\n+\n+    def test_json_script_no_encoder(self):\n+        with self.assertRaises(TypeError):\n+            json_script({}, encoder=None)\n+\n+    def test_json_script_invalid_encoder(self):\n+        class InvalidEncoder:\n+            pass\n+\n+        with self.assertRaises(TypeError):\n+            json_script({}, encoder=InvalidEncoder)\n         items = (\n             (\"http://\u00f6\u00e4\u00fc.com/\", \"http://xn--4ca9at.com/\"),\n             (\"http://\u00f6\u00e4\u00fc.com/\u00f6\u00e4\u00fc/\", \"http://xn--4ca9at.com/%C3%B6%C3%A4%C3%BC/\"),\n",
  "django__django-15790": "diff --git a/tests/check_framework/test_templates.py b/tests/check_framework/test_templates.py\nindex 72e6cfe..67109bd 100644\n--- a/tests/check_framework/test_templates.py\n+++ b/tests/check_framework/test_templates.py\n@@ -205,5 +205,61 @@ class CheckTemplateTagLibrariesWithSameName(SimpleTestCase):\n             \"check_framework.template_test_apps.different_tags_app\",\n         ]\n     )\n+    @override_settings(\n+        INSTALLED_APPS=[],\n+    )\n+    def test_no_installed_apps_but_conflicting_libraries(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"conflicting_tags\", \"module1.templatetags.my_tags\"\n+                ),\n+                self.get_settings(\n+                    \"conflicting_tags\", \"module2.templatetags.my_tags\"\n+                ),\n+            ]\n+        ):\n+            expected_error = Error(\n+                E003.msg.format(\n+                    \"'conflicting_tags'\",\n+                    \"'check_framework.template_test_apps.module1.templatetags.my_tags', \"\n+                    \"'check_framework.template_test_apps.module2.templatetags.my_tags'\",\n+                ),\n+                id=E003.id,\n+            )\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [expected_error],\n+            )\n+\n+    @override_settings(\n+        INSTALLED_APPS=[\n+            \"check_framework.template_test_apps.unique_tags_app\"\n+        ]\n+    )\n+    def test_same_library_name_different_apps(self):\n+        with self.settings(\n+            TEMPLATES=[\n+                self.get_settings(\n+                    \"common_tag\", \"unique_tags_app_1.templatetags.common_tags\"\n+                ),\n+                self.get_settings(\n+                    \"common_tag\", \"unique_tags_app_2.templatetags.common_tags\"\n+                ),\n+            ]\n+        ):\n+            expected_error = Error(\n+                E003.msg.format(\n+                    \"'common_tag'\",\n+                    \"'check_framework.template_test_apps.unique_tags_app_1.templatetags.common_tags', \"\n+                    \"'check_framework.template_test_apps.unique_tags_app_2.templatetags.common_tags'\",\n+                ),\n+                id=E003.id,\n+            )\n+            self.assertEqual(\n+                check_for_template_tags_with_the_same_name(None),\n+                [expected_error],\n+            )\n+\n     def test_template_tags_with_different_name(self):\n-        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n+        self.assertEqual(check_for_template_tags_with_the_same_name(None), [])\n",
  "django__django-15814": "diff --git a/tests/proxy_models/tests.py b/tests/proxy_models/tests.py\nindex bcc4684..e42e40a 100644\n--- a/tests/proxy_models/tests.py\n+++ b/tests/proxy_models/tests.py\n@@ -390,6 +390,19 @@ class ProxyModelTests(TestCase):\n             repr(resp), \"<ProxyImprovement: ProxyImprovement:improve that>\"\n         )\n \n+    def test_select_related_only_with_proxy_model(self):\n+        # Create instances for testing\n+        custom_model = CustomModel.objects.create(name=\"ProxyTest\")\n+        proxy_model_instance = ProxyCustomModel.objects.get(pk=custom_model.pk)\n+        another_model_instance = AnotherModel.objects.create(custom=proxy_model_instance)\n+        \n+        # Applying select_related followed by only on a proxy model\n+        qs = AnotherModel.objects.select_related(\"custom\").only(\"custom__name\")\n+        \n+        # Check if we can retrieve the object without errors\n+        retrieved_instance = qs.get(pk=another_model_instance.pk)\n+        self.assertEqual(retrieved_instance.custom.name, \"ProxyTest\")\n+\n     def test_proxy_load_from_fixture(self):\n         management.call_command(\"loaddata\", \"mypeople.json\", verbosity=0)\n         p = MyPerson.objects.get(pk=100)\n",
  "django__django-15851": "diff --git a/tests/dbshell/test_postgresql.py b/tests/dbshell/test_postgresql.py\nindex d629a04..00a6d2a 100644\n--- a/tests/dbshell/test_postgresql.py\n+++ b/tests/dbshell/test_postgresql.py\n@@ -152,6 +152,11 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         )\n \n     def test_parameters(self):\n+        # Test that additional parameters are passed before the dbname\n+        self.assertEqual(\n+            self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"-c\", \"select * from some_table;\"]),\n+            ([\"psql\", \"-c\", \"select * from some_table;\", \"dbname\"], None),\n+        )\n         self.assertEqual(\n             self.settings_to_cmd_args_env({\"NAME\": \"dbname\"}, [\"--help\"]),\n             ([\"psql\", \"dbname\", \"--help\"], None),\n@@ -183,4 +188,4 @@ class PostgreSqlDbshellCommandTestCase(SimpleTestCase):\n         args[0:1] = [sys.executable, str(fake_client)]\n         with self.assertRaises(subprocess.CalledProcessError) as ctx:\n             subprocess.run(args, check=True, env=env)\n-        self.assertNotIn(\"somepassword\", str(ctx.exception))\n+        self.assertNotIn(\"somepassword\", str(ctx.exception))\n",
  "django__django-15902": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex 44ea946..44374a0 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -1906,7 +1906,22 @@ class DeprecationTests(SimpleTestCase):\n             FORM_RENDERER=\"django.forms.renderers.DjangoTemplates\"\n         ), self.assertRaisesMessage(\n             RemovedInDjango50Warning, DEFAULT_TEMPLATE_DEPRECATION_MSG\n-        ):\n+        ):  # Testing no deprecation warning on management form rendering\n+            # Import necessary modules\n+            from django import forms\n+            from django.forms import formset_factory, BaseFormSet\n+\n+            class Choice(forms.Form):\n+                name = forms.CharField()\n+\n+            # Test 1: Basic formset with management form should not raise warning\n             ChoiceFormSet = formset_factory(Choice)\n             formset = ChoiceFormSet()\n-            str(formset)\n+            str(formset.management_form)\n+\n+            # Test 2: Explicitly accessing management form's as_table method\n+            self.assertIsInstance(formset.management_form.as_table(), str)\n+\n+            # Test 3: Ensure rendering fields of management form individually\n+            for field in formset.management_form:\n+                str(field)  # This should not raise a deprecation warning\n",
  "django__django-16041": "diff --git a/tests/forms_tests/tests/test_formsets.py b/tests/forms_tests/tests/test_formsets.py\nindex a34f3d3..753c700 100644\n--- a/tests/forms_tests/tests/test_formsets.py\n+++ b/tests/forms_tests/tests/test_formsets.py\n@@ -178,8 +178,15 @@ class FormsFormsetTestCase(SimpleTestCase):\n         formset = FormSet(form_kwargs={\"custom_kwarg\": 1})\n         self.assertTrue(hasattr(formset.empty_form, \"custom_kwarg\"))\n         self.assertEqual(formset.empty_form.custom_kwarg, 1)\n+    def test_empty_permitted_ignored_empty_form_with_true(self):\n+        ArticleFormSet = modelformset_factory(MyModel, fields=[\"a_field\"])\n+        formset = ArticleFormSet(form_kwargs={\"empty_permitted\": True})\n+        self.assertTrue(formset.empty_form.empty_permitted)\n \n-    def test_formset_validation(self):\n+    def test_empty_permitted_ignored_empty_form_with_false(self):\n+        ArticleFormSet = modelformset_factory(MyModel, fields=[\"a_field\"])\n+        formset = ArticleFormSet(form_kwargs={\"empty_permitted\": False})\n+        self.assertTrue(formset.empty_form.empty_permitted)\n         # FormSet instances can also have an error attribute if validation failed for\n         # any of the forms.\n         formset = self.make_choiceformset([(\"Calexico\", \"\")])\n",
  "django__django-16046": "diff --git a/tests/utils_tests/test_numberformat.py b/tests/utils_tests/test_numberformat.py\nindex 41aae41..fea9797 100644\n--- a/tests/utils_tests/test_numberformat.py\n+++ b/tests/utils_tests/test_numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n from sys import float_info\n \n@@ -160,7 +161,29 @@ class TestNumberFormat(SimpleTestCase):\n                     nformat(Decimal(value), \".\", decimal_pos), expected_value\n                 )\n \n-    def test_decimal_subclass(self):\n+    def test_empty(self):\n+        self.assertEqual(nformat(\"\", \".\"), \"\")\n+        self.assertEqual(nformat(None, \".\"), \"None\")\n+\n+    def test_none_value(self):\n+        \"\"\"This test checks if the function can gracefully handle a None value.\"\"\"\n+        try:\n+            nformat(None, \".\")\n+        except IndexError as e:\n+            self.fail(f\"nformat(None, '.') raised IndexError: {e}\")\n+\n+    def test_empty_string(self):\n+        \"\"\"This test checks if the function handles an empty string without crashing.\"\"\"\n+        result = nformat(\"\", \".\")\n+        self.assertEqual(result, \"\")\n+\n+    def test_negative_number_handling(self):\n+        \"\"\"Test to ensure negative number handling does not break for null-like inputs.\"\"\"\n+        try:\n+            nformat(\"-0\", \".\")\n+            nformat(\"-0.00\", \".\")\n+        except IndexError:\n+            self.fail(\"Negative number handling failed for valid input.\")\n         class EuroDecimal(Decimal):\n             \"\"\"\n             Wrapper for Decimal which prefixes each amount with the \u20ac symbol.\n",
  "django__django-16139": "diff --git a/tests/auth_tests/test_forms.py b/tests/auth_tests/test_forms.py\nindex bf048c1..6f78bc5 100644\n--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n import re\n from unittest import mock\n@@ -24,6 +25,8 @@ from django.forms.fields import CharField, Field, IntegerField\n from django.test import SimpleTestCase, TestCase, override_settings\n from django.utils import translation\n from django.utils.text import capfirst\n+from django.urls import reverse\n+import urllib.parse\n from django.utils.translation import gettext as _\n \n from .models.custom_user import (\n@@ -892,6 +895,26 @@ class UserChangeFormTest(TestDataMixin, TestCase):\n         # value to render correctly\n         self.assertEqual(form.initial[\"password\"], form[\"password\"].value())\n \n+    @override_settings(ROOT_URLCONF=\"auth_tests.urls_admin\")\n+    def test_link_to_password_reset_in_helptext_via_to_field(self):\n+        user = User.objects.get(username=\"testclient\")\n+        form = UserChangeForm(data={}, instance=user)\n+        password_help_text = form.fields[\"password\"].help_text\n+        matches = re.search('<a href=\"(.*?)\">', password_help_text)\n+\n+        # URL to UserChangeForm in admin via to_field (instead of pk).\n+        admin_user_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_change\",\n+            args=(user.username,),\n+        )\n+        joined_url = urllib.parse.urljoin(admin_user_change_url, matches.group(1))\n+\n+        pw_change_url = reverse(\n+            f\"admin:{user._meta.app_label}_{user._meta.model_name}_password_change\",\n+            args=(user.pk,),\n+        )\n+        self.assertEqual(joined_url, pw_change_url)\n+\n     def test_custom_form(self):\n         class CustomUserChangeForm(UserChangeForm):\n             class Meta(UserChangeForm.Meta):\n",
  "django__django-16255": "",
  "django__django-16379": "diff --git a/tests/cache/tests.py b/tests/cache/tests.py\nindex 014d28a..edf3610 100644\n--- a/tests/cache/tests.py\n+++ b/tests/cache/tests.py\n@@ -1,3 +1,4 @@\n+\n # Unit tests for cache framework\n # Uses whatever cache backend is set in the test settings file.\n import copy\n@@ -8,6 +9,8 @@ import re\n import shutil\n import sys\n import tempfile\n+from unittest import mock\n+import unittest\n import threading\n import time\n import unittest\n@@ -1755,7 +1758,28 @@ class FileBasedCacheTests(BaseCacheTests, TestCase):\n             with self.assertRaises(OSError):\n                 cache.get(\"foo\")\n \n-    def test_empty_cache_file_considered_expired(self):\n+    def test_has_key_race_handling(self):\n+        self.assertIs(cache.add(\"key\", \"value\"), True)\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError) as mocked_open:\n+            self.assertIs(cache.has_key(\"key\"), False)\n+            mocked_open.assert_called_once()\n+\n+    def test_has_key_race_condition_due_to_expiration(self):\n+        self.assertIs(cache.add(\"test-key\", \"test-value\"), True)\n+        cache_file = cache._key_to_file(\"test-key\")\n+        with mock.patch(\"django.core.cache.backends.filebased.os.path.exists\", return_value=True):\n+            with mock.patch(\"builtins.open\", side_effect=FileNotFoundError):\n+                self.assertIs(cache.has_key(\"test-key\"), False)\n+\n+    def test_has_key_file_deletion_midway(self):\n+        self.assertIs(cache.add(\"another-key\", \"another-value\"), True)\n+        cache_file = cache._key_to_file(\"another-key\")\n+        with mock.patch(\"builtins.open\", side_effect=FileNotFoundError):\n+            # Simulate the file being present momentarily\n+            with open(cache_file, \"wb\") as f:\n+                f.write(b\"data\")\n+\n+            self.assertIs(cache.has_key(\"another-key\"), False)\n         cache_file = cache._key_to_file(\"foo\")\n         with open(cache_file, \"wb\") as fh:\n             fh.write(b\"\")\n",
  "django__django-16527": "diff --git a/tests/admin_views/test_templatetags.py b/tests/admin_views/test_templatetags.py\nindex eb51f4c..6790e71 100644\n--- a/tests/admin_views/test_templatetags.py\n+++ b/tests/admin_views/test_templatetags.py\n@@ -1,3 +1,4 @@\n+\n import datetime\n \n from django.contrib.admin import ModelAdmin\n@@ -8,7 +9,9 @@ from django.contrib.auth.models import User\n from django.test import RequestFactory, TestCase\n from django.urls import reverse\n \n+from django.contrib.auth import get_permission_codename\n from .admin import ArticleAdmin, site\n+from .tests import get_perm\n from .models import Article, Question\n from .tests import AdminViewBasicTestCase\n \n",
  "django__django-16595": "",
  "django__django-16873": "diff --git a/tests/template_tests/filter_tests/test_join.py b/tests/template_tests/filter_tests/test_join.py\nindex 1b66eaa..48e55c9 100644\n--- a/tests/template_tests/filter_tests/test_join.py\n+++ b/tests/template_tests/filter_tests/test_join.py\n@@ -1,3 +1,4 @@\n+\n from django.template.defaultfilters import join\n from django.test import SimpleTestCase\n from django.utils.safestring import mark_safe\n@@ -26,6 +27,14 @@ class JoinTests(SimpleTestCase):\n         output = self.engine.render_to_string(\"join04\", {\"a\": [\"alpha\", \"beta & me\"]})\n         self.assertEqual(output, \"alpha &amp; beta & me\")\n \n+    # Test case to verify fix for issue regarding join filter with autoescape off\n+    @setup({\"join_autoescape_off_issue\": '{% autoescape off %}{{ some_list|join:some_var }}{% endautoescape %}'})\n+    def test_join_autoescape_off_issue(self):\n+        some_list = [\"<p>Hello World!</p>\", \"beta & me\", \"<script>Hi!</script>\"]\n+        some_var = \"<br/>\"\n+        output = self.engine.render_to_string(\"join_autoescape_off_issue\", {\"some_list\": some_list, \"some_var\": some_var})\n+        self.assertEqual(output, \"<p>Hello World!</p><br/>beta & me<br/><script>Hi!</script>\")\n+\n     # Joining with unsafe joiners doesn't result in unsafe strings.\n     @setup({\"join05\": \"{{ a|join:var }}\"})\n     def test_join05(self):\n@@ -78,4 +87,4 @@ class FunctionTests(SimpleTestCase):\n \n     def test_noniterable_arg_autoescape_off(self):\n         obj = object()\n-        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n+        self.assertEqual(join(obj, \"<br>\", autoescape=False), obj)\n",
  "django__django-17051": "diff --git a/tests/bulk_create/tests.py b/tests/bulk_create/tests.py\nindex c425030..e5be7a8 100644\n--- a/tests/bulk_create/tests.py\n+++ b/tests/bulk_create/tests.py\n@@ -568,8 +568,33 @@ class BulkCreateTests(TestCase):\n                 update_fields=[\"name\"],\n                 unique_fields=[\"big_auto_fields\"],\n             )\n-\n-    def _test_update_conflicts_two_fields(self, unique_fields):\n+    @skipUnlessDBFeature(\"can_return_rows_from_bulk_insert\")\n+    def test_bulk_create_upsert_returning_ids(self):\n+        # Create initial objects.\n+        initial_objects = [\n+            TwoFields(f1=1, f2=1, name=\"initial1\"),\n+            TwoFields(f1=2, f2=2, name=\"initial2\"),\n+        ]\n+        TwoFields.objects.bulk_create(initial_objects)\n+        \n+        # Update conflicts with new names, expecting IDs to be updated and returned.\n+        conflicting_objects = [\n+            TwoFields(f1=1, f2=1, name=\"updated1\"),\n+            TwoFields(f1=2, f2=2, name=\"updated2\"),\n+        ]\n+        results = TwoFields.objects.bulk_create(\n+            conflicting_objects,\n+            update_conflicts=True,\n+            unique_fields=[\"f1\", \"f2\"],\n+            update_fields=[\"name\"],\n+        )\n+        \n+        self.assertEqual(len(results), len(conflicting_objects))\n+        for instance in results:\n+            self.assertIsNotNone(instance.pk)\n+        \n+        updated_values = TwoFields.objects.filter(f1__in=[1, 2]).values_list(\"name\", flat=True)\n+        self.assertCountEqual(updated_values, [\"updated1\", \"updated2\"])\n         TwoFields.objects.bulk_create(\n             [\n                 TwoFields(f1=1, f2=1, name=\"a\"),\n@@ -816,4 +841,4 @@ class BulkCreateTests(TestCase):\n                 {\"rank\": 1, \"name\": \"c\"},\n                 {\"rank\": 2, \"name\": \"d\"},\n             ],\n-        )\n+        )\n",
  "django__django-17087": "",
  "matplotlib__matplotlib-22711": "diff --git a/lib/matplotlib/tests/test_widgets.py b/lib/matplotlib/tests/test_widgets.py\nindex 39c625e..3a61a11 100644\n--- a/lib/matplotlib/tests/test_widgets.py\n+++ b/lib/matplotlib/tests/test_widgets.py\n@@ -1082,7 +1082,23 @@ def test_slider_reset():\n     fig, ax = plt.subplots()\n     slider = widgets.Slider(ax=ax, label='', valmin=0, valmax=1, valinit=.5)\n     slider.set_val(0.75)\n-    slider.reset()\n+    # Test setting the initial value at the minimum bound\n+    slider.set_val((0.0, 0.1))\n+    assert_allclose(slider.val, (0.0, 0.1))\n+\n+    # Test setting the initial value at the maximum bound\n+    slider.set_val((0.9, 1.0))\n+    assert_allclose(slider.val, (0.9, 1.0))\n+\n+    # Test setting the initial value to an inverted range\n+    slider.set_val((0.3, 0.2))\n+    assert_allclose(slider.val, (0.2, 0.3))\n+\n+    # Test setting the initial value beyond the maximum boundaries\n+    slider.set_val((1.5, 2.0))\n+    assert_allclose(slider.val, (0.0, 1.0))\n+\n+    # Reset and check initial values are restored\n     assert slider.val == 0.5\n \n \n@@ -1116,7 +1132,23 @@ def test_range_slider(orientation):\n     slider.set_val((-1, 10))\n     assert_allclose(slider.val, (0, 1))\n \n-    slider.reset()\n+    # Test setting the initial value at the minimum bound\n+    slider.set_val((0.0, 0.1))\n+    assert_allclose(slider.val, (0.0, 0.1))\n+\n+    # Test setting the initial value at the maximum bound\n+    slider.set_val((0.9, 1.0))\n+    assert_allclose(slider.val, (0.9, 1.0))\n+\n+    # Test setting the initial value to an inverted range\n+    slider.set_val((0.3, 0.2))\n+    assert_allclose(slider.val, (0.2, 0.3))\n+\n+    # Test setting the initial value beyond the maximum boundaries\n+    slider.set_val((1.5, 2.0))\n+    assert_allclose(slider.val, (0.0, 1.0))\n+\n+    # Reset and check initial values are restored\n     assert_allclose(slider.val, [0.1, 0.34])\n \n \n",
  "matplotlib__matplotlib-23299": "",
  "matplotlib__matplotlib-23314": "diff --git a/lib/mpl_toolkits/tests/test_mplot3d.py b/lib/mpl_toolkits/tests/test_mplot3d.py\nindex 44c19e7..d5d9ba6 100644\n--- a/lib/mpl_toolkits/tests/test_mplot3d.py\n+++ b/lib/mpl_toolkits/tests/test_mplot3d.py\n@@ -21,6 +21,16 @@ mpl3d_image_comparison = functools.partial(\n     image_comparison, remove_text=True, style='default')\n \n \n+@check_figures_equal(extensions=[\"png\"])\n+def test_set_visible_on_3d_subplots(fig_test, fig_ref):\n+    # Setting up a 3D subplot and making it invisible on one figure\n+    ax_test = fig_test.add_subplot(111, projection='3d')\n+    ax_test.scatter([1], [1], [1])\n+    ax_test.set_visible(False)\n+    \n+    # The reference figure should have no subplot at all\n+    fig_ref.add_subplot(111).set_axis_off()\n+\n def test_aspect_equal_error():\n     fig = plt.figure()\n     ax = fig.add_subplot(projection='3d')\n",
  "matplotlib__matplotlib-23562": "",
  "matplotlib__matplotlib-23563": "",
  "matplotlib__matplotlib-23913": "diff --git a/lib/matplotlib/tests/test_legend.py b/lib/matplotlib/tests/test_legend.py\nindex f4787c8..917eba2 100644\n--- a/lib/matplotlib/tests/test_legend.py\n+++ b/lib/matplotlib/tests/test_legend.py\n@@ -774,6 +774,16 @@ def test_legend_labelcolor_rcparam_markerfacecolor_short():\n         assert mpl.colors.same_color(text.get_color(), color)\n \n \n+@pytest.mark.parametrize('draggable', [True, False])\n+def test_legend_creation_with_draggable(draggable):\n+    fig, ax = plt.subplots()\n+    ax.plot(range(10), label='example')\n+    legend = ax.legend(draggable=draggable)\n+    assert legend.get_draggable() == draggable\n+\n+import matplotlib.pyplot as plt\n+import pytest\n+\n def test_get_set_draggable():\n     legend = plt.legend()\n     assert not legend.get_draggable()\n",
  "matplotlib__matplotlib-23964": "diff --git a/lib/matplotlib/tests/test_backend_ps.py b/lib/matplotlib/tests/test_backend_ps.py\nindex a1caf1a..1c04bfc 100644\n--- a/lib/matplotlib/tests/test_backend_ps.py\n+++ b/lib/matplotlib/tests/test_backend_ps.py\n@@ -255,6 +255,26 @@ def test_linedash():\n \n     assert buf.tell() > 0\n \n+import io\n+\n+def test_empty_line_in_multiline_label():\n+    # Smoke-test for the issue with multiline labels containing empty lines\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.annotate(text='\\nLower label\\n', xy=(0, 0))\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    buf.seek(0)\n+    assert buf.tell() > 0\n+\n+def test_empty_line_in_multiline_title():\n+    fig = Figure()\n+    ax = fig.add_subplot(111)\n+    ax.set_title('Title\\n\\nWith Empty Line')\n+    buf = io.BytesIO()\n+    fig.savefig(buf, format='eps')\n+    buf.seek(0)\n+    assert buf.tell() > 0\n \n def test_no_duplicate_definition():\n \n",
  "matplotlib__matplotlib-23987": "diff --git a/lib/matplotlib/tests/test_constrainedlayout.py b/lib/matplotlib/tests/test_constrainedlayout.py\nindex 41fdfa1..385a951 100644\n--- a/lib/matplotlib/tests/test_constrainedlayout.py\n+++ b/lib/matplotlib/tests/test_constrainedlayout.py\n@@ -649,10 +649,31 @@ def test_compressed1():\n \n     fig.colorbar(pc, ax=axs)\n     fig.draw_without_rendering()\n+import matplotlib.pyplot as plt\n+import pytest\n+import numpy as np\n \n+@pytest.mark.parametrize('constrained_layout', [False, True])\n+def test_constrained_layout_with_subplots_adjust(constrained_layout):\n+    a = np.linspace(0, 2*np.pi, 100)\n+    b = np.sin(a)\n+    c = np.cos(a)\n+    fig, ax = plt.subplots(1, 2, figsize=(8, 2), constrained_layout=constrained_layout)\n+    ax[0].plot(a, b)\n+    ax[1].plot(a, c)\n+\n+    with pytest.warns(None) as record:\n+        plt.subplots_adjust(wspace=0)\n+    \n+    if constrained_layout:\n+        # Constrained layout True, warning expected\n+        assert any(\"This figure was using a layout engine that is incompatible\" in str(warning.message) for warning in record.list)\n+    else:\n+        # Constrained layout False, no warning expected\n+        assert not any(\"This figure was using a layout engine that is incompatible\" in str(warning.message) for warning in record.list)\n     pos = axs[0, 0].get_position()\n     np.testing.assert_allclose(pos.x0, 0.06195, atol=1e-3)\n     np.testing.assert_allclose(pos.y1, 0.8537, atol=1e-3)\n     pos = axs[1, 2].get_position()\n     np.testing.assert_allclose(pos.x1, 0.8618, atol=1e-3)\n-    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n+    np.testing.assert_allclose(pos.y0, 0.1934, atol=1e-3)\n",
  "matplotlib__matplotlib-24149": "",
  "matplotlib__matplotlib-24334": "",
  "matplotlib__matplotlib-24970": "",
  "matplotlib__matplotlib-25311": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..50d2e14 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -1,3 +1,4 @@\n+\n from io import BytesIO\n import ast\n import pickle\n@@ -106,7 +107,29 @@ def test_complete(fig_test, fig_ref):\n     plt.close(loaded)\n \n \n-def _pickle_load_subprocess():\n+def test_pickle_with_draggable_legend():\n+    import pickletools\n+    \n+    fig = plt.figure()\n+    ax = fig.add_subplot(111)\n+\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40, 43, 45, 47, 48]\n+\n+    ax.plot(time, speed, label=\"speed\")\n+\n+    leg = ax.legend()\n+    leg.set_draggable(True)  # The line which originally caused the issue\n+\n+    pkl = pickle.dumps(fig, pickle.HIGHEST_PROTOCOL)\n+    \n+    # Check that FigureCanvasQTAgg is not in the pickled data\n+    assert \"FigureCanvasQTAgg\" not in [arg for op, arg, pos in pickletools.genops(pkl)]\n+    \n+    # Unpickle and check that it succeeds\n+    loaded = pickle.loads(pkl)\n+    loaded.canvas.draw()\n+    plt.close(loaded)\n     import os\n     import pickle\n \n",
  "matplotlib__matplotlib-25332": "diff --git a/lib/matplotlib/tests/test_pickle.py b/lib/matplotlib/tests/test_pickle.py\nindex 48d72e7..abff54d 100644\n--- a/lib/matplotlib/tests/test_pickle.py\n+++ b/lib/matplotlib/tests/test_pickle.py\n@@ -89,8 +89,43 @@ def _generate_complete_test_figure(fig_ref):\n     plt.subplot(3, 3, 9)\n     plt.errorbar(x, x * -0.5, xerr=0.2, yerr=0.4)\n \n+import matplotlib.pyplot as plt\n+import pickle\n \n-@mpl.style.context(\"default\")\n+def test_pickle_figure_with_aligned_labels():\n+    # Create the figure and subplots\n+    fig = plt.figure()\n+    ax1 = fig.add_subplot(211)\n+    ax2 = fig.add_subplot(212)\n+    \n+    # Add some dummy data\n+    time = [0, 1, 2, 3, 4]\n+    speed = [40000, 4300, 4500, 4700, 4800]\n+    acc = [10, 11, 12, 13, 14]\n+    \n+    # Plot the data\n+    ax1.plot(time, speed)\n+    ax1.set_ylabel('speed')\n+    ax2.plot(time, acc)\n+    ax2.set_ylabel('acc')\n+    \n+    # Align labels\n+    fig.align_labels()\n+\n+    # Try to pickle the figure\n+    try:\n+        pickle_data = pickle.dumps(fig)\n+        assert pickle_data is not None, \"Pickle data should not be None\"\n+        # Try to unpickle the data\n+        loaded_fig = pickle.loads(pickle_data)\n+        assert loaded_fig is not None, \"Loaded figure should not be None\"\n+    except Exception as e:\n+        pytest.fail(f\"Pickling failed with exception: {e}\")\n+\n+    # Ensure the loaded figure can be displayed\n+    loaded_fig.canvas.draw()\n+\n+    plt.close(loaded_fig)\n @check_figures_equal(extensions=[\"png\"])\n def test_complete(fig_test, fig_ref):\n     _generate_complete_test_figure(fig_ref)\n",
  "matplotlib__matplotlib-25442": "",
  "matplotlib__matplotlib-26011": "",
  "matplotlib__matplotlib-26020": "",
  "mwaskom__seaborn-3010": "diff --git a/tests/_stats/test_regression.py b/tests/_stats/test_regression.py\nindex 9aa3203..5adb7af 100644\n--- a/tests/_stats/test_regression.py\n+++ b/tests/_stats/test_regression.py\n@@ -1,9 +1,11 @@\n \n+\n import numpy as np\n import pandas as pd\n \n import pytest\n from numpy.testing import assert_array_equal, assert_array_almost_equal\n+from pandas.testing import assert_frame_equal\n \n from seaborn._core.groupby import GroupBy\n from seaborn._stats.regression import PolyFit\n@@ -11,6 +13,25 @@ from seaborn._stats.regression import PolyFit\n \n class TestPolyFit:\n \n+    def test_polyfit_missing_data(self):\n+        # Data with missing values\n+        df = pd.DataFrame({\n+            \"x\": [1, 2, 3, None, 4, 5],\n+            \"y\": [5, 4, 3, 2, 1, 0],\n+            \"group\": [0, 0, 0, 0, 0, 0]\n+        })\n+        \n+        groupby = GroupBy([\"group\"])\n+        \n+        # Expected to handle missing data without raising an error\n+        try:\n+            res = PolyFit()(df, groupby, \"x\", {})\n+            # Check that the result does not contain NaN values\n+            assert not res.isnull().values.any()\n+            print(\"Test passed: PolyFit handles missing data correctly.\")\n+        except Exception as e:\n+            self.fail(f\"PolyFit failed with missing data: {e}\")\n+\n     @pytest.fixture\n     def df(self, rng):\n \n",
  "mwaskom__seaborn-3190": "",
  "mwaskom__seaborn-3407": "",
  "pallets__flask-4992": "",
  "psf__requests-1963": "",
  "psf__requests-2317": "",
  "psf__requests-2674": "diff --git a/requests/test_requests.py b/requests/test_requests.py\nindex 31fe034..1786ae6 100644\n--- a/requests/test_requests.py\n+++ b/requests/test_requests.py\n@@ -1636,6 +1636,41 @@ def test_prepared_request_complete_copy():\n     assert_copy(p, p.copy())\n \n \n+import pytest\n+import requests\n+from requests.adapters import HTTPAdapter\n+from requests.exceptions import Timeout, RequestException, ConnectionError\n+from requests.packages.urllib3.exceptions import DecodeError, ReadTimeoutError\n+from requests.packages.urllib3.util import Timeout as UrlLib3Timeout\n+import unittest\n+\n+def httpbin(endpoint):\n+    return 'http://httpbin.org/' + endpoint\n+\n+def test_decode_error_wrapped():\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n+\n+    with pytest.raises(RequestException) as excinfo:\n+        s.request('GET', httpbin('status/200'), headers={'Accept-Encoding': 'gzip, deflate'}, decode_content=False)\n+        raise DecodeError(\"Test DecodeError\")\n+\n+    assert isinstance(excinfo.value, RequestException)\n+    assert \"DecodeError\" in str(excinfo.value)\n+\n+def test_timeout_error_wrapped():\n+    s = requests.Session()\n+    s.mount('http://', HTTPAdapter())\n+\n+    with pytest.raises(Timeout) as excinfo:\n+        s.request('GET', httpbin('delay/10'), timeout=UrlLib3Timeout(connect=1.0, read=1.0))\n+    \n+    assert isinstance(excinfo.value, Timeout)\n+    assert \"ReadTimeoutError\" in str(excinfo.value)\n+\n+if __name__ == '__main__':\n+    unittest.main()\n+\n def test_prepare_unicode_url():\n     p = PreparedRequest()\n     p.prepare(\n@@ -1663,4 +1698,4 @@ def test_vendor_aliases():\n         from requests.packages import webbrowser\n \n if __name__ == '__main__':\n-    unittest.main()\n+    unittest.main()\n",
  "psf__requests-3362": "diff --git a/tests/test_requests.py b/tests/test_requests.py\nindex 52d1693..4dafa0f 100644\n--- a/tests/test_requests.py\n+++ b/tests/test_requests.py\n@@ -980,7 +980,31 @@ class TestRequests:\n         chunks = r.iter_content(decode_unicode=True)\n         assert all(isinstance(chunk, str) for chunk in chunks)\n \n-    def test_response_chunk_size_int(self):\n+    def test_iter_content_with_decode_unicode_true(self):\n+        \"\"\"\n+        Test iter_content with decode_unicode=True returns strings, not bytes.\n+        \"\"\"\n+        # Test when encoding is None\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = None\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"All chunks should be str when decode_unicode=True\"\n+\n+        # Test with specified encoding\n+        r = requests.Response()\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"All chunks should be str when decode_unicode=True\"\n+\n+        # Test with custom chunk size\n+        r = requests.Response()\n+        r._content_consumed = False\n+        r.raw = io.BytesIO(b'the content')\n+        r.encoding = 'utf-8'\n+        chunks = r.iter_content(chunk_size=4, decode_unicode=True)\n+        assert all(isinstance(chunk, str) for chunk in chunks), \"All chunks should be str when decode_unicode=True with custom chunk size\"\n         \"\"\"Ensure that chunk_size is passed as an integer, otherwise\n         raise a TypeError.\n         \"\"\"\n",
  "psf__requests-863": "",
  "pydata__xarray-5131": "diff --git a/xarray/tests/test_groupby.py b/xarray/tests/test_groupby.py\nindex 3852c09..f297ca3 100644\n--- a/xarray/tests/test_groupby.py\n+++ b/xarray/tests/test_groupby.py\n@@ -400,6 +400,11 @@ def test_groupby_repr(obj, dim):\n         expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n \n+    # Check that there is no trailing whitespace in the string representation\n+    lines = actual.split(\"\\n\")\n+    for line in lines:\n+        assert line == line.rstrip(), f\"Trailing whitespace found in line: {line}\"\n+\n \n @pytest.mark.parametrize(\"obj\", [repr_da, repr_da.to_dataset(name=\"a\")])\n def test_groupby_repr_datetime(obj):\n@@ -410,6 +415,11 @@ def test_groupby_repr_datetime(obj):\n     expected += \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12.\"\n     assert actual == expected\n \n+    # Check that there is no trailing whitespace in the string representation\n+    lines = actual.split(\"\\n\")\n+    for line in lines:\n+        assert line == line.rstrip(), f\"Trailing whitespace found in line: {line}\"\n+\n \n def test_groupby_drops_nans():\n     # GH2383\n",
  "pylint-dev__pylint-5859": "diff --git a/tests/checkers/unittest_misc.py b/tests/checkers/unittest_misc.py\nindex 460d485..c574157 100644\n--- a/tests/checkers/unittest_misc.py\n+++ b/tests/checkers/unittest_misc.py\n@@ -89,7 +89,15 @@ class TestFixme(CheckerTestCase):\n         ):\n             self.checker.process_tokens(_tokenize_str(code))\n \n-    def test_issue_2321_should_not_trigger(self) -> None:\n+    @set_config(notes=[\"???\"])\n+    def test_non_alphanumeric_codetag(self) -> None:\n+        code = \"\"\"a = 1\n+                #???\n+                \"\"\"\n+        with self.assertAddsMessages(\n+            MessageTest(msg_id=\"fixme\", line=2, args=\"???\", col_offset=17)\n+        ):\n+            self.checker.process_tokens(_tokenize_str(code))\n         code = 'print(\"# TODO this should not trigger a fixme\")'\n         with self.assertNoMessages():\n             self.checker.process_tokens(_tokenize_str(code))\n@@ -119,4 +127,4 @@ class TestFixme(CheckerTestCase):\n         # Todoist API: Fetch all Tasks\n         \"\"\"\n         with self.assertNoMessages():\n-            self.checker.process_tokens(_tokenize_str(code))\n+            self.checker.process_tokens(_tokenize_str(code))\n",
  "pylint-dev__pylint-6506": "diff --git a/tests/config/test_config.py b/tests/config/test_config.py\nindex 35849b5..e7869f4 100644\n--- a/tests/config/test_config.py\n+++ b/tests/config/test_config.py\n@@ -79,7 +79,21 @@ def test_unknown_short_option_name(capsys: CaptureFixture) -> None:\n     assert \"E0015: Unrecognized option found: Q\" in output.out\n \n \n-def test_unknown_confidence(capsys: CaptureFixture) -> None:\n+def test_unrecognized_option_no_traceback(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure no traceback is printed on unrecognized options.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"-Q\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"E0015: Unrecognized option found: Q\" in output.out\n+    assert \"Traceback\" not in output.err\n+\n+def test_unrecognized_long_option_no_traceback(capsys: CaptureFixture) -> None:\n+    \"\"\"Ensure no traceback is printed on unrecognized long options.\"\"\"\n+    with pytest.raises(SystemExit):\n+        Run([str(EMPTY_MODULE), \"--unknown-long-option\"], exit=False)\n+    output = capsys.readouterr()\n+    assert \"E0015: Unrecognized option found: unknown-long-option\" in output.out\n+    assert \"Traceback\" not in output.err\n     \"\"\"Check that we correctly error an unknown confidence value.\"\"\"\n     with pytest.raises(SystemExit):\n         Run([str(EMPTY_MODULE), \"--confidence=UNKNOWN_CONFIG\"], exit=False)\n",
  "pylint-dev__pylint-7080": "diff --git a/tests/test_self.py b/tests/test_self.py\nindex fa7078d..c79f700 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1330,6 +1330,29 @@ class TestRunTC:\n                     code=0,\n                 )\n \n+    def test_ignore_paths_with_recursive(self) -> None:\n+        \"\"\"Test that the ignore-paths option works with --recursive=y\"\"\"\n+        with _test_sys_path():\n+            # Remove known interference from sys.path\n+            sys.path = [\n+                path\n+                for path in sys.path\n+                if not os.path.basename(path) == \"regrtest_data\"\n+            ]\n+            with _test_cwd():\n+                # Change directory to a known location within the test data\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                self._runtest(\n+                    [\n+                        \".\",\n+                        \"--recursive=y\",\n+                        \"--ignore-paths=^ignored_subdirectory/.*\",\n+                        \"--ignore-paths=^gen/.*\",\n+                        \"--ignore-paths=^src/gen/.*\",\n+                    ],\n+                    code=0,  # Expecting no issues found in ignored paths\n+                )\n+\n     def test_regression_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n",
  "pylint-dev__pylint-7114": "diff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 0dc6d1b..854afbe 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -935,10 +935,48 @@ print(submodule1)\n     assert not linter.stats.by_msg\n \n \n+def test_lint_module_with_same_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test to verify linting works when a module contains a file of the same name\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    assert not linter.stats.by_msg\n+\n+def test_lint_import_with_module_same_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for import resolution when a module contains a file of the same name\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\")\n+        linter.check([\"r\", \"a\"])\n+    assert not linter.stats.by_msg\n+\n+\n def test_lint_namespace_package_under_dir(initialized_linter: PyLinter) -> None:\n     \"\"\"Regression test for https://github.com/PyCQA/pylint/issues/1667\"\"\"\n     linter = initialized_linter\n     with tempdir():\n         create_files([\"outer/namespace/__init__.py\", \"outer/namespace/module.py\"])\n         linter.check([\"outer.namespace\"])\n-    assert not linter.stats.by_msg\n+    assert not linter.stats.by_msg\n+\n+\n+def test_lint_module_with_same_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test to verify linting works when a module contains a file of the same name\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\"])\n+        linter.check([\"a\"])\n+    assert not linter.stats.by_msg\n+\n+def test_lint_import_with_module_same_name(initialized_linter: PyLinter) -> None:\n+    \"\"\"Test for import resolution when a module contains a file of the same name\"\"\"\n+    linter = initialized_linter\n+    with tempdir():\n+        create_files([\"a/a.py\", \"a/b.py\", \"r.py\"])\n+        with open(\"r.py\", \"w\", encoding=\"utf-8\") as f:\n+            f.write(\"from a import b\")\n+        linter.check([\"r\", \"a\"])\n+    assert not linter.stats.by_msg\n",
  "pylint-dev__pylint-7993": "diff --git a/tests/reporters/unittest_reporting.py b/tests/reporters/unittest_reporting.py\nindex 6338072..43b86c9 100644\n--- a/tests/reporters/unittest_reporting.py\n+++ b/tests/reporters/unittest_reporting.py\n@@ -1,3 +1,4 @@\n+\n # Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n # For details: https://github.com/PyCQA/pylint/blob/main/LICENSE\n # Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt\n@@ -113,6 +114,21 @@ def test_template_option_non_existing(linter) -> None:\n     assert out_lines[2] == \"my_mod:2::()\"\n \n \n+def test_custom_braces_in_msg_template(linter: PyLinter) -> None:\n+    \"\"\"Test custom braces in message template work correctly.\"\"\"\n+    output = StringIO()\n+    linter.reporter.out = output\n+    linter.config.msg_template = '{{ \"Category\": \"{category}\" }}'\n+    linter.open()\n+    linter.set_current_module(\"my_mod\")\n+\n+    linter.add_message(\"C0301\", line=1, args=(1, 2))\n+    linter.add_message(\"E1101\", line=2, args=(3, 4))\n+\n+    out_lines = output.getvalue().split(\"\\n\")\n+    assert out_lines[1] == '{ \"Category\": \"convention\" }'\n+    assert out_lines[2] == '{ \"Category\": \"error\" }'\n+\n def test_deprecation_set_output(recwarn):\n     \"\"\"TODO remove in 3.0.\"\"\"\n     reporter = BaseReporter()\n",
  "pytest-dev__pytest-11143": "",
  "pytest-dev__pytest-11148": "diff --git a/testing/test_pathlib.py b/testing/test_pathlib.py\nindex 9989033..7dd736d 100644\n--- a/testing/test_pathlib.py\n+++ b/testing/test_pathlib.py\n@@ -288,7 +288,28 @@ class TestImportPath:\n         fn.write_text(\"def foo(x): return 40 + x\", encoding=\"utf-8\")\n         return fn\n \n-    def test_importmode_importlib(self, simple_module: Path, tmp_path: Path) -> None:\n+    def test_double_import_same_module(self, pytester: Type[\"Pytester\"]) -> None:\n+        pytester.makepyfile(\n+            \"\"\"\n+            # Test files create identical situations as decribed in the issue\n+            # to check the effect of double import on a single module.\n+            # `pmxbot.logging` is known to have import side-effects.\n+            from importlib import import_module\n+\n+            def test_logging_module_imports():\n+                from pmxbot import logging\n+                # This emulates a 2nd import that would be handled by importlib\n+                logging_again = import_module('pmxbot.logging')\n+                \n+                # Asserting if both these imports point to same module object\n+                assert logging is logging_again\n+\n+                # Additionally check if `logging` has expected attributes set\n+                assert hasattr(logging, 'Logger')\n+            \"\"\"\n+        )\n+        result = pytester.runpytest_subprocess()\n+        result.stdout.fnmatch_lines([\"*1 passed*\"])\n         \"\"\"`importlib` mode does not change sys.path.\"\"\"\n         module = import_path(simple_module, mode=\"importlib\", root=tmp_path)\n         assert module.foo(2) == 42  # type: ignore[attr-defined]\n",
  "pytest-dev__pytest-5227": "diff --git a/testing/logging/test_formatter.py b/testing/logging/test_formatter.py\nindex 54a08a2..065db08 100644\n--- a/testing/logging/test_formatter.py\n+++ b/testing/logging/test_formatter.py\n@@ -1,3 +1,4 @@\n+\n import logging\n \n import py.io\n@@ -5,7 +6,24 @@ import py.io\n from _pytest.logging import ColoredLevelFormatter\n \n \n-def test_coloredlogformatter():\n+def test_default_log_format_with_module_name():\n+    logfmt = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n+\n+    record = logging.LogRecord(\n+        name=\"dummy_module\",\n+        level=logging.INFO,\n+        pathname=\"dummypath/utils.py\",\n+        lineno=42,\n+        msg=\"Testing new log format\",\n+        args=(),\n+        exc_info=False,\n+    )\n+\n+    tw = py.io.TerminalWriter()\n+    tw.hasmarkup = False\n+    formatter = ColoredLevelFormatter(tw, logfmt)\n+    output = formatter.format(record)\n+    assert output == \"INFO     dummy_module:utils.py:42 Testing new log format\"\n     logfmt = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n \n     record = logging.LogRecord(\n",
  "pytest-dev__pytest-5495": "diff --git a/testing/test_assertion.py b/testing/test_assertion.py\nindex b05f85c..426ffcb 100644\n--- a/testing/test_assertion.py\n+++ b/testing/test_assertion.py\n@@ -458,6 +458,27 @@ class TestAssert_reprcompare:\n             \"- (1, 2, 3)\",\n             \"+ (4,)\",\n         ]\n+    def test_bytes_confusing_repr(self):\n+        \"\"\"Reproduce the confusing assertion message with byte strings.\"\"\"\n+        diff = callequal(b\"\", b\"42\")\n+        assert diff == [\n+            \"b'' == b'42'\",\n+            \"Right contains more items, first extra item: 52\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'42'\",\n+            \"?   ++\"\n+        ]\n+\n+        diff = callequal(b\"\", b\"1\")\n+        assert diff == [\n+            \"b'' == b'1'\",\n+            \"Right contains more items, first extra item: 49\",\n+            \"Full diff:\",\n+            \"- b''\",\n+            \"+ b'1'\",\n+            \"?  +\"\n+        ]\n \n     def test_set(self):\n         expl = callequal({0, 1}, {0, 2})\n",
  "pytest-dev__pytest-5692": "diff --git a/testing/test_junitxml.py b/testing/test_junitxml.py\nindex 3392814..c17735e 100644\n--- a/testing/test_junitxml.py\n+++ b/testing/test_junitxml.py\n@@ -1,3 +1,4 @@\n+\n import os\n from xml.dom import minidom\n \n@@ -156,8 +157,29 @@ class TestPython:\n         tnode = node.find_first_by_tag(\"testcase\")\n         val = tnode[\"time\"]\n         assert round(float(val), 2) >= 0.03\n+    def test_hostname_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        node.assert_attr(hostname=platform.node())\n \n-    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n+    def test_timestamp_in_xml(self, testdir):\n+        testdir.makepyfile(\n+            \"\"\"\n+            def test_pass():\n+                pass\n+            \"\"\"\n+        )\n+        start_time = datetime.now()\n+        result, dom = runandparse(testdir)\n+        node = dom.find_first_by_tag(\"testsuite\")\n+        timestamp = datetime.strptime(node[\"timestamp\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n+        assert start_time <= timestamp < datetime.now()\n     def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n \n         # mock LogXML.node_reporter so it always sets a known duration to each test report object\n",
  "pytest-dev__pytest-7168": "diff --git a/testing/io/test_saferepr.py b/testing/io/test_saferepr.py\nindex 38e0b6b..ec8123b 100644\n--- a/testing/io/test_saferepr.py\n+++ b/testing/io/test_saferepr.py\n@@ -143,6 +143,22 @@ def test_repr_on_newstyle():\n \n     assert saferepr(Function())\n \n+def test_broken_getattribute_and_repr():\n+    \"\"\"Test saferepr() for classes with both broken __getattribute__ and __repr__.\"\"\"\n+\n+    class SomeClass:\n+        def __getattribute__(self, attr):\n+            raise RuntimeError(\"Issue triggered in __getattribute__\")\n+\n+        def __repr__(self):\n+            raise RuntimeError(\"Issue triggered in __repr__\")\n+\n+    # Attempting to create a saferepr for the broken object\n+    repr_result = saferepr(SomeClass())\n+    assert repr_result.startswith(\n+        \"<[RuntimeError('Issue triggered in __repr__') raised in repr()] SomeClass object at 0x\"\n+    )\n+\n \n def test_unicode():\n     val = \"\u00a3\u20ac\"\n@@ -153,4 +169,4 @@ def test_unicode():\n def test_pformat_dispatch():\n     assert _pformat_dispatch(\"a\") == \"'a'\"\n     assert _pformat_dispatch(\"a\" * 10, width=5) == \"'aaaaaaaaaa'\"\n-    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n+    assert _pformat_dispatch(\"foo bar\", width=5) == \"('foo '\\n 'bar')\"\n",
  "pytest-dev__pytest-7220": "diff --git a/testing/test_pytester.py b/testing/test_pytester.py\nindex 5ab5242..09ad9d2 100644\n--- a/testing/test_pytester.py\n+++ b/testing/test_pytester.py\n@@ -288,7 +288,31 @@ class TestInlineRunModulesCleanup:\n         assert imported.data == 42\n \n \n-def test_assert_outcomes_after_pytest_error(testdir) -> None:\n+def test_failure_with_changed_cwd(testdir):\n+    \"\"\"\n+    Test failure lines should use absolute paths if cwd has changed since\n+    invocation, so the path is correct (#6428).\n+    \"\"\"\n+    p = testdir.makepyfile(\n+        \"\"\"\n+        import os\n+        import pytest\n+\n+        @pytest.fixture\n+        def private_dir():\n+            out_dir = 'ddd'\n+            os.mkdir(out_dir)\n+            old_dir = os.getcwd()\n+            os.chdir(out_dir)\n+            yield out_dir\n+            os.chdir(old_dir)\n+\n+        def test_show_wrong_path(private_dir):\n+            assert False\n+    \"\"\"\n+    )\n+    result = testdir.runpytest()\n+    result.stdout.fnmatch_lines([str(p) + \":*: AssertionError\", \"*1 failed in *\"])\n     testdir.makepyfile(\"def test_foo(): assert True\")\n \n     result = testdir.runpytest(\"--unexpected-argument\")\n",
  "pytest-dev__pytest-7373": "diff --git a/testing/test_mark.py b/testing/test_mark.py\nindex 309636c..a394ab5 100644\n--- a/testing/test_mark.py\n+++ b/testing/test_mark.py\n@@ -1,5 +1,6 @@\n import os\n import sys\n+import os\n from unittest import mock\n \n import pytest\n@@ -40,9 +41,38 @@ class TestMark:\n         mark = Mark()\n         with pytest.raises(AttributeError):\n             mark._some_name\n+class TestSkipIfEvaluationCaching:\n+    def test_reevaluate_dynamic_expr(self, testdir):\n+        \"\"\"Ensure that identical skipif conditions in different modules\n+        evaluate independently based on their respective globals.\n+        \"\"\"\n+        py_file1 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr1=\"\"\"\\\n+            import pytest\n+\n+            skip = True\n \n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_skip():\n+                assert True\n+            \"\"\"\n+        )\n+        py_file2 = testdir.makepyfile(\n+            test_reevaluate_dynamic_expr2=\"\"\"\\\n+            import pytest\n+\n+            skip = False\n+\n+            @pytest.mark.skipif(\"skip\")\n+            def test_should_not_skip():\n+                assert True\n+            \"\"\"\n+        )\n \n-def test_marked_class_run_twice(testdir):\n+        file_name1 = os.path.basename(py_file1.strpath)\n+        file_name2 = os.path.basename(py_file2.strpath)\n+        reprec = testdir.inline_run(file_name1, file_name2)\n+        reprec.assertoutcome(passed=1, skipped=1)\n     \"\"\"Test fails file is run twice that contains marked class.\n     See issue#683.\n     \"\"\"\n",
  "pytest-dev__pytest-7432": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 73a7f38..4a63af3 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -152,6 +152,29 @@ class TestEvaluation:\n         assert skipped\n         assert skipped.reason == \"condition: config._hackxyz\"\n \n+import pytest\n+\n+\n+class TestSkipWithRunXFail:\n+    \n+    @pytest.mark.parametrize(\n+        \"test_input,expected_location\",\n+        [\n+            ([\"-rs\"], \"SKIPPED [1] test_sample.py:2: unconditional skip\"),\n+            ([\"-rs\", \"--runxfail\"], \"SKIPPED [1] test_sample.py:2: unconditional skip\"),\n+        ],\n+    )\n+    def test_skip_location_with_runxfail(self, testdir, test_input, expected_location):\n+        test_sample = \"\"\"\n+            import pytest\n+            @pytest.mark.skip\n+            def test_skip_location():\n+                assert 0\n+        \"\"\"\n+        testdir.makepyfile(test_sample)\n+        result = testdir.runpytest(*test_input)\n+        result.stdout.fnmatch_lines([expected_location, \"*1 skipped*\"])\n+\n \n class TestXFail:\n     @pytest.mark.parametrize(\"strict\", [True, False])\n",
  "pytest-dev__pytest-7490": "diff --git a/testing/test_skipping.py b/testing/test_skipping.py\nindex 50a5826..12b7b5f 100644\n--- a/testing/test_skipping.py\n+++ b/testing/test_skipping.py\n@@ -1,3 +1,4 @@\n+\n import sys\n \n import pytest\n@@ -397,6 +398,31 @@ class TestXFail:\n         result = testdir.runpytest(p, \"-rxX\")\n         result.stdout.fnmatch_lines([\"*XFAIL*test_this*\", \"*XPASS*test_that*\"])\n \n+    def test_dynamic_xfail_set_during_runtest_failed(self, testdir: Testdir) -> None:\n+        # Issue #7486: verify dynamically setting xfail in runtest works as expected.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\"))\n+                assert 0\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(xfailed=1)\n+\n+    def test_dynamic_xfail_set_during_runtest_passed_with_strict(self, testdir: Testdir) -> None:\n+        # Verify that dynamically setting an xfail with strict fails the test.\n+        p = testdir.makepyfile(\n+            \"\"\"\n+            import pytest\n+            def test_this(request):\n+                request.node.add_marker(pytest.mark.xfail(reason=\"xfail\", strict=True))\n+            \"\"\"\n+        )\n+        result = testdir.runpytest(p)\n+        result.assert_outcomes(failed=1)\n+\n     def test_dynamic_xfail_no_run(self, testdir):\n         p = testdir.makepyfile(\n             \"\"\"\n",
  "pytest-dev__pytest-8365": "diff --git a/testing/test_tmpdir.py b/testing/test_tmpdir.py\nindex 6a7e0bd..bee3236 100644\n--- a/testing/test_tmpdir.py\n+++ b/testing/test_tmpdir.py\n@@ -1,3 +1,4 @@\n+\n import os\n import stat\n import sys\n@@ -5,8 +6,7 @@ from pathlib import Path\n from typing import Callable\n from typing import cast\n from typing import List\n-\n-import attr\n+from _pytest.monkeypatch import MonkeyPatch\n \n import pytest\n from _pytest import pathlib\n",
  "scikit-learn__scikit-learn-10297": "diff --git a/sklearn/linear_model/tests/test_ridge.py b/sklearn/linear_model/tests/test_ridge.py\nindex a48e744..223a59f 100644\n--- a/sklearn/linear_model/tests/test_ridge.py\n+++ b/sklearn/linear_model/tests/test_ridge.py\n@@ -574,7 +574,15 @@ def test_class_weights_cv():\n     assert_array_equal(reg.predict([[-.2, 2]]), np.array([-1]))\n \n \n-def test_ridgecv_store_cv_values():\n+def test_ridgeclassifiercv_store_cv_values_error():\n+    # Verify that RidgeClassifierCV raises a TypeError when store_cv_values is passed\n+    X = np.array([[-1.0, -1.0], [-1.0, 0], [-.8, -1.0],\n+                  [1.0, 1.0], [1.0, 0.0]])\n+    y = np.array([1, 1, 1, -1, -1])\n+\n+    with pytest.raises(TypeError):\n+        ridge_clf = RidgeClassifierCV(alphas=[0.1, 1.0, 10.0], store_cv_values=True)\n+        ridge_clf.fit(X, y)\n     # Test _RidgeCV's store_cv_values attribute.\n     rng = rng = np.random.RandomState(42)\n \n",
  "scikit-learn__scikit-learn-11281": "diff --git a/sklearn/mixture/tests/test_bayesian_mixture.py b/sklearn/mixture/tests/test_bayesian_mixture.py\nindex a9d82b7..54bb7b1 100644\n--- a/sklearn/mixture/tests/test_bayesian_mixture.py\n+++ b/sklearn/mixture/tests/test_bayesian_mixture.py\n@@ -11,6 +11,7 @@ from sklearn.utils.testing import assert_almost_equal\n from sklearn.mixture.bayesian_mixture import _log_dirichlet_norm\n from sklearn.mixture.bayesian_mixture import _log_wishart_norm\n \n+from sklearn.utils.testing import assert_array_equal\n from sklearn.mixture import BayesianGaussianMixture\n \n from sklearn.mixture.tests.test_gaussian_mixture import RandomData\n",
  "scikit-learn__scikit-learn-12471": "diff --git a/sklearn/preprocessing/tests/test_encoders.py b/sklearn/preprocessing/tests/test_encoders.py\nindex 3f9b211..c9c5c96 100644\n--- a/sklearn/preprocessing/tests/test_encoders.py\n+++ b/sklearn/preprocessing/tests/test_encoders.py\n@@ -260,6 +260,11 @@ def test_one_hot_encoder_not_fitted():\n         enc.transform(X)\n \n \n+from sklearn.preprocessing import OneHotEncoder\n+import numpy as np\n+import pytest\n+from numpy.testing import assert_array_equal\n+\n def test_one_hot_encoder_no_categorical_features():\n     X = np.array([[3, 2, 1], [0, 1, 1]], dtype='float64')\n \n@@ -272,6 +277,37 @@ def test_one_hot_encoder_no_categorical_features():\n     assert_array_equal(enc.get_feature_names(), expected_features)\n     assert enc.categories_ == []\n \n+def test_one_hot_encoder_handle_unknown_strings_large_known():\n+    # Tests handling unknown strings with large known categories\n+    X_train = np.array(['abcd', 'efgh', 'ijkl', 'mnopqrst']).reshape((-1, 1))\n+    X_test =  np.array(['uvw', 'xy', 'z']).reshape((-1, 1))\n+\n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(X_train)\n+    X_test_transformed = ohe.transform(X_test).toarray()\n+\n+    # expecting a 3x4 sparse matrix with all zeros (all unknown)\n+    expected = np.zeros((3, 4))\n+    assert_array_equal(X_test_transformed, expected)\n+\n+def test_one_hot_encoder_handle_unknown_strings_mixed_sizes():\n+    # Tests with mixed size strings where unknowns should be ignored safely\n+    X_train = np.array(['apple', 'banana', 'cherry']).reshape((-1, 1))\n+    X_test = np.array(['durian', 'apple', 'banana', 'cherry']).reshape((-1, 1))\n+\n+    ohe = OneHotEncoder(handle_unknown='ignore')\n+    ohe.fit(X_train)\n+    X_test_transformed = ohe.transform(X_test).toarray()\n+\n+    # Should only recognize 'apple', 'banana', 'cherry', unknown 'durian' becomes all zeros\n+    expected = np.array([\n+        [0., 0., 0.],  # durian (unknown)\n+        [1., 0., 0.],  # apple\n+        [0., 1., 0.],  # banana\n+        [0., 0., 1.]   # cherry\n+    ])\n+    assert_array_equal(X_test_transformed, expected)\n+\n \n @pytest.mark.parametrize(\"output_dtype\", [np.int32, np.float32, np.float64])\n @pytest.mark.parametrize(\"input_dtype\", [np.int32, np.float32, np.float64])\n",
  "scikit-learn__scikit-learn-13142": "diff --git a/sklearn/mixture/tests/test_gaussian_mixture.py b/sklearn/mixture/tests/test_gaussian_mixture.py\nindex f8e4d54..d8d3e07 100644\n--- a/sklearn/mixture/tests/test_gaussian_mixture.py\n+++ b/sklearn/mixture/tests/test_gaussian_mixture.py\n@@ -597,8 +597,41 @@ def test_gaussian_mixture_fit_predict(seed, max_iter, tol):\n         assert_array_equal(Y_pred1, Y_pred2)\n         assert_greater(adjusted_rand_score(Y, Y_pred2), .95)\n \n+from sklearn.mixture import GaussianMixture\n+from numpy.testing import assert_array_equal\n+import numpy as np\n+\n \n-def test_gaussian_mixture_fit():\n+def test_gaussian_mixture_fit_predict_n_init():\n+    # Check that fit_predict is equivalent to fit.predict, when n_init > 1\n+    X = np.random.RandomState(0).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=5, random_state=0)\n+    y_pred1 = gm.fit_predict(X)\n+    y_pred2 = gm.predict(X)\n+    assert_array_equal(y_pred1, y_pred2)\n+    \n+\n+def test_gaussian_mixture_fit_predict_n_init_multiple_runs():\n+    # Ensure consistency over multiple runs with n_init > 1\n+    X = np.random.RandomState(42).randn(1000, 5)\n+    gm = GaussianMixture(n_components=5, n_init=10, random_state=42)\n+    y_pred_runs = [gm.fit_predict(X) for _ in range(3)]\n+    \n+    for y_pred in y_pred_runs[1:]:\n+        assert_array_equal(y_pred_runs[0], y_pred)\n+\n+\n+def test_gaussian_mixture_fit_predict_random_state():\n+    # Check fit_predict consistency when using different random states\n+    X = np.random.RandomState(42).randn(1000, 5)\n+    gm1 = GaussianMixture(n_components=5, n_init=5, random_state=42)\n+    gm2 = GaussianMixture(n_components=5, n_init=5, random_state=24)\n+    \n+    y_pred1 = gm1.fit_predict(X)\n+    y_pred2 = gm2.fit_predict(X)\n+    # Since random_state is different, the predictions might differ hence we do not assert equality\n+    assert y_pred1 is not None\n+    assert y_pred2 is not None\n     # recover the ground truth\n     rng = np.random.RandomState(0)\n     rand_data = RandomData(rng)\n",
  "scikit-learn__scikit-learn-13241": "diff --git a/sklearn/decomposition/tests/test_kernel_pca.py b/sklearn/decomposition/tests/test_kernel_pca.py\nindex 87ac169..54363d3 100644\n--- a/sklearn/decomposition/tests/test_kernel_pca.py\n+++ b/sklearn/decomposition/tests/test_kernel_pca.py\n@@ -1,9 +1,10 @@\n+\n import numpy as np\n import scipy.sparse as sp\n import pytest\n \n from sklearn.utils.testing import (assert_array_almost_equal, assert_less,\n-                                   assert_equal, assert_not_equal,\n+                                   assert_equal, assert_not_equal, assert_allclose,\n                                    assert_raises)\n \n from sklearn.decomposition import PCA, KernelPCA\n@@ -71,7 +72,18 @@ def test_kernel_pca_consistent_transform():\n     assert_array_almost_equal(transformed1, transformed2)\n \n \n-def test_kernel_pca_sparse():\n+def test_kernel_pca_sign_flip():\n+    rng = np.random.RandomState(42)\n+    X = rng.rand(15, 10)\n+\n+    kpca1 = KernelPCA(n_components=7, kernel='rbf', random_state=0)\n+    transformed1 = kpca1.fit_transform(X)\n+\n+    kpca2 = KernelPCA(n_components=7, kernel='rbf', random_state=1)\n+    transformed2 = kpca2.fit_transform(X)\n+\n+    # Making sure the results match up to a sign flip\n+    assert_allclose(np.abs(transformed1), np.abs(transformed2))\n     rng = np.random.RandomState(0)\n     X_fit = sp.csr_matrix(rng.random_sample((5, 4)))\n     X_pred = sp.csr_matrix(rng.random_sample((2, 4)))\n",
  "scikit-learn__scikit-learn-13439": "diff --git a/sklearn/tests/test_pipeline.py b/sklearn/tests/test_pipeline.py\nindex 318940e..c1947d2 100644\n--- a/sklearn/tests/test_pipeline.py\n+++ b/sklearn/tests/test_pipeline.py\n@@ -1057,8 +1057,33 @@ def test_pipeline_memory():\n     finally:\n         shutil.rmtree(cachedir)\n \n-\n-def test_make_pipeline_memory():\n+def test_pipeline_length():\n+    from sklearn import svm\n+    from sklearn.datasets import make_classification\n+    from sklearn.feature_selection import SelectKBest, f_regression\n+    from sklearn.pipeline import Pipeline\n+    \n+    # Test with a simple pipeline\n+    anova_filter = SelectKBest(f_regression, k=5)\n+    clf = svm.SVC(kernel='linear')\n+    pipeline = Pipeline([('anova', anova_filter), ('svc', clf)])\n+    assert len(pipeline) == 2  # original test case\n+\n+    # Test with a single step\n+    pipeline_single = Pipeline([('svc', clf)])\n+    assert len(pipeline_single) == 1\n+\n+    # Test with no steps\n+    pipeline_empty = Pipeline([])\n+    assert len(pipeline_empty) == 0\n+\n+    # Test with multiple steps\n+    pipeline_multi = Pipeline([\n+        ('anova1', anova_filter),\n+        ('anova2', SelectKBest(f_regression, k=3)),\n+        ('svc', clf)\n+    ])\n+    assert len(pipeline_multi) == 3\n     cachedir = mkdtemp()\n     if LooseVersion(joblib_version) < LooseVersion('0.12'):\n         # Deal with change of API in joblib\n@@ -1070,4 +1095,4 @@ def test_make_pipeline_memory():\n     pipeline = make_pipeline(DummyTransf(), SVC())\n     assert pipeline.memory is None\n \n-    shutil.rmtree(cachedir)\n+    shutil.rmtree(cachedir)\n",
  "scikit-learn__scikit-learn-13496": "diff --git a/sklearn/ensemble/tests/test_iforest.py b/sklearn/ensemble/tests/test_iforest.py\nindex 3314483..2071f7f 100644\n--- a/sklearn/ensemble/tests/test_iforest.py\n+++ b/sklearn/ensemble/tests/test_iforest.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Testing for Isolation Forest algorithm (sklearn.ensemble.iforest).\n \"\"\"\n@@ -10,7 +11,9 @@ import pytest\n \n import numpy as np\n \n-from sklearn.utils.testing import assert_array_equal\n+from sklearn.utils.testing import assert_array_equal, assert_warns_message, assert_no_warnings\n+from sklearn.ensemble import IsolationForest\n+from sklearn.utils import check_random_state\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_raises\n from sklearn.utils.testing import assert_raises_regex\n@@ -297,6 +300,32 @@ def test_score_samples():\n \n @pytest.mark.filterwarnings('ignore:default contamination')\n @pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n+def test_isolation_forest_warm_start():\n+    \"\"\"Test warm start functionality in IsolationForest.\"\"\"\n+    rng = check_random_state(42)\n+    X = rng.randn(100, 2)\n+    \n+    # Initial fit with 10 estimators\n+    clf = IsolationForest(n_estimators=10, warm_start=True, random_state=rng)\n+    clf.fit(X)\n+    \n+    # Store original estimators\n+    original_estimators = clf.estimators_.copy()\n+    \n+    # Increase the number of estimators and re-fit\n+    clf.set_params(n_estimators=15)\n+    clf.fit(X)\n+    \n+    # Check if original estimators were preserved\n+    assert len(clf.estimators_) == 15\n+    assert clf.estimators_[:10] == original_estimators\n+\n+    # Run without warm start and check that estimators are reset\n+    clf.set_params(warm_start=False, n_estimators=20)\n+    clf.fit(X)\n+    assert len(clf.estimators_) == 20\n+    assert clf.estimators_[:10] != original_estimators\n+@pytest.mark.filterwarnings('ignore:behaviour=\"old\"')\n def test_deprecation():\n     X = [[0.0], [1.0]]\n     clf = IsolationForest()\n",
  "scikit-learn__scikit-learn-13497": "",
  "scikit-learn__scikit-learn-13584": "diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py\nindex 88df228..d9dbde4 100644\n--- a/sklearn/utils/tests/test_pprint.py\n+++ b/sklearn/utils/tests/test_pprint.py\n@@ -1,3 +1,4 @@\n+\n import re\n from pprint import PrettyPrinter\n \n@@ -214,8 +215,18 @@ LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,\n \n     set_config(print_changed_only=False)\n \n+def test_vector_values_in_repr():\n+    # make sure array parameters don't throw error (see #13583)\n+    from sklearn.linear_model import LogisticRegressionCV\n+    import numpy as np\n+    from sklearn import set_config\n+\n+    set_config(print_changed_only=True)\n+    # Test with vector values in an array\n+    estimator = LogisticRegressionCV(Cs=np.array([0.1, 1]))\n+    repr(estimator)  # Ensure it does not raise any exceptions\n \n-def test_pipeline():\n+    set_config(print_changed_only=False)\n     # Render a pipeline object\n     pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))\n     expected = \"\"\"\n",
  "scikit-learn__scikit-learn-13779": "diff --git a/sklearn/ensemble/tests/test_voting.py b/sklearn/ensemble/tests/test_voting.py\nindex 1de615a..c54cddc 100644\n--- a/sklearn/ensemble/tests/test_voting.py\n+++ b/sklearn/ensemble/tests/test_voting.py\n@@ -1,8 +1,11 @@\n+\n \"\"\"Testing for the VotingClassifier and VotingRegressor\"\"\"\n \n import pytest\n import numpy as np\n \n+from sklearn.linear_model import LinearRegression\n+from sklearn.ensemble import RandomForestRegressor\n from sklearn.utils.testing import assert_almost_equal, assert_array_equal\n from sklearn.utils.testing import assert_array_almost_equal\n from sklearn.utils.testing import assert_equal\n",
  "scikit-learn__scikit-learn-14087": "",
  "scikit-learn__scikit-learn-14092": "diff --git a/sklearn/neighbors/tests/test_nca.py b/sklearn/neighbors/tests/test_nca.py\nindex 3963eca..967a126 100644\n--- a/sklearn/neighbors/tests/test_nca.py\n+++ b/sklearn/neighbors/tests/test_nca.py\n@@ -119,6 +119,27 @@ def test_finite_differences():\n     np.testing.assert_almost_equal(rel_diff, 0., decimal=5)\n \n \n+@pytest.mark.parametrize('param, value', [\n+    ('tol', [0.1, 0.5, 1]),  # Includes integer value for tolerance\n+    ('n_components', np.arange(1, 10)),  # np.int64 instead of int\n+])\n+def test_gridsearch_cv_parameter_types(param, value):\n+    # Test that parameter types that would typically fail, pass during GridSearchCV\n+    X = np.random.random_sample((100, 10))\n+    y = np.random.randint(2, size=100)\n+\n+    nca = NeighborhoodComponentsAnalysis()\n+    knn = KNeighborsClassifier()\n+\n+    pipe = Pipeline([('nca', nca),\n+                     ('knn', knn)])\n+\n+    params = {f'nca__{param}': value}\n+    \n+    gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')\n+    gs.fit(X, y)\n+\n+\n def test_params_validation():\n     # Test that invalid parameters raise value error\n     X = np.arange(12).reshape(4, 3)\n",
  "scikit-learn__scikit-learn-14894": "diff --git a/sklearn/svm/tests/test_svm.py b/sklearn/svm/tests/test_svm.py\nindex 6ee2d71..e2ddaf3 100644\n--- a/sklearn/svm/tests/test_svm.py\n+++ b/sklearn/svm/tests/test_svm.py\n@@ -680,6 +680,47 @@ def test_unicode_kernel():\n                                 random_seed=0)\n \n \n+from scipy import sparse\n+import numpy as np\n+from sklearn import svm\n+\n+def test_sparse_fit_support_vectors_empty():\n+    # Regression test for #14893\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.04, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear')\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_no_support_vectors_due_to_epsilon():\n+    # Test case where high epsilon value results in no support vectors\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.1, 0.1, 0.1, 0.1])\n+    model = svm.SVR(kernel='linear', epsilon=0.5)\n+    model.fit(X_train, y_train)\n+    assert not model.support_vectors_.data.size\n+    assert not model.dual_coef_.data.size\n+\n+def test_sparse_fit_known_non_zero_support_vectors():\n+    # Test case where support vectors are properly formed with lower C value and epsilon\n+    X_train = sparse.csr_matrix([[0, 1, 0, 0],\n+                                 [0, 0, 0, 1],\n+                                 [0, 0, 1, 0],\n+                                 [0, 0, 0, 1]])\n+    y_train = np.array([0.04, 0.06, 0.10, 0.16])\n+    model = svm.SVR(kernel='linear', C=1, epsilon=0.01)\n+    model.fit(X_train, y_train)\n+    assert model.support_vectors_.data.size > 0\n+    assert model.dual_coef_.data.size > 0\n+\n+\n def test_sparse_precomputed():\n     clf = svm.SVC(kernel='precomputed')\n     sparse_gram = sparse.csr_matrix([[1, 0], [0, 1]])\n",
  "scikit-learn__scikit-learn-14983": "",
  "scikit-learn__scikit-learn-15512": "",
  "scikit-learn__scikit-learn-15535": "diff --git a/sklearn/metrics/cluster/tests/test_common.py b/sklearn/metrics/cluster/tests/test_common.py\nindex 9991cff..6b4342a 100644\n--- a/sklearn/metrics/cluster/tests/test_common.py\n+++ b/sklearn/metrics/cluster/tests/test_common.py\n@@ -166,6 +166,14 @@ def test_format_invariance(metric_name):\n         yield y + 1, 'strictly positive ints'\n \n     if metric_name in SUPERVISED_METRICS:\n+        def test_object_and_string_inputs():\n+            y_str_object = np.array([str(x) for x in y_true], dtype=object)\n+            y_str_normal = [str(x) for x in y_true]\n+\n+            assert metric(y_str_object, y_str_object) == score_1\n+            assert metric(y_str_normal, y_str_normal) == score_1\n+\n+        test_object_and_string_inputs()\n         metric = SUPERVISED_METRICS[metric_name]\n         score_1 = metric(y_true, y_pred)\n         y_true_gen = generate_formats(y_true)\n",
  "scikit-learn__scikit-learn-25500": "",
  "scikit-learn__scikit-learn-25570": "diff --git a/sklearn/compose/tests/test_column_transformer.py b/sklearn/compose/tests/test_column_transformer.py\nindex 23e3b97..8c5797c 100644\n--- a/sklearn/compose/tests/test_column_transformer.py\n+++ b/sklearn/compose/tests/test_column_transformer.py\n@@ -2121,6 +2121,62 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n     with pytest.raises(AttributeError, match=\"not provide get_feature_names_out\"):\n         ct.get_feature_names_out()\n \n+@pytest.mark.parametrize(\n+    \"empty_selection\",\n+    [[], np.array([False, False]), [False, False]],\n+    ids=[\"list\", \"bool\", \"bool_int\"],\n+)\n+def test_empty_selection_pandas_output(empty_selection):\n+    \"\"\"Check that pandas output works when there is an empty selection.\n+\n+    Non-regression test for gh-25487\n+    \"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    np = pytest.importorskip(\"numpy\")\n+    from sklearn.preprocessing import StandardScaler\n+    from sklearn.compose import ColumnTransformer\n+    from numpy.testing import assert_array_equal\n+\n+    X = pd.DataFrame([[1.0, 2.2], [3.0, 1.0]], columns=[\"a\", \"b\"])\n+    ct = ColumnTransformer(\n+        [\n+            (\"categorical\", \"passthrough\", empty_selection),\n+            (\"numerical\", StandardScaler(), [\"a\", \"b\"]),\n+        ],\n+        verbose_feature_names_out=True,\n+    )\n+    ct.set_output(transform=\"pandas\")\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"numerical__a\", \"numerical__b\"])\n+\n+    ct.set_params(verbose_feature_names_out=False)\n+    X_out = ct.fit_transform(X)\n+    assert_array_equal(X_out.columns, [\"a\", \"b\"])\n+\n+def test_column_transformer_with_no_features():\n+    \"\"\"Test ColumnTransformer with a transformer that applies to no features.\"\"\"\n+    pd = pytest.importorskip(\"pandas\")\n+    from sklearn.compose import ColumnTransformer\n+    from sklearn.pipeline import Pipeline\n+    from sklearn.impute import SimpleImputer\n+    from sklearn.preprocessing import RobustScaler\n+    from lightgbm import LGBMClassifier\n+\n+    X = pd.DataFrame(data=[[1.0, 2.0, 3.0, 4.0], [4, 2, 2, 5]],\n+                     columns=[\"a\", \"b\", \"c\", \"d\"])\n+    y = np.array([0, 1])\n+    categorical_features = []\n+    numerical_features = [\"a\", \"b\", \"c\"]\n+    model_preprocessing = (\"preprocessing\",\n+                           ColumnTransformer([\n+                               ('categorical', 'passthrough', categorical_features),\n+                               ('numerical', Pipeline([(\"scaler\", RobustScaler()),\n+                                                       (\"imputer\", SimpleImputer(strategy=\"median\"))\n+                                                       ]), numerical_features),\n+                           ], remainder='drop'))\n+    pipeline = Pipeline([model_preprocessing, (\"classifier\", LGBMClassifier())]).set_output(transform=\"pandas\")\n+    pipeline.fit(X, y)\n+\n     # The feature names are prefixed because verbose_feature_names_out=True is default\n     ct.set_output(transform=\"pandas\")\n     X_trans_df0 = ct.fit_transform(X_df)\n@@ -2128,4 +2184,4 @@ def test_transformers_with_pandas_out_but_not_feature_names_out(\n \n     ct.set_params(verbose_feature_names_out=False)\n     X_trans_df1 = ct.fit_transform(X_df)\n-    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n+    assert_array_equal(X_trans_df1.columns, expected_non_verbose_names)\n",
  "sphinx-doc__sphinx-10325": "diff --git a/tests/roots/test-ext-autodoc/target/inheritance.py b/tests/roots/test-ext-autodoc/target/inheritance.py\nindex ac389bf..7da6740 100644\n--- a/tests/roots/test-ext-autodoc/target/inheritance.py\n+++ b/tests/roots/test-ext-autodoc/target/inheritance.py\n@@ -11,7 +11,11 @@ class Base(object):\n         \"\"\"Inherited static method.\"\"\"\n \n \n-class Derived(Base):\n+class Ignored(list):\n+    def ignoredmeth(self):\n+        \"\"\"This should be ignored.\"\"\"\n+\n+class Derived(Base, Ignored):\n     def inheritedmeth(self):\n         # no docstring here\n-        pass\n+        pass\n",
  "sphinx-doc__sphinx-7975": "",
  "sphinx-doc__sphinx-8435": "diff --git a/tests/roots/test-ext-autodoc/target/annotations.py b/tests/roots/test-ext-autodoc/target/annotations.py\nindex 56eb16b..ff27ca8 100644\n--- a/tests/roots/test-ext-autodoc/target/annotations.py\n+++ b/tests/roots/test-ext-autodoc/target/annotations.py\n@@ -1,7 +1,9 @@\n+\n from __future__ import annotations\n \n from typing import overload\n \n+String = \"int\"  # Assuming this is the alias used for demonstration, as per the bug description\n myint = int\n \n \n@@ -22,4 +24,4 @@ def mult(x: float, y: float) -> float:\n \n def mult(x, y):\n     \"\"\"docstring\"\"\"\n-    return x, y\n+    return x, y\n",
  "sphinx-doc__sphinx-8506": "diff --git a/tests/test_domain_std.py b/tests/test_domain_std.py\nindex 08bd595..ac12ee3 100644\n--- a/tests/test_domain_std.py\n+++ b/tests/test_domain_std.py\n@@ -120,6 +120,28 @@ def test_glossary(app):\n                                                                      index)],\n                                                              definition)])],\n     ))\n+\n+def test_cmd_option_with_optional_value(app):\n+    text = \".. option:: -j[=N]\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        index,\n+        [desc, ([desc_signature, ([desc_name, '-j'],\n+                                 [desc_addname, '[=N]'])],\n+               [desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('-j', '-j', 'cmdoption', 'index', 'cmdoption-j', 1) in objects\n+\n+def test_cmd_option_starting_with_bracket(app):\n+    text = \".. option:: [enable=]PATTERN\"\n+    doctree = restructuredtext.parse(app, text)\n+    assert_node(doctree, (\n+        index,\n+        [desc, ([desc_signature, ([desc_name, '[enable'],\n+                                 [desc_addname, '=]PATTERN'])],\n+               [desc_content, ()])]))\n+    objects = list(app.env.get_domain(\"std\").get_objects())\n+    assert ('[enable', '[enable', 'cmdoption', 'index', 'cmdoption-arg-enable', 1) in objects\n     assert_node(doctree[0][0][0][0][1],\n                 entries=[(\"single\", \"term1\", \"term-term1\", \"main\", None)])\n     assert_node(doctree[0][0][0][1][1],\n",
  "sphinx-doc__sphinx-8595": "",
  "sphinx-doc__sphinx-8627": "diff --git a/tests/test_util_typing.py b/tests/test_util_typing.py\nindex 31df144..411251b 100644\n--- a/tests/test_util_typing.py\n+++ b/tests/test_util_typing.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n     test_util_typing\n     ~~~~~~~~~~~~~~~~\n@@ -10,6 +11,7 @@\n \n import sys\n from numbers import Integral\n+from struct import Struct\n from typing import (Any, Callable, Dict, Generator, List, NewType, Optional, Tuple, TypeVar,\n                     Union)\n \n@@ -46,7 +48,9 @@ def test_restify():\n     assert restify(Any) == \":obj:`Any`\"\n \n \n-def test_restify_type_hints_containers():\n+def test_restify_struct():\n+    # Check if struct.Struct resolves correctly\n+    assert restify(Struct) == \":class:`struct.Struct`\"\n     assert restify(List) == \":class:`List`\"\n     assert restify(Dict) == \":class:`Dict`\"\n     assert restify(List[int]) == \":class:`List`\\\\ [:class:`int`]\"\n",
  "sphinx-doc__sphinx-8713": "diff --git a/tests/test_ext_napoleon_docstring.py b/tests/test_ext_napoleon_docstring.py\nindex 89ff1bb..5934eea 100644\n--- a/tests/test_ext_napoleon_docstring.py\n+++ b/tests/test_ext_napoleon_docstring.py\n@@ -1434,8 +1434,34 @@ class NumpyDocstringTest(BaseDocstringTest):\n                      description of arg1\n         \"\"\")\n         self.assertEqual(expected, actual)\n+    def test_other_parameters_with_napoleon_use_param_false(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n \n-    def test_parameters_with_class_reference(self):\n+\"\"\"\n+        config = Config(napoleon_use_param=False)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:Other Parameters: **param2** (:class:`MyClass <name.space.MyClass>` instance)\n+\"\"\"\n+        self.assertEqual(expected, actual)\n+\n+    def test_other_parameters_with_napoleon_use_param_true(self):\n+        docstring = \"\"\"\\\n+Other Parameters\n+----------------\n+param2 : :class:`MyClass <name.space.MyClass>` instance\n+\n+\"\"\"\n+        config = Config(napoleon_use_param=True)\n+        actual = str(NumpyDocstring(docstring, config))\n+        expected = \"\"\"\\\n+:param param2:\n+:type param2: :class:`MyClass <name.space.MyClass>` instance\n+\"\"\"\n+        self.assertEqual(expected, actual)\n         docstring = \"\"\"\\\n Parameters\n ----------\n",
  "sphinx-doc__sphinx-8721": "diff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\nindex d4fba47..058e53c 100644\n--- a/tests/test_ext_viewcode.py\n+++ b/tests/test_ext_viewcode.py\n@@ -49,6 +49,10 @@ def test_viewcode(app, status, warning):\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\n \n \n+import pytest\n+from pathlib import Path\n+from sphinx.testing.path import path\n+\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\n def test_linkcode(app, status, warning):\n     app.builder.build(['objects'])\n",
  "sympy__sympy-12481": "diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py\nindex 58cf643..f68262e 100644\n--- a/sympy/combinatorics/tests/test_permutations.py\n+++ b/sympy/combinatorics/tests/test_permutations.py\n@@ -337,6 +337,20 @@ def test_args():\n     assert Permutation([[1, 2]]) == Permutation([0, 2, 1])\n     assert Permutation([[1], [4, 2]]) == Permutation([0, 1, 4, 3, 2])\n     assert Permutation([[1], [4, 2]], size=1) == Permutation([0, 1, 4, 3, 2])\n+    \n+    # Test cases for non-disjoint cycles\n+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])  # Should yield identity as per issue request\n+    assert Permutation([[0, 1, 2], [1, 2]]) == Permutation([0, 1, 2])  # Should apply in order\n+    assert Permutation([[0, 2, 1], [1, 0]]) == Permutation([0, 2, 1])  # Another order application case\n+    assert Permutation([[0, 1, 2, 3], [2, 3]]) == Permutation([0, 1, 3, 2])  # Applying subsequent cycles\n+    assert Permutation([[0, 1], [1, 2], [2, 0]]) == Permutation([0, 1, 2])  # Complex non-disjoint application\n+    assert Permutation([[0, 1], [0, 2], [1, 2]]) == Permutation([0, 2, 1])  # Multiple non-disjoints\n+    \n+    # Ensure no error is raised for valid non-disjoint cases\n+    try:\n+        Permutation([[0, 1], [1, 0]])  # No error expected\n+    except ValueError:\n+        assert False, \"A ValueError was raised for valid non-disjoint cycles\"\n     assert Permutation(\n         [[1], [4, 2]], size=6) == Permutation([0, 1, 4, 3, 2, 5])\n     assert Permutation([], size=3) == Permutation([0, 1, 2])\n",
  "sympy__sympy-13031": "diff --git a/sympy/matrices/tests/test_sparse.py b/sympy/matrices/tests/test_sparse.py\nindex 4d1c3fc..cfe75e9 100644\n--- a/sympy/matrices/tests/test_sparse.py\n+++ b/sympy/matrices/tests/test_sparse.py\n@@ -1,4 +1,5 @@\n-from sympy import Abs, S, Symbol, I, Rational, PurePoly\n+\n+from sympy import Abs, S, Symbol, I, Rational, PurePoly, Matrix, SparseMatrix\n from sympy.matrices import Matrix, SparseMatrix, eye, zeros, ShapeError\n from sympy.utilities.pytest import raises\n \n@@ -26,7 +27,12 @@ def test_sparse_matrix():\n     assert type(a.row_join(b)) == type(a)\n     assert type(a.col_join(b)) == type(a)\n \n-    # test element assignment\n+    # test hstack and vstack for zero-dimensional matrices\n+    sparse_matrices_hstack = [SparseMatrix.zeros(0, n) for n in range(4)]\n+    assert SparseMatrix.hstack(*sparse_matrices_hstack).shape == (0, 6), \"hstack test failed for zero-dimensional matrices\"\n+\n+    sparse_matrices_vstack = [SparseMatrix.zeros(n, 0) for n in range(4)]\n+    assert SparseMatrix.vstack(*sparse_matrices_vstack).shape == (6, 0), \"vstack test failed for zero-dimensional matrices\"\n     a = SparseMatrix((\n         (1, 0),\n         (0, 1)\n",
  "sympy__sympy-13471": "diff --git a/sympy/utilities/tests/test_pickling.py b/sympy/utilities/tests/test_pickling.py\nindex 52dcc20..6166bca 100644\n--- a/sympy/utilities/tests/test_pickling.py\n+++ b/sympy/utilities/tests/test_pickling.py\n@@ -82,7 +82,20 @@ def check(a, exclude=[], check_attr=True):\n #================== core =========================\n \n \n-def test_core_basic():\n+import sympy\n+import pickle\n+import sys\n+\n+def test_pickle_sympy_expression_with_float():\n+    # Simulating the old behaviour \n+    expr = sympy.symbols(\"x\") + 1.0\n+    pickled_expr = pickle.dumps(expr, protocol=2)\n+\n+    # Simulate Python 3 loading\n+    unpickled_expr = pickle.loads(pickled_expr)\n+    \n+    # The expression should be equal to the original\n+    assert unpickled_expr == expr\n     for c in (Atom, Atom(),\n               Basic, Basic(),\n               # XXX: dynamically created types are not picklable\n",
  "sympy__sympy-13480": "",
  "sympy__sympy-13647": "diff --git a/sympy/matrices/tests/test_commonmatrix.py b/sympy/matrices/tests/test_commonmatrix.py\nindex 9e436f2..3195332 100644\n--- a/sympy/matrices/tests/test_commonmatrix.py\n+++ b/sympy/matrices/tests/test_commonmatrix.py\n@@ -187,6 +187,23 @@ def test_col_join():\n                    [0, 0, 1],\n                    [7, 7, 7]])\n \n+def test_issue_13643_col_insert():\n+    from sympy import eye, Matrix, ones\n+\n+    # Original test case from the issue description\n+    M = eye(6)\n+    V = 2 * ones(6, 2)\n+\n+    result = M.col_insert(3, V)\n+    expected = Matrix([[1, 0, 0, 2, 2, 0, 0, 0],\n+                       [0, 1, 0, 2, 2, 0, 0, 0],\n+                       [0, 0, 1, 2, 2, 0, 0, 0],\n+                       [0, 0, 0, 2, 2, 1, 0, 0],\n+                       [0, 0, 0, 2, 2, 0, 1, 0],\n+                       [0, 0, 0, 2, 2, 0, 0, 1]])\n+\n+    assert result == expected\n+\n def test_row_insert():\n     r4 = Matrix([[4, 4, 4]])\n     for i in range(-4, 5):\n",
  "sympy__sympy-13971": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 92c6b34..07f1097 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -616,7 +616,17 @@ def test_latex_Range():\n     assert latex(Range(-2, -oo, -1)) == r'\\left\\{-2, -3, \\ldots, -\\infty\\right\\}'\n \n \n-def test_latex_sequences():\n+from sympy import symbols, latex\n+from sympy.series.sequences import SeqFormula\n+from sympy.abc import n\n+\n+def test_issue_seqformula_bracket_render():\n+    k, m, n = symbols('k m n', integer=True)\n+    s1 = SeqFormula(n**2, (n, 0, S.Infinity))\n+\n+    # Verify that the rendering does not escape brackets incorrectly\n+    expected_latex_str = r'[0, 1, 4, 9, \\ldots]'\n+    assert latex(s1) == expected_latex_str\n     s1 = SeqFormula(a**2, (0, oo))\n     s2 = SeqPer((1, 2))\n \n",
  "sympy__sympy-14396": "diff --git a/sympy/polys/tests/test_polyoptions.py b/sympy/polys/tests/test_polyoptions.py\nindex 07edaff..f47ca8f 100644\n--- a/sympy/polys/tests/test_polyoptions.py\n+++ b/sympy/polys/tests/test_polyoptions.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for options manager for :class:`Poly` and public API functions. \"\"\"\n \n from sympy.polys.polyoptions import (\n@@ -6,7 +7,7 @@ from sympy.polys.polyoptions import (\n     Frac, Formal, Polys, Include, All, Gen, Symbols, Method)\n \n from sympy.polys.orderings import lex\n-from sympy.polys.domains import FF, GF, ZZ, QQ, EX\n+from sympy.polys.domains import FF, GF, ZZ, QQ, RR, CC, EX\n \n from sympy.polys.polyerrors import OptionError, GeneratorsError\n \n",
  "sympy__sympy-14774": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\nindex 48a5cf2..3ffe7bb 100644\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     Add, Abs, Chi, Ci, CosineTransform, Dict, Ei, Eq, FallingFactorial,\n     FiniteSet, Float, FourierTransform, Function, IndexedBase, Integral,\n@@ -310,6 +311,19 @@ def test_latex_functions():\n     assert latex(factorial(-k)) == r\"\\left(- k\\right)!\"\n \n     assert latex(subfactorial(k)) == r\"!k\"\n+\n+    # Test for inverse trig functions with full name style\n+    x = Symbol('x')\n+    assert latex(acsc(x), inv_trig_style=\"full\") == r\"\\operatorname{arccsc}{\\left (x \\right )}\"\n+    assert latex(asec(x), inv_trig_style=\"full\") == r\"\\operatorname{arcsec}{\\left (x \\right )}\"\n+    \n+    # Tests with abbreviated style for reference\n+    assert latex(acsc(x), inv_trig_style=\"abbreviated\") == r\"\\operatorname{acsc}{\\left (x \\right )}\"\n+    assert latex(asec(x), inv_trig_style=\"abbreviated\") == r\"\\operatorname{asec}{\\left (x \\right )}\"\n+\n+    # Tests with power style for reference\n+    assert latex(acsc(x), inv_trig_style=\"power\") == r\"\\csc^{-1}{\\left (x \\right )}\"\n+    assert latex(asec(x), inv_trig_style=\"power\") == r\"\\sec^{-1}{\\left (x \\right )}\"\n     assert latex(subfactorial(-k)) == r\"!\\left(- k\\right)\"\n \n     assert latex(factorial2(k)) == r\"k!!\"\n",
  "sympy__sympy-14817": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 659f10f..5d1c73c 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -6110,8 +6110,29 @@ u(\"\"\"\\\n \"\"\")\n     assert upretty((1/y)*e.j) == ucode_str\n \n+from sympy import MatrixSymbol, pretty, symbols\n \n-def test_MatrixSymbol_printing():\n+def test_matrix_symbol_pretty_printing_issue_14814():\n+    # Import necessary symbols\n+    n, a = symbols('n a')\n+\n+    # Recreate original issue scenario:\n+    x = MatrixSymbol('x', n, n)\n+    y_star = MatrixSymbol('y*', n, n)\n+\n+    # Ensure pretty printing doesn't use sympify incorrectly\n+    assert pretty(x + y_star) == \"x + y*\"\n+\n+    # Other combinations to check robustness of fix\n+    assert pretty(-x + y_star) == \"-x + y*\"\n+    assert pretty(-x - y_star) == \"-x - y*\"\n+    assert pretty(x - y_star) == \"x - y*\"\n+\n+    # Additional complex expressions\n+    y = MatrixSymbol('y', n, n)\n+    z = MatrixSymbol('z*', n, n)\n+    assert pretty(-a*x + -2*y + z) == \"-a*x - 2*y + z*\"\n+    assert pretty(-a*x + 2*y - z) == \"-a*x + 2*y - z*\"\n     # test cases for issue #14237\n     A = MatrixSymbol(\"A\", 3, 3)\n     B = MatrixSymbol(\"B\", 3, 3)\n",
  "sympy__sympy-15011": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex ea56680..9e9cafa 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -720,6 +720,24 @@ def test_dummification():\n     lam = lambdify((F(t), G(t)), some_expr)\n     assert lam(3, 9) == 2\n     lam = lambdify(sin(t), 2 * sin(t)**2)\n+\n+def test_issue_matrixsymbol_curlybrackets():\n+    import sympy as sy\n+    curlyx = sy.symbols(\"{x}\")\n+    v = sy.MatrixSymbol(\"v\", 2, 1)\n+    curlyv = sy.MatrixSymbol(\"{v}\", 2, 1)\n+\n+    # These should work\n+    curlyScalarId = sy.lambdify(curlyx, curlyx)\n+    assert curlyScalarId(1) == 1\n+    vectorId = sy.lambdify(v, v)\n+    assert (vectorId([[1], [0]]) == [[1], [0]]).all()\n+\n+    # These should not raise SyntaxError\n+    curlyVectorId = sy.lambdify(curlyv, curlyv)\n+    assert (curlyVectorId([[1], [0]]) == [[1], [0]]).all()\n+    curlyVectorIdDummified = sy.lambdify(curlyv, curlyv, dummify=True)\n+    assert (curlyVectorIdDummified([[1], [0]]) == [[1], [0]]).all()\n     assert lam(F(t)) == 2 * F(t)**2\n     #Test that \\alpha was properly dummified\n     lam = lambdify((alpha, t), 2*alpha + t)\n",
  "sympy__sympy-15345": "diff --git a/sympy/printing/tests/test_mathematica.py b/sympy/printing/tests/test_mathematica.py\nindex 512f405..ac63dda 100644\n--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n@@ -1,8 +1,9 @@\n+\n from sympy.core import (S, pi, oo, symbols, Function,\n                         Rational, Integer, Tuple, Derivative)\n from sympy.integrals import Integral\n from sympy.concrete import Sum\n-from sympy.functions import exp, sin, cos, conjugate\n+from sympy.functions import exp, sin, cos, conjugate, Max, Min\n \n from sympy import mathematica_code as mcode\n \n@@ -23,6 +24,14 @@ def test_Rational():\n     assert mcode(x + Rational(3, 7)) == \"x + 3/7\"\n     assert mcode(Rational(3, 7)*x) == \"(3/7)*x\"\n \n+def test_Max_Min():\n+    # Test case for issue: ensuring Max is formatted correctly for Mathematica\n+    assert mcode(Max(x, 2)) == \"Max[x, 2]\"\n+    assert mcode(Max(2, x)) == \"Max[x, 2]\"  # Max should reorder for Mathematica syntax\n+    assert mcode(Max(3, x, y)) == \"Max[3, x, y]\"\n+    assert mcode(Max(x, y, z)*Min(y, z)) == \"Max[x, y, z]*Min[y, z]\"\n+    assert mcode(Min(x, 2)) == \"Min[x, 2]\"   # Additional test for Min function\n+\n \n def test_Function():\n     assert mcode(f(x, y, z)) == \"f[x, y, z]\"\n",
  "sympy__sympy-15609": "",
  "sympy__sympy-15678": "diff --git a/sympy/geometry/tests/test_util.py b/sympy/geometry/tests/test_util.py\nindex b9c1047..480fe63 100644\n--- a/sympy/geometry/tests/test_util.py\n+++ b/sympy/geometry/tests/test_util.py\n@@ -1,4 +1,5 @@\n-from sympy import Symbol, sqrt, Derivative, S\n+\n+from sympy import Symbol, sqrt, Derivative, S, Function, Eq, exp\n from sympy.geometry import Point, Point2D, Line, Circle ,Polygon, Segment, convex_hull, intersection, centroid\n from sympy.geometry.util import idiff, closest_points, farthest_points, _ordered_points\n from sympy.solvers.solvers import solve\n@@ -6,6 +7,21 @@ from sympy.utilities.pytest import raises\n \n \n def test_idiff():\n+    f = Function('f')\n+    g = Function('g')\n+    \n+    # Test case from the issue: idiff with Eq\n+    assert idiff(Eq(y * exp(y), x * exp(x)), y, x).simplify() == (x + 1) * exp(x - y) / (y + 1)\n+    \n+    # Test case from the issue: using function f(x)\n+    assert idiff(f(x) * exp(f(x)) - x * exp(x), f(x), x).simplify() == (x + 1) * exp(x - f(x)) / (f(x) + 1)\n+    \n+    # Test additional cases involving combinations of functions\n+    assert idiff(f(x) - y * exp(x), [f(x), y], x) == (y + Derivative(y, x)) * exp(x)\n+    assert idiff(f(x) - y * exp(x), [y, f(x)], x) == -y + exp(-x) * Derivative(f(x), x)\n+    assert idiff(f(x) - g(x), [f(x), g(x)], x) == Derivative(g(x), x)\n+\n+    # Existing tests below\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     t = Symbol('t', real=True)\n",
  "sympy__sympy-16792": "diff --git a/sympy/utilities/tests/test_codegen.py b/sympy/utilities/tests/test_codegen.py\nindex 6bc2605..73ad751 100644\n--- a/sympy/utilities/tests/test_codegen.py\n+++ b/sympy/utilities/tests/test_codegen.py\n@@ -581,8 +581,16 @@ def test_ccode_cse():\n         '}\\n'\n     )\n     assert source == expected\n-\n-def test_empty_f_code():\n+def test_ccode_unused_array_arg():\n+    from sympy.utilities.autowrap import autowrap\n+    from sympy import MatrixSymbol\n+    import numpy as np\n+    x = MatrixSymbol('x', 2, 1)\n+    # x does not appear in output\n+    expr = 1.0\n+    f = autowrap(expr, args=(x,), backend='cython')\n+    result = f(np.array([[1.0], [2.0]]))\n+    assert result == 1.0\n     code_gen = FCodeGen()\n     source = get_string(code_gen.dump_f95, [])\n     assert source == \"\"\n",
  "sympy__sympy-16988": "diff --git a/sympy/sets/tests/test_sets.py b/sympy/sets/tests/test_sets.py\nindex 1af3697..7e1a5db 100644\n--- a/sympy/sets/tests/test_sets.py\n+++ b/sympy/sets/tests/test_sets.py\n@@ -342,8 +342,40 @@ def test_intersection():\n     # issue 12178\n     assert Intersection() == S.UniversalSet\n \n+from sympy import symbols, Eq\n+from sympy.sets import Intersection, FiniteSet\n+from sympy.sets.sets import EmptySet\n \n-def test_issue_9623():\n+def test_issue_remove_duplicates_in_intersection():\n+    x = symbols('x')\n+\n+    # Test with duplicate elements\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x})\n+\n+    # Test that duplicates are removed and symbolic handling is correct\n+    assert Intersection({1}, {1}, {x}) == Intersection({1}, {x}) == \\\n+           FiniteSet(1) if x == 1 else S.EmptySet\n+\n+    # Test intersection resulting in an empty set when no common elements exist\n+    assert Intersection({1}, {2}, {3}) == S.EmptySet\n+\n+    # Test symbolic intersection with no duplicates\n+    assert Intersection({1}, {x}) == Piecewise((FiniteSet(1), Eq(x, 1)), (S.EmptySet, True))\n+\n+    # Test the intersection of multiple empty sets \n+    assert Intersection(S.EmptySet, S.EmptySet) == S.EmptySet\n+\n+    # Test that an intersection of sets with duplicates is reduced to a single set\n+    a = FiniteSet(1, 1, 2, 2)\n+    b = FiniteSet(2, 2, 3, 3)\n+    assert Intersection(a, b) == FiniteSet(2)\n+\n+    # Test intersection containing symbolic and numeric duplicates\n+    assert Intersection(FiniteSet(1, 1, x), FiniteSet(1, x, x)) == \\\n+           Piecewise((FiniteSet(1, x), Eq(x, 1)), (EmptySet(), True))\n+\n+    # Test intersection when one of the sets is universal\n+    assert Intersection(S.UniversalSet, {1, x}) == FiniteSet(1, x)\n     n = Symbol('n')\n \n     a = S.Reals\n",
  "sympy__sympy-17022": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex bd254ca..417be86 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -388,6 +388,24 @@ def test_numpy_matrix():\n     raises(Exception, lambda: lambdify(x, x_dot_mtx, printer=p3)(inp))\n \n \n+def test_issue_identity_matrix():\n+    if not numpy:\n+        skip(\"numpy not installed.\")\n+    \n+    from sympy import symbols\n+    n = symbols('n', integer=True)\n+\n+    # Test with fixed size matrices\n+    M = MatrixSymbol(\"M\", 2, 2)\n+    f_fixed_size = lambdify(M, M + Identity(2))\n+    ma_fixed = numpy.array([[1, 2], [3, 4]])\n+    mr_fixed = numpy.array([[2, 2], [3, 5]])\n+    numpy.testing.assert_array_equal(f_fixed_size(ma_fixed), mr_fixed)\n+\n+    # Test for symbolic size and expected error\n+    N = MatrixSymbol(\"N\", n, n)\n+    raises(NotImplementedError, lambda: lambdify(N, N + Identity(n)))\n+\n def test_numpy_transpose():\n     if not numpy:\n         skip(\"numpy not installed.\")\n",
  "sympy__sympy-17139": "",
  "sympy__sympy-17655": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex 6ec4f3e..5ba8052 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,12 +1,38 @@\n+\n from sympy import I, Rational, Symbol, pi, sqrt, S\n from sympy.geometry import Line, Point, Point2D, Point3D, Line3D, Plane\n from sympy.geometry.entity import rotate, scale, translate\n+from sympy import sympify\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.pytest import raises, warns\n \n+def test_geometry_point_multiplication():\n+    p1 = Point(0, 0)\n+    p2 = Point(1, 1)\n+\n+    # This should work fine:\n+    result1 = p1 + p2 * sympify(2.0)\n+    # This should yield the same output:\n+    result2 = p1 + sympify(2.0) * p2\n+\n+    assert result1 == result2\n+    assert result1 == Point(2, 2)\n+\n+    # Ensuring symmetry of multiplication with a Point\n+    assert p2 * sympify(2.0) == sympify(2.0) * p2\n+\n+    p3d1 = Point3D(0, 0, 0)\n+    p3d2 = Point3D(1, 1, 1)\n+    # Testing 3D points for completeness\n+    result3d1 = p3d1 + p3d2 * sympify(2.0)\n+    result3d2 = p3d1 + sympify(2.0) * p3d2\n+\n+    assert result3d1 == result3d2\n+    assert result3d1 == Point3D(2, 2, 2)\n \n-def test_point():\n+    # Ensuring symmetry of multiplication with a Point3D\n+    assert p3d2 * sympify(2.0) == sympify(2.0) * p3d2\n     x = Symbol('x', real=True)\n     y = Symbol('y', real=True)\n     x1 = Symbol('x1', real=True)\n",
  "sympy__sympy-18057": "diff --git a/sympy/core/tests/test_expr.py b/sympy/core/tests/test_expr.py\nindex 4d32b15..2df8882 100644\n--- a/sympy/core/tests/test_expr.py\n+++ b/sympy/core/tests/test_expr.py\n@@ -1894,6 +1894,34 @@ def test_normal():\n     assert e.normal() == e\n \n \n+from sympy import symbols, Symbol, sympify\n+import pytest\n+\n+class C:\n+    def __repr__(self):\n+        return 'x.y'\n+        \n+def test_sympy_equality_with_object_repr():\n+    # Regression test for issue: Sympy should not eval the repr of unknown object\n+    x = Symbol('x')\n+    c = C()\n+    \n+    # This should not raise an AttributeError\n+    assert (x == c) is False\n+    assert (x != c) is True\n+\n+def test_sympy_equality_with_object_repr_returning_symbol_name():\n+    class CReturnSymbol:\n+        def __repr__(self):\n+            return 'x'\n+    \n+    x = Symbol('x')\n+    c = CReturnSymbol()\n+    \n+    # This should not evaluate to true just because repr returns the symbol's name\n+    assert (x == c) is False\n+    assert (x != c) is True\n+\n def test_expr():\n     x = symbols('x')\n     raises(TypeError, lambda: tan(x).series(x, 2, oo, \"+\"))\n@@ -1902,4 +1930,4 @@ def test_expr():\n def test_ExprBuilder():\n     eb = ExprBuilder(Mul)\n     eb.args.extend([x, x])\n-    assert eb.build() == x**2\n+    assert eb.build() == x**2\n",
  "sympy__sympy-18189": "",
  "sympy__sympy-18532": "diff --git a/sympy/codegen/tests/test_cnodes.py b/sympy/codegen/tests/test_cnodes.py\nindex c30dccd..728f403 100644\n--- a/sympy/codegen/tests/test_cnodes.py\n+++ b/sympy/codegen/tests/test_cnodes.py\n@@ -1,6 +1,30 @@\n+\n+def test_atoms():\n+    typename = 'unsigned int'\n+    sz = sizeof(typename)\n+    # Check that atoms only returns objects with no .args\n+    assert sz.atoms() == {String('unsigned int'), String('sizeof')}\n+    # Check Variable type atoms\n+    var = Variable('v', type=int64)\n+    assert var.atoms() == {var}\n+\n+    # Check a basic instance\n+    basic_instance = Basic()\n+    assert basic_instance.atoms() == set([basic_instance])\n+\n+    # Check a Declaration\n+    decl = Declaration(Variable('v', type=int64))\n+    # Declaration and Variable should have no atoms if only objects with no .args are counted\n+    assert decl.atoms() == {var}\n+\n+    # Check a complex expression\n+    comp_expr = s = struct('vec2', [Variable('x', type=float64), Variable('y', type=float64)])\n+    # Comp_expr should return Variables and types as atoms\n+    assert comp_expr.atoms() == {Variable('x', type=float64), Variable('y', type=float64), float64}\n+\n from sympy.core.symbol import symbols\n from sympy.printing.ccode import ccode\n-from sympy.codegen.ast import Declaration, Variable, float64, int64\n+from sympy.codegen.ast import Declaration, Variable, float64, int64, String, Basic\n from sympy.codegen.cnodes import (\n     alignof, CommaOperator, goto, Label, PreDecrement, PostDecrement, PreIncrement, PostIncrement,\n     sizeof, union, struct\n@@ -66,8 +90,8 @@ def test_sizeof():\n     assert ccode(sz) == 'sizeof(%s)' % typename\n     assert sz.func(*sz.args) == sz\n     assert not sz.is_Atom\n-    assert all(atom == typename for atom in sz.atoms())\n-\n+    # Adjusted test for the issue, sz.atoms() should return leaf nodes (objects with no .args)\n+    assert all(isinstance(atom, String) and atom == String(typename) for atom in sz.atoms())\n \n def test_struct():\n     vx, vy = Variable(x, type=float64), Variable(y, type=float64)\n",
  "sympy__sympy-18621": "diff --git a/sympy/matrices/expressions/tests/test_blockmatrix.py b/sympy/matrices/expressions/tests/test_blockmatrix.py\nindex d31a1b0..a4ad9d2 100644\n--- a/sympy/matrices/expressions/tests/test_blockmatrix.py\n+++ b/sympy/matrices/expressions/tests/test_blockmatrix.py\n@@ -103,6 +103,16 @@ def test_block_collapse_explicit_matrices():\n     A = ImmutableSparseMatrix([[1, 2], [3, 4]])\n     assert block_collapse(BlockMatrix([[A]])) == A\n \n+def test_BlockDiagMatrix_single_element_conversion():\n+    from sympy import BlockDiagMatrix, Matrix\n+    M = Matrix([[1, 2], [3, 4]])\n+    D = BlockDiagMatrix(M)\n+    try:\n+        B = Matrix(D)\n+        assert B == M  # Assert that the conversion gives back the original Matrix M\n+    except TypeError:\n+        assert False, \"BlockDiagMatrix with one Matrix element should be convertible to a Matrix without raising errors.\"\n+\n def test_issue_17624():\n     a = MatrixSymbol(\"a\", 2, 2)\n     z = ZeroMatrix(2, 2)\n",
  "sympy__sympy-19007": "diff --git a/sympy/matrices/expressions/tests/test_indexing.py b/sympy/matrices/expressions/tests/test_indexing.py\nindex a623b25..b6843c8 100644\n--- a/sympy/matrices/expressions/tests/test_indexing.py\n+++ b/sympy/matrices/expressions/tests/test_indexing.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (symbols, MatrixSymbol, MatPow, BlockMatrix, KroneckerDelta,\n         Identity, ZeroMatrix, ImmutableMatrix, eye, Sum, Dummy, trace,\n         Symbol)\n@@ -67,6 +68,37 @@ def test_Identity_index():\n \n \n def test_block_index():\n+    # Test for the specific issue with symbolic indices in BlockMatrix\n+    from sympy import symbols, MatrixSymbol, BlockMatrix, MatrixElement, pprint\n+    n, i = symbols('n, i', integer=True)\n+    A = MatrixSymbol('A', 1, 1)\n+    B = MatrixSymbol('B', n, 1)\n+    C = BlockMatrix([[A], [B]])\n+    \n+    assert C[i, 0] == MatrixElement(C, i, 0)  # Ensure it handles the indexing without simplification\n+    \n+    # Additional edge case tests for the same issue\n+    C2 = BlockMatrix([[A, B.T]])\n+    assert C2[i, i] == MatrixElement(C2, i, i)  # Should not simplify to A[i, i] or B[i, i] without context\n+    \n+    C3 = BlockMatrix([[B], [B]])\n+    assert C3[n+i, 0] == MatrixElement(C3, n+i, 0)  # Check that it doesn't erroneously simplify\n+\n+    # Ensure existing tests are compatible with the fix\n+    I = Identity(3)\n+    Z = ZeroMatrix(3, 3)\n+    B = BlockMatrix([[I, I], [I, I]])\n+    e3 = ImmutableMatrix(eye(3))\n+    BB = BlockMatrix([[e3, e3], [e3, e3]])\n+    assert B[0, 0] == B[3, 0] == B[0, 3] == B[3, 3] == 1\n+    assert B[4, 3] == B[5, 1] == 0\n+\n+    BB = BlockMatrix([[e3, e3], [e3, e3]])\n+    assert B.as_explicit() == BB.as_explicit()\n+\n+    BI = BlockMatrix([[I, Z], [Z, I]])\n+\n+    assert BI.as_explicit().equals(eye(6))\n     I = Identity(3)\n     Z = ZeroMatrix(3, 3)\n     B = BlockMatrix([[I, I], [I, I]])\n",
  "sympy__sympy-19487": "diff --git a/sympy/functions/elementary/tests/test_complexes.py b/sympy/functions/elementary/tests/test_complexes.py\nindex bdb01ec..64b0efe 100644\n--- a/sympy/functions/elementary/tests/test_complexes.py\n+++ b/sympy/functions/elementary/tests/test_complexes.py\n@@ -302,7 +302,9 @@ def test_sign():\n     assert sign(x).rewrite(Heaviside) == 2*Heaviside(x, H0=S(1)/2) - 1\n     assert sign(y).rewrite(Heaviside) == sign(y)\n \n-    # evaluate what can be evaluated\n+    # Test if sign function rewrites correctly in terms of Abs\n+    assert sign(x).rewrite(Abs) == Piecewise((0, Eq(x, 0)), (x/Abs(x), True))\n+    assert sign(y).rewrite(Abs) == Piecewise((0, Eq(y, 0)), (y/Abs(y), True))\n     assert sign(exp_polar(I*pi)*pi) is S.NegativeOne\n \n     eq = -sqrt(10 + 6*sqrt(3)) + sqrt(1 + sqrt(3)) + sqrt(3 + 3*sqrt(3))\n",
  "sympy__sympy-20154": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex 13ccebd..3ab7f63 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -470,8 +470,21 @@ def test_multiset_permutations():\n         [1, 1, 0, 0, 0]\n         6\\n''')\n \n+from sympy.utilities.iterables import partitions\n \n-def test_partitions():\n+def test_partitions_memory_safety():\n+    # This test ensures that partitions do not reuse dictionary instances.\n+    partition_6_k_2 = list(partitions(6, k=2))\n+    partition_6_k_2_copy = [p.copy() for p in partitions(6, k=2)]\n+\n+    # Check if the original and copies are identical, this means no reuse\n+    assert partition_6_k_2 == partition_6_k_2_copy\n+\n+    # Modify one of the items in the first list and ensure it doesn't propagate\n+    partition_6_k_2[0][2] += 1\n+\n+    # Check if the modified list does not affect the copy\n+    assert partition_6_k_2 != partition_6_k_2_copy\n     ans = [[{}], [(0, {})]]\n     for i in range(2):\n         assert list(partitions(0, size=i)) == ans[i]\n",
  "sympy__sympy-20212": "diff --git a/sympy/core/tests/test_power.py b/sympy/core/tests/test_power.py\nindex 686973b..bc48efd 100644\n--- a/sympy/core/tests/test_power.py\n+++ b/sympy/core/tests/test_power.py\n@@ -254,6 +254,8 @@ def test_power_rewrite_exp():\n                     (sin, cos, tan, sec, csc, sinh, cosh, tanh))\n \n \n+from sympy import oo, S, power\n+\n def test_zero():\n     x = Symbol('x')\n     y = Symbol('y')\n@@ -266,8 +268,10 @@ def test_zero():\n     assert 0**(2*x*y) == 0**(x*y)\n     assert 0**(-2*x*y) == S.ComplexInfinity**(x*y)\n \n-\n-def test_pow_as_base_exp():\n+def test_issue_19572_pow_zero_to_negative_infinity():\n+    # Test the case 0**-oo and expect it to return zoo\n+    assert 0**-oo == S.ComplexInfinity\n+    assert power(0, -oo) == S.ComplexInfinity\n     x = Symbol('x')\n     assert (S.Infinity**(2 - x)).as_base_exp() == (S.Infinity, 2 - x)\n     assert (S.Infinity**(x - 2)).as_base_exp() == (S.Infinity, x - 2)\n",
  "sympy__sympy-20442": "",
  "sympy__sympy-20590": "diff --git a/sympy/core/tests/test_basic.py b/sympy/core/tests/test_basic.py\nindex 4d06d50..7740c7a 100644\n--- a/sympy/core/tests/test_basic.py\n+++ b/sympy/core/tests/test_basic.py\n@@ -28,6 +28,28 @@ def test__aresame():\n     assert not _aresame(Basic(2), Basic(2.))\n \n \n+import sympy\n+from sympy import Symbol\n+from pytest import raises\n+\n+def test_symbol_no_dict_in_1_6_2():\n+    # Simulate behavior as if we are testing version 1.6.2\n+    s = Symbol('s')\n+    with raises(AttributeError):\n+        _ = s.__dict__\n+\n+def test_symbol_dict_in_1_7_and_later():\n+    # Current behavior as of 1.7\n+    s = Symbol('s')\n+    assert hasattr(s, '__dict__'), \"Symbol instances now have a `__dict__` attribute.\"\n+    assert s.__dict__ == {}, \"The `__dict__` should be empty for a new Symbol instance.\"\n+\n+def test_immutable():\n+    b1 = sympy.Basic()  # Simulate Basic instance\n+    assert not hasattr(b1, '__dict__')\n+    with raises(AttributeError):\n+        b1.x = 1\n+\n def test_structure():\n     assert b21.args == (b2, b1)\n     assert b21.func(*b21.args) == b21\n",
  "sympy__sympy-21055": "diff --git a/sympy/assumptions/tests/test_refine.py b/sympy/assumptions/tests/test_refine.py\nindex 254f7e1..c6fe804 100644\n--- a/sympy/assumptions/tests/test_refine.py\n+++ b/sympy/assumptions/tests/test_refine.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (Abs, exp, Expr, I, pi, Q, Rational, refine, S, sqrt,\n                    atan, atan2, nan, Symbol, re, im, sign)\n from sympy.abc import w, x, y, z\n@@ -160,6 +161,21 @@ def test_sign():\n     x = Symbol('x', complex=True)\n     assert refine(sign(x), Q.zero(x)) == 0\n \n+def test_arg_in_integral():\n+    a = Symbol('a', positive=True, real=True)\n+    x = Symbol('x')\n+    J = Integral(sin(x) * exp(-a * x), (x, 0, oo)).doit()\n+    assert J == 1 / (a**2 + 1)\n+    # Test if refine can resolve the imaginary part refinement in the presence of positive assumptions\n+    expr = Piecewise((1/(a**2 + 1), 2*Abs(arg(a)) < pi), (Integral(exp(-a*x)*sin(x), (x, 0, oo)), True))\n+    refined_expr = refine(expr, Q.positive(a))\n+    assert refined_expr == 1 / (a**2 + 1)\n+\n+    # Check standalone arg refinement under positive assumption\n+    x = Symbol('x', complex=True)\n+    assert refine(arg(x), Q.positive(x)) == 0\n+    assert refine(arg(x), Q.negative(x)) == pi\n+\n \n def test_func_args():\n     class MyClass(Expr):\n",
  "sympy__sympy-21379": "diff --git a/sympy/functions/elementary/tests/test_piecewise.py b/sympy/functions/elementary/tests/test_piecewise.py\nindex 400b22e..ab7df7a 100644\n--- a/sympy/functions/elementary/tests/test_piecewise.py\n+++ b/sympy/functions/elementary/tests/test_piecewise.py\n@@ -9,6 +9,31 @@ from sympy.functions.elementary.piecewise import Undefined, ExprCondPair\n from sympy.printing import srepr\n from sympy.testing.pytest import raises, slow\n from sympy.simplify import simplify\n+from sympy.functions import sinh, exp\n+from sympy.core.cache import clear_cache\n+from sympy import Float\n+\n+def test_issue_21373():\n+    # Original issue reproduction\n+    x, y, z = symbols('x y z')\n+\n+    clear_cache()\n+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))\n+    assert expr.subs({1: 1.0}) == expr\n+\n+    clear_cache()\n+    x_r, y_r = symbols('x_r y_r', real=True)\n+    expr = exp(sinh(Piecewise((x_r, y_r > x_r), (y_r, True)) / z))\n+    assert expr.subs({1: Float(1.0)}) == expr\n+\n+    # Additional checks based on issue description\n+    # Check sinh with Piecewise and division\n+    expr2 = sinh(Piecewise((x, y > x), (y, True)) / z)\n+    assert expr2.subs({1: 1.0}) == expr2\n+\n+    # Check exp with a simple argument\n+    expr3 = exp(Piecewise((x, y > x), (y, True)) / z)\n+    assert expr3.subs({1: 1.0}) == expr3\n \n a, b, c, d, x, y = symbols('a:d, x, y')\n z = symbols('z', nonzero=True)\n",
  "sympy__sympy-21614": "diff --git a/sympy/core/tests/test_kind.py b/sympy/core/tests/test_kind.py\nindex 75302ca..6a957e8 100644\n--- a/sympy/core/tests/test_kind.py\n+++ b/sympy/core/tests/test_kind.py\n@@ -1,9 +1,11 @@\n+\n from sympy.core.add import Add\n from sympy.core.kind import NumberKind, UndefinedKind\n from sympy.core.mul import Mul\n from sympy.core.numbers import pi, zoo, I, AlgebraicNumber\n from sympy.core.singleton import S\n from sympy.core.symbol import Symbol\n+from sympy.core.function import Derivative\n from sympy.integrals.integrals import Integral\n from sympy.matrices import (Matrix, SparseMatrix, ImmutableMatrix,\n     ImmutableSparseMatrix, MatrixSymbol, MatrixKind, MatMul)\n@@ -39,6 +41,11 @@ def test_Integral_kind():\n     assert Integral(comm_x, comm_x).kind is NumberKind\n     assert Integral(A, comm_x).kind is MatrixKind(NumberKind)\n \n+def test_Derivative_kind():\n+    A = MatrixSymbol('A', 2, 2)\n+    assert Derivative(comm_x, comm_x).kind is NumberKind   # Verify with scalar\n+    assert Derivative(A, comm_x).kind is MatrixKind(NumberKind)  # Verify with MatrixSymbol\n+\n def test_Matrix_kind():\n     classes = (Matrix, SparseMatrix, ImmutableMatrix, ImmutableSparseMatrix)\n     for cls in classes:\n",
  "sympy__sympy-21847": "diff --git a/sympy/polys/tests/test_monomials.py b/sympy/polys/tests/test_monomials.py\nindex e0d22ab..0394b6c 100644\n--- a/sympy/polys/tests/test_monomials.py\n+++ b/sympy/polys/tests/test_monomials.py\n@@ -108,6 +108,21 @@ def test_monomials():\n \n     assert set(itermonomials([x], [0])) == {S.One}\n     assert set(itermonomials([x], [1])) == {S.One, x}\n+\n+    # Test case that specifically reproduces the issue reported\n+    monomials = sorted(itermonomials([x, y, z], 3, 3), key=monomial_key('grlex', [x, y, z]))\n+    assert set(monomials) == {x**3, x**2*y, x*y**2, y**3, x**2*z, x*y*z, y**2*z, x*z**2, y*z**2, z**3, y**2*x, x*y**2, z**2*y, z**2*x, x**2*z, y*z*x}\n+\n+    # Additional test cases for other configurations\n+    assert set(itermonomials([x, y], 3, 3)) == {x**3, x**2*y, x*y**2, y**3}\n+    assert set(itermonomials([x, y], 4, 3)) == {x**3, x**2*y, x*y**2, y**3, x**4, y**4}\n+    assert set(itermonomials([x, y, z], 2, 1)) == {x, y, z, x*y, x*z, y*z, x**2, y**2, z**2, x*y*z}\n+    assert set(itermonomials([x, y, z], 4, 3)) == {\n+        x**4, x**3*y, x**3*z, x**2*y**2, x**2*y*z, x**2*z**2, x*y**3, x*y**2*z, x*y*z**2,\n+        x*z**3, y**4, y**3*z, y**2*z**2, y*z**3, z**4, z**3*y, z**3*x, z**2*x*y, z*x*y**2}\n+\n+    # Edge case: No variables, should yield 1\n+    assert set(itermonomials([], 3, 3)) == {S.One}\n     assert set(itermonomials([x], [2])) == {S.One, x, x**2}\n     assert set(itermonomials([x], [3])) == {S.One, x, x**2, x**3}\n \n",
  "sympy__sympy-22005": "diff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\nindex 341f63c..7f8c030 100644\n--- a/sympy/solvers/tests/test_polysys.py\n+++ b/sympy/solvers/tests/test_polysys.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Tests for solvers of systems of polynomial equations. \"\"\"\n \n from sympy import (flatten, I, Integer, Poly, QQ, Rational, S, sqrt,\n@@ -49,8 +50,14 @@ def test_solve_poly_system():\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\n \n-\n-def test_solve_biquadratic():\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [x - 1], [x, y]))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        [y - 1], [x, y]))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        Poly(x - 1, x, y), (x, y)))\n+    raises(NotImplementedError, lambda: solve_poly_system(\n+        Poly(y - 1, x, y), (x, y)))\n     x0, y0, x1, y1, r = symbols('x0 y0 x1 y1 r')\n \n     f_1 = (x - 1)**2 + (y - 1)**2 - r**2\n",
  "sympy__sympy-22714": "diff --git a/sympy/geometry/tests/test_point.py b/sympy/geometry/tests/test_point.py\nindex b7bdbda..7057531 100644\n--- a/sympy/geometry/tests/test_point.py\n+++ b/sympy/geometry/tests/test_point.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.basic import Basic\n from sympy.core.numbers import (I, Rational, pi)\n from sympy.core.singleton import S\n@@ -9,6 +10,7 @@ from sympy.geometry.entity import rotate, scale, translate, GeometryEntity\n from sympy.matrices import Matrix\n from sympy.utilities.iterables import subsets, permutations, cartes\n from sympy.utilities.misc import Undecidable\n+from sympy.core.parameters import evaluate\n from sympy.testing.pytest import raises, warns\n \n \n",
  "sympy__sympy-22840": "diff --git a/sympy/simplify/tests/test_cse.py b/sympy/simplify/tests/test_cse.py\nindex aa734ef..7bae0e9 100644\n--- a/sympy/simplify/tests/test_cse.py\n+++ b/sympy/simplify/tests/test_cse.py\n@@ -347,6 +347,19 @@ def test_cse_MatrixSymbol():\n     B = MatrixSymbol(\"B\", n, n)\n     assert cse(B) == ([], [B])\n \n+def test_cse_MatrixSymbol_indexing():\n+    from sympy import MatrixSymbol, symbols, cse\n+    a = MatrixSymbol(\"a\", 4, 4)\n+    b = MatrixSymbol(\"b\", 4, 4)\n+\n+    # This test checks whether common subexpressions are recognized correctly \n+    # for expressions involving products of matrix elements.\n+    expr1 = a[0, 0]*a[0, 1] + a[0, 0]*a[0, 1]*a[0, 2]\n+    expected_subs = [(symbols('x0'), a[0, 0]*a[0, 1])]\n+    expected_reduced = [symbols('x0')*a[0, 2] + symbols('x0')]\n+\n+    assert cse(expr1) == (expected_subs, expected_reduced)\n+\n def test_cse_MatrixExpr():\n     A = MatrixSymbol('A', 3, 3)\n     y = MatrixSymbol('y', 3, 1)\n",
  "sympy__sympy-23117": "diff --git a/sympy/tensor/array/tests/test_ndim_array.py b/sympy/tensor/array/tests/test_ndim_array.py\nindex 8576cce..079e58a 100644\n--- a/sympy/tensor/array/tests/test_ndim_array.py\n+++ b/sympy/tensor/array/tests/test_ndim_array.py\n@@ -1,3 +1,4 @@\n+\n from sympy.testing.pytest import raises\n from sympy.functions.elementary.trigonometric import sin, cos\n from sympy.matrices.dense import Matrix\n@@ -37,6 +38,12 @@ def test_array_negative_indices():\n \n         assert test_array[-1, -1] == 10\n \n+def test_issue_17851():\n+    for ArrayType in array_types:\n+        A = ArrayType([])\n+        assert isinstance(A, ArrayType)\n+        assert A.shape == (0,)\n+        assert list(A) == []\n \n def test_issue_18361():\n     A = Array([sin(2 * x) - 2 * sin(x) * cos(x)])\n",
  "sympy__sympy-23262": "diff --git a/sympy/utilities/tests/test_lambdify.py b/sympy/utilities/tests/test_lambdify.py\nindex eed6f80..46cd241 100644\n--- a/sympy/utilities/tests/test_lambdify.py\n+++ b/sympy/utilities/tests/test_lambdify.py\n@@ -1175,14 +1175,25 @@ def test_scipy_polys():\n \n \n \n+import inspect\n+\n def test_lambdify_inspect():\n     f = lambdify(x, x**2)\n     # Test that inspect.getsource works but don't hard-code implementation\n     # details\n     assert 'x**2' in inspect.getsource(f)\n \n-\n-def test_issue_14941():\n+def test_lambdify_single_element_tuple():\n+    f = lambdify([], (1,))\n+    assert f() == (1,)\n+    # Using inspect to verify the function code formatting\n+    source_code = inspect.getsource(f)\n+    assert 'return (1,)' in source_code, \"Tuple with one element should include a comma\"\n+    \n+    f2 = lambdify([], (1, 2))\n+    assert f2() == (1, 2)\n+    source_code_f2 = inspect.getsource(f2)\n+    assert 'return (1, 2)' in source_code_f2, \"Tuple with two elements should be formatted correctly\"\n     x, y = Dummy(), Dummy()\n \n     # test dict\n",
  "sympy__sympy-24066": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex f2abc1d..39f5cd7 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -528,6 +528,32 @@ def test_issue_22819():\n     assert Da.scale_factor == 1.66053906660000e-24\n \n \n+def test_issue_24062():\n+    R = Quantity('R')\n+    C = Quantity('C')\n+    T = Quantity('T')\n+\n+    SI.set_quantity_dimension(R, impedance)\n+    SI.set_quantity_dimension(C, capacitance)\n+    SI.set_quantity_dimension(T, time)\n+\n+    R.set_global_relative_scale_factor(1, ohm)\n+    C.set_global_relative_scale_factor(1, farad)\n+    T.set_global_relative_scale_factor(1, second)\n+\n+    expr = T / (R * C)\n+    dim = SI._collect_factor_and_dimension(expr)[1]\n+    assert SI.get_dimension_system().is_dimensionless(dim)\n+\n+    exp_expr = 1 + exp(expr)\n+    assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n+\n+\n+from sympy import exp\n+from sympy.physics.units import impedance, capacitance, time, ohm, farad, second\n+from sympy.physics.units.systems.si import SI\n+from sympy.physics.units import Quantity\n+\n def test_issue_20288():\n     from sympy.core.numbers import E\n     from sympy.physics.units import energy\n",
  "sympy__sympy-24152": "diff --git a/sympy/physics/quantum/tests/test_tensorproduct.py b/sympy/physics/quantum/tests/test_tensorproduct.py\nindex bf36943..d78e813 100644\n--- a/sympy/physics/quantum/tests/test_tensorproduct.py\n+++ b/sympy/physics/quantum/tests/test_tensorproduct.py\n@@ -45,6 +45,29 @@ def test_tensor_product_expand():\n     assert TP(A + B, B + C).expand(tensorproduct=True) == \\\n         TP(A, B) + TP(A, C) + TP(B, B) + TP(B, C)\n \n+def test_tensor_product_bug_expansion_issue():\n+    # Original Issue Test Case\n+    U = Operator('U')\n+    V = Operator('V')\n+    P = TP(2*U - V, U + V)\n+    assert P.expand(tensorproduct=True) == \\\n+        2 * TP(U, U) + 2 * TP(U, V) - TP(V, U) - TP(V, V)\n+\n+    # Test with multiple expansions to ensure it completes as expected\n+    assert P.expand(tensorproduct=True).expand(tensorproduct=True) == \\\n+        2 * TP(U, U) + 2 * TP(U, V) - TP(V, U) - TP(V, V)\n+\n+    # Tests for zero tensor factor\n+    assert TP(0*U, V).expand(tensorproduct=True) == 0\n+\n+    # Original Test Patch extended\n+    A, B = Operator('A'), Operator('B')\n+    assert TP(A-B, B-A).expand(tensorproduct=True) == \\\n+        TP(A, B) - TP(A, A) - TP(B, B) + TP(B, A)\n+    assert TP(2*A + B, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A, A) + 2 * TP(A, B) + TP(B, A) + TP(B, B)\n+    assert TP(2 * A * B + A, A + B).expand(tensorproduct=True) == \\\n+        2 * TP(A*B, A) + 2 * TP(A*B, B) + TP(A, A) + TP(A, B)\n \n def test_tensor_product_commutator():\n     assert TP(Comm(A, B), C).doit().expand(tensorproduct=True) == \\\n",
  "sympy__sympy-24213": "diff --git a/sympy/physics/units/tests/test_quantities.py b/sympy/physics/units/tests/test_quantities.py\nindex 0bcbeb8..a9491fb 100644\n--- a/sympy/physics/units/tests/test_quantities.py\n+++ b/sympy/physics/units/tests/test_quantities.py\n@@ -1,3 +1,4 @@\n+\n import warnings\n \n from sympy.core.add import Add\n@@ -561,8 +562,46 @@ def test_issue_24062():\n     exp_expr = 1 + exp(expr)\n     assert SI._collect_factor_and_dimension(exp_expr) == (1 + E, Dimension(1))\n \n+def test_issue_24211():\n+    from sympy.physics.units import time, velocity, acceleration, second, meter, Quantity\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 1 * meter / second)\n+\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, 1 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 1 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n+\n+\n+def test_issue_24211_negative_acceleration():\n+    from sympy.physics.units import time, velocity, acceleration, second, meter, Quantity\n+    from sympy.physics.units.systems.si import SI\n+\n+    V1 = Quantity('V1')\n+    SI.set_quantity_dimension(V1, velocity)\n+    SI.set_quantity_scale_factor(V1, 2 * meter / second)\n \n-def test_prefixed_property():\n+    A1 = Quantity('A1')\n+    SI.set_quantity_dimension(A1, acceleration)\n+    SI.set_quantity_scale_factor(A1, -9.8 * meter / second**2)\n+\n+    T1 = Quantity('T1')\n+    SI.set_quantity_dimension(T1, time)\n+    SI.set_quantity_scale_factor(T1, 5 * second)\n+\n+    expr = A1*T1 + V1\n+    # should not throw ValueError here\n+    SI._collect_factor_and_dimension(expr)\n     assert not meter.is_prefixed\n     assert not joule.is_prefixed\n     assert not day.is_prefixed\n",
  "sympy__sympy-24909": "diff --git a/sympy/physics/units/tests/test_prefixes.py b/sympy/physics/units/tests/test_prefixes.py\nindex 3555f47..08face0 100644\n--- a/sympy/physics/units/tests/test_prefixes.py\n+++ b/sympy/physics/units/tests/test_prefixes.py\n@@ -1,8 +1,10 @@\n+\n from sympy.core.mul import Mul\n from sympy.core.numbers import Rational\n from sympy.core.singleton import S\n from sympy.core.symbol import (Symbol, symbols)\n-from sympy.physics.units import Quantity, length, meter\n+from sympy.physics.units import Quantity, length, meter, W, milli, volt\n+from sympy.core.singleton import S\n from sympy.physics.units.prefixes import PREFIXES, Prefix, prefix_unit, kilo, \\\n     kibi\n from sympy.physics.units.systems import SI\n@@ -27,7 +29,16 @@ def test_prefix_operations():\n     assert k / dodeca == S(1000) / 12\n     assert dodeca / dodeca == 1\n \n-    m = Quantity(\"fake_meter\")\n+    # Test cases for the milli prefix issue\n+    assert milli * W == W / 1000  # milli*W should evaluate to milliwatts (mW)\n+    assert W * milli == W / 1000  # Commutative case should also hold\n+    assert milli * volt != S.One  # Ensure it does not mistakenly evaluate to one\n+    assert milli * volt == volt / 1000  # milli*volt should evaluate to millivolts (mV)\n+\n+    # Additional general cases for Prefix behavior\n+    assert milli * meter == meter / 1000  # milli*meter should evaluate to millimeters\n+    assert meter * milli == meter / 1000  # Commutative for length units\n+    assert milli * Quantity(\"newton\") == Quantity(\"newton\") / 1000  # Pretend units\n     SI.set_quantity_dimension(m, S.One)\n     SI.set_quantity_scale_factor(m, S.One)\n \n",
  "django__django-12470": "diff --git a/tests/model_inheritance/tests.py b/tests/model_inheritance/tests.py\nindex 067de1c..d89ff1f 100644\n--- a/tests/model_inheritance/tests.py\n+++ b/tests/model_inheritance/tests.py\n@@ -1,12 +1,32 @@\n from operator import attrgetter\n \n+# Test to verify the issue with ordering by \"-pk\" in inherited models is resolved\n+class ModelInheritanceOrderingTests(TestCase):\n+    def test_inherited_ordering_pk_desc(self):\n+        # Create two Parent instances\n+        p1 = Parent.objects.create(first_name='John', email='john@example.com')\n+        p2 = Parent.objects.create(first_name='Jane', email='jane@example.com')\n+\n+        # Create two Child instances\n+        c1 = Child.objects.create(first_name='Alice', email='alice@example.com')\n+        c2 = Child.objects.create(first_name='Bob', email='bob@example.com')\n+\n+        # Check that Parent model instances are ordered by '-pk' by default\n+        parent_qs = Parent.objects.all()\n+        self.assertSequenceEqual(parent_qs, [p2, p1])\n+\n+        # Check that Child model instances are ordered by '-pk' inherited from Parent\n+        child_qs = Child.objects.all()\n+        self.assertSequenceEqual(child_qs, [c2, c1])\n+\n from django.core.exceptions import FieldError, ValidationError\n from django.db import connection, models\n from django.test import SimpleTestCase, TestCase\n from django.test.utils import CaptureQueriesContext, isolate_apps\n \n+from django.test import TestCase\n from .models import (\n-    Base, Chef, CommonInfo, GrandChild, GrandParent, ItalianRestaurant,\n+    Base, Chef, Child, CommonInfo, GrandChild, GrandParent, ItalianRestaurant,\n     MixinModel, ParkingLot, Place, Post, Restaurant, Student, SubBase,\n     Supplier, Title, Worker,\n )\n",
  "django__django-13033": "diff --git a/tests/ordering/tests.py b/tests/ordering/tests.py\nindex 8341ce9..7beba0a 100644\n--- a/tests/ordering/tests.py\n+++ b/tests/ordering/tests.py\n@@ -343,6 +343,45 @@ class OrderingTests(TestCase):\n             attrgetter(\"headline\")\n         )\n \n+    def test_order_by_self_referential_fk(self):\n+        # Setup the data that is analogous to the issue scenario\n+        author_1 = Author.objects.create(name=\"Author 1\")\n+        author_2 = Author.objects.create(name=\"Author 2\")\n+        editor_1 = Author.objects.create(name=\"Editor 1\", editor=author_1)\n+        editor_2 = Author.objects.create(name=\"Editor 2\", editor=author_2)\n+\n+        # Create articles linked to authors\n+        article_1 = Article.objects.create(headline=\"Article 1\", author=author_1)\n+        article_2 = Article.objects.create(headline=\"Article 2\", author=author_2)\n+\n+        # Validate the order_by behavior\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor'),\n+            [\n+                \"Article 2\",\n+                \"Article 1\",\n+            ],\n+            attrgetter(\"headline\")\n+        )\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('author__editor_id'),\n+            [\n+                \"Article 1\",\n+                \"Article 2\",\n+            ],\n+            attrgetter(\"headline\")\n+        )\n+\n+        # Test alternative ordering behavior\n+        self.assertQuerysetEqual(\n+            Article.objects.filter(author__isnull=False).order_by('-author__editor_id'),\n+            [\n+                \"Article 2\",\n+                \"Article 1\",\n+            ],\n+            attrgetter(\"headline\")\n+        )\n+\n     def test_order_by_f_expression(self):\n         self.assertQuerysetEqual(\n             Article.objects.order_by(F('headline')), [\n",
  "django__django-13265": "",
  "django__django-14534": "diff --git a/tests/forms_tests/tests/test_forms.py b/tests/forms_tests/tests/test_forms.py\nindex 2a8a572..08fd475 100644\n--- a/tests/forms_tests/tests/test_forms.py\n+++ b/tests/forms_tests/tests/test_forms.py\n@@ -3202,7 +3202,23 @@ Good luck picking a username that doesn&#x27;t already exist.</p>\n         self.assertEqual(form['field'].id_for_label, 'myCustomID')\n         self.assertEqual(form['field_none'].id_for_label, 'id_field_none')\n \n-    def test_boundfield_widget_type(self):\n+    def test_checkboxselectmultiple_subwidget_custom_id_for_label(self):\n+        \"\"\"\n+        Test that custom IDs are respected for CheckboxSelectMultiple subwidgets \n+        when auto_id is overridden.\n+        \"\"\"\n+        class SomeForm(Form):\n+            field = MultipleChoiceField(\n+                choices=[('x', 'X'), ('y', 'Y')],\n+                widget=CheckboxSelectMultiple(attrs={'id': 'custom'}),\n+            )\n+\n+        form = SomeForm(auto_id='prefix_%s')\n+        subwidgets = form['field'].subwidgets\n+\n+        # Check that each subwidget uses the custom ID specified in `attrs`\n+        self.assertEqual(subwidgets[0].id_for_label, 'custom_0')\n+        self.assertEqual(subwidgets[1].id_for_label, 'custom_1')\n         class SomeForm(Form):\n             first_name = CharField()\n             birthday = SplitDateTimeField(widget=SplitHiddenDateTimeWidget)\n",
  "django__django-16400": "",
  "matplotlib__matplotlib-25498": "diff --git a/lib/matplotlib/tests/test_colorbar.py b/lib/matplotlib/tests/test_colorbar.py\nindex ab066a3..0d9099c 100644\n--- a/lib/matplotlib/tests/test_colorbar.py\n+++ b/lib/matplotlib/tests/test_colorbar.py\n@@ -639,8 +639,39 @@ def test_colorbar_format(fmt):\n     assert (cbar.ax.yaxis.get_ticklabels()[0].get_text() ==\n             '$\\\\mathdefault{10^{-2}}$')\n \n+def test_colorbar_update_after_norm_change():\n+    # Test to ensure that updating the norm of the mappable updates the colorbar correctly.\n \n-def test_colorbar_scale_reset():\n+    # Create some mock data\n+    img = 10**np.random.normal(1, 1, size=(50, 50))\n+\n+    # Set up the plot and the colorbar\n+    fig, ax = plt.subplots()\n+    plot = ax.imshow(img, cmap='gray')\n+    cbar = fig.colorbar(plot, ax=ax)\n+\n+    # Change the normalization to LogNorm\n+    plot.norm = LogNorm()\n+\n+    # Update the colorbar\n+    cbar.update_normal(plot)\n+\n+    # Check if the colorbar scale is log\n+    assert cbar.ax.yaxis.get_scale() == 'log'\n+\n+    # Ensure the colorbar ticks have been updated according to the new norm\n+    assert cbar.norm.vmin == np.min(img)\n+    assert cbar.norm.vmax == np.max(img)\n+    \n+    # Now test with different mappable\n+    plot.norm = Normalize(vmin=0, vmax=20)\n+    cbar.update_normal(plot)\n+    assert cbar.ax.yaxis.get_scale() == 'linear'\n+    fig.canvas.draw()  # Make sure the update is processed\n+    \n+    # Ensure the normalization of colorbar is as expected\n+    assert cbar.norm.vmin == 0\n+    assert cbar.norm.vmax == 20\n     x, y = np.ogrid[-4:4:31j, -4:4:31j]\n     z = 120000*np.exp(-x**2 - y**2)\n \n",
  "pydata__xarray-4094": "",
  "scikit-learn__scikit-learn-25747": "diff --git a/sklearn/utils/tests/test_set_output.py b/sklearn/utils/tests/test_set_output.py\nindex f8a4a47..5b7e72c 100644\n--- a/sklearn/utils/tests/test_set_output.py\n+++ b/sklearn/utils/tests/test_set_output.py\n@@ -259,4 +259,34 @@ def test_set_output_mro():\n     class C(A, B):\n         pass\n \n-    assert C().transform(None) == \"B\"\n+    assert C().transform(None) == \"B\"\n+\n+def test_feature_union_pandas_output_with_aggregation():\n+    \"\"\"Test FeatureUnion with pandas output and data aggregation.\"\"\"\n+    import pandas as pd\n+    from sklearn.base import BaseEstimator, TransformerMixin\n+    from sklearn.pipeline import make_union\n+    from sklearn import set_config\n+    import numpy as np\n+\n+    class MyTransformer(BaseEstimator, TransformerMixin):\n+        def fit(self, X: pd.DataFrame, y: pd.Series = None, **kwargs):\n+            return self\n+\n+        def transform(self, X: pd.DataFrame, y: pd.Series = None) -> pd.DataFrame:\n+            return X[\"value\"].groupby(X[\"date\"]).sum().reset_index(name=\"value_sum\")\n+\n+    index = pd.date_range(start=\"2020-01-01\", end=\"2020-01-05\", inclusive=\"left\", freq=\"H\")\n+    data = pd.DataFrame(index=index, data={\"value\": [10] * len(index), \"date\": index.date})\n+\n+    # Set output as pandas\n+    set_config(transform_output=\"pandas\")\n+    result = make_union(MyTransformer()).fit_transform(data)\n+\n+    # Check the result is a DataFrame and the aggregation is correct.\n+    assert isinstance(result, pd.DataFrame)\n+    expected_dates = pd.date_range(start=\"2020-01-01\", periods=4, freq=\"D\")\n+    expected_values = np.array([240, 240, 240, 24])\n+    \n+    pd.testing.assert_index_equal(result[\"date\"], expected_dates)\n+    np.testing.assert_array_equal(result[\"value_sum\"], expected_values)\n",
  "sphinx-doc__sphinx-8801": "diff --git a/tests/test_ext_autodoc_autoclass.py b/tests/test_ext_autodoc_autoclass.py\nindex 37d6e17..feab61e 100644\n--- a/tests/test_ext_autodoc_autoclass.py\n+++ b/tests/test_ext_autodoc_autoclass.py\n@@ -106,6 +106,10 @@ def test_inherited_instance_variable(app):\n     ]\n \n \n+from . import do_autodoc\n+import pytest\n+import sys\n+\n def test_decorators(app):\n     actual = do_autodoc(app, 'class', 'target.decorator.Baz')\n     assert list(actual) == [\n",
  "sympy__sympy-15346": "diff --git a/sympy/simplify/tests/test_trigsimp.py b/sympy/simplify/tests/test_trigsimp.py\nindex cce4836..684fd9b 100644\n--- a/sympy/simplify/tests/test_trigsimp.py\n+++ b/sympy/simplify/tests/test_trigsimp.py\n@@ -1,3 +1,4 @@\n+\n from sympy import (\n     symbols, sin, simplify, cos, trigsimp, rad, tan, exptrigsimp,sinh,\n     cosh, diff, cot, Subs, exp, tanh, exp, S, integrate, I,Matrix,\n@@ -358,7 +359,20 @@ def test_issue_2827_trigsimp_methods():\n     assert exptrigsimp(eq) == eq\n \n \n-def test_exptrigsimp():\n+def test_issue_15219_trigsimp_rational():\n+    t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])\n+    t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])\n+    r1 = t1.dot(t2)\n+    assert trigsimp(r1) == cos(S(1) / 50)  # This should be simplified\n+\n+    r2 = sin(Rational(1, 50)) * sin(Rational(1, 25)) + cos(Rational(1, 50)) * cos(Rational(1, 25))\n+    assert trigsimp(r2) == cos(S(1) / 50)  # This should be simplified\n+\n+    # Check calculation via acos\n+    expr = acos(r2)\n+    assert expr.simplify() == acos(cos(S(1) / 50))\n+\n+    print(\"All tests passed for issue 15219.\")\n     def valid(a, b):\n         from sympy.utilities.randtest import verify_numerically as tn\n         if not (tn(a, b) and a == b):\n",
  "sympy__sympy-16503": "diff --git a/sympy/printing/pretty/tests/test_pretty.py b/sympy/printing/pretty/tests/test_pretty.py\nindex 39c905d..9868106 100644\n--- a/sympy/printing/pretty/tests/test_pretty.py\n+++ b/sympy/printing/pretty/tests/test_pretty.py\n@@ -4816,6 +4816,31 @@ ____  ____     \\n\\\n \u203e\u203e\u203e\u203e  \u203e\u203e\u203e\u203e     \\n\\\n y = 1 x = 0    \\\n \"\"\")\n+    expr = Sum(x, (x, 1, oo)) + 3\n+    ascii_str = \\\n+\"\"\"\\\n+  oo   \\n\\\n+ ___   \\n\\\n+ \\\\  `  \\n\\\n+  \\\\   x\\n\\\n+  /   + 3\\n\\\n+ /__,  \\n\\\n+x = 1  \\\n+\"\"\"\n+    ucode_str = \\\n+u(\"\"\"\\\n+  \u221e    \\n\\\n+ ___   \\n\\\n+ \u2572     \\n\\\n+  \u2572   x\\n\\\n+  \u2571   + 3\\n\\\n+ \u2571     \\n\\\n+ \u203e\u203e\u203e   \\n\\\n+x = 1  \\\n+\"\"\")\n+    assert pretty(expr) == ascii_str\n+    assert upretty(expr) == ucode_str\n+\n     expr = Sum(1/(1 + 1/(\n         1 + 1/k)) + 1, (k, 111, 1 + 1/n), (k, 1/(1 + m), oo)) + 1/(1 + 1/k)\n     ascii_str = \\\n",
  "sympy__sympy-18698": "",
  "sympy__sympy-18835": "diff --git a/sympy/utilities/tests/test_iterables.py b/sympy/utilities/tests/test_iterables.py\nindex b2b6202..cbfc42b 100644\n--- a/sympy/utilities/tests/test_iterables.py\n+++ b/sympy/utilities/tests/test_iterables.py\n@@ -692,7 +692,22 @@ def test_reshape():\n     raises(ValueError, lambda: reshape([0, 1], [-1]))\n     raises(ValueError, lambda: reshape([0, 1], [3]))\n \n+from sympy.utilities.iterables import uniq\n+from sympy.core.compatibility import raises\n+\n def test_uniq():\n+    f = [1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    f = [[1]]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    # Additional test for strings to ensure RuntimeError is raised\n+    f = list('THISTLE')\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n+    \n+    # Additional test with a more complex structure\n+    f = [1, 2, (3, 4), 1]\n+    raises(RuntimeError, lambda: [f.remove(i) for i in uniq(f)])\n     assert list(uniq(p.copy() for p in partitions(4))) == \\\n         [{4: 1}, {1: 1, 3: 1}, {2: 2}, {1: 2, 2: 1}, {1: 4}]\n     assert list(uniq(x % 2 for x in range(5))) == [0, 1]\n",
  "django__django-11797": "diff --git a/tests/lookup/tests.py b/tests/lookup/tests.py\nindex 7beeac3..b50247b 100644\n--- a/tests/lookup/tests.py\n+++ b/tests/lookup/tests.py\n@@ -1,3 +1,4 @@\n+\n import collections.abc\n from datetime import datetime\n from math import ceil\n@@ -8,6 +9,7 @@ from django.db import connection\n from django.db.models.expressions import Exists, OuterRef\n from django.db.models.functions import Substr\n from django.test import TestCase, skipUnlessDBFeature\n+from django.db.models import Max\n \n from .models import (\n     Article, Author, Game, IsNullWithNoneAsRHS, Player, Season, Tag,\n",
  "django__django-15320": "diff --git a/tests/expressions/tests.py b/tests/expressions/tests.py\nindex 35f7f03..007f50c 100644\n--- a/tests/expressions/tests.py\n+++ b/tests/expressions/tests.py\n@@ -546,6 +546,19 @@ class BasicExpressionsTests(TestCase):\n         subquery_test2 = Company.objects.filter(pk=Subquery(small_companies.filter(num_employees=3)))\n         self.assertCountEqual(subquery_test2, [self.foobar_ltd])\n \n+    def test_subquery_sql(self):\n+        from django.db import connection\n+        from myapp.models import Employee  # Replace `myapp` with the actual app name\n+\n+        employees = Employee.objects.all()\n+        employees_subquery = Subquery(employees)\n+        self.assertIs(employees_subquery.query.subquery, True)\n+        self.assertIs(employees.query.subquery, False)\n+        compiler = employees_subquery.query.get_compiler(connection=connection)\n+        sql, _ = employees_subquery.as_sql(compiler, connection)\n+        self.assertIn('(SELECT ', sql)\n+        self.assertTrue(sql.endswith(')'))\n+\n     def test_uuid_pk_subquery(self):\n         u = UUIDPK.objects.create()\n         UUID.objects.create(uuid_fk=u)\n",
  "django__django-15819": "diff --git a/tests/inspectdb/tests.py b/tests/inspectdb/tests.py\nindex 0ecd041..4a33b08 100644\n--- a/tests/inspectdb/tests.py\n+++ b/tests/inspectdb/tests.py\n@@ -434,6 +434,11 @@ class InspectDBTestCase(TestCase):\n         self.assertIn(\"# The error was:\", output)\n \n \n+from io import StringIO\n+from django.core.management import call_command\n+from django.test import TransactionTestCase\n+import mock\n+\n class InspectDBTransactionalTests(TransactionTestCase):\n     available_apps = [\"inspectdb\"]\n \n",
  "django__django-16408": "diff --git a/tests/known_related_objects/tests.py b/tests/known_related_objects/tests.py\nindex 019cc15..cb353f8 100644\n--- a/tests/known_related_objects/tests.py\n+++ b/tests/known_related_objects/tests.py\n@@ -1,3 +1,4 @@\n+\n from django.db.models import FilteredRelation\n from django.test import TestCase\n \n@@ -152,7 +153,20 @@ class ExistingRelatedInstancesTests(TestCase):\n             self.assertIs(pools[1], pools[1].poolstyle.pool)\n             self.assertIs(pools[2], pools[2].poolstyle.pool)\n \n-    def test_reverse_fk_select_related_multiple(self):\n+    def test_wrong_select_related(self):\n+        \"\"\"\n+        Test for the issue where select_related on a multi-level FilteredRelation\n+        may set the wrong related object.\n+        \"\"\"\n+        with self.assertNumQueries(3):\n+            pools = list(\n+                PoolStyle.objects.annotate(\n+                    tournament_pool=FilteredRelation('pool__tournament__pool'),\n+                ).select_related('tournament_pool')\n+            )\n+            # Ensuring that the tournament related to pool is same as\n+            # the tournament related to tournament_pool\n+            self.assertEqual(pools[0].pool.tournament, pools[0].tournament_pool.tournament)\n         with self.assertNumQueries(1):\n             ps = list(\n                 PoolStyle.objects.annotate(\n@@ -163,4 +177,4 @@ class ExistingRelatedInstancesTests(TestCase):\n                 .order_by(\"-pk\")\n             )\n             self.assertIs(ps[0], ps[0].pool_1.poolstyle)\n-            self.assertIs(ps[0], ps[0].pool_2.another_style)\n+            self.assertIs(ps[0], ps[0].pool_2.another_style)\n",
  "matplotlib__matplotlib-23476": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\nindex ad1a5e1..0167358 100644\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -1,3 +1,4 @@\n+\n import copy\n from datetime import datetime\n import io\n@@ -14,7 +15,9 @@ from PIL import Image\n import matplotlib as mpl\n from matplotlib import gridspec, rcParams\n from matplotlib.testing.decorators import image_comparison, check_figures_equal\n+import pickle\n from matplotlib.axes import Axes\n+from matplotlib.figure import Figure\n from matplotlib.figure import Figure, FigureBase\n from matplotlib.layout_engine import (ConstrainedLayoutEngine,\n                                       TightLayoutEngine)\n",
  "mwaskom__seaborn-2848": "diff --git a/tests/test_relational.py b/tests/test_relational.py\nindex 5a5e126..2d39507 100644\n--- a/tests/test_relational.py\n+++ b/tests/test_relational.py\n@@ -1,3 +1,4 @@\n+\n from itertools import product\n import numpy as np\n import matplotlib as mpl\n@@ -1623,7 +1624,24 @@ class TestScatterPlotter(SharedAxesLevelTests, Helpers):\n         _draw_figure(ax.figure)\n         assert_array_equal(ax.collections[0].get_facecolors(), colors)\n \n-    def test_linewidths(self, long_df):\n+    def test_pairgrid_hue_mapping_issue(self):\n+        import seaborn as sns\n+\n+        # Load the iris dataset\n+        iris = sns.load_dataset(\"iris\")\n+\n+        # Create a PairGrid object with a categorical hue using map\n+        g = sns.PairGrid(iris, y_vars=[\"sepal_length\", \"sepal_width\"], x_vars=[\"petal_length\", \"petal_width\"])\n+        # This should work without errors if the issue is resolved\n+        try:\n+            g.map(sns.scatterplot, hue=iris[\"species\"])\n+            g.map(sns.regplot, scatter=False)\n+            hue_mapping_works = True\n+        except Exception as e:\n+            hue_mapping_works = False\n+            print(f\"An error occurred: {e}\")\n+\n+        assert hue_mapping_works, \"PairGrid mapping with categorical hue raised an error.\"\n \n         f, ax = plt.subplots()\n \n",
  "pytest-dev__pytest-5413": "diff --git a/testing/code/test_excinfo.py b/testing/code/test_excinfo.py\nindex 226bfb9..6ca7e5d 100644\n--- a/testing/code/test_excinfo.py\n+++ b/testing/code/test_excinfo.py\n@@ -323,7 +323,18 @@ class TestTraceback_f_g_h:\n         assert entry.frame.code.name == \"g\"\n \n \n-def test_excinfo_exconly():\n+def test_pytest_raises_context_str():\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    # This tests that str(excinfo) returns the summary location and not the full exception message.\n+    assert str(excinfo).startswith(\"<ExceptionInfo LookupError\")\n+    assert \"A\" in str(excinfo) and \"B\" in str(excinfo) and \"C\" in str(excinfo)\n+\n+def test_pytest_raises_context_value_str():\n+    with pytest.raises(LookupError) as excinfo:\n+        raise LookupError(\"A\\nB\\nC\")\n+    # This tests that str(excinfo.value) returns the full exception message, matching standard exception behavior.\n+    assert str(excinfo.value) == \"A\\nB\\nC\"\n     excinfo = pytest.raises(ValueError, h)\n     assert excinfo.exconly().startswith(\"ValueError\")\n     with pytest.raises(ValueError) as excinfo:\n",
  "pytest-dev__pytest-6116": "diff --git a/testing/test_collection.py b/testing/test_collection.py\nindex c55a119..b7f8d90 100644\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n@@ -405,6 +405,11 @@ class TestCustomConftests:\n         result = testdir.runpytest(\"--collect-only\")\n         result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n \n+        # Test the new shortcut for --collect-only, assumed to be -c\n+        result_shortcut = testdir.runpytest(\"-c\")\n+        result_shortcut.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n     def test_pytest_collect_file_from_sister_dir(self, testdir):\n         sub1 = testdir.mkpydir(\"sub1\")\n         sub2 = testdir.mkpydir(\"sub2\")\n@@ -434,6 +439,11 @@ class TestCustomConftests:\n         p.copy(sub1.join(p.basename))\n         p.copy(sub2.join(p.basename))\n         result = testdir.runpytest(\"--collect-only\")\n+        result.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n+\n+        # Test the new shortcut for --collect-only, assumed to be -c\n+        result_shortcut = testdir.runpytest(\"-c\")\n+        result_shortcut.stdout.fnmatch_lines([\"*MyModule*\", \"*test_x*\"])\n         result.stdout.fnmatch_lines([\"*MyModule1*\", \"*MyModule2*\", \"*test_x*\"])\n \n \n",
  "sphinx-doc__sphinx-10451": "diff --git a/tests/roots/test-ext-autodoc/target/typehints.py b/tests/roots/test-ext-autodoc/target/typehints.py\nindex 100ea06..2a97ab1 100644\n--- a/tests/roots/test-ext-autodoc/target/typehints.py\n+++ b/tests/roots/test-ext-autodoc/target/typehints.py\n@@ -94,8 +94,14 @@ def missing_attr(c,\n class _ClassWithDocumentedInit:\n     \"\"\"Class docstring.\"\"\"\n \n-    def __init__(self, x: int) -> None:\n+    def __init__(self, x: int, *args: int, **kwargs: int) -> None:\n         \"\"\"Init docstring.\n \n         :param x: Some integer\n-        \"\"\"\n+        :param *args: Some integer\n+        :param **kwargs: Some integer\n+        \"\"\"\n+        \"\"\"Init docstring.\n+\n+        :param x: Some integer\n+        \"\"\"\n",
  "sympy__sympy-12419": "diff --git a/sympy/matrices/expressions/tests/test_matexpr.py b/sympy/matrices/expressions/tests/test_matexpr.py\nindex 200c61d..13b90fb 100644\n--- a/sympy/matrices/expressions/tests/test_matexpr.py\n+++ b/sympy/matrices/expressions/tests/test_matexpr.py\n@@ -80,6 +80,22 @@ def test_Identity():\n     assert A*Im == A\n     assert In*A == A\n \n+    # Testing the sum of elements of an identity matrix\n+    # where the expected sum should be 'n'\n+    i, j = symbols('i j', integer=True)\n+    assert Sum(In[i, j], (i, 0, n-1), (j, 0, n-1)).subs(n, 3).doit() == 3\n+\n+    # Testing with specific n=3 identity matrix\n+    In3 = Identity(3)\n+    assert sum(In3[i, j] for i in range(3) for j in range(3)) == 3\n+\n+    # Testing with a symbolic identity matrix\n+    assert Sum(Sum(In[i, j], (i, 0, n-1)), (j, 0, n-1)).doit().subs(n, 4) == 4\n+\n+    # Ensure it works with larger n values\n+    n_val = 5\n+    assert Sum(Identity(n_val)[i, j], (i, 0, n_val-1), (j, 0, n_val-1)).doit() == n_val\n+\n     assert transpose(In) == In\n     assert In.inverse() == In\n     assert In.conjugate() == In\n",
  "sympy__sympy-20049": "",
  "sympy__sympy-21612": "diff --git a/sympy/parsing/tests/test_latex.py b/sympy/parsing/tests/test_latex.py\nindex b252985..7c8dad5 100644\n--- a/sympy/parsing/tests/test_latex.py\n+++ b/sympy/parsing/tests/test_latex.py\n@@ -251,7 +251,14 @@ def test_parseable():\n     for latex_str, sympy_expr in GOOD_PAIRS:\n         assert parse_latex(latex_str) == sympy_expr, latex_str\n \n-# These bad LaTeX strings should raise a LaTeXParsingError when parsed\n+from sympy.parsing.latex import parse_latex\n+\n+def test_issue_21537():\n+    # Testing the problematic latex expression from issue 21537\n+    expr = parse_latex(r\"\\frac{\\frac{a^3+b}{c}}{\\frac{1}{c^2}}\")\n+    expected = ((a**3 + b)/c)/(1/c**2)\n+\n+    assert expr == expected, f\"Expected {expected}, got {expr}\"\n BAD_STRINGS = [\n     r\"(\",\n     r\")\",\n"
}